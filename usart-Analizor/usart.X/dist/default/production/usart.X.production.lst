

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Fri Aug 28 16:10:51 2020

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18LF46K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK3,global,class=CODE,delta=1,noexec
     8                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     9                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    10                           	psect	nvBANK3,global,class=BANK3,space=1,delta=1,lowdata,noexec
    11                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    12                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    15                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    16                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    17                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1,lowdata,noexec
    18                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1,lowdata,noexec
    19                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1,lowdata,noexec
    20                           	psect	bssBANK5,global,class=BANK5,space=1,delta=1,lowdata,noexec
    21                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1,lowdata,noexec
    22                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    23                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    24                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    25                           	psect	text0,global,reloc=2,class=CODE,delta=1
    26                           	psect	text1,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=1
    28                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    29                           	psect	text4,global,reloc=2,class=CODE,delta=1
    30                           	psect	text5,global,reloc=2,class=CODE,delta=1
    31                           	psect	text6,global,reloc=2,class=CODE,delta=1
    32                           	psect	text7,global,reloc=2,class=CODE,delta=1
    33                           	psect	text8,global,reloc=2,class=CODE,delta=1
    34                           	psect	text9,global,reloc=2,class=CODE,delta=1
    35                           	psect	text10,global,reloc=2,class=CODE,delta=1
    36                           	psect	text11,global,reloc=2,class=CODE,delta=1
    37                           	psect	text12,global,reloc=2,class=CODE,delta=1
    38                           	psect	text13,global,reloc=2,class=CODE,delta=1
    39                           	psect	text14,global,reloc=2,class=CODE,delta=1
    40                           	psect	text15,global,reloc=2,class=CODE,delta=1
    41                           	psect	text16,global,reloc=2,class=CODE,delta=1
    42                           	psect	text17,global,reloc=2,class=CODE,delta=1
    43                           	psect	text18,global,reloc=2,class=CODE,delta=1
    44                           	psect	text19,global,reloc=2,class=CODE,delta=1
    45                           	psect	text20,global,reloc=2,class=CODE,delta=1
    46                           	psect	text21,global,reloc=2,class=CODE,delta=1
    47                           	psect	text22,global,reloc=2,class=CODE,delta=1
    48                           	psect	text23,global,reloc=2,class=CODE,delta=1
    49                           	psect	text24,global,reloc=2,class=CODE,delta=1
    50                           	psect	text25,global,reloc=2,class=CODE,delta=1
    51                           	psect	text26,global,reloc=2,class=CODE,delta=1
    52                           	psect	text27,global,reloc=2,class=CODE,delta=1
    53                           	psect	text28,global,reloc=2,class=CODE,delta=1
    54                           	psect	text29,global,reloc=2,class=CODE,delta=1
    55                           	psect	text30,global,reloc=2,class=CODE,delta=1
    56                           	psect	text31,global,reloc=2,class=CODE,delta=1
    57                           	psect	text32,global,reloc=2,class=CODE,delta=1
    58                           	psect	text33,global,reloc=2,class=CODE,delta=1
    59                           	psect	text34,global,reloc=2,class=CODE,delta=1
    60                           	psect	text35,global,reloc=2,class=CODE,delta=1
    61                           	psect	text36,global,reloc=2,class=CODE,delta=1
    62                           	psect	text37,global,reloc=2,class=CODE,delta=1
    63                           	psect	text38,global,reloc=2,class=CODE,delta=1
    64                           	psect	text39,global,reloc=2,class=CODE,delta=1
    65                           	psect	text40,global,reloc=2,class=CODE,delta=1
    66                           	psect	text41,global,reloc=2,class=CODE,delta=1
    67                           	psect	text42,global,reloc=2,class=CODE,delta=1
    68                           	psect	text43,global,reloc=2,class=CODE,delta=1
    69                           	psect	text44,global,reloc=2,class=CODE,delta=1
    70                           	psect	text45,global,reloc=2,class=CODE,delta=1
    71                           	psect	text46,global,reloc=2,class=CODE,delta=1
    72                           	psect	text47,global,reloc=2,class=CODE,delta=1
    73                           	psect	text48,global,reloc=2,class=CODE,delta=1
    74                           	psect	text49,global,reloc=2,class=CODE,delta=1
    75                           	psect	text50,global,reloc=2,class=CODE,delta=1
    76                           	psect	text51,global,reloc=2,class=CODE,delta=1
    77                           	psect	text52,global,reloc=2,class=CODE,delta=1
    78                           	psect	text53,global,reloc=2,class=CODE,delta=1
    79                           	psect	text54,global,reloc=2,class=CODE,delta=1
    80                           	psect	text55,global,reloc=2,class=CODE,delta=1
    81                           	psect	text56,global,reloc=2,class=CODE,delta=1
    82                           	psect	text57,global,reloc=2,class=CODE,delta=1
    83                           	psect	text58,global,reloc=2,class=CODE,delta=1
    84                           	psect	text59,global,reloc=2,class=CODE,delta=1,group=1
    85                           	psect	text60,global,reloc=2,class=CODE,delta=1
    86                           	psect	text61,global,reloc=2,class=CODE,delta=1
    87                           	psect	text62,global,reloc=2,class=CODE,delta=1
    88                           	psect	text63,global,reloc=2,class=CODE,delta=1
    89                           	psect	text64,global,reloc=2,class=CODE,delta=1
    90                           	psect	text65,global,reloc=2,class=CODE,delta=1
    91                           	psect	text66,global,reloc=2,class=CODE,delta=1
    92                           	psect	text67,global,reloc=2,class=CODE,delta=1
    93                           	psect	text68,global,reloc=2,class=CODE,delta=1
    94                           	psect	text69,global,reloc=2,class=CODE,delta=1
    95                           	psect	text70,global,reloc=2,class=CODE,delta=1
    96                           	psect	text71,global,reloc=2,class=CODE,delta=1
    97                           	psect	text72,global,reloc=2,class=CODE,delta=1
    98                           	psect	text73,global,reloc=2,class=CODE,delta=1,group=1
    99                           	psect	text74,global,reloc=2,class=CODE,delta=1
   100                           	psect	text75,global,reloc=2,class=CODE,delta=1
   101                           	psect	text76,global,reloc=2,class=CODE,delta=1
   102                           	psect	text77,global,reloc=2,class=CODE,delta=1
   103                           	psect	text78,global,reloc=2,class=CODE,delta=1
   104                           	psect	text79,global,reloc=2,class=CODE,delta=1
   105                           	psect	text80,global,reloc=2,class=CODE,delta=1
   106                           	psect	text81,global,reloc=2,class=CODE,delta=1
   107                           	psect	text82,global,reloc=2,class=CODE,delta=1
   108                           	psect	text83,global,reloc=2,class=CODE,delta=1
   109                           	psect	text84,global,reloc=2,class=CODE,delta=1
   110                           	psect	text85,global,reloc=2,class=CODE,delta=1
   111                           	psect	text86,global,reloc=2,class=CODE,delta=1
   112                           	psect	text87,global,reloc=2,class=CODE,delta=1
   113                           	psect	text88,global,reloc=2,class=CODE,delta=1
   114                           	psect	text89,global,reloc=2,class=CODE,delta=1
   115                           	psect	text90,global,reloc=2,class=CODE,delta=1
   116                           	psect	text91,global,reloc=2,class=CODE,delta=1
   117                           	psect	text92,global,reloc=2,class=CODE,delta=1
   118                           	psect	text93,global,reloc=2,class=CODE,delta=1
   119                           	psect	text94,global,reloc=2,class=CODE,delta=1
   120                           	psect	text95,global,reloc=2,class=CODE,delta=1
   121                           	psect	text96,global,reloc=2,class=CODE,delta=1
   122                           	psect	text97,global,reloc=2,class=CODE,delta=1
   123                           	psect	text98,global,reloc=2,class=CODE,delta=1
   124                           	psect	text99,global,reloc=2,class=CODE,delta=1
   125                           	psect	text100,global,reloc=2,class=CODE,delta=1
   126                           	psect	text101,global,reloc=2,class=CODE,delta=1
   127                           	psect	text102,global,reloc=2,class=CODE,delta=1
   128                           	psect	text103,global,reloc=2,class=CODE,delta=1
   129                           	psect	text104,global,reloc=2,class=CODE,delta=1
   130                           	psect	text105,global,reloc=2,class=CODE,delta=1,group=1
   131                           	psect	text106,global,reloc=2,class=CODE,delta=1
   132                           	psect	text107,global,reloc=2,class=CODE,delta=1
   133                           	psect	text108,global,reloc=2,class=CODE,delta=1
   134                           	psect	text109,global,reloc=2,class=CODE,delta=1
   135                           	psect	text110,global,reloc=2,class=CODE,delta=1
   136                           	psect	text111,global,reloc=2,class=CODE,delta=1
   137                           	psect	text112,global,reloc=2,class=CODE,delta=1
   138                           	psect	text113,global,reloc=2,class=CODE,delta=1
   139                           	psect	text114,global,reloc=2,class=CODE,delta=1
   140                           	psect	text115,global,reloc=2,class=CODE,delta=1
   141                           	psect	text116,global,reloc=2,class=CODE,delta=1
   142                           	psect	text117,global,reloc=2,class=CODE,delta=1
   143                           	psect	text118,global,reloc=2,class=CODE,delta=1
   144                           	psect	text119,global,reloc=2,class=CODE,delta=1
   145                           	psect	text120,global,reloc=2,class=CODE,delta=1
   146                           	psect	text121,global,reloc=2,class=CODE,delta=1
   147                           	psect	text122,global,reloc=2,class=CODE,delta=1
   148                           	psect	text123,global,reloc=2,class=CODE,delta=1
   149                           	psect	text124,global,reloc=2,class=CODE,delta=1
   150                           	psect	text125,global,reloc=2,class=CODE,delta=1
   151                           	psect	text126,global,reloc=2,class=CODE,delta=1
   152                           	psect	text127,global,reloc=2,class=CODE,delta=1
   153                           	psect	text128,global,reloc=2,class=CODE,delta=1
   154                           	psect	text129,global,reloc=2,class=CODE,delta=1
   155                           	psect	text130,global,reloc=2,class=CODE,delta=1
   156                           	psect	text131,global,reloc=2,class=CODE,delta=1
   157                           	psect	text132,global,reloc=2,class=CODE,delta=1
   158                           	psect	text133,global,reloc=2,class=CODE,delta=1
   159                           	psect	text134,global,reloc=2,class=CODE,delta=1
   160                           	psect	text135,global,reloc=2,class=CODE,delta=1
   161                           	psect	text136,global,reloc=2,class=CODE,delta=1
   162                           	psect	text137,global,reloc=2,class=CODE,delta=1
   163                           	psect	text138,global,reloc=2,class=CODE,delta=1
   164                           	psect	text139,global,reloc=2,class=CODE,delta=1
   165                           	psect	text140,global,reloc=2,class=CODE,delta=1
   166                           	psect	text141,global,reloc=2,class=CODE,delta=1
   167                           	psect	text142,global,reloc=2,class=CODE,delta=1
   168                           	psect	text143,global,reloc=2,class=CODE,delta=1
   169                           	psect	text144,global,reloc=2,class=CODE,delta=1
   170                           	psect	text145,global,reloc=2,class=CODE,delta=1
   171                           	psect	text146,global,reloc=2,class=CODE,delta=1
   172                           	psect	text147,global,reloc=2,class=CODE,delta=1
   173                           	psect	text148,global,reloc=2,class=CODE,delta=1
   174                           	psect	text149,global,reloc=2,class=CODE,delta=1,group=1
   175                           	psect	text150,global,reloc=2,class=CODE,delta=1,group=1
   176                           	psect	text151,global,reloc=2,class=CODE,delta=1
   177                           	psect	text152,global,reloc=2,class=CODE,delta=1
   178                           	psect	text153,global,reloc=2,class=CODE,delta=1
   179                           	psect	text154,global,reloc=2,class=CODE,delta=1
   180                           	psect	text155,global,reloc=2,class=CODE,delta=1
   181                           	psect	text156,global,reloc=2,class=CODE,delta=1
   182                           	psect	text157,global,reloc=2,class=CODE,delta=1
   183                           	psect	text158,global,reloc=2,class=CODE,delta=1
   184                           	psect	text159,global,reloc=2,class=CODE,delta=1
   185                           	psect	text160,global,reloc=2,class=CODE,delta=1,group=1
   186                           	psect	text161,global,reloc=2,class=CODE,delta=1
   187                           	psect	text162,global,reloc=2,class=CODE,delta=1
   188                           	psect	text163,global,reloc=2,class=CODE,delta=1
   189                           	psect	text164,global,reloc=2,class=CODE,delta=1
   190                           	psect	text165,global,reloc=2,class=CODE,delta=1
   191                           	psect	text166,global,reloc=2,class=CODE,delta=1
   192                           	psect	text167,global,reloc=2,class=CODE,delta=1
   193                           	psect	text168,global,reloc=2,class=CODE,delta=1
   194                           	psect	text169,global,reloc=2,class=CODE,delta=1
   195                           	psect	text170,global,reloc=2,class=CODE,delta=1
   196                           	psect	text171,global,reloc=2,class=CODE,delta=1
   197                           	psect	text172,global,reloc=2,class=CODE,delta=1
   198                           	psect	text173,global,reloc=2,class=CODE,delta=1,group=1
   199                           	psect	text174,global,reloc=2,class=CODE,delta=1
   200                           	psect	text175,global,reloc=2,class=CODE,delta=1
   201                           	psect	text176,global,reloc=2,class=CODE,delta=1
   202                           	psect	text177,global,reloc=2,class=CODE,delta=1
   203                           	psect	text178,global,reloc=2,class=CODE,delta=1
   204                           	psect	text179,global,reloc=2,class=CODE,delta=1
   205                           	psect	text180,global,reloc=2,class=CODE,delta=1
   206                           	psect	text181,global,reloc=2,class=CODE,delta=1
   207                           	psect	text182,global,reloc=2,class=CODE,delta=1
   208                           	psect	text183,global,reloc=2,class=CODE,delta=1
   209                           	psect	text184,global,reloc=2,class=CODE,delta=1
   210                           	psect	text185,global,reloc=2,class=CODE,delta=1,group=1
   211                           	psect	text186,global,reloc=2,class=CODE,delta=1,group=1
   212                           	psect	text187,global,reloc=2,class=CODE,delta=1
   213                           	psect	text188,global,reloc=2,class=CODE,delta=1
   214                           	psect	text189,global,reloc=2,class=CODE,delta=1
   215                           	psect	text190,global,reloc=2,class=CODE,delta=1
   216                           	psect	text191,global,reloc=2,class=CODE,delta=1
   217                           	psect	text192,global,reloc=2,class=CODE,delta=1
   218                           	psect	text193,global,reloc=2,class=CODE,delta=1
   219                           	psect	text194,global,reloc=2,class=CODE,delta=1
   220                           	psect	text195,global,reloc=2,class=CODE,delta=1
   221                           	psect	text196,global,reloc=2,class=CODE,delta=1
   222                           	psect	text197,global,reloc=2,class=CODE,delta=1
   223                           	psect	text198,global,reloc=2,class=CODE,delta=1,group=1
   224                           	psect	text199,global,reloc=2,class=CODE,delta=1,group=1
   225                           	psect	text200,global,reloc=2,class=CODE,delta=1
   226                           	psect	text201,global,reloc=2,class=CODE,delta=1
   227                           	psect	text202,global,reloc=2,class=CODE,delta=1
   228                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   229                           	psect	text204,global,reloc=2,class=CODE,delta=1
   230                           	psect	text205,global,reloc=2,class=CODE,delta=1
   231                           	psect	text206,global,reloc=2,class=CODE,delta=1
   232                           	psect	text207,global,reloc=2,class=CODE,delta=1
   233                           	psect	text208,global,reloc=2,class=CODE,delta=1
   234                           	psect	text209,global,reloc=2,class=CODE,delta=1
   235                           	psect	text210,global,reloc=2,class=CODE,delta=1
   236                           	psect	text211,global,reloc=2,class=CODE,delta=1
   237                           	psect	text212,global,reloc=2,class=CODE,delta=1
   238                           	psect	text213,global,reloc=2,class=CODE,delta=1
   239                           	psect	text214,global,reloc=2,class=CODE,delta=1
   240                           	psect	text215,global,reloc=2,class=CODE,delta=1
   241                           	psect	text216,global,reloc=2,class=CODE,delta=1
   242                           	psect	text217,global,reloc=2,class=CODE,delta=1
   243                           	psect	text218,global,reloc=2,class=CODE,delta=1
   244                           	psect	text219,global,reloc=2,class=CODE,delta=1
   245                           	psect	text220,global,reloc=2,class=CODE,delta=1
   246                           	psect	text221,global,reloc=2,class=CODE,delta=1
   247                           	psect	text222,global,reloc=2,class=CODE,delta=1
   248                           	psect	text223,global,reloc=2,class=CODE,delta=1
   249                           	psect	text224,global,reloc=2,class=CODE,delta=1
   250                           	psect	text225,global,reloc=2,class=CODE,delta=1
   251                           	psect	text226,global,reloc=2,class=CODE,delta=1
   252                           	psect	text227,global,reloc=2,class=CODE,delta=1,group=1
   253                           	psect	text228,global,reloc=2,class=CODE,delta=1
   254                           	psect	text229,global,reloc=2,class=CODE,delta=1
   255                           	psect	text230,global,reloc=2,class=CODE,delta=1
   256                           	psect	text231,global,reloc=2,class=CODE,delta=1
   257                           	psect	text232,global,reloc=2,class=CODE,delta=1
   258                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   259                           	psect	text233,global,reloc=2,class=CODE,delta=1
   260                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   261                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   262  0000                     
   263                           ; Version 1.45
   264                           ; Generated 16/11/2017 GMT
   265                           ; 
   266                           ; Copyright © 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   267                           ; All rights reserved.
   268                           ; 
   269                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   270                           ; 
   271                           ; Redistribution and use in source and binary forms, with or without modification, are
   272                           ; permitted provided that the following conditions are met:
   273                           ; 
   274                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   275                           ;        conditions and the following disclaimer.
   276                           ; 
   277                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   278                           ;        of conditions and the following disclaimer in the documentation and/or other
   279                           ;        materials provided with the distribution.
   280                           ; 
   281                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   282                           ;        software without specific prior written permission.
   283                           ; 
   284                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   285                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   286                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   287                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   288                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   289                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   290                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   291                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   292                           ; 
   293                           ; 
   294                           ; Code-generator required, PIC18LF46K22 Definitions
   295                           ; 
   296                           ; SFR Addresses
   297  0000                     
   298 ;;UnconfirmedTransmissionCallback@param	offset=-1 (param)
   299 ;;RADIO_WatchdogTimeout@param	offset=-1 (param)
   300 ;;RADIO_RxFSKTimeout@irqFlags	offset	0
   301 ;;RADIO_RxFSKTimeout@param	offset=-1 (param)
   302 ;;LORAWAN_ReceiveWindow1Callback@freq	offset	0
   303 ;;LORAWAN_ReceiveWindow1Callback@param	offset=-1 (param)
   304 ;;_LORAWAN_LinkCheckCallback$1528	offset	0
   305 ;;LORAWAN_LinkCheckCallback@iCtr	offset	4
   306 ;;LORAWAN_LinkCheckCallback@param	offset=-1 (param)
   307 ;;_DutyCycleCallback$2817	offset	0
   308 ;;DutyCycleCallback@minim	offset	4
   309 ;;DutyCycleCallback@i	offset	8
   310 ;;DutyCycleCallback@found	offset	9
   311 ;;DutyCycleCallback@param	offset=-1 (param)
   312 ;;AutomaticReplyCallback@param	offset=-1 (param)
   313 ;;AckRetransmissionCallback@maximumPacketSize	offset	0
   314 ;;AckRetransmissionCallback@param	offset=-1 (param)
   315 ;;_param	offset=-1 (param)
   316 ;;_UpdateJoinSuccessState$1545	offset	0
   317 ;;UpdateJoinSuccessState@param	offset=-1 (param)
   318                           
   319                           	psect	idataCOMRAM
   320  009584                     __pidataCOMRAM:
   321                           	opt stack 0
   322                           
   323                           ;initializer for _ticksToScheduledInterrupt
   324  009584  FFFF               	dw	65535
   325  009586  FFFF               	dw	65535
   326                           
   327                           	psect	idataBANK1
   328  00954E                     __pidataBANK1:
   329                           	opt stack 0
   330                           
   331                           ;initializer for _randx
   332  00954E  0001               	dw	1
   333  009550  0000               	dw	0
   334                           
   335                           ;initializer for _testtest
   336  009552  31                 	db	49
   337  009553  32                 	db	50
   338                           
   339                           	psect	idataBANK3
   340  008C04                     __pidataBANK3:
   341                           	opt stack 0
   342                           
   343                           ;initializer for GenerateSubkey@F7103
   344  008C04  00                 	db	0
   345  008C05  00                 	db	0
   346  008C06  00                 	db	0
   347  008C07  00                 	db	0
   348  008C08  00                 	db	0
   349  008C09  00                 	db	0
   350  008C0A  00                 	db	0
   351  008C0B  00                 	db	0
   352  008C0C  00                 	db	0
   353  008C0D  00                 	db	0
   354  008C0E  00                 	db	0
   355  008C0F  00                 	db	0
   356  008C10  00                 	db	0
   357  008C11  00                 	db	0
   358  008C12  00                 	db	0
   359  008C13  87                 	db	135
   360                           
   361                           ;initializer for _devAddr
   362  008C14  5E47               	dw	24135
   363  008C16  3DEF               	dw	15855
   364                           
   365                           ;initializer for _hexNum
   366  008C18  31                 	db	49
   367  008C19  41                 	db	65
   368  008C1A  00                 	db	0
   369                           
   370                           ;initializer for _appSKey
   371  008C1B  96                 	db	150
   372  008C1C  23                 	db	35
   373  008C1D  5A                 	db	90
   374  008C1E  1F                 	db	31
   375  008C1F  9A                 	db	154
   376  008C20  E1                 	db	225
   377  008C21  60                 	db	96
   378  008C22  36                 	db	54
   379  008C23  81                 	db	129
   380  008C24  C4                 	db	196
   381  008C25  E4                 	db	228
   382  008C26  B5                 	db	181
   383  008C27  54                 	db	84
   384  008C28  C3                 	db	195
   385  008C29  CA                 	db	202
   386  008C2A  B5                 	db	181
   387                           
   388                           ;initializer for _nwkSKey
   389  008C2B  CB                 	db	203
   390  008C2C  1E                 	db	30
   391  008C2D  88                 	db	136
   392  008C2E  5D                 	db	93
   393  008C2F  5D                 	db	93
   394  008C30  F1                 	db	241
   395  008C31  12                 	db	18
   396  008C32  D5                 	db	213
   397  008C33  08                 	db	8
   398  008C34  CC                 	db	204
   399  008C35  B9                 	db	185
   400  008C36  D1                 	db	209
   401  008C37  D4                 	db	212
   402  008C38  4B                 	db	75
   403  008C39  1E                 	db	30
   404  008C3A  DF                 	db	223
   405                           
   406                           	psect	mediumconst
   407  00FE66                     __pmediumconst:
   408                           	opt stack 0
   409  00FE66  00                 	db	0
   410  00FE67                     _STable:
   411                           	opt stack 0
   412  00FE67  63                 	db	99
   413  00FE68  7C                 	db	124
   414  00FE69  77                 	db	119
   415  00FE6A  7B                 	db	123
   416  00FE6B  F2                 	db	242
   417  00FE6C  6B                 	db	107
   418  00FE6D  6F                 	db	111
   419  00FE6E  C5                 	db	197
   420  00FE6F  30                 	db	48
   421  00FE70  01                 	db	1
   422  00FE71  67                 	db	103
   423  00FE72  2B                 	db	43
   424  00FE73  FE                 	db	254
   425  00FE74  D7                 	db	215
   426  00FE75  AB                 	db	171
   427  00FE76  76                 	db	118
   428  00FE77  CA                 	db	202
   429  00FE78  82                 	db	130
   430  00FE79  C9                 	db	201
   431  00FE7A  7D                 	db	125
   432  00FE7B  FA                 	db	250
   433  00FE7C  59                 	db	89
   434  00FE7D  47                 	db	71
   435  00FE7E  F0                 	db	240
   436  00FE7F  AD                 	db	173
   437  00FE80  D4                 	db	212
   438  00FE81  A2                 	db	162
   439  00FE82  AF                 	db	175
   440  00FE83  9C                 	db	156
   441  00FE84  A4                 	db	164
   442  00FE85  72                 	db	114
   443  00FE86  C0                 	db	192
   444  00FE87  B7                 	db	183
   445  00FE88  FD                 	db	253
   446  00FE89  93                 	db	147
   447  00FE8A  26                 	db	38
   448  00FE8B  36                 	db	54
   449  00FE8C  3F                 	db	63
   450  00FE8D  F7                 	db	247
   451  00FE8E  CC                 	db	204
   452  00FE8F  34                 	db	52
   453  00FE90  A5                 	db	165
   454  00FE91  E5                 	db	229
   455  00FE92  F1                 	db	241
   456  00FE93  71                 	db	113
   457  00FE94  D8                 	db	216
   458  00FE95  31                 	db	49
   459  00FE96  15                 	db	21
   460  00FE97  04                 	db	4
   461  00FE98  C7                 	db	199
   462  00FE99  23                 	db	35
   463  00FE9A  C3                 	db	195
   464  00FE9B  18                 	db	24
   465  00FE9C  96                 	db	150
   466  00FE9D  05                 	db	5
   467  00FE9E  9A                 	db	154
   468  00FE9F  07                 	db	7
   469  00FEA0  12                 	db	18
   470  00FEA1  80                 	db	128
   471  00FEA2  E2                 	db	226
   472  00FEA3  EB                 	db	235
   473  00FEA4  27                 	db	39
   474  00FEA5  B2                 	db	178
   475  00FEA6  75                 	db	117
   476  00FEA7  09                 	db	9
   477  00FEA8  83                 	db	131
   478  00FEA9  2C                 	db	44
   479  00FEAA  1A                 	db	26
   480  00FEAB  1B                 	db	27
   481  00FEAC  6E                 	db	110
   482  00FEAD  5A                 	db	90
   483  00FEAE  A0                 	db	160
   484  00FEAF  52                 	db	82
   485  00FEB0  3B                 	db	59
   486  00FEB1  D6                 	db	214
   487  00FEB2  B3                 	db	179
   488  00FEB3  29                 	db	41
   489  00FEB4  E3                 	db	227
   490  00FEB5  2F                 	db	47
   491  00FEB6  84                 	db	132
   492  00FEB7  53                 	db	83
   493  00FEB8  D1                 	db	209
   494  00FEB9  00                 	db	0
   495  00FEBA  ED                 	db	237
   496  00FEBB  20                 	db	32
   497  00FEBC  FC                 	db	252
   498  00FEBD  B1                 	db	177
   499  00FEBE  5B                 	db	91
   500  00FEBF  6A                 	db	106
   501  00FEC0  CB                 	db	203
   502  00FEC1  BE                 	db	190
   503  00FEC2  39                 	db	57
   504  00FEC3  4A                 	db	74
   505  00FEC4  4C                 	db	76
   506  00FEC5  58                 	db	88
   507  00FEC6  CF                 	db	207
   508  00FEC7  D0                 	db	208
   509  00FEC8  EF                 	db	239
   510  00FEC9  AA                 	db	170
   511  00FECA  FB                 	db	251
   512  00FECB  43                 	db	67
   513  00FECC  4D                 	db	77
   514  00FECD  33                 	db	51
   515  00FECE  85                 	db	133
   516  00FECF  45                 	db	69
   517  00FED0  F9                 	db	249
   518  00FED1  02                 	db	2
   519  00FED2  7F                 	db	127
   520  00FED3  50                 	db	80
   521  00FED4  3C                 	db	60
   522  00FED5  9F                 	db	159
   523  00FED6  A8                 	db	168
   524  00FED7  51                 	db	81
   525  00FED8  A3                 	db	163
   526  00FED9  40                 	db	64
   527  00FEDA  8F                 	db	143
   528  00FEDB  92                 	db	146
   529  00FEDC  9D                 	db	157
   530  00FEDD  38                 	db	56
   531  00FEDE  F5                 	db	245
   532  00FEDF  BC                 	db	188
   533  00FEE0  B6                 	db	182
   534  00FEE1  DA                 	db	218
   535  00FEE2  21                 	db	33
   536  00FEE3  10                 	db	16
   537  00FEE4  FF                 	db	255
   538  00FEE5  F3                 	db	243
   539  00FEE6  D2                 	db	210
   540  00FEE7  CD                 	db	205
   541  00FEE8  0C                 	db	12
   542  00FEE9  13                 	db	19
   543  00FEEA  EC                 	db	236
   544  00FEEB  5F                 	db	95
   545  00FEEC  97                 	db	151
   546  00FEED  44                 	db	68
   547  00FEEE  17                 	db	23
   548  00FEEF  C4                 	db	196
   549  00FEF0  A7                 	db	167
   550  00FEF1  7E                 	db	126
   551  00FEF2  3D                 	db	61
   552  00FEF3  64                 	db	100
   553  00FEF4  5D                 	db	93
   554  00FEF5  19                 	db	25
   555  00FEF6  73                 	db	115
   556  00FEF7  60                 	db	96
   557  00FEF8  81                 	db	129
   558  00FEF9  4F                 	db	79
   559  00FEFA  DC                 	db	220
   560  00FEFB  22                 	db	34
   561  00FEFC  2A                 	db	42
   562  00FEFD  90                 	db	144
   563  00FEFE  88                 	db	136
   564  00FEFF  46                 	db	70
   565  00FF00  EE                 	db	238
   566  00FF01  B8                 	db	184
   567  00FF02  14                 	db	20
   568  00FF03  DE                 	db	222
   569  00FF04  5E                 	db	94
   570  00FF05  0B                 	db	11
   571  00FF06  DB                 	db	219
   572  00FF07  E0                 	db	224
   573  00FF08  32                 	db	50
   574  00FF09  3A                 	db	58
   575  00FF0A  0A                 	db	10
   576  00FF0B  49                 	db	73
   577  00FF0C  06                 	db	6
   578  00FF0D  24                 	db	36
   579  00FF0E  5C                 	db	92
   580  00FF0F  C2                 	db	194
   581  00FF10  D3                 	db	211
   582  00FF11  AC                 	db	172
   583  00FF12  62                 	db	98
   584  00FF13  91                 	db	145
   585  00FF14  95                 	db	149
   586  00FF15  E4                 	db	228
   587  00FF16  79                 	db	121
   588  00FF17  E7                 	db	231
   589  00FF18  C8                 	db	200
   590  00FF19  37                 	db	55
   591  00FF1A  6D                 	db	109
   592  00FF1B  8D                 	db	141
   593  00FF1C  D5                 	db	213
   594  00FF1D  4E                 	db	78
   595  00FF1E  A9                 	db	169
   596  00FF1F  6C                 	db	108
   597  00FF20  56                 	db	86
   598  00FF21  F4                 	db	244
   599  00FF22  EA                 	db	234
   600  00FF23  65                 	db	101
   601  00FF24  7A                 	db	122
   602  00FF25  AE                 	db	174
   603  00FF26  08                 	db	8
   604  00FF27  BA                 	db	186
   605  00FF28  78                 	db	120
   606  00FF29  25                 	db	37
   607  00FF2A  2E                 	db	46
   608  00FF2B  1C                 	db	28
   609  00FF2C  A6                 	db	166
   610  00FF2D  B4                 	db	180
   611  00FF2E  C6                 	db	198
   612  00FF2F  E8                 	db	232
   613  00FF30  DD                 	db	221
   614  00FF31  74                 	db	116
   615  00FF32  1F                 	db	31
   616  00FF33  4B                 	db	75
   617  00FF34  BD                 	db	189
   618  00FF35  8B                 	db	139
   619  00FF36  8A                 	db	138
   620  00FF37  70                 	db	112
   621  00FF38  3E                 	db	62
   622  00FF39  B5                 	db	181
   623  00FF3A  66                 	db	102
   624  00FF3B  48                 	db	72
   625  00FF3C  03                 	db	3
   626  00FF3D  F6                 	db	246
   627  00FF3E  0E                 	db	14
   628  00FF3F  61                 	db	97
   629  00FF40  35                 	db	53
   630  00FF41  57                 	db	87
   631  00FF42  B9                 	db	185
   632  00FF43  86                 	db	134
   633  00FF44  C1                 	db	193
   634  00FF45  1D                 	db	29
   635  00FF46  9E                 	db	158
   636  00FF47  E1                 	db	225
   637  00FF48  F8                 	db	248
   638  00FF49  98                 	db	152
   639  00FF4A  11                 	db	17
   640  00FF4B  69                 	db	105
   641  00FF4C  D9                 	db	217
   642  00FF4D  8E                 	db	142
   643  00FF4E  94                 	db	148
   644  00FF4F  9B                 	db	155
   645  00FF50  1E                 	db	30
   646  00FF51  87                 	db	135
   647  00FF52  E9                 	db	233
   648  00FF53  CE                 	db	206
   649  00FF54  55                 	db	85
   650  00FF55  28                 	db	40
   651  00FF56  DF                 	db	223
   652  00FF57  8C                 	db	140
   653  00FF58  A1                 	db	161
   654  00FF59  89                 	db	137
   655  00FF5A  0D                 	db	13
   656  00FF5B  BF                 	db	191
   657  00FF5C  E6                 	db	230
   658  00FF5D  42                 	db	66
   659  00FF5E  68                 	db	104
   660  00FF5F  41                 	db	65
   661  00FF60  99                 	db	153
   662  00FF61  2D                 	db	45
   663  00FF62  0F                 	db	15
   664  00FF63  B0                 	db	176
   665  00FF64  54                 	db	84
   666  00FF65  BB                 	db	187
   667  00FF66  16                 	db	22
   668  00FF67                     __end_of_STable:
   669                           	opt stack 0
   670  00FF67                     _modulation:
   671                           	opt stack 0
   672  00FF67  01                 	db	1
   673  00FF68  01                 	db	1
   674  00FF69  01                 	db	1
   675  00FF6A  01                 	db	1
   676  00FF6B  01                 	db	1
   677  00FF6C  01                 	db	1
   678  00FF6D  01                 	db	1
   679  00FF6E  00                 	db	0
   680  00FF6F                     __end_of_modulation:
   681                           	opt stack 0
   682  00FF6F                     _rxWindowOffset:
   683                           	opt stack 0
   684  00FF6F  DF                 	db	223
   685  00FF70  CE                 	db	206
   686  00FF71  C6                 	db	198
   687  00FF72  C2                 	db	194
   688  00FF73  BE                 	db	190
   689  00FF74  BC                 	db	188
   690  00FF75  F1                 	db	241
   691  00FF76  FE                 	db	254
   692  00FF77                     __end_of_rxWindowOffset:
   693                           	opt stack 0
   694  00FF77                     _maxPayloadSize:
   695                           	opt stack 0
   696  00FF77  33                 	db	51
   697  00FF78  33                 	db	51
   698  00FF79  33                 	db	51
   699  00FF7A  73                 	db	115
   700  00FF7B  F2                 	db	242
   701  00FF7C  F2                 	db	242
   702  00FF7D  F2                 	db	242
   703  00FF7E  38                 	db	56
   704  00FF7F                     __end_of_maxPayloadSize:
   705                           	opt stack 0
   706  00FF7F                     _rxWindowSize:
   707                           	opt stack 0
   708  00FF7F  08                 	db	8
   709  00FF80  0A                 	db	10
   710  00FF81  0E                 	db	14
   711  00FF82  1A                 	db	26
   712  00FF83  31                 	db	49
   713  00FF84  58                 	db	88
   714  00FF85  3C                 	db	60
   715  00FF86  08                 	db	8
   716  00FF87                     __end_of_rxWindowSize:
   717                           	opt stack 0
   718  00FF87                     _bandwidth:
   719                           	opt stack 0
   720  00FF87  07                 	db	7
   721  00FF88  07                 	db	7
   722  00FF89  07                 	db	7
   723  00FF8A  07                 	db	7
   724  00FF8B  07                 	db	7
   725  00FF8C  07                 	db	7
   726  00FF8D  08                 	db	8
   727  00FF8E                     __end_of_bandwidth:
   728                           	opt stack 0
   729  00FF8E                     _spreadingFactor:
   730                           	opt stack 0
   731  00FF8E  0C                 	db	12
   732  00FF8F  0B                 	db	11
   733  00FF90  0A                 	db	10
   734  00FF91  09                 	db	9
   735  00FF92  08                 	db	8
   736  00FF93  07                 	db	7
   737  00FF94  07                 	db	7
   738  00FF95                     __end_of_spreadingFactor:
   739                           	opt stack 0
   740  00FF95                     _macEndDevCmdReplyLen:
   741                           	opt stack 0
   742  00FF95  01                 	db	1
   743  00FF96  02                 	db	2
   744  00FF97  01                 	db	1
   745  00FF98  02                 	db	2
   746  00FF99  03                 	db	3
   747  00FF9A  02                 	db	2
   748  00FF9B  01                 	db	1
   749  00FF9C                     __end_of_macEndDevCmdReplyLen:
   750                           	opt stack 0
   751  00FF9C  0A                 	db	10
   752  00FF9D  07                 	db	7
   753  00FF9E  04                 	db	4
   754  00FF9F  01                 	db	1
   755  00FFA0  FE                 	db	254
   756  00FFA1  FB                 	db	251
   757  00FFA2                     __end_of_txPower433:
   758                           	opt stack 0
   759  00FFA2                     _txPower868:
   760                           	opt stack 0
   761  00FFA2  14                 	db	20
   762  00FFA3  0E                 	db	14
   763  00FFA4  0B                 	db	11
   764  00FFA5  08                 	db	8
   765  00FFA6  05                 	db	5
   766  00FFA7  02                 	db	2
   767  00FFA8                     __end_of_txPower868:
   768                           	opt stack 0
   769  00FFA8                     _DefaultChannels433:
   770                           	opt stack 0
   771  00FFA8  B9D8               	dw	47576
   772  00FFAA  19D1               	dw	6609
   773  00FFAC  01                 	db	1
   774  00FFAD  50                 	db	80
   775  00FFAE  012E               	dw	302
   776  00FFB0  0000               	dw	0
   777  00FFB2  0000               	dw	0
   778  00FFB4  01                 	db	1
   779  00FFB5  FF                 	db	255
   780  00FFB6  C718               	dw	50968
   781  00FFB8  19D4               	dw	6612
   782  00FFBA  01                 	db	1
   783  00FFBB  50                 	db	80
   784  00FFBC  012E               	dw	302
   785  00FFBE  0000               	dw	0
   786  00FFC0  0000               	dw	0
   787  00FFC2  01                 	db	1
   788  00FFC3  FF                 	db	255
   789  00FFC4  D458               	dw	54360
   790  00FFC6  19D7               	dw	6615
   791  00FFC8  01                 	db	1
   792  00FFC9  50                 	db	80
   793  00FFCA  012E               	dw	302
   794  00FFCC  0000               	dw	0
   795  00FFCE  0000               	dw	0
   796  00FFD0  01                 	db	1
   797  00FFD1  FF                 	db	255
   798  00FFD2                     __end_of_DefaultChannels433:
   799                           	opt stack 0
   800  00FFD2                     _DefaultChannels868:
   801                           	opt stack 0
   802  00FFD2  27A0               	dw	10144
   803  00FFD4  33BE               	dw	13246
   804  00FFD6  01                 	db	1
   805  00FFD7  50                 	db	80
   806  00FFD8  012E               	dw	302
   807  00FFDA  0000               	dw	0
   808  00FFDC  0000               	dw	0
   809  00FFDE  01                 	db	1
   810  00FFDF  FF                 	db	255
   811  00FFE0  34E0               	dw	13536
   812  00FFE2  33C1               	dw	13249
   813  00FFE4  01                 	db	1
   814  00FFE5  50                 	db	80
   815  00FFE6  012E               	dw	302
   816  00FFE8  0000               	dw	0
   817  00FFEA  0000               	dw	0
   818  00FFEC  01                 	db	1
   819  00FFED  FF                 	db	255
   820  00FFEE  4220               	dw	16928
   821  00FFF0  33C4               	dw	13252
   822  00FFF2  01                 	db	1
   823  00FFF3  50                 	db	80
   824  00FFF4  012E               	dw	302
   825  00FFF6  0000               	dw	0
   826  00FFF8  0000               	dw	0
   827  00FFFA  01                 	db	1
   828  00FFFB  FF                 	db	255
   829  00FFFC                     __end_of_DefaultChannels868:
   830                           	opt stack 0
   831  00FFFC                     _FskSyncWordBuff:
   832                           	opt stack 0
   833  00FFFC  C1                 	db	193
   834  00FFFD  94                 	db	148
   835  00FFFE  C1                 	db	193
   836  00FFFF                     __end_of_FskSyncWordBuff:
   837                           	opt stack 0
   838  00FFFF  00                 	db	0	; dummy byte at the end
   839  0000                     
   840                           	psect	nvBANK1
   841  0001FC                     __pnvBANK1:
   842                           	opt stack 0
   843  0001FC                     _timer1ReloadVal:
   844                           	opt stack 0
   845  0001FC                     	ds	2
   846  0001FE                     _eusart1TxBufferRemaining:
   847                           	opt stack 0
   848  0001FE                     	ds	1
   849                           
   850                           	psect	nvBANK3
   851  0003E7                     __pnvBANK3:
   852                           	opt stack 0
   853  0003E7                     _timer5ReloadVal:
   854                           	opt stack 0
   855  0003E7                     	ds	2
   856  0003E9                     _TMR1_InterruptHandler:
   857                           	opt stack 0
   858  0003E9                     	ds	2
   859  0003EB                     _EUSART1_ErrorHandler:
   860                           	opt stack 0
   861  0003EB                     	ds	2
   862  0003ED                     _EUSART1_OverrunErrorHandler:
   863                           	opt stack 0
   864  0003ED                     	ds	2
   865  0003EF                     _EUSART1_FramingErrorHandler:
   866                           	opt stack 0
   867  0003EF                     	ds	2
   868  0003F1                     _IOCB4_InterruptHandler:
   869                           	opt stack 0
   870  0003F1                     	ds	2
   871  0003F3                     _EUSART1_RxDefaultInterruptHandler:
   872                           	opt stack 0
   873  0003F3                     	ds	2
   874  0003F5                     _EUSART1_TxDefaultInterruptHandler:
   875                           	opt stack 0
   876  0003F5                     	ds	2
   877  0003F7                     _INT2_InterruptHandler:
   878                           	opt stack 0
   879  0003F7                     	ds	2
   880  0003F9                     _INT1_InterruptHandler:
   881                           	opt stack 0
   882  0003F9                     	ds	2
   883  0000                     _TMR5	set	3919
   884  0000                     _T5GCONbits	set	3917
   885  0000                     _T5CONbits	set	3918
   886  0000                     _T5CON	set	3918
   887  0000                     _TMR5L	set	3919
   888  0000                     _TMR5H	set	3920
   889  0000                     _T5GCON	set	3917
   890  0000                     _ANSELA	set	3896
   891  0000                     _ANSELE	set	3900
   892  0000                     _ANSELB	set	3897
   893  0000                     _ANSELC	set	3898
   894  0000                     _ANSELD	set	3899
   895  0000                     _TMR1	set	4046
   896  0000                     _TXREG	set	4013
   897  0000                     _PIR5bits	set	3966
   898  0000                     _T1GCONbits	set	4044
   899  0000                     _T1CONbits	set	4045
   900  0000                     _T1CON	set	4045
   901  0000                     _TMR1L	set	4046
   902  0000                     _TMR1H	set	4047
   903  0000                     _T1GCON	set	4044
   904  0000                     _RCREG1	set	4014
   905  0000                     _RCSTA1bits	set	4011
   906  0000                     _TXREG1	set	4013
   907  0000                     _TXSTA1bits	set	4012
   908  0000                     _SPBRGH1	set	4016
   909  0000                     _SPBRG1	set	4015
   910  0000                     _TXSTA1	set	4012
   911  0000                     _RCSTA1	set	4011
   912  0000                     _BAUDCON1	set	4024
   913  0000                     _SSP2STATbits	set	3949
   914  0000                     _SSP2BUF	set	3951
   915  0000                     _SSP2CON1bits	set	3948
   916  0000                     _SSP2ADD	set	3950
   917  0000                     _SSP2CON1	set	3948
   918  0000                     _SSP2STAT	set	3949
   919  0000                     _IOCBbits	set	3938
   920  0000                     _WPUB	set	3937
   921  0000                     _TRISD	set	3989
   922  0000                     _TRISC	set	3988
   923  0000                     _TRISB	set	3987
   924  0000                     _TRISA	set	3986
   925  0000                     _TRISE	set	3990
   926  0000                     _LATC	set	3979
   927  0000                     _LATB	set	3978
   928  0000                     _LATA	set	3977
   929  0000                     _LATD	set	3980
   930  0000                     _LATE	set	3981
   931  0000                     _OSCTUNE	set	3995
   932  0000                     _OSCCON2	set	4050
   933  0000                     _OSCCON	set	4051
   934  0000                     _PIR1bits	set	3998
   935  0000                     _PIE1bits	set	3997
   936  0000                     _RCONbits	set	4048
   937  0000                     _INTCON2bits	set	4081
   938  0000                     _INTCON3bits	set	4080
   939  0000                     _INTCONbits	set	4082
   940  0000                     _PORTBbits	set	3969
   941  0000                     _TMR5IF	set	31729
   942  0000                     _LATD3	set	31843
   943  0000                     _LATC2	set	31834
   944  0000                     _TRISC2	set	31906
   945                           
   946                           ; #config settings
   947  0000                     
   948                           	psect	cinit
   949  006E82                     __pcinit:
   950                           	opt stack 0
   951  006E82                     start_initialization:
   952                           	opt stack 0
   953  006E82                     __initialization:
   954                           	opt stack 0
   955                           
   956                           ; Initialize objects allocated to BANK3 (55 bytes)
   957                           ; load TBLPTR registers with __pidataBANK3
   958  006E82  0E04               	movlw	low __pidataBANK3
   959  006E84  6EF6               	movwf	tblptrl,c
   960  006E86  0E8C               	movlw	high __pidataBANK3
   961  006E88  6EF7               	movwf	tblptrh,c
   962  006E8A  0E00               	movlw	low (__pidataBANK3 shr (0+16))
   963  006E8C  6EF8               	movwf	tblptru,c
   964  006E8E  EE03  F0B0         	lfsr	0,__pdataBANK3
   965  006E92  EE20 F037          	lfsr	2,55
   966  006E96                     copy_data0:
   967  006E96  0009               	tblrd		*+
   968  006E98  CFF5 FFEE          	movff	tablat,postinc0
   969  006E9C  50DD               	movf	postdec2,w,c
   970  006E9E  50D9               	movf	fsr2l,w,c
   971  006EA0  E1FA               	bnz	copy_data0
   972                           
   973                           ; Initialize objects allocated to BANK1 (6 bytes)
   974                           ; load TBLPTR registers with __pidataBANK1
   975  006EA2  0E4E               	movlw	low __pidataBANK1
   976  006EA4  6EF6               	movwf	tblptrl,c
   977  006EA6  0E95               	movlw	high __pidataBANK1
   978  006EA8  6EF7               	movwf	tblptrh,c
   979  006EAA  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   980  006EAC  6EF8               	movwf	tblptru,c
   981  006EAE  EE01  F0F6         	lfsr	0,__pdataBANK1
   982  006EB2  EE20 F006          	lfsr	2,6
   983  006EB6                     copy_data1:
   984  006EB6  0009               	tblrd		*+
   985  006EB8  CFF5 FFEE          	movff	tablat,postinc0
   986  006EBC  50DD               	movf	postdec2,w,c
   987  006EBE  50D9               	movf	fsr2l,w,c
   988  006EC0  E1FA               	bnz	copy_data1
   989                           
   990                           ; Initialize objects allocated to COMRAM (4 bytes)
   991                           ; load TBLPTR registers with __pidataCOMRAM
   992  006EC2  0E84               	movlw	low __pidataCOMRAM
   993  006EC4  6EF6               	movwf	tblptrl,c
   994  006EC6  0E95               	movlw	high __pidataCOMRAM
   995  006EC8  6EF7               	movwf	tblptrh,c
   996  006ECA  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   997  006ECC  6EF8               	movwf	tblptru,c
   998  006ECE  EE00  F054         	lfsr	0,__pdataCOMRAM
   999  006ED2  EE20 F004          	lfsr	2,4
  1000  006ED6                     copy_data2:
  1001  006ED6  0009               	tblrd		*+
  1002  006ED8  CFF5 FFEE          	movff	tablat,postinc0
  1003  006EDC  50DD               	movf	postdec2,w,c
  1004  006EDE  50D9               	movf	fsr2l,w,c
  1005  006EE0  E1FA               	bnz	copy_data2
  1006                           
  1007                           ; Clear objects allocated to BIGRAM (542 bytes)
  1008  006EE2  EE05  F080         	lfsr	0,__pbssBIGRAM
  1009  006EE6  EE22 F01E          	lfsr	2,542
  1010  006EEA                     clear_0:
  1011  006EEA  6AEE               	clrf	postinc0,c
  1012  006EEC  50DD               	movf	postdec2,w,c
  1013  006EEE  50D9               	movf	fsr2l,w,c
  1014  006EF0  E1FC               	bnz	clear_0
  1015  006EF2  50DA               	movf	fsr2h,w,c
  1016  006EF4  E1FA               	bnz	clear_0
  1017                           
  1018                           ; Clear objects allocated to BANK5 (128 bytes)
  1019  006EF6  EE05  F000         	lfsr	0,__pbssBANK5
  1020  006EFA  0E80               	movlw	128
  1021  006EFC                     clear_1:
  1022  006EFC  6AEE               	clrf	postinc0,c
  1023  006EFE  06E8               	decf	wreg,f,c
  1024  006F00  E1FD               	bnz	clear_1
  1025                           
  1026                           ; Clear objects allocated to BANK4 (224 bytes)
  1027  006F02  EE04  F000         	lfsr	0,__pbssBANK4
  1028  006F06  0EE0               	movlw	224
  1029  006F08                     clear_2:
  1030  006F08  6AEE               	clrf	postinc0,c
  1031  006F0A  06E8               	decf	wreg,f,c
  1032  006F0C  E1FD               	bnz	clear_2
  1033                           
  1034                           ; Clear objects allocated to BANK3 (176 bytes)
  1035  006F0E  EE03  F000         	lfsr	0,__pbssBANK3
  1036  006F12  0EB0               	movlw	176
  1037  006F14                     clear_3:
  1038  006F14  6AEE               	clrf	postinc0,c
  1039  006F16  06E8               	decf	wreg,f,c
  1040  006F18  E1FD               	bnz	clear_3
  1041                           
  1042                           ; Clear objects allocated to BANK2 (255 bytes)
  1043  006F1A  EE02  F000         	lfsr	0,__pbssBANK2
  1044  006F1E  EE20 F0FF          	lfsr	2,255
  1045  006F22                     clear_4:
  1046  006F22  6AEE               	clrf	postinc0,c
  1047  006F24  50DD               	movf	postdec2,w,c
  1048  006F26  50D9               	movf	fsr2l,w,c
  1049  006F28  E1FC               	bnz	clear_4
  1050  006F2A  50DA               	movf	fsr2h,w,c
  1051  006F2C  E1FA               	bnz	clear_4
  1052                           
  1053                           ; Clear objects allocated to BANK1 (141 bytes)
  1054  006F2E  EE01  F000         	lfsr	0,__pbssBANK1
  1055  006F32  0E8D               	movlw	141
  1056  006F34                     clear_5:
  1057  006F34  6AEE               	clrf	postinc0,c
  1058  006F36  06E8               	decf	wreg,f,c
  1059  006F38  E1FD               	bnz	clear_5
  1060                           
  1061                           ; Clear objects allocated to COMRAM (10 bytes)
  1062  006F3A  EE00  F04A         	lfsr	0,__pbssCOMRAM
  1063  006F3E  0E0A               	movlw	10
  1064  006F40                     clear_6:
  1065  006F40  6AEE               	clrf	postinc0,c
  1066  006F42  06E8               	decf	wreg,f,c
  1067  006F44  E1FD               	bnz	clear_6
  1068  006F46                     end_of_initialization:
  1069                           	opt stack 0
  1070  006F46                     __end_of__initialization:
  1071                           	opt stack 0
  1072  006F46  0100               	movlb	0
  1073  006F48  EF4B  F016         	goto	_main	;jump to C main() function
  1074                           tblptru	equ	0xFF8
  1075                           tblptrh	equ	0xFF7
  1076                           tblptrl	equ	0xFF6
  1077                           tablat	equ	0xFF5
  1078                           postinc0	equ	0xFEE
  1079                           wreg	equ	0xFE8
  1080                           postdec2	equ	0xFDD
  1081                           fsr2h	equ	0xFDA
  1082                           fsr2l	equ	0xFD9
  1083                           
  1084                           	psect	bssCOMRAM
  1085  00004A                     __pbssCOMRAM:
  1086                           	opt stack 0
  1087  00004A                     _datatobesolved:
  1088                           	opt stack 0
  1089  00004A                     	ds	2
  1090  00004C                     _reloadVal:
  1091                           	opt stack 0
  1092  00004C                     	ds	2
  1093  00004E                     _eusart1RxStatusBuffer:
  1094                           	opt stack 0
  1095  00004E                     	ds	1
  1096  00004F                     _eusart1RxTail:
  1097                           	opt stack 0
  1098  00004F                     	ds	1
  1099  000050                     _eusart1RxHead:
  1100                           	opt stack 0
  1101  000050                     	ds	1
  1102  000051                     _eusart1TxHead:
  1103                           	opt stack 0
  1104  000051                     	ds	1
  1105  000052                     __rcon:
  1106                           	opt stack 0
  1107  000052                     	ds	1
  1108  000053                     _timerOverflow:
  1109                           	opt stack 0
  1110  000053                     	ds	1
  1111                           tblptru	equ	0xFF8
  1112                           tblptrh	equ	0xFF7
  1113                           tblptrl	equ	0xFF6
  1114                           tablat	equ	0xFF5
  1115                           postinc0	equ	0xFEE
  1116                           wreg	equ	0xFE8
  1117                           postdec2	equ	0xFDD
  1118                           fsr2h	equ	0xFDA
  1119                           fsr2l	equ	0xFD9
  1120                           
  1121                           	psect	dataCOMRAM
  1122  000054                     __pdataCOMRAM:
  1123                           	opt stack 0
  1124  000054                     _ticksToScheduledInterrupt:
  1125                           	opt stack 0
  1126  000054                     	ds	4
  1127                           tblptru	equ	0xFF8
  1128                           tblptrh	equ	0xFF7
  1129                           tblptrl	equ	0xFF6
  1130                           tablat	equ	0xFF5
  1131                           postinc0	equ	0xFEE
  1132                           wreg	equ	0xFE8
  1133                           postdec2	equ	0xFDD
  1134                           fsr2h	equ	0xFDA
  1135                           fsr2l	equ	0xFD9
  1136                           
  1137                           	psect	bssBANK1
  1138  000100                     __pbssBANK1:
  1139                           	opt stack 0
  1140  000100                     TMR_GetDeltaTime@retVal:
  1141                           	opt stack 0
  1142  000100                     	ds	4
  1143  000104                     _ticksAccounted:
  1144                           	opt stack 0
  1145  000104                     	ds	4
  1146  000108                     _ticksAdded:
  1147                           	opt stack 0
  1148  000108                     	ds	4
  1149  00010C                     _rxPayload:
  1150                           	opt stack 0
  1151  00010C                     	ds	4
  1152  000110                     _first3decimal:
  1153                           	opt stack 0
  1154  000110                     	ds	2
  1155  000112                     _first2decimal:
  1156                           	opt stack 0
  1157  000112                     	ds	2
  1158  000114                     _first1decimal:
  1159                           	opt stack 0
  1160  000114                     	ds	2
  1161  000116                     _resultdata2send:
  1162                           	opt stack 0
  1163  000116                     	ds	2
  1164  000118                     _firstdigit:
  1165                           	opt stack 0
  1166  000118                     	ds	2
  1167  00011A                     _seconddigit:
  1168                           	opt stack 0
  1169  00011A                     	ds	2
  1170  00011C                     _thirddigit:
  1171                           	opt stack 0
  1172  00011C                     	ds	2
  1173  00011E                     _fourthdigit:
  1174                           	opt stack 0
  1175  00011E                     	ds	2
  1176  000120                     _testassign2:
  1177                           	opt stack 0
  1178  000120                     	ds	2
  1179  000122                     _testassign:
  1180                           	opt stack 0
  1181  000122                     	ds	2
  1182  000124                     _bitStatus7:
  1183                           	opt stack 0
  1184  000124                     	ds	2
  1185  000126                     _bitStatus6:
  1186                           	opt stack 0
  1187  000126                     	ds	2
  1188  000128                     _bitStatus5:
  1189                           	opt stack 0
  1190  000128                     	ds	2
  1191  00012A                     _bitStatus4:
  1192                           	opt stack 0
  1193  00012A                     	ds	2
  1194  00012C                     _bitStatus3:
  1195                           	opt stack 0
  1196  00012C                     	ds	2
  1197  00012E                     _bitStatus2:
  1198                           	opt stack 0
  1199  00012E                     	ds	2
  1200  000130                     _bitStatus1:
  1201                           	opt stack 0
  1202  000130                     	ds	2
  1203  000132                     _bitStatus:
  1204                           	opt stack 0
  1205  000132                     	ds	2
  1206  000134                     _bitStatusbefore7:
  1207                           	opt stack 0
  1208  000134                     	ds	2
  1209  000136                     _bitStatusbefore6:
  1210                           	opt stack 0
  1211  000136                     	ds	2
  1212  000138                     _bitStatusbefore5:
  1213                           	opt stack 0
  1214  000138                     	ds	2
  1215  00013A                     _bitStatusbefore4:
  1216                           	opt stack 0
  1217  00013A                     	ds	2
  1218  00013C                     _bitStatusbefore3:
  1219                           	opt stack 0
  1220  00013C                     	ds	2
  1221  00013E                     _bitStatusbefore2:
  1222                           	opt stack 0
  1223  00013E                     	ds	2
  1224  000140                     _bitStatusbefore1:
  1225                           	opt stack 0
  1226  000140                     	ds	2
  1227  000142                     _counterinterrupt:
  1228                           	opt stack 0
  1229  000142                     	ds	2
  1230  000144                     TMR_SwapTimer@retVal:
  1231                           	opt stack 0
  1232  000144                     	ds	2
  1233  000146                     TMR_SwapTimer@oldVal:
  1234                           	opt stack 0
  1235  000146                     	ds	2
  1236  000148                     TMR_GetDeltaTime@tmrVal:
  1237                           	opt stack 0
  1238  000148                     	ds	2
  1239  00014A                     _counter:
  1240                           	opt stack 0
  1241  00014A                     	ds	1
  1242  00014B                     _datax:
  1243                           	opt stack 0
  1244  00014B                     	ds	1
  1245  00014C                     _eusart1RxLastError:
  1246                           	opt stack 0
  1247  00014C                     	ds	1
  1248  00014D                     _eusart1RxCount:
  1249                           	opt stack 0
  1250  00014D                     	ds	1
  1251  00014E                     _eusart1RxBuffer:
  1252                           	opt stack 0
  1253  00014E                     	ds	1
  1254  00014F                     _eusart1TxBuffer:
  1255                           	opt stack 0
  1256  00014F                     	ds	1
  1257  000150                     _eusart1TxTail:
  1258                           	opt stack 0
  1259  000150                     	ds	1
  1260  000151                     __roundCounter:
  1261                           	opt stack 0
  1262  000151                     	ds	1
  1263  000152                     _allocatedTimers:
  1264                           	opt stack 0
  1265  000152                     	ds	1
  1266  000153                     _localDioStatus:
  1267                           	opt stack 0
  1268  000153                     	ds	1
  1269  000154                     _dioStatus:
  1270                           	opt stack 0
  1271  000154                     	ds	1
  1272  000155                     _RadioConfiguration:
  1273                           	opt stack 0
  1274  000155                     	ds	54
  1275  00018B                     _dataresult:
  1276                           	opt stack 0
  1277  00018B                     	ds	2
  1278                           tblptru	equ	0xFF8
  1279                           tblptrh	equ	0xFF7
  1280                           tblptrl	equ	0xFF6
  1281                           tablat	equ	0xFF5
  1282                           postinc0	equ	0xFEE
  1283                           wreg	equ	0xFE8
  1284                           postdec2	equ	0xFDD
  1285                           fsr2h	equ	0xFDA
  1286                           fsr2l	equ	0xFD9
  1287                           
  1288                           	psect	dataBANK1
  1289  0001F6                     __pdataBANK1:
  1290                           	opt stack 0
  1291  0001F6                     _randx:
  1292                           	opt stack 0
  1293  0001F6                     	ds	4
  1294  0001FA                     _testtest:
  1295                           	opt stack 0
  1296  0001FA                     	ds	2
  1297                           tblptru	equ	0xFF8
  1298                           tblptrh	equ	0xFF7
  1299                           tblptrl	equ	0xFF6
  1300                           tablat	equ	0xFF5
  1301                           postinc0	equ	0xFEE
  1302                           wreg	equ	0xFE8
  1303                           postdec2	equ	0xFDD
  1304                           fsr2h	equ	0xFDA
  1305                           fsr2l	equ	0xFD9
  1306                           
  1307                           	psect	bssBANK2
  1308  000200                     __pbssBANK2:
  1309                           	opt stack 0
  1310  000200                     _cout:
  1311                           	opt stack 0
  1312  000200                     	ds	2
  1313  000202                     _n:
  1314                           	opt stack 0
  1315  000202                     	ds	2
  1316  000204                     _countera:
  1317                           	opt stack 0
  1318  000204                     	ds	2
  1319  000206                     _first5decimal:
  1320                           	opt stack 0
  1321  000206                     	ds	2
  1322  000208                     _first4decimal:
  1323                           	opt stack 0
  1324  000208                     	ds	2
  1325  00020A                     _loRa:
  1326                           	opt stack 0
  1327  00020A                     	ds	245
  1328                           tblptru	equ	0xFF8
  1329                           tblptrh	equ	0xFF7
  1330                           tblptrl	equ	0xFF6
  1331                           tablat	equ	0xFF5
  1332                           postinc0	equ	0xFEE
  1333                           wreg	equ	0xFE8
  1334                           postdec2	equ	0xFDD
  1335                           fsr2h	equ	0xFDA
  1336                           fsr2l	equ	0xFD9
  1337                           
  1338                           	psect	bssBANK3
  1339  000300                     __pbssBANK3:
  1340                           	opt stack 0
  1341  000300                     _swTimers:
  1342                           	opt stack 0
  1343  000300                     	ds	160
  1344  0003A0                     _aesBuffer:
  1345                           	opt stack 0
  1346  0003A0                     	ds	16
  1347                           tblptru	equ	0xFF8
  1348                           tblptrh	equ	0xFF7
  1349                           tblptrl	equ	0xFF6
  1350                           tablat	equ	0xFF5
  1351                           postinc0	equ	0xFEE
  1352                           wreg	equ	0xFE8
  1353                           postdec2	equ	0xFDD
  1354                           fsr2h	equ	0xFDA
  1355                           fsr2l	equ	0xFD9
  1356                           
  1357                           	psect	dataBANK3
  1358  0003B0                     __pdataBANK3:
  1359                           	opt stack 0
  1360  0003B0                     GenerateSubkey@F7103:
  1361                           	opt stack 0
  1362  0003B0                     	ds	16
  1363  0003C0                     _devAddr:
  1364                           	opt stack 0
  1365  0003C0                     	ds	4
  1366  0003C4                     _hexNum:
  1367                           	opt stack 0
  1368  0003C4                     	ds	3
  1369  0003C7                     _appSKey:
  1370                           	opt stack 0
  1371  0003C7                     	ds	16
  1372  0003D7                     _nwkSKey:
  1373                           	opt stack 0
  1374  0003D7                     	ds	16
  1375                           tblptru	equ	0xFF8
  1376                           tblptrh	equ	0xFF7
  1377                           tblptrl	equ	0xFF6
  1378                           tablat	equ	0xFF5
  1379                           postinc0	equ	0xFEE
  1380                           wreg	equ	0xFE8
  1381                           postdec2	equ	0xFDD
  1382                           fsr2h	equ	0xFDA
  1383                           fsr2l	equ	0xFD9
  1384                           
  1385                           	psect	bssBANK4
  1386  000400                     __pbssBANK4:
  1387                           	opt stack 0
  1388  000400                     _Channels:
  1389                           	opt stack 0
  1390  000400                     	ds	224
  1391                           tblptru	equ	0xFF8
  1392                           tblptrh	equ	0xFF7
  1393                           tblptrl	equ	0xFF6
  1394                           tablat	equ	0xFF5
  1395                           postinc0	equ	0xFEE
  1396                           wreg	equ	0xFE8
  1397                           postdec2	equ	0xFDD
  1398                           fsr2h	equ	0xFDA
  1399                           fsr2l	equ	0xFD9
  1400                           
  1401                           	psect	bssBANK5
  1402  000500                     __pbssBANK5:
  1403                           	opt stack 0
  1404  000500                     _sub:
  1405                           	opt stack 0
  1406  000500                     	ds	64
  1407  000540                     _dataxstr:
  1408                           	opt stack 0
  1409  000540                     	ds	64
  1410                           tblptru	equ	0xFF8
  1411                           tblptrh	equ	0xFF7
  1412                           tblptrl	equ	0xFF6
  1413                           tablat	equ	0xFF5
  1414                           postinc0	equ	0xFEE
  1415                           wreg	equ	0xFE8
  1416                           postdec2	equ	0xFDD
  1417                           fsr2h	equ	0xFDA
  1418                           fsr2l	equ	0xFD9
  1419                           
  1420                           	psect	bssBIGRAM
  1421  000580                     __pbssBIGRAM:
  1422                           	opt stack 0
  1423  000580                     _radioBuffer:
  1424                           	opt stack 0
  1425  000580                     	ds	271
  1426  00068F                     _macBuffer:
  1427                           	opt stack 0
  1428  00068F                     	ds	271
  1429                           tblptru	equ	0xFF8
  1430                           tblptrh	equ	0xFF7
  1431                           tblptrl	equ	0xFF6
  1432                           tablat	equ	0xFF5
  1433                           postinc0	equ	0xFEE
  1434                           wreg	equ	0xFE8
  1435                           postdec2	equ	0xFDD
  1436                           fsr2h	equ	0xFDA
  1437                           fsr2l	equ	0xFD9
  1438                           
  1439                           	psect	cstackBANK1
  1440  00018D                     __pcstackBANK1:
  1441                           	opt stack 0
  1442  00018D                     AESCmac@k2:
  1443                           	opt stack 0
  1444                           
  1445                           ; 16 bytes @ 0x0
  1446  00018D                     	ds	16
  1447  00019D                     AESCmac@k1:
  1448                           	opt stack 0
  1449                           
  1450                           ; 16 bytes @ 0x10
  1451  00019D                     	ds	16
  1452  0001AD                     AESCmac@mLast:
  1453                           	opt stack 0
  1454                           
  1455                           ; 16 bytes @ 0x20
  1456  0001AD                     	ds	16
  1457  0001BD                     AESCmac@padded:
  1458                           	opt stack 0
  1459                           
  1460                           ; 16 bytes @ 0x30
  1461  0001BD                     	ds	16
  1462  0001CD                     AESCmac@y:
  1463                           	opt stack 0
  1464                           
  1465                           ; 16 bytes @ 0x40
  1466  0001CD                     	ds	16
  1467  0001DD                     AESCmac@x:
  1468                           	opt stack 0
  1469                           
  1470                           ; 16 bytes @ 0x50
  1471  0001DD                     	ds	16
  1472  0001ED                     AESCmac@ptr:
  1473                           	opt stack 0
  1474                           
  1475                           ; 2 bytes @ 0x60
  1476  0001ED                     	ds	2
  1477  0001EF                     AESCmac@flag:
  1478                           	opt stack 0
  1479                           
  1480                           ; 1 bytes @ 0x62
  1481  0001EF                     	ds	1
  1482  0001F0                     AESCmac@n:
  1483                           	opt stack 0
  1484                           
  1485                           ; 1 bytes @ 0x63
  1486  0001F0                     	ds	1
  1487  0001F1                     AESCmac@j:
  1488                           	opt stack 0
  1489                           
  1490                           ; 1 bytes @ 0x64
  1491  0001F1                     	ds	1
  1492  0001F2                     AESCmac@i:
  1493                           	opt stack 0
  1494                           
  1495                           ; 1 bytes @ 0x65
  1496  0001F2                     	ds	1
  1497  0001F3                     LORAWAN_RxDone@buffer:
  1498                           	opt stack 0
  1499                           
  1500                           ; 2 bytes @ 0x66
  1501  0001F3                     	ds	2
  1502  0001F5                     LORAWAN_RxDone@bufferLength:
  1503                           	opt stack 0
  1504                           
  1505                           ; 1 bytes @ 0x68
  1506  0001F5                     	ds	1
  1507                           tblptru	equ	0xFF8
  1508                           tblptrh	equ	0xFF7
  1509                           tblptrl	equ	0xFF6
  1510                           tablat	equ	0xFF5
  1511                           postinc0	equ	0xFEE
  1512                           wreg	equ	0xFE8
  1513                           postdec2	equ	0xFDD
  1514                           fsr2h	equ	0xFDA
  1515                           fsr2l	equ	0xFD9
  1516                           
  1517                           	psect	cstackBANK0
  1518  000060                     __pcstackBANK0:
  1519                           	opt stack 0
  1520  000060                     ??_FindSmallestDataRate:
  1521  000060                     ??_CountfOptsLength:
  1522  000060                     ??_UpdateMinMaxChDataRate:
  1523  000060                     ?_ExecuteLinkCheck:
  1524                           	opt stack 0
  1525  000060                     ?_ExecuteDutyCycle:
  1526                           	opt stack 0
  1527  000060                     ?_ExecuteDevStatus:
  1528                           	opt stack 0
  1529  000060                     ?_TMR1_ReadTimer:
  1530                           	opt stack 0
  1531  000060                     ?___wmul:
  1532                           	opt stack 0
  1533  000060                     ?___awmod:
  1534                           	opt stack 0
  1535  000060                     ?_GetRx1Freq:
  1536                           	opt stack 0
  1537  000060                     ?___almod:
  1538                           	opt stack 0
  1539  000060                     ?___lldiv:
  1540                           	opt stack 0
  1541  000060                     ?___llmod:
  1542                           	opt stack 0
  1543  000060                     HALResetPinOutputValue@value:
  1544                           	opt stack 0
  1545  000060                     RADIO_SetLoRaSyncWord@syncWord:
  1546                           	opt stack 0
  1547  000060                     RADIO_SetSpreadingFactor@spreadingFactor:
  1548                           	opt stack 0
  1549  000060                     RADIO_SetOutputPower@power:
  1550                           	opt stack 0
  1551  000060                     RADIO_SetCRC@crc:
  1552                           	opt stack 0
  1553  000060                     RADIO_SetIQInverted@iqInverted:
  1554                           	opt stack 0
  1555  000060                     RADIO_SetBandwidth@bandwidth:
  1556                           	opt stack 0
  1557  000060                     RADIO_SetModulation@modulation:
  1558                           	opt stack 0
  1559  000060                     UpdateCurrentDataRate@valueNew:
  1560                           	opt stack 0
  1561  000060                     UpdateTxPower@txPowerNew:
  1562                           	opt stack 0
  1563  000060                     UpdateJoinInProgress@state:
  1564                           	opt stack 0
  1565  000060                     INTERRUPT_GetDioStatus@a:
  1566                           	opt stack 0
  1567  000060                     SwTimerCreate@retVal:
  1568                           	opt stack 0
  1569  000060                     SwTimerIsRunning@timerId:
  1570                           	opt stack 0
  1571  000060                     SwTimerStop@timerId:
  1572                           	opt stack 0
  1573  000060                     ValidateDataRate@dataRate:
  1574                           	opt stack 0
  1575  000060                     ValidateTxPower@result:
  1576                           	opt stack 0
  1577  000060                     UpdateDLSettings@dlRx1DrOffset:
  1578                           	opt stack 0
  1579  000060                     UpdateDataRange@dataRangeNew:
  1580                           	opt stack 0
  1581  000060                     UpdateChannelIdStatus@statusNew:
  1582                           	opt stack 0
  1583  000060                     ValidateRxOffset@rxOffset:
  1584                           	opt stack 0
  1585  000060                     ValidateChannelId@allowedForDefaultChannels:
  1586                           	opt stack 0
  1587  000060                     ValidateChannelMaskCntl@result:
  1588                           	opt stack 0
  1589  000060                     SPI2_Exchange8bit@data:
  1590                           	opt stack 0
  1591  000060                     EUSART1_Write@txData:
  1592                           	opt stack 0
  1593  000060                     ___abdiv@divisor:
  1594                           	opt stack 0
  1595  000060                     FillSubKey@source:
  1596                           	opt stack 0
  1597  000060                     RADIO_SetFrequencyHopPeriod@frequencyHopPeriod:
  1598                           	opt stack 0
  1599  000060                     ExecuteLinkCheck@ptr:
  1600                           	opt stack 0
  1601  000060                     IncludeMacCommandsResponse@macBuffer:
  1602                           	opt stack 0
  1603  000060                     CheckFlags@hdr:
  1604                           	opt stack 0
  1605  000060                     CheckMcastFlags@hdr:
  1606                           	opt stack 0
  1607  000060                     SwTimerSetCallback@callback:
  1608                           	opt stack 0
  1609  000060                     EncKeySchedule@key:
  1610                           	opt stack 0
  1611  000060                     EncodeShiftRow@stateTable:
  1612                           	opt stack 0
  1613  000060                     ExecuteDutyCycle@ptr:
  1614                           	opt stack 0
  1615  000060                     ExecuteDevStatus@ptr:
  1616                           	opt stack 0
  1617  000060                     UpdateDutyCycle@dutyCycleNew:
  1618                           	opt stack 0
  1619  000060                     ValidateChannelMask@channelMask:
  1620                           	opt stack 0
  1621  000060                     INT1_SetInterruptHandler@InterruptHandler:
  1622                           	opt stack 0
  1623  000060                     INT2_SetInterruptHandler@InterruptHandler:
  1624                           	opt stack 0
  1625  000060                     IOCB4_SetInterruptHandler@InterruptHandler:
  1626                           	opt stack 0
  1627  000060                     EUSART1_SetFramingErrorHandler@interruptHandler:
  1628                           	opt stack 0
  1629  000060                     EUSART1_SetOverrunErrorHandler@interruptHandler:
  1630                           	opt stack 0
  1631  000060                     EUSART1_SetErrorHandler@interruptHandler:
  1632                           	opt stack 0
  1633  000060                     EUSART1_SetTxInterruptHandler@interruptHandler:
  1634                           	opt stack 0
  1635  000060                     EUSART1_SetRxInterruptHandler@interruptHandler:
  1636                           	opt stack 0
  1637  000060                     TMR1_WriteTimer@timerVal:
  1638                           	opt stack 0
  1639  000060                     TMR1_SetInterruptHandler@InterruptHandler:
  1640                           	opt stack 0
  1641  000060                     RxData@pData:
  1642                           	opt stack 0
  1643  000060                     ___wmul@multiplier:
  1644                           	opt stack 0
  1645  000060                     ___awmod@dividend:
  1646                           	opt stack 0
  1647  000060                     memcpy@d1:
  1648                           	opt stack 0
  1649  000060                     memset@p1:
  1650                           	opt stack 0
  1651  000060                     RADIO_SetChannelFrequency@frequency:
  1652                           	opt stack 0
  1653  000060                     LORAWAN_SetDeviceAddress@deviceAddressNew:
  1654                           	opt stack 0
  1655  000060                     UpdateReceiveWindow2Parameters@frequency:
  1656                           	opt stack 0
  1657  000060                     SystemBlockingWaitMs@ms:
  1658                           	opt stack 0
  1659  000060                     ValidateFrequency@frequencyNew:
  1660                           	opt stack 0
  1661  000060                     UpdateFrequency@frequencyNew:
  1662                           	opt stack 0
  1663  000060                     ___almod@dividend:
  1664                           	opt stack 0
  1665  000060                     ___lldiv@dividend:
  1666                           	opt stack 0
  1667  000060                     ___llmod@dividend:
  1668                           	opt stack 0
  1669                           
  1670                           ; 4 bytes @ 0x0
  1671  000060                     	ds	1
  1672  000061                     ??_UpdateDataRange:
  1673  000061                     ??_UpdateChannelIdStatus:
  1674  000061                     ??___abdiv:
  1675  000061                     HALSPISend@data:
  1676                           	opt stack 0
  1677  000061                     UpdateMinMaxChDataRate@i:
  1678                           	opt stack 0
  1679  000061                     FindSmallestDataRate@found:
  1680                           	opt stack 0
  1681  000061                     SwTimerIsRunning@isRunning:
  1682                           	opt stack 0
  1683  000061                     ValidateDataRate@result:
  1684                           	opt stack 0
  1685  000061                     ValidateTxPower@txPowerNew:
  1686                           	opt stack 0
  1687  000061                     UpdateDLSettings@dlRx2Dr:
  1688                           	opt stack 0
  1689  000061                     ValidateRxOffset@result:
  1690                           	opt stack 0
  1691  000061                     ValidateChannelId@result:
  1692                           	opt stack 0
  1693  000061                     ValidateChannelMaskCntl@channelMaskCntl:
  1694                           	opt stack 0
  1695                           
  1696                           ; 1 bytes @ 0x1
  1697  000061                     	ds	1
  1698  000062                     ??_ExecuteDutyCycle:
  1699  000062                     ??_TMR1_ReadTimer:
  1700  000062                     ??_EncKeySchedule:
  1701  000062                     ??_ValidateChannelMask:
  1702  000062                     RADIO_RegisterWrite@value:
  1703                           	opt stack 0
  1704  000062                     RADIO_RegisterRead@reg:
  1705                           	opt stack 0
  1706  000062                     FindSmallestDataRate@i:
  1707                           	opt stack 0
  1708  000062                     SwTimerSetCallback@callbackParameter:
  1709                           	opt stack 0
  1710  000062                     EncodeShiftRow@temp:
  1711                           	opt stack 0
  1712  000062                     UpdateDataRange@channelId:
  1713                           	opt stack 0
  1714  000062                     UpdateChannelIdStatus@channelId:
  1715                           	opt stack 0
  1716  000062                     ValidateDataRange@result:
  1717                           	opt stack 0
  1718  000062                     ValidateChannelId@channelId:
  1719                           	opt stack 0
  1720  000062                     UpdateDutyCycle@channelId:
  1721                           	opt stack 0
  1722  000062                     RxData@dataLength:
  1723                           	opt stack 0
  1724  000062                     FillSubKey@key:
  1725                           	opt stack 0
  1726  000062                     IncludeMacCommandsResponse@pBufferIndex:
  1727                           	opt stack 0
  1728  000062                     ___wmul@multiplicand:
  1729                           	opt stack 0
  1730  000062                     ___awmod@divisor:
  1731                           	opt stack 0
  1732  000062                     memcpy@s1:
  1733                           	opt stack 0
  1734  000062                     memset@c:
  1735                           	opt stack 0
  1736                           
  1737                           ; 2 bytes @ 0x2
  1738  000062                     	ds	1
  1739  000063                     RADIO_RegisterWrite@reg:
  1740                           	opt stack 0
  1741  000063                     RADIO_RegisterRead@readValue:
  1742                           	opt stack 0
  1743  000063                     FindSmallestDataRate@dataRate:
  1744                           	opt stack 0
  1745  000063                     SwTimerSetCallback@timerId:
  1746                           	opt stack 0
  1747  000063                     UpdateDataRange@i:
  1748                           	opt stack 0
  1749  000063                     UpdateChannelIdStatus@i:
  1750                           	opt stack 0
  1751  000063                     ValidateDataRange@dataRangeNew:
  1752                           	opt stack 0
  1753  000063                     RxData@status:
  1754                           	opt stack 0
  1755  000063                     ___abdiv@counter:
  1756                           	opt stack 0
  1757                           
  1758                           ; 1 bytes @ 0x3
  1759  000063                     	ds	1
  1760  000064                     ??_SystemBlockingWaitMs:
  1761  000064                     FillSubKey@size:
  1762                           	opt stack 0
  1763  000064                     RADIO_WritePower@ocp:
  1764                           	opt stack 0
  1765  000064                     RADIO_UnhandledInterrupt@modulation:
  1766                           	opt stack 0
  1767  000064                     UpdateReceiveWindow2Parameters@dataRate:
  1768                           	opt stack 0
  1769  000064                     IncludeMacCommandsResponse@bIncludeInFopts:
  1770                           	opt stack 0
  1771  000064                     LORAWAN_SetChannelIdStatus@statusNew:
  1772                           	opt stack 0
  1773  000064                     ValidateFrequency@result:
  1774                           	opt stack 0
  1775  000064                     ValidateDataRange@dataRateMax:
  1776                           	opt stack 0
  1777  000064                     UpdateFrequency@channelId:
  1778                           	opt stack 0
  1779  000064                     ValidateChannelMask@i:
  1780                           	opt stack 0
  1781  000064                     ___abdiv@sign:
  1782                           	opt stack 0
  1783  000064                     ___awmod@counter:
  1784                           	opt stack 0
  1785  000064                     _EncKeySchedule$2132:
  1786                           	opt stack 0
  1787  000064                     EnableChannels1@channelMask:
  1788                           	opt stack 0
  1789  000064                     TMR1_ReadTimer@readVal:
  1790                           	opt stack 0
  1791  000064                     ___wmul@product:
  1792                           	opt stack 0
  1793  000064                     memcpy@n:
  1794                           	opt stack 0
  1795  000064                     memset@n:
  1796                           	opt stack 0
  1797  000064                     ___almod@divisor:
  1798                           	opt stack 0
  1799  000064                     ___lldiv@divisor:
  1800                           	opt stack 0
  1801  000064                     ___llmod@divisor:
  1802                           	opt stack 0
  1803                           
  1804                           ; 4 bytes @ 0x4
  1805  000064                     	ds	1
  1806  000065                     ??_FillSubKey:
  1807  000065                     ??_IncludeMacCommandsResponse:
  1808  000065                     ??_RADIO_DIO3:
  1809  000065                     ??_RADIO_DIO4:
  1810  000065                     ??_RADIO_DIO5:
  1811  000065                     RADIO_WriteMode@newModulation:
  1812                           	opt stack 0
  1813  000065                     RADIO_WritePower@paDac:
  1814                           	opt stack 0
  1815  000065                     LORAWAN_SetChannelIdStatus@result:
  1816                           	opt stack 0
  1817  000065                     ExecuteDutyCycle@maxDCycle:
  1818                           	opt stack 0
  1819  000065                     ValidateDataRange@dataRateMin:
  1820                           	opt stack 0
  1821  000065                     ___abdiv@quotient:
  1822                           	opt stack 0
  1823  000065                     ___awmod@sign:
  1824                           	opt stack 0
  1825                           
  1826                           ; 1 bytes @ 0x5
  1827  000065                     	ds	1
  1828  000066                     ?___awdiv:
  1829                           	opt stack 0
  1830  000066                     FillSubKey@carry:
  1831                           	opt stack 0
  1832  000066                     RADIO_WriteMode@blocking:
  1833                           	opt stack 0
  1834  000066                     RADIO_WritePower@power:
  1835                           	opt stack 0
  1836  000066                     RADIO_DIO3@dioMapping:
  1837                           	opt stack 0
  1838  000066                     RADIO_DIO5@dioMapping:
  1839                           	opt stack 0
  1840  000066                     UpdateReceiveDelays@delay:
  1841                           	opt stack 0
  1842  000066                     CountfOptsLength@macCommandLength:
  1843                           	opt stack 0
  1844  000066                     LORAWAN_SetChannelIdStatus@channelId:
  1845                           	opt stack 0
  1846  000066                     EnableChannels1@channelMaskCntl:
  1847                           	opt stack 0
  1848  000066                     TMR1_ReadTimer@readValHigh:
  1849                           	opt stack 0
  1850  000066                     ___abdiv@dividend:
  1851                           	opt stack 0
  1852  000066                     AESEncode@block:
  1853                           	opt stack 0
  1854  000066                     ___awdiv@dividend:
  1855                           	opt stack 0
  1856  000066                     memcpy@d:
  1857                           	opt stack 0
  1858  000066                     memset@p:
  1859                           	opt stack 0
  1860                           
  1861                           ; 2 bytes @ 0x6
  1862  000066                     	ds	1
  1863  000067                     ?_ExecuteRxTimingSetup:
  1864                           	opt stack 0
  1865  000067                     FillSubKey@i:
  1866                           	opt stack 0
  1867  000067                     RADIO_WriteMode@currentModulation:
  1868                           	opt stack 0
  1869  000067                     RADIO_DIO4@dioMapping:
  1870                           	opt stack 0
  1871  000067                     CountfOptsLength@i:
  1872                           	opt stack 0
  1873  000067                     EnableChannels1@channelIndexMin:
  1874                           	opt stack 0
  1875  000067                     TMR1_ReadTimer@readValLow:
  1876                           	opt stack 0
  1877  000067                     ExecuteRxTimingSetup@ptr:
  1878                           	opt stack 0
  1879                           
  1880                           ; 2 bytes @ 0x7
  1881  000067                     	ds	1
  1882  000068                     ??_LORAWAN_GetMaxPayloadSize:
  1883  000068                     ?_TMR_SwapTimer:
  1884                           	opt stack 0
  1885  000068                     ?_TMR_GetDeltaTime:
  1886                           	opt stack 0
  1887  000068                     RADIO_WriteMode@dioMapping:
  1888                           	opt stack 0
  1889  000068                     EnableChannels1@channelIndexMax:
  1890                           	opt stack 0
  1891  000068                     ___almod@counter:
  1892                           	opt stack 0
  1893  000068                     ___llmod@counter:
  1894                           	opt stack 0
  1895  000068                     TMR_SwapTimer@timerVal:
  1896                           	opt stack 0
  1897  000068                     AESEncode@key:
  1898                           	opt stack 0
  1899  000068                     ___awdiv@divisor:
  1900                           	opt stack 0
  1901  000068                     memcpy@s:
  1902                           	opt stack 0
  1903  000068                     ___lldiv@quotient:
  1904                           	opt stack 0
  1905                           
  1906                           ; 4 bytes @ 0x8
  1907  000068                     	ds	1
  1908  000069                     ??_EnableChannels1:
  1909  000069                     RADIO_WriteMode@currentMode:
  1910                           	opt stack 0
  1911  000069                     LORAWAN_GetMaxPayloadSize@macCommandsLength:
  1912                           	opt stack 0
  1913  000069                     ExecuteRxTimingSetup@delay:
  1914                           	opt stack 0
  1915  000069                     ___almod@sign:
  1916                           	opt stack 0
  1917                           
  1918                           ; 1 bytes @ 0x9
  1919  000069                     	ds	1
  1920  00006A                     ??_AESEncode:
  1921  00006A                     ?___aldiv:
  1922                           	opt stack 0
  1923  00006A                     RADIO_WriteMode@newMode:
  1924                           	opt stack 0
  1925  00006A                     LORAWAN_GetMaxPayloadSize@result:
  1926                           	opt stack 0
  1927  00006A                     ___awdiv@counter:
  1928                           	opt stack 0
  1929  00006A                     memcpy@tmp:
  1930                           	opt stack 0
  1931  00006A                     TMR_OverrideRemaining@ticksRemaining:
  1932                           	opt stack 0
  1933  00006A                     ___aldiv@dividend:
  1934                           	opt stack 0
  1935                           
  1936                           ; 4 bytes @ 0xA
  1937  00006A                     	ds	1
  1938  00006B                     ?_ExtractMic:
  1939                           	opt stack 0
  1940  00006B                     RADIO_WriteMode@opMode:
  1941                           	opt stack 0
  1942  00006B                     InitDefault868Channels@i:
  1943                           	opt stack 0
  1944  00006B                     InitDefault433Channels@i:
  1945                           	opt stack 0
  1946  00006B                     EnableChannels1@i:
  1947                           	opt stack 0
  1948  00006B                     ___awdiv@sign:
  1949                           	opt stack 0
  1950  00006B                     RADIO_SetFSKSyncWord@syncWord:
  1951                           	opt stack 0
  1952  00006B                     LORAWAN_SetNetworkSessionKey@networkSessionKeyNew:
  1953                           	opt stack 0
  1954  00006B                     LORAWAN_SetApplicationSessionKey@applicationSessionKeyNew:
  1955                           	opt stack 0
  1956  00006B                     PrepareSessionKeys@sessionKey:
  1957                           	opt stack 0
  1958  00006B                     ExtractMic@buffer:
  1959                           	opt stack 0
  1960  00006B                     AssembleEncryptionBlock@frameCounter:
  1961                           	opt stack 0
  1962                           
  1963                           ; 4 bytes @ 0xB
  1964  00006B                     	ds	1
  1965  00006C                     ??_TMR_GetDeltaTime:
  1966  00006C                     ?_RADIO_ReadRandom:
  1967                           	opt stack 0
  1968  00006C                     ___lldiv@counter:
  1969                           	opt stack 0
  1970  00006C                     EnableChannels@channelMask:
  1971                           	opt stack 0
  1972  00006C                     ___awdiv@quotient:
  1973                           	opt stack 0
  1974                           
  1975                           ; 2 bytes @ 0xC
  1976  00006C                     	ds	1
  1977  00006D                     RADIO_SetFSKSyncWord@syncWordLen:
  1978                           	opt stack 0
  1979  00006D                     IncludeMacCommandsResponse@i:
  1980                           	opt stack 0
  1981  00006D                     ExtractMic@bufferLength:
  1982                           	opt stack 0
  1983  00006D                     PrepareSessionKeys@appNonce:
  1984                           	opt stack 0
  1985  00006D                     RADIO_WriteFrequency@frequency:
  1986                           	opt stack 0
  1987  00006D                     RADIO_WriteFSKFrequencyDeviation@frequencyDeviation:
  1988                           	opt stack 0
  1989  00006D                     RADIO_WriteFSKBitRate@bitRate:
  1990                           	opt stack 0
  1991  00006D                     SwTimerSetTimeout@timeout:
  1992                           	opt stack 0
  1993                           
  1994                           ; 4 bytes @ 0xD
  1995  00006D                     	ds	1
  1996  00006E                     ??_RADIO_ReadRandom:
  1997  00006E                     ??_TMR_OverrideRemaining:
  1998  00006E                     IncludeMacCommandsResponse@bufferIndex:
  1999                           	opt stack 0
  2000  00006E                     EnableChannels@channelMaskCntl:
  2001                           	opt stack 0
  2002  00006E                     ConfigureRadio@freq:
  2003                           	opt stack 0
  2004  00006E                     ___aldiv@divisor:
  2005                           	opt stack 0
  2006                           
  2007                           ; 4 bytes @ 0xE
  2008  00006E                     	ds	1
  2009  00006F                     ??_ExtractMic:
  2010  00006F                     ?_ExecuteLinkAdr:
  2011                           	opt stack 0
  2012  00006F                     AssembleEncryptionBlock@blockId:
  2013                           	opt stack 0
  2014  00006F                     RADIO_ReadRandom@retVal:
  2015                           	opt stack 0
  2016  00006F                     PrepareSessionKeys@networkId:
  2017                           	opt stack 0
  2018  00006F                     ExecuteLinkAdr@ptr:
  2019                           	opt stack 0
  2020                           
  2021                           ; 2 bytes @ 0xF
  2022  00006F                     	ds	1
  2023  000070                     AssembleEncryptionBlock@firstByte:
  2024                           	opt stack 0
  2025  000070                     TMR_OverrideRemaining@tmrVal:
  2026                           	opt stack 0
  2027                           
  2028                           ; 2 bytes @ 0x10
  2029  000070                     	ds	1
  2030  000071                     ??_SwTimerSetTimeout:
  2031  000071                     ??_ExecuteLinkAdr:
  2032  000071                     RADIO_ReadRandom@i:
  2033                           	opt stack 0
  2034  000071                     PrepareSessionKeys@index:
  2035                           	opt stack 0
  2036  000071                     AssembleEncryptionBlock@multicastStatus:
  2037                           	opt stack 0
  2038  000071                     RADIO_WriteFrequency@num_mod:
  2039                           	opt stack 0
  2040  000071                     RADIO_WriteFSKFrequencyDeviation@num:
  2041                           	opt stack 0
  2042  000071                     RADIO_WriteFSKBitRate@num:
  2043                           	opt stack 0
  2044                           
  2045                           ; 4 bytes @ 0x11
  2046  000071                     	ds	1
  2047  000072                     AssembleEncryptionBlock@dir:
  2048                           	opt stack 0
  2049  000072                     ConfigureRadio@dataRate:
  2050                           	opt stack 0
  2051  000072                     ___aldiv@counter:
  2052                           	opt stack 0
  2053  000072                     TMR_OverrideRemaining@oldReloadVal:
  2054                           	opt stack 0
  2055  000072                     _AESEncode$2127:
  2056                           	opt stack 0
  2057  000072                     srand@x:
  2058                           	opt stack 0
  2059                           
  2060                           ; 2 bytes @ 0x12
  2061  000072                     	ds	1
  2062  000073                     AssembleEncryptionBlock@bufferIndex:
  2063                           	opt stack 0
  2064  000073                     ___aldiv@sign:
  2065                           	opt stack 0
  2066  000073                     ExecuteLinkAdr@channelMask:
  2067                           	opt stack 0
  2068  000073                     ConfigureRadioRx@freq:
  2069                           	opt stack 0
  2070  000073                     ExtractMic@mic:
  2071                           	opt stack 0
  2072  000073                     ConfigureRadioTx@freq:
  2073                           	opt stack 0
  2074                           
  2075                           ; 4 bytes @ 0x13
  2076  000073                     	ds	1
  2077  000074                     _AESEncode$2128:
  2078                           	opt stack 0
  2079  000074                     ___aldiv@quotient:
  2080                           	opt stack 0
  2081                           
  2082                           ; 4 bytes @ 0x14
  2083  000074                     	ds	1
  2084  000075                     SwTimerSetTimeout@timerId:
  2085                           	opt stack 0
  2086  000075                     ExecuteLinkAdr@txPower:
  2087                           	opt stack 0
  2088  000075                     RADIO_WriteFrequency@num:
  2089                           	opt stack 0
  2090                           
  2091                           ; 4 bytes @ 0x15
  2092  000075                     	ds	1
  2093  000076                     _AESEncode$2129:
  2094                           	opt stack 0
  2095  000076                     ExecuteLinkAdr@redundancy:
  2096                           	opt stack 0
  2097                           
  2098                           ; 2 bytes @ 0x16
  2099  000076                     	ds	1
  2100  000077                     ConfigureRadioRx@dataRate:
  2101                           	opt stack 0
  2102  000077                     ConfigureRadioTx@dataRate:
  2103                           	opt stack 0
  2104                           
  2105                           ; 1 bytes @ 0x17
  2106  000077                     	ds	1
  2107  000078                     AESEncode@aux:
  2108                           	opt stack 0
  2109  000078                     ExecuteLinkAdr@dataRate:
  2110                           	opt stack 0
  2111  000078                     ConfigureRadioTx@txPower:
  2112                           	opt stack 0
  2113                           
  2114                           ; 1 bytes @ 0x18
  2115  000078                     	ds	1
  2116  000079                     RADIO_FHSSChangeChannel@irqFlags:
  2117                           	opt stack 0
  2118  000079                     AESEncode@aux2:
  2119                           	opt stack 0
  2120  000079                     RADIO_Init@radioBuffer:
  2121                           	opt stack 0
  2122                           
  2123                           ; 2 bytes @ 0x19
  2124  000079                     	ds	1
  2125  00007A                     ??_RADIO_DIO2:
  2126  00007A                     AESEncode@aux1:
  2127                           	opt stack 0
  2128                           
  2129                           ; 1 bytes @ 0x1A
  2130  00007A                     	ds	1
  2131  00007B                     RADIO_DIO2@opMode:
  2132                           	opt stack 0
  2133  00007B                     AESEncode@aux3:
  2134                           	opt stack 0
  2135  00007B                     RADIO_Init@frequency:
  2136                           	opt stack 0
  2137                           
  2138                           ; 4 bytes @ 0x1B
  2139  00007B                     	ds	1
  2140  00007C                     RADIO_DIO2@dioMapping:
  2141                           	opt stack 0
  2142  00007C                     AESEncode@i:
  2143                           	opt stack 0
  2144                           
  2145                           ; 1 bytes @ 0x1C
  2146  00007C                     	ds	1
  2147  00007D                     AESEncodeLoRa@block:
  2148                           	opt stack 0
  2149                           
  2150                           ; 2 bytes @ 0x1D
  2151  00007D                     	ds	2
  2152  00007F                     ??_RADIO_Init:
  2153  00007F                     AESEncodeLoRa@key:
  2154                           	opt stack 0
  2155                           
  2156                           ; 2 bytes @ 0x1F
  2157  00007F                     	ds	1
  2158  000080                     ?_SwTimersInterrupt:
  2159                           	opt stack 0
  2160                           
  2161                           ; 4 bytes @ 0x20
  2162  000080                     	ds	1
  2163  000081                     AESEncodeLoRa@useKey:
  2164                           	opt stack 0
  2165                           
  2166                           ; 16 bytes @ 0x21
  2167  000081                     	ds	3
  2168  000084                     
  2169                           ; 1 bytes @ 0x24
  2170  000084                     	ds	4
  2171  000088                     SwTimersInterrupt@timeElapsed:
  2172                           	opt stack 0
  2173                           
  2174                           ; 4 bytes @ 0x28
  2175  000088                     	ds	4
  2176  00008C                     SwTimersInterrupt@ticksToNextTimerEvent:
  2177                           	opt stack 0
  2178                           
  2179                           ; 4 bytes @ 0x2C
  2180  00008C                     	ds	4
  2181  000090                     SwTimersInterrupt@i:
  2182                           	opt stack 0
  2183                           
  2184                           ; 1 bytes @ 0x30
  2185  000090                     	ds	1
  2186  000091                     ?_SwTimerReadValue:
  2187                           	opt stack 0
  2188  000091                     GenerateSubkey@key:
  2189                           	opt stack 0
  2190  000091                     ComputeSessionKeys@joinAcceptBuffer:
  2191                           	opt stack 0
  2192  000091                     EncryptFRMPayload@buffer:
  2193                           	opt stack 0
  2194                           
  2195                           ; 2 bytes @ 0x31
  2196  000091                     	ds	2
  2197  000093                     EncryptFRMPayload@bufferLength:
  2198                           	opt stack 0
  2199  000093                     GenerateSubkey@k1:
  2200                           	opt stack 0
  2201                           
  2202                           ; 2 bytes @ 0x33
  2203  000093                     	ds	1
  2204  000094                     EncryptFRMPayload@dir:
  2205                           	opt stack 0
  2206                           
  2207                           ; 1 bytes @ 0x34
  2208  000094                     	ds	1
  2209  000095                     GenerateSubkey@k2:
  2210                           	opt stack 0
  2211  000095                     EncryptFRMPayload@frameCounter:
  2212                           	opt stack 0
  2213  000095                     SwTimerReadValue@ticksCount:
  2214                           	opt stack 0
  2215  000095                     SwTimerStart@ticksRemaining:
  2216                           	opt stack 0
  2217                           
  2218                           ; 4 bytes @ 0x35
  2219  000095                     	ds	2
  2220  000097                     ??_GenerateSubkey:
  2221                           
  2222                           ; 1 bytes @ 0x37
  2223  000097                     	ds	1
  2224  000098                     GenerateSubkey@const_Rb:
  2225                           	opt stack 0
  2226                           
  2227                           ; 16 bytes @ 0x38
  2228  000098                     	ds	1
  2229  000099                     SwTimerReadValue@timerId:
  2230                           	opt stack 0
  2231  000099                     SwTimerStart@timerId:
  2232                           	opt stack 0
  2233  000099                     EncryptFRMPayload@key:
  2234                           	opt stack 0
  2235                           
  2236                           ; 2 bytes @ 0x39
  2237  000099                     	ds	1
  2238  00009A                     ??_UpdateRetransmissionAckTimeoutState:
  2239  00009A                     ??_StartReTxTimer:
  2240  00009A                     ?___lmul:
  2241                           	opt stack 0
  2242  00009A                     ___lmul@multiplier:
  2243                           	opt stack 0
  2244                           
  2245                           ; 4 bytes @ 0x3A
  2246  00009A                     	ds	1
  2247  00009B                     EncryptFRMPayload@macBufferIndex:
  2248                           	opt stack 0
  2249                           
  2250                           ; 1 bytes @ 0x3B
  2251  00009B                     	ds	1
  2252  00009C                     EncryptFRMPayload@bufferToBeEncrypted:
  2253                           	opt stack 0
  2254                           
  2255                           ; 2 bytes @ 0x3C
  2256  00009C                     	ds	2
  2257  00009E                     EncryptFRMPayload@multicastStatus:
  2258                           	opt stack 0
  2259  00009E                     StartReTxTimer@minim:
  2260                           	opt stack 0
  2261  00009E                     ___lmul@multiplicand:
  2262                           	opt stack 0
  2263                           
  2264                           ; 4 bytes @ 0x3E
  2265  00009E                     	ds	1
  2266  00009F                     ??_EncryptFRMPayload:
  2267                           
  2268                           ; 1 bytes @ 0x3F
  2269  00009F                     	ds	3
  2270  0000A2                     StartReTxTimer@i:
  2271                           	opt stack 0
  2272  0000A2                     ___lmul@product:
  2273                           	opt stack 0
  2274                           
  2275                           ; 4 bytes @ 0x42
  2276  0000A2                     	ds	2
  2277  0000A4                     EncryptFRMPayload@k:
  2278                           	opt stack 0
  2279                           
  2280                           ; 1 bytes @ 0x44
  2281  0000A4                     	ds	1
  2282  0000A5                     EncryptFRMPayload@i:
  2283                           	opt stack 0
  2284                           
  2285                           ; 1 bytes @ 0x45
  2286  0000A5                     	ds	1
  2287  0000A6                     ?_rand:
  2288                           	opt stack 0
  2289  0000A6                     ?_ExecuteRxParamSetupReq:
  2290                           	opt stack 0
  2291  0000A6                     ?_ExecuteNewChannel:
  2292                           	opt stack 0
  2293  0000A6                     EncryptFRMPayload@j:
  2294                           	opt stack 0
  2295  0000A6                     RADIO_WriteConfiguration@symbolTimeout:
  2296                           	opt stack 0
  2297  0000A6                     LORAWAN_LinkCheckConfigure@period:
  2298                           	opt stack 0
  2299  0000A6                     ExecuteNewChannel@ptr:
  2300                           	opt stack 0
  2301  0000A6                     ExecuteRxParamSetupReq@ptr:
  2302                           	opt stack 0
  2303  0000A6                     UpdateCfList@joinAccept:
  2304                           	opt stack 0
  2305                           
  2306                           ; 2 bytes @ 0x46
  2307  0000A6                     	ds	2
  2308  0000A8                     ??_ExecuteRxParamSetupReq:
  2309  0000A8                     ??_ExecuteNewChannel:
  2310  0000A8                     ??_RADIO_WriteConfiguration:
  2311  0000A8                     ??_LORAWAN_LinkCheckConfigure:
  2312  0000A8                     ?___lwmod:
  2313                           	opt stack 0
  2314  0000A8                     UpdateCfList@bufferLength:
  2315                           	opt stack 0
  2316  0000A8                     ___lwmod@dividend:
  2317                           	opt stack 0
  2318  0000A8                     GenerateSubkey@l:
  2319                           	opt stack 0
  2320                           
  2321                           ; 16 bytes @ 0x48
  2322  0000A8                     	ds	1
  2323  0000A9                     UpdateCfList@frequency:
  2324                           	opt stack 0
  2325                           
  2326                           ; 4 bytes @ 0x49
  2327  0000A9                     	ds	1
  2328  0000AA                     ExecuteNewChannel@drRange:
  2329                           	opt stack 0
  2330  0000AA                     ___lwmod@divisor:
  2331                           	opt stack 0
  2332  0000AA                     ExecuteRxParamSetupReq@frequency:
  2333                           	opt stack 0
  2334                           
  2335                           ; 4 bytes @ 0x4A
  2336  0000AA                     	ds	1
  2337  0000AB                     RADIO_WriteConfiguration@i:
  2338                           	opt stack 0
  2339  0000AB                     ExecuteNewChannel@frequency:
  2340                           	opt stack 0
  2341                           
  2342                           ; 4 bytes @ 0x4B
  2343  0000AB                     	ds	1
  2344  0000AC                     ___lwmod@counter:
  2345                           	opt stack 0
  2346  0000AC                     RADIO_WriteConfiguration@tempValue:
  2347                           	opt stack 0
  2348  0000AC                     _LORAWAN_LinkCheckConfigure$1514:
  2349                           	opt stack 0
  2350                           
  2351                           ; 4 bytes @ 0x4C
  2352  0000AC                     	ds	1
  2353  0000AD                     ?_Random:
  2354                           	opt stack 0
  2355  0000AD                     UpdateCfList@channelIndex:
  2356                           	opt stack 0
  2357  0000AD                     Random@max:
  2358                           	opt stack 0
  2359                           
  2360                           ; 2 bytes @ 0x4D
  2361  0000AD                     	ds	1
  2362  0000AE                     ExecuteRxParamSetupReq@dlSettings:
  2363                           	opt stack 0
  2364  0000AE                     UpdateCfList@i:
  2365                           	opt stack 0
  2366                           
  2367                           ; 1 bytes @ 0x4E
  2368  0000AE                     	ds	1
  2369  0000AF                     ExecuteNewChannel@channelIndex:
  2370                           	opt stack 0
  2371  0000AF                     SearchAvailableChannel@transmissionType:
  2372                           	opt stack 0
  2373                           
  2374                           ; 1 bytes @ 0x4F
  2375  0000AF                     	ds	1
  2376  0000B0                     ?_MacExecuteCommands:
  2377                           	opt stack 0
  2378  0000B0                     RADIO_WriteConfiguration@regValue:
  2379                           	opt stack 0
  2380  0000B0                     LORAWAN_LinkCheckConfigure@iCtr:
  2381                           	opt stack 0
  2382  0000B0                     MacExecuteCommands@buffer:
  2383                           	opt stack 0
  2384  0000B0                     SearchAvailableChannel@channelIndex:
  2385                           	opt stack 0
  2386                           
  2387                           ; 2 bytes @ 0x50
  2388  0000B0                     	ds	1
  2389  0000B1                     ?_RADIO_Transmit:
  2390                           	opt stack 0
  2391  0000B1                     ?_RADIO_ReceiveStart:
  2392                           	opt stack 0
  2393  0000B1                     LORAWAN_Reset@ismBandNew:
  2394                           	opt stack 0
  2395  0000B1                     RADIO_Transmit@buffer:
  2396                           	opt stack 0
  2397  0000B1                     RADIO_ReceiveStart@rxWindowSize:
  2398                           	opt stack 0
  2399                           
  2400                           ; 2 bytes @ 0x51
  2401  0000B1                     	ds	1
  2402  0000B2                     ??_SearchAvailableChannel:
  2403  0000B2                     MacExecuteCommands@fOptsLen:
  2404                           	opt stack 0
  2405  0000B2                     LORAWAN_Init@RxPayload:
  2406                           	opt stack 0
  2407                           
  2408                           ; 2 bytes @ 0x52
  2409  0000B2                     	ds	1
  2410  0000B3                     ??_MacExecuteCommands:
  2411  0000B3                     ??_RADIO_ReceiveStart:
  2412  0000B3                     RADIO_Transmit@bufferLen:
  2413                           	opt stack 0
  2414                           
  2415                           ; 1 bytes @ 0x53
  2416  0000B3                     	ds	1
  2417  0000B4                     ??_RADIO_Transmit:
  2418  0000B4                     LORAWAN_Init@RxJoinResponse:
  2419                           	opt stack 0
  2420                           
  2421                           ; 2 bytes @ 0x54
  2422  0000B4                     	ds	1
  2423  0000B5                     MacExecuteCommands@done:
  2424                           	opt stack 0
  2425                           
  2426                           ; 1 bytes @ 0x55
  2427  0000B5                     	ds	1
  2428  0000B6                     SearchAvailableChannel@randomNumberCopy:
  2429                           	opt stack 0
  2430  0000B6                     MacExecuteCommands@ptr:
  2431                           	opt stack 0
  2432                           
  2433                           ; 2 bytes @ 0x56
  2434  0000B6                     	ds	1
  2435  0000B7                     SearchAvailableChannel@result:
  2436                           	opt stack 0
  2437  0000B7                     _RADIO_ReceiveStart$521:
  2438                           	opt stack 0
  2439                           
  2440                           ; 4 bytes @ 0x57
  2441  0000B7                     	ds	1
  2442  0000B8                     GenerateSubkey@i:
  2443                           	opt stack 0
  2444  0000B8                     SearchAvailableChannel@maxChannels:
  2445                           	opt stack 0
  2446  0000B8                     _RADIO_Transmit$517:
  2447                           	opt stack 0
  2448                           
  2449                           ; 4 bytes @ 0x58
  2450  0000B8                     	ds	1
  2451  0000B9                     SearchAvailableChannel@randomNumber:
  2452                           	opt stack 0
  2453  0000B9                     AESCmac@key:
  2454                           	opt stack 0
  2455                           
  2456                           ; 2 bytes @ 0x59
  2457  0000B9                     	ds	1
  2458  0000BA                     SearchAvailableChannel@i:
  2459                           	opt stack 0
  2460                           
  2461                           ; 1 bytes @ 0x5A
  2462  0000BA                     	ds	1
  2463  0000BB                     SelectChannelForTransmission@transmissionType:
  2464                           	opt stack 0
  2465  0000BB                     AESCmac@output:
  2466                           	opt stack 0
  2467  0000BB                     LORAWAN_TxDone@timeOnAir:
  2468                           	opt stack 0
  2469                           
  2470                           ; 2 bytes @ 0x5B
  2471  0000BB                     	ds	1
  2472  0000BC                     SelectChannelForTransmission@result:
  2473                           	opt stack 0
  2474  0000BC                     _RADIO_Transmit$518:
  2475                           	opt stack 0
  2476                           
  2477                           ; 4 bytes @ 0x5C
  2478  0000BC                     	ds	1
  2479  0000BD                     ??_LORAWAN_TxDone:
  2480  0000BD                     SelectChannelForTransmission@channelIndex:
  2481                           	opt stack 0
  2482  0000BD                     AESCmac@input:
  2483                           	opt stack 0
  2484                           
  2485                           ; 2 bytes @ 0x5D
  2486  0000BD                     	ds	2
  2487  0000BF                     AESCmac@size:
  2488                           	opt stack 0
  2489                           
  2490                           ; 1 bytes @ 0x5F
  2491  0000BF                     	ds	1
  2492  0000C0                     ??_AESCmac:
  2493  0000C0                     RADIO_Transmit@regValue:
  2494                           	opt stack 0
  2495                           
  2496                           ; 1 bytes @ 0x60
  2497  0000C0                     	ds	1
  2498  0000C1                     RADIO_Transmit@i:
  2499                           	opt stack 0
  2500                           
  2501                           ; 1 bytes @ 0x61
  2502  0000C1                     	ds	1
  2503  0000C2                     ??_LORAWAN_RxTimeout:
  2504                           
  2505                           ; 1 bytes @ 0x62
  2506  0000C2                     	ds	4
  2507  0000C6                     LORAWAN_RxTimeout@minim:
  2508                           	opt stack 0
  2509                           
  2510                           ; 4 bytes @ 0x66
  2511  0000C6                     	ds	1
  2512  0000C7                     ?_ComputeMic:
  2513                           	opt stack 0
  2514  0000C7                     AssemblePacket@port:
  2515                           	opt stack 0
  2516  0000C7                     ComputeMic@key:
  2517                           	opt stack 0
  2518                           
  2519                           ; 2 bytes @ 0x67
  2520  0000C7                     	ds	1
  2521  0000C8                     AssemblePacket@buffer:
  2522                           	opt stack 0
  2523                           
  2524                           ; 2 bytes @ 0x68
  2525  0000C8                     	ds	1
  2526  0000C9                     ComputeMic@buffer:
  2527                           	opt stack 0
  2528  0000C9                     _LORAWAN_TxDone$2660:
  2529                           	opt stack 0
  2530                           
  2531                           ; 4 bytes @ 0x69
  2532  0000C9                     	ds	1
  2533  0000CA                     LORAWAN_RxTimeout@i:
  2534                           	opt stack 0
  2535  0000CA                     AssemblePacket@bufferLength:
  2536                           	opt stack 0
  2537                           
  2538                           ; 2 bytes @ 0x6A
  2539  0000CA                     	ds	1
  2540  0000CB                     ??_RADIO_DIO1:
  2541  0000CB                     ComputeMic@bufferLength:
  2542                           	opt stack 0
  2543                           
  2544                           ; 1 bytes @ 0x6B
  2545  0000CB                     	ds	1
  2546  0000CC                     ??_AssemblePacket:
  2547  0000CC                     RADIO_DIO1@dioMapping:
  2548                           	opt stack 0
  2549  0000CC                     ComputeMic@mic:
  2550                           	opt stack 0
  2551                           
  2552                           ; 4 bytes @ 0x6C
  2553  0000CC                     	ds	1
  2554  0000CD                     _LORAWAN_TxDone$2661:
  2555                           	opt stack 0
  2556                           
  2557                           ; 4 bytes @ 0x6D
  2558  0000CD                     	ds	1
  2559  0000CE                     AssemblePacket@confirmed:
  2560                           	opt stack 0
  2561                           
  2562                           ; 1 bytes @ 0x6E
  2563  0000CE                     	ds	1
  2564  0000CF                     AssemblePacket@mhdr:
  2565                           	opt stack 0
  2566                           
  2567                           ; 1 bytes @ 0x6F
  2568  0000CF                     	ds	1
  2569  0000D0                     ??_PrepareJoinRequestFrame:
  2570  0000D0                     AssemblePacket@fCtrl:
  2571                           	opt stack 0
  2572                           
  2573                           ; 1 bytes @ 0x70
  2574  0000D0                     	ds	1
  2575  0000D1                     AssemblePacket@macCmdIdx:
  2576                           	opt stack 0
  2577  0000D1                     LORAWAN_TxDone@found:
  2578                           	opt stack 0
  2579                           
  2580                           ; 1 bytes @ 0x71
  2581  0000D1                     	ds	1
  2582  0000D2                     AssemblePacket@bufferIndex:
  2583                           	opt stack 0
  2584  0000D2                     LORAWAN_TxDone@delta:
  2585                           	opt stack 0
  2586                           
  2587                           ; 4 bytes @ 0x72
  2588  0000D2                     	ds	1
  2589  0000D3                     LORAWAN_Send@port:
  2590                           	opt stack 0
  2591                           
  2592                           ; 1 bytes @ 0x73
  2593  0000D3                     	ds	1
  2594  0000D4                     LORAWAN_Send@buffer:
  2595                           	opt stack 0
  2596  0000D4                     PrepareJoinRequestFrame@mic:
  2597                           	opt stack 0
  2598                           
  2599                           ; 4 bytes @ 0x74
  2600  0000D4                     	ds	2
  2601  0000D6                     LORAWAN_Send@bufferLength:
  2602                           	opt stack 0
  2603  0000D6                     _LORAWAN_TxDone$5621:
  2604                           	opt stack 0
  2605                           
  2606                           ; 4 bytes @ 0x76
  2607  0000D6                     	ds	1
  2608  0000D7                     ??_LORAWAN_Send:
  2609                           
  2610                           ; 1 bytes @ 0x77
  2611  0000D7                     	ds	1
  2612  0000D8                     LORAWAN_Send@result:
  2613                           	opt stack 0
  2614  0000D8                     PrepareJoinRequestFrame@mhdr:
  2615                           	opt stack 0
  2616                           
  2617                           ; 1 bytes @ 0x78
  2618  0000D8                     	ds	1
  2619  0000D9                     LORAWAN_Send@confirmed:
  2620                           	opt stack 0
  2621  0000D9                     PrepareJoinRequestFrame@iCtr:
  2622                           	opt stack 0
  2623                           
  2624                           ; 1 bytes @ 0x79
  2625  0000D9                     	ds	1
  2626  0000DA                     ??_LORAWAN_RxDone:
  2627  0000DA                     ??_SwTimersExecute:
  2628  0000DA                     PrepareJoinRequestFrame@bufferIndex:
  2629                           	opt stack 0
  2630  0000DA                     LORAWAN_TxDone@ticks:
  2631                           	opt stack 0
  2632                           
  2633                           ; 4 bytes @ 0x7A
  2634  0000DA                     	ds	1
  2635  0000DB                     LORAWAN_Join@bufferIndex:
  2636                           	opt stack 0
  2637                           
  2638                           ; 1 bytes @ 0x7B
  2639  0000DB                     	ds	1
  2640  0000DC                     LORAWAN_Join@result:
  2641                           	opt stack 0
  2642                           
  2643                           ; 1 bytes @ 0x7C
  2644  0000DC                     	ds	1
  2645  0000DD                     LORAWAN_Join@activationTypeNew:
  2646                           	opt stack 0
  2647                           
  2648                           ; 1 bytes @ 0x7D
  2649  0000DD                     	ds	1
  2650  0000DE                     SwTimersExecute@i:
  2651                           	opt stack 0
  2652  0000DE                     LORAWAN_TxDone@minim:
  2653                           	opt stack 0
  2654                           
  2655                           ; 4 bytes @ 0x7E
  2656  0000DE                     	ds	1
  2657  0000DF                     LORAWAN_RxDone@fPort:
  2658                           	opt stack 0
  2659                           
  2660                           ; 1 bytes @ 0x7F
  2661  0000DF                     	ds	1
  2662  0000E0                     LORAWAN_RxDone@channelIndex:
  2663                           	opt stack 0
  2664                           
  2665                           ; 1 bytes @ 0x80
  2666  0000E0                     	ds	1
  2667  0000E1                     LORAWAN_RxDone@mhdr:
  2668                           	opt stack 0
  2669                           
  2670                           ; 1 bytes @ 0x81
  2671  0000E1                     	ds	1
  2672  0000E2                     LORAWAN_TxDone@i:
  2673                           	opt stack 0
  2674  0000E2                     LORAWAN_RxDone@extractedMic:
  2675                           	opt stack 0
  2676                           
  2677                           ; 4 bytes @ 0x82
  2678  0000E2                     	ds	1
  2679  0000E3                     ??_RADIO_TxDone:
  2680  0000E3                     ??_RADIO_FSKPacketSent:
  2681                           
  2682                           ; 1 bytes @ 0x83
  2683  0000E3                     	ds	3
  2684  0000E6                     LORAWAN_RxDone@bufferIndex:
  2685                           	opt stack 0
  2686                           
  2687                           ; 1 bytes @ 0x86
  2688  0000E6                     	ds	1
  2689  0000E7                     LORAWAN_RxDone@temp:
  2690                           	opt stack 0
  2691  0000E7                     RADIO_TxDone@timeOnAir:
  2692                           	opt stack 0
  2693  0000E7                     RADIO_FSKPacketSent@timeOnAir:
  2694                           	opt stack 0
  2695                           
  2696                           ; 4 bytes @ 0x87
  2697  0000E7                     	ds	1
  2698  0000E8                     LORAWAN_RxDone@packet:
  2699                           	opt stack 0
  2700                           
  2701                           ; 2 bytes @ 0x88
  2702  0000E8                     	ds	2
  2703  0000EA                     LORAWAN_RxDone@computedMic:
  2704                           	opt stack 0
  2705                           
  2706                           ; 4 bytes @ 0x8A
  2707  0000EA                     	ds	1
  2708  0000EB                     _RADIO_TxDone$532:
  2709                           	opt stack 0
  2710  0000EB                     _RADIO_FSKPacketSent$536:
  2711                           	opt stack 0
  2712                           
  2713                           ; 4 bytes @ 0x8B
  2714  0000EB                     	ds	3
  2715  0000EE                     LORAWAN_RxDone@joinAccept:
  2716                           	opt stack 0
  2717                           
  2718                           ; 2 bytes @ 0x8E
  2719  0000EE                     	ds	1
  2720  0000EF                     RADIO_FSKPacketSent@irqFlags:
  2721                           	opt stack 0
  2722                           
  2723                           ; 1 bytes @ 0x8F
  2724  0000EF                     	ds	1
  2725  0000F0                     LORAWAN_RxDone@frmPayloadLength:
  2726                           	opt stack 0
  2727                           
  2728                           ; 1 bytes @ 0x90
  2729  0000F0                     	ds	1
  2730  0000F1                     LORAWAN_RxDone@hdr:
  2731                           	opt stack 0
  2732                           
  2733                           ; 2 bytes @ 0x91
  2734  0000F1                     	ds	2
  2735  0000F3                     RADIO_RxDone@irqFlags:
  2736                           	opt stack 0
  2737  0000F3                     RADIO_FSKPayloadReady@irqFlags:
  2738                           	opt stack 0
  2739                           
  2740                           ; 1 bytes @ 0x93
  2741  0000F3                     	ds	1
  2742  0000F4                     RADIO_RxDone@i:
  2743                           	opt stack 0
  2744  0000F4                     RADIO_FSKPayloadReady@i:
  2745                           	opt stack 0
  2746                           
  2747                           ; 1 bytes @ 0x94
  2748  0000F4                     	ds	1
  2749  0000F5                     ??_RADIO_DIO0:
  2750                           
  2751                           ; 1 bytes @ 0x95
  2752  0000F5                     	ds	2
  2753  0000F7                     RADIO_DIO0@dioMapping:
  2754                           	opt stack 0
  2755                           
  2756                           ; 1 bytes @ 0x97
  2757  0000F7                     	ds	1
  2758  0000F8                     RADIO_DIO0@opMode:
  2759                           	opt stack 0
  2760                           
  2761                           ; 1 bytes @ 0x98
  2762  0000F8                     	ds	1
  2763  0000F9                     ??_main:
  2764                           
  2765                           ; 1 bytes @ 0x99
  2766  0000F9                     	ds	6
  2767                           tblptru	equ	0xFF8
  2768                           tblptrh	equ	0xFF7
  2769                           tblptrl	equ	0xFF6
  2770                           tablat	equ	0xFF5
  2771                           postinc0	equ	0xFEE
  2772                           wreg	equ	0xFE8
  2773                           postdec2	equ	0xFDD
  2774                           fsr2h	equ	0xFDA
  2775                           fsr2l	equ	0xFD9
  2776                           
  2777                           	psect	cstackCOMRAM
  2778  000001                     __pcstackCOMRAM:
  2779                           	opt stack 0
  2780  000001                     ?i2_TMR1_ReadTimer:
  2781                           	opt stack 0
  2782  000001                     EUSART1_Read@readValue:
  2783                           	opt stack 0
  2784  000001                     strncat@to:
  2785                           	opt stack 0
  2786  000001                     i2TMR1_WriteTimer@timerVal:
  2787                           	opt stack 0
  2788                           
  2789                           ; 2 bytes @ 0x0
  2790  000001                     	ds	2
  2791  000003                     ??i2_TMR1_ReadTimer:
  2792  000003                     strncat@from:
  2793                           	opt stack 0
  2794                           
  2795                           ; 2 bytes @ 0x2
  2796  000003                     	ds	2
  2797  000005                     strncat@size:
  2798                           	opt stack 0
  2799  000005                     i2TMR1_ReadTimer@readVal:
  2800                           	opt stack 0
  2801                           
  2802                           ; 2 bytes @ 0x4
  2803  000005                     	ds	2
  2804  000007                     i2TMR1_ReadTimer@readValHigh:
  2805                           	opt stack 0
  2806  000007                     strncat@cp:
  2807                           	opt stack 0
  2808                           
  2809                           ; 2 bytes @ 0x6
  2810  000007                     	ds	1
  2811  000008                     i2TMR1_ReadTimer@readValLow:
  2812                           	opt stack 0
  2813                           
  2814                           ; 1 bytes @ 0x7
  2815  000008                     	ds	1
  2816  000009                     ??_EUSART1_Receive_ISR:
  2817  000009                     ?i2_TMR_SwapTimer:
  2818                           	opt stack 0
  2819  000009                     ?i2_TMR_GetDeltaTime:
  2820                           	opt stack 0
  2821  000009                     i2TMR_SwapTimer@timerVal:
  2822                           	opt stack 0
  2823                           
  2824                           ; 2 bytes @ 0x8
  2825  000009                     	ds	2
  2826  00000B                     
  2827                           ; 1 bytes @ 0xA
  2828  00000B                     	ds	2
  2829  00000D                     ??i2_TMR_GetDeltaTime:
  2830                           
  2831                           ; 1 bytes @ 0xC
  2832  00000D                     	ds	20
  2833  000021                     ?i2_SwTimersInterrupt:
  2834                           	opt stack 0
  2835                           
  2836                           ; 4 bytes @ 0x20
  2837  000021                     	ds	4
  2838  000025                     
  2839                           ; 1 bytes @ 0x24
  2840  000025                     	ds	4
  2841  000029                     i2SwTimersInterrupt@timeElapsed:
  2842                           	opt stack 0
  2843                           
  2844                           ; 4 bytes @ 0x28
  2845  000029                     	ds	4
  2846  00002D                     i2SwTimersInterrupt@ticksToNextTimerEvent:
  2847                           	opt stack 0
  2848                           
  2849                           ; 4 bytes @ 0x2C
  2850  00002D                     	ds	4
  2851  000031                     i2SwTimersInterrupt@i:
  2852                           	opt stack 0
  2853                           
  2854                           ; 1 bytes @ 0x30
  2855  000031                     	ds	1
  2856  000032                     ??_TMR_ISR_lora:
  2857                           
  2858                           ; 1 bytes @ 0x31
  2859  000032                     	ds	2
  2860  000034                     ??_INTERRUPT_InterruptManager:
  2861                           
  2862                           ; 1 bytes @ 0x33
  2863  000034                     	ds	10
  2864                           tblptru	equ	0xFF8
  2865                           tblptrh	equ	0xFF7
  2866                           tblptrl	equ	0xFF6
  2867                           tablat	equ	0xFF5
  2868                           postinc0	equ	0xFEE
  2869                           wreg	equ	0xFE8
  2870                           postdec2	equ	0xFDD
  2871                           fsr2h	equ	0xFDA
  2872                           fsr2l	equ	0xFD9
  2873                           
  2874 ;;
  2875 ;;Main: autosize = 0, tempsize = 6, incstack = 0, save=0
  2876 ;;
  2877 ;; *************** function _main *****************
  2878 ;; Defined at:
  2879 ;;		line 118 in file "main.c"
  2880 ;; Parameters:    Size  Location     Type
  2881 ;;		None
  2882 ;; Auto vars:     Size  Location     Type
  2883 ;;		None
  2884 ;; Return value:  Size  Location     Type
  2885 ;;                  1    wreg      void 
  2886 ;; Registers used:
  2887 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, btemp, btemp+1, btemp+2, btemp+4, btemp+
      +5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2888 ;; Tracked objects:
  2889 ;;		On entry : 0/0
  2890 ;;		On exit  : 0/0
  2891 ;;		Unchanged: 0/0
  2892 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2893 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2894 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2895 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2896 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2897 ;;Total ram usage:        6 bytes
  2898 ;; Hardware stack levels required when called:   19
  2899 ;; This function calls:
  2900 ;;		_EUSART1_Write
  2901 ;;		_LORAWAN_Init
  2902 ;;		_LORAWAN_Join
  2903 ;;		_LORAWAN_Mainloop
  2904 ;;		_LORAWAN_Send
  2905 ;;		_LORAWAN_SetApplicationSessionKey
  2906 ;;		_LORAWAN_SetDeviceAddress
  2907 ;;		_LORAWAN_SetNetworkSessionKey
  2908 ;;		_SYSTEM_Initialize
  2909 ;;		_TMR5_HasOverflowOccured
  2910 ;;		___aldiv
  2911 ;;		___almod
  2912 ;;		___awdiv
  2913 ;;		___awmod
  2914 ;; This function is called by:
  2915 ;;		Startup code after reset
  2916 ;; This function uses a non-reentrant model
  2917 ;;
  2918                           
  2919                           	psect	text0
  2920  002C96                     __ptext0:
  2921                           	opt stack 0
  2922  002C96                     _main:
  2923                           	opt stack 12
  2924                           
  2925                           ;main.c: 120: SYSTEM_Initialize();
  2926                           
  2927                           ;incstack = 0
  2928  002C96  EC0F  F048         	call	_SYSTEM_Initialize	;wreg free
  2929                           
  2930                           ;main.c: 121: (INTCONbits.GIE = 1);
  2931  002C9A  8EF2               	bsf	intcon,7,c	;volatile
  2932                           
  2933                           ;main.c: 122: (INTCONbits.PEIE = 1);
  2934  002C9C  8CF2               	bsf	intcon,6,c	;volatile
  2935                           
  2936                           ;main.c: 124: LORAWAN_Init(RxData, RxJoinResponse);
  2937  002C9E  0EA4               	movlw	low _RxData
  2938  002CA0  0100               	movlb	0	; () banked
  2939  002CA2  6FB2               	movwf	LORAWAN_Init@RxPayload& (0+255),b
  2940  002CA4  0E95               	movlw	high _RxData
  2941  002CA6  6FB3               	movwf	(LORAWAN_Init@RxPayload+1)& (0+255),b
  2942  002CA8  0EA2               	movlw	low _RxJoinResponse
  2943  002CAA  6FB4               	movwf	LORAWAN_Init@RxJoinResponse& (0+255),b
  2944  002CAC  0E95               	movlw	high _RxJoinResponse
  2945  002CAE  6FB5               	movwf	(LORAWAN_Init@RxJoinResponse+1)& (0+255),b
  2946  002CB0  ECD6  F040         	call	_LORAWAN_Init	;wreg free
  2947                           
  2948                           ;main.c: 126: LORAWAN_SetNetworkSessionKey(nwkSKey);
  2949  002CB4  0ED7               	movlw	low _nwkSKey
  2950  002CB6  0100               	movlb	0	; () banked
  2951  002CB8  6F6B               	movwf	LORAWAN_SetNetworkSessionKey@networkSessionKeyNew& (0+255),b
  2952  002CBA  0E03               	movlw	high _nwkSKey
  2953  002CBC  6F6C               	movwf	(LORAWAN_SetNetworkSessionKey@networkSessionKeyNew+1)& (0+255),b
  2954  002CBE  ECFC  F046         	call	_LORAWAN_SetNetworkSessionKey	;wreg free
  2955                           
  2956                           ;main.c: 127: LORAWAN_SetApplicationSessionKey(appSKey);
  2957  002CC2  0EC7               	movlw	low _appSKey
  2958  002CC4  0100               	movlb	0	; () banked
  2959  002CC6  6F6B               	movwf	LORAWAN_SetApplicationSessionKey@applicationSessionKeyNew& (0+255),b
  2960  002CC8  0E03               	movlw	high _appSKey
  2961  002CCA  6F6C               	movwf	(LORAWAN_SetApplicationSessionKey@applicationSessionKeyNew+1)& (0+255),b
  2962  002CCC  EC13  F047         	call	_LORAWAN_SetApplicationSessionKey	;wreg free
  2963                           
  2964                           ;main.c: 128: LORAWAN_SetDeviceAddress(devAddr);
  2965  002CD0  C3C0  F060         	movff	_devAddr,LORAWAN_SetDeviceAddress@deviceAddressNew
  2966  002CD4  C3C1  F061         	movff	_devAddr+1,LORAWAN_SetDeviceAddress@deviceAddressNew+1
  2967  002CD8  C3C2  F062         	movff	_devAddr+2,LORAWAN_SetDeviceAddress@deviceAddressNew+2
  2968  002CDC  C3C3  F063         	movff	_devAddr+3,LORAWAN_SetDeviceAddress@deviceAddressNew+3
  2969  002CE0  EC81  F049         	call	_LORAWAN_SetDeviceAddress	;wreg free
  2970                           
  2971                           ;main.c: 129: LORAWAN_Join(ABP);
  2972  002CE4  0E01               	movlw	1
  2973  002CE6  ECC2  F039         	call	_LORAWAN_Join
  2974                           
  2975                           ;main.c: 130: TRISA = 0xF0;
  2976  002CEA  0EF0               	movlw	240
  2977  002CEC  6E92               	movwf	3986,c	;volatile
  2978                           
  2979                           ;main.c: 131: countera=0;
  2980  002CEE  0E00               	movlw	0
  2981  002CF0  0102               	movlb	2	; () banked
  2982  002CF2  6F05               	movwf	(_countera+1)& (0+255),b
  2983  002CF4  0E00               	movlw	0
  2984  002CF6  6F04               	movwf	_countera& (0+255),b
  2985  002CF8                     
  2986                           ;main.c: 133: {
  2987                           ;main.c: 134: LORAWAN_Mainloop();
  2988                           
  2989                           ; BSR set to: 2
  2990  002CF8  ECA6  F045         	call	_LORAWAN_Mainloop	;wreg free
  2991                           
  2992                           ;main.c: 136: if (TMR5_HasOverflowOccured())
  2993  002CFC  EC26  F04A         	call	_TMR5_HasOverflowOccured	;wreg free
  2994  002D00  0900               	iorlw	0
  2995  002D02  B4D8               	btfsc	status,2,c
  2996  002D04  D003               	goto	l2817
  2997                           
  2998                           ;main.c: 137: {
  2999                           ;main.c: 138: counter ++;
  3000  002D06  0101               	movlb	1	; () banked
  3001  002D08  2B4A               	incf	_counter& (0+255),f,b
  3002                           
  3003                           ; BSR set to: 1
  3004                           ;main.c: 140: TMR5IF = 0;
  3005  002D0A  927E               	bcf	3966,1,c	;volatile
  3006  002D0C                     l2817:
  3007                           
  3008                           ;main.c: 142: }
  3009                           ;main.c: 144: if (counter == 2)
  3010                           
  3011                           ; BSR set to: 1
  3012  002D0C  0E02               	movlw	2
  3013  002D0E  0101               	movlb	1	; () banked
  3014  002D10  194A               	xorwf	_counter& (0+255),w,b
  3015  002D12  A4D8               	btfss	status,2,c
  3016  002D14  D7F1               	goto	l2816
  3017                           
  3018                           ; BSR set to: 1
  3019                           ;main.c: 145: {
  3020                           ;main.c: 146: LATA=0xFF;
  3021  002D16  6889               	setf	3977,c	;volatile
  3022                           
  3023                           ; BSR set to: 1
  3024                           ;main.c: 148: EUSART1_Write(0b00000011);
  3025  002D18  0E03               	movlw	3
  3026  002D1A  ECC5  F045         	call	_EUSART1_Write
  3027                           
  3028                           ;main.c: 149: EUSART1_Write(0b00000011);
  3029  002D1E  0E03               	movlw	3
  3030  002D20  ECC5  F045         	call	_EUSART1_Write
  3031                           
  3032                           ;main.c: 150: EUSART1_Write(0b00000000);
  3033  002D24  0E00               	movlw	0
  3034  002D26  ECC5  F045         	call	_EUSART1_Write
  3035                           
  3036                           ;main.c: 151: EUSART1_Write(0b01000111);
  3037  002D2A  0E47               	movlw	71
  3038  002D2C  ECC5  F045         	call	_EUSART1_Write
  3039                           
  3040                           ;main.c: 152: EUSART1_Write(0b00000000);
  3041  002D30  0E00               	movlw	0
  3042  002D32  ECC5  F045         	call	_EUSART1_Write
  3043                           
  3044                           ;main.c: 153: EUSART1_Write(0b00000001);
  3045  002D36  0E01               	movlw	1
  3046  002D38  ECC5  F045         	call	_EUSART1_Write
  3047                           
  3048                           ;main.c: 154: EUSART1_Write(0b00110101);
  3049  002D3C  0E35               	movlw	53
  3050  002D3E  ECC5  F045         	call	_EUSART1_Write
  3051                           
  3052                           ;main.c: 155: EUSART1_Write(0b11111101);
  3053  002D42  0EFD               	movlw	253
  3054  002D44  ECC5  F045         	call	_EUSART1_Write
  3055                           
  3056                           ;main.c: 157: EUSART1_Write(0b00000011);
  3057  002D48  0E03               	movlw	3
  3058  002D4A  ECC5  F045         	call	_EUSART1_Write
  3059                           
  3060                           ;main.c: 158: EUSART1_Write(0b00000011);
  3061  002D4E  0E03               	movlw	3
  3062  002D50  ECC5  F045         	call	_EUSART1_Write
  3063                           
  3064                           ;main.c: 159: EUSART1_Write(0b00000000);
  3065  002D54  0E00               	movlw	0
  3066  002D56  ECC5  F045         	call	_EUSART1_Write
  3067                           
  3068                           ;main.c: 161: LATA=0xF0;
  3069  002D5A  0EF0               	movlw	240
  3070  002D5C  6E89               	movwf	3977,c	;volatile
  3071                           
  3072                           ;main.c: 163: _delay((unsigned long)((5000)*(16000000/4000.0)));
  3073  002D5E  0E66               	movlw	102
  3074  002D60  0100               	movlb	0	; () banked
  3075  002D62  6FFA               	movwf	(??_main+1)& (0+255),b
  3076  002D64  0E76               	movlw	118
  3077  002D66  6FF9               	movwf	??_main& (0+255),b
  3078  002D68  0EC1               	movlw	193
  3079  002D6A                     u17177:
  3080  002D6A  2EE8               	decfsz	wreg,f,c
  3081  002D6C  D7FE               	bra	u17177
  3082  002D6E  2FF9               	decfsz	??_main& (0+255),f,b
  3083  002D70  D7FC               	bra	u17177
  3084  002D72  2FFA               	decfsz	(??_main+1)& (0+255),f,b
  3085  002D74  D7FA               	bra	u17177
  3086                           
  3087                           ;main.c: 165: testassign = dataxstr[3];
  3088  002D76  C543  F122         	movff	_dataxstr+3,_testassign
  3089  002D7A  0101               	movlb	1	; () banked
  3090  002D7C  6B23               	clrf	(_testassign+1)& (0+255),b
  3091                           
  3092                           ; BSR set to: 1
  3093                           ;main.c: 166: testassign2 = dataxstr[4];
  3094  002D7E  C544  F120         	movff	_dataxstr+4,_testassign2
  3095  002D82  6B21               	clrf	(_testassign2+1)& (0+255),b
  3096                           
  3097                           ; BSR set to: 1
  3098                           ;main.c: 168: fourthdigit = (testassign / 16);
  3099  002D84  C122  F066         	movff	_testassign,___awdiv@dividend
  3100  002D88  C123  F067         	movff	_testassign+1,___awdiv@dividend+1
  3101  002D8C  0E00               	movlw	0
  3102  002D8E  0100               	movlb	0	; () banked
  3103  002D90  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
  3104  002D92  0E10               	movlw	16
  3105  002D94  6F68               	movwf	___awdiv@divisor& (0+255),b
  3106  002D96  EC5E  F03C         	call	___awdiv	;wreg free
  3107  002D9A  C066  F11E         	movff	?___awdiv,_fourthdigit
  3108  002D9E  C067  F11F         	movff	?___awdiv+1,_fourthdigit+1
  3109                           
  3110                           ;main.c: 169: thirddigit = (testassign % 16);
  3111  002DA2  0E0F               	movlw	15
  3112  002DA4  0101               	movlb	1	; () banked
  3113  002DA6  1522               	andwf	_testassign& (0+255),w,b
  3114  002DA8  6F1C               	movwf	_thirddigit& (0+255),b
  3115  002DAA  6B1D               	clrf	(_thirddigit+1)& (0+255),b
  3116                           
  3117                           ; BSR set to: 1
  3118                           ;main.c: 170: seconddigit = (testassign2 / 16);
  3119  002DAC  C120  F066         	movff	_testassign2,___awdiv@dividend
  3120  002DB0  C121  F067         	movff	_testassign2+1,___awdiv@dividend+1
  3121  002DB4  0E00               	movlw	0
  3122  002DB6  0100               	movlb	0	; () banked
  3123  002DB8  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
  3124  002DBA  0E10               	movlw	16
  3125  002DBC  6F68               	movwf	___awdiv@divisor& (0+255),b
  3126  002DBE  EC5E  F03C         	call	___awdiv	;wreg free
  3127  002DC2  C066  F11A         	movff	?___awdiv,_seconddigit
  3128  002DC6  C067  F11B         	movff	?___awdiv+1,_seconddigit+1
  3129                           
  3130                           ;main.c: 171: firstdigit = (testassign2 % 16);
  3131  002DCA  0E0F               	movlw	15
  3132  002DCC  0101               	movlb	1	; () banked
  3133  002DCE  1520               	andwf	_testassign2& (0+255),w,b
  3134  002DD0  6F18               	movwf	_firstdigit& (0+255),b
  3135  002DD2  6B19               	clrf	(_firstdigit+1)& (0+255),b
  3136                           
  3137                           ; BSR set to: 1
  3138                           ;main.c: 173: resultdata2send = (fourthdigit*16*16*16) + (thirddigit*16*16) + (seconddig
      +                          it*16) + firstdigit;
  3139  002DD4  C11A  F0F9         	movff	_seconddigit,??_main
  3140  002DD8  C11B  F0FA         	movff	_seconddigit+1,??_main+1
  3141  002DDC  0100               	movlb	0	; () banked
  3142  002DDE  3BF9               	swapf	??_main& (0+255),f,b
  3143  002DE0  3BFA               	swapf	(??_main+1)& (0+255),f,b
  3144  002DE2  0EF0               	movlw	240
  3145  002DE4  17FA               	andwf	(??_main+1)& (0+255),f,b
  3146  002DE6  51F9               	movf	??_main& (0+255),w,b
  3147  002DE8  0B0F               	andlw	15
  3148  002DEA  13FA               	iorwf	(??_main+1)& (0+255),f,b
  3149  002DEC  0EF0               	movlw	240
  3150  002DEE  17F9               	andwf	??_main& (0+255),f,b
  3151  002DF0  C11C  F0FB         	movff	_thirddigit,??_main+2
  3152  002DF4  C11D  F0FC         	movff	_thirddigit+1,??_main+3
  3153  002DF8  3BFB               	swapf	(??_main+2)& (0+255),f,b
  3154  002DFA  3BFC               	swapf	(??_main+3)& (0+255),f,b
  3155  002DFC  0EF0               	movlw	240
  3156  002DFE  17FC               	andwf	(??_main+3)& (0+255),f,b
  3157  002E00  51FB               	movf	(??_main+2)& (0+255),w,b
  3158  002E02  0B0F               	andlw	15
  3159  002E04  13FC               	iorwf	(??_main+3)& (0+255),f,b
  3160  002E06  0EF0               	movlw	240
  3161  002E08  17FB               	andwf	(??_main+2)& (0+255),f,b
  3162  002E0A  3BFB               	swapf	(??_main+2)& (0+255),f,b
  3163  002E0C  3BFC               	swapf	(??_main+3)& (0+255),f,b
  3164  002E0E  0EF0               	movlw	240
  3165  002E10  17FC               	andwf	(??_main+3)& (0+255),f,b
  3166  002E12  51FB               	movf	(??_main+2)& (0+255),w,b
  3167  002E14  0B0F               	andlw	15
  3168  002E16  13FC               	iorwf	(??_main+3)& (0+255),f,b
  3169  002E18  0EF0               	movlw	240
  3170  002E1A  17FB               	andwf	(??_main+2)& (0+255),f,b
  3171  002E1C  C11E  F0FD         	movff	_fourthdigit,??_main+4
  3172  002E20  C11F  F0FE         	movff	_fourthdigit+1,??_main+5
  3173  002E24  3BFD               	swapf	(??_main+4)& (0+255),f,b
  3174  002E26  3BFE               	swapf	(??_main+5)& (0+255),f,b
  3175  002E28  0EF0               	movlw	240
  3176  002E2A  17FE               	andwf	(??_main+5)& (0+255),f,b
  3177  002E2C  51FD               	movf	(??_main+4)& (0+255),w,b
  3178  002E2E  0B0F               	andlw	15
  3179  002E30  13FE               	iorwf	(??_main+5)& (0+255),f,b
  3180  002E32  0EF0               	movlw	240
  3181  002E34  17FD               	andwf	(??_main+4)& (0+255),f,b
  3182  002E36  3BFD               	swapf	(??_main+4)& (0+255),f,b
  3183  002E38  3BFE               	swapf	(??_main+5)& (0+255),f,b
  3184  002E3A  0EF0               	movlw	240
  3185  002E3C  17FE               	andwf	(??_main+5)& (0+255),f,b
  3186  002E3E  51FD               	movf	(??_main+4)& (0+255),w,b
  3187  002E40  0B0F               	andlw	15
  3188  002E42  13FE               	iorwf	(??_main+5)& (0+255),f,b
  3189  002E44  0EF0               	movlw	240
  3190  002E46  17FD               	andwf	(??_main+4)& (0+255),f,b
  3191  002E48  3BFD               	swapf	(??_main+4)& (0+255),f,b
  3192  002E4A  3BFE               	swapf	(??_main+5)& (0+255),f,b
  3193  002E4C  0EF0               	movlw	240
  3194  002E4E  17FE               	andwf	(??_main+5)& (0+255),f,b
  3195  002E50  51FD               	movf	(??_main+4)& (0+255),w,b
  3196  002E52  0B0F               	andlw	15
  3197  002E54  13FE               	iorwf	(??_main+5)& (0+255),f,b
  3198  002E56  0EF0               	movlw	240
  3199  002E58  17FD               	andwf	(??_main+4)& (0+255),f,b
  3200  002E5A  51FB               	movf	(??_main+2)& (0+255),w,b
  3201  002E5C  27FD               	addwf	(??_main+4)& (0+255),f,b
  3202  002E5E  51FC               	movf	(??_main+3)& (0+255),w,b
  3203  002E60  23FE               	addwfc	(??_main+5)& (0+255),f,b
  3204  002E62  51F9               	movf	??_main& (0+255),w,b
  3205  002E64  27FD               	addwf	(??_main+4)& (0+255),f,b
  3206  002E66  51FA               	movf	(??_main+1)& (0+255),w,b
  3207  002E68  23FE               	addwfc	(??_main+5)& (0+255),f,b
  3208  002E6A  0101               	movlb	1	; () banked
  3209  002E6C  5118               	movf	_firstdigit& (0+255),w,b
  3210  002E6E  0100               	movlb	0	; () banked
  3211  002E70  25FD               	addwf	(??_main+4)& (0+255),w,b
  3212  002E72  0101               	movlb	1	; () banked
  3213  002E74  6F16               	movwf	_resultdata2send& (0+255),b
  3214  002E76  5119               	movf	(_firstdigit+1)& (0+255),w,b
  3215  002E78  0100               	movlb	0	; () banked
  3216  002E7A  21FE               	addwfc	(??_main+5)& (0+255),w,b
  3217  002E7C  0101               	movlb	1	; () banked
  3218  002E7E  6F17               	movwf	(_resultdata2send+1)& (0+255),b
  3219                           
  3220                           ; BSR set to: 1
  3221                           ;main.c: 175: first1decimal = (resultdata2send % 10);
  3222  002E80  C116  F060         	movff	_resultdata2send,___awmod@dividend
  3223  002E84  C117  F061         	movff	_resultdata2send+1,___awmod@dividend+1
  3224  002E88  0E00               	movlw	0
  3225  002E8A  0100               	movlb	0	; () banked
  3226  002E8C  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  3227  002E8E  0E0A               	movlw	10
  3228  002E90  6F62               	movwf	___awmod@divisor& (0+255),b
  3229  002E92  EC61  F03E         	call	___awmod	;wreg free
  3230  002E96  C060  F114         	movff	?___awmod,_first1decimal
  3231  002E9A  C061  F115         	movff	?___awmod+1,_first1decimal+1
  3232                           
  3233                           ;main.c: 176: first2decimal = (resultdata2send % 100)/10;
  3234  002E9E  0E00               	movlw	0
  3235  002EA0  0100               	movlb	0	; () banked
  3236  002EA2  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  3237  002EA4  0E64               	movlw	100
  3238  002EA6  6F62               	movwf	___awmod@divisor& (0+255),b
  3239  002EA8  C116  F060         	movff	_resultdata2send,___awmod@dividend
  3240  002EAC  C117  F061         	movff	_resultdata2send+1,___awmod@dividend+1
  3241  002EB0  EC61  F03E         	call	___awmod	;wreg free
  3242  002EB4  C060  F066         	movff	?___awmod,___awdiv@dividend
  3243  002EB8  C061  F067         	movff	?___awmod+1,___awdiv@dividend+1
  3244  002EBC  0E00               	movlw	0
  3245  002EBE  0100               	movlb	0	; () banked
  3246  002EC0  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
  3247  002EC2  0E0A               	movlw	10
  3248  002EC4  6F68               	movwf	___awdiv@divisor& (0+255),b
  3249  002EC6  EC5E  F03C         	call	___awdiv	;wreg free
  3250  002ECA  C066  F112         	movff	?___awdiv,_first2decimal
  3251  002ECE  C067  F113         	movff	?___awdiv+1,_first2decimal+1
  3252                           
  3253                           ;main.c: 177: first3decimal = (resultdata2send % 1000)/100;
  3254  002ED2  0E03               	movlw	3
  3255  002ED4  0100               	movlb	0	; () banked
  3256  002ED6  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  3257  002ED8  0EE8               	movlw	232
  3258  002EDA  6F62               	movwf	___awmod@divisor& (0+255),b
  3259  002EDC  C116  F060         	movff	_resultdata2send,___awmod@dividend
  3260  002EE0  C117  F061         	movff	_resultdata2send+1,___awmod@dividend+1
  3261  002EE4  EC61  F03E         	call	___awmod	;wreg free
  3262  002EE8  C060  F066         	movff	?___awmod,___awdiv@dividend
  3263  002EEC  C061  F067         	movff	?___awmod+1,___awdiv@dividend+1
  3264  002EF0  0E00               	movlw	0
  3265  002EF2  0100               	movlb	0	; () banked
  3266  002EF4  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
  3267  002EF6  0E64               	movlw	100
  3268  002EF8  6F68               	movwf	___awdiv@divisor& (0+255),b
  3269  002EFA  EC5E  F03C         	call	___awdiv	;wreg free
  3270  002EFE  C066  F110         	movff	?___awdiv,_first3decimal
  3271  002F02  C067  F111         	movff	?___awdiv+1,_first3decimal+1
  3272                           
  3273                           ;main.c: 178: first4decimal = (resultdata2send % 10000)/1000;
  3274  002F06  0E27               	movlw	39
  3275  002F08  0100               	movlb	0	; () banked
  3276  002F0A  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  3277  002F0C  0E10               	movlw	16
  3278  002F0E  6F62               	movwf	___awmod@divisor& (0+255),b
  3279  002F10  C116  F060         	movff	_resultdata2send,___awmod@dividend
  3280  002F14  C117  F061         	movff	_resultdata2send+1,___awmod@dividend+1
  3281  002F18  EC61  F03E         	call	___awmod	;wreg free
  3282  002F1C  C060  F066         	movff	?___awmod,___awdiv@dividend
  3283  002F20  C061  F067         	movff	?___awmod+1,___awdiv@dividend+1
  3284  002F24  0E03               	movlw	3
  3285  002F26  0100               	movlb	0	; () banked
  3286  002F28  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
  3287  002F2A  0EE8               	movlw	232
  3288  002F2C  6F68               	movwf	___awdiv@divisor& (0+255),b
  3289  002F2E  EC5E  F03C         	call	___awdiv	;wreg free
  3290  002F32  C066  F208         	movff	?___awdiv,_first4decimal
  3291  002F36  C067  F209         	movff	?___awdiv+1,_first4decimal+1
  3292                           
  3293                           ;main.c: 179: first5decimal = (resultdata2send % 100000)/10000;
  3294  002F3A  0EA0               	movlw	160
  3295  002F3C  0100               	movlb	0	; () banked
  3296  002F3E  6F64               	movwf	___almod@divisor& (0+255),b
  3297  002F40  0E86               	movlw	134
  3298  002F42  6F65               	movwf	(___almod@divisor+1)& (0+255),b
  3299  002F44  0E01               	movlw	1
  3300  002F46  6F66               	movwf	(___almod@divisor+2)& (0+255),b
  3301  002F48  0E00               	movlw	0
  3302  002F4A  6F67               	movwf	(___almod@divisor+3)& (0+255),b
  3303  002F4C  C116  F060         	movff	_resultdata2send,___almod@dividend
  3304  002F50  C117  F061         	movff	_resultdata2send+1,___almod@dividend+1
  3305  002F54  0E00               	movlw	0
  3306  002F56  BF61               	btfsc	(___almod@dividend+1)& (0+255),7,b
  3307  002F58  0EFF               	movlw	-1
  3308  002F5A  6F62               	movwf	(___almod@dividend+2)& (0+255),b
  3309  002F5C  6F63               	movwf	(___almod@dividend+3)& (0+255),b
  3310  002F5E  ECC1  F038         	call	___almod	;wreg free
  3311  002F62  C060  F06A         	movff	?___almod,___aldiv@dividend
  3312  002F66  C061  F06B         	movff	?___almod+1,___aldiv@dividend+1
  3313  002F6A  C062  F06C         	movff	?___almod+2,___aldiv@dividend+2
  3314  002F6E  C063  F06D         	movff	?___almod+3,___aldiv@dividend+3
  3315  002F72  0E10               	movlw	16
  3316  002F74  0100               	movlb	0	; () banked
  3317  002F76  6F6E               	movwf	___aldiv@divisor& (0+255),b
  3318  002F78  0E27               	movlw	39
  3319  002F7A  6F6F               	movwf	(___aldiv@divisor+1)& (0+255),b
  3320  002F7C  0E00               	movlw	0
  3321  002F7E  6F70               	movwf	(___aldiv@divisor+2)& (0+255),b
  3322  002F80  0E00               	movlw	0
  3323  002F82  6F71               	movwf	(___aldiv@divisor+3)& (0+255),b
  3324  002F84  ECDA  F036         	call	___aldiv	;wreg free
  3325  002F88  C06A  F206         	movff	?___aldiv,_first5decimal
  3326  002F8C  C06B  F207         	movff	?___aldiv+1,_first5decimal+1
  3327                           
  3328                           ;main.c: 190: LORAWAN_Send(UNCNF, 2, testtest, 2);
  3329  002F90  0E02               	movlw	2
  3330  002F92  0100               	movlb	0	; () banked
  3331  002F94  6FD3               	movwf	LORAWAN_Send@port& (0+255),b
  3332  002F96  0EFA               	movlw	low _testtest
  3333  002F98  6FD4               	movwf	LORAWAN_Send@buffer& (0+255),b
  3334  002F9A  0E01               	movlw	high _testtest
  3335  002F9C  6FD5               	movwf	(LORAWAN_Send@buffer+1)& (0+255),b
  3336  002F9E  0E02               	movlw	2
  3337  002FA0  6FD6               	movwf	LORAWAN_Send@bufferLength& (0+255),b
  3338  002FA2  0E00               	movlw	0
  3339  002FA4  EC71  F036         	call	_LORAWAN_Send
  3340                           
  3341                           ;main.c: 192: counter = 0;
  3342  002FA8  0E00               	movlw	0
  3343  002FAA  0101               	movlb	1	; () banked
  3344  002FAC  6F4A               	movwf	_counter& (0+255),b
  3345                           
  3346                           ; BSR set to: 1
  3347                           
  3348                           ; BSR set to: 1
  3349  002FAE  D6A4               	goto	l2816
  3350  002FB0                     __end_of_main:
  3351                           	opt stack 0
  3352                           tblptru	equ	0xFF8
  3353                           tblptrh	equ	0xFF7
  3354                           tblptrl	equ	0xFF6
  3355                           tablat	equ	0xFF5
  3356                           intcon	equ	0xFF2
  3357                           postinc0	equ	0xFEE
  3358                           wreg	equ	0xFE8
  3359                           postdec2	equ	0xFDD
  3360                           fsr2h	equ	0xFDA
  3361                           fsr2l	equ	0xFD9
  3362                           status	equ	0xFD8
  3363                           
  3364 ;; *************** function ___awmod *****************
  3365 ;; Defined at:
  3366 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awmod.c"
  3367 ;; Parameters:    Size  Location     Type
  3368 ;;  dividend        2    0[BANK0 ] int 
  3369 ;;  divisor         2    2[BANK0 ] int 
  3370 ;; Auto vars:     Size  Location     Type
  3371 ;;  sign            1    5[BANK0 ] unsigned char 
  3372 ;;  counter         1    4[BANK0 ] unsigned char 
  3373 ;; Return value:  Size  Location     Type
  3374 ;;                  2    0[BANK0 ] int 
  3375 ;; Registers used:
  3376 ;;		wreg, status,2, status,0
  3377 ;; Tracked objects:
  3378 ;;		On entry : 0/0
  3379 ;;		On exit  : 0/0
  3380 ;;		Unchanged: 0/0
  3381 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3382 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3383 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3384 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3385 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3386 ;;Total ram usage:        6 bytes
  3387 ;; Hardware stack levels used:    1
  3388 ;; Hardware stack levels required when called:    7
  3389 ;; This function calls:
  3390 ;;		Nothing
  3391 ;; This function is called by:
  3392 ;;		_main
  3393 ;; This function uses a non-reentrant model
  3394 ;;
  3395                           
  3396                           	psect	text1
  3397  007CC2                     __ptext1:
  3398                           	opt stack 0
  3399  007CC2                     ___awmod:
  3400                           	opt stack 23
  3401                           
  3402                           ; BSR set to: 1
  3403                           ;incstack = 0
  3404  007CC2  0E00               	movlw	0
  3405  007CC4  0100               	movlb	0	; () banked
  3406  007CC6  6F65               	movwf	___awmod@sign& (0+255),b
  3407                           
  3408                           ; BSR set to: 0
  3409  007CC8  AF61               	btfss	(___awmod@dividend+1)& (0+255),7,b
  3410  007CCA  D006               	goto	l3010
  3411                           
  3412                           ; BSR set to: 0
  3413  007CCC  6D60               	negf	___awmod@dividend& (0+255),b
  3414  007CCE  1F61               	comf	(___awmod@dividend+1)& (0+255),f,b
  3415  007CD0  B0D8               	btfsc	status,0,c
  3416  007CD2  2B61               	incf	(___awmod@dividend+1)& (0+255),f,b
  3417                           
  3418                           ; BSR set to: 0
  3419  007CD4  0E01               	movlw	1
  3420  007CD6  6F65               	movwf	___awmod@sign& (0+255),b
  3421  007CD8                     l3010:
  3422                           
  3423                           ; BSR set to: 0
  3424                           
  3425                           ; BSR set to: 0
  3426  007CD8  AF63               	btfss	(___awmod@divisor+1)& (0+255),7,b
  3427  007CDA  D004               	goto	l3011
  3428                           
  3429                           ; BSR set to: 0
  3430  007CDC  6D62               	negf	___awmod@divisor& (0+255),b
  3431  007CDE  1F63               	comf	(___awmod@divisor+1)& (0+255),f,b
  3432  007CE0  B0D8               	btfsc	status,0,c
  3433  007CE2  2B63               	incf	(___awmod@divisor+1)& (0+255),f,b
  3434  007CE4                     l3011:
  3435                           
  3436                           ; BSR set to: 0
  3437                           
  3438                           ; BSR set to: 0
  3439  007CE4  5162               	movf	___awmod@divisor& (0+255),w,b
  3440  007CE6  1163               	iorwf	(___awmod@divisor+1)& (0+255),w,b
  3441  007CE8  B4D8               	btfsc	status,2,c
  3442  007CEA  D018               	goto	l3018
  3443                           
  3444                           ; BSR set to: 0
  3445  007CEC  0E01               	movlw	1
  3446  007CEE  6F64               	movwf	___awmod@counter& (0+255),b
  3447  007CF0  D004               	goto	l3013
  3448  007CF2                     
  3449                           ; BSR set to: 0
  3450                           
  3451                           ; BSR set to: 0
  3452  007CF2  90D8               	bcf	status,0,c
  3453  007CF4  3762               	rlcf	___awmod@divisor& (0+255),f,b
  3454  007CF6  3763               	rlcf	(___awmod@divisor+1)& (0+255),f,b
  3455  007CF8  2B64               	incf	___awmod@counter& (0+255),f,b
  3456  007CFA                     l3013:
  3457                           
  3458                           ; BSR set to: 0
  3459                           
  3460                           ; BSR set to: 0
  3461  007CFA  AF63               	btfss	(___awmod@divisor+1)& (0+255),7,b
  3462  007CFC  D7FA               	goto	l3014
  3463  007CFE                     u14410:
  3464                           
  3465                           ; BSR set to: 0
  3466                           
  3467                           ; BSR set to: 0
  3468                           
  3469                           ; BSR set to: 0
  3470  007CFE  5162               	movf	___awmod@divisor& (0+255),w,b
  3471  007D00  5D60               	subwf	___awmod@dividend& (0+255),w,b
  3472  007D02  5163               	movf	(___awmod@divisor+1)& (0+255),w,b
  3473  007D04  5961               	subwfb	(___awmod@dividend+1)& (0+255),w,b
  3474  007D06  A0D8               	btfss	status,0,c
  3475  007D08  D004               	goto	l3017
  3476                           
  3477                           ; BSR set to: 0
  3478  007D0A  5162               	movf	___awmod@divisor& (0+255),w,b
  3479  007D0C  5F60               	subwf	___awmod@dividend& (0+255),f,b
  3480  007D0E  5163               	movf	(___awmod@divisor+1)& (0+255),w,b
  3481  007D10  5B61               	subwfb	(___awmod@dividend+1)& (0+255),f,b
  3482  007D12                     l3017:
  3483                           
  3484                           ; BSR set to: 0
  3485                           
  3486                           ; BSR set to: 0
  3487  007D12  90D8               	bcf	status,0,c
  3488  007D14  3363               	rrcf	(___awmod@divisor+1)& (0+255),f,b
  3489  007D16  3362               	rrcf	___awmod@divisor& (0+255),f,b
  3490                           
  3491                           ; BSR set to: 0
  3492  007D18  2F64               	decfsz	___awmod@counter& (0+255),f,b
  3493  007D1A  D7F1               	goto	u14410
  3494  007D1C                     l3018:
  3495                           
  3496                           ; BSR set to: 0
  3497                           
  3498                           ; BSR set to: 0
  3499                           
  3500                           ; BSR set to: 0
  3501  007D1C  5165               	movf	___awmod@sign& (0+255),w,b
  3502  007D1E  B4D8               	btfsc	status,2,c
  3503  007D20  D004               	goto	l3019
  3504                           
  3505                           ; BSR set to: 0
  3506  007D22  6D60               	negf	___awmod@dividend& (0+255),b
  3507  007D24  1F61               	comf	(___awmod@dividend+1)& (0+255),f,b
  3508  007D26  B0D8               	btfsc	status,0,c
  3509  007D28  2B61               	incf	(___awmod@dividend+1)& (0+255),f,b
  3510  007D2A                     l3019:
  3511                           
  3512                           ; BSR set to: 0
  3513                           
  3514                           ; BSR set to: 0
  3515  007D2A  C060  F060         	movff	___awmod@dividend,?___awmod
  3516  007D2E  C061  F061         	movff	___awmod@dividend+1,?___awmod+1
  3517  007D32  0012               	return	
  3518  007D34                     __end_of___awmod:
  3519                           	opt stack 0
  3520                           tblptru	equ	0xFF8
  3521                           tblptrh	equ	0xFF7
  3522                           tblptrl	equ	0xFF6
  3523                           tablat	equ	0xFF5
  3524                           intcon	equ	0xFF2
  3525                           postinc0	equ	0xFEE
  3526                           wreg	equ	0xFE8
  3527                           postdec2	equ	0xFDD
  3528                           fsr2h	equ	0xFDA
  3529                           fsr2l	equ	0xFD9
  3530                           status	equ	0xFD8
  3531                           
  3532 ;; *************** function ___almod *****************
  3533 ;; Defined at:
  3534 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\almod.c"
  3535 ;; Parameters:    Size  Location     Type
  3536 ;;  dividend        4    0[BANK0 ] long 
  3537 ;;  divisor         4    4[BANK0 ] long 
  3538 ;; Auto vars:     Size  Location     Type
  3539 ;;  sign            1    9[BANK0 ] unsigned char 
  3540 ;;  counter         1    8[BANK0 ] unsigned char 
  3541 ;; Return value:  Size  Location     Type
  3542 ;;                  4    0[BANK0 ] long 
  3543 ;; Registers used:
  3544 ;;		wreg, status,2, status,0
  3545 ;; Tracked objects:
  3546 ;;		On entry : 0/0
  3547 ;;		On exit  : 0/0
  3548 ;;		Unchanged: 0/0
  3549 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3550 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3551 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3552 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3553 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3554 ;;Total ram usage:       10 bytes
  3555 ;; Hardware stack levels used:    1
  3556 ;; Hardware stack levels required when called:    7
  3557 ;; This function calls:
  3558 ;;		Nothing
  3559 ;; This function is called by:
  3560 ;;		_main
  3561 ;; This function uses a non-reentrant model
  3562 ;;
  3563                           
  3564                           	psect	text2
  3565  007182                     __ptext2:
  3566                           	opt stack 0
  3567  007182                     ___almod:
  3568                           	opt stack 23
  3569                           
  3570                           ; BSR set to: 0
  3571                           ;incstack = 0
  3572  007182  0E00               	movlw	0
  3573  007184  0100               	movlb	0	; () banked
  3574  007186  6F69               	movwf	___almod@sign& (0+255),b
  3575                           
  3576                           ; BSR set to: 0
  3577  007188  AF63               	btfss	(___almod@dividend+3)& (0+255),7,b
  3578  00718A  D00A               	goto	l2898
  3579                           
  3580                           ; BSR set to: 0
  3581  00718C  1F63               	comf	(___almod@dividend+3)& (0+255),f,b
  3582  00718E  1F62               	comf	(___almod@dividend+2)& (0+255),f,b
  3583  007190  1F61               	comf	(___almod@dividend+1)& (0+255),f,b
  3584  007192  6D60               	negf	___almod@dividend& (0+255),b
  3585  007194  0E00               	movlw	0
  3586  007196  2361               	addwfc	(___almod@dividend+1)& (0+255),f,b
  3587  007198  2362               	addwfc	(___almod@dividend+2)& (0+255),f,b
  3588  00719A  2363               	addwfc	(___almod@dividend+3)& (0+255),f,b
  3589                           
  3590                           ; BSR set to: 0
  3591  00719C  0E01               	movlw	1
  3592  00719E  6F69               	movwf	___almod@sign& (0+255),b
  3593  0071A0                     l2898:
  3594                           
  3595                           ; BSR set to: 0
  3596                           
  3597                           ; BSR set to: 0
  3598  0071A0  AF67               	btfss	(___almod@divisor+3)& (0+255),7,b
  3599  0071A2  D008               	goto	l2899
  3600                           
  3601                           ; BSR set to: 0
  3602  0071A4  1F67               	comf	(___almod@divisor+3)& (0+255),f,b
  3603  0071A6  1F66               	comf	(___almod@divisor+2)& (0+255),f,b
  3604  0071A8  1F65               	comf	(___almod@divisor+1)& (0+255),f,b
  3605  0071AA  6D64               	negf	___almod@divisor& (0+255),b
  3606  0071AC  0E00               	movlw	0
  3607  0071AE  2365               	addwfc	(___almod@divisor+1)& (0+255),f,b
  3608  0071B0  2366               	addwfc	(___almod@divisor+2)& (0+255),f,b
  3609  0071B2  2367               	addwfc	(___almod@divisor+3)& (0+255),f,b
  3610  0071B4                     l2899:
  3611                           
  3612                           ; BSR set to: 0
  3613                           
  3614                           ; BSR set to: 0
  3615  0071B4  5164               	movf	___almod@divisor& (0+255),w,b
  3616  0071B6  1165               	iorwf	(___almod@divisor+1)& (0+255),w,b
  3617  0071B8  1166               	iorwf	(___almod@divisor+2)& (0+255),w,b
  3618  0071BA  1167               	iorwf	(___almod@divisor+3)& (0+255),w,b
  3619  0071BC  B4D8               	btfsc	status,2,c
  3620  0071BE  D024               	goto	l2906
  3621                           
  3622                           ; BSR set to: 0
  3623  0071C0  0E01               	movlw	1
  3624  0071C2  6F68               	movwf	___almod@counter& (0+255),b
  3625  0071C4  D006               	goto	l2901
  3626  0071C6                     
  3627                           ; BSR set to: 0
  3628                           
  3629                           ; BSR set to: 0
  3630  0071C6  90D8               	bcf	status,0,c
  3631  0071C8  3764               	rlcf	___almod@divisor& (0+255),f,b
  3632  0071CA  3765               	rlcf	(___almod@divisor+1)& (0+255),f,b
  3633  0071CC  3766               	rlcf	(___almod@divisor+2)& (0+255),f,b
  3634  0071CE  3767               	rlcf	(___almod@divisor+3)& (0+255),f,b
  3635  0071D0  2B68               	incf	___almod@counter& (0+255),f,b
  3636  0071D2                     l2901:
  3637                           
  3638                           ; BSR set to: 0
  3639                           
  3640                           ; BSR set to: 0
  3641  0071D2  AF67               	btfss	(___almod@divisor+3)& (0+255),7,b
  3642  0071D4  D7F8               	goto	l2902
  3643  0071D6                     u14350:
  3644                           
  3645                           ; BSR set to: 0
  3646                           
  3647                           ; BSR set to: 0
  3648                           
  3649                           ; BSR set to: 0
  3650  0071D6  5164               	movf	___almod@divisor& (0+255),w,b
  3651  0071D8  5D60               	subwf	___almod@dividend& (0+255),w,b
  3652  0071DA  5165               	movf	(___almod@divisor+1)& (0+255),w,b
  3653  0071DC  5961               	subwfb	(___almod@dividend+1)& (0+255),w,b
  3654  0071DE  5166               	movf	(___almod@divisor+2)& (0+255),w,b
  3655  0071E0  5962               	subwfb	(___almod@dividend+2)& (0+255),w,b
  3656  0071E2  5167               	movf	(___almod@divisor+3)& (0+255),w,b
  3657  0071E4  5963               	subwfb	(___almod@dividend+3)& (0+255),w,b
  3658  0071E6  A0D8               	btfss	status,0,c
  3659  0071E8  D008               	goto	l2905
  3660                           
  3661                           ; BSR set to: 0
  3662  0071EA  5164               	movf	___almod@divisor& (0+255),w,b
  3663  0071EC  5F60               	subwf	___almod@dividend& (0+255),f,b
  3664  0071EE  5165               	movf	(___almod@divisor+1)& (0+255),w,b
  3665  0071F0  5B61               	subwfb	(___almod@dividend+1)& (0+255),f,b
  3666  0071F2  5166               	movf	(___almod@divisor+2)& (0+255),w,b
  3667  0071F4  5B62               	subwfb	(___almod@dividend+2)& (0+255),f,b
  3668  0071F6  5167               	movf	(___almod@divisor+3)& (0+255),w,b
  3669  0071F8  5B63               	subwfb	(___almod@dividend+3)& (0+255),f,b
  3670  0071FA                     l2905:
  3671                           
  3672                           ; BSR set to: 0
  3673                           
  3674                           ; BSR set to: 0
  3675  0071FA  90D8               	bcf	status,0,c
  3676  0071FC  3367               	rrcf	(___almod@divisor+3)& (0+255),f,b
  3677  0071FE  3366               	rrcf	(___almod@divisor+2)& (0+255),f,b
  3678  007200  3365               	rrcf	(___almod@divisor+1)& (0+255),f,b
  3679  007202  3364               	rrcf	___almod@divisor& (0+255),f,b
  3680                           
  3681                           ; BSR set to: 0
  3682  007204  2F68               	decfsz	___almod@counter& (0+255),f,b
  3683  007206  D7E7               	goto	u14350
  3684  007208                     l2906:
  3685                           
  3686                           ; BSR set to: 0
  3687                           
  3688                           ; BSR set to: 0
  3689                           
  3690                           ; BSR set to: 0
  3691  007208  5169               	movf	___almod@sign& (0+255),w,b
  3692  00720A  B4D8               	btfsc	status,2,c
  3693  00720C  D008               	goto	l2907
  3694                           
  3695                           ; BSR set to: 0
  3696  00720E  1F63               	comf	(___almod@dividend+3)& (0+255),f,b
  3697  007210  1F62               	comf	(___almod@dividend+2)& (0+255),f,b
  3698  007212  1F61               	comf	(___almod@dividend+1)& (0+255),f,b
  3699  007214  6D60               	negf	___almod@dividend& (0+255),b
  3700  007216  0E00               	movlw	0
  3701  007218  2361               	addwfc	(___almod@dividend+1)& (0+255),f,b
  3702  00721A  2362               	addwfc	(___almod@dividend+2)& (0+255),f,b
  3703  00721C  2363               	addwfc	(___almod@dividend+3)& (0+255),f,b
  3704  00721E                     l2907:
  3705                           
  3706                           ; BSR set to: 0
  3707                           
  3708                           ; BSR set to: 0
  3709  00721E  C060  F060         	movff	___almod@dividend,?___almod
  3710  007222  C061  F061         	movff	___almod@dividend+1,?___almod+1
  3711  007226  C062  F062         	movff	___almod@dividend+2,?___almod+2
  3712  00722A  C063  F063         	movff	___almod@dividend+3,?___almod+3
  3713  00722E  0012               	return	
  3714  007230                     __end_of___almod:
  3715                           	opt stack 0
  3716                           tblptru	equ	0xFF8
  3717                           tblptrh	equ	0xFF7
  3718                           tblptrl	equ	0xFF6
  3719                           tablat	equ	0xFF5
  3720                           intcon	equ	0xFF2
  3721                           postinc0	equ	0xFEE
  3722                           wreg	equ	0xFE8
  3723                           postdec2	equ	0xFDD
  3724                           fsr2h	equ	0xFDA
  3725                           fsr2l	equ	0xFD9
  3726                           status	equ	0xFD8
  3727                           
  3728 ;; *************** function ___aldiv *****************
  3729 ;; Defined at:
  3730 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\aldiv.c"
  3731 ;; Parameters:    Size  Location     Type
  3732 ;;  dividend        4   10[BANK0 ] long 
  3733 ;;  divisor         4   14[BANK0 ] long 
  3734 ;; Auto vars:     Size  Location     Type
  3735 ;;  quotient        4   20[BANK0 ] long 
  3736 ;;  sign            1   19[BANK0 ] unsigned char 
  3737 ;;  counter         1   18[BANK0 ] unsigned char 
  3738 ;; Return value:  Size  Location     Type
  3739 ;;                  4   10[BANK0 ] long 
  3740 ;; Registers used:
  3741 ;;		wreg, status,2, status,0
  3742 ;; Tracked objects:
  3743 ;;		On entry : 0/0
  3744 ;;		On exit  : 0/0
  3745 ;;		Unchanged: 0/0
  3746 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3747 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3748 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3749 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3750 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3751 ;;Total ram usage:       14 bytes
  3752 ;; Hardware stack levels used:    1
  3753 ;; Hardware stack levels required when called:    7
  3754 ;; This function calls:
  3755 ;;		Nothing
  3756 ;; This function is called by:
  3757 ;;		_main
  3758 ;; This function uses a non-reentrant model
  3759 ;;
  3760                           
  3761                           	psect	text3
  3762  006DB4                     __ptext3:
  3763                           	opt stack 0
  3764  006DB4                     ___aldiv:
  3765                           	opt stack 23
  3766                           
  3767                           ; BSR set to: 0
  3768                           ;incstack = 0
  3769  006DB4  0E00               	movlw	0
  3770  006DB6  0100               	movlb	0	; () banked
  3771  006DB8  6F73               	movwf	___aldiv@sign& (0+255),b
  3772                           
  3773                           ; BSR set to: 0
  3774  006DBA  AF71               	btfss	(___aldiv@divisor+3)& (0+255),7,b
  3775  006DBC  D00A               	goto	l2885
  3776                           
  3777                           ; BSR set to: 0
  3778  006DBE  1F71               	comf	(___aldiv@divisor+3)& (0+255),f,b
  3779  006DC0  1F70               	comf	(___aldiv@divisor+2)& (0+255),f,b
  3780  006DC2  1F6F               	comf	(___aldiv@divisor+1)& (0+255),f,b
  3781  006DC4  6D6E               	negf	___aldiv@divisor& (0+255),b
  3782  006DC6  0E00               	movlw	0
  3783  006DC8  236F               	addwfc	(___aldiv@divisor+1)& (0+255),f,b
  3784  006DCA  2370               	addwfc	(___aldiv@divisor+2)& (0+255),f,b
  3785  006DCC  2371               	addwfc	(___aldiv@divisor+3)& (0+255),f,b
  3786                           
  3787                           ; BSR set to: 0
  3788  006DCE  0E01               	movlw	1
  3789  006DD0  6F73               	movwf	___aldiv@sign& (0+255),b
  3790  006DD2                     l2885:
  3791                           
  3792                           ; BSR set to: 0
  3793                           
  3794                           ; BSR set to: 0
  3795  006DD2  AF6D               	btfss	(___aldiv@dividend+3)& (0+255),7,b
  3796  006DD4  D00A               	goto	l2886
  3797                           
  3798                           ; BSR set to: 0
  3799  006DD6  1F6D               	comf	(___aldiv@dividend+3)& (0+255),f,b
  3800  006DD8  1F6C               	comf	(___aldiv@dividend+2)& (0+255),f,b
  3801  006DDA  1F6B               	comf	(___aldiv@dividend+1)& (0+255),f,b
  3802  006DDC  6D6A               	negf	___aldiv@dividend& (0+255),b
  3803  006DDE  0E00               	movlw	0
  3804  006DE0  236B               	addwfc	(___aldiv@dividend+1)& (0+255),f,b
  3805  006DE2  236C               	addwfc	(___aldiv@dividend+2)& (0+255),f,b
  3806  006DE4  236D               	addwfc	(___aldiv@dividend+3)& (0+255),f,b
  3807                           
  3808                           ; BSR set to: 0
  3809  006DE6  0E01               	movlw	1
  3810  006DE8  1B73               	xorwf	___aldiv@sign& (0+255),f,b
  3811  006DEA                     l2886:
  3812                           
  3813                           ; BSR set to: 0
  3814                           
  3815                           ; BSR set to: 0
  3816  006DEA  0E00               	movlw	0
  3817  006DEC  6F74               	movwf	___aldiv@quotient& (0+255),b
  3818  006DEE  0E00               	movlw	0
  3819  006DF0  6F75               	movwf	(___aldiv@quotient+1)& (0+255),b
  3820  006DF2  0E00               	movlw	0
  3821  006DF4  6F76               	movwf	(___aldiv@quotient+2)& (0+255),b
  3822  006DF6  0E00               	movlw	0
  3823  006DF8  6F77               	movwf	(___aldiv@quotient+3)& (0+255),b
  3824                           
  3825                           ; BSR set to: 0
  3826  006DFA  516E               	movf	___aldiv@divisor& (0+255),w,b
  3827  006DFC  116F               	iorwf	(___aldiv@divisor+1)& (0+255),w,b
  3828  006DFE  1170               	iorwf	(___aldiv@divisor+2)& (0+255),w,b
  3829  006E00  1171               	iorwf	(___aldiv@divisor+3)& (0+255),w,b
  3830  006E02  B4D8               	btfsc	status,2,c
  3831  006E04  D02A               	goto	l2893
  3832                           
  3833                           ; BSR set to: 0
  3834  006E06  0E01               	movlw	1
  3835  006E08  6F72               	movwf	___aldiv@counter& (0+255),b
  3836  006E0A  D006               	goto	l2888
  3837  006E0C                     
  3838                           ; BSR set to: 0
  3839                           
  3840                           ; BSR set to: 0
  3841  006E0C  90D8               	bcf	status,0,c
  3842  006E0E  376E               	rlcf	___aldiv@divisor& (0+255),f,b
  3843  006E10  376F               	rlcf	(___aldiv@divisor+1)& (0+255),f,b
  3844  006E12  3770               	rlcf	(___aldiv@divisor+2)& (0+255),f,b
  3845  006E14  3771               	rlcf	(___aldiv@divisor+3)& (0+255),f,b
  3846  006E16  2B72               	incf	___aldiv@counter& (0+255),f,b
  3847  006E18                     l2888:
  3848                           
  3849                           ; BSR set to: 0
  3850                           
  3851                           ; BSR set to: 0
  3852  006E18  AF71               	btfss	(___aldiv@divisor+3)& (0+255),7,b
  3853  006E1A  D7F8               	goto	l2889
  3854  006E1C                     u14290:
  3855                           
  3856                           ; BSR set to: 0
  3857                           
  3858                           ; BSR set to: 0
  3859                           
  3860                           ; BSR set to: 0
  3861  006E1C  90D8               	bcf	status,0,c
  3862  006E1E  3774               	rlcf	___aldiv@quotient& (0+255),f,b
  3863  006E20  3775               	rlcf	(___aldiv@quotient+1)& (0+255),f,b
  3864  006E22  3776               	rlcf	(___aldiv@quotient+2)& (0+255),f,b
  3865  006E24  3777               	rlcf	(___aldiv@quotient+3)& (0+255),f,b
  3866                           
  3867                           ; BSR set to: 0
  3868  006E26  516E               	movf	___aldiv@divisor& (0+255),w,b
  3869  006E28  5D6A               	subwf	___aldiv@dividend& (0+255),w,b
  3870  006E2A  516F               	movf	(___aldiv@divisor+1)& (0+255),w,b
  3871  006E2C  596B               	subwfb	(___aldiv@dividend+1)& (0+255),w,b
  3872  006E2E  5170               	movf	(___aldiv@divisor+2)& (0+255),w,b
  3873  006E30  596C               	subwfb	(___aldiv@dividend+2)& (0+255),w,b
  3874  006E32  5171               	movf	(___aldiv@divisor+3)& (0+255),w,b
  3875  006E34  596D               	subwfb	(___aldiv@dividend+3)& (0+255),w,b
  3876  006E36  A0D8               	btfss	status,0,c
  3877  006E38  D009               	goto	l2892
  3878                           
  3879                           ; BSR set to: 0
  3880  006E3A  516E               	movf	___aldiv@divisor& (0+255),w,b
  3881  006E3C  5F6A               	subwf	___aldiv@dividend& (0+255),f,b
  3882  006E3E  516F               	movf	(___aldiv@divisor+1)& (0+255),w,b
  3883  006E40  5B6B               	subwfb	(___aldiv@dividend+1)& (0+255),f,b
  3884  006E42  5170               	movf	(___aldiv@divisor+2)& (0+255),w,b
  3885  006E44  5B6C               	subwfb	(___aldiv@dividend+2)& (0+255),f,b
  3886  006E46  5171               	movf	(___aldiv@divisor+3)& (0+255),w,b
  3887  006E48  5B6D               	subwfb	(___aldiv@dividend+3)& (0+255),f,b
  3888                           
  3889                           ; BSR set to: 0
  3890  006E4A  8174               	bsf	___aldiv@quotient& (0+255),0,b
  3891  006E4C                     l2892:
  3892                           
  3893                           ; BSR set to: 0
  3894                           
  3895                           ; BSR set to: 0
  3896  006E4C  90D8               	bcf	status,0,c
  3897  006E4E  3371               	rrcf	(___aldiv@divisor+3)& (0+255),f,b
  3898  006E50  3370               	rrcf	(___aldiv@divisor+2)& (0+255),f,b
  3899  006E52  336F               	rrcf	(___aldiv@divisor+1)& (0+255),f,b
  3900  006E54  336E               	rrcf	___aldiv@divisor& (0+255),f,b
  3901                           
  3902                           ; BSR set to: 0
  3903  006E56  2F72               	decfsz	___aldiv@counter& (0+255),f,b
  3904  006E58  D7E1               	goto	u14290
  3905  006E5A                     l2893:
  3906                           
  3907                           ; BSR set to: 0
  3908                           
  3909                           ; BSR set to: 0
  3910                           
  3911                           ; BSR set to: 0
  3912  006E5A  5173               	movf	___aldiv@sign& (0+255),w,b
  3913  006E5C  B4D8               	btfsc	status,2,c
  3914  006E5E  D008               	goto	l2894
  3915                           
  3916                           ; BSR set to: 0
  3917  006E60  1F77               	comf	(___aldiv@quotient+3)& (0+255),f,b
  3918  006E62  1F76               	comf	(___aldiv@quotient+2)& (0+255),f,b
  3919  006E64  1F75               	comf	(___aldiv@quotient+1)& (0+255),f,b
  3920  006E66  6D74               	negf	___aldiv@quotient& (0+255),b
  3921  006E68  0E00               	movlw	0
  3922  006E6A  2375               	addwfc	(___aldiv@quotient+1)& (0+255),f,b
  3923  006E6C  2376               	addwfc	(___aldiv@quotient+2)& (0+255),f,b
  3924  006E6E  2377               	addwfc	(___aldiv@quotient+3)& (0+255),f,b
  3925  006E70                     l2894:
  3926                           
  3927                           ; BSR set to: 0
  3928                           
  3929                           ; BSR set to: 0
  3930  006E70  C074  F06A         	movff	___aldiv@quotient,?___aldiv
  3931  006E74  C075  F06B         	movff	___aldiv@quotient+1,?___aldiv+1
  3932  006E78  C076  F06C         	movff	___aldiv@quotient+2,?___aldiv+2
  3933  006E7C  C077  F06D         	movff	___aldiv@quotient+3,?___aldiv+3
  3934  006E80  0012               	return	
  3935  006E82                     __end_of___aldiv:
  3936                           	opt stack 0
  3937                           tblptru	equ	0xFF8
  3938                           tblptrh	equ	0xFF7
  3939                           tblptrl	equ	0xFF6
  3940                           tablat	equ	0xFF5
  3941                           intcon	equ	0xFF2
  3942                           postinc0	equ	0xFEE
  3943                           wreg	equ	0xFE8
  3944                           postdec2	equ	0xFDD
  3945                           fsr2h	equ	0xFDA
  3946                           fsr2l	equ	0xFD9
  3947                           status	equ	0xFD8
  3948                           
  3949 ;; *************** function _TMR5_HasOverflowOccured *****************
  3950 ;; Defined at:
  3951 ;;		line 151 in file "mcc_generated_files/tmr5.c"
  3952 ;; Parameters:    Size  Location     Type
  3953 ;;		None
  3954 ;; Auto vars:     Size  Location     Type
  3955 ;;		None
  3956 ;; Return value:  Size  Location     Type
  3957 ;;                  1    wreg      unsigned char 
  3958 ;; Registers used:
  3959 ;;		wreg
  3960 ;; Tracked objects:
  3961 ;;		On entry : 0/0
  3962 ;;		On exit  : 0/0
  3963 ;;		Unchanged: 0/0
  3964 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3965 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3966 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3967 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3968 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3969 ;;Total ram usage:        0 bytes
  3970 ;; Hardware stack levels used:    1
  3971 ;; Hardware stack levels required when called:    7
  3972 ;; This function calls:
  3973 ;;		Nothing
  3974 ;; This function is called by:
  3975 ;;		_main
  3976 ;; This function uses a non-reentrant model
  3977 ;;
  3978                           
  3979                           	psect	text4
  3980  00944C                     __ptext4:
  3981                           	opt stack 0
  3982  00944C                     _TMR5_HasOverflowOccured:
  3983                           	opt stack 23
  3984                           
  3985                           ;tmr5.c: 154: return(PIR5bits.TMR5IF);
  3986                           
  3987                           ; BSR set to: 0
  3988                           ;incstack = 0
  3989  00944C  A27E               	btfss	3966,1,c	;volatile
  3990  00944E  D002               	goto	u14250
  3991  009450  0E01               	movlw	1
  3992  009452  0012               	return	
  3993  009454                     u14250:
  3994  009454  0E00               	movlw	0
  3995  009456  0012               	return	
  3996  009458                     __end_of_TMR5_HasOverflowOccured:
  3997                           	opt stack 0
  3998                           tblptru	equ	0xFF8
  3999                           tblptrh	equ	0xFF7
  4000                           tblptrl	equ	0xFF6
  4001                           tablat	equ	0xFF5
  4002                           intcon	equ	0xFF2
  4003                           postinc0	equ	0xFEE
  4004                           wreg	equ	0xFE8
  4005                           postdec2	equ	0xFDD
  4006                           fsr2h	equ	0xFDA
  4007                           fsr2l	equ	0xFD9
  4008                           status	equ	0xFD8
  4009                           
  4010 ;; *************** function _SYSTEM_Initialize *****************
  4011 ;; Defined at:
  4012 ;;		line 50 in file "mcc_generated_files/mcc.c"
  4013 ;; Parameters:    Size  Location     Type
  4014 ;;		None
  4015 ;; Auto vars:     Size  Location     Type
  4016 ;;		None
  4017 ;; Return value:  Size  Location     Type
  4018 ;;                  1    wreg      void 
  4019 ;; Registers used:
  4020 ;;		wreg, status,2, status,0, cstack
  4021 ;; Tracked objects:
  4022 ;;		On entry : 0/0
  4023 ;;		On exit  : 0/0
  4024 ;;		Unchanged: 0/0
  4025 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4026 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4027 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4028 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4029 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4030 ;;Total ram usage:        0 bytes
  4031 ;; Hardware stack levels used:    1
  4032 ;; Hardware stack levels required when called:   10
  4033 ;; This function calls:
  4034 ;;		_EUSART1_Initialize
  4035 ;;		_EXT_INT_Initialize
  4036 ;;		_INTERRUPT_Initialize
  4037 ;;		_LORAWAN_PlatformInit
  4038 ;;		_OSCILLATOR_Initialize
  4039 ;;		_PIN_MANAGER_Initialize
  4040 ;;		_SPI2_Initialize
  4041 ;;		_TMR1_Initialize
  4042 ;;		_TMR5_Initialize
  4043 ;; This function is called by:
  4044 ;;		_main
  4045 ;; This function uses a non-reentrant model
  4046 ;;
  4047                           
  4048                           	psect	text5
  4049  00901E                     __ptext5:
  4050                           	opt stack 0
  4051  00901E                     _SYSTEM_Initialize:
  4052                           	opt stack 20
  4053                           
  4054                           ;mcc.c: 53: INTERRUPT_Initialize();
  4055                           
  4056                           ;incstack = 0
  4057  00901E  ECC4  F04A         	call	_INTERRUPT_Initialize	;wreg free
  4058                           
  4059                           ;mcc.c: 54: PIN_MANAGER_Initialize();
  4060  009022  ECD0  F042         	call	_PIN_MANAGER_Initialize	;wreg free
  4061                           
  4062                           ;mcc.c: 55: OSCILLATOR_Initialize();
  4063  009026  EC18  F04A         	call	_OSCILLATOR_Initialize	;wreg free
  4064                           
  4065                           ;mcc.c: 56: SPI2_Initialize();
  4066  00902A  EC11  F04A         	call	_SPI2_Initialize	;wreg free
  4067                           
  4068                           ;mcc.c: 59: TMR5_Initialize();
  4069  00902E  EC2E  F049         	call	_TMR5_Initialize	;wreg free
  4070                           
  4071                           ;mcc.c: 60: EXT_INT_Initialize();
  4072  009032  EC57  F047         	call	_EXT_INT_Initialize	;wreg free
  4073                           
  4074                           ;mcc.c: 61: TMR1_Initialize();
  4075  009036  EC41  F047         	call	_TMR1_Initialize	;wreg free
  4076                           
  4077                           ;mcc.c: 62: EUSART1_Initialize();
  4078  00903A  EC67  F03D         	call	_EUSART1_Initialize	;wreg free
  4079                           
  4080                           ;mcc.c: 63: LORAWAN_PlatformInit();
  4081  00903E  EC5A  F048         	call	_LORAWAN_PlatformInit	;wreg free
  4082  009042  0012               	return		;funcret
  4083  009044                     __end_of_SYSTEM_Initialize:
  4084                           	opt stack 0
  4085                           tblptru	equ	0xFF8
  4086                           tblptrh	equ	0xFF7
  4087                           tblptrl	equ	0xFF6
  4088                           tablat	equ	0xFF5
  4089                           intcon	equ	0xFF2
  4090                           postinc0	equ	0xFEE
  4091                           wreg	equ	0xFE8
  4092                           postdec2	equ	0xFDD
  4093                           fsr2h	equ	0xFDA
  4094                           fsr2l	equ	0xFD9
  4095                           status	equ	0xFD8
  4096                           
  4097 ;; *************** function _TMR5_Initialize *****************
  4098 ;; Defined at:
  4099 ;;		line 63 in file "mcc_generated_files/tmr5.c"
  4100 ;; Parameters:    Size  Location     Type
  4101 ;;		None
  4102 ;; Auto vars:     Size  Location     Type
  4103 ;;		None
  4104 ;; Return value:  Size  Location     Type
  4105 ;;                  1    wreg      void 
  4106 ;; Registers used:
  4107 ;;		wreg, status,2
  4108 ;; Tracked objects:
  4109 ;;		On entry : 0/0
  4110 ;;		On exit  : 0/0
  4111 ;;		Unchanged: 0/0
  4112 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4113 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4114 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4115 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4116 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4117 ;;Total ram usage:        0 bytes
  4118 ;; Hardware stack levels used:    1
  4119 ;; Hardware stack levels required when called:    7
  4120 ;; This function calls:
  4121 ;;		Nothing
  4122 ;; This function is called by:
  4123 ;;		_SYSTEM_Initialize
  4124 ;; This function uses a non-reentrant model
  4125 ;;
  4126                           
  4127                           	psect	text6
  4128  00925C                     __ptext6:
  4129                           	opt stack 0
  4130  00925C                     _TMR5_Initialize:
  4131                           	opt stack 22
  4132                           
  4133                           ;tmr5.c: 68: T5GCON = 0x00;
  4134                           
  4135                           ;incstack = 0
  4136  00925C  0E00               	movlw	0
  4137  00925E  010F               	movlb	15	; () banked
  4138  009260  6F4D               	movwf	77,b	;volatile
  4139                           
  4140                           ;tmr5.c: 71: TMR5H = 0x10;
  4141  009262  0E10               	movlw	16
  4142  009264  6F50               	movwf	80,b	;volatile
  4143                           
  4144                           ;tmr5.c: 74: TMR5L = 0x00;
  4145  009266  0E00               	movlw	0
  4146  009268  6F4F               	movwf	79,b	;volatile
  4147                           
  4148                           ; BSR set to: 15
  4149                           ;tmr5.c: 77: timer5ReloadVal=TMR5;
  4150  00926A  CF4F F3E7          	movff	3919,_timer5ReloadVal	;volatile
  4151  00926E  CF50 F3E8          	movff	3920,_timer5ReloadVal+1	;volatile
  4152                           
  4153                           ; BSR set to: 15
  4154                           ;tmr5.c: 80: PIR5bits.TMR5IF = 0;
  4155  009272  927E               	bcf	3966,1,c	;volatile
  4156                           
  4157                           ;tmr5.c: 83: T5CON = 0xBD;
  4158  009274  0EBD               	movlw	189
  4159  009276  6F4E               	movwf	78,b	;volatile
  4160                           
  4161                           ; BSR set to: 15
  4162  009278  0012               	return		;funcret
  4163  00927A                     __end_of_TMR5_Initialize:
  4164                           	opt stack 0
  4165                           tblptru	equ	0xFF8
  4166                           tblptrh	equ	0xFF7
  4167                           tblptrl	equ	0xFF6
  4168                           tablat	equ	0xFF5
  4169                           intcon	equ	0xFF2
  4170                           postinc0	equ	0xFEE
  4171                           wreg	equ	0xFE8
  4172                           postdec2	equ	0xFDD
  4173                           fsr2h	equ	0xFDA
  4174                           fsr2l	equ	0xFD9
  4175                           status	equ	0xFD8
  4176                           
  4177 ;; *************** function _TMR1_Initialize *****************
  4178 ;; Defined at:
  4179 ;;		line 64 in file "mcc_generated_files/tmr1.c"
  4180 ;; Parameters:    Size  Location     Type
  4181 ;;		None
  4182 ;; Auto vars:     Size  Location     Type
  4183 ;;		None
  4184 ;; Return value:  Size  Location     Type
  4185 ;;                  1    wreg      void 
  4186 ;; Registers used:
  4187 ;;		wreg, status,2, status,0, cstack
  4188 ;; Tracked objects:
  4189 ;;		On entry : 0/0
  4190 ;;		On exit  : 0/0
  4191 ;;		Unchanged: 0/0
  4192 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4193 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4194 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4195 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4196 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4197 ;;Total ram usage:        0 bytes
  4198 ;; Hardware stack levels used:    1
  4199 ;; Hardware stack levels required when called:    8
  4200 ;; This function calls:
  4201 ;;		_TMR1_SetInterruptHandler
  4202 ;; This function is called by:
  4203 ;;		_SYSTEM_Initialize
  4204 ;; This function uses a non-reentrant model
  4205 ;;
  4206                           
  4207                           	psect	text7
  4208  008E82                     __ptext7:
  4209                           	opt stack 0
  4210  008E82                     _TMR1_Initialize:
  4211                           	opt stack 21
  4212                           
  4213                           ;tmr1.c: 69: T1GCON = 0x00;
  4214                           
  4215                           ; BSR set to: 15
  4216                           ;incstack = 0
  4217  008E82  0E00               	movlw	0
  4218  008E84  6ECC               	movwf	4044,c	;volatile
  4219                           
  4220                           ;tmr1.c: 72: TMR1H = 0x00;
  4221  008E86  0E00               	movlw	0
  4222  008E88  6ECF               	movwf	4047,c	;volatile
  4223                           
  4224                           ;tmr1.c: 75: TMR1L = 0x00;
  4225  008E8A  0E00               	movlw	0
  4226  008E8C  6ECE               	movwf	4046,c	;volatile
  4227                           
  4228                           ;tmr1.c: 78: timer1ReloadVal=TMR1;
  4229  008E8E  CFCE F1FC          	movff	4046,_timer1ReloadVal	;volatile
  4230  008E92  CFCF F1FD          	movff	4047,_timer1ReloadVal+1	;volatile
  4231                           
  4232                           ;tmr1.c: 81: PIR1bits.TMR1IF = 0;
  4233  008E96  909E               	bcf	3998,0,c	;volatile
  4234                           
  4235                           ;tmr1.c: 84: PIE1bits.TMR1IE = 1;
  4236  008E98  809D               	bsf	3997,0,c	;volatile
  4237                           
  4238                           ;tmr1.c: 87: TMR1_SetInterruptHandler(TMR1_DefaultInterruptHandler);
  4239  008E9A  0EA6               	movlw	low _TMR1_DefaultInterruptHandler
  4240  008E9C  0100               	movlb	0	; () banked
  4241  008E9E  6F60               	movwf	TMR1_SetInterruptHandler@InterruptHandler& (0+255),b
  4242  008EA0  0E95               	movlw	high _TMR1_DefaultInterruptHandler
  4243  008EA2  6F61               	movwf	(TMR1_SetInterruptHandler@InterruptHandler+1)& (0+255),b
  4244  008EA4  EC32  F04A         	call	_TMR1_SetInterruptHandler	;wreg free
  4245                           
  4246                           ;tmr1.c: 90: T1CON = 0x8D;
  4247  008EA8  0E8D               	movlw	141
  4248  008EAA  6ECD               	movwf	4045,c	;volatile
  4249  008EAC  0012               	return		;funcret
  4250  008EAE                     __end_of_TMR1_Initialize:
  4251                           	opt stack 0
  4252                           tblptru	equ	0xFF8
  4253                           tblptrh	equ	0xFF7
  4254                           tblptrl	equ	0xFF6
  4255                           tablat	equ	0xFF5
  4256                           intcon	equ	0xFF2
  4257                           postinc0	equ	0xFEE
  4258                           wreg	equ	0xFE8
  4259                           postdec2	equ	0xFDD
  4260                           fsr2h	equ	0xFDA
  4261                           fsr2l	equ	0xFD9
  4262                           status	equ	0xFD8
  4263                           
  4264 ;; *************** function _SPI2_Initialize *****************
  4265 ;; Defined at:
  4266 ;;		line 65 in file "mcc_generated_files/spi2.c"
  4267 ;; Parameters:    Size  Location     Type
  4268 ;;		None
  4269 ;; Auto vars:     Size  Location     Type
  4270 ;;		None
  4271 ;; Return value:  Size  Location     Type
  4272 ;;                  1    wreg      void 
  4273 ;; Registers used:
  4274 ;;		wreg, status,2
  4275 ;; Tracked objects:
  4276 ;;		On entry : 0/0
  4277 ;;		On exit  : 0/0
  4278 ;;		Unchanged: 0/0
  4279 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4280 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4281 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4282 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4283 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4284 ;;Total ram usage:        0 bytes
  4285 ;; Hardware stack levels used:    1
  4286 ;; Hardware stack levels required when called:    7
  4287 ;; This function calls:
  4288 ;;		Nothing
  4289 ;; This function is called by:
  4290 ;;		_SYSTEM_Initialize
  4291 ;; This function uses a non-reentrant model
  4292 ;;
  4293                           
  4294                           	psect	text8
  4295  009422                     __ptext8:
  4296                           	opt stack 0
  4297  009422                     _SPI2_Initialize:
  4298                           	opt stack 22
  4299                           
  4300                           ;spi2.c: 70: SSP2STAT = 0x40;
  4301                           
  4302                           ;incstack = 0
  4303  009422  0E40               	movlw	64
  4304  009424  6E6D               	movwf	3949,c	;volatile
  4305                           
  4306                           ;spi2.c: 73: SSP2CON1 = 0x20;
  4307  009426  0E20               	movlw	32
  4308  009428  6E6C               	movwf	3948,c	;volatile
  4309                           
  4310                           ;spi2.c: 76: SSP2ADD = 0x00;
  4311  00942A  0E00               	movlw	0
  4312  00942C  6E6E               	movwf	3950,c	;volatile
  4313  00942E  0012               	return		;funcret
  4314  009430                     __end_of_SPI2_Initialize:
  4315                           	opt stack 0
  4316                           tblptru	equ	0xFF8
  4317                           tblptrh	equ	0xFF7
  4318                           tblptrl	equ	0xFF6
  4319                           tablat	equ	0xFF5
  4320                           intcon	equ	0xFF2
  4321                           postinc0	equ	0xFEE
  4322                           wreg	equ	0xFE8
  4323                           postdec2	equ	0xFDD
  4324                           fsr2h	equ	0xFDA
  4325                           fsr2l	equ	0xFD9
  4326                           status	equ	0xFD8
  4327                           
  4328 ;; *************** function _PIN_MANAGER_Initialize *****************
  4329 ;; Defined at:
  4330 ;;		line 57 in file "mcc_generated_files/pin_manager.c"
  4331 ;; Parameters:    Size  Location     Type
  4332 ;;		None
  4333 ;; Auto vars:     Size  Location     Type
  4334 ;;		None
  4335 ;; Return value:  Size  Location     Type
  4336 ;;                  1    wreg      void 
  4337 ;; Registers used:
  4338 ;;		wreg, status,2, status,0, cstack
  4339 ;; Tracked objects:
  4340 ;;		On entry : 0/0
  4341 ;;		On exit  : 0/0
  4342 ;;		Unchanged: 0/0
  4343 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4344 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4345 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4346 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4347 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4348 ;;Total ram usage:        0 bytes
  4349 ;; Hardware stack levels used:    1
  4350 ;; Hardware stack levels required when called:    8
  4351 ;; This function calls:
  4352 ;;		_IOCB4_SetInterruptHandler
  4353 ;; This function is called by:
  4354 ;;		_SYSTEM_Initialize
  4355 ;; This function uses a non-reentrant model
  4356 ;;
  4357                           
  4358                           	psect	text9
  4359  0085A0                     __ptext9:
  4360                           	opt stack 0
  4361  0085A0                     _PIN_MANAGER_Initialize:
  4362                           	opt stack 21
  4363                           
  4364                           ;pin_manager.c: 62: LATE = 0x00;
  4365                           
  4366                           ;incstack = 0
  4367  0085A0  0E00               	movlw	0
  4368  0085A2  6E8D               	movwf	3981,c	;volatile
  4369                           
  4370                           ;pin_manager.c: 63: LATD = 0x00;
  4371  0085A4  0E00               	movlw	0
  4372  0085A6  6E8C               	movwf	3980,c	;volatile
  4373                           
  4374                           ;pin_manager.c: 64: LATA = 0x00;
  4375  0085A8  0E00               	movlw	0
  4376  0085AA  6E89               	movwf	3977,c	;volatile
  4377                           
  4378                           ;pin_manager.c: 65: LATB = 0x00;
  4379  0085AC  0E00               	movlw	0
  4380  0085AE  6E8A               	movwf	3978,c	;volatile
  4381                           
  4382                           ;pin_manager.c: 66: LATC = 0x00;
  4383  0085B0  0E00               	movlw	0
  4384  0085B2  6E8B               	movwf	3979,c	;volatile
  4385                           
  4386                           ;pin_manager.c: 71: TRISE = 0x07;
  4387  0085B4  0E07               	movlw	7
  4388  0085B6  6E96               	movwf	3990,c	;volatile
  4389                           
  4390                           ;pin_manager.c: 72: TRISA = 0xFF;
  4391  0085B8  6892               	setf	3986,c	;volatile
  4392                           
  4393                           ;pin_manager.c: 73: TRISB = 0xFF;
  4394  0085BA  6893               	setf	3987,c	;volatile
  4395                           
  4396                           ;pin_manager.c: 74: TRISC = 0xBE;
  4397  0085BC  0EBE               	movlw	190
  4398  0085BE  6E94               	movwf	3988,c	;volatile
  4399                           
  4400                           ;pin_manager.c: 75: TRISD = 0xE6;
  4401  0085C0  0EE6               	movlw	230
  4402  0085C2  6E95               	movwf	3989,c	;volatile
  4403                           
  4404                           ;pin_manager.c: 80: ANSELD = 0xE4;
  4405  0085C4  0EE4               	movlw	228
  4406  0085C6  010F               	movlb	15	; () banked
  4407  0085C8  6F3B               	movwf	59,b	;volatile
  4408                           
  4409                           ;pin_manager.c: 81: ANSELC = 0x38;
  4410  0085CA  0E38               	movlw	56
  4411  0085CC  6F3A               	movwf	58,b	;volatile
  4412                           
  4413                           ;pin_manager.c: 82: ANSELB = 0x28;
  4414  0085CE  0E28               	movlw	40
  4415  0085D0  6F39               	movwf	57,b	;volatile
  4416                           
  4417                           ;pin_manager.c: 83: ANSELE = 0x07;
  4418  0085D2  0E07               	movlw	7
  4419  0085D4  6F3C               	movwf	60,b	;volatile
  4420                           
  4421                           ;pin_manager.c: 84: ANSELA = 0x2F;
  4422  0085D6  0E2F               	movlw	47
  4423  0085D8  6F38               	movwf	56,b	;volatile
  4424                           
  4425                           ;pin_manager.c: 89: WPUB = 0x00;
  4426  0085DA  0E00               	movlw	0
  4427  0085DC  6E61               	movwf	3937,c	;volatile
  4428                           
  4429                           ; BSR set to: 15
  4430                           ;pin_manager.c: 90: INTCON2bits.nRBPU = 1;
  4431  0085DE  8EF1               	bsf	intcon2,7,c	;volatile
  4432                           
  4433                           ; BSR set to: 15
  4434                           ;pin_manager.c: 98: IOCBbits.IOCB4 = 1;
  4435  0085E0  8862               	bsf	3938,4,c	;volatile
  4436                           
  4437                           ; BSR set to: 15
  4438                           ;pin_manager.c: 103: IOCB4_SetInterruptHandler(IOCB4_DefaultInterruptHandler);
  4439  0085E2  0EA8               	movlw	low _IOCB4_DefaultInterruptHandler
  4440  0085E4  0100               	movlb	0	; () banked
  4441  0085E6  6F60               	movwf	IOCB4_SetInterruptHandler@InterruptHandler& (0+255),b
  4442  0085E8  0E95               	movlw	high _IOCB4_DefaultInterruptHandler
  4443  0085EA  6F61               	movwf	(IOCB4_SetInterruptHandler@InterruptHandler+1)& (0+255),b
  4444  0085EC  EC37  F04A         	call	_IOCB4_SetInterruptHandler	;wreg free
  4445                           
  4446                           ;pin_manager.c: 106: INTCONbits.RBIE = 1;
  4447  0085F0  86F2               	bsf	intcon,3,c	;volatile
  4448  0085F2  0012               	return		;funcret
  4449  0085F4                     __end_of_PIN_MANAGER_Initialize:
  4450                           	opt stack 0
  4451                           tblptru	equ	0xFF8
  4452                           tblptrh	equ	0xFF7
  4453                           tblptrl	equ	0xFF6
  4454                           tablat	equ	0xFF5
  4455                           intcon	equ	0xFF2
  4456                           intcon2	equ	0xFF1
  4457                           postinc0	equ	0xFEE
  4458                           wreg	equ	0xFE8
  4459                           postdec2	equ	0xFDD
  4460                           fsr2h	equ	0xFDA
  4461                           fsr2l	equ	0xFD9
  4462                           status	equ	0xFD8
  4463                           
  4464 ;; *************** function _OSCILLATOR_Initialize *****************
  4465 ;; Defined at:
  4466 ;;		line 66 in file "mcc_generated_files/mcc.c"
  4467 ;; Parameters:    Size  Location     Type
  4468 ;;		None
  4469 ;; Auto vars:     Size  Location     Type
  4470 ;;		None
  4471 ;; Return value:  Size  Location     Type
  4472 ;;                  1    wreg      void 
  4473 ;; Registers used:
  4474 ;;		wreg, status,2
  4475 ;; Tracked objects:
  4476 ;;		On entry : 0/0
  4477 ;;		On exit  : 0/0
  4478 ;;		Unchanged: 0/0
  4479 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4480 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4481 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4482 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4483 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4484 ;;Total ram usage:        0 bytes
  4485 ;; Hardware stack levels used:    1
  4486 ;; Hardware stack levels required when called:    7
  4487 ;; This function calls:
  4488 ;;		Nothing
  4489 ;; This function is called by:
  4490 ;;		_SYSTEM_Initialize
  4491 ;; This function uses a non-reentrant model
  4492 ;;
  4493                           
  4494                           	psect	text10
  4495  009430                     __ptext10:
  4496                           	opt stack 0
  4497  009430                     _OSCILLATOR_Initialize:
  4498                           	opt stack 22
  4499                           
  4500                           ;mcc.c: 69: OSCCON = 0x70;
  4501                           
  4502                           ;incstack = 0
  4503  009430  0E70               	movlw	112
  4504  009432  6ED3               	movwf	4051,c	;volatile
  4505                           
  4506                           ;mcc.c: 71: OSCCON2 = 0x04;
  4507  009434  0E04               	movlw	4
  4508  009436  6ED2               	movwf	4050,c	;volatile
  4509                           
  4510                           ;mcc.c: 73: OSCTUNE = 0x00;
  4511  009438  0E00               	movlw	0
  4512  00943A  6E9B               	movwf	3995,c	;volatile
  4513  00943C  0012               	return		;funcret
  4514  00943E                     __end_of_OSCILLATOR_Initialize:
  4515                           	opt stack 0
  4516                           tblptru	equ	0xFF8
  4517                           tblptrh	equ	0xFF7
  4518                           tblptrl	equ	0xFF6
  4519                           tablat	equ	0xFF5
  4520                           intcon	equ	0xFF2
  4521                           intcon2	equ	0xFF1
  4522                           postinc0	equ	0xFEE
  4523                           wreg	equ	0xFE8
  4524                           postdec2	equ	0xFDD
  4525                           fsr2h	equ	0xFDA
  4526                           fsr2l	equ	0xFD9
  4527                           status	equ	0xFD8
  4528                           
  4529 ;; *************** function _LORAWAN_PlatformInit *****************
  4530 ;; Defined at:
  4531 ;;		line 73 in file "mcc_generated_files/LoRaWAN/lorawan_init.c"
  4532 ;; Parameters:    Size  Location     Type
  4533 ;;		None
  4534 ;; Auto vars:     Size  Location     Type
  4535 ;;		None
  4536 ;; Return value:  Size  Location     Type
  4537 ;;                  1    wreg      void 
  4538 ;; Registers used:
  4539 ;;		wreg, status,2, status,0, cstack
  4540 ;; Tracked objects:
  4541 ;;		On entry : 0/0
  4542 ;;		On exit  : 0/0
  4543 ;;		Unchanged: 0/0
  4544 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4545 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4546 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4547 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4548 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4549 ;;Total ram usage:        0 bytes
  4550 ;; Hardware stack levels used:    1
  4551 ;; Hardware stack levels required when called:    9
  4552 ;; This function calls:
  4553 ;;		_DIO0_ISR_Lora_Init
  4554 ;;		_DIO1_ISR_Lora_Init
  4555 ;;		_DIO2_ISR_Lora_Init
  4556 ;;		_DIO3_ISR_Lora_Init
  4557 ;;		_DIO4_ISR_Lora_Init
  4558 ;;		_DIO5_ISR_Lora_Init
  4559 ;;		_SystemTimerInit
  4560 ;;		_TMR_ISR_Lora_Init
  4561 ;; This function is called by:
  4562 ;;		_SYSTEM_Initialize
  4563 ;; This function uses a non-reentrant model
  4564 ;;
  4565                           
  4566                           	psect	text11
  4567  0090B4                     __ptext11:
  4568                           	opt stack 0
  4569  0090B4                     _LORAWAN_PlatformInit:
  4570                           	opt stack 20
  4571                           
  4572                           ;lorawan_init.c: 75: TMR_ISR_Lora_Init();
  4573                           
  4574                           ;incstack = 0
  4575  0090B4  ECE9  F049         	call	_TMR_ISR_Lora_Init	;wreg free
  4576                           
  4577                           ;lorawan_init.c: 76: DIO0_ISR_Lora_Init();
  4578  0090B8  EC01  F04A         	call	_DIO0_ISR_Lora_Init	;wreg free
  4579                           
  4580                           ;lorawan_init.c: 77: DIO1_ISR_Lora_Init();
  4581  0090BC  ECF9  F049         	call	_DIO1_ISR_Lora_Init	;wreg free
  4582                           
  4583                           ;lorawan_init.c: 78: DIO2_ISR_Lora_Init();
  4584  0090C0  ECF1  F049         	call	_DIO2_ISR_Lora_Init	;wreg free
  4585                           
  4586                           ;lorawan_init.c: 79: DIO3_ISR_Lora_Init();
  4587  0090C4  ECD0  F04A         	call	_DIO3_ISR_Lora_Init	;wreg free
  4588                           
  4589                           ;lorawan_init.c: 80: DIO4_ISR_Lora_Init();
  4590  0090C8  ECCF  F04A         	call	_DIO4_ISR_Lora_Init	;wreg free
  4591                           
  4592                           ;lorawan_init.c: 81: DIO5_ISR_Lora_Init();
  4593  0090CC  ECCE  F04A         	call	_DIO5_ISR_Lora_Init	;wreg free
  4594                           
  4595                           ;lorawan_init.c: 82: SystemTimerInit();
  4596  0090D0  EC9B  F04A         	call	_SystemTimerInit	;wreg free
  4597  0090D4  0012               	return		;funcret
  4598  0090D6                     __end_of_LORAWAN_PlatformInit:
  4599                           	opt stack 0
  4600                           tblptru	equ	0xFF8
  4601                           tblptrh	equ	0xFF7
  4602                           tblptrl	equ	0xFF6
  4603                           tablat	equ	0xFF5
  4604                           intcon	equ	0xFF2
  4605                           intcon2	equ	0xFF1
  4606                           postinc0	equ	0xFEE
  4607                           wreg	equ	0xFE8
  4608                           postdec2	equ	0xFDD
  4609                           fsr2h	equ	0xFDA
  4610                           fsr2l	equ	0xFD9
  4611                           status	equ	0xFD8
  4612                           
  4613 ;; *************** function _TMR_ISR_Lora_Init *****************
  4614 ;; Defined at:
  4615 ;;		line 54 in file "mcc_generated_files/LoRaWAN/tmr_lora_addons.c"
  4616 ;; Parameters:    Size  Location     Type
  4617 ;;		None
  4618 ;; Auto vars:     Size  Location     Type
  4619 ;;		None
  4620 ;; Return value:  Size  Location     Type
  4621 ;;                  1    wreg      void 
  4622 ;; Registers used:
  4623 ;;		wreg, status,2, status,0, cstack
  4624 ;; Tracked objects:
  4625 ;;		On entry : 0/0
  4626 ;;		On exit  : 0/0
  4627 ;;		Unchanged: 0/0
  4628 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4629 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4630 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4631 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4632 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4633 ;;Total ram usage:        0 bytes
  4634 ;; Hardware stack levels used:    1
  4635 ;; Hardware stack levels required when called:    8
  4636 ;; This function calls:
  4637 ;;		_TMR1_SetInterruptHandler
  4638 ;; This function is called by:
  4639 ;;		_LORAWAN_PlatformInit
  4640 ;; This function uses a non-reentrant model
  4641 ;;
  4642                           
  4643                           	psect	text12
  4644  0093D2                     __ptext12:
  4645                           	opt stack 0
  4646  0093D2                     _TMR_ISR_Lora_Init:
  4647                           	opt stack 20
  4648                           
  4649                           ;tmr_lora_addons.c: 56: TMR1_SetInterruptHandler(TMR_ISR_lora);
  4650                           
  4651                           ;incstack = 0
  4652  0093D2  0EF2               	movlw	low _TMR_ISR_lora
  4653  0093D4  0100               	movlb	0	; () banked
  4654  0093D6  6F60               	movwf	TMR1_SetInterruptHandler@InterruptHandler& (0+255),b
  4655  0093D8  0E84               	movlw	high _TMR_ISR_lora
  4656  0093DA  6F61               	movwf	(TMR1_SetInterruptHandler@InterruptHandler+1)& (0+255),b
  4657  0093DC  EC32  F04A         	call	_TMR1_SetInterruptHandler	;wreg free
  4658  0093E0  0012               	return		;funcret
  4659  0093E2                     __end_of_TMR_ISR_Lora_Init:
  4660                           	opt stack 0
  4661                           tblptru	equ	0xFF8
  4662                           tblptrh	equ	0xFF7
  4663                           tblptrl	equ	0xFF6
  4664                           tablat	equ	0xFF5
  4665                           intcon	equ	0xFF2
  4666                           intcon2	equ	0xFF1
  4667                           postinc0	equ	0xFEE
  4668                           wreg	equ	0xFE8
  4669                           postdec2	equ	0xFDD
  4670                           fsr2h	equ	0xFDA
  4671                           fsr2l	equ	0xFD9
  4672                           status	equ	0xFD8
  4673                           
  4674 ;; *************** function _TMR1_SetInterruptHandler *****************
  4675 ;; Defined at:
  4676 ;;		line 179 in file "mcc_generated_files/tmr1.c"
  4677 ;; Parameters:    Size  Location     Type
  4678 ;;  InterruptHan    2    0[BANK0 ] PTR FTN()void 
  4679 ;;		 -> TMR1_DefaultInterruptHandler(1), TMR_ISR_lora(1), 
  4680 ;; Auto vars:     Size  Location     Type
  4681 ;;		None
  4682 ;; Return value:  Size  Location     Type
  4683 ;;                  1    wreg      void 
  4684 ;; Registers used:
  4685 ;;		wreg, status,2, status,0
  4686 ;; Tracked objects:
  4687 ;;		On entry : 0/0
  4688 ;;		On exit  : 0/0
  4689 ;;		Unchanged: 0/0
  4690 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4691 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4692 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4693 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4694 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4695 ;;Total ram usage:        2 bytes
  4696 ;; Hardware stack levels used:    1
  4697 ;; Hardware stack levels required when called:    7
  4698 ;; This function calls:
  4699 ;;		Nothing
  4700 ;; This function is called by:
  4701 ;;		_TMR_ISR_Lora_Init
  4702 ;;		_TMR1_Initialize
  4703 ;; This function uses a non-reentrant model
  4704 ;;
  4705                           
  4706                           	psect	text13
  4707  009464                     __ptext13:
  4708                           	opt stack 0
  4709  009464                     _TMR1_SetInterruptHandler:
  4710                           	opt stack 21
  4711                           
  4712                           ;tmr1.c: 180: TMR1_InterruptHandler = InterruptHandler;
  4713                           
  4714                           ;incstack = 0
  4715  009464  C060  F3E9         	movff	TMR1_SetInterruptHandler@InterruptHandler,_TMR1_InterruptHandler
  4716  009468  C061  F3EA         	movff	TMR1_SetInterruptHandler@InterruptHandler+1,_TMR1_InterruptHandler+1
  4717  00946C  0012               	return		;funcret
  4718  00946E                     __end_of_TMR1_SetInterruptHandler:
  4719                           	opt stack 0
  4720                           tblptru	equ	0xFF8
  4721                           tblptrh	equ	0xFF7
  4722                           tblptrl	equ	0xFF6
  4723                           tablat	equ	0xFF5
  4724                           intcon	equ	0xFF2
  4725                           intcon2	equ	0xFF1
  4726                           postinc0	equ	0xFEE
  4727                           wreg	equ	0xFE8
  4728                           postdec2	equ	0xFDD
  4729                           fsr2h	equ	0xFDA
  4730                           fsr2l	equ	0xFD9
  4731                           status	equ	0xFD8
  4732                           
  4733 ;; *************** function _SystemTimerInit *****************
  4734 ;; Defined at:
  4735 ;;		line 135 in file "mcc_generated_files/LoRaWAN/sw_timer.c"
  4736 ;; Parameters:    Size  Location     Type
  4737 ;;		None
  4738 ;; Auto vars:     Size  Location     Type
  4739 ;;		None
  4740 ;; Return value:  Size  Location     Type
  4741 ;;                  1    wreg      void 
  4742 ;; Registers used:
  4743 ;;		wreg, status,2
  4744 ;; Tracked objects:
  4745 ;;		On entry : 0/0
  4746 ;;		On exit  : 0/0
  4747 ;;		Unchanged: 0/0
  4748 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4749 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4750 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4751 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4752 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4753 ;;Total ram usage:        0 bytes
  4754 ;; Hardware stack levels used:    1
  4755 ;; Hardware stack levels required when called:    7
  4756 ;; This function calls:
  4757 ;;		Nothing
  4758 ;; This function is called by:
  4759 ;;		_LORAWAN_PlatformInit
  4760 ;; This function uses a non-reentrant model
  4761 ;;
  4762                           
  4763                           	psect	text14
  4764  009536                     __ptext14:
  4765                           	opt stack 0
  4766  009536                     _SystemTimerInit:
  4767                           	opt stack 21
  4768                           
  4769                           ;sw_timer.c: 137: allocatedTimers = 0;
  4770                           
  4771                           ;incstack = 0
  4772  009536  0E00               	movlw	0
  4773  009538  0101               	movlb	1	; () banked
  4774  00953A  6F52               	movwf	_allocatedTimers& (0+255),b	;volatile
  4775                           
  4776                           ; BSR set to: 1
  4777  00953C  0012               	return		;funcret
  4778  00953E                     __end_of_SystemTimerInit:
  4779                           	opt stack 0
  4780                           tblptru	equ	0xFF8
  4781                           tblptrh	equ	0xFF7
  4782                           tblptrl	equ	0xFF6
  4783                           tablat	equ	0xFF5
  4784                           intcon	equ	0xFF2
  4785                           intcon2	equ	0xFF1
  4786                           postinc0	equ	0xFEE
  4787                           wreg	equ	0xFE8
  4788                           postdec2	equ	0xFDD
  4789                           fsr2h	equ	0xFDA
  4790                           fsr2l	equ	0xFD9
  4791                           status	equ	0xFD8
  4792                           
  4793 ;; *************** function _DIO5_ISR_Lora_Init *****************
  4794 ;; Defined at:
  4795 ;;		line 67 in file "mcc_generated_files/LoRaWAN/lorawan_init.c"
  4796 ;; Parameters:    Size  Location     Type
  4797 ;;		None
  4798 ;; Auto vars:     Size  Location     Type
  4799 ;;		None
  4800 ;; Return value:  Size  Location     Type
  4801 ;;                  1    wreg      void 
  4802 ;; Registers used:
  4803 ;;		None
  4804 ;; Tracked objects:
  4805 ;;		On entry : 0/0
  4806 ;;		On exit  : 0/0
  4807 ;;		Unchanged: 0/0
  4808 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4809 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4810 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4811 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4812 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4813 ;;Total ram usage:        0 bytes
  4814 ;; Hardware stack levels used:    1
  4815 ;; Hardware stack levels required when called:    7
  4816 ;; This function calls:
  4817 ;;		Nothing
  4818 ;; This function is called by:
  4819 ;;		_LORAWAN_PlatformInit
  4820 ;; This function uses a non-reentrant model
  4821 ;;
  4822                           
  4823                           	psect	text15
  4824  00959C                     __ptext15:
  4825                           	opt stack 0
  4826  00959C                     _DIO5_ISR_Lora_Init:
  4827                           	opt stack 21
  4828                           
  4829                           ; BSR set to: 1
  4830                           ;incstack = 0
  4831  00959C  0012               	return		;funcret
  4832  00959E                     __end_of_DIO5_ISR_Lora_Init:
  4833                           	opt stack 0
  4834                           tblptru	equ	0xFF8
  4835                           tblptrh	equ	0xFF7
  4836                           tblptrl	equ	0xFF6
  4837                           tablat	equ	0xFF5
  4838                           intcon	equ	0xFF2
  4839                           intcon2	equ	0xFF1
  4840                           postinc0	equ	0xFEE
  4841                           wreg	equ	0xFE8
  4842                           postdec2	equ	0xFDD
  4843                           fsr2h	equ	0xFDA
  4844                           fsr2l	equ	0xFD9
  4845                           status	equ	0xFD8
  4846                           
  4847 ;; *************** function _DIO4_ISR_Lora_Init *****************
  4848 ;; Defined at:
  4849 ;;		line 63 in file "mcc_generated_files/LoRaWAN/lorawan_init.c"
  4850 ;; Parameters:    Size  Location     Type
  4851 ;;		None
  4852 ;; Auto vars:     Size  Location     Type
  4853 ;;		None
  4854 ;; Return value:  Size  Location     Type
  4855 ;;                  1    wreg      void 
  4856 ;; Registers used:
  4857 ;;		None
  4858 ;; Tracked objects:
  4859 ;;		On entry : 0/0
  4860 ;;		On exit  : 0/0
  4861 ;;		Unchanged: 0/0
  4862 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4863 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4864 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4865 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4866 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4867 ;;Total ram usage:        0 bytes
  4868 ;; Hardware stack levels used:    1
  4869 ;; Hardware stack levels required when called:    7
  4870 ;; This function calls:
  4871 ;;		Nothing
  4872 ;; This function is called by:
  4873 ;;		_LORAWAN_PlatformInit
  4874 ;; This function uses a non-reentrant model
  4875 ;;
  4876                           
  4877                           	psect	text16
  4878  00959E                     __ptext16:
  4879                           	opt stack 0
  4880  00959E                     _DIO4_ISR_Lora_Init:
  4881                           	opt stack 21
  4882                           
  4883                           ;incstack = 0
  4884  00959E  0012               	return		;funcret
  4885  0095A0                     __end_of_DIO4_ISR_Lora_Init:
  4886                           	opt stack 0
  4887                           tblptru	equ	0xFF8
  4888                           tblptrh	equ	0xFF7
  4889                           tblptrl	equ	0xFF6
  4890                           tablat	equ	0xFF5
  4891                           intcon	equ	0xFF2
  4892                           intcon2	equ	0xFF1
  4893                           postinc0	equ	0xFEE
  4894                           wreg	equ	0xFE8
  4895                           postdec2	equ	0xFDD
  4896                           fsr2h	equ	0xFDA
  4897                           fsr2l	equ	0xFD9
  4898                           status	equ	0xFD8
  4899                           
  4900 ;; *************** function _DIO3_ISR_Lora_Init *****************
  4901 ;; Defined at:
  4902 ;;		line 59 in file "mcc_generated_files/LoRaWAN/lorawan_init.c"
  4903 ;; Parameters:    Size  Location     Type
  4904 ;;		None
  4905 ;; Auto vars:     Size  Location     Type
  4906 ;;		None
  4907 ;; Return value:  Size  Location     Type
  4908 ;;                  1    wreg      void 
  4909 ;; Registers used:
  4910 ;;		None
  4911 ;; Tracked objects:
  4912 ;;		On entry : 0/0
  4913 ;;		On exit  : 0/0
  4914 ;;		Unchanged: 0/0
  4915 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4916 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4917 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4918 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4919 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4920 ;;Total ram usage:        0 bytes
  4921 ;; Hardware stack levels used:    1
  4922 ;; Hardware stack levels required when called:    7
  4923 ;; This function calls:
  4924 ;;		Nothing
  4925 ;; This function is called by:
  4926 ;;		_LORAWAN_PlatformInit
  4927 ;; This function uses a non-reentrant model
  4928 ;;
  4929                           
  4930                           	psect	text17
  4931  0095A0                     __ptext17:
  4932                           	opt stack 0
  4933  0095A0                     _DIO3_ISR_Lora_Init:
  4934                           	opt stack 21
  4935                           
  4936                           ;incstack = 0
  4937  0095A0  0012               	return		;funcret
  4938  0095A2                     __end_of_DIO3_ISR_Lora_Init:
  4939                           	opt stack 0
  4940                           tblptru	equ	0xFF8
  4941                           tblptrh	equ	0xFF7
  4942                           tblptrl	equ	0xFF6
  4943                           tablat	equ	0xFF5
  4944                           intcon	equ	0xFF2
  4945                           intcon2	equ	0xFF1
  4946                           postinc0	equ	0xFEE
  4947                           wreg	equ	0xFE8
  4948                           postdec2	equ	0xFDD
  4949                           fsr2h	equ	0xFDA
  4950                           fsr2l	equ	0xFD9
  4951                           status	equ	0xFD8
  4952                           
  4953 ;; *************** function _DIO2_ISR_Lora_Init *****************
  4954 ;; Defined at:
  4955 ;;		line 54 in file "mcc_generated_files/LoRaWAN/lorawan_init.c"
  4956 ;; Parameters:    Size  Location     Type
  4957 ;;		None
  4958 ;; Auto vars:     Size  Location     Type
  4959 ;;		None
  4960 ;; Return value:  Size  Location     Type
  4961 ;;                  1    wreg      void 
  4962 ;; Registers used:
  4963 ;;		wreg, status,2, status,0, cstack
  4964 ;; Tracked objects:
  4965 ;;		On entry : 0/0
  4966 ;;		On exit  : 0/0
  4967 ;;		Unchanged: 0/0
  4968 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4969 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4970 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4971 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4972 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4973 ;;Total ram usage:        0 bytes
  4974 ;; Hardware stack levels used:    1
  4975 ;; Hardware stack levels required when called:    8
  4976 ;; This function calls:
  4977 ;;		_IOCB4_SetInterruptHandler
  4978 ;; This function is called by:
  4979 ;;		_LORAWAN_PlatformInit
  4980 ;; This function uses a non-reentrant model
  4981 ;;
  4982                           
  4983                           	psect	text18
  4984  0093E2                     __ptext18:
  4985                           	opt stack 0
  4986  0093E2                     _DIO2_ISR_Lora_Init:
  4987                           	opt stack 20
  4988                           
  4989                           ;lorawan_init.c: 56: IOCB4_SetInterruptHandler(DIO2_ISR_Lora);
  4990                           
  4991                           ;incstack = 0
  4992  0093E2  0E66               	movlw	low _DIO2_ISR_Lora
  4993  0093E4  0100               	movlb	0	; () banked
  4994  0093E6  6F60               	movwf	IOCB4_SetInterruptHandler@InterruptHandler& (0+255),b
  4995  0093E8  0E95               	movlw	high _DIO2_ISR_Lora
  4996  0093EA  6F61               	movwf	(IOCB4_SetInterruptHandler@InterruptHandler+1)& (0+255),b
  4997  0093EC  EC37  F04A         	call	_IOCB4_SetInterruptHandler	;wreg free
  4998  0093F0  0012               	return		;funcret
  4999  0093F2                     __end_of_DIO2_ISR_Lora_Init:
  5000                           	opt stack 0
  5001                           tblptru	equ	0xFF8
  5002                           tblptrh	equ	0xFF7
  5003                           tblptrl	equ	0xFF6
  5004                           tablat	equ	0xFF5
  5005                           intcon	equ	0xFF2
  5006                           intcon2	equ	0xFF1
  5007                           postinc0	equ	0xFEE
  5008                           wreg	equ	0xFE8
  5009                           postdec2	equ	0xFDD
  5010                           fsr2h	equ	0xFDA
  5011                           fsr2l	equ	0xFD9
  5012                           status	equ	0xFD8
  5013                           
  5014 ;; *************** function _IOCB4_SetInterruptHandler *****************
  5015 ;; Defined at:
  5016 ;;		line 138 in file "mcc_generated_files/pin_manager.c"
  5017 ;; Parameters:    Size  Location     Type
  5018 ;;  InterruptHan    2    0[BANK0 ] PTR FTN()void 
  5019 ;;		 -> IOCB4_DefaultInterruptHandler(1), DIO2_ISR_Lora(1), 
  5020 ;; Auto vars:     Size  Location     Type
  5021 ;;		None
  5022 ;; Return value:  Size  Location     Type
  5023 ;;                  1    wreg      void 
  5024 ;; Registers used:
  5025 ;;		wreg, status,2, status,0
  5026 ;; Tracked objects:
  5027 ;;		On entry : 0/0
  5028 ;;		On exit  : 0/0
  5029 ;;		Unchanged: 0/0
  5030 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5031 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5032 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5033 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5034 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5035 ;;Total ram usage:        2 bytes
  5036 ;; Hardware stack levels used:    1
  5037 ;; Hardware stack levels required when called:    7
  5038 ;; This function calls:
  5039 ;;		Nothing
  5040 ;; This function is called by:
  5041 ;;		_DIO2_ISR_Lora_Init
  5042 ;;		_PIN_MANAGER_Initialize
  5043 ;; This function uses a non-reentrant model
  5044 ;;
  5045                           
  5046                           	psect	text19
  5047  00946E                     __ptext19:
  5048                           	opt stack 0
  5049  00946E                     _IOCB4_SetInterruptHandler:
  5050                           	opt stack 21
  5051                           
  5052                           ;pin_manager.c: 139: IOCB4_InterruptHandler = InterruptHandler;
  5053                           
  5054                           ;incstack = 0
  5055  00946E  C060  F3F1         	movff	IOCB4_SetInterruptHandler@InterruptHandler,_IOCB4_InterruptHandler
  5056  009472  C061  F3F2         	movff	IOCB4_SetInterruptHandler@InterruptHandler+1,_IOCB4_InterruptHandler+1
  5057  009476  0012               	return		;funcret
  5058  009478                     __end_of_IOCB4_SetInterruptHandler:
  5059                           	opt stack 0
  5060                           tblptru	equ	0xFF8
  5061                           tblptrh	equ	0xFF7
  5062                           tblptrl	equ	0xFF6
  5063                           tablat	equ	0xFF5
  5064                           intcon	equ	0xFF2
  5065                           intcon2	equ	0xFF1
  5066                           postinc0	equ	0xFEE
  5067                           wreg	equ	0xFE8
  5068                           postdec2	equ	0xFDD
  5069                           fsr2h	equ	0xFDA
  5070                           fsr2l	equ	0xFD9
  5071                           status	equ	0xFD8
  5072                           
  5073 ;; *************** function _DIO1_ISR_Lora_Init *****************
  5074 ;; Defined at:
  5075 ;;		line 49 in file "mcc_generated_files/LoRaWAN/lorawan_init.c"
  5076 ;; Parameters:    Size  Location     Type
  5077 ;;		None
  5078 ;; Auto vars:     Size  Location     Type
  5079 ;;		None
  5080 ;; Return value:  Size  Location     Type
  5081 ;;                  1    wreg      void 
  5082 ;; Registers used:
  5083 ;;		wreg, status,2, status,0, cstack
  5084 ;; Tracked objects:
  5085 ;;		On entry : 0/0
  5086 ;;		On exit  : 0/0
  5087 ;;		Unchanged: 0/0
  5088 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5089 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5090 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5091 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5092 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5093 ;;Total ram usage:        0 bytes
  5094 ;; Hardware stack levels used:    1
  5095 ;; Hardware stack levels required when called:    8
  5096 ;; This function calls:
  5097 ;;		_INT2_SetInterruptHandler
  5098 ;; This function is called by:
  5099 ;;		_LORAWAN_PlatformInit
  5100 ;; This function uses a non-reentrant model
  5101 ;;
  5102                           
  5103                           	psect	text20
  5104  0093F2                     __ptext20:
  5105                           	opt stack 0
  5106  0093F2                     _DIO1_ISR_Lora_Init:
  5107                           	opt stack 20
  5108                           
  5109                           ;lorawan_init.c: 51: INT2_SetInterruptHandler(DIO1_ISR_Lora);
  5110                           
  5111                           ;incstack = 0
  5112  0093F2  0E6C               	movlw	low _DIO1_ISR_Lora
  5113  0093F4  0100               	movlb	0	; () banked
  5114  0093F6  6F60               	movwf	INT2_SetInterruptHandler@InterruptHandler& (0+255),b
  5115  0093F8  0E95               	movlw	high _DIO1_ISR_Lora
  5116  0093FA  6F61               	movwf	(INT2_SetInterruptHandler@InterruptHandler+1)& (0+255),b
  5117  0093FC  EC3C  F04A         	call	_INT2_SetInterruptHandler	;wreg free
  5118  009400  0012               	return		;funcret
  5119  009402                     __end_of_DIO1_ISR_Lora_Init:
  5120                           	opt stack 0
  5121                           tblptru	equ	0xFF8
  5122                           tblptrh	equ	0xFF7
  5123                           tblptrl	equ	0xFF6
  5124                           tablat	equ	0xFF5
  5125                           intcon	equ	0xFF2
  5126                           intcon2	equ	0xFF1
  5127                           postinc0	equ	0xFEE
  5128                           wreg	equ	0xFE8
  5129                           postdec2	equ	0xFDD
  5130                           fsr2h	equ	0xFDA
  5131                           fsr2l	equ	0xFD9
  5132                           status	equ	0xFD8
  5133                           
  5134 ;; *************** function _DIO0_ISR_Lora_Init *****************
  5135 ;; Defined at:
  5136 ;;		line 44 in file "mcc_generated_files/LoRaWAN/lorawan_init.c"
  5137 ;; Parameters:    Size  Location     Type
  5138 ;;		None
  5139 ;; Auto vars:     Size  Location     Type
  5140 ;;		None
  5141 ;; Return value:  Size  Location     Type
  5142 ;;                  1    wreg      void 
  5143 ;; Registers used:
  5144 ;;		wreg, status,2, status,0, cstack
  5145 ;; Tracked objects:
  5146 ;;		On entry : 0/0
  5147 ;;		On exit  : 0/0
  5148 ;;		Unchanged: 0/0
  5149 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5150 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5151 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5152 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5153 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5154 ;;Total ram usage:        0 bytes
  5155 ;; Hardware stack levels used:    1
  5156 ;; Hardware stack levels required when called:    8
  5157 ;; This function calls:
  5158 ;;		_INT1_SetInterruptHandler
  5159 ;; This function is called by:
  5160 ;;		_LORAWAN_PlatformInit
  5161 ;; This function uses a non-reentrant model
  5162 ;;
  5163                           
  5164                           	psect	text21
  5165  009402                     __ptext21:
  5166                           	opt stack 0
  5167  009402                     _DIO0_ISR_Lora_Init:
  5168                           	opt stack 20
  5169                           
  5170                           ;lorawan_init.c: 46: INT1_SetInterruptHandler(DIO0_ISR_Lora);
  5171                           
  5172                           ;incstack = 0
  5173  009402  0E72               	movlw	low _DIO0_ISR_Lora
  5174  009404  0100               	movlb	0	; () banked
  5175  009406  6F60               	movwf	INT1_SetInterruptHandler@InterruptHandler& (0+255),b
  5176  009408  0E95               	movlw	high _DIO0_ISR_Lora
  5177  00940A  6F61               	movwf	(INT1_SetInterruptHandler@InterruptHandler+1)& (0+255),b
  5178  00940C  EC41  F04A         	call	_INT1_SetInterruptHandler	;wreg free
  5179  009410  0012               	return		;funcret
  5180  009412                     __end_of_DIO0_ISR_Lora_Init:
  5181                           	opt stack 0
  5182                           tblptru	equ	0xFF8
  5183                           tblptrh	equ	0xFF7
  5184                           tblptrl	equ	0xFF6
  5185                           tablat	equ	0xFF5
  5186                           intcon	equ	0xFF2
  5187                           intcon2	equ	0xFF1
  5188                           postinc0	equ	0xFEE
  5189                           wreg	equ	0xFE8
  5190                           postdec2	equ	0xFDD
  5191                           fsr2h	equ	0xFDA
  5192                           fsr2l	equ	0xFD9
  5193                           status	equ	0xFD8
  5194                           
  5195 ;; *************** function _INTERRUPT_Initialize *****************
  5196 ;; Defined at:
  5197 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
  5198 ;; Parameters:    Size  Location     Type
  5199 ;;		None
  5200 ;; Auto vars:     Size  Location     Type
  5201 ;;		None
  5202 ;; Return value:  Size  Location     Type
  5203 ;;                  1    wreg      void 
  5204 ;; Registers used:
  5205 ;;		None
  5206 ;; Tracked objects:
  5207 ;;		On entry : 0/0
  5208 ;;		On exit  : 0/0
  5209 ;;		Unchanged: 0/0
  5210 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5211 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5212 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5213 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5214 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5215 ;;Total ram usage:        0 bytes
  5216 ;; Hardware stack levels used:    1
  5217 ;; Hardware stack levels required when called:    7
  5218 ;; This function calls:
  5219 ;;		Nothing
  5220 ;; This function is called by:
  5221 ;;		_SYSTEM_Initialize
  5222 ;; This function uses a non-reentrant model
  5223 ;;
  5224                           
  5225                           	psect	text22
  5226  009588                     __ptext22:
  5227                           	opt stack 0
  5228  009588                     _INTERRUPT_Initialize:
  5229                           	opt stack 22
  5230                           
  5231                           ;interrupt_manager.c: 55: RCONbits.IPEN = 0;
  5232                           
  5233                           ;incstack = 0
  5234  009588  9ED0               	bcf	4048,7,c	;volatile
  5235  00958A  0012               	return		;funcret
  5236  00958C                     __end_of_INTERRUPT_Initialize:
  5237                           	opt stack 0
  5238                           tblptru	equ	0xFF8
  5239                           tblptrh	equ	0xFF7
  5240                           tblptrl	equ	0xFF6
  5241                           tablat	equ	0xFF5
  5242                           intcon	equ	0xFF2
  5243                           intcon2	equ	0xFF1
  5244                           postinc0	equ	0xFEE
  5245                           wreg	equ	0xFE8
  5246                           postdec2	equ	0xFDD
  5247                           fsr2h	equ	0xFDA
  5248                           fsr2l	equ	0xFD9
  5249                           status	equ	0xFD8
  5250                           
  5251 ;; *************** function _EXT_INT_Initialize *****************
  5252 ;; Defined at:
  5253 ;;		line 86 in file "mcc_generated_files/ext_int.c"
  5254 ;; Parameters:    Size  Location     Type
  5255 ;;		None
  5256 ;; Auto vars:     Size  Location     Type
  5257 ;;		None
  5258 ;; Return value:  Size  Location     Type
  5259 ;;                  1    wreg      void 
  5260 ;; Registers used:
  5261 ;;		wreg, status,2, status,0, cstack
  5262 ;; Tracked objects:
  5263 ;;		On entry : 0/0
  5264 ;;		On exit  : 0/0
  5265 ;;		Unchanged: 0/0
  5266 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5267 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5268 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5269 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5270 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5271 ;;Total ram usage:        0 bytes
  5272 ;; Hardware stack levels used:    1
  5273 ;; Hardware stack levels required when called:    8
  5274 ;; This function calls:
  5275 ;;		_INT1_SetInterruptHandler
  5276 ;;		_INT2_SetInterruptHandler
  5277 ;; This function is called by:
  5278 ;;		_SYSTEM_Initialize
  5279 ;; This function uses a non-reentrant model
  5280 ;;
  5281                           
  5282                           	psect	text23
  5283  008EAE                     __ptext23:
  5284                           	opt stack 0
  5285  008EAE                     _EXT_INT_Initialize:
  5286                           	opt stack 21
  5287                           
  5288                           ;ext_int.c: 91: (INTCON3bits.INT1IF = 0);
  5289                           
  5290                           ;incstack = 0
  5291  008EAE  90F0               	bcf	intcon3,0,c	;volatile
  5292                           
  5293                           ;ext_int.c: 92: (INTCON2bits.INTEDG1 = 1);
  5294  008EB0  8AF1               	bsf	intcon2,5,c	;volatile
  5295                           
  5296                           ;ext_int.c: 94: INT1_SetInterruptHandler(INT1_DefaultInterruptHandler);
  5297  008EB2  0EAC               	movlw	low _INT1_DefaultInterruptHandler
  5298  008EB4  0100               	movlb	0	; () banked
  5299  008EB6  6F60               	movwf	INT1_SetInterruptHandler@InterruptHandler& (0+255),b
  5300  008EB8  0E95               	movlw	high _INT1_DefaultInterruptHandler
  5301  008EBA  6F61               	movwf	(INT1_SetInterruptHandler@InterruptHandler+1)& (0+255),b
  5302  008EBC  EC41  F04A         	call	_INT1_SetInterruptHandler	;wreg free
  5303                           
  5304                           ;ext_int.c: 95: (INTCON3bits.INT1IE = 1);
  5305  008EC0  86F0               	bsf	intcon3,3,c	;volatile
  5306                           
  5307                           ;ext_int.c: 100: (INTCON3bits.INT2IF = 0);
  5308  008EC2  92F0               	bcf	intcon3,1,c	;volatile
  5309                           
  5310                           ;ext_int.c: 101: (INTCON2bits.INTEDG2 = 1);
  5311  008EC4  88F1               	bsf	intcon2,4,c	;volatile
  5312                           
  5313                           ;ext_int.c: 103: INT2_SetInterruptHandler(INT2_DefaultInterruptHandler);
  5314  008EC6  0EAA               	movlw	low _INT2_DefaultInterruptHandler
  5315  008EC8  0100               	movlb	0	; () banked
  5316  008ECA  6F60               	movwf	INT2_SetInterruptHandler@InterruptHandler& (0+255),b
  5317  008ECC  0E95               	movlw	high _INT2_DefaultInterruptHandler
  5318  008ECE  6F61               	movwf	(INT2_SetInterruptHandler@InterruptHandler+1)& (0+255),b
  5319  008ED0  EC3C  F04A         	call	_INT2_SetInterruptHandler	;wreg free
  5320                           
  5321                           ;ext_int.c: 104: (INTCON3bits.INT2IE = 1);
  5322  008ED4  88F0               	bsf	intcon3,4,c	;volatile
  5323  008ED6  0012               	return		;funcret
  5324  008ED8                     __end_of_EXT_INT_Initialize:
  5325                           	opt stack 0
  5326                           tblptru	equ	0xFF8
  5327                           tblptrh	equ	0xFF7
  5328                           tblptrl	equ	0xFF6
  5329                           tablat	equ	0xFF5
  5330                           intcon	equ	0xFF2
  5331                           intcon2	equ	0xFF1
  5332                           intcon3	equ	0xFF0
  5333                           postinc0	equ	0xFEE
  5334                           wreg	equ	0xFE8
  5335                           postdec2	equ	0xFDD
  5336                           fsr2h	equ	0xFDA
  5337                           fsr2l	equ	0xFD9
  5338                           status	equ	0xFD8
  5339                           
  5340 ;; *************** function _INT2_SetInterruptHandler *****************
  5341 ;; Defined at:
  5342 ;;		line 77 in file "mcc_generated_files/ext_int.c"
  5343 ;; Parameters:    Size  Location     Type
  5344 ;;  InterruptHan    2    0[BANK0 ] PTR FTN()void 
  5345 ;;		 -> INT2_DefaultInterruptHandler(1), DIO1_ISR_Lora(1), 
  5346 ;; Auto vars:     Size  Location     Type
  5347 ;;		None
  5348 ;; Return value:  Size  Location     Type
  5349 ;;                  1    wreg      void 
  5350 ;; Registers used:
  5351 ;;		wreg, status,2, status,0
  5352 ;; Tracked objects:
  5353 ;;		On entry : 0/0
  5354 ;;		On exit  : 0/0
  5355 ;;		Unchanged: 0/0
  5356 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5357 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5358 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5359 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5360 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5361 ;;Total ram usage:        2 bytes
  5362 ;; Hardware stack levels used:    1
  5363 ;; Hardware stack levels required when called:    7
  5364 ;; This function calls:
  5365 ;;		Nothing
  5366 ;; This function is called by:
  5367 ;;		_DIO1_ISR_Lora_Init
  5368 ;;		_EXT_INT_Initialize
  5369 ;; This function uses a non-reentrant model
  5370 ;;
  5371                           
  5372                           	psect	text24
  5373  009478                     __ptext24:
  5374                           	opt stack 0
  5375  009478                     _INT2_SetInterruptHandler:
  5376                           	opt stack 20
  5377                           
  5378                           ;ext_int.c: 78: INT2_InterruptHandler = InterruptHandler;
  5379                           
  5380                           ;incstack = 0
  5381  009478  C060  F3F7         	movff	INT2_SetInterruptHandler@InterruptHandler,_INT2_InterruptHandler
  5382  00947C  C061  F3F8         	movff	INT2_SetInterruptHandler@InterruptHandler+1,_INT2_InterruptHandler+1
  5383  009480  0012               	return		;funcret
  5384  009482                     __end_of_INT2_SetInterruptHandler:
  5385                           	opt stack 0
  5386                           tblptru	equ	0xFF8
  5387                           tblptrh	equ	0xFF7
  5388                           tblptrl	equ	0xFF6
  5389                           tablat	equ	0xFF5
  5390                           intcon	equ	0xFF2
  5391                           intcon2	equ	0xFF1
  5392                           intcon3	equ	0xFF0
  5393                           postinc0	equ	0xFEE
  5394                           wreg	equ	0xFE8
  5395                           postdec2	equ	0xFDD
  5396                           fsr2h	equ	0xFDA
  5397                           fsr2l	equ	0xFD9
  5398                           status	equ	0xFD8
  5399                           
  5400 ;; *************** function _INT1_SetInterruptHandler *****************
  5401 ;; Defined at:
  5402 ;;		line 51 in file "mcc_generated_files/ext_int.c"
  5403 ;; Parameters:    Size  Location     Type
  5404 ;;  InterruptHan    2    0[BANK0 ] PTR FTN()void 
  5405 ;;		 -> INT1_DefaultInterruptHandler(1), DIO0_ISR_Lora(1), 
  5406 ;; Auto vars:     Size  Location     Type
  5407 ;;		None
  5408 ;; Return value:  Size  Location     Type
  5409 ;;                  1    wreg      void 
  5410 ;; Registers used:
  5411 ;;		wreg, status,2, status,0
  5412 ;; Tracked objects:
  5413 ;;		On entry : 0/0
  5414 ;;		On exit  : 0/0
  5415 ;;		Unchanged: 0/0
  5416 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5417 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5418 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5419 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5420 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5421 ;;Total ram usage:        2 bytes
  5422 ;; Hardware stack levels used:    1
  5423 ;; Hardware stack levels required when called:    7
  5424 ;; This function calls:
  5425 ;;		Nothing
  5426 ;; This function is called by:
  5427 ;;		_DIO0_ISR_Lora_Init
  5428 ;;		_EXT_INT_Initialize
  5429 ;; This function uses a non-reentrant model
  5430 ;;
  5431                           
  5432                           	psect	text25
  5433  009482                     __ptext25:
  5434                           	opt stack 0
  5435  009482                     _INT1_SetInterruptHandler:
  5436                           	opt stack 20
  5437                           
  5438                           ;ext_int.c: 52: INT1_InterruptHandler = InterruptHandler;
  5439                           
  5440                           ;incstack = 0
  5441  009482  C060  F3F9         	movff	INT1_SetInterruptHandler@InterruptHandler,_INT1_InterruptHandler
  5442  009486  C061  F3FA         	movff	INT1_SetInterruptHandler@InterruptHandler+1,_INT1_InterruptHandler+1
  5443  00948A  0012               	return		;funcret
  5444  00948C                     __end_of_INT1_SetInterruptHandler:
  5445                           	opt stack 0
  5446                           tblptru	equ	0xFF8
  5447                           tblptrh	equ	0xFF7
  5448                           tblptrl	equ	0xFF6
  5449                           tablat	equ	0xFF5
  5450                           intcon	equ	0xFF2
  5451                           intcon2	equ	0xFF1
  5452                           intcon3	equ	0xFF0
  5453                           postinc0	equ	0xFEE
  5454                           wreg	equ	0xFE8
  5455                           postdec2	equ	0xFDD
  5456                           fsr2h	equ	0xFDA
  5457                           fsr2l	equ	0xFD9
  5458                           status	equ	0xFD8
  5459                           
  5460 ;; *************** function _EUSART1_Initialize *****************
  5461 ;; Defined at:
  5462 ;;		line 115 in file "mcc_generated_files/eusart1.c"
  5463 ;; Parameters:    Size  Location     Type
  5464 ;;		None
  5465 ;; Auto vars:     Size  Location     Type
  5466 ;;		None
  5467 ;; Return value:  Size  Location     Type
  5468 ;;                  1    wreg      void 
  5469 ;; Registers used:
  5470 ;;		wreg, status,2, status,0, cstack
  5471 ;; Tracked objects:
  5472 ;;		On entry : 0/0
  5473 ;;		On exit  : 0/0
  5474 ;;		Unchanged: 0/0
  5475 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5476 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5477 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5478 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5479 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5480 ;;Total ram usage:        0 bytes
  5481 ;; Hardware stack levels used:    1
  5482 ;; Hardware stack levels required when called:    8
  5483 ;; This function calls:
  5484 ;;		_EUSART1_SetErrorHandler
  5485 ;;		_EUSART1_SetFramingErrorHandler
  5486 ;;		_EUSART1_SetOverrunErrorHandler
  5487 ;;		_EUSART1_SetRxInterruptHandler
  5488 ;;		_EUSART1_SetTxInterruptHandler
  5489 ;; This function is called by:
  5490 ;;		_SYSTEM_Initialize
  5491 ;; This function uses a non-reentrant model
  5492 ;;
  5493                           
  5494                           	psect	text26
  5495  007ACE                     __ptext26:
  5496                           	opt stack 0
  5497  007ACE                     _EUSART1_Initialize:
  5498                           	opt stack 21
  5499                           
  5500                           ;eusart1.c: 118: PIE1bits.RC1IE = 0;
  5501                           
  5502                           ;incstack = 0
  5503  007ACE  9A9D               	bcf	3997,5,c	;volatile
  5504                           
  5505                           ;eusart1.c: 119: EUSART1_SetRxInterruptHandler(EUSART1_Receive_ISR);
  5506  007AD0  0E88               	movlw	low _EUSART1_Receive_ISR
  5507  007AD2  0100               	movlb	0	; () banked
  5508  007AD4  6F60               	movwf	EUSART1_SetRxInterruptHandler@interruptHandler& (0+255),b
  5509  007AD6  0E3D               	movlw	high _EUSART1_Receive_ISR
  5510  007AD8  6F61               	movwf	(EUSART1_SetRxInterruptHandler@interruptHandler+1)& (0+255),b
  5511  007ADA  EC4B  F04A         	call	_EUSART1_SetRxInterruptHandler	;wreg free
  5512                           
  5513                           ;eusart1.c: 120: PIE1bits.TX1IE = 0;
  5514  007ADE  989D               	bcf	3997,4,c	;volatile
  5515                           
  5516                           ;eusart1.c: 121: EUSART1_SetTxInterruptHandler(EUSART1_Transmit_ISR);
  5517  007AE0  0EC8               	movlw	low _EUSART1_Transmit_ISR
  5518  007AE2  0100               	movlb	0	; () banked
  5519  007AE4  6F60               	movwf	EUSART1_SetTxInterruptHandler@interruptHandler& (0+255),b
  5520  007AE6  0E8D               	movlw	high _EUSART1_Transmit_ISR
  5521  007AE8  6F61               	movwf	(EUSART1_SetTxInterruptHandler@interruptHandler+1)& (0+255),b
  5522  007AEA  EC46  F04A         	call	_EUSART1_SetTxInterruptHandler	;wreg free
  5523                           
  5524                           ;eusart1.c: 125: BAUDCON1 = 0x08;
  5525  007AEE  0E08               	movlw	8
  5526  007AF0  6EB8               	movwf	4024,c	;volatile
  5527                           
  5528                           ;eusart1.c: 128: RCSTA1 = 0x90;
  5529  007AF2  0E90               	movlw	144
  5530  007AF4  6EAB               	movwf	4011,c	;volatile
  5531                           
  5532                           ;eusart1.c: 131: TXSTA1 = 0x24;
  5533  007AF6  0E24               	movlw	36
  5534  007AF8  6EAC               	movwf	4012,c	;volatile
  5535                           
  5536                           ;eusart1.c: 139: SPBRG1 = 0xA0;
  5537  007AFA  0EA0               	movlw	160
  5538  007AFC  6EAF               	movwf	4015,c	;volatile
  5539                           
  5540                           ;eusart1.c: 140: SPBRGH1 = 0x01;
  5541  007AFE  0E01               	movlw	1
  5542  007B00  6EB0               	movwf	4016,c	;volatile
  5543                           
  5544                           ;eusart1.c: 142: EUSART1_SetFramingErrorHandler(EUSART1_DefaultFramingErrorHandler);
  5545  007B02  0EAE               	movlw	low _EUSART1_DefaultFramingErrorHandler
  5546  007B04  0100               	movlb	0	; () banked
  5547  007B06  6F60               	movwf	EUSART1_SetFramingErrorHandler@interruptHandler& (0+255),b
  5548  007B08  0E95               	movlw	high _EUSART1_DefaultFramingErrorHandler
  5549  007B0A  6F61               	movwf	(EUSART1_SetFramingErrorHandler@interruptHandler+1)& (0+255),b
  5550  007B0C  EC55  F04A         	call	_EUSART1_SetFramingErrorHandler	;wreg free
  5551                           
  5552                           ;eusart1.c: 143: EUSART1_SetOverrunErrorHandler(EUSART1_DefaultOverrunErrorHandler);
  5553  007B10  0E78               	movlw	low _EUSART1_DefaultOverrunErrorHandler
  5554  007B12  0100               	movlb	0	; () banked
  5555  007B14  6F60               	movwf	EUSART1_SetOverrunErrorHandler@interruptHandler& (0+255),b
  5556  007B16  0E95               	movlw	high _EUSART1_DefaultOverrunErrorHandler
  5557  007B18  6F61               	movwf	(EUSART1_SetOverrunErrorHandler@interruptHandler+1)& (0+255),b
  5558  007B1A  EC50  F04A         	call	_EUSART1_SetOverrunErrorHandler	;wreg free
  5559                           
  5560                           ;eusart1.c: 144: EUSART1_SetErrorHandler(EUSART1_DefaultErrorHandler);
  5561  007B1E  0E7E               	movlw	low _EUSART1_DefaultErrorHandler
  5562  007B20  0100               	movlb	0	; () banked
  5563  007B22  6F60               	movwf	EUSART1_SetErrorHandler@interruptHandler& (0+255),b
  5564  007B24  0E95               	movlw	high _EUSART1_DefaultErrorHandler
  5565  007B26  6F61               	movwf	(EUSART1_SetErrorHandler@interruptHandler+1)& (0+255),b
  5566  007B28  EC5A  F04A         	call	_EUSART1_SetErrorHandler	;wreg free
  5567                           
  5568                           ;eusart1.c: 146: eusart1RxLastError.status = 0;
  5569  007B2C  0E00               	movlw	0
  5570  007B2E  0101               	movlb	1	; () banked
  5571  007B30  6F4C               	movwf	_eusart1RxLastError& (0+255),b	;volatile
  5572                           
  5573                           ;eusart1.c: 149: eusart1TxHead = 0;
  5574  007B32  0E00               	movlw	0
  5575  007B34  6E51               	movwf	_eusart1TxHead,c	;volatile
  5576                           
  5577                           ;eusart1.c: 150: eusart1TxTail = 0;
  5578  007B36  0E00               	movlw	0
  5579  007B38  6F50               	movwf	_eusart1TxTail& (0+255),b	;volatile
  5580                           
  5581                           ;eusart1.c: 151: eusart1TxBufferRemaining = sizeof(eusart1TxBuffer);
  5582  007B3A  0E01               	movlw	1
  5583  007B3C  6FFE               	movwf	_eusart1TxBufferRemaining& (0+255),b	;volatile
  5584                           
  5585                           ;eusart1.c: 153: eusart1RxHead = 0;
  5586  007B3E  0E00               	movlw	0
  5587  007B40  6E50               	movwf	_eusart1RxHead,c	;volatile
  5588                           
  5589                           ;eusart1.c: 154: eusart1RxTail = 0;
  5590  007B42  0E00               	movlw	0
  5591  007B44  6E4F               	movwf	_eusart1RxTail,c	;volatile
  5592                           
  5593                           ;eusart1.c: 155: eusart1RxCount = 0;
  5594  007B46  0E00               	movlw	0
  5595  007B48  6F4D               	movwf	_eusart1RxCount& (0+255),b	;volatile
  5596                           
  5597                           ; BSR set to: 1
  5598                           ;eusart1.c: 158: PIE1bits.RC1IE = 1;
  5599  007B4A  8A9D               	bsf	3997,5,c	;volatile
  5600                           
  5601                           ; BSR set to: 1
  5602  007B4C  0012               	return		;funcret
  5603  007B4E                     __end_of_EUSART1_Initialize:
  5604                           	opt stack 0
  5605                           tblptru	equ	0xFF8
  5606                           tblptrh	equ	0xFF7
  5607                           tblptrl	equ	0xFF6
  5608                           tablat	equ	0xFF5
  5609                           intcon	equ	0xFF2
  5610                           intcon2	equ	0xFF1
  5611                           intcon3	equ	0xFF0
  5612                           postinc0	equ	0xFEE
  5613                           wreg	equ	0xFE8
  5614                           postdec2	equ	0xFDD
  5615                           fsr2h	equ	0xFDA
  5616                           fsr2l	equ	0xFD9
  5617                           status	equ	0xFD8
  5618                           
  5619 ;; *************** function _EUSART1_SetTxInterruptHandler *****************
  5620 ;; Defined at:
  5621 ;;		line 333 in file "mcc_generated_files/eusart1.c"
  5622 ;; Parameters:    Size  Location     Type
  5623 ;;  interruptHan    2    0[BANK0 ] PTR FTN()void 
  5624 ;;		 -> EUSART1_Transmit_ISR(1), 
  5625 ;; Auto vars:     Size  Location     Type
  5626 ;;		None
  5627 ;; Return value:  Size  Location     Type
  5628 ;;                  1    wreg      void 
  5629 ;; Registers used:
  5630 ;;		wreg, status,2, status,0
  5631 ;; Tracked objects:
  5632 ;;		On entry : 0/0
  5633 ;;		On exit  : 0/0
  5634 ;;		Unchanged: 0/0
  5635 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5636 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5637 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5638 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5639 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5640 ;;Total ram usage:        2 bytes
  5641 ;; Hardware stack levels used:    1
  5642 ;; Hardware stack levels required when called:    7
  5643 ;; This function calls:
  5644 ;;		Nothing
  5645 ;; This function is called by:
  5646 ;;		_EUSART1_Initialize
  5647 ;; This function uses a non-reentrant model
  5648 ;;
  5649                           
  5650                           	psect	text27
  5651  00948C                     __ptext27:
  5652                           	opt stack 0
  5653  00948C                     _EUSART1_SetTxInterruptHandler:
  5654                           	opt stack 21
  5655                           
  5656                           ;eusart1.c: 334: EUSART1_TxDefaultInterruptHandler = interruptHandler;
  5657                           
  5658                           ; BSR set to: 1
  5659                           ;incstack = 0
  5660  00948C  C060  F3F5         	movff	EUSART1_SetTxInterruptHandler@interruptHandler,_EUSART1_TxDefaultInterruptHandler
  5661  009490  C061  F3F6         	movff	EUSART1_SetTxInterruptHandler@interruptHandler+1,_EUSART1_TxDefaultInterruptHandl
      +                          er+1
  5662  009494  0012               	return		;funcret
  5663  009496                     __end_of_EUSART1_SetTxInterruptHandler:
  5664                           	opt stack 0
  5665                           tblptru	equ	0xFF8
  5666                           tblptrh	equ	0xFF7
  5667                           tblptrl	equ	0xFF6
  5668                           tablat	equ	0xFF5
  5669                           intcon	equ	0xFF2
  5670                           intcon2	equ	0xFF1
  5671                           intcon3	equ	0xFF0
  5672                           postinc0	equ	0xFEE
  5673                           wreg	equ	0xFE8
  5674                           postdec2	equ	0xFDD
  5675                           fsr2h	equ	0xFDA
  5676                           fsr2l	equ	0xFD9
  5677                           status	equ	0xFD8
  5678                           
  5679 ;; *************** function _EUSART1_SetRxInterruptHandler *****************
  5680 ;; Defined at:
  5681 ;;		line 337 in file "mcc_generated_files/eusart1.c"
  5682 ;; Parameters:    Size  Location     Type
  5683 ;;  interruptHan    2    0[BANK0 ] PTR FTN()void 
  5684 ;;		 -> EUSART1_Receive_ISR(1), 
  5685 ;; Auto vars:     Size  Location     Type
  5686 ;;		None
  5687 ;; Return value:  Size  Location     Type
  5688 ;;                  1    wreg      void 
  5689 ;; Registers used:
  5690 ;;		wreg, status,2, status,0
  5691 ;; Tracked objects:
  5692 ;;		On entry : 0/0
  5693 ;;		On exit  : 0/0
  5694 ;;		Unchanged: 0/0
  5695 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5696 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5697 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5698 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5699 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5700 ;;Total ram usage:        2 bytes
  5701 ;; Hardware stack levels used:    1
  5702 ;; Hardware stack levels required when called:    7
  5703 ;; This function calls:
  5704 ;;		Nothing
  5705 ;; This function is called by:
  5706 ;;		_EUSART1_Initialize
  5707 ;; This function uses a non-reentrant model
  5708 ;;
  5709                           
  5710                           	psect	text28
  5711  009496                     __ptext28:
  5712                           	opt stack 0
  5713  009496                     _EUSART1_SetRxInterruptHandler:
  5714                           	opt stack 21
  5715                           
  5716                           ;eusart1.c: 338: EUSART1_RxDefaultInterruptHandler = interruptHandler;
  5717                           
  5718                           ;incstack = 0
  5719  009496  C060  F3F3         	movff	EUSART1_SetRxInterruptHandler@interruptHandler,_EUSART1_RxDefaultInterruptHandler
  5720  00949A  C061  F3F4         	movff	EUSART1_SetRxInterruptHandler@interruptHandler+1,_EUSART1_RxDefaultInterruptHandl
      +                          er+1
  5721  00949E  0012               	return		;funcret
  5722  0094A0                     __end_of_EUSART1_SetRxInterruptHandler:
  5723                           	opt stack 0
  5724                           tblptru	equ	0xFF8
  5725                           tblptrh	equ	0xFF7
  5726                           tblptrl	equ	0xFF6
  5727                           tablat	equ	0xFF5
  5728                           intcon	equ	0xFF2
  5729                           intcon2	equ	0xFF1
  5730                           intcon3	equ	0xFF0
  5731                           postinc0	equ	0xFEE
  5732                           wreg	equ	0xFE8
  5733                           postdec2	equ	0xFDD
  5734                           fsr2h	equ	0xFDA
  5735                           fsr2l	equ	0xFD9
  5736                           status	equ	0xFD8
  5737                           
  5738 ;; *************** function _EUSART1_SetOverrunErrorHandler *****************
  5739 ;; Defined at:
  5740 ;;		line 325 in file "mcc_generated_files/eusart1.c"
  5741 ;; Parameters:    Size  Location     Type
  5742 ;;  interruptHan    2    0[BANK0 ] PTR FTN()void 
  5743 ;;		 -> EUSART1_DefaultOverrunErrorHandler(1), 
  5744 ;; Auto vars:     Size  Location     Type
  5745 ;;		None
  5746 ;; Return value:  Size  Location     Type
  5747 ;;                  1    wreg      void 
  5748 ;; Registers used:
  5749 ;;		wreg, status,2, status,0
  5750 ;; Tracked objects:
  5751 ;;		On entry : 0/0
  5752 ;;		On exit  : 0/0
  5753 ;;		Unchanged: 0/0
  5754 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5755 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5756 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5757 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5758 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5759 ;;Total ram usage:        2 bytes
  5760 ;; Hardware stack levels used:    1
  5761 ;; Hardware stack levels required when called:    7
  5762 ;; This function calls:
  5763 ;;		Nothing
  5764 ;; This function is called by:
  5765 ;;		_EUSART1_Initialize
  5766 ;; This function uses a non-reentrant model
  5767 ;;
  5768                           
  5769                           	psect	text29
  5770  0094A0                     __ptext29:
  5771                           	opt stack 0
  5772  0094A0                     _EUSART1_SetOverrunErrorHandler:
  5773                           	opt stack 21
  5774                           
  5775                           ;eusart1.c: 326: EUSART1_OverrunErrorHandler = interruptHandler;
  5776                           
  5777                           ;incstack = 0
  5778  0094A0  C060  F3ED         	movff	EUSART1_SetOverrunErrorHandler@interruptHandler,_EUSART1_OverrunErrorHandler
  5779  0094A4  C061  F3EE         	movff	EUSART1_SetOverrunErrorHandler@interruptHandler+1,_EUSART1_OverrunErrorHandler+1
  5780  0094A8  0012               	return		;funcret
  5781  0094AA                     __end_of_EUSART1_SetOverrunErrorHandler:
  5782                           	opt stack 0
  5783                           tblptru	equ	0xFF8
  5784                           tblptrh	equ	0xFF7
  5785                           tblptrl	equ	0xFF6
  5786                           tablat	equ	0xFF5
  5787                           intcon	equ	0xFF2
  5788                           intcon2	equ	0xFF1
  5789                           intcon3	equ	0xFF0
  5790                           postinc0	equ	0xFEE
  5791                           wreg	equ	0xFE8
  5792                           postdec2	equ	0xFDD
  5793                           fsr2h	equ	0xFDA
  5794                           fsr2l	equ	0xFD9
  5795                           status	equ	0xFD8
  5796                           
  5797 ;; *************** function _EUSART1_SetFramingErrorHandler *****************
  5798 ;; Defined at:
  5799 ;;		line 321 in file "mcc_generated_files/eusart1.c"
  5800 ;; Parameters:    Size  Location     Type
  5801 ;;  interruptHan    2    0[BANK0 ] PTR FTN()void 
  5802 ;;		 -> EUSART1_DefaultFramingErrorHandler(1), 
  5803 ;; Auto vars:     Size  Location     Type
  5804 ;;		None
  5805 ;; Return value:  Size  Location     Type
  5806 ;;                  1    wreg      void 
  5807 ;; Registers used:
  5808 ;;		wreg, status,2, status,0
  5809 ;; Tracked objects:
  5810 ;;		On entry : 0/0
  5811 ;;		On exit  : 0/0
  5812 ;;		Unchanged: 0/0
  5813 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5814 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5815 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5816 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5817 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5818 ;;Total ram usage:        2 bytes
  5819 ;; Hardware stack levels used:    1
  5820 ;; Hardware stack levels required when called:    7
  5821 ;; This function calls:
  5822 ;;		Nothing
  5823 ;; This function is called by:
  5824 ;;		_EUSART1_Initialize
  5825 ;; This function uses a non-reentrant model
  5826 ;;
  5827                           
  5828                           	psect	text30
  5829  0094AA                     __ptext30:
  5830                           	opt stack 0
  5831  0094AA                     _EUSART1_SetFramingErrorHandler:
  5832                           	opt stack 21
  5833                           
  5834                           ;eusart1.c: 322: EUSART1_FramingErrorHandler = interruptHandler;
  5835                           
  5836                           ;incstack = 0
  5837  0094AA  C060  F3EF         	movff	EUSART1_SetFramingErrorHandler@interruptHandler,_EUSART1_FramingErrorHandler
  5838  0094AE  C061  F3F0         	movff	EUSART1_SetFramingErrorHandler@interruptHandler+1,_EUSART1_FramingErrorHandler+1
  5839  0094B2  0012               	return		;funcret
  5840  0094B4                     __end_of_EUSART1_SetFramingErrorHandler:
  5841                           	opt stack 0
  5842                           tblptru	equ	0xFF8
  5843                           tblptrh	equ	0xFF7
  5844                           tblptrl	equ	0xFF6
  5845                           tablat	equ	0xFF5
  5846                           intcon	equ	0xFF2
  5847                           intcon2	equ	0xFF1
  5848                           intcon3	equ	0xFF0
  5849                           postinc0	equ	0xFEE
  5850                           wreg	equ	0xFE8
  5851                           postdec2	equ	0xFDD
  5852                           fsr2h	equ	0xFDA
  5853                           fsr2l	equ	0xFD9
  5854                           status	equ	0xFD8
  5855                           
  5856 ;; *************** function _EUSART1_SetErrorHandler *****************
  5857 ;; Defined at:
  5858 ;;		line 329 in file "mcc_generated_files/eusart1.c"
  5859 ;; Parameters:    Size  Location     Type
  5860 ;;  interruptHan    2    0[BANK0 ] PTR FTN()void 
  5861 ;;		 -> EUSART1_DefaultErrorHandler(1), 
  5862 ;; Auto vars:     Size  Location     Type
  5863 ;;		None
  5864 ;; Return value:  Size  Location     Type
  5865 ;;                  1    wreg      void 
  5866 ;; Registers used:
  5867 ;;		wreg, status,2, status,0
  5868 ;; Tracked objects:
  5869 ;;		On entry : 0/0
  5870 ;;		On exit  : 0/0
  5871 ;;		Unchanged: 0/0
  5872 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5873 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5874 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5875 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5876 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5877 ;;Total ram usage:        2 bytes
  5878 ;; Hardware stack levels used:    1
  5879 ;; Hardware stack levels required when called:    7
  5880 ;; This function calls:
  5881 ;;		Nothing
  5882 ;; This function is called by:
  5883 ;;		_EUSART1_Initialize
  5884 ;; This function uses a non-reentrant model
  5885 ;;
  5886                           
  5887                           	psect	text31
  5888  0094B4                     __ptext31:
  5889                           	opt stack 0
  5890  0094B4                     _EUSART1_SetErrorHandler:
  5891                           	opt stack 21
  5892                           
  5893                           ;eusart1.c: 330: EUSART1_ErrorHandler = interruptHandler;
  5894                           
  5895                           ;incstack = 0
  5896  0094B4  C060  F3EB         	movff	EUSART1_SetErrorHandler@interruptHandler,_EUSART1_ErrorHandler
  5897  0094B8  C061  F3EC         	movff	EUSART1_SetErrorHandler@interruptHandler+1,_EUSART1_ErrorHandler+1
  5898  0094BC  0012               	return		;funcret
  5899  0094BE                     __end_of_EUSART1_SetErrorHandler:
  5900                           	opt stack 0
  5901                           tblptru	equ	0xFF8
  5902                           tblptrh	equ	0xFF7
  5903                           tblptrl	equ	0xFF6
  5904                           tablat	equ	0xFF5
  5905                           intcon	equ	0xFF2
  5906                           intcon2	equ	0xFF1
  5907                           intcon3	equ	0xFF0
  5908                           postinc0	equ	0xFEE
  5909                           wreg	equ	0xFE8
  5910                           postdec2	equ	0xFDD
  5911                           fsr2h	equ	0xFDA
  5912                           fsr2l	equ	0xFD9
  5913                           status	equ	0xFD8
  5914                           
  5915 ;; *************** function _LORAWAN_SetNetworkSessionKey *****************
  5916 ;; Defined at:
  5917 ;;		line 379 in file "mcc_generated_files/LoRaWAN/lorawan.c"
  5918 ;; Parameters:    Size  Location     Type
  5919 ;;  networkSessi    2   11[BANK0 ] PTR unsigned char 
  5920 ;;		 -> nwkSKey(16), 
  5921 ;; Auto vars:     Size  Location     Type
  5922 ;;		None
  5923 ;; Return value:  Size  Location     Type
  5924 ;;                  1    wreg      void 
  5925 ;; Registers used:
  5926 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5927 ;; Tracked objects:
  5928 ;;		On entry : 0/0
  5929 ;;		On exit  : 0/0
  5930 ;;		Unchanged: 0/0
  5931 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5932 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5933 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5934 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5935 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5936 ;;Total ram usage:        2 bytes
  5937 ;; Hardware stack levels used:    1
  5938 ;; Hardware stack levels required when called:    8
  5939 ;; This function calls:
  5940 ;;		_memcpy
  5941 ;; This function is called by:
  5942 ;;		_main
  5943 ;; This function uses a non-reentrant model
  5944 ;;
  5945                           
  5946                           	psect	text32
  5947  008DF8                     __ptext32:
  5948                           	opt stack 0
  5949  008DF8                     _LORAWAN_SetNetworkSessionKey:
  5950                           	opt stack 22
  5951                           
  5952                           ;lorawan.c: 381: if (networkSessionKeyNew != (0))
  5953                           
  5954                           ;incstack = 0
  5955  008DF8  0100               	movlb	0	; () banked
  5956  008DFA  516B               	movf	LORAWAN_SetNetworkSessionKey@networkSessionKeyNew& (0+255),w,b
  5957  008DFC  116C               	iorwf	(LORAWAN_SetNetworkSessionKey@networkSessionKeyNew+1)& (0+255),w,b
  5958  008DFE  B4D8               	btfsc	status,2,c
  5959  008E00  0012               	return	
  5960                           
  5961                           ; BSR set to: 0
  5962                           ;lorawan.c: 382: {
  5963                           ;lorawan.c: 383: memcpy(loRa.activationParameters.networkSessionKey, networkSessionKeyNe
      +                          w, 16);
  5964  008E02  0E2C               	movlw	low (_loRa+34)
  5965  008E04  6F60               	movwf	memcpy@d1& (0+255),b
  5966  008E06  0E02               	movlw	high (_loRa+34)
  5967  008E08  6F61               	movwf	(memcpy@d1+1)& (0+255),b
  5968  008E0A  C06B  F062         	movff	LORAWAN_SetNetworkSessionKey@networkSessionKeyNew,memcpy@s1
  5969  008E0E  C06C  F063         	movff	LORAWAN_SetNetworkSessionKey@networkSessionKeyNew+1,memcpy@s1+1
  5970  008E12  0E00               	movlw	0
  5971  008E14  6F65               	movwf	(memcpy@n+1)& (0+255),b
  5972  008E16  0E10               	movlw	16
  5973  008E18  6F64               	movwf	memcpy@n& (0+255),b
  5974  008E1A  EC37  F041         	call	_memcpy	;wreg free
  5975                           
  5976                           ;lorawan.c: 384: loRa.macKeys.networkSessionKey = 1;
  5977  008E1E  0102               	movlb	2	; () banked
  5978  008E20  89AF               	bsf	(_loRa+165)& (0+255),4,b
  5979                           
  5980                           ; BSR set to: 2
  5981                           ;lorawan.c: 385: loRa.macStatus.networkJoined = 0;
  5982  008E22  990C               	bcf	(_loRa+2)& (0+255),4,b
  5983  008E24  0012               	return	
  5984  008E26                     __end_of_LORAWAN_SetNetworkSessionKey:
  5985                           	opt stack 0
  5986                           tblptru	equ	0xFF8
  5987                           tblptrh	equ	0xFF7
  5988                           tblptrl	equ	0xFF6
  5989                           tablat	equ	0xFF5
  5990                           intcon	equ	0xFF2
  5991                           intcon2	equ	0xFF1
  5992                           intcon3	equ	0xFF0
  5993                           postinc0	equ	0xFEE
  5994                           wreg	equ	0xFE8
  5995                           postdec2	equ	0xFDD
  5996                           fsr2h	equ	0xFDA
  5997                           fsr2l	equ	0xFD9
  5998                           status	equ	0xFD8
  5999                           
  6000 ;; *************** function _LORAWAN_SetDeviceAddress *****************
  6001 ;; Defined at:
  6002 ;;		line 367 in file "mcc_generated_files/LoRaWAN/lorawan.c"
  6003 ;; Parameters:    Size  Location     Type
  6004 ;;  deviceAddres    4    0[BANK0 ] unsigned long 
  6005 ;; Auto vars:     Size  Location     Type
  6006 ;;		None
  6007 ;; Return value:  Size  Location     Type
  6008 ;;                  1    wreg      void 
  6009 ;; Registers used:
  6010 ;;		None
  6011 ;; Tracked objects:
  6012 ;;		On entry : 0/0
  6013 ;;		On exit  : 0/0
  6014 ;;		Unchanged: 0/0
  6015 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6016 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6017 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6018 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6019 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6020 ;;Total ram usage:        4 bytes
  6021 ;; Hardware stack levels used:    1
  6022 ;; Hardware stack levels required when called:    7
  6023 ;; This function calls:
  6024 ;;		Nothing
  6025 ;; This function is called by:
  6026 ;;		_main
  6027 ;; This function uses a non-reentrant model
  6028 ;;
  6029                           
  6030                           	psect	text33
  6031  009302                     __ptext33:
  6032                           	opt stack 0
  6033  009302                     _LORAWAN_SetDeviceAddress:
  6034                           	opt stack 23
  6035                           
  6036                           ;lorawan.c: 369: loRa.activationParameters.deviceAddress.value = deviceAddressNew;
  6037                           
  6038                           ;incstack = 0
  6039  009302  C060  F228         	movff	LORAWAN_SetDeviceAddress@deviceAddressNew,_loRa+30
  6040  009306  C061  F229         	movff	LORAWAN_SetDeviceAddress@deviceAddressNew+1,_loRa+31
  6041  00930A  C062  F22A         	movff	LORAWAN_SetDeviceAddress@deviceAddressNew+2,_loRa+32
  6042  00930E  C063  F22B         	movff	LORAWAN_SetDeviceAddress@deviceAddressNew+3,_loRa+33
  6043                           
  6044                           ;lorawan.c: 370: loRa.macKeys.deviceAddress = 1;
  6045  009312  0102               	movlb	2	; () banked
  6046  009314  85AF               	bsf	(_loRa+165)& (0+255),2,b
  6047                           
  6048                           ;lorawan.c: 371: loRa.macStatus.networkJoined = 0;
  6049  009316  990C               	bcf	(_loRa+2)& (0+255),4,b
  6050                           
  6051                           ; BSR set to: 2
  6052  009318  0012               	return		;funcret
  6053  00931A                     __end_of_LORAWAN_SetDeviceAddress:
  6054                           	opt stack 0
  6055                           tblptru	equ	0xFF8
  6056                           tblptrh	equ	0xFF7
  6057                           tblptrl	equ	0xFF6
  6058                           tablat	equ	0xFF5
  6059                           intcon	equ	0xFF2
  6060                           intcon2	equ	0xFF1
  6061                           intcon3	equ	0xFF0
  6062                           postinc0	equ	0xFEE
  6063                           wreg	equ	0xFE8
  6064                           postdec2	equ	0xFDD
  6065                           fsr2h	equ	0xFDA
  6066                           fsr2l	equ	0xFD9
  6067                           status	equ	0xFD8
  6068                           
  6069 ;; *************** function _LORAWAN_SetApplicationSessionKey *****************
  6070 ;; Defined at:
  6071 ;;		line 394 in file "mcc_generated_files/LoRaWAN/lorawan.c"
  6072 ;; Parameters:    Size  Location     Type
  6073 ;;  applicationS    2   11[BANK0 ] PTR unsigned char 
  6074 ;;		 -> appSKey(16), 
  6075 ;; Auto vars:     Size  Location     Type
  6076 ;;		None
  6077 ;; Return value:  Size  Location     Type
  6078 ;;                  1    wreg      void 
  6079 ;; Registers used:
  6080 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6081 ;; Tracked objects:
  6082 ;;		On entry : 0/0
  6083 ;;		On exit  : 0/0
  6084 ;;		Unchanged: 0/0
  6085 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6086 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6087 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6088 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6089 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6090 ;;Total ram usage:        2 bytes
  6091 ;; Hardware stack levels used:    1
  6092 ;; Hardware stack levels required when called:    8
  6093 ;; This function calls:
  6094 ;;		_memcpy
  6095 ;; This function is called by:
  6096 ;;		_main
  6097 ;; This function uses a non-reentrant model
  6098 ;;
  6099                           
  6100                           	psect	text34
  6101  008E26                     __ptext34:
  6102                           	opt stack 0
  6103  008E26                     _LORAWAN_SetApplicationSessionKey:
  6104                           	opt stack 22
  6105                           
  6106                           ;lorawan.c: 396: if (applicationSessionKeyNew != (0))
  6107                           
  6108                           ; BSR set to: 2
  6109                           ;incstack = 0
  6110  008E26  0100               	movlb	0	; () banked
  6111  008E28  516B               	movf	LORAWAN_SetApplicationSessionKey@applicationSessionKeyNew& (0+255),w,b
  6112  008E2A  116C               	iorwf	(LORAWAN_SetApplicationSessionKey@applicationSessionKeyNew+1)& (0+255),w,b
  6113  008E2C  B4D8               	btfsc	status,2,c
  6114  008E2E  0012               	return	
  6115                           
  6116                           ; BSR set to: 0
  6117                           ;lorawan.c: 397: {
  6118                           ;lorawan.c: 398: memcpy( loRa.activationParameters.applicationSessionKey, applicationSes
      +                          sionKeyNew, 16);
  6119  008E30  0E3C               	movlw	low (_loRa+50)
  6120  008E32  6F60               	movwf	memcpy@d1& (0+255),b
  6121  008E34  0E02               	movlw	high (_loRa+50)
  6122  008E36  6F61               	movwf	(memcpy@d1+1)& (0+255),b
  6123  008E38  C06B  F062         	movff	LORAWAN_SetApplicationSessionKey@applicationSessionKeyNew,memcpy@s1
  6124  008E3C  C06C  F063         	movff	LORAWAN_SetApplicationSessionKey@applicationSessionKeyNew+1,memcpy@s1+1
  6125  008E40  0E00               	movlw	0
  6126  008E42  6F65               	movwf	(memcpy@n+1)& (0+255),b
  6127  008E44  0E10               	movlw	16
  6128  008E46  6F64               	movwf	memcpy@n& (0+255),b
  6129  008E48  EC37  F041         	call	_memcpy	;wreg free
  6130                           
  6131                           ;lorawan.c: 399: loRa.macKeys.applicationSessionKey = 1;
  6132  008E4C  0102               	movlb	2	; () banked
  6133  008E4E  8BAF               	bsf	(_loRa+165)& (0+255),5,b
  6134                           
  6135                           ; BSR set to: 2
  6136                           ;lorawan.c: 400: loRa.macStatus.networkJoined = 0;
  6137  008E50  990C               	bcf	(_loRa+2)& (0+255),4,b
  6138  008E52  0012               	return	
  6139  008E54                     __end_of_LORAWAN_SetApplicationSessionKey:
  6140                           	opt stack 0
  6141                           tblptru	equ	0xFF8
  6142                           tblptrh	equ	0xFF7
  6143                           tblptrl	equ	0xFF6
  6144                           tablat	equ	0xFF5
  6145                           intcon	equ	0xFF2
  6146                           intcon2	equ	0xFF1
  6147                           intcon3	equ	0xFF0
  6148                           postinc0	equ	0xFEE
  6149                           wreg	equ	0xFE8
  6150                           postdec2	equ	0xFDD
  6151                           fsr2h	equ	0xFDA
  6152                           fsr2l	equ	0xFD9
  6153                           status	equ	0xFD8
  6154                           
  6155 ;; *************** function _LORAWAN_Mainloop *****************
  6156 ;; Defined at:
  6157 ;;		line 2238 in file "mcc_generated_files/LoRaWAN/lorawan.c"
  6158 ;; Parameters:    Size  Location     Type
  6159 ;;		None
  6160 ;; Auto vars:     Size  Location     Type
  6161 ;;		None
  6162 ;; Return value:  Size  Location     Type
  6163 ;;                  1    wreg      void 
  6164 ;; Registers used:
  6165 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, btemp, btemp+1, btemp+2, btemp+4, btemp+
      +5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6166 ;; Tracked objects:
  6167 ;;		On entry : 0/0
  6168 ;;		On exit  : 0/0
  6169 ;;		Unchanged: 0/0
  6170 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6171 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6172 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6173 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6174 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6175 ;;Total ram usage:        0 bytes
  6176 ;; Hardware stack levels used:    1
  6177 ;; Hardware stack levels required when called:   18
  6178 ;; This function calls:
  6179 ;;		_INTERRUPT_GetDioStatus
  6180 ;;		_RADIO_DIO0
  6181 ;;		_RADIO_DIO1
  6182 ;;		_RADIO_DIO2
  6183 ;;		_RADIO_DIO3
  6184 ;;		_RADIO_DIO4
  6185 ;;		_RADIO_DIO5
  6186 ;;		_SwTimersExecute
  6187 ;; This function is called by:
  6188 ;;		_main
  6189 ;; This function uses a non-reentrant model
  6190 ;;
  6191                           
  6192                           	psect	text35
  6193  008B4C                     __ptext35:
  6194                           	opt stack 0
  6195  008B4C                     _LORAWAN_Mainloop:
  6196                           	opt stack 12
  6197                           
  6198                           ;lorawan.c: 2240: SwTimersExecute();
  6199                           
  6200                           ;incstack = 0
  6201  008B4C  EC40  F034         	call	_SwTimersExecute	;wreg free
  6202                           
  6203                           ;lorawan.c: 2243: localDioStatus = INTERRUPT_GetDioStatus();
  6204  008B50  ECBA  F049         	call	_INTERRUPT_GetDioStatus	;wreg free
  6205  008B54  0101               	movlb	1	; () banked
  6206  008B56  6F53               	movwf	_localDioStatus& (0+255),b
  6207                           
  6208                           ; BSR set to: 1
  6209                           ;lorawan.c: 2245: if ((localDioStatus & 0x01) != 0)
  6210  008B58  B153               	btfsc	_localDioStatus& (0+255),0,b
  6211                           
  6212                           ; BSR set to: 1
  6213                           ;lorawan.c: 2246: {
  6214                           ;lorawan.c: 2247: RADIO_DIO0();
  6215  008B5A  ECFF  F03A         	call	_RADIO_DIO0	;wreg free
  6216                           
  6217                           ;lorawan.c: 2248: }
  6218                           ;lorawan.c: 2249: if ((localDioStatus & 0x02) != 0)
  6219  008B5E  0101               	movlb	1	; () banked
  6220  008B60  B353               	btfsc	_localDioStatus& (0+255),1,b
  6221                           
  6222                           ; BSR set to: 1
  6223                           ;lorawan.c: 2250: {
  6224                           ;lorawan.c: 2251: RADIO_DIO1();
  6225  008B62  EC9F  F043         	call	_RADIO_DIO1	;wreg free
  6226                           
  6227                           ;lorawan.c: 2252: }
  6228                           ;lorawan.c: 2253: if ((localDioStatus & 0x04) != 0)
  6229  008B66  0101               	movlb	1	; () banked
  6230  008B68  B553               	btfsc	_localDioStatus& (0+255),2,b
  6231                           
  6232                           ; BSR set to: 1
  6233                           ;lorawan.c: 2254: {
  6234                           ;lorawan.c: 2255: RADIO_DIO2();
  6235  008B6A  ECA5  F042         	call	_RADIO_DIO2	;wreg free
  6236                           
  6237                           ;lorawan.c: 2256: }
  6238                           ;lorawan.c: 2257: if ((localDioStatus & 0x08) != 0)
  6239  008B6E  0101               	movlb	1	; () banked
  6240  008B70  B753               	btfsc	_localDioStatus& (0+255),3,b
  6241                           
  6242                           ; BSR set to: 1
  6243                           ;lorawan.c: 2258: {
  6244                           ;lorawan.c: 2259: RADIO_DIO3();
  6245  008B72  EC6B  F048         	call	_RADIO_DIO3	;wreg free
  6246                           
  6247                           ;lorawan.c: 2260: }
  6248                           ;lorawan.c: 2261: if ((localDioStatus & 0x10) != 0)
  6249  008B76  0101               	movlb	1	; () banked
  6250  008B78  B953               	btfsc	_localDioStatus& (0+255),4,b
  6251                           
  6252                           ; BSR set to: 1
  6253                           ;lorawan.c: 2262: {
  6254                           ;lorawan.c: 2263: RADIO_DIO4();
  6255  008B7A  EC39  F046         	call	_RADIO_DIO4	;wreg free
  6256                           
  6257                           ;lorawan.c: 2264: }
  6258                           ;lorawan.c: 2265: if ((localDioStatus & 0x20) != 0)
  6259  008B7E  0101               	movlb	1	; () banked
  6260  008B80  AB53               	btfss	_localDioStatus& (0+255),5,b
  6261  008B82  0012               	return	
  6262                           
  6263                           ; BSR set to: 1
  6264                           ;lorawan.c: 2266: {
  6265                           ;lorawan.c: 2267: RADIO_DIO5();
  6266  008B84  ECAB  F047         	call	_RADIO_DIO5	;wreg free
  6267  008B88  0012               	return	
  6268  008B8A                     __end_of_LORAWAN_Mainloop:
  6269                           	opt stack 0
  6270                           tblptru	equ	0xFF8
  6271                           tblptrh	equ	0xFF7
  6272                           tblptrl	equ	0xFF6
  6273                           tablat	equ	0xFF5
  6274                           intcon	equ	0xFF2
  6275                           intcon2	equ	0xFF1
  6276                           intcon3	equ	0xFF0
  6277                           postinc0	equ	0xFEE
  6278                           wreg	equ	0xFE8
  6279                           postdec2	equ	0xFDD
  6280                           fsr2h	equ	0xFDA
  6281                           fsr2l	equ	0xFD9
  6282                           status	equ	0xFD8
  6283                           
  6284 ;; *************** function _SwTimersExecute *****************
  6285 ;; Defined at:
  6286 ;;		line 260 in file "mcc_generated_files/LoRaWAN/sw_timer.c"
  6287 ;; Parameters:    Size  Location     Type
  6288 ;;		None
  6289 ;; Auto vars:     Size  Location     Type
  6290 ;;  i               1  126[BANK0 ] unsigned char 
  6291 ;; Return value:  Size  Location     Type
  6292 ;;                  1    wreg      void 
  6293 ;; Registers used:
  6294 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, btemp, btemp+1, btemp+2, btemp+4, btemp+
      +5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6295 ;; Tracked objects:
  6296 ;;		On entry : 0/0
  6297 ;;		On exit  : 0/0
  6298 ;;		Unchanged: 0/0
  6299 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6300 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6301 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6302 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6303 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6304 ;;Total ram usage:        5 bytes
  6305 ;; Hardware stack levels used:    1
  6306 ;; Hardware stack levels required when called:   17
  6307 ;; This function calls:
  6308 ;;		Absolute function
  6309 ;;		_AckRetransmissionCallback
  6310 ;;		_AutomaticReplyCallback
  6311 ;;		_DutyCycleCallback
  6312 ;;		_LORAWAN_LinkCheckCallback
  6313 ;;		_LORAWAN_ReceiveWindow1Callback
  6314 ;;		_LORAWAN_ReceiveWindow2Callback
  6315 ;;		_RADIO_RxFSKTimeout
  6316 ;;		_RADIO_WatchdogTimeout
  6317 ;;		_UnconfirmedTransmissionCallback
  6318 ;;		_UpdateJoinSuccessState
  6319 ;; This function is called by:
  6320 ;;		_LORAWAN_Mainloop
  6321 ;; This function uses a non-reentrant model
  6322 ;;
  6323                           
  6324                           	psect	text36
  6325  006880                     __ptext36:
  6326                           	opt stack 0
  6327  006880                     _SwTimersExecute:
  6328                           	opt stack 12
  6329                           
  6330                           ;sw_timer.c: 262: uint8_t i;
  6331                           ;sw_timer.c: 264: (INTCONbits.GIE = 0);
  6332                           
  6333                           ;incstack = 0
  6334  006880  9EF2               	bcf	intcon,7,c	;volatile
  6335                           
  6336                           ;sw_timer.c: 265: for (i = 0; i < allocatedTimers; i++)
  6337  006882  0E00               	movlw	0
  6338  006884  0100               	movlb	0	; () banked
  6339  006886  6FDE               	movwf	SwTimersExecute@i& (0+255),b
  6340  006888  D068               	goto	l1583
  6341  00688A                     
  6342                           ; BSR set to: 0
  6343                           ;sw_timer.c: 266: {
  6344                           ;sw_timer.c: 269: if (swTimers[i].running == 1)
  6345                           
  6346                           ; BSR set to: 0
  6347  00688A  51DE               	movf	SwTimersExecute@i& (0+255),w,b
  6348  00688C  0D08               	mullw	8
  6349  00688E  0E04               	movlw	4
  6350  006890  26F3               	addwf	prodl,f,c
  6351  006892  0E00               	movlw	0
  6352  006894  22F4               	addwfc	prodh,f,c
  6353  006896  0E00               	movlw	low _swTimers
  6354  006898  24F3               	addwf	prodl,w,c
  6355  00689A  6ED9               	movwf	fsr2l,c
  6356  00689C  0E03               	movlw	high _swTimers
  6357  00689E  20F4               	addwfc	prodh,w,c
  6358  0068A0  6EDA               	movwf	fsr2h,c
  6359  0068A2  04DE               	decf	postinc2,w,c
  6360  0068A4  A4D8               	btfss	status,2,c
  6361  0068A6  D057               	goto	l1587
  6362                           
  6363                           ; BSR set to: 0
  6364                           ;sw_timer.c: 270: {
  6365                           ;sw_timer.c: 271: if (0 == swTimers[i].ticksRemaining)
  6366  0068A8  51DE               	movf	SwTimersExecute@i& (0+255),w,b
  6367  0068AA  0D08               	mullw	8
  6368  0068AC  0E00               	movlw	low _swTimers
  6369  0068AE  24F3               	addwf	prodl,w,c
  6370  0068B0  6ED9               	movwf	fsr2l,c
  6371  0068B2  0E03               	movlw	high _swTimers
  6372  0068B4  20F4               	addwfc	prodh,w,c
  6373  0068B6  6EDA               	movwf	fsr2h,c
  6374  0068B8  50DE               	movf	postinc2,w,c
  6375  0068BA  10DE               	iorwf	postinc2,w,c
  6376  0068BC  10DE               	iorwf	postinc2,w,c
  6377  0068BE  10DE               	iorwf	postinc2,w,c
  6378  0068C0  A4D8               	btfss	status,2,c
  6379  0068C2  D049               	goto	l1587
  6380                           
  6381                           ; BSR set to: 0
  6382                           ;sw_timer.c: 272: {
  6383                           ;sw_timer.c: 273: swTimers[i].running = 0;
  6384  0068C4  51DE               	movf	SwTimersExecute@i& (0+255),w,b
  6385  0068C6  0D08               	mullw	8
  6386  0068C8  0E04               	movlw	4
  6387  0068CA  26F3               	addwf	prodl,f,c
  6388  0068CC  0E00               	movlw	0
  6389  0068CE  22F4               	addwfc	prodh,f,c
  6390  0068D0  0E00               	movlw	low _swTimers
  6391  0068D2  24F3               	addwf	prodl,w,c
  6392  0068D4  6ED9               	movwf	fsr2l,c
  6393  0068D6  0E03               	movlw	high _swTimers
  6394  0068D8  20F4               	addwfc	prodh,w,c
  6395  0068DA  6EDA               	movwf	fsr2h,c
  6396  0068DC  0E00               	movlw	0
  6397  0068DE  6EDF               	movwf	indf2,c
  6398                           
  6399                           ;sw_timer.c: 274: if ((0) != swTimers[i].callback)
  6400  0068E0  51DE               	movf	SwTimersExecute@i& (0+255),w,b
  6401  0068E2  0D08               	mullw	8
  6402  0068E4  0E06               	movlw	6
  6403  0068E6  26F3               	addwf	prodl,f,c
  6404  0068E8  0E00               	movlw	0
  6405  0068EA  22F4               	addwfc	prodh,f,c
  6406  0068EC  0E00               	movlw	low _swTimers
  6407  0068EE  24F3               	addwf	prodl,w,c
  6408  0068F0  6ED9               	movwf	fsr2l,c
  6409  0068F2  0E03               	movlw	high _swTimers
  6410  0068F4  20F4               	addwfc	prodh,w,c
  6411  0068F6  6EDA               	movwf	fsr2h,c
  6412  0068F8  50DE               	movf	postinc2,w,c
  6413  0068FA  10DE               	iorwf	postinc2,w,c
  6414  0068FC  B4D8               	btfsc	status,2,c
  6415  0068FE  D02B               	goto	l1587
  6416                           
  6417                           ; BSR set to: 0
  6418                           ;sw_timer.c: 275: {
  6419                           ;sw_timer.c: 276: (INTCONbits.GIE = 1);
  6420  006900  8EF2               	bsf	intcon,7,c	;volatile
  6421                           
  6422                           ; BSR set to: 0
  6423                           ;sw_timer.c: 277: swTimers[i].callback(swTimers[i].callbackParameter);
  6424  006902  51DE               	movf	SwTimersExecute@i& (0+255),w,b
  6425  006904  0D08               	mullw	8
  6426  006906  0E05               	movlw	5
  6427  006908  26F3               	addwf	prodl,f,c
  6428  00690A  0E00               	movlw	0
  6429  00690C  22F4               	addwfc	prodh,f,c
  6430  00690E  0E00               	movlw	low _swTimers
  6431  006910  24F3               	addwf	prodl,w,c
  6432  006912  6ED9               	movwf	fsr2l,c
  6433  006914  0E03               	movlw	high _swTimers
  6434  006916  20F4               	addwfc	prodh,w,c
  6435  006918  6EDA               	movwf	fsr2h,c
  6436  00691A  50DF               	movf	indf2,w,c
  6437  00691C  6EE6               	movwf	postinc1,c
  6438  00691E  51DE               	movf	SwTimersExecute@i& (0+255),w,b
  6439  006920  0D08               	mullw	8
  6440  006922  0E06               	movlw	6
  6441  006924  26F3               	addwf	prodl,f,c
  6442  006926  0E00               	movlw	0
  6443  006928  22F4               	addwfc	prodh,f,c
  6444  00692A  0E00               	movlw	low _swTimers
  6445  00692C  24F3               	addwf	prodl,w,c
  6446  00692E  6ED9               	movwf	fsr2l,c
  6447  006930  0E03               	movlw	high _swTimers
  6448  006932  20F4               	addwfc	prodh,w,c
  6449  006934  6EDA               	movwf	fsr2h,c
  6450  006936  CFDE F0DA          	movff	postinc2,??_SwTimersExecute
  6451  00693A  CFDD F0DB          	movff	postdec2,??_SwTimersExecute+1
  6452  00693E  D801               	call	u16728
  6453  006940  D009               	goto	u16729
  6454  006942                     u16728:
  6455  006942  0005               	push	
  6456  006944  6EFA               	movwf	pclath,c
  6457  006946  51DA               	movf	??_SwTimersExecute& (0+255),w,b
  6458  006948  6EFD               	movwf	tosl,c
  6459  00694A  51DB               	movf	(??_SwTimersExecute+1)& (0+255),w,b
  6460  00694C  6EFE               	movwf	tosh,c
  6461  00694E  6AFF               	clrf	tosu,c
  6462  006950  50FA               	movf	pclath,w,c
  6463  006952  0012               	return		;indir
  6464  006954                     u16729:
  6465                           
  6466                           ;sw_timer.c: 278: (INTCONbits.GIE = 0);
  6467  006954  9EF2               	bcf	intcon,7,c	;volatile
  6468  006956                     l1587:
  6469  006956  0100               	movlb	0	; () banked
  6470  006958  2BDE               	incf	SwTimersExecute@i& (0+255),f,b
  6471  00695A                     l1583:
  6472                           
  6473                           ; BSR set to: 0
  6474                           
  6475                           ; BSR set to: 0
  6476  00695A  0101               	movlb	1	; () banked
  6477  00695C  5152               	movf	_allocatedTimers& (0+255),w,b	;volatile
  6478  00695E  0100               	movlb	0	; () banked
  6479  006960  5DDE               	subwf	SwTimersExecute@i& (0+255),w,b
  6480  006962  A0D8               	btfss	status,0,c
  6481  006964  D792               	goto	l1584
  6482                           
  6483                           ; BSR set to: 0
  6484                           ;sw_timer.c: 279: }
  6485                           ;sw_timer.c: 280: }
  6486                           ;sw_timer.c: 281: }
  6487                           ;sw_timer.c: 282: }
  6488                           ;sw_timer.c: 283: (INTCONbits.GIE = 1);
  6489  006966  8EF2               	bsf	intcon,7,c	;volatile
  6490                           
  6491                           ; BSR set to: 0
  6492  006968  0012               	return		;funcret
  6493  00696A                     __end_of_SwTimersExecute:
  6494                           	opt stack 0
  6495                           tosu	equ	0xFFF
  6496                           tosh	equ	0xFFE
  6497                           tosl	equ	0xFFD
  6498                           pclath	equ	0xFFA
  6499                           tblptru	equ	0xFF8
  6500                           tblptrh	equ	0xFF7
  6501                           tblptrl	equ	0xFF6
  6502                           tablat	equ	0xFF5
  6503                           prodh	equ	0xFF4
  6504                           prodl	equ	0xFF3
  6505                           intcon	equ	0xFF2
  6506                           intcon2	equ	0xFF1
  6507                           intcon3	equ	0xFF0
  6508                           postinc0	equ	0xFEE
  6509                           wreg	equ	0xFE8
  6510                           postinc1	equ	0xFE6
  6511                           indf2	equ	0xFDF
  6512                           postinc2	equ	0xFDE
  6513                           postdec2	equ	0xFDD
  6514                           fsr2h	equ	0xFDA
  6515                           fsr2l	equ	0xFD9
  6516                           status	equ	0xFD8
  6517                           
  6518 ;; *************** function _DutyCycleCallback *****************
  6519 ;; Defined at:
  6520 ;;		line 1221 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
  6521 ;; Parameters:    Size  Location     Type
  6522 ;;  param           1  [STACK] unsigned char 
  6523 ;; Auto vars:     Size  Location     Type
  6524 ;;  minim           4  [STACK] unsigned long 
  6525 ;;  i               1  [STACK] unsigned char 
  6526 ;;  found           1  [STACK] unsigned char 
  6527 ;; Return value:  Size  Location     Type
  6528 ;;                  1  [STACK] void 
  6529 ;; Registers used:
  6530 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+4, btemp+5, btemp+6, btemp+7, btemp+8, btemp+9, b
      +temp+10, btemp+11, prodl, prodh, cstack
  6531 ;; Tracked objects:
  6532 ;;		On entry : 3F/0
  6533 ;;		On exit  : 0/0
  6534 ;;		Unchanged: 0/0
  6535 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6536 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6537 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6538 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6539 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6540 ;;Total ram usage:        0 bytes
  6541 ;; Hardware stack levels used:    1
  6542 ;; Hardware stack levels required when called:   11
  6543 ;; This function calls:
  6544 ;;		_SwTimerSetTimeout
  6545 ;;		_SwTimerStart
  6546 ;;		___lldiv
  6547 ;; This function is called by:
  6548 ;;		_SetCallbackSoftwareTimers
  6549 ;;		_SwTimersExecute
  6550 ;; This function uses a reentrant model
  6551 ;;
  6552                           
  6553                           	psect	text37
  6554  002FB0                     __ptext37:
  6555                           	opt stack 0
  6556  002FB0                     _DutyCycleCallback:
  6557                           	opt stack 0
  6558                           
  6559                           ; BSR set to: 0
  6560                           ; autosize = 10, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, argsize = 1 va
      +                          rgsize = 0, retsize = 0
  6561  002FB0  0E0A               	movlw	10
  6562  002FB2  26E1               	addwf	fsr1l,f,c
  6563  002FB4  0E00               	movlw	0
  6564  002FB6  22E2               	addwfc	fsr1h,f,c
  6565                           
  6566                           ;lorawan_eu.c: 1223: uint32_t minim = (4294967295UL);
  6567                           
  6568                           ;incstack = 0
  6569  002FB8  0EFF               	movlw	255
  6570  002FBA  6E46               	movwf	btemp+8,c
  6571  002FBC  0EFF               	movlw	255
  6572  002FBE  6E47               	movwf	btemp+9,c
  6573  002FC0  0EFF               	movlw	255
  6574  002FC2  6E48               	movwf	btemp+10,c
  6575  002FC4  0EFF               	movlw	255
  6576  002FC6  6E49               	movwf	btemp+11,c
  6577                           
  6578                           ;stkvar	DutyCycleCallback@minim @ sp[(-10)+4]
  6579  002FC8  0EFA               	movlw	-6
  6580  002FCA  C046  FFE3         	movff	btemp+8,plusw1
  6581  002FCE  0EFB               	movlw	-5
  6582  002FD0  C047  FFE3         	movff	btemp+9,plusw1
  6583  002FD4  0EFC               	movlw	-4
  6584  002FD6  C048  FFE3         	movff	btemp+10,plusw1
  6585  002FDA  0EFD               	movlw	-3
  6586  002FDC  C049  FFE3         	movff	btemp+11,plusw1
  6587                           
  6588                           ;lorawan_eu.c: 1224: bool found = 0;
  6589                           ;stkvar	DutyCycleCallback@found @ sp[(-10)+9]
  6590  002FE0  0EFF               	movlw	-1
  6591  002FE2  6AE3               	clrf	plusw1,c
  6592                           
  6593                           ;lorawan_eu.c: 1225: uint8_t i;
  6594                           ;lorawan_eu.c: 1227: for (i=0; i < 16; i++)
  6595                           ;stkvar	DutyCycleCallback@i @ sp[(-10)+8]
  6596  002FE4  0EFE               	movlw	-2
  6597  002FE6  6AE3               	clrf	plusw1,c
  6598  002FE8                     l12215:
  6599                           
  6600                           ;lorawan_eu.c: 1228: {
  6601                           ;lorawan_eu.c: 1230: if ((Channels[i].status == 1) && ( Channels[i].channelTimer != 0 ))
  6602                           ;stkvar	DutyCycleCallback@i @ sp[(-10)+8]
  6603  002FE8  0EFE               	movlw	-2
  6604  002FEA  50E3               	movf	plusw1,w,c
  6605  002FEC  0D0E               	mullw	14
  6606  002FEE  0E04               	movlw	low (_Channels+4)
  6607  002FF0  24F3               	addwf	prodl,w,c
  6608  002FF2  6ED9               	movwf	fsr2l,c
  6609  002FF4  0E04               	movlw	high (_Channels+4)
  6610  002FF6  20F4               	addwfc	prodh,w,c
  6611  002FF8  6EDA               	movwf	fsr2h,c
  6612  002FFA  04DE               	decf	postinc2,w,c
  6613  002FFC  A4D8               	btfss	status,2,c
  6614  002FFE  D0AD               	goto	l12233
  6615                           
  6616                           ;stkvar	DutyCycleCallback@i @ sp[(-10)+8]
  6617  003000  0EFE               	movlw	-2
  6618  003002  50E3               	movf	plusw1,w,c
  6619  003004  0D0E               	mullw	14
  6620  003006  0E08               	movlw	low (_Channels+8)
  6621  003008  24F3               	addwf	prodl,w,c
  6622  00300A  6ED9               	movwf	fsr2l,c
  6623  00300C  0E04               	movlw	high (_Channels+8)
  6624  00300E  20F4               	addwfc	prodh,w,c
  6625  003010  6EDA               	movwf	fsr2h,c
  6626  003012  50DE               	movf	postinc2,w,c
  6627  003014  10DE               	iorwf	postinc2,w,c
  6628  003016  10DE               	iorwf	postinc2,w,c
  6629  003018  10DE               	iorwf	postinc2,w,c
  6630  00301A  B4D8               	btfsc	status,2,c
  6631  00301C  D09E               	goto	l12233
  6632                           
  6633                           ;lorawan_eu.c: 1231: {
  6634                           ;lorawan_eu.c: 1232: if ( Channels[i].channelTimer > loRa.lastTimerValue )
  6635                           ;stkvar	DutyCycleCallback@i @ sp[(-10)+8]
  6636  00301E  0EFE               	movlw	-2
  6637  003020  50E3               	movf	plusw1,w,c
  6638  003022  0D0E               	mullw	14
  6639  003024  0E08               	movlw	low (_Channels+8)
  6640  003026  24F3               	addwf	prodl,w,c
  6641  003028  6ED9               	movwf	fsr2l,c
  6642  00302A  0E04               	movlw	high (_Channels+8)
  6643  00302C  20F4               	addwfc	prodh,w,c
  6644  00302E  6EDA               	movwf	fsr2h,c
  6645  003030  50DE               	movf	postinc2,w,c
  6646  003032  0102               	movlb	2	; () banked
  6647  003034  5DD2               	subwf	(_loRa+200)& (0+255),w,b
  6648  003036  50DE               	movf	postinc2,w,c
  6649  003038  59D3               	subwfb	(_loRa+201)& (0+255),w,b
  6650  00303A  50DE               	movf	postinc2,w,c
  6651  00303C  59D4               	subwfb	(_loRa+202)& (0+255),w,b
  6652  00303E  50DE               	movf	postinc2,w,c
  6653  003040  59D5               	subwfb	(_loRa+203)& (0+255),w,b
  6654  003042  B0D8               	btfsc	status,0,c
  6655  003044  D02F               	goto	l12223
  6656                           
  6657                           ; BSR set to: 2
  6658                           ;lorawan_eu.c: 1233: {
  6659                           ;lorawan_eu.c: 1234: Channels[i].channelTimer = Channels[i].channelTimer - loRa.lastTime
      +                          rValue;
  6660                           ;stkvar	DutyCycleCallback@i @ sp[(-10)+8]
  6661  003046  0EFE               	movlw	-2
  6662  003048  50E3               	movf	plusw1,w,c
  6663  00304A  0D0E               	mullw	14
  6664  00304C  0E08               	movlw	low (_Channels+8)
  6665  00304E  24F3               	addwf	prodl,w,c
  6666  003050  6ED9               	movwf	fsr2l,c
  6667  003052  0E04               	movlw	high (_Channels+8)
  6668  003054  20F4               	addwfc	prodh,w,c
  6669  003056  6EDA               	movwf	fsr2h,c
  6670  003058  CFDE F046          	movff	postinc2,btemp+8
  6671  00305C  CFDE F047          	movff	postinc2,btemp+9
  6672  003060  CFDE F048          	movff	postinc2,btemp+10
  6673  003064  CFDE F049          	movff	postinc2,btemp+11
  6674  003068  51D2               	movf	(_loRa+200)& (0+255),w,b
  6675  00306A  5C46               	subwf	btemp+8,w,c
  6676  00306C  6E42               	movwf	btemp+4,c
  6677  00306E  51D3               	movf	(_loRa+201)& (0+255),w,b
  6678  003070  5847               	subwfb	btemp+9,w,c
  6679  003072  6E43               	movwf	btemp+5,c
  6680  003074  51D4               	movf	(_loRa+202)& (0+255),w,b
  6681  003076  5848               	subwfb	btemp+10,w,c
  6682  003078  6E44               	movwf	btemp+6,c
  6683  00307A  51D5               	movf	(_loRa+203)& (0+255),w,b
  6684  00307C  5849               	subwfb	btemp+11,w,c
  6685  00307E  6E45               	movwf	btemp+7,c
  6686                           
  6687                           ;stkvar	DutyCycleCallback@i @ sp[(-10)+8]
  6688  003080  0EFE               	movlw	-2
  6689  003082  50E3               	movf	plusw1,w,c
  6690  003084  0D0E               	mullw	14
  6691  003086  0E08               	movlw	low (_Channels+8)
  6692  003088  24F3               	addwf	prodl,w,c
  6693  00308A  6ED9               	movwf	fsr2l,c
  6694  00308C  0E04               	movlw	high (_Channels+8)
  6695  00308E  20F4               	addwfc	prodh,w,c
  6696  003090  6EDA               	movwf	fsr2h,c
  6697  003092  C042  FFDE         	movff	btemp+4,postinc2
  6698  003096  C043  FFDE         	movff	btemp+5,postinc2
  6699  00309A  C044  FFDE         	movff	btemp+6,postinc2
  6700  00309E  C045  FFDE         	movff	btemp+7,postinc2
  6701                           
  6702                           ;lorawan_eu.c: 1235: }
  6703  0030A2  D00D               	goto	l12225
  6704  0030A4                     l12223:
  6705                           
  6706                           ; BSR set to: 2
  6707                           ;lorawan_eu.c: 1236: else
  6708                           ;lorawan_eu.c: 1237: {
  6709                           ;lorawan_eu.c: 1238: Channels[i].channelTimer = 0;
  6710                           ;stkvar	DutyCycleCallback@i @ sp[(-10)+8]
  6711  0030A4  0EFE               	movlw	-2
  6712  0030A6  50E3               	movf	plusw1,w,c
  6713  0030A8  0D0E               	mullw	14
  6714  0030AA  0E08               	movlw	low (_Channels+8)
  6715  0030AC  24F3               	addwf	prodl,w,c
  6716  0030AE  6ED9               	movwf	fsr2l,c
  6717  0030B0  0E04               	movlw	high (_Channels+8)
  6718  0030B2  20F4               	addwfc	prodh,w,c
  6719  0030B4  6EDA               	movwf	fsr2h,c
  6720  0030B6  6ADE               	clrf	postinc2,c
  6721  0030B8  6ADE               	clrf	postinc2,c
  6722  0030BA  6ADE               	clrf	postinc2,c
  6723  0030BC  6ADD               	clrf	postdec2,c
  6724  0030BE                     l12225:
  6725                           
  6726                           ; BSR set to: 2
  6727                           ;lorawan_eu.c: 1239: }
  6728                           ;lorawan_eu.c: 1240: if ( (Channels[i].channelTimer <= minim) && (Channels[i].channelTim
      +                          er != 0) )
  6729                           ;stkvar	DutyCycleCallback@i @ sp[(-10)+8]
  6730  0030BE  0EFE               	movlw	-2
  6731  0030C0  50E3               	movf	plusw1,w,c
  6732  0030C2  0D0E               	mullw	14
  6733  0030C4  0E08               	movlw	low (_Channels+8)
  6734  0030C6  24F3               	addwf	prodl,w,c
  6735  0030C8  6ED9               	movwf	fsr2l,c
  6736  0030CA  0E04               	movlw	high (_Channels+8)
  6737  0030CC  20F4               	addwfc	prodh,w,c
  6738  0030CE  6EDA               	movwf	fsr2h,c
  6739                           
  6740                           ;stkvar	DutyCycleCallback@minim @ sp[(-10)+4]
  6741  0030D0  0EFA               	movlw	-6
  6742  0030D2  CFE3 F03E          	movff	plusw1,btemp
  6743  0030D6  50DE               	movf	postinc2,w,c
  6744  0030D8  5C3E               	subwf	btemp,w,c
  6745  0030DA  0EFB               	movlw	-5
  6746  0030DC  CFE3 F03E          	movff	plusw1,btemp
  6747  0030E0  50DE               	movf	postinc2,w,c
  6748  0030E2  583E               	subwfb	btemp,w,c
  6749  0030E4  0EFC               	movlw	-4
  6750  0030E6  CFE3 F03E          	movff	plusw1,btemp
  6751  0030EA  50DE               	movf	postinc2,w,c
  6752  0030EC  583E               	subwfb	btemp,w,c
  6753  0030EE  0EFD               	movlw	-3
  6754  0030F0  CFE3 F03E          	movff	plusw1,btemp
  6755  0030F4  50DE               	movf	postinc2,w,c
  6756  0030F6  583E               	subwfb	btemp,w,c
  6757  0030F8  A0D8               	btfss	status,0,c
  6758  0030FA  D02F               	goto	l12233
  6759                           
  6760                           ; BSR set to: 2
  6761                           ;stkvar	DutyCycleCallback@i @ sp[(-10)+8]
  6762  0030FC  0EFE               	movlw	-2
  6763  0030FE  50E3               	movf	plusw1,w,c
  6764  003100  0D0E               	mullw	14
  6765  003102  0E08               	movlw	low (_Channels+8)
  6766  003104  24F3               	addwf	prodl,w,c
  6767  003106  6ED9               	movwf	fsr2l,c
  6768  003108  0E04               	movlw	high (_Channels+8)
  6769  00310A  20F4               	addwfc	prodh,w,c
  6770  00310C  6EDA               	movwf	fsr2h,c
  6771  00310E  50DE               	movf	postinc2,w,c
  6772  003110  10DE               	iorwf	postinc2,w,c
  6773  003112  10DE               	iorwf	postinc2,w,c
  6774  003114  10DE               	iorwf	postinc2,w,c
  6775  003116  B4D8               	btfsc	status,2,c
  6776  003118  D020               	goto	l12233
  6777                           
  6778                           ; BSR set to: 2
  6779                           ;lorawan_eu.c: 1241: {
  6780                           ;lorawan_eu.c: 1242: minim = Channels[i].channelTimer;
  6781                           ;stkvar	DutyCycleCallback@i @ sp[(-10)+8]
  6782  00311A  0EFE               	movlw	-2
  6783  00311C  50E3               	movf	plusw1,w,c
  6784  00311E  0D0E               	mullw	14
  6785  003120  0E08               	movlw	low (_Channels+8)
  6786  003122  24F3               	addwf	prodl,w,c
  6787  003124  6ED9               	movwf	fsr2l,c
  6788  003126  0E04               	movlw	high (_Channels+8)
  6789  003128  20F4               	addwfc	prodh,w,c
  6790  00312A  6EDA               	movwf	fsr2h,c
  6791  00312C  CFDE F046          	movff	postinc2,btemp+8
  6792  003130  CFDE F047          	movff	postinc2,btemp+9
  6793  003134  CFDE F048          	movff	postinc2,btemp+10
  6794  003138  CFDE F049          	movff	postinc2,btemp+11
  6795                           
  6796                           ;stkvar	DutyCycleCallback@minim @ sp[(-10)+4]
  6797  00313C  0EFA               	movlw	-6
  6798  00313E  C046  FFE3         	movff	btemp+8,plusw1
  6799  003142  0EFB               	movlw	-5
  6800  003144  C047  FFE3         	movff	btemp+9,plusw1
  6801  003148  0EFC               	movlw	-4
  6802  00314A  C048  FFE3         	movff	btemp+10,plusw1
  6803  00314E  0EFD               	movlw	-3
  6804  003150  C049  FFE3         	movff	btemp+11,plusw1
  6805                           
  6806                           ; BSR set to: 2
  6807                           ;lorawan_eu.c: 1243: found = 1;
  6808                           ;stkvar	DutyCycleCallback@found @ sp[(-10)+9]
  6809  003154  0EFF               	movlw	-1
  6810  003156  6AE3               	clrf	plusw1,c
  6811  003158  2AE3               	incf	plusw1,f,c
  6812  00315A                     l12233:
  6813                           
  6814                           ;stkvar	DutyCycleCallback@i @ sp[(-10)+8]
  6815  00315A  0EFE               	movlw	-2
  6816  00315C  2AE3               	incf	plusw1,f,c
  6817                           
  6818                           ;stkvar	DutyCycleCallback@i @ sp[(-10)+8]
  6819  00315E  0EFE               	movlw	-2
  6820  003160  CFE3 F03E          	movff	plusw1,btemp
  6821  003164  0E0F               	movlw	15
  6822  003166  643E               	cpfsgt	btemp,c
  6823  003168  D73F               	goto	l12215
  6824                           
  6825                           ;lorawan_eu.c: 1244: }
  6826                           ;lorawan_eu.c: 1245: }
  6827                           ;lorawan_eu.c: 1246: }
  6828                           ;lorawan_eu.c: 1247: if ( found == 1 )
  6829                           ;stkvar	DutyCycleCallback@found @ sp[(-10)+9]
  6830  00316A  0EFF               	movlw	-1
  6831  00316C  04E3               	decf	plusw1,w,c
  6832  00316E  A4D8               	btfss	status,2,c
  6833  003170  D09D               	goto	l2143
  6834                           
  6835                           ;lorawan_eu.c: 1248: {
  6836                           ;lorawan_eu.c: 1249: loRa.lastTimerValue = minim;
  6837                           ;stkvar	DutyCycleCallback@minim @ sp[(-10)+4]
  6838  003172  50E1               	movf	fsr1l,w,c
  6839  003174  0FFA               	addlw	-6
  6840  003176  6ED9               	movwf	fsr2l,c
  6841  003178  50E2               	movf	fsr1h,w,c
  6842  00317A  6EDA               	movwf	fsr2h,c
  6843  00317C  0EFF               	movlw	255
  6844  00317E  22DA               	addwfc	fsr2h,f,c
  6845  003180  CFDE F2D2          	movff	postinc2,_loRa+200
  6846  003184  CFDE F2D3          	movff	postinc2,_loRa+201
  6847  003188  CFDE F2D4          	movff	postinc2,_loRa+202
  6848  00318C  CFDE F2D5          	movff	postinc2,_loRa+203
  6849                           
  6850                           ;lorawan_eu.c: 1250: SwTimerSetTimeout (loRa.dutyCycleTimerId, ((minim) < 0x000FFFFFUL ?
      +                           ( (((uint32_t)(minim)) << (12)) / 125UL ) : ( (((uint32_t)(minim)) / 125UL) << (12) ) )
      +                          );
  6851                           ;stkvar	DutyCycleCallback@minim @ sp[(-10)+4]
  6852  003190  0EFD               	movlw	-3
  6853  003192  50E3               	movf	plusw1,w,c
  6854  003194  E10E               	bnz	u13440
  6855  003196  0EFA               	movlw	-6
  6856  003198  28E3               	incf	plusw1,w,c
  6857  00319A  0EFB               	movlw	-5
  6858  00319C  CFE3 F03E          	movff	plusw1,btemp
  6859  0031A0  0EFF               	movlw	255
  6860  0031A2  5A3E               	subwfb	btemp,f,c
  6861  0031A4  0EFC               	movlw	-4
  6862  0031A6  CFE3 F03E          	movff	plusw1,btemp
  6863  0031AA  0E0F               	movlw	15
  6864  0031AC  5A3E               	subwfb	btemp,f,c
  6865  0031AE  A0D8               	btfss	status,0,c
  6866  0031B0  D02B               	goto	l12245
  6867  0031B2                     u13440:
  6868                           
  6869                           ;stkvar	DutyCycleCallback@minim @ sp[(-10)+4]
  6870  0031B2  50E1               	movf	fsr1l,w,c
  6871  0031B4  0FFA               	addlw	-6
  6872  0031B6  6ED9               	movwf	fsr2l,c
  6873  0031B8  50E2               	movf	fsr1h,w,c
  6874  0031BA  6EDA               	movwf	fsr2h,c
  6875  0031BC  0EFF               	movlw	255
  6876  0031BE  22DA               	addwfc	fsr2h,f,c
  6877  0031C0  CFDE F060          	movff	postinc2,___lldiv@dividend
  6878  0031C4  CFDE F061          	movff	postinc2,___lldiv@dividend+1
  6879  0031C8  CFDE F062          	movff	postinc2,___lldiv@dividend+2
  6880  0031CC  CFDE F063          	movff	postinc2,___lldiv@dividend+3
  6881  0031D0  0E7D               	movlw	125
  6882  0031D2  0100               	movlb	0	; () banked
  6883  0031D4  6F64               	movwf	___lldiv@divisor& (0+255),b
  6884  0031D6  0E00               	movlw	0
  6885  0031D8  6F65               	movwf	(___lldiv@divisor+1)& (0+255),b
  6886  0031DA  0E00               	movlw	0
  6887  0031DC  6F66               	movwf	(___lldiv@divisor+2)& (0+255),b
  6888  0031DE  0E00               	movlw	0
  6889  0031E0  6F67               	movwf	(___lldiv@divisor+3)& (0+255),b
  6890  0031E2  ECE4  F03C         	call	___lldiv	;wreg free
  6891  0031E6  C060  F046         	movff	?___lldiv,btemp+8
  6892  0031EA  C061  F047         	movff	?___lldiv+1,btemp+9
  6893  0031EE  C062  F048         	movff	?___lldiv+2,btemp+10
  6894  0031F2  C063  F049         	movff	?___lldiv+3,btemp+11
  6895  0031F6  0E0C               	movlw	12
  6896  0031F8                     u13455:
  6897  0031F8  90D8               	bcf	status,0,c
  6898  0031FA  3646               	rlcf	btemp+8,f,c
  6899  0031FC  3647               	rlcf	btemp+9,f,c
  6900  0031FE  3648               	rlcf	btemp+10,f,c
  6901  003200  3649               	rlcf	btemp+11,f,c
  6902  003202  2EE8               	decfsz	wreg,f,c
  6903  003204  D7F9               	goto	u13455
  6904  003206  D02F               	goto	L1
  6905  003208                     l12245:
  6906                           
  6907                           ;stkvar	DutyCycleCallback@minim @ sp[(-10)+4]
  6908  003208  0EFA               	movlw	-6
  6909  00320A  CFE3 F046          	movff	plusw1,btemp+8
  6910  00320E  0EFB               	movlw	-5
  6911  003210  CFE3 F047          	movff	plusw1,btemp+9
  6912  003214  0EFC               	movlw	-4
  6913  003216  CFE3 F048          	movff	plusw1,btemp+10
  6914  00321A  0EFD               	movlw	-3
  6915  00321C  CFE3 F049          	movff	plusw1,btemp+11
  6916  003220  0E0C               	movlw	12
  6917  003222                     u13465:
  6918  003222  90D8               	bcf	status,0,c
  6919  003224  3646               	rlcf	btemp+8,f,c
  6920  003226  3647               	rlcf	btemp+9,f,c
  6921  003228  3648               	rlcf	btemp+10,f,c
  6922  00322A  3649               	rlcf	btemp+11,f,c
  6923  00322C  2EE8               	decfsz	wreg,f,c
  6924  00322E  D7F9               	goto	u13465
  6925  003230  C046  F060         	movff	btemp+8,___lldiv@dividend
  6926  003234  C047  F061         	movff	btemp+9,___lldiv@dividend+1
  6927  003238  C048  F062         	movff	btemp+10,___lldiv@dividend+2
  6928  00323C  C049  F063         	movff	btemp+11,___lldiv@dividend+3
  6929  003240  0E7D               	movlw	125
  6930  003242  0100               	movlb	0	; () banked
  6931  003244  6F64               	movwf	___lldiv@divisor& (0+255),b
  6932  003246  0E00               	movlw	0
  6933  003248  6F65               	movwf	(___lldiv@divisor+1)& (0+255),b
  6934  00324A  0E00               	movlw	0
  6935  00324C  6F66               	movwf	(___lldiv@divisor+2)& (0+255),b
  6936  00324E  0E00               	movlw	0
  6937  003250  6F67               	movwf	(___lldiv@divisor+3)& (0+255),b
  6938  003252  ECE4  F03C         	call	___lldiv	;wreg free
  6939  003256  C060  F046         	movff	?___lldiv,btemp+8
  6940  00325A  C061  F047         	movff	?___lldiv+1,btemp+9
  6941  00325E  C062  F048         	movff	?___lldiv+2,btemp+10
  6942  003262  C063  F049         	movff	?___lldiv+3,btemp+11
  6943  003266                     L1:
  6944                           
  6945                           ;stkvar	_DutyCycleCallback$2817 @ sp[(-10)+0]
  6946  003266  0EF6               	movlw	-10
  6947  003268  C046  FFE3         	movff	btemp+8,plusw1
  6948  00326C  0EF7               	movlw	-9
  6949  00326E  C047  FFE3         	movff	btemp+9,plusw1
  6950  003272  0EF8               	movlw	-8
  6951  003274  C048  FFE3         	movff	btemp+10,plusw1
  6952  003278  0EF9               	movlw	-7
  6953  00327A  C049  FFE3         	movff	btemp+11,plusw1
  6954                           
  6955                           ;stkvar	_DutyCycleCallback$2817 @ sp[(-10)+0]
  6956  00327E  50E1               	movf	fsr1l,w,c
  6957  003280  0FF6               	addlw	-10
  6958  003282  6ED9               	movwf	fsr2l,c
  6959  003284  50E2               	movf	fsr1h,w,c
  6960  003286  6EDA               	movwf	fsr2h,c
  6961  003288  0EFF               	movlw	255
  6962  00328A  22DA               	addwfc	fsr2h,f,c
  6963  00328C  CFDE F06D          	movff	postinc2,SwTimerSetTimeout@timeout
  6964  003290  CFDE F06E          	movff	postinc2,SwTimerSetTimeout@timeout+1
  6965  003294  CFDE F06F          	movff	postinc2,SwTimerSetTimeout@timeout+2
  6966  003298  CFDE F070          	movff	postinc2,SwTimerSetTimeout@timeout+3
  6967  00329C  0102               	movlb	2	; () banked
  6968  00329E  51F3               	movf	(_loRa+233)& (0+255),w,b
  6969  0032A0  EC01  F045         	call	_SwTimerSetTimeout
  6970                           
  6971                           ;lorawan_eu.c: 1251: SwTimerStart (loRa.dutyCycleTimerId);
  6972  0032A4  0102               	movlb	2	; () banked
  6973  0032A6  51F3               	movf	(_loRa+233)& (0+255),w,b
  6974  0032A8  ECB4  F03A         	call	_SwTimerStart
  6975  0032AC                     l2143:
  6976                           
  6977                           ; _DutyCycleCallback: autosize = 10, savesize = 0, parsavesize = 0, tempsize = 0 parsize
      +                           = 1, argsize = 1, vargsize = 0
  6978  0032AC  0EF5               	movlw	245
  6979  0032AE  26E1               	addwf	fsr1l,f,c
  6980  0032B0  0EFF               	movlw	255
  6981  0032B2  22E2               	addwfc	fsr1h,f,c
  6982  0032B4  0012               	return		;funcret
  6983  0032B6                     __end_of_DutyCycleCallback:
  6984                           	opt stack 0
  6985                           tosu	equ	0xFFF
  6986                           tosh	equ	0xFFE
  6987                           tosl	equ	0xFFD
  6988                           pclath	equ	0xFFA
  6989                           tblptru	equ	0xFF8
  6990                           tblptrh	equ	0xFF7
  6991                           tblptrl	equ	0xFF6
  6992                           tablat	equ	0xFF5
  6993                           prodh	equ	0xFF4
  6994                           prodl	equ	0xFF3
  6995                           intcon	equ	0xFF2
  6996                           intcon2	equ	0xFF1
  6997                           intcon3	equ	0xFF0
  6998                           postinc0	equ	0xFEE
  6999                           wreg	equ	0xFE8
  7000                           postinc1	equ	0xFE6
  7001                           plusw1	equ	0xFE3
  7002                           fsr1h	equ	0xFE2
  7003                           fsr1l	equ	0xFE1
  7004                           indf2	equ	0xFDF
  7005                           postinc2	equ	0xFDE
  7006                           postdec2	equ	0xFDD
  7007                           fsr2h	equ	0xFDA
  7008                           fsr2l	equ	0xFD9
  7009                           status	equ	0xFD8
  7010                           
  7011 ;; *************** function _UpdateJoinSuccessState *****************
  7012 ;; Defined at:
  7013 ;;		line 1041 in file "mcc_generated_files/LoRaWAN/lorawan.c"
  7014 ;; Parameters:    Size  Location     Type
  7015 ;;  param           1  [STACK] unsigned char 
  7016 ;; Auto vars:     Size  Location     Type
  7017 ;;		None
  7018 ;; Return value:  Size  Location     Type
  7019 ;;                  1  [STACK] void 
  7020 ;; Registers used:
  7021 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, btemp+8, btemp+9, btemp+10, btemp+11, tosl, prodl, pro
      +dh, cstack
  7022 ;; Tracked objects:
  7023 ;;		On entry : 0/0
  7024 ;;		On exit  : 0/0
  7025 ;;		Unchanged: 0/0
  7026 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7027 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7028 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7029 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7030 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7031 ;;Total ram usage:        0 bytes
  7032 ;; Hardware stack levels used:    1
  7033 ;; Hardware stack levels required when called:   11
  7034 ;; This function calls:
  7035 ;;		_RxJoinResponse
  7036 ;;		_SwTimerSetTimeout
  7037 ;;		_SwTimerStart
  7038 ;;		___lldiv
  7039 ;; This function is called by:
  7040 ;;		_LORAWAN_RxDone
  7041 ;;		_SetCallbackSoftwareTimers
  7042 ;;		_SwTimersExecute
  7043 ;; This function uses a reentrant model
  7044 ;;
  7045                           
  7046                           	psect	text38
  7047  005BD4                     __ptext38:
  7048                           	opt stack 0
  7049  005BD4                     _UpdateJoinSuccessState:
  7050                           	opt stack 0
  7051                           
  7052                           ; autosize = 4, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, argsize = 1 var
      +                          gsize = 0, retsize = 0
  7053  005BD4  52E6               	movf	postinc1,f,c
  7054  005BD6  52E6               	movf	postinc1,f,c
  7055  005BD8  52E6               	movf	postinc1,f,c
  7056  005BDA  52E6               	movf	postinc1,f,c
  7057                           
  7058                           ;lorawan.c: 1043: loRa.lorawanMacStatus.joining = 0;
  7059                           
  7060                           ;incstack = 0
  7061  005BDC  0102               	movlb	2	; () banked
  7062  005BDE  950A               	bcf	_loRa& (0+255),2,b
  7063                           
  7064                           ;lorawan.c: 1044: loRa.macStatus.networkJoined = 1;
  7065  005BE0  890C               	bsf	(_loRa+2)& (0+255),4,b
  7066                           
  7067                           ; BSR set to: 2
  7068                           ;lorawan.c: 1045: loRa.macStatus.macState = IDLE;
  7069  005BE2  0EF0               	movlw	-16
  7070  005BE4  170C               	andwf	(_loRa+2)& (0+255),f,b
  7071                           
  7072                           ; BSR set to: 2
  7073                           ;lorawan.c: 1047: loRa.adrAckCnt = 0;
  7074  005BE6  6BDA               	clrf	(_loRa+208)& (0+255),b
  7075  005BE8  6BDB               	clrf	(_loRa+209)& (0+255),b
  7076                           
  7077                           ; BSR set to: 2
  7078                           ;lorawan.c: 1048: loRa.counterAdrAckDelay = 0;
  7079  005BEA  6BF8               	clrf	(_loRa+238)& (0+255),b
  7080                           
  7081                           ; BSR set to: 2
  7082                           ;lorawan.c: 1051: if (loRa.macStatus.linkCheck == 1)
  7083  005BEC  A50D               	btfss	(_loRa+3)& (0+255),2,b
  7084  005BEE  D07B               	goto	l10807
  7085                           
  7086                           ; BSR set to: 2
  7087                           ;lorawan.c: 1052: {
  7088                           ;lorawan.c: 1053: SwTimerSetTimeout(loRa.linkCheckTimerId, ((loRa.periodForLinkCheck) < 
      +                          0x000FFFFFUL ? ( (((uint32_t)(loRa.periodForLinkCheck)) << (12)) / 125UL ) : ( (((uint32
      +                          _t)(loRa.periodForLinkCheck)) / 125UL) << (12) ) ));
  7089  005BF0  51D9               	movf	(_loRa+207)& (0+255),w,b
  7090  005BF2  E107               	bnz	u10790
  7091  005BF4  29D6               	incf	(_loRa+204)& (0+255),w,b
  7092  005BF6  0EFF               	movlw	255
  7093  005BF8  59D7               	subwfb	(_loRa+205)& (0+255),w,b
  7094  005BFA  0E0F               	movlw	15
  7095  005BFC  59D8               	subwfb	(_loRa+206)& (0+255),w,b
  7096  005BFE  A0D8               	btfss	status,0,c
  7097  005C00  D024               	goto	l10801
  7098  005C02                     u10790:
  7099                           
  7100                           ; BSR set to: 2
  7101  005C02  C2D6  F060         	movff	_loRa+204,___lldiv@dividend
  7102  005C06  C2D7  F061         	movff	_loRa+205,___lldiv@dividend+1
  7103  005C0A  C2D8  F062         	movff	_loRa+206,___lldiv@dividend+2
  7104  005C0E  C2D9  F063         	movff	_loRa+207,___lldiv@dividend+3
  7105  005C12  0E7D               	movlw	125
  7106  005C14  0100               	movlb	0	; () banked
  7107  005C16  6F64               	movwf	___lldiv@divisor& (0+255),b
  7108  005C18  0E00               	movlw	0
  7109  005C1A  6F65               	movwf	(___lldiv@divisor+1)& (0+255),b
  7110  005C1C  0E00               	movlw	0
  7111  005C1E  6F66               	movwf	(___lldiv@divisor+2)& (0+255),b
  7112  005C20  0E00               	movlw	0
  7113  005C22  6F67               	movwf	(___lldiv@divisor+3)& (0+255),b
  7114  005C24  ECE4  F03C         	call	___lldiv	;wreg free
  7115  005C28  C060  F046         	movff	?___lldiv,btemp+8
  7116  005C2C  C061  F047         	movff	?___lldiv+1,btemp+9
  7117  005C30  C062  F048         	movff	?___lldiv+2,btemp+10
  7118  005C34  C063  F049         	movff	?___lldiv+3,btemp+11
  7119  005C38  0E0C               	movlw	12
  7120  005C3A                     u10805:
  7121  005C3A  90D8               	bcf	status,0,c
  7122  005C3C  3646               	rlcf	btemp+8,f,c
  7123  005C3E  3647               	rlcf	btemp+9,f,c
  7124  005C40  3648               	rlcf	btemp+10,f,c
  7125  005C42  3649               	rlcf	btemp+11,f,c
  7126  005C44  2EE8               	decfsz	wreg,f,c
  7127  005C46  D7F9               	goto	u10805
  7128  005C48  D02B               	goto	L2
  7129  005C4A                     l10801:
  7130                           
  7131                           ; BSR set to: 2
  7132  005C4A  C2D6  F046         	movff	_loRa+204,btemp+8
  7133  005C4E  C2D7  F047         	movff	_loRa+205,btemp+9
  7134  005C52  C2D8  F048         	movff	_loRa+206,btemp+10
  7135  005C56  C2D9  F049         	movff	_loRa+207,btemp+11
  7136  005C5A  0E0C               	movlw	12
  7137  005C5C                     u10815:
  7138  005C5C  90D8               	bcf	status,0,c
  7139  005C5E  3646               	rlcf	btemp+8,f,c
  7140  005C60  3647               	rlcf	btemp+9,f,c
  7141  005C62  3648               	rlcf	btemp+10,f,c
  7142  005C64  3649               	rlcf	btemp+11,f,c
  7143  005C66  2EE8               	decfsz	wreg,f,c
  7144  005C68  D7F9               	goto	u10815
  7145  005C6A  C046  F060         	movff	btemp+8,___lldiv@dividend
  7146  005C6E  C047  F061         	movff	btemp+9,___lldiv@dividend+1
  7147  005C72  C048  F062         	movff	btemp+10,___lldiv@dividend+2
  7148  005C76  C049  F063         	movff	btemp+11,___lldiv@dividend+3
  7149  005C7A  0E7D               	movlw	125
  7150  005C7C  0100               	movlb	0	; () banked
  7151  005C7E  6F64               	movwf	___lldiv@divisor& (0+255),b
  7152  005C80  0E00               	movlw	0
  7153  005C82  6F65               	movwf	(___lldiv@divisor+1)& (0+255),b
  7154  005C84  0E00               	movlw	0
  7155  005C86  6F66               	movwf	(___lldiv@divisor+2)& (0+255),b
  7156  005C88  0E00               	movlw	0
  7157  005C8A  6F67               	movwf	(___lldiv@divisor+3)& (0+255),b
  7158  005C8C  ECE4  F03C         	call	___lldiv	;wreg free
  7159  005C90  C060  F046         	movff	?___lldiv,btemp+8
  7160  005C94  C061  F047         	movff	?___lldiv+1,btemp+9
  7161  005C98  C062  F048         	movff	?___lldiv+2,btemp+10
  7162  005C9C  C063  F049         	movff	?___lldiv+3,btemp+11
  7163  005CA0                     L2:
  7164                           
  7165                           ;stkvar	_UpdateJoinSuccessState$1545 @ sp[(-4)+0]
  7166  005CA0  0EFC               	movlw	-4
  7167  005CA2  C046  FFE3         	movff	btemp+8,plusw1
  7168  005CA6  0EFD               	movlw	-3
  7169  005CA8  C047  FFE3         	movff	btemp+9,plusw1
  7170  005CAC  0EFE               	movlw	-2
  7171  005CAE  C048  FFE3         	movff	btemp+10,plusw1
  7172  005CB2  0EFF               	movlw	-1
  7173  005CB4  C049  FFE3         	movff	btemp+11,plusw1
  7174                           
  7175                           ;stkvar	_UpdateJoinSuccessState$1545 @ sp[(-4)+0]
  7176  005CB8  50E1               	movf	fsr1l,w,c
  7177  005CBA  0FFC               	addlw	-4
  7178  005CBC  6ED9               	movwf	fsr2l,c
  7179  005CBE  50E2               	movf	fsr1h,w,c
  7180  005CC0  6EDA               	movwf	fsr2h,c
  7181  005CC2  0EFF               	movlw	255
  7182  005CC4  22DA               	addwfc	fsr2h,f,c
  7183  005CC6  CFDE F06D          	movff	postinc2,SwTimerSetTimeout@timeout
  7184  005CCA  CFDE F06E          	movff	postinc2,SwTimerSetTimeout@timeout+1
  7185  005CCE  CFDE F06F          	movff	postinc2,SwTimerSetTimeout@timeout+2
  7186  005CD2  CFDE F070          	movff	postinc2,SwTimerSetTimeout@timeout+3
  7187  005CD6  0102               	movlb	2	; () banked
  7188  005CD8  51F1               	movf	(_loRa+231)& (0+255),w,b
  7189  005CDA  EC01  F045         	call	_SwTimerSetTimeout
  7190                           
  7191                           ;lorawan.c: 1054: SwTimerStart(loRa.linkCheckTimerId);
  7192  005CDE  0102               	movlb	2	; () banked
  7193  005CE0  51F1               	movf	(_loRa+231)& (0+255),w,b
  7194  005CE2  ECB4  F03A         	call	_SwTimerStart
  7195  005CE6                     l10807:
  7196                           
  7197                           ;lorawan.c: 1055: }
  7198                           ;lorawan.c: 1057: if (rxPayload.RxJoinResponse != (0))
  7199  005CE6  0101               	movlb	1	; () banked
  7200  005CE8  510E               	movf	(_rxPayload+2)& (0+255),w,b
  7201  005CEA  110F               	iorwf	(_rxPayload+3)& (0+255),w,b
  7202  005CEC  B4D8               	btfsc	status,2,c
  7203  005CEE  D00C               	goto	u10839
  7204                           
  7205                           ; BSR set to: 1
  7206                           ;lorawan.c: 1058: {
  7207                           ;lorawan.c: 1059: rxPayload.RxJoinResponse(1);
  7208  005CF0  D801               	call	u10838
  7209  005CF2  D00A               	goto	u10839
  7210  005CF4                     u10838:
  7211  005CF4  0005               	push	
  7212  005CF6  6EFA               	movwf	pclath,c
  7213  005CF8  510E               	movf	(_rxPayload+2)& (0+255),w,b
  7214  005CFA  6EFD               	movwf	tosl,c
  7215  005CFC  510F               	movf	(_rxPayload+3)& (0+255),w,b
  7216  005CFE  6EFE               	movwf	tosh,c
  7217  005D00  6AFF               	clrf	tosu,c
  7218  005D02  50FA               	movf	pclath,w,c
  7219  005D04  0E01               	movlw	1
  7220  005D06  0012               	return		;indir
  7221  005D08                     u10839:
  7222                           
  7223                           ; _UpdateJoinSuccessState: autosize = 4, savesize = 0, parsavesize = 0, tempsize = 0 par
      +                          size = 1, argsize = 1, vargsize = 0
  7224  005D08  0EFB               	movlw	251
  7225  005D0A  26E1               	addwf	fsr1l,f,c
  7226  005D0C  0EFF               	movlw	255
  7227  005D0E  22E2               	addwfc	fsr1h,f,c
  7228  005D10  0012               	return		;funcret
  7229  005D12                     __end_of_UpdateJoinSuccessState:
  7230                           	opt stack 0
  7231                           tosu	equ	0xFFF
  7232                           tosh	equ	0xFFE
  7233                           tosl	equ	0xFFD
  7234                           pclath	equ	0xFFA
  7235                           tblptru	equ	0xFF8
  7236                           tblptrh	equ	0xFF7
  7237                           tblptrl	equ	0xFF6
  7238                           tablat	equ	0xFF5
  7239                           prodh	equ	0xFF4
  7240                           prodl	equ	0xFF3
  7241                           intcon	equ	0xFF2
  7242                           intcon2	equ	0xFF1
  7243                           intcon3	equ	0xFF0
  7244                           postinc0	equ	0xFEE
  7245                           wreg	equ	0xFE8
  7246                           postinc1	equ	0xFE6
  7247                           plusw1	equ	0xFE3
  7248                           fsr1h	equ	0xFE2
  7249                           fsr1l	equ	0xFE1
  7250                           indf2	equ	0xFDF
  7251                           postinc2	equ	0xFDE
  7252                           postdec2	equ	0xFDD
  7253                           fsr2h	equ	0xFDA
  7254                           fsr2l	equ	0xFD9
  7255                           status	equ	0xFD8
  7256                           
  7257 ;; *************** function _AutomaticReplyCallback *****************
  7258 ;; Defined at:
  7259 ;;		line 1017 in file "mcc_generated_files/LoRaWAN/lorawan.c"
  7260 ;; Parameters:    Size  Location     Type
  7261 ;;  param           1  [STACK] unsigned char 
  7262 ;; Auto vars:     Size  Location     Type
  7263 ;;		None
  7264 ;; Return value:  Size  Location     Type
  7265 ;;                  1  [STACK] void 
  7266 ;; Registers used:
  7267 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7268 ;; Tracked objects:
  7269 ;;		On entry : 3F/0
  7270 ;;		On exit  : 3F/2
  7271 ;;		Unchanged: 0/0
  7272 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7273 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7274 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7275 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7276 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7277 ;;Total ram usage:        0 bytes
  7278 ;; Hardware stack levels used:    1
  7279 ;; Hardware stack levels required when called:   14
  7280 ;; This function calls:
  7281 ;;		_LORAWAN_Send
  7282 ;; This function is called by:
  7283 ;;		_SetCallbackSoftwareTimers
  7284 ;;		_SwTimersExecute
  7285 ;; This function uses a reentrant model
  7286 ;;
  7287                           
  7288                           	psect	text39
  7289  009044                     __ptext39:
  7290                           	opt stack 0
  7291  009044                     _AutomaticReplyCallback:
  7292                           	opt stack 14
  7293                           
  7294                           ;lorawan.c: 1019: loRa.macStatus.macState = IDLE;
  7295                           
  7296                           ; autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, argsize = 1 var
      +                          gsize = 0, retsize = 0
  7297                           ;incstack = 0
  7298  009044  0EF0               	movlw	-16
  7299  009046  0102               	movlb	2	; () banked
  7300  009048  170C               	andwf	(_loRa+2)& (0+255),f,b
  7301                           
  7302                           ; BSR set to: 2
  7303                           ;lorawan.c: 1020: LORAWAN_Send (0, 0, 0, 0);
  7304  00904A  0E00               	movlw	0
  7305  00904C  0100               	movlb	0	; () banked
  7306  00904E  6FD3               	movwf	LORAWAN_Send@port& (0+255),b
  7307  009050  0E00               	movlw	0
  7308  009052  6FD4               	movwf	LORAWAN_Send@buffer& (0+255),b
  7309  009054  0E00               	movlw	0
  7310  009056  6FD5               	movwf	(LORAWAN_Send@buffer+1)& (0+255),b
  7311  009058  0E00               	movlw	0
  7312  00905A  6FD6               	movwf	LORAWAN_Send@bufferLength& (0+255),b
  7313  00905C  0E00               	movlw	0
  7314  00905E  EC71  F036         	call	_LORAWAN_Send
  7315                           
  7316                           ;lorawan.c: 1021: loRa.lorawanMacStatus.fPending = 0;
  7317  009062  0102               	movlb	2	; () banked
  7318  009064  970A               	bcf	_loRa& (0+255),3,b
  7319                           
  7320                           ; BSR set to: 2
  7321                           ; _AutomaticReplyCallback: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 par
      +                          size = 1, argsize = 1, vargsize = 0
  7322  009066  52E5               	movf	postdec1,f,c
  7323  009068  0012               	return		;funcret
  7324  00906A                     __end_of_AutomaticReplyCallback:
  7325                           	opt stack 0
  7326                           tosu	equ	0xFFF
  7327                           tosh	equ	0xFFE
  7328                           tosl	equ	0xFFD
  7329                           pclath	equ	0xFFA
  7330                           tblptru	equ	0xFF8
  7331                           tblptrh	equ	0xFF7
  7332                           tblptrl	equ	0xFF6
  7333                           tablat	equ	0xFF5
  7334                           prodh	equ	0xFF4
  7335                           prodl	equ	0xFF3
  7336                           intcon	equ	0xFF2
  7337                           intcon2	equ	0xFF1
  7338                           intcon3	equ	0xFF0
  7339                           postinc0	equ	0xFEE
  7340                           wreg	equ	0xFE8
  7341                           postinc1	equ	0xFE6
  7342                           postdec1	equ	0xFE5
  7343                           plusw1	equ	0xFE3
  7344                           fsr1h	equ	0xFE2
  7345                           fsr1l	equ	0xFE1
  7346                           indf2	equ	0xFDF
  7347                           postinc2	equ	0xFDE
  7348                           postdec2	equ	0xFDD
  7349                           fsr2h	equ	0xFDA
  7350                           fsr2l	equ	0xFD9
  7351                           status	equ	0xFD8
  7352                           
  7353 ;; *************** function _AckRetransmissionCallback *****************
  7354 ;; Defined at:
  7355 ;;		line 934 in file "mcc_generated_files/LoRaWAN/lorawan.c"
  7356 ;; Parameters:    Size  Location     Type
  7357 ;;  param           1  [STACK] unsigned char 
  7358 ;; Auto vars:     Size  Location     Type
  7359 ;;  maximumPacke    1  [STACK] unsigned char 
  7360 ;; Return value:  Size  Location     Type
  7361 ;;                  1  [STACK] void 
  7362 ;; Registers used:
  7363 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, btemp+1, btemp+2, btemp+10, btemp+11, to
      +sl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7364 ;; Tracked objects:
  7365 ;;		On entry : 3F/0
  7366 ;;		On exit  : 0/0
  7367 ;;		Unchanged: 0/0
  7368 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7369 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7370 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7371 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7372 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7373 ;;Total ram usage:        0 bytes
  7374 ;; Hardware stack levels used:    1
  7375 ;; Hardware stack levels required when called:   13
  7376 ;; This function calls:
  7377 ;;		_FindSmallestDataRate
  7378 ;;		_LORAWAN_GetMaxPayloadSize
  7379 ;;		_RADIO_Transmit
  7380 ;;		_ResetParametersForConfirmedTransmission
  7381 ;;		_RxData
  7382 ;;		_SelectChannelForTransmission
  7383 ;;		_UpdateRetransmissionAckTimeoutState
  7384 ;; This function is called by:
  7385 ;;		_SetCallbackSoftwareTimers
  7386 ;;		_SwTimersExecute
  7387 ;; This function uses a reentrant model
  7388 ;;
  7389                           
  7390                           	psect	text40
  7391  006090                     __ptext40:
  7392                           	opt stack 0
  7393  006090                     _AckRetransmissionCallback:
  7394                           	opt stack 0
  7395                           
  7396                           ; BSR set to: 2
  7397                           ; autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, argsize = 1 var
      +                          gsize = 0, retsize = 0
  7398  006090  52E6               	movf	postinc1,f,c
  7399                           
  7400                           ;lorawan.c: 936: uint8_t maximumPacketSize;
  7401                           ;lorawan.c: 938: if (loRa.macStatus.macPause == 0)
  7402                           
  7403                           ;incstack = 0
  7404  006092  0102               	movlb	2	; () banked
  7405  006094  B10D               	btfsc	(_loRa+3)& (0+255),0,b
  7406  006096  D086               	goto	l12117
  7407                           
  7408                           ; BSR set to: 2
  7409                           ;lorawan.c: 939: {
  7410                           ;lorawan.c: 940: if (loRa.counterRepetitionsConfirmedUplink <= loRa.maxRepetitionsConfir
      +                          medUplink)
  7411  006098  51E3               	movf	(_loRa+217)& (0+255),w,b
  7412  00609A  5DE1               	subwf	(_loRa+215)& (0+255),w,b
  7413  00609C  A0D8               	btfss	status,0,c
  7414  00609E  D061               	goto	l12107
  7415                           
  7416                           ; BSR set to: 2
  7417                           ;lorawan.c: 941: {
  7418                           ;lorawan.c: 942: maximumPacketSize = LORAWAN_GetMaxPayloadSize () + 13;
  7419  0060A0  EC07  F041         	call	_LORAWAN_GetMaxPayloadSize	;wreg free
  7420  0060A4  6E49               	movwf	btemp+11,c
  7421  0060A6  0E0D               	movlw	13
  7422  0060A8  2649               	addwf	btemp+11,f,c
  7423                           
  7424                           ;stkvar	AckRetransmissionCallback@maximumPacketSize @ sp[(-1)+0]
  7425  0060AA  0EFF               	movlw	-1
  7426  0060AC  C049  FFE3         	movff	btemp+11,plusw1
  7427                           
  7428                           ;lorawan.c: 945: if (loRa.lastPacketLength <= maximumPacketSize)
  7429                           ;stkvar	AckRetransmissionCallback@maximumPacketSize @ sp[(-1)+0]
  7430  0060B0  0EFF               	movlw	-1
  7431  0060B2  50E3               	movf	plusw1,w,c
  7432  0060B4  6E3F               	movwf	btemp+1,c
  7433  0060B6  6A40               	clrf	btemp+2,c
  7434  0060B8  0102               	movlb	2	; () banked
  7435  0060BA  51DE               	movf	(_loRa+212)& (0+255),w,b
  7436  0060BC  5C3F               	subwf	btemp+1,w,c
  7437  0060BE  51DF               	movf	(_loRa+213)& (0+255),w,b
  7438  0060C0  5840               	subwfb	btemp+2,w,c
  7439  0060C2  A0D8               	btfss	status,0,c
  7440  0060C4  D039               	goto	l12101
  7441                           
  7442                           ; BSR set to: 2
  7443                           ;lorawan.c: 946: {
  7444                           ;lorawan.c: 947: if (SelectChannelForTransmission (1) == OK)
  7445  0060C6  0E01               	movlw	1
  7446  0060C8  EC09  F03F         	call	_SelectChannelForTransmission
  7447  0060CC  0900               	iorlw	0
  7448  0060CE  A4D8               	btfss	status,2,c
  7449  0060D0  D030               	goto	l12097
  7450                           
  7451                           ;lorawan.c: 948: {
  7452                           ;lorawan.c: 950: if (RADIO_Transmit (&macBuffer[16], loRa.lastPacketLength) == OK)
  7453  0060D2  0E9F               	movlw	low (_macBuffer+16)
  7454  0060D4  0100               	movlb	0	; () banked
  7455  0060D6  6FB1               	movwf	RADIO_Transmit@buffer& (0+255),b
  7456  0060D8  0E06               	movlw	high (_macBuffer+16)
  7457  0060DA  6FB2               	movwf	(RADIO_Transmit@buffer+1)& (0+255),b
  7458  0060DC  C2DE  F0B3         	movff	_loRa+212,RADIO_Transmit@bufferLen
  7459  0060E0  ECF7  F01F         	call	_RADIO_Transmit	;wreg free
  7460  0060E4  C0B1  F03F         	movff	?_RADIO_Transmit,btemp+1
  7461  0060E8  C0B2  F040         	movff	?_RADIO_Transmit+1,btemp+2
  7462  0060EC  503F               	movf	btemp+1,w,c
  7463  0060EE  1040               	iorwf	btemp+2,w,c
  7464  0060F0  A4D8               	btfss	status,2,c
  7465  0060F2  D01F               	goto	l12097
  7466                           
  7467                           ;lorawan.c: 951: {
  7468                           ;lorawan.c: 952: loRa.macStatus.macState = TRANSMISSION_OCCURRING;
  7469  0060F4  0102               	movlb	2	; () banked
  7470  0060F6  510C               	movf	(_loRa+2)& (0+255),w,b
  7471  0060F8  0BF0               	andlw	-16
  7472  0060FA  0901               	iorlw	1
  7473  0060FC  6F0C               	movwf	(_loRa+2)& (0+255),b
  7474                           
  7475                           ; BSR set to: 2
  7476                           ;lorawan.c: 953: loRa.counterRepetitionsConfirmedUplink ++ ;
  7477  0060FE  2BE3               	incf	(_loRa+217)& (0+255),f,b
  7478                           
  7479                           ; BSR set to: 2
  7480                           ;lorawan.c: 956: if ( ( (loRa.counterRepetitionsConfirmedUplink % 2) == 0) && (loRa.curr
      +                          entDataRate != 0) && (loRa.counterRepetitionsConfirmedUplink != (loRa.maxRepetitionsConf
      +                          irmedUplink + 1) ) )
  7481  006100  B1E3               	btfsc	(_loRa+217)& (0+255),0,b
  7482  006102  D052               	goto	l1094
  7483                           
  7484                           ; BSR set to: 2
  7485  006104  51E9               	movf	(_loRa+223)& (0+255),w,b
  7486  006106  B4D8               	btfsc	status,2,c
  7487  006108  D04F               	goto	l1094
  7488                           
  7489                           ; BSR set to: 2
  7490  00610A  51E3               	movf	(_loRa+217)& (0+255),w,b
  7491  00610C  6E3F               	movwf	btemp+1,c
  7492  00610E  6A40               	clrf	btemp+2,c
  7493  006110  51E1               	movf	(_loRa+215)& (0+255),w,b
  7494  006112  6E48               	movwf	btemp+10,c
  7495  006114  6A49               	clrf	btemp+11,c
  7496  006116  0E01               	movlw	1
  7497  006118  2648               	addwf	btemp+10,f,c
  7498  00611A  0E00               	movlw	0
  7499  00611C  2249               	addwfc	btemp+11,f,c
  7500  00611E  503F               	movf	btemp+1,w,c
  7501  006120  1848               	xorwf	btemp+10,w,c
  7502  006122  E104               	bnz	u13170
  7503  006124  5040               	movf	btemp+2,w,c
  7504  006126  1849               	xorwf	btemp+11,w,c
  7505  006128  B4D8               	btfsc	status,2,c
  7506  00612A  D03E               	goto	l1094
  7507  00612C                     u13170:
  7508                           
  7509                           ; BSR set to: 2
  7510                           ;lorawan.c: 957: {
  7511                           ;lorawan.c: 958: FindSmallestDataRate();
  7512  00612C  EC27  F035         	call	_FindSmallestDataRate	;wreg free
  7513  006130  D03B               	goto	l1094
  7514  006132                     l12097:
  7515                           
  7516                           ;lorawan.c: 961: else
  7517                           ;lorawan.c: 962: {
  7518                           ;lorawan.c: 964: UpdateRetransmissionAckTimeoutState ();
  7519  006132  EC9A  F03E         	call	_UpdateRetransmissionAckTimeoutState	;wreg free
  7520  006136  D038               	goto	l1094
  7521  006138                     l12101:
  7522                           
  7523                           ; BSR set to: 2
  7524                           ;lorawan.c: 973: else
  7525                           ;lorawan.c: 974: {
  7526                           ;lorawan.c: 975: ResetParametersForConfirmedTransmission ();
  7527  006138  ECD7  F049         	call	_ResetParametersForConfirmedTransmission	;wreg free
  7528                           
  7529                           ;lorawan.c: 976: if (rxPayload.RxAppData != (0))
  7530  00613C  0101               	movlb	1	; () banked
  7531  00613E  510C               	movf	_rxPayload& (0+255),w,b
  7532  006140  110D               	iorwf	(_rxPayload+1)& (0+255),w,b
  7533  006142  B4D8               	btfsc	status,2,c
  7534  006144  D031               	goto	l1094
  7535                           
  7536                           ; BSR set to: 1
  7537                           ;lorawan.c: 977: {
  7538                           ;lorawan.c: 978: rxPayload.RxAppData((0), 0, INVALID_BUFFER_LEN);
  7539  006146  0E00               	movlw	0
  7540  006148  0100               	movlb	0	; () banked
  7541  00614A  6F60               	movwf	RxData@pData& (0+255),b
  7542  00614C  0E00               	movlw	0
  7543  00614E  6F61               	movwf	(RxData@pData+1)& (0+255),b
  7544  006150  0E00               	movlw	0
  7545  006152  6F62               	movwf	RxData@dataLength& (0+255),b
  7546  006154  0E04               	movlw	4
  7547  006156  6F63               	movwf	RxData@status& (0+255),b
  7548  006158  D801               	call	u13198
  7549  00615A  D026               	goto	l1094
  7550  00615C                     u13198:
  7551  00615C  0005               	push	
  7552  00615E  6EFA               	movwf	pclath,c
  7553  006160  D019               	goto	L3
  7554  006162                     l12107:
  7555                           
  7556                           ; BSR set to: 2
  7557                           ;lorawan.c: 982: else if ( (loRa.counterRepetitionsConfirmedUplink > loRa.maxRepetitions
      +                          ConfirmedUplink) && (loRa.macStatus.macPause == 0) )
  7558  006162  51E3               	movf	(_loRa+217)& (0+255),w,b
  7559  006164  5DE1               	subwf	(_loRa+215)& (0+255),w,b
  7560  006166  A0D8               	btfss	status,0,c
  7561                           
  7562                           ; BSR set to: 2
  7563  006168  B10D               	btfsc	(_loRa+3)& (0+255),0,b
  7564  00616A  D01E               	goto	l1094
  7565                           
  7566                           ; BSR set to: 2
  7567                           ;lorawan.c: 983: {
  7568                           ;lorawan.c: 984: ResetParametersForConfirmedTransmission ();
  7569  00616C  ECD7  F049         	call	_ResetParametersForConfirmedTransmission	;wreg free
  7570                           
  7571                           ;lorawan.c: 985: if (rxPayload.RxAppData != (0))
  7572  006170  0101               	movlb	1	; () banked
  7573  006172  510C               	movf	_rxPayload& (0+255),w,b
  7574  006174  110D               	iorwf	(_rxPayload+1)& (0+255),w,b
  7575  006176  B4D8               	btfsc	status,2,c
  7576  006178  D017               	goto	l1094
  7577                           
  7578                           ; BSR set to: 1
  7579                           ;lorawan.c: 986: {
  7580                           ;lorawan.c: 987: rxPayload.RxAppData((0), 0, MAC_NOT_OK);
  7581  00617A  0E00               	movlw	0
  7582  00617C  0100               	movlb	0	; () banked
  7583  00617E  6F60               	movwf	RxData@pData& (0+255),b
  7584  006180  0E00               	movlw	0
  7585  006182  6F61               	movwf	(RxData@pData+1)& (0+255),b
  7586  006184  0E00               	movlw	0
  7587  006186  6F62               	movwf	RxData@dataLength& (0+255),b
  7588  006188  0E00               	movlw	0
  7589  00618A  6F63               	movwf	RxData@status& (0+255),b
  7590  00618C  D801               	call	u13238
  7591  00618E  D00C               	goto	l1094
  7592  006190                     u13238:
  7593  006190  0005               	push	
  7594  006192  6EFA               	movwf	pclath,c
  7595  006194                     L3:
  7596  006194  0101               	movlb	1	; () banked
  7597  006196  510C               	movf	_rxPayload& (0+255),w,b
  7598  006198  6EFD               	movwf	tosl,c
  7599  00619A  510D               	movf	(_rxPayload+1)& (0+255),w,b
  7600  00619C  6EFE               	movwf	tosh,c
  7601  00619E  6AFF               	clrf	tosu,c
  7602  0061A0  50FA               	movf	pclath,w,c
  7603  0061A2  0012               	return		;indir
  7604  0061A4                     l12117:
  7605                           
  7606                           ; BSR set to: 2
  7607                           ;lorawan.c: 991: else
  7608                           ;lorawan.c: 992: {
  7609                           ;lorawan.c: 993: ResetParametersForConfirmedTransmission ();
  7610  0061A4  ECD7  F049         	call	_ResetParametersForConfirmedTransmission	;wreg free
  7611  0061A8                     l1094:
  7612                           
  7613                           ; _AckRetransmissionCallback: autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 
      +                          parsize = 1, argsize = 1, vargsize = 0
  7614  0061A8  52E5               	movf	postdec1,f,c
  7615  0061AA  52E5               	movf	postdec1,f,c
  7616  0061AC  0012               	return		;funcret
  7617  0061AE                     __end_of_AckRetransmissionCallback:
  7618                           	opt stack 0
  7619                           tosu	equ	0xFFF
  7620                           tosh	equ	0xFFE
  7621                           tosl	equ	0xFFD
  7622                           pclath	equ	0xFFA
  7623                           tblptru	equ	0xFF8
  7624                           tblptrh	equ	0xFF7
  7625                           tblptrl	equ	0xFF6
  7626                           tablat	equ	0xFF5
  7627                           prodh	equ	0xFF4
  7628                           prodl	equ	0xFF3
  7629                           intcon	equ	0xFF2
  7630                           intcon2	equ	0xFF1
  7631                           intcon3	equ	0xFF0
  7632                           postinc0	equ	0xFEE
  7633                           wreg	equ	0xFE8
  7634                           postinc1	equ	0xFE6
  7635                           postdec1	equ	0xFE5
  7636                           plusw1	equ	0xFE3
  7637                           fsr1h	equ	0xFE2
  7638                           fsr1l	equ	0xFE1
  7639                           indf2	equ	0xFDF
  7640                           postinc2	equ	0xFDE
  7641                           postdec2	equ	0xFDD
  7642                           fsr2h	equ	0xFDA
  7643                           fsr2l	equ	0xFD9
  7644                           status	equ	0xFD8
  7645                           
  7646 ;; *************** function _LORAWAN_LinkCheckCallback *****************
  7647 ;; Defined at:
  7648 ;;		line 881 in file "mcc_generated_files/LoRaWAN/lorawan.c"
  7649 ;; Parameters:    Size  Location     Type
  7650 ;;  param           1  [STACK] unsigned char 
  7651 ;; Auto vars:     Size  Location     Type
  7652 ;;  iCtr            1  [STACK] unsigned char 
  7653 ;; Return value:  Size  Location     Type
  7654 ;;                  1  [STACK] void 
  7655 ;; Registers used:
  7656 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+8, btemp+9, btemp+10, btemp+11, prodl, prodh, cst
      +ack
  7657 ;; Tracked objects:
  7658 ;;		On entry : 3F/0
  7659 ;;		On exit  : 0/0
  7660 ;;		Unchanged: 0/0
  7661 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7662 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7663 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7664 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7665 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7666 ;;Total ram usage:        0 bytes
  7667 ;; Hardware stack levels used:    1
  7668 ;; Hardware stack levels required when called:   11
  7669 ;; This function calls:
  7670 ;;		_SwTimerSetTimeout
  7671 ;;		_SwTimerStart
  7672 ;;		___lldiv
  7673 ;; This function is called by:
  7674 ;;		_SetCallbackSoftwareTimers
  7675 ;;		_SwTimersExecute
  7676 ;; This function uses a reentrant model
  7677 ;;
  7678                           
  7679                           	psect	text41
  7680  00523A                     __ptext41:
  7681                           	opt stack 0
  7682  00523A                     _LORAWAN_LinkCheckCallback:
  7683                           	opt stack 0
  7684                           
  7685                           ; autosize = 5, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, argsize = 1 var
      +                          gsize = 0, retsize = 0
  7686  00523A  0E05               	movlw	5
  7687  00523C  26E1               	addwf	fsr1l,f,c
  7688  00523E  0E00               	movlw	0
  7689  005240  22E2               	addwfc	fsr1h,f,c
  7690                           
  7691                           ;lorawan.c: 885: if ((loRa.macStatus.macPause == 0) && (loRa.macStatus.linkCheck == 1))
  7692                           
  7693                           ;incstack = 0
  7694  005242  0102               	movlb	2	; () banked
  7695  005244  A10D               	btfss	(_loRa+3)& (0+255),0,b
  7696                           
  7697                           ; BSR set to: 2
  7698  005246  A50D               	btfss	(_loRa+3)& (0+255),2,b
  7699  005248  D02C               	goto	l12061
  7700                           
  7701                           ; BSR set to: 2
  7702                           ;lorawan.c: 886: {
  7703                           ;lorawan.c: 888: for(iCtr = 0; iCtr < loRa.crtMacCmdIndex; iCtr ++)
  7704                           ;stkvar	LORAWAN_LinkCheckCallback@iCtr @ sp[(-5)+4]
  7705  00524A  0EFF               	movlw	-1
  7706  00524C  6AE3               	clrf	plusw1,c
  7707  00524E  D00F               	goto	l12051
  7708  005250                     l12045:
  7709                           
  7710                           ; BSR set to: 2
  7711                           ;lorawan.c: 889: {
  7712                           ;lorawan.c: 890: if(loRa.macCommands[iCtr].receivedCid == LINK_CHECK_CID)
  7713                           ;stkvar	LORAWAN_LinkCheckCallback@iCtr @ sp[(-5)+4]
  7714  005250  0EFF               	movlw	-1
  7715  005252  50E3               	movf	plusw1,w,c
  7716  005254  0D02               	mullw	2
  7717  005256  0EB2               	movlw	low (_loRa+168)
  7718  005258  24F3               	addwf	prodl,w,c
  7719  00525A  6ED9               	movwf	fsr2l,c
  7720  00525C  0E02               	movlw	high (_loRa+168)
  7721  00525E  20F4               	addwfc	prodh,w,c
  7722  005260  6EDA               	movwf	fsr2h,c
  7723  005262  0E02               	movlw	2
  7724  005264  18DE               	xorwf	postinc2,w,c
  7725  005266  B4D8               	btfsc	status,2,c
  7726  005268  D009               	goto	u13030
  7727                           
  7728                           ; BSR set to: 2
  7729                           ;stkvar	LORAWAN_LinkCheckCallback@iCtr @ sp[(-5)+4]
  7730  00526A  0EFF               	movlw	-1
  7731  00526C  2AE3               	incf	plusw1,f,c
  7732  00526E                     l12051:
  7733                           
  7734                           ; BSR set to: 2
  7735                           ;stkvar	LORAWAN_LinkCheckCallback@iCtr @ sp[(-5)+4]
  7736  00526E  0EFF               	movlw	-1
  7737  005270  CFE3 F03E          	movff	plusw1,btemp
  7738  005274  51B1               	movf	(_loRa+167)& (0+255),w,b
  7739  005276  5C3E               	subwf	btemp,w,c
  7740  005278  A0D8               	btfss	status,0,c
  7741  00527A  D7EA               	goto	l12045
  7742  00527C                     u13030:
  7743                           
  7744                           ; BSR set to: 2
  7745                           ;lorawan.c: 893: }
  7746                           ;lorawan.c: 894: }
  7747                           ;lorawan.c: 896: if(iCtr == loRa.crtMacCmdIndex)
  7748                           ;stkvar	LORAWAN_LinkCheckCallback@iCtr @ sp[(-5)+4]
  7749  00527C  0EFF               	movlw	-1
  7750  00527E  50E3               	movf	plusw1,w,c
  7751  005280  19B1               	xorwf	(_loRa+167)& (0+255),w,b
  7752  005282  A4D8               	btfss	status,2,c
  7753  005284  D00E               	goto	l12061
  7754                           
  7755                           ; BSR set to: 2
  7756                           ;lorawan.c: 897: {
  7757                           ;lorawan.c: 898: loRa.macCommands[loRa.crtMacCmdIndex].receivedCid = LINK_CHECK_CID;
  7758  005286  51B1               	movf	(_loRa+167)& (0+255),w,b
  7759  005288  0D02               	mullw	2
  7760  00528A  0EB2               	movlw	low (_loRa+168)
  7761  00528C  24F3               	addwf	prodl,w,c
  7762  00528E  6ED9               	movwf	fsr2l,c
  7763  005290  0E02               	movlw	high (_loRa+168)
  7764  005292  20F4               	addwfc	prodh,w,c
  7765  005294  6EDA               	movwf	fsr2h,c
  7766  005296  0E02               	movlw	2
  7767  005298  6EDF               	movwf	indf2,c
  7768                           
  7769                           ; BSR set to: 2
  7770                           ;lorawan.c: 900: if(loRa.crtMacCmdIndex < 16)
  7771  00529A  0E10               	movlw	16
  7772  00529C  61B1               	cpfslt	(_loRa+167)& (0+255),b
  7773  00529E  D001               	goto	l12061
  7774                           
  7775                           ; BSR set to: 2
  7776                           ;lorawan.c: 901: {
  7777                           ;lorawan.c: 902: loRa.crtMacCmdIndex ++;
  7778  0052A0  2BB1               	incf	(_loRa+167)& (0+255),f,b
  7779  0052A2                     l12061:
  7780                           
  7781                           ; BSR set to: 2
  7782                           ;lorawan.c: 903: }
  7783                           ;lorawan.c: 904: }
  7784                           ;lorawan.c: 905: }
  7785                           ;lorawan.c: 908: if (loRa.macStatus.linkCheck == 1)
  7786  0052A2  A50D               	btfss	(_loRa+3)& (0+255),2,b
  7787  0052A4  D07B               	goto	l1072
  7788                           
  7789                           ; BSR set to: 2
  7790                           ;lorawan.c: 909: {
  7791                           ;lorawan.c: 910: SwTimerSetTimeout(loRa.linkCheckTimerId, ((loRa.periodForLinkCheck) < 0
      +                          x000FFFFFUL ? ( (((uint32_t)(loRa.periodForLinkCheck)) << (12)) / 125UL ) : ( (((uint32_
      +                          t)(loRa.periodForLinkCheck)) / 125UL) << (12) ) ));
  7792  0052A6  51D9               	movf	(_loRa+207)& (0+255),w,b
  7793  0052A8  E107               	bnz	u13070
  7794  0052AA  29D6               	incf	(_loRa+204)& (0+255),w,b
  7795  0052AC  0EFF               	movlw	255
  7796  0052AE  59D7               	subwfb	(_loRa+205)& (0+255),w,b
  7797  0052B0  0E0F               	movlw	15
  7798  0052B2  59D8               	subwfb	(_loRa+206)& (0+255),w,b
  7799  0052B4  A0D8               	btfss	status,0,c
  7800  0052B6  D024               	goto	l12067
  7801  0052B8                     u13070:
  7802                           
  7803                           ; BSR set to: 2
  7804  0052B8  C2D6  F060         	movff	_loRa+204,___lldiv@dividend
  7805  0052BC  C2D7  F061         	movff	_loRa+205,___lldiv@dividend+1
  7806  0052C0  C2D8  F062         	movff	_loRa+206,___lldiv@dividend+2
  7807  0052C4  C2D9  F063         	movff	_loRa+207,___lldiv@dividend+3
  7808  0052C8  0E7D               	movlw	125
  7809  0052CA  0100               	movlb	0	; () banked
  7810  0052CC  6F64               	movwf	___lldiv@divisor& (0+255),b
  7811  0052CE  0E00               	movlw	0
  7812  0052D0  6F65               	movwf	(___lldiv@divisor+1)& (0+255),b
  7813  0052D2  0E00               	movlw	0
  7814  0052D4  6F66               	movwf	(___lldiv@divisor+2)& (0+255),b
  7815  0052D6  0E00               	movlw	0
  7816  0052D8  6F67               	movwf	(___lldiv@divisor+3)& (0+255),b
  7817  0052DA  ECE4  F03C         	call	___lldiv	;wreg free
  7818  0052DE  C060  F046         	movff	?___lldiv,btemp+8
  7819  0052E2  C061  F047         	movff	?___lldiv+1,btemp+9
  7820  0052E6  C062  F048         	movff	?___lldiv+2,btemp+10
  7821  0052EA  C063  F049         	movff	?___lldiv+3,btemp+11
  7822  0052EE  0E0C               	movlw	12
  7823  0052F0                     u13085:
  7824  0052F0  90D8               	bcf	status,0,c
  7825  0052F2  3646               	rlcf	btemp+8,f,c
  7826  0052F4  3647               	rlcf	btemp+9,f,c
  7827  0052F6  3648               	rlcf	btemp+10,f,c
  7828  0052F8  3649               	rlcf	btemp+11,f,c
  7829  0052FA  2EE8               	decfsz	wreg,f,c
  7830  0052FC  D7F9               	goto	u13085
  7831  0052FE  D02B               	goto	L4
  7832  005300                     l12067:
  7833                           
  7834                           ; BSR set to: 2
  7835  005300  C2D6  F046         	movff	_loRa+204,btemp+8
  7836  005304  C2D7  F047         	movff	_loRa+205,btemp+9
  7837  005308  C2D8  F048         	movff	_loRa+206,btemp+10
  7838  00530C  C2D9  F049         	movff	_loRa+207,btemp+11
  7839  005310  0E0C               	movlw	12
  7840  005312                     u13095:
  7841  005312  90D8               	bcf	status,0,c
  7842  005314  3646               	rlcf	btemp+8,f,c
  7843  005316  3647               	rlcf	btemp+9,f,c
  7844  005318  3648               	rlcf	btemp+10,f,c
  7845  00531A  3649               	rlcf	btemp+11,f,c
  7846  00531C  2EE8               	decfsz	wreg,f,c
  7847  00531E  D7F9               	goto	u13095
  7848  005320  C046  F060         	movff	btemp+8,___lldiv@dividend
  7849  005324  C047  F061         	movff	btemp+9,___lldiv@dividend+1
  7850  005328  C048  F062         	movff	btemp+10,___lldiv@dividend+2
  7851  00532C  C049  F063         	movff	btemp+11,___lldiv@dividend+3
  7852  005330  0E7D               	movlw	125
  7853  005332  0100               	movlb	0	; () banked
  7854  005334  6F64               	movwf	___lldiv@divisor& (0+255),b
  7855  005336  0E00               	movlw	0
  7856  005338  6F65               	movwf	(___lldiv@divisor+1)& (0+255),b
  7857  00533A  0E00               	movlw	0
  7858  00533C  6F66               	movwf	(___lldiv@divisor+2)& (0+255),b
  7859  00533E  0E00               	movlw	0
  7860  005340  6F67               	movwf	(___lldiv@divisor+3)& (0+255),b
  7861  005342  ECE4  F03C         	call	___lldiv	;wreg free
  7862  005346  C060  F046         	movff	?___lldiv,btemp+8
  7863  00534A  C061  F047         	movff	?___lldiv+1,btemp+9
  7864  00534E  C062  F048         	movff	?___lldiv+2,btemp+10
  7865  005352  C063  F049         	movff	?___lldiv+3,btemp+11
  7866  005356                     L4:
  7867                           
  7868                           ;stkvar	_LORAWAN_LinkCheckCallback$1528 @ sp[(-5)+0]
  7869  005356  0EFB               	movlw	-5
  7870  005358  C046  FFE3         	movff	btemp+8,plusw1
  7871  00535C  0EFC               	movlw	-4
  7872  00535E  C047  FFE3         	movff	btemp+9,plusw1
  7873  005362  0EFD               	movlw	-3
  7874  005364  C048  FFE3         	movff	btemp+10,plusw1
  7875  005368  0EFE               	movlw	-2
  7876  00536A  C049  FFE3         	movff	btemp+11,plusw1
  7877                           
  7878                           ;stkvar	_LORAWAN_LinkCheckCallback$1528 @ sp[(-5)+0]
  7879  00536E  50E1               	movf	fsr1l,w,c
  7880  005370  0FFB               	addlw	-5
  7881  005372  6ED9               	movwf	fsr2l,c
  7882  005374  50E2               	movf	fsr1h,w,c
  7883  005376  6EDA               	movwf	fsr2h,c
  7884  005378  0EFF               	movlw	255
  7885  00537A  22DA               	addwfc	fsr2h,f,c
  7886  00537C  CFDE F06D          	movff	postinc2,SwTimerSetTimeout@timeout
  7887  005380  CFDE F06E          	movff	postinc2,SwTimerSetTimeout@timeout+1
  7888  005384  CFDE F06F          	movff	postinc2,SwTimerSetTimeout@timeout+2
  7889  005388  CFDE F070          	movff	postinc2,SwTimerSetTimeout@timeout+3
  7890  00538C  0102               	movlb	2	; () banked
  7891  00538E  51F1               	movf	(_loRa+231)& (0+255),w,b
  7892  005390  EC01  F045         	call	_SwTimerSetTimeout
  7893                           
  7894                           ;lorawan.c: 911: SwTimerStart(loRa.linkCheckTimerId);
  7895  005394  0102               	movlb	2	; () banked
  7896  005396  51F1               	movf	(_loRa+231)& (0+255),w,b
  7897  005398  ECB4  F03A         	call	_SwTimerStart
  7898  00539C                     l1072:
  7899                           
  7900                           ; _LORAWAN_LinkCheckCallback: autosize = 5, savesize = 0, parsavesize = 0, tempsize = 0 
      +                          parsize = 1, argsize = 1, vargsize = 0
  7901  00539C  0EFA               	movlw	250
  7902  00539E  26E1               	addwf	fsr1l,f,c
  7903  0053A0  0EFF               	movlw	255
  7904  0053A2  22E2               	addwfc	fsr1h,f,c
  7905  0053A4  0012               	return		;funcret
  7906  0053A6                     __end_of_LORAWAN_LinkCheckCallback:
  7907                           	opt stack 0
  7908                           tosu	equ	0xFFF
  7909                           tosh	equ	0xFFE
  7910                           tosl	equ	0xFFD
  7911                           pclath	equ	0xFFA
  7912                           tblptru	equ	0xFF8
  7913                           tblptrh	equ	0xFF7
  7914                           tblptrl	equ	0xFF6
  7915                           tablat	equ	0xFF5
  7916                           prodh	equ	0xFF4
  7917                           prodl	equ	0xFF3
  7918                           intcon	equ	0xFF2
  7919                           intcon2	equ	0xFF1
  7920                           intcon3	equ	0xFF0
  7921                           postinc0	equ	0xFEE
  7922                           wreg	equ	0xFE8
  7923                           postinc1	equ	0xFE6
  7924                           postdec1	equ	0xFE5
  7925                           plusw1	equ	0xFE3
  7926                           fsr1h	equ	0xFE2
  7927                           fsr1l	equ	0xFE1
  7928                           indf2	equ	0xFDF
  7929                           postinc2	equ	0xFDE
  7930                           postdec2	equ	0xFDD
  7931                           fsr2h	equ	0xFDA
  7932                           fsr2l	equ	0xFD9
  7933                           status	equ	0xFD8
  7934                           
  7935 ;; *************** function _LORAWAN_ReceiveWindow2Callback *****************
  7936 ;; Defined at:
  7937 ;;		line 827 in file "mcc_generated_files/LoRaWAN/lorawan.c"
  7938 ;; Parameters:    Size  Location     Type
  7939 ;;  param           1  [STACK] unsigned char 
  7940 ;; Auto vars:     Size  Location     Type
  7941 ;;		None
  7942 ;; Return value:  Size  Location     Type
  7943 ;;                  1  [STACK] void 
  7944 ;; Registers used:
  7945 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, btemp+1, btemp+2, btemp+11, tosl, tblptrl, tblptrh, tb
      +lptru, prodl, prodh, cstack
  7946 ;; Tracked objects:
  7947 ;;		On entry : 3D/0
  7948 ;;		On exit  : 0/0
  7949 ;;		Unchanged: 0/0
  7950 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7951 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7952 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7953 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7954 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7955 ;;Total ram usage:        0 bytes
  7956 ;; Hardware stack levels used:    1
  7957 ;; Hardware stack levels required when called:   14
  7958 ;; This function calls:
  7959 ;;		_ConfigureRadioRx
  7960 ;;		_LORAWAN_EnterContinuousReceive
  7961 ;;		_RADIO_GetStatus
  7962 ;;		_RADIO_ReceiveStart
  7963 ;;		_RADIO_ReceiveStop
  7964 ;;		_RADIO_ReleaseData
  7965 ;;		_ResetParametersForConfirmedTransmission
  7966 ;;		_ResetParametersForUnconfirmedTransmission
  7967 ;;		_RxData
  7968 ;; This function is called by:
  7969 ;;		_LORAWAN_RxTimeout
  7970 ;;		_SetCallbackSoftwareTimers
  7971 ;;		_SwTimersExecute
  7972 ;; This function uses a reentrant model
  7973 ;;
  7974                           
  7975                           	psect	text42
  7976  006C0A                     __ptext42:
  7977                           	opt stack 0
  7978  006C0A                     _LORAWAN_ReceiveWindow2Callback:
  7979                           	opt stack 12
  7980                           
  7981                           ;lorawan.c: 830: if (loRa.macStatus.macPause == 0)
  7982                           
  7983                           ; autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, argsize = 1 var
      +                          gsize = 0, retsize = 0
  7984                           ;incstack = 0
  7985  006C0A  0102               	movlb	2	; () banked
  7986  006C0C  B10D               	btfsc	(_loRa+3)& (0+255),0,b
  7987  006C0E  D05F               	goto	l1048
  7988                           
  7989                           ; BSR set to: 2
  7990                           ;lorawan.c: 831: {
  7991                           ;lorawan.c: 832: if((RADIO_GetStatus() & (1 << (1))) == 0)
  7992  006C10  ECAD  F04A         	call	_RADIO_GetStatus	;wreg free
  7993  006C14  6E49               	movwf	btemp+11,c
  7994  006C16  B249               	btfsc	btemp+11,1,c
  7995  006C18  D056               	goto	l10775
  7996                           
  7997                           ;lorawan.c: 833: {
  7998                           ;lorawan.c: 834: loRa.macStatus.macState = RX2_OPEN;
  7999  006C1A  0102               	movlb	2	; () banked
  8000  006C1C  510C               	movf	(_loRa+2)& (0+255),w,b
  8001  006C1E  0BF0               	andlw	-16
  8002  006C20  0905               	iorlw	5
  8003  006C22  6F0C               	movwf	(_loRa+2)& (0+255),b
  8004                           
  8005                           ; BSR set to: 2
  8006                           ;lorawan.c: 836: RADIO_ReceiveStop();
  8007  006C24  ECAE  F048         	call	_RADIO_ReceiveStop	;wreg free
  8008                           
  8009                           ;lorawan.c: 837: RADIO_ReleaseData();
  8010  006C28  ECB0  F04A         	call	_RADIO_ReleaseData	;wreg free
  8011                           
  8012                           ;lorawan.c: 839: ConfigureRadioRx(loRa.receiveWindow2Parameters.dataRate, loRa.receiveWi
      +                          ndow2Parameters.frequency);
  8013  006C2C  C222  F073         	movff	_loRa+24,ConfigureRadioRx@freq
  8014  006C30  C223  F074         	movff	_loRa+25,ConfigureRadioRx@freq+1
  8015  006C34  C224  F075         	movff	_loRa+26,ConfigureRadioRx@freq+2
  8016  006C38  C225  F076         	movff	_loRa+27,ConfigureRadioRx@freq+3
  8017  006C3C  0102               	movlb	2	; () banked
  8018  006C3E  5126               	movf	(_loRa+28)& (0+255),w,b
  8019  006C40  EC96  F047         	call	_ConfigureRadioRx
  8020                           
  8021                           ;lorawan.c: 841: if (CLASS_A == loRa.deviceClass)
  8022  006C44  0102               	movlb	2	; () banked
  8023  006C46  511C               	movf	(_loRa+18)& (0+255),w,b
  8024  006C48  A4D8               	btfss	status,2,c
  8025  006C4A  D036               	goto	l10771
  8026                           
  8027                           ; BSR set to: 2
  8028                           ;lorawan.c: 842: {
  8029                           ;lorawan.c: 843: if (RADIO_ReceiveStart(rxWindowSize[loRa.receiveWindow2Parameters.dataR
      +                          ate]) != OK)
  8030  006C4C  0E7F               	movlw	low _rxWindowSize
  8031  006C4E  2526               	addwf	(_loRa+28)& (0+255),w,b
  8032  006C50  6EF6               	movwf	tblptrl,c
  8033  006C52  6AF7               	clrf	tblptrh,c
  8034  006C54  0EFF               	movlw	high _rxWindowSize
  8035  006C56  22F7               	addwfc	tblptrh,f,c
  8036  006C58                     	if	1	;There are 3 active tblptr bytes
  8037  006C58  6AF8               	clrf	tblptru,c
  8038  006C5A  0E00               	movlw	low (__mediumconst shr (0+16))
  8039  006C5C  22F8               	addwfc	tblptru,f,c
  8040  006C5E                     	endif
  8041  006C5E  0008               	tblrd		*
  8042  006C60  50F5               	movf	tablat,w,c
  8043  006C62  0100               	movlb	0	; () banked
  8044  006C64  6FB1               	movwf	RADIO_ReceiveStart@rxWindowSize& (0+255),b
  8045  006C66  6BB2               	clrf	(RADIO_ReceiveStart@rxWindowSize+1)& (0+255),b
  8046  006C68  EC13  F021         	call	_RADIO_ReceiveStart	;wreg free
  8047  006C6C  C0B1  F03F         	movff	?_RADIO_ReceiveStart,btemp+1
  8048  006C70  C0B2  F040         	movff	?_RADIO_ReceiveStart+1,btemp+2
  8049  006C74  503F               	movf	btemp+1,w,c
  8050  006C76  1040               	iorwf	btemp+2,w,c
  8051  006C78  B4D8               	btfsc	status,2,c
  8052  006C7A  D031               	goto	l1057
  8053                           
  8054                           ;lorawan.c: 844: {
  8055                           ;lorawan.c: 845: ResetParametersForConfirmedTransmission ();
  8056  006C7C  ECD7  F049         	call	_ResetParametersForConfirmedTransmission	;wreg free
  8057                           
  8058                           ;lorawan.c: 846: ResetParametersForUnconfirmedTransmission ();
  8059  006C80  ECB0  F049         	call	_ResetParametersForUnconfirmedTransmission	;wreg free
  8060                           
  8061                           ;lorawan.c: 847: if (rxPayload.RxAppData != (0))
  8062  006C84  0101               	movlb	1	; () banked
  8063  006C86  510C               	movf	_rxPayload& (0+255),w,b
  8064  006C88  110D               	iorwf	(_rxPayload+1)& (0+255),w,b
  8065  006C8A  B4D8               	btfsc	status,2,c
  8066  006C8C  D028               	goto	l1057
  8067                           
  8068                           ; BSR set to: 1
  8069                           ;lorawan.c: 848: {
  8070                           ;lorawan.c: 849: rxPayload.RxAppData ((0), 0, MAC_NOT_OK);
  8071  006C8E  0E00               	movlw	0
  8072  006C90  0100               	movlb	0	; () banked
  8073  006C92  6F60               	movwf	RxData@pData& (0+255),b
  8074  006C94  0E00               	movlw	0
  8075  006C96  6F61               	movwf	(RxData@pData+1)& (0+255),b
  8076  006C98  0E00               	movlw	0
  8077  006C9A  6F62               	movwf	RxData@dataLength& (0+255),b
  8078  006C9C  0E00               	movlw	0
  8079  006C9E  6F63               	movwf	RxData@status& (0+255),b
  8080  006CA0  D801               	call	u10758
  8081  006CA2  D01D               	goto	l1057
  8082  006CA4                     u10758:
  8083  006CA4  0005               	push	
  8084  006CA6  6EFA               	movwf	pclath,c
  8085  006CA8  0101               	movlb	1	; () banked
  8086  006CAA  510C               	movf	_rxPayload& (0+255),w,b
  8087  006CAC  6EFD               	movwf	tosl,c
  8088  006CAE  510D               	movf	(_rxPayload+1)& (0+255),w,b
  8089  006CB0  6EFE               	movwf	tosh,c
  8090  006CB2  6AFF               	clrf	tosu,c
  8091  006CB4  50FA               	movf	pclath,w,c
  8092  006CB6  0012               	return		;indir
  8093  006CB8                     l10771:
  8094                           
  8095                           ; BSR set to: 2
  8096                           ;lorawan.c: 853: else
  8097                           ;lorawan.c: 854: {
  8098                           ;lorawan.c: 855: loRa.macStatus.macState = CLASS_C_RX2_2_OPEN;
  8099  006CB8  510C               	movf	(_loRa+2)& (0+255),w,b
  8100  006CBA  0BF0               	andlw	-16
  8101  006CBC  0909               	iorlw	9
  8102  006CBE  6F0C               	movwf	(_loRa+2)& (0+255),b
  8103                           
  8104                           ; BSR set to: 2
  8105                           ;lorawan.c: 856: LORAWAN_EnterContinuousReceive();
  8106  006CC0  ECE6  F03D         	call	_LORAWAN_EnterContinuousReceive	;wreg free
  8107  006CC4  D00C               	goto	l1057
  8108  006CC6                     l10775:
  8109                           
  8110                           ;lorawan.c: 859: else
  8111                           ;lorawan.c: 860: {
  8112                           ;lorawan.c: 863: loRa.rx2DelayExpired = 1;
  8113  006CC6  0E01               	movlw	1
  8114  006CC8  0102               	movlb	2	; () banked
  8115  006CCA  6FFB               	movwf	(_loRa+241)& (0+255),b
  8116                           
  8117                           ; BSR set to: 1
  8118                           ;lorawan.c: 864: }
  8119                           ;lorawan.c: 865: }
  8120  006CCC  D008               	goto	l1057
  8121  006CCE                     l1048:
  8122                           
  8123                           ; BSR set to: 2
  8124                           ;lorawan.c: 866: else
  8125                           ;lorawan.c: 867: {
  8126                           ;lorawan.c: 870: if (loRa.lorawanMacStatus.joining == 1)
  8127  006CCE  A50A               	btfss	_loRa& (0+255),2,b
  8128  006CD0  D002               	goto	l10779
  8129                           
  8130                           ; BSR set to: 2
  8131                           ;lorawan.c: 871: {
  8132                           ;lorawan.c: 872: loRa.lorawanMacStatus.joining = 0;
  8133  006CD2  950A               	bcf	_loRa& (0+255),2,b
  8134                           
  8135                           ;lorawan.c: 873: loRa.macStatus.networkJoined = 0;
  8136  006CD4  990C               	bcf	(_loRa+2)& (0+255),4,b
  8137  006CD6                     l10779:
  8138                           
  8139                           ; BSR set to: 2
  8140                           ;lorawan.c: 874: }
  8141                           ;lorawan.c: 876: ResetParametersForUnconfirmedTransmission();
  8142  006CD6  ECB0  F049         	call	_ResetParametersForUnconfirmedTransmission	;wreg free
  8143                           
  8144                           ;lorawan.c: 877: ResetParametersForConfirmedTransmission();
  8145  006CDA  ECD7  F049         	call	_ResetParametersForConfirmedTransmission	;wreg free
  8146  006CDE                     l1057:
  8147                           
  8148                           ; _LORAWAN_ReceiveWindow2Callback: autosize = 0, savesize = 0, parsavesize = 0, tempsize
      +                           = 0 parsize = 1, argsize = 1, vargsize = 0
  8149  006CDE  52E5               	movf	postdec1,f,c
  8150  006CE0  0012               	return		;funcret
  8151  006CE2                     __end_of_LORAWAN_ReceiveWindow2Callback:
  8152                           	opt stack 0
  8153                           tosu	equ	0xFFF
  8154                           tosh	equ	0xFFE
  8155                           tosl	equ	0xFFD
  8156                           pclath	equ	0xFFA
  8157                           tblptru	equ	0xFF8
  8158                           tblptrh	equ	0xFF7
  8159                           tblptrl	equ	0xFF6
  8160                           tablat	equ	0xFF5
  8161                           prodh	equ	0xFF4
  8162                           prodl	equ	0xFF3
  8163                           intcon	equ	0xFF2
  8164                           intcon2	equ	0xFF1
  8165                           intcon3	equ	0xFF0
  8166                           postinc0	equ	0xFEE
  8167                           wreg	equ	0xFE8
  8168                           postinc1	equ	0xFE6
  8169                           postdec1	equ	0xFE5
  8170                           plusw1	equ	0xFE3
  8171                           fsr1h	equ	0xFE2
  8172                           fsr1l	equ	0xFE1
  8173                           indf2	equ	0xFDF
  8174                           postinc2	equ	0xFDE
  8175                           postdec2	equ	0xFDD
  8176                           fsr2h	equ	0xFDA
  8177                           fsr2l	equ	0xFD9
  8178                           status	equ	0xFD8
  8179                           
  8180 ;; *************** function _LORAWAN_ReceiveWindow1Callback *****************
  8181 ;; Defined at:
  8182 ;;		line 796 in file "mcc_generated_files/LoRaWAN/lorawan.c"
  8183 ;; Parameters:    Size  Location     Type
  8184 ;;  param           1  [STACK] unsigned char 
  8185 ;; Auto vars:     Size  Location     Type
  8186 ;;  freq            4  [STACK] unsigned long 
  8187 ;; Return value:  Size  Location     Type
  8188 ;;                  1  [STACK] void 
  8189 ;; Registers used:
  8190 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp+8, btemp+9, btemp+10, btemp+11, tblptrl, t
      +blptrh, tblptru, prodl, prodh, cstack
  8191 ;; Tracked objects:
  8192 ;;		On entry : 3F/0
  8193 ;;		On exit  : 0/0
  8194 ;;		Unchanged: 0/0
  8195 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8196 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8197 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8198 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8199 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8200 ;;Total ram usage:        0 bytes
  8201 ;; Hardware stack levels used:    1
  8202 ;; Hardware stack levels required when called:   13
  8203 ;; This function calls:
  8204 ;;		_ConfigureRadioRx
  8205 ;;		_GetRx1Freq
  8206 ;;		_RADIO_ReceiveStart
  8207 ;;		_RADIO_ReceiveStop
  8208 ;;		_RADIO_ReleaseData
  8209 ;; This function is called by:
  8210 ;;		_SetCallbackSoftwareTimers
  8211 ;;		_SwTimersExecute
  8212 ;; This function uses a reentrant model
  8213 ;;
  8214                           
  8215                           	psect	text43
  8216  007016                     __ptext43:
  8217                           	opt stack 0
  8218  007016                     _LORAWAN_ReceiveWindow1Callback:
  8219                           	opt stack 0
  8220                           
  8221                           ; autosize = 4, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, argsize = 1 var
      +                          gsize = 0, retsize = 0
  8222  007016  52E6               	movf	postinc1,f,c
  8223  007018  52E6               	movf	postinc1,f,c
  8224  00701A  52E6               	movf	postinc1,f,c
  8225  00701C  52E6               	movf	postinc1,f,c
  8226                           
  8227                           ;lorawan.c: 798: uint32_t freq;
  8228                           ;lorawan.c: 800: if(loRa.macStatus.macPause == 0)
  8229                           
  8230                           ;incstack = 0
  8231  00701E  0102               	movlb	2	; () banked
  8232  007020  B10D               	btfsc	(_loRa+3)& (0+255),0,b
  8233  007022  D050               	goto	l1045
  8234                           
  8235                           ; BSR set to: 2
  8236                           ;lorawan.c: 801: {
  8237                           ;lorawan.c: 802: if (CLASS_C == loRa.deviceClass)
  8238  007024  0E02               	movlw	2
  8239  007026  191C               	xorwf	(_loRa+18)& (0+255),w,b
  8240  007028  B4D8               	btfsc	status,2,c
  8241                           
  8242                           ; BSR set to: 2
  8243                           ;lorawan.c: 803: {
  8244                           ;lorawan.c: 804: RADIO_ReceiveStop();
  8245  00702A  ECAE  F048         	call	_RADIO_ReceiveStop	;wreg free
  8246                           
  8247                           ;lorawan.c: 805: }
  8248                           ;lorawan.c: 806: if (loRa.receiveWindow1Parameters.dataRate >= loRa.offset)
  8249  00702E  0102               	movlb	2	; () banked
  8250  007030  51F9               	movf	(_loRa+239)& (0+255),w,b
  8251  007032  5D21               	subwf	(_loRa+23)& (0+255),w,b
  8252  007034  A0D8               	btfss	status,0,c
  8253  007036  D004               	goto	l1043
  8254                           
  8255                           ; BSR set to: 2
  8256                           ;lorawan.c: 807: {
  8257                           ;lorawan.c: 808: loRa.receiveWindow1Parameters.dataRate = loRa.receiveWindow1Parameters.
      +                          dataRate - loRa.offset;
  8258  007038  51F9               	movf	(_loRa+239)& (0+255),w,b
  8259  00703A  5D21               	subwf	(_loRa+23)& (0+255),w,b
  8260  00703C  6F21               	movwf	(_loRa+23)& (0+255),b
  8261                           
  8262                           ;lorawan.c: 809: }
  8263  00703E  D001               	goto	l12027
  8264  007040                     l1043:
  8265                           
  8266                           ; BSR set to: 2
  8267                           ;lorawan.c: 810: else
  8268                           ;lorawan.c: 811: {
  8269                           ;lorawan.c: 812: loRa.receiveWindow1Parameters.dataRate = 0;
  8270  007040  6B21               	clrf	(_loRa+23)& (0+255),b
  8271  007042                     l12027:
  8272                           
  8273                           ; BSR set to: 2
  8274                           ;lorawan.c: 813: }
  8275                           ;lorawan.c: 815: freq = GetRx1Freq();
  8276  007042  ECCE  F049         	call	_GetRx1Freq	;wreg free
  8277  007046  C060  F046         	movff	?_GetRx1Freq,btemp+8
  8278  00704A  C061  F047         	movff	?_GetRx1Freq+1,btemp+9
  8279  00704E  C062  F048         	movff	?_GetRx1Freq+2,btemp+10
  8280  007052  C063  F049         	movff	?_GetRx1Freq+3,btemp+11
  8281                           
  8282                           ;stkvar	LORAWAN_ReceiveWindow1Callback@freq @ sp[(-4)+0]
  8283  007056  0EFC               	movlw	-4
  8284  007058  C046  FFE3         	movff	btemp+8,plusw1
  8285  00705C  0EFD               	movlw	-3
  8286  00705E  C047  FFE3         	movff	btemp+9,plusw1
  8287  007062  0EFE               	movlw	-2
  8288  007064  C048  FFE3         	movff	btemp+10,plusw1
  8289  007068  0EFF               	movlw	-1
  8290  00706A  C049  FFE3         	movff	btemp+11,plusw1
  8291                           
  8292                           ;lorawan.c: 817: loRa.macStatus.macState = RX1_OPEN;
  8293  00706E  0102               	movlb	2	; () banked
  8294  007070  510C               	movf	(_loRa+2)& (0+255),w,b
  8295  007072  0BF0               	andlw	-16
  8296  007074  0903               	iorlw	3
  8297  007076  6F0C               	movwf	(_loRa+2)& (0+255),b
  8298                           
  8299                           ; BSR set to: 2
  8300                           ;lorawan.c: 819: RADIO_ReleaseData();
  8301  007078  ECB0  F04A         	call	_RADIO_ReleaseData	;wreg free
  8302                           
  8303                           ;lorawan.c: 821: ConfigureRadioRx(loRa.receiveWindow1Parameters.dataRate, freq);
  8304                           ;stkvar	LORAWAN_ReceiveWindow1Callback@freq @ sp[(-4)+0]
  8305  00707C  50E1               	movf	fsr1l,w,c
  8306  00707E  0FFC               	addlw	-4
  8307  007080  6ED9               	movwf	fsr2l,c
  8308  007082  50E2               	movf	fsr1h,w,c
  8309  007084  6EDA               	movwf	fsr2h,c
  8310  007086  0EFF               	movlw	255
  8311  007088  22DA               	addwfc	fsr2h,f,c
  8312  00708A  CFDE F073          	movff	postinc2,ConfigureRadioRx@freq
  8313  00708E  CFDE F074          	movff	postinc2,ConfigureRadioRx@freq+1
  8314  007092  CFDE F075          	movff	postinc2,ConfigureRadioRx@freq+2
  8315  007096  CFDE F076          	movff	postinc2,ConfigureRadioRx@freq+3
  8316  00709A  0102               	movlb	2	; () banked
  8317  00709C  5121               	movf	(_loRa+23)& (0+255),w,b
  8318  00709E  EC96  F047         	call	_ConfigureRadioRx
  8319                           
  8320                           ;lorawan.c: 823: RADIO_ReceiveStart(rxWindowSize[loRa.receiveWindow1Parameters.dataRate]
      +                          );
  8321  0070A2  0E7F               	movlw	low _rxWindowSize
  8322  0070A4  0102               	movlb	2	; () banked
  8323  0070A6  2521               	addwf	(_loRa+23)& (0+255),w,b
  8324  0070A8  6EF6               	movwf	tblptrl,c
  8325  0070AA  6AF7               	clrf	tblptrh,c
  8326  0070AC  0EFF               	movlw	high _rxWindowSize
  8327  0070AE  22F7               	addwfc	tblptrh,f,c
  8328  0070B0                     	if	1	;There are 3 active tblptr bytes
  8329  0070B0  6AF8               	clrf	tblptru,c
  8330  0070B2  0E00               	movlw	low (__mediumconst shr (0+16))
  8331  0070B4  22F8               	addwfc	tblptru,f,c
  8332  0070B6                     	endif
  8333  0070B6  0008               	tblrd		*
  8334  0070B8  50F5               	movf	tablat,w,c
  8335  0070BA  0100               	movlb	0	; () banked
  8336  0070BC  6FB1               	movwf	RADIO_ReceiveStart@rxWindowSize& (0+255),b
  8337  0070BE  6BB2               	clrf	(RADIO_ReceiveStart@rxWindowSize+1)& (0+255),b
  8338  0070C0  EC13  F021         	call	_RADIO_ReceiveStart	;wreg free
  8339  0070C4                     l1045:
  8340                           
  8341                           ; _LORAWAN_ReceiveWindow1Callback: autosize = 4, savesize = 0, parsavesize = 0, tempsize
      +                           = 0 parsize = 1, argsize = 1, vargsize = 0
  8342  0070C4  0EFB               	movlw	251
  8343  0070C6  26E1               	addwf	fsr1l,f,c
  8344  0070C8  0EFF               	movlw	255
  8345  0070CA  22E2               	addwfc	fsr1h,f,c
  8346  0070CC  0012               	return		;funcret
  8347  0070CE                     __end_of_LORAWAN_ReceiveWindow1Callback:
  8348                           	opt stack 0
  8349                           tosu	equ	0xFFF
  8350                           tosh	equ	0xFFE
  8351                           tosl	equ	0xFFD
  8352                           pclath	equ	0xFFA
  8353                           tblptru	equ	0xFF8
  8354                           tblptrh	equ	0xFF7
  8355                           tblptrl	equ	0xFF6
  8356                           tablat	equ	0xFF5
  8357                           prodh	equ	0xFF4
  8358                           prodl	equ	0xFF3
  8359                           intcon	equ	0xFF2
  8360                           intcon2	equ	0xFF1
  8361                           intcon3	equ	0xFF0
  8362                           postinc0	equ	0xFEE
  8363                           wreg	equ	0xFE8
  8364                           postinc1	equ	0xFE6
  8365                           postdec1	equ	0xFE5
  8366                           plusw1	equ	0xFE3
  8367                           fsr1h	equ	0xFE2
  8368                           fsr1l	equ	0xFE1
  8369                           indf2	equ	0xFDF
  8370                           postinc2	equ	0xFDE
  8371                           postdec2	equ	0xFDD
  8372                           fsr2h	equ	0xFDA
  8373                           fsr2l	equ	0xFD9
  8374                           status	equ	0xFD8
  8375                           
  8376 ;; *************** function _RADIO_WatchdogTimeout *****************
  8377 ;; Defined at:
  8378 ;;		line 1408 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
  8379 ;; Parameters:    Size  Location     Type
  8380 ;;  param           1  [STACK] unsigned char 
  8381 ;; Auto vars:     Size  Location     Type
  8382 ;;		None
  8383 ;; Return value:  Size  Location     Type
  8384 ;;                  1  [STACK] void 
  8385 ;; Registers used:
  8386 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, btemp+1, btemp+2, btemp+11, tosl, tblptrl, tblptrh, tb
      +lptru, prodl, prodh, cstack
  8387 ;; Tracked objects:
  8388 ;;		On entry : 3F/0
  8389 ;;		On exit  : 0/0
  8390 ;;		Unchanged: 0/0
  8391 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8392 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8393 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8394 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8395 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8396 ;;Total ram usage:        0 bytes
  8397 ;; Hardware stack levels used:    1
  8398 ;; Hardware stack levels required when called:   16
  8399 ;; This function calls:
  8400 ;;		_LORAWAN_RxTimeout
  8401 ;;		_LORAWAN_TxDone
  8402 ;;		_RADIO_WriteMode
  8403 ;; This function is called by:
  8404 ;;		_RADIO_Init
  8405 ;;		_SwTimersExecute
  8406 ;; This function uses a reentrant model
  8407 ;;
  8408                           
  8409                           	psect	text44
  8410  008820                     __ptext44:
  8411                           	opt stack 0
  8412  008820                     _RADIO_WatchdogTimeout:
  8413                           	opt stack 12
  8414                           
  8415                           ;radio_driver_SX1276.c: 1410: RADIO_WriteMode(MODE_STANDBY, RadioConfiguration.modulatio
      +                          n, 1);
  8416                           
  8417                           ; autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, argsize = 1 var
      +                          gsize = 0, retsize = 0
  8418                           ;incstack = 0
  8419  008820  C16D  F065         	movff	_RadioConfiguration+24,RADIO_WriteMode@newModulation
  8420  008824  0E01               	movlw	1
  8421  008826  0100               	movlb	0	; () banked
  8422  008828  6F66               	movwf	RADIO_WriteMode@blocking& (0+255),b
  8423  00882A  0E01               	movlw	1
  8424  00882C  ECDA  F031         	call	_RADIO_WriteMode
  8425                           
  8426                           ;radio_driver_SX1276.c: 1411: RADIO_WriteMode(MODE_SLEEP, RadioConfiguration.modulation,
      +                           0);
  8427  008830  C16D  F065         	movff	_RadioConfiguration+24,RADIO_WriteMode@newModulation
  8428  008834  0E00               	movlw	0
  8429  008836  0100               	movlb	0	; () banked
  8430  008838  6F66               	movwf	RADIO_WriteMode@blocking& (0+255),b
  8431  00883A  0E00               	movlw	0
  8432  00883C  ECDA  F031         	call	_RADIO_WriteMode
  8433                           
  8434                           ;radio_driver_SX1276.c: 1412: RadioConfiguration.flags |= (1 << (4));
  8435  008840  0101               	movlb	1	; () banked
  8436  008842  8978               	bsf	(_RadioConfiguration+35)& (0+255),4,b
  8437                           
  8438                           ; BSR set to: 1
  8439                           ;radio_driver_SX1276.c: 1413: if ((RadioConfiguration.flags & (1 << (1))) != 0)
  8440  008844  A378               	btfss	(_RadioConfiguration+35)& (0+255),1,b
  8441  008846  D004               	goto	l455
  8442                           
  8443                           ; BSR set to: 1
  8444                           ;radio_driver_SX1276.c: 1414: {
  8445                           ;radio_driver_SX1276.c: 1415: RadioConfiguration.flags &= ~(1 << (1));
  8446  008848  9378               	bcf	(_RadioConfiguration+35)& (0+255),1,b
  8447                           
  8448                           ; BSR set to: 1
  8449                           ;radio_driver_SX1276.c: 1416: LORAWAN_RxTimeout();
  8450  00884A  ECF4  F012         	call	_LORAWAN_RxTimeout	;wreg free
  8451                           
  8452                           ;radio_driver_SX1276.c: 1417: }
  8453  00884E  D009               	goto	l458
  8454  008850                     l455:
  8455                           
  8456                           ; BSR set to: 1
  8457                           ;radio_driver_SX1276.c: 1418: else if ((RadioConfiguration.flags & (1 << (0))) != 0)
  8458  008850  A178               	btfss	(_RadioConfiguration+35)& (0+255),0,b
  8459  008852  D007               	goto	l458
  8460                           
  8461                           ; BSR set to: 1
  8462                           ;radio_driver_SX1276.c: 1419: {
  8463                           ;radio_driver_SX1276.c: 1420: RadioConfiguration.flags &= ~(1 << (0));
  8464  008854  9178               	bcf	(_RadioConfiguration+35)& (0+255),0,b
  8465                           
  8466                           ; BSR set to: 1
  8467                           ;radio_driver_SX1276.c: 1425: LORAWAN_TxDone(RadioConfiguration.watchdogTimerTimeout);
  8468  008856  C17F  F0BB         	movff	_RadioConfiguration+42,LORAWAN_TxDone@timeOnAir
  8469  00885A  C180  F0BC         	movff	_RadioConfiguration+43,LORAWAN_TxDone@timeOnAir+1
  8470  00885E  ECBD  F006         	call	_LORAWAN_TxDone	;wreg free
  8471  008862                     l458:
  8472                           
  8473                           ; _RADIO_WatchdogTimeout: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 pars
      +                          ize = 1, argsize = 1, vargsize = 0
  8474  008862  52E5               	movf	postdec1,f,c
  8475  008864  0012               	return		;funcret
  8476  008866                     __end_of_RADIO_WatchdogTimeout:
  8477                           	opt stack 0
  8478                           tosu	equ	0xFFF
  8479                           tosh	equ	0xFFE
  8480                           tosl	equ	0xFFD
  8481                           pclath	equ	0xFFA
  8482                           tblptru	equ	0xFF8
  8483                           tblptrh	equ	0xFF7
  8484                           tblptrl	equ	0xFF6
  8485                           tablat	equ	0xFF5
  8486                           prodh	equ	0xFF4
  8487                           prodl	equ	0xFF3
  8488                           intcon	equ	0xFF2
  8489                           intcon2	equ	0xFF1
  8490                           intcon3	equ	0xFF0
  8491                           postinc0	equ	0xFEE
  8492                           wreg	equ	0xFE8
  8493                           postinc1	equ	0xFE6
  8494                           postdec1	equ	0xFE5
  8495                           plusw1	equ	0xFE3
  8496                           fsr1h	equ	0xFE2
  8497                           fsr1l	equ	0xFE1
  8498                           indf2	equ	0xFDF
  8499                           postinc2	equ	0xFDE
  8500                           postdec2	equ	0xFDD
  8501                           fsr2h	equ	0xFDA
  8502                           fsr2l	equ	0xFD9
  8503                           status	equ	0xFD8
  8504                           
  8505 ;; *************** function _RADIO_RxFSKTimeout *****************
  8506 ;; Defined at:
  8507 ;;		line 1392 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
  8508 ;; Parameters:    Size  Location     Type
  8509 ;;  param           1  [STACK] unsigned char 
  8510 ;; Auto vars:     Size  Location     Type
  8511 ;;  irqFlags        1  [STACK] unsigned char 
  8512 ;; Return value:  Size  Location     Type
  8513 ;;                  1  [STACK] void 
  8514 ;; Registers used:
  8515 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, btemp+1, btemp+2, btemp+11, tosl, tblptr
      +l, tblptrh, tblptru, prodl, prodh, cstack
  8516 ;; Tracked objects:
  8517 ;;		On entry : 3F/0
  8518 ;;		On exit  : 0/0
  8519 ;;		Unchanged: 0/0
  8520 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8521 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8522 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8523 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8524 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8525 ;;Total ram usage:        0 bytes
  8526 ;; Hardware stack levels used:    1
  8527 ;; Hardware stack levels required when called:   16
  8528 ;; This function calls:
  8529 ;;		_LORAWAN_RxTimeout
  8530 ;;		_RADIO_RegisterRead
  8531 ;;		_RADIO_WriteMode
  8532 ;;		_SwTimerStop
  8533 ;; This function is called by:
  8534 ;;		_RADIO_Init
  8535 ;;		_SwTimersExecute
  8536 ;; This function uses a reentrant model
  8537 ;;
  8538                           
  8539                           	psect	text45
  8540  008BC8                     __ptext45:
  8541                           	opt stack 0
  8542  008BC8                     _RADIO_RxFSKTimeout:
  8543                           	opt stack 0
  8544                           
  8545                           ; autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, argsize = 1 var
      +                          gsize = 0, retsize = 0
  8546  008BC8  52E6               	movf	postinc1,f,c
  8547                           
  8548                           ;radio_driver_SX1276.c: 1394: uint8_t irqFlags;
  8549                           ;radio_driver_SX1276.c: 1395: irqFlags = RADIO_RegisterRead(0x3E);
  8550                           
  8551                           ;incstack = 0
  8552  008BCA  0E3E               	movlw	62
  8553  008BCC  ECE7  F047         	call	_RADIO_RegisterRead
  8554  008BD0  6E49               	movwf	btemp+11,c
  8555                           
  8556                           ;stkvar	RADIO_RxFSKTimeout@irqFlags @ sp[(-1)+0]
  8557  008BD2  0EFF               	movlw	-1
  8558  008BD4  C049  FFE3         	movff	btemp+11,plusw1
  8559                           
  8560                           ;radio_driver_SX1276.c: 1396: if (0 == (irqFlags & (1<<(0))))
  8561                           ;stkvar	RADIO_RxFSKTimeout@irqFlags @ sp[(-1)+0]
  8562  008BD8  0EFF               	movlw	-1
  8563  008BDA  B0E3               	btfsc	plusw1,0,c
  8564  008BDC  D010               	goto	l452
  8565                           
  8566                           ;radio_driver_SX1276.c: 1397: {
  8567                           ;radio_driver_SX1276.c: 1399: RADIO_WriteMode(MODE_SLEEP, RadioConfiguration.modulation,
      +                           0);
  8568  008BDE  C16D  F065         	movff	_RadioConfiguration+24,RADIO_WriteMode@newModulation
  8569  008BE2  0E00               	movlw	0
  8570  008BE4  0100               	movlb	0	; () banked
  8571  008BE6  6F66               	movwf	RADIO_WriteMode@blocking& (0+255),b
  8572  008BE8  0E00               	movlw	0
  8573  008BEA  ECDA  F031         	call	_RADIO_WriteMode
  8574                           
  8575                           ;radio_driver_SX1276.c: 1401: SwTimerStop(RadioConfiguration.watchdogTimerId);
  8576  008BEE  0101               	movlb	1	; () banked
  8577  008BF0  517E               	movf	(_RadioConfiguration+41)& (0+255),w,b
  8578  008BF2  ECFB  F047         	call	_SwTimerStop
  8579                           
  8580                           ;radio_driver_SX1276.c: 1402: RadioConfiguration.flags &= ~(1 << (1));
  8581  008BF6  0101               	movlb	1	; () banked
  8582  008BF8  9378               	bcf	(_RadioConfiguration+35)& (0+255),1,b
  8583                           
  8584                           ; BSR set to: 1
  8585                           ;radio_driver_SX1276.c: 1403: LORAWAN_RxTimeout();
  8586  008BFA  ECF4  F012         	call	_LORAWAN_RxTimeout	;wreg free
  8587  008BFE                     l452:
  8588                           
  8589                           ; _RADIO_RxFSKTimeout: autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize
      +                           = 1, argsize = 1, vargsize = 0
  8590  008BFE  52E5               	movf	postdec1,f,c
  8591  008C00  52E5               	movf	postdec1,f,c
  8592  008C02  0012               	return		;funcret
  8593  008C04                     __end_of_RADIO_RxFSKTimeout:
  8594                           	opt stack 0
  8595                           tosu	equ	0xFFF
  8596                           tosh	equ	0xFFE
  8597                           tosl	equ	0xFFD
  8598                           pclath	equ	0xFFA
  8599                           tblptru	equ	0xFF8
  8600                           tblptrh	equ	0xFF7
  8601                           tblptrl	equ	0xFF6
  8602                           tablat	equ	0xFF5
  8603                           prodh	equ	0xFF4
  8604                           prodl	equ	0xFF3
  8605                           intcon	equ	0xFF2
  8606                           intcon2	equ	0xFF1
  8607                           intcon3	equ	0xFF0
  8608                           postinc0	equ	0xFEE
  8609                           wreg	equ	0xFE8
  8610                           postinc1	equ	0xFE6
  8611                           postdec1	equ	0xFE5
  8612                           plusw1	equ	0xFE3
  8613                           fsr1h	equ	0xFE2
  8614                           fsr1l	equ	0xFE1
  8615                           indf2	equ	0xFDF
  8616                           postinc2	equ	0xFDE
  8617                           postdec2	equ	0xFDD
  8618                           fsr2h	equ	0xFDA
  8619                           fsr2l	equ	0xFD9
  8620                           status	equ	0xFD8
  8621                           
  8622 ;; *************** function _UnconfirmedTransmissionCallback *****************
  8623 ;; Defined at:
  8624 ;;		line 997 in file "mcc_generated_files/LoRaWAN/lorawan.c"
  8625 ;; Parameters:    Size  Location     Type
  8626 ;;  param           1  [STACK] unsigned char 
  8627 ;; Auto vars:     Size  Location     Type
  8628 ;;		None
  8629 ;; Return value:  Size  Location     Type
  8630 ;;                  1  [STACK] void 
  8631 ;; Registers used:
  8632 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, btemp+1, btemp+2, tosl, tblptrl, tblptrh, tblptru, pro
      +dl, prodh, cstack
  8633 ;; Tracked objects:
  8634 ;;		On entry : 3F/0
  8635 ;;		On exit  : 0/0
  8636 ;;		Unchanged: 0/0
  8637 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8638 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8639 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8640 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8641 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8642 ;;Total ram usage:        0 bytes
  8643 ;; Hardware stack levels used:    1
  8644 ;; Hardware stack levels required when called:   13
  8645 ;; This function calls:
  8646 ;;		_RADIO_Transmit
  8647 ;;		_ResetParametersForUnconfirmedTransmission
  8648 ;;		_RxData
  8649 ;;		_SelectChannelForTransmission
  8650 ;; This function is called by:
  8651 ;;		_SetCallbackSoftwareTimers
  8652 ;;		_SwTimersExecute
  8653 ;; This function uses a reentrant model
  8654 ;;
  8655                           
  8656                           	psect	text46
  8657  007C4A                     __ptext46:
  8658                           	opt stack 0
  8659  007C4A                     _UnconfirmedTransmissionCallback:
  8660                           	opt stack 15
  8661                           
  8662                           ;lorawan.c: 1000: if ( (SelectChannelForTransmission (1) == OK) && (RADIO_Transmit (&mac
      +                          Buffer[16], loRa.lastPacketLength) == OK) )
  8663                           
  8664                           ; autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, argsize = 1 var
      +                          gsize = 0, retsize = 0
  8665                           ;incstack = 0
  8666  007C4A  0E01               	movlw	1
  8667  007C4C  EC09  F03F         	call	_SelectChannelForTransmission
  8668  007C50  0900               	iorlw	0
  8669  007C52  A4D8               	btfss	status,2,c
  8670  007C54  D018               	goto	l12127
  8671  007C56  0E9F               	movlw	low (_macBuffer+16)
  8672  007C58  0100               	movlb	0	; () banked
  8673  007C5A  6FB1               	movwf	RADIO_Transmit@buffer& (0+255),b
  8674  007C5C  0E06               	movlw	high (_macBuffer+16)
  8675  007C5E  6FB2               	movwf	(RADIO_Transmit@buffer+1)& (0+255),b
  8676  007C60  C2DE  F0B3         	movff	_loRa+212,RADIO_Transmit@bufferLen
  8677  007C64  ECF7  F01F         	call	_RADIO_Transmit	;wreg free
  8678  007C68  C0B1  F03F         	movff	?_RADIO_Transmit,btemp+1
  8679  007C6C  C0B2  F040         	movff	?_RADIO_Transmit+1,btemp+2
  8680  007C70  503F               	movf	btemp+1,w,c
  8681  007C72  1040               	iorwf	btemp+2,w,c
  8682  007C74  A4D8               	btfss	status,2,c
  8683  007C76  D007               	goto	l12127
  8684                           
  8685                           ;lorawan.c: 1001: {
  8686                           ;lorawan.c: 1002: loRa.counterRepetitionsUnconfirmedUplink ++ ;
  8687  007C78  0102               	movlb	2	; () banked
  8688  007C7A  2BE2               	incf	(_loRa+216)& (0+255),f,b
  8689                           
  8690                           ; BSR set to: 2
  8691                           ;lorawan.c: 1003: loRa.macStatus.macState = TRANSMISSION_OCCURRING;
  8692  007C7C  510C               	movf	(_loRa+2)& (0+255),w,b
  8693  007C7E  0BF0               	andlw	-16
  8694  007C80  0901               	iorlw	1
  8695  007C82  6F0C               	movwf	(_loRa+2)& (0+255),b
  8696                           
  8697                           ;lorawan.c: 1005: }
  8698  007C84  D01C               	goto	u13279
  8699  007C86                     l12127:
  8700                           
  8701                           ;lorawan.c: 1006: else
  8702                           ;lorawan.c: 1008: {
  8703                           ;lorawan.c: 1009: ResetParametersForUnconfirmedTransmission ();
  8704  007C86  ECB0  F049         	call	_ResetParametersForUnconfirmedTransmission	;wreg free
  8705                           
  8706                           ;lorawan.c: 1010: if (rxPayload.RxAppData != (0))
  8707  007C8A  0101               	movlb	1	; () banked
  8708  007C8C  510C               	movf	_rxPayload& (0+255),w,b
  8709  007C8E  110D               	iorwf	(_rxPayload+1)& (0+255),w,b
  8710  007C90  B4D8               	btfsc	status,2,c
  8711  007C92  D015               	goto	u13279
  8712                           
  8713                           ; BSR set to: 1
  8714                           ;lorawan.c: 1011: {
  8715                           ;lorawan.c: 1012: rxPayload.RxAppData((0), 0, MAC_NOT_OK);
  8716  007C94  0E00               	movlw	0
  8717  007C96  0100               	movlb	0	; () banked
  8718  007C98  6F60               	movwf	RxData@pData& (0+255),b
  8719  007C9A  0E00               	movlw	0
  8720  007C9C  6F61               	movwf	(RxData@pData+1)& (0+255),b
  8721  007C9E  0E00               	movlw	0
  8722  007CA0  6F62               	movwf	RxData@dataLength& (0+255),b
  8723  007CA2  0E00               	movlw	0
  8724  007CA4  6F63               	movwf	RxData@status& (0+255),b
  8725  007CA6  D801               	call	u13278
  8726  007CA8  D00A               	goto	u13279
  8727  007CAA                     u13278:
  8728  007CAA  0005               	push	
  8729  007CAC  6EFA               	movwf	pclath,c
  8730  007CAE  0101               	movlb	1	; () banked
  8731  007CB0  510C               	movf	_rxPayload& (0+255),w,b
  8732  007CB2  6EFD               	movwf	tosl,c
  8733  007CB4  510D               	movf	(_rxPayload+1)& (0+255),w,b
  8734  007CB6  6EFE               	movwf	tosh,c
  8735  007CB8  6AFF               	clrf	tosu,c
  8736  007CBA  50FA               	movf	pclath,w,c
  8737  007CBC  0012               	return		;indir
  8738  007CBE                     u13279:
  8739                           
  8740                           ; _UnconfirmedTransmissionCallback: autosize = 0, savesize = 0, parsavesize = 0, tempsiz
      +                          e = 0 parsize = 1, argsize = 1, vargsize = 0
  8741  007CBE  52E5               	movf	postdec1,f,c
  8742  007CC0  0012               	return		;funcret
  8743  007CC2                     __end_of_UnconfirmedTransmissionCallback:
  8744                           	opt stack 0
  8745                           tosu	equ	0xFFF
  8746                           tosh	equ	0xFFE
  8747                           tosl	equ	0xFFD
  8748                           pclath	equ	0xFFA
  8749                           tblptru	equ	0xFF8
  8750                           tblptrh	equ	0xFF7
  8751                           tblptrl	equ	0xFF6
  8752                           tablat	equ	0xFF5
  8753                           prodh	equ	0xFF4
  8754                           prodl	equ	0xFF3
  8755                           intcon	equ	0xFF2
  8756                           intcon2	equ	0xFF1
  8757                           intcon3	equ	0xFF0
  8758                           postinc0	equ	0xFEE
  8759                           wreg	equ	0xFE8
  8760                           postinc1	equ	0xFE6
  8761                           postdec1	equ	0xFE5
  8762                           plusw1	equ	0xFE3
  8763                           fsr1h	equ	0xFE2
  8764                           fsr1l	equ	0xFE1
  8765                           indf2	equ	0xFDF
  8766                           postinc2	equ	0xFDE
  8767                           postdec2	equ	0xFDD
  8768                           fsr2h	equ	0xFDA
  8769                           fsr2l	equ	0xFD9
  8770                           status	equ	0xFD8
  8771                           
  8772 ;; *************** function _GetRx1Freq *****************
  8773 ;; Defined at:
  8774 ;;		line 883 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
  8775 ;; Parameters:    Size  Location     Type
  8776 ;;		None
  8777 ;; Auto vars:     Size  Location     Type
  8778 ;;		None
  8779 ;; Return value:  Size  Location     Type
  8780 ;;                  4    0[BANK0 ] unsigned long 
  8781 ;; Registers used:
  8782 ;;		None
  8783 ;; Tracked objects:
  8784 ;;		On entry : 0/0
  8785 ;;		On exit  : 0/0
  8786 ;;		Unchanged: 0/0
  8787 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8788 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8789 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8790 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8791 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8792 ;;Total ram usage:        4 bytes
  8793 ;; Hardware stack levels used:    1
  8794 ;; Hardware stack levels required when called:    7
  8795 ;; This function calls:
  8796 ;;		Nothing
  8797 ;; This function is called by:
  8798 ;;		_LORAWAN_ReceiveWindow1Callback
  8799 ;; This function uses a non-reentrant model
  8800 ;;
  8801                           
  8802                           	psect	text47
  8803  00939C                     __ptext47:
  8804                           	opt stack 0
  8805  00939C                     _GetRx1Freq:
  8806                           	opt stack 20
  8807                           
  8808                           ;lorawan_eu.c: 885: return loRa.receiveWindow1Parameters.frequency;
  8809                           
  8810                           ;incstack = 0
  8811  00939C  C21D  F060         	movff	_loRa+19,?_GetRx1Freq
  8812  0093A0  C21E  F061         	movff	_loRa+20,?_GetRx1Freq+1
  8813  0093A4  C21F  F062         	movff	_loRa+21,?_GetRx1Freq+2
  8814  0093A8  C220  F063         	movff	_loRa+22,?_GetRx1Freq+3
  8815  0093AC  0012               	return		;funcret
  8816  0093AE                     __end_of_GetRx1Freq:
  8817                           	opt stack 0
  8818                           tosu	equ	0xFFF
  8819                           tosh	equ	0xFFE
  8820                           tosl	equ	0xFFD
  8821                           pclath	equ	0xFFA
  8822                           tblptru	equ	0xFF8
  8823                           tblptrh	equ	0xFF7
  8824                           tblptrl	equ	0xFF6
  8825                           tablat	equ	0xFF5
  8826                           prodh	equ	0xFF4
  8827                           prodl	equ	0xFF3
  8828                           intcon	equ	0xFF2
  8829                           intcon2	equ	0xFF1
  8830                           intcon3	equ	0xFF0
  8831                           postinc0	equ	0xFEE
  8832                           wreg	equ	0xFE8
  8833                           postinc1	equ	0xFE6
  8834                           postdec1	equ	0xFE5
  8835                           plusw1	equ	0xFE3
  8836                           fsr1h	equ	0xFE2
  8837                           fsr1l	equ	0xFE1
  8838                           indf2	equ	0xFDF
  8839                           postinc2	equ	0xFDE
  8840                           postdec2	equ	0xFDD
  8841                           fsr2h	equ	0xFDA
  8842                           fsr2l	equ	0xFD9
  8843                           status	equ	0xFD8
  8844                           
  8845 ;; *************** function _RADIO_DIO5 *****************
  8846 ;; Defined at:
  8847 ;;		line 1344 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
  8848 ;; Parameters:    Size  Location     Type
  8849 ;;		None
  8850 ;; Auto vars:     Size  Location     Type
  8851 ;;  dioMapping      1    6[BANK0 ] unsigned char 
  8852 ;; Return value:  Size  Location     Type
  8853 ;;                  1    wreg      void 
  8854 ;; Registers used:
  8855 ;;		wreg, status,2, status,0, cstack
  8856 ;; Tracked objects:
  8857 ;;		On entry : 0/0
  8858 ;;		On exit  : 0/0
  8859 ;;		Unchanged: 0/0
  8860 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8861 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8862 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8863 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8864 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8865 ;;Total ram usage:        2 bytes
  8866 ;; Hardware stack levels used:    1
  8867 ;; Hardware stack levels required when called:   11
  8868 ;; This function calls:
  8869 ;;		_RADIO_RegisterRead
  8870 ;;		_RADIO_UnhandledInterrupt
  8871 ;; This function is called by:
  8872 ;;		_LORAWAN_Mainloop
  8873 ;; This function uses a non-reentrant model
  8874 ;;
  8875                           
  8876                           	psect	text48
  8877  008F56                     __ptext48:
  8878                           	opt stack 0
  8879  008F56                     _RADIO_DIO5:
  8880                           	opt stack 18
  8881                           
  8882                           ;radio_driver_SX1276.c: 1347: uint8_t dioMapping;
  8883                           ;radio_driver_SX1276.c: 1348: dioMapping = (RADIO_RegisterRead(0x41) & 0x30) >> (4);
  8884                           
  8885                           ;incstack = 0
  8886  008F56  0E41               	movlw	65
  8887  008F58  ECE7  F047         	call	_RADIO_RegisterRead
  8888  008F5C  0100               	movlb	0	; () banked
  8889  008F5E  6F65               	movwf	??_RADIO_DIO5& (0+255),b
  8890  008F60  3965               	swapf	??_RADIO_DIO5& (0+255),w,b
  8891  008F62  0B0F               	andlw	15
  8892  008F64  0B03               	andlw	3
  8893  008F66  6F66               	movwf	RADIO_DIO5@dioMapping& (0+255),b
  8894                           
  8895                           ;radio_driver_SX1276.c: 1350: if ((RADIO_RegisterRead(0x01) & 0x80) != 0)
  8896  008F68  0E01               	movlw	1
  8897  008F6A  ECE7  F047         	call	_RADIO_RegisterRead
  8898  008F6E  0100               	movlb	0	; () banked
  8899  008F70  6F65               	movwf	??_RADIO_DIO5& (0+255),b
  8900  008F72  AF65               	btfss	??_RADIO_DIO5& (0+255),7,b
  8901  008F74  0012               	return	
  8902                           
  8903                           ;radio_driver_SX1276.c: 1356: RADIO_UnhandledInterrupt(MODULATION_LORA);
  8904                           
  8905                           ; BSR set to: 0
  8906                           
  8907                           ;radio_driver_SX1276.c: 1354: {
  8908                           ;radio_driver_SX1276.c: 1355: default:
  8909                           
  8910                           ; BSR set to: 0
  8911                           ;radio_driver_SX1276.c: 1351: {
  8912                           ;radio_driver_SX1276.c: 1353: switch (dioMapping)
  8913  008F76  0E01               	movlw	1
  8914  008F78  EC52  F046         	call	_RADIO_UnhandledInterrupt
  8915                           
  8916                           ;radio_driver_SX1276.c: 1358: }
  8917                           
  8918                           ;radio_driver_SX1276.c: 1357: break;
  8919  008F7C  0012               	return	
  8920  008F7E                     __end_of_RADIO_DIO5:
  8921                           	opt stack 0
  8922                           tosu	equ	0xFFF
  8923                           tosh	equ	0xFFE
  8924                           tosl	equ	0xFFD
  8925                           pclath	equ	0xFFA
  8926                           tblptru	equ	0xFF8
  8927                           tblptrh	equ	0xFF7
  8928                           tblptrl	equ	0xFF6
  8929                           tablat	equ	0xFF5
  8930                           prodh	equ	0xFF4
  8931                           prodl	equ	0xFF3
  8932                           intcon	equ	0xFF2
  8933                           intcon2	equ	0xFF1
  8934                           intcon3	equ	0xFF0
  8935                           postinc0	equ	0xFEE
  8936                           wreg	equ	0xFE8
  8937                           postinc1	equ	0xFE6
  8938                           postdec1	equ	0xFE5
  8939                           plusw1	equ	0xFE3
  8940                           fsr1h	equ	0xFE2
  8941                           fsr1l	equ	0xFE1
  8942                           indf2	equ	0xFDF
  8943                           postinc2	equ	0xFDE
  8944                           postdec2	equ	0xFDD
  8945                           fsr2h	equ	0xFDA
  8946                           fsr2l	equ	0xFD9
  8947                           status	equ	0xFD8
  8948                           
  8949 ;; *************** function _RADIO_DIO4 *****************
  8950 ;; Defined at:
  8951 ;;		line 1321 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
  8952 ;; Parameters:    Size  Location     Type
  8953 ;;		None
  8954 ;; Auto vars:     Size  Location     Type
  8955 ;;  dioMapping      1    7[BANK0 ] unsigned char 
  8956 ;; Return value:  Size  Location     Type
  8957 ;;                  1    wreg      void 
  8958 ;; Registers used:
  8959 ;;		wreg, status,2, status,0, cstack
  8960 ;; Tracked objects:
  8961 ;;		On entry : 0/0
  8962 ;;		On exit  : 0/0
  8963 ;;		Unchanged: 0/0
  8964 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8965 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8966 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8967 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8968 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8969 ;;Total ram usage:        3 bytes
  8970 ;; Hardware stack levels used:    1
  8971 ;; Hardware stack levels required when called:   11
  8972 ;; This function calls:
  8973 ;;		_RADIO_RegisterRead
  8974 ;;		_RADIO_UnhandledInterrupt
  8975 ;; This function is called by:
  8976 ;;		_LORAWAN_Mainloop
  8977 ;; This function uses a non-reentrant model
  8978 ;;
  8979                           
  8980                           	psect	text49
  8981  008C72                     __ptext49:
  8982                           	opt stack 0
  8983  008C72                     _RADIO_DIO4:
  8984                           	opt stack 18
  8985                           
  8986                           ;radio_driver_SX1276.c: 1324: uint8_t dioMapping;
  8987                           ;radio_driver_SX1276.c: 1325: dioMapping = (RADIO_RegisterRead(0x41) & 0xC0) >> (6);
  8988                           
  8989                           ;incstack = 0
  8990  008C72  0E41               	movlw	65
  8991  008C74  ECE7  F047         	call	_RADIO_RegisterRead
  8992  008C78  0100               	movlb	0	; () banked
  8993  008C7A  6F65               	movwf	??_RADIO_DIO4& (0+255),b
  8994  008C7C  0E06               	movlw	6
  8995  008C7E  6F66               	movwf	(??_RADIO_DIO4+1)& (0+255),b
  8996  008C80                     u13565:
  8997  008C80  90D8               	bcf	status,0,c
  8998  008C82  3365               	rrcf	??_RADIO_DIO4& (0+255),f,b
  8999  008C84  2F66               	decfsz	(??_RADIO_DIO4+1)& (0+255),f,b
  9000  008C86  D7FC               	goto	u13565
  9001  008C88  5165               	movf	??_RADIO_DIO4& (0+255),w,b
  9002  008C8A  0B03               	andlw	3
  9003  008C8C  6F67               	movwf	RADIO_DIO4@dioMapping& (0+255),b
  9004                           
  9005                           ;radio_driver_SX1276.c: 1327: if ((RADIO_RegisterRead(0x01) & 0x80) != 0)
  9006  008C8E  0E01               	movlw	1
  9007  008C90  ECE7  F047         	call	_RADIO_RegisterRead
  9008  008C94  0100               	movlb	0	; () banked
  9009  008C96  6F65               	movwf	??_RADIO_DIO4& (0+255),b
  9010  008C98  AF65               	btfss	??_RADIO_DIO4& (0+255),7,b
  9011  008C9A  0012               	return	
  9012                           
  9013                           ;radio_driver_SX1276.c: 1333: RADIO_UnhandledInterrupt(MODULATION_LORA);
  9014                           
  9015                           ; BSR set to: 0
  9016                           
  9017                           ;radio_driver_SX1276.c: 1331: {
  9018                           ;radio_driver_SX1276.c: 1332: default:
  9019                           
  9020                           ; BSR set to: 0
  9021                           ;radio_driver_SX1276.c: 1328: {
  9022                           ;radio_driver_SX1276.c: 1330: switch (dioMapping)
  9023  008C9C  0E01               	movlw	1
  9024  008C9E  EC52  F046         	call	_RADIO_UnhandledInterrupt
  9025                           
  9026                           ;radio_driver_SX1276.c: 1335: }
  9027                           
  9028                           ;radio_driver_SX1276.c: 1334: break;
  9029  008CA2  0012               	return	
  9030  008CA4                     __end_of_RADIO_DIO4:
  9031                           	opt stack 0
  9032                           tosu	equ	0xFFF
  9033                           tosh	equ	0xFFE
  9034                           tosl	equ	0xFFD
  9035                           pclath	equ	0xFFA
  9036                           tblptru	equ	0xFF8
  9037                           tblptrh	equ	0xFF7
  9038                           tblptrl	equ	0xFF6
  9039                           tablat	equ	0xFF5
  9040                           prodh	equ	0xFF4
  9041                           prodl	equ	0xFF3
  9042                           intcon	equ	0xFF2
  9043                           intcon2	equ	0xFF1
  9044                           intcon3	equ	0xFF0
  9045                           postinc0	equ	0xFEE
  9046                           wreg	equ	0xFE8
  9047                           postinc1	equ	0xFE6
  9048                           postdec1	equ	0xFE5
  9049                           plusw1	equ	0xFE3
  9050                           fsr1h	equ	0xFE2
  9051                           fsr1l	equ	0xFE1
  9052                           indf2	equ	0xFDF
  9053                           postinc2	equ	0xFDE
  9054                           postdec2	equ	0xFDD
  9055                           fsr2h	equ	0xFDA
  9056                           fsr2l	equ	0xFD9
  9057                           status	equ	0xFD8
  9058                           
  9059 ;; *************** function _RADIO_DIO3 *****************
  9060 ;; Defined at:
  9061 ;;		line 1298 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
  9062 ;; Parameters:    Size  Location     Type
  9063 ;;		None
  9064 ;; Auto vars:     Size  Location     Type
  9065 ;;  dioMapping      1    6[BANK0 ] unsigned char 
  9066 ;; Return value:  Size  Location     Type
  9067 ;;                  1    wreg      void 
  9068 ;; Registers used:
  9069 ;;		wreg, status,2, status,0, cstack
  9070 ;; Tracked objects:
  9071 ;;		On entry : 0/0
  9072 ;;		On exit  : 0/0
  9073 ;;		Unchanged: 0/0
  9074 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9075 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9076 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9077 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9078 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9079 ;;Total ram usage:        2 bytes
  9080 ;; Hardware stack levels used:    1
  9081 ;; Hardware stack levels required when called:   11
  9082 ;; This function calls:
  9083 ;;		_RADIO_RegisterRead
  9084 ;;		_RADIO_UnhandledInterrupt
  9085 ;; This function is called by:
  9086 ;;		_LORAWAN_Mainloop
  9087 ;; This function uses a non-reentrant model
  9088 ;;
  9089                           
  9090                           	psect	text50
  9091  0090D6                     __ptext50:
  9092                           	opt stack 0
  9093  0090D6                     _RADIO_DIO3:
  9094                           	opt stack 18
  9095                           
  9096                           ;radio_driver_SX1276.c: 1301: uint8_t dioMapping;
  9097                           ;radio_driver_SX1276.c: 1302: dioMapping = RADIO_RegisterRead(0x40) & 0x03;
  9098                           
  9099                           ;incstack = 0
  9100  0090D6  0E40               	movlw	64
  9101  0090D8  ECE7  F047         	call	_RADIO_RegisterRead
  9102  0090DC  0B03               	andlw	3
  9103  0090DE  0100               	movlb	0	; () banked
  9104  0090E0  6F66               	movwf	RADIO_DIO3@dioMapping& (0+255),b
  9105                           
  9106                           ;radio_driver_SX1276.c: 1304: if ((RADIO_RegisterRead(0x01) & 0x80) != 0)
  9107  0090E2  0E01               	movlw	1
  9108  0090E4  ECE7  F047         	call	_RADIO_RegisterRead
  9109  0090E8  0100               	movlb	0	; () banked
  9110  0090EA  6F65               	movwf	??_RADIO_DIO3& (0+255),b
  9111  0090EC  AF65               	btfss	??_RADIO_DIO3& (0+255),7,b
  9112  0090EE  0012               	return	
  9113                           
  9114                           ;radio_driver_SX1276.c: 1310: RADIO_UnhandledInterrupt(MODULATION_LORA);
  9115                           
  9116                           ; BSR set to: 0
  9117                           
  9118                           ;radio_driver_SX1276.c: 1308: {
  9119                           ;radio_driver_SX1276.c: 1309: default:
  9120                           
  9121                           ; BSR set to: 0
  9122                           ;radio_driver_SX1276.c: 1305: {
  9123                           ;radio_driver_SX1276.c: 1307: switch (dioMapping)
  9124  0090F0  0E01               	movlw	1
  9125  0090F2  EC52  F046         	call	_RADIO_UnhandledInterrupt
  9126                           
  9127                           ;radio_driver_SX1276.c: 1312: }
  9128                           
  9129                           ;radio_driver_SX1276.c: 1311: break;
  9130  0090F6  0012               	return	
  9131  0090F8                     __end_of_RADIO_DIO3:
  9132                           	opt stack 0
  9133                           tosu	equ	0xFFF
  9134                           tosh	equ	0xFFE
  9135                           tosl	equ	0xFFD
  9136                           pclath	equ	0xFFA
  9137                           tblptru	equ	0xFF8
  9138                           tblptrh	equ	0xFF7
  9139                           tblptrl	equ	0xFF6
  9140                           tablat	equ	0xFF5
  9141                           prodh	equ	0xFF4
  9142                           prodl	equ	0xFF3
  9143                           intcon	equ	0xFF2
  9144                           intcon2	equ	0xFF1
  9145                           intcon3	equ	0xFF0
  9146                           postinc0	equ	0xFEE
  9147                           wreg	equ	0xFE8
  9148                           postinc1	equ	0xFE6
  9149                           postdec1	equ	0xFE5
  9150                           plusw1	equ	0xFE3
  9151                           fsr1h	equ	0xFE2
  9152                           fsr1l	equ	0xFE1
  9153                           indf2	equ	0xFDF
  9154                           postinc2	equ	0xFDE
  9155                           postdec2	equ	0xFDD
  9156                           fsr2h	equ	0xFDA
  9157                           fsr2l	equ	0xFD9
  9158                           status	equ	0xFD8
  9159                           
  9160 ;; *************** function _RADIO_DIO2 *****************
  9161 ;; Defined at:
  9162 ;;		line 1268 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
  9163 ;; Parameters:    Size  Location     Type
  9164 ;;		None
  9165 ;; Auto vars:     Size  Location     Type
  9166 ;;  dioMapping      1   28[BANK0 ] unsigned char 
  9167 ;;  opMode          1   27[BANK0 ] unsigned char 
  9168 ;; Return value:  Size  Location     Type
  9169 ;;                  1    wreg      void 
  9170 ;; Registers used:
  9171 ;;		wreg, status,2, status,0, cstack
  9172 ;; Tracked objects:
  9173 ;;		On entry : 0/0
  9174 ;;		On exit  : 0/0
  9175 ;;		Unchanged: 0/0
  9176 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9177 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9178 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9179 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9180 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9181 ;;Total ram usage:        3 bytes
  9182 ;; Hardware stack levels used:    1
  9183 ;; Hardware stack levels required when called:   12
  9184 ;; This function calls:
  9185 ;;		_RADIO_FHSSChangeChannel
  9186 ;;		_RADIO_RegisterRead
  9187 ;;		_RADIO_UnhandledInterrupt
  9188 ;; This function is called by:
  9189 ;;		_LORAWAN_Mainloop
  9190 ;; This function uses a non-reentrant model
  9191 ;;
  9192                           
  9193                           	psect	text51
  9194  00854A                     __ptext51:
  9195                           	opt stack 0
  9196  00854A                     _RADIO_DIO2:
  9197                           	opt stack 17
  9198                           
  9199                           ;radio_driver_SX1276.c: 1271: uint8_t dioMapping;
  9200                           ;radio_driver_SX1276.c: 1272: uint8_t opMode;
  9201                           ;radio_driver_SX1276.c: 1273: dioMapping = (RADIO_RegisterRead(0x40) & 0x0C) >> (2);
  9202                           
  9203                           ;incstack = 0
  9204  00854A  0E40               	movlw	64
  9205  00854C  ECE7  F047         	call	_RADIO_RegisterRead
  9206  008550  0100               	movlb	0	; () banked
  9207  008552  6F7A               	movwf	??_RADIO_DIO2& (0+255),b
  9208  008554  90D8               	bcf	status,0,c
  9209  008556  337A               	rrcf	??_RADIO_DIO2& (0+255),f,b
  9210  008558  90D8               	bcf	status,0,c
  9211  00855A  317A               	rrcf	??_RADIO_DIO2& (0+255),w,b
  9212  00855C  0B03               	andlw	3
  9213  00855E  6F7C               	movwf	RADIO_DIO2@dioMapping& (0+255),b
  9214                           
  9215                           ;radio_driver_SX1276.c: 1274: opMode = RADIO_RegisterRead(0x01);
  9216  008560  0E01               	movlw	1
  9217  008562  ECE7  F047         	call	_RADIO_RegisterRead
  9218  008566  0100               	movlb	0	; () banked
  9219  008568  6F7B               	movwf	RADIO_DIO2@opMode& (0+255),b
  9220                           
  9221                           ;radio_driver_SX1276.c: 1276: if ((RADIO_RegisterRead(0x01) & 0x80) != 0)
  9222  00856A  0E01               	movlw	1
  9223  00856C  ECE7  F047         	call	_RADIO_RegisterRead
  9224  008570  0100               	movlb	0	; () banked
  9225  008572  6F7A               	movwf	??_RADIO_DIO2& (0+255),b
  9226  008574  AF7A               	btfss	??_RADIO_DIO2& (0+255),7,b
  9227  008576  0012               	return	
  9228  008578  D007               	goto	l412
  9229  00857A                     
  9230                           ; BSR set to: 0
  9231                           ;radio_driver_SX1276.c: 1283: case 0x01:
  9232                           ;radio_driver_SX1276.c: 1284: case 0x02:
  9233                           ;radio_driver_SX1276.c: 1285: RADIO_FHSSChangeChannel();
  9234                           
  9235                           ; BSR set to: 0
  9236                           
  9237                           ; BSR set to: 0
  9238                           
  9239                           ; BSR set to: 0
  9240  00857A  EC66  F045         	call	_RADIO_FHSSChangeChannel	;wreg free
  9241                           
  9242                           ;radio_driver_SX1276.c: 1286: break;
  9243  00857E  0012               	return	
  9244  008580                     
  9245                           ;radio_driver_SX1276.c: 1288: RADIO_UnhandledInterrupt(MODULATION_LORA);
  9246  008580  0E01               	movlw	1
  9247  008582  EC52  F046         	call	_RADIO_UnhandledInterrupt
  9248                           
  9249                           ;radio_driver_SX1276.c: 1290: }
  9250                           
  9251                           ;radio_driver_SX1276.c: 1289: break;
  9252  008586  0012               	return	
  9253  008588                     l412:
  9254  008588  0100               	movlb	0	; () banked
  9255  00858A  517C               	movf	RADIO_DIO2@dioMapping& (0+255),w,b
  9256                           
  9257                           ; Switch size 1, requested type "space"
  9258                           ; Number of cases is 3, Range of values is 0 to 2
  9259                           ; switch strategies available:
  9260                           ; Name         Instructions Cycles
  9261                           ; simple_byte           10     6 (average)
  9262                           ;	Chosen strategy is simple_byte
  9263  00858C  0A00               	xorlw	0	; case 0
  9264  00858E  B4D8               	btfsc	status,2,c
  9265  008590  D7F4               	goto	l413
  9266  008592  0A01               	xorlw	1	; case 1
  9267  008594  B4D8               	btfsc	status,2,c
  9268  008596  D7F1               	goto	l413
  9269  008598  0A03               	xorlw	3	; case 2
  9270  00859A  B4D8               	btfsc	status,2,c
  9271  00859C  D7EE               	goto	l413
  9272  00859E  D7F0               	goto	l417
  9273  0085A0                     __end_of_RADIO_DIO2:
  9274                           	opt stack 0
  9275                           tosu	equ	0xFFF
  9276                           tosh	equ	0xFFE
  9277                           tosl	equ	0xFFD
  9278                           pclath	equ	0xFFA
  9279                           tblptru	equ	0xFF8
  9280                           tblptrh	equ	0xFF7
  9281                           tblptrl	equ	0xFF6
  9282                           tablat	equ	0xFF5
  9283                           prodh	equ	0xFF4
  9284                           prodl	equ	0xFF3
  9285                           intcon	equ	0xFF2
  9286                           intcon2	equ	0xFF1
  9287                           intcon3	equ	0xFF0
  9288                           postinc0	equ	0xFEE
  9289                           wreg	equ	0xFE8
  9290                           postinc1	equ	0xFE6
  9291                           postdec1	equ	0xFE5
  9292                           plusw1	equ	0xFE3
  9293                           fsr1h	equ	0xFE2
  9294                           fsr1l	equ	0xFE1
  9295                           indf2	equ	0xFDF
  9296                           postinc2	equ	0xFDE
  9297                           postdec2	equ	0xFDD
  9298                           fsr2h	equ	0xFDA
  9299                           fsr2l	equ	0xFD9
  9300                           status	equ	0xFD8
  9301                           
  9302 ;; *************** function _RADIO_DIO1 *****************
  9303 ;; Defined at:
  9304 ;;		line 1231 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
  9305 ;; Parameters:    Size  Location     Type
  9306 ;;		None
  9307 ;; Auto vars:     Size  Location     Type
  9308 ;;  dioMapping      1  108[BANK0 ] unsigned char 
  9309 ;; Return value:  Size  Location     Type
  9310 ;;                  1    wreg      void 
  9311 ;; Registers used:
  9312 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, btemp+1, btemp+2, btemp+11, tosl, tblptrl, tblptrh, tb
      +lptru, prodl, prodh, cstack
  9313 ;; Tracked objects:
  9314 ;;		On entry : 0/0
  9315 ;;		On exit  : 0/0
  9316 ;;		Unchanged: 0/0
  9317 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9318 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9319 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9320 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9321 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9322 ;;Total ram usage:        2 bytes
  9323 ;; Hardware stack levels used:    1
  9324 ;; Hardware stack levels required when called:   17
  9325 ;; This function calls:
  9326 ;;		_RADIO_FHSSChangeChannel
  9327 ;;		_RADIO_RegisterRead
  9328 ;;		_RADIO_RxTimeout
  9329 ;;		_RADIO_UnhandledInterrupt
  9330 ;; This function is called by:
  9331 ;;		_LORAWAN_Mainloop
  9332 ;; This function uses a non-reentrant model
  9333 ;;
  9334                           
  9335                           	psect	text52
  9336  00873E                     __ptext52:
  9337                           	opt stack 0
  9338  00873E                     _RADIO_DIO1:
  9339                           	opt stack 12
  9340                           
  9341                           ;radio_driver_SX1276.c: 1234: uint8_t dioMapping;
  9342                           ;radio_driver_SX1276.c: 1235: dioMapping = (RADIO_RegisterRead(0x40) & 0x30) >> (4);
  9343                           
  9344                           ;incstack = 0
  9345  00873E  0E40               	movlw	64
  9346  008740  ECE7  F047         	call	_RADIO_RegisterRead
  9347  008744  0100               	movlb	0	; () banked
  9348  008746  6FCB               	movwf	??_RADIO_DIO1& (0+255),b
  9349  008748  39CB               	swapf	??_RADIO_DIO1& (0+255),w,b
  9350  00874A  0B0F               	andlw	15
  9351  00874C  0B03               	andlw	3
  9352  00874E  6FCC               	movwf	RADIO_DIO1@dioMapping& (0+255),b
  9353                           
  9354                           ;radio_driver_SX1276.c: 1237: if ((RADIO_RegisterRead(0x01) & 0x80) != 0)
  9355  008750  0E01               	movlw	1
  9356  008752  ECE7  F047         	call	_RADIO_RegisterRead
  9357  008756  0100               	movlb	0	; () banked
  9358  008758  6FCB               	movwf	??_RADIO_DIO1& (0+255),b
  9359  00875A  BFCB               	btfsc	??_RADIO_DIO1& (0+255),7,b
  9360  00875C  D00B               	goto	l398
  9361  00875E  D013               	goto	l404
  9362  008760                     
  9363                           ; BSR set to: 0
  9364                           ;radio_driver_SX1276.c: 1243: RADIO_RxTimeout();
  9365                           
  9366                           ; BSR set to: 0
  9367  008760  EC2A  F047         	call	_RADIO_RxTimeout	;wreg free
  9368                           
  9369                           ;radio_driver_SX1276.c: 1244: break;
  9370  008764  0012               	return	
  9371  008766                     
  9372                           ;radio_driver_SX1276.c: 1246: RADIO_FHSSChangeChannel();
  9373  008766  EC66  F045         	call	_RADIO_FHSSChangeChannel	;wreg free
  9374                           
  9375                           ;radio_driver_SX1276.c: 1247: break;
  9376  00876A  0012               	return	
  9377  00876C                     
  9378                           ;radio_driver_SX1276.c: 1249: RADIO_UnhandledInterrupt(MODULATION_LORA);
  9379  00876C  0E01               	movlw	1
  9380  00876E  EC52  F046         	call	_RADIO_UnhandledInterrupt
  9381                           
  9382                           ;radio_driver_SX1276.c: 1251: }
  9383                           
  9384                           ;radio_driver_SX1276.c: 1250: break;
  9385  008772  0012               	return	
  9386  008774                     l398:
  9387  008774  0100               	movlb	0	; () banked
  9388  008776  51CC               	movf	RADIO_DIO1@dioMapping& (0+255),w,b
  9389                           
  9390                           ; Switch size 1, requested type "space"
  9391                           ; Number of cases is 2, Range of values is 0 to 1
  9392                           ; switch strategies available:
  9393                           ; Name         Instructions Cycles
  9394                           ; simple_byte            7     4 (average)
  9395                           ;	Chosen strategy is simple_byte
  9396  008778  0A00               	xorlw	0	; case 0
  9397  00877A  B4D8               	btfsc	status,2,c
  9398  00877C  D7F1               	goto	l399
  9399  00877E  0A01               	xorlw	1	; case 1
  9400  008780  B4D8               	btfsc	status,2,c
  9401  008782  D7F1               	goto	l401
  9402  008784  D7F3               	goto	l402
  9403  008786                     l404:
  9404                           
  9405                           ; BSR set to: 0
  9406                           
  9407                           ; BSR set to: 0
  9408  008786  51CC               	movf	RADIO_DIO1@dioMapping& (0+255),w,b
  9409                           
  9410                           ; Switch size 1, requested type "space"
  9411                           ; Number of cases is 1, Range of values is 0 to 0
  9412                           ; switch strategies available:
  9413                           ; Name         Instructions Cycles
  9414                           ; simple_byte            4     3 (average)
  9415                           ;	Chosen strategy is simple_byte
  9416  008788  0A00               	xorlw	0	; case 0
  9417                           
  9418                           ; BSR set to: 0
  9419  00878A  0012               	return	
  9420  00878C                     __end_of_RADIO_DIO1:
  9421                           	opt stack 0
  9422                           tosu	equ	0xFFF
  9423                           tosh	equ	0xFFE
  9424                           tosl	equ	0xFFD
  9425                           pclath	equ	0xFFA
  9426                           tblptru	equ	0xFF8
  9427                           tblptrh	equ	0xFF7
  9428                           tblptrl	equ	0xFF6
  9429                           tablat	equ	0xFF5
  9430                           prodh	equ	0xFF4
  9431                           prodl	equ	0xFF3
  9432                           intcon	equ	0xFF2
  9433                           intcon2	equ	0xFF1
  9434                           intcon3	equ	0xFF0
  9435                           postinc0	equ	0xFEE
  9436                           wreg	equ	0xFE8
  9437                           postinc1	equ	0xFE6
  9438                           postdec1	equ	0xFE5
  9439                           plusw1	equ	0xFE3
  9440                           fsr1h	equ	0xFE2
  9441                           fsr1l	equ	0xFE1
  9442                           indf2	equ	0xFDF
  9443                           postinc2	equ	0xFDE
  9444                           postdec2	equ	0xFDD
  9445                           fsr2h	equ	0xFDA
  9446                           fsr2l	equ	0xFD9
  9447                           status	equ	0xFD8
  9448                           
  9449 ;; *************** function _RADIO_RxTimeout *****************
  9450 ;; Defined at:
  9451 ;;		line 1066 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
  9452 ;; Parameters:    Size  Location     Type
  9453 ;;		None
  9454 ;; Auto vars:     Size  Location     Type
  9455 ;;		None
  9456 ;; Return value:  Size  Location     Type
  9457 ;;                  1    wreg      void 
  9458 ;; Registers used:
  9459 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, btemp+1, btemp+2, btemp+11, tosl, tblptrl, tblptrh, tb
      +lptru, prodl, prodh, cstack
  9460 ;; Tracked objects:
  9461 ;;		On entry : 0/0
  9462 ;;		On exit  : 0/0
  9463 ;;		Unchanged: 0/0
  9464 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9465 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9466 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9467 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9468 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9469 ;;Total ram usage:        0 bytes
  9470 ;; Hardware stack levels used:    1
  9471 ;; Hardware stack levels required when called:   16
  9472 ;; This function calls:
  9473 ;;		_LORAWAN_RxTimeout
  9474 ;;		_RADIO_RegisterWrite
  9475 ;;		_RADIO_WriteMode
  9476 ;;		_SwTimerStop
  9477 ;; This function is called by:
  9478 ;;		_RADIO_DIO1
  9479 ;; This function uses a non-reentrant model
  9480 ;;
  9481                           
  9482                           	psect	text53
  9483  008E54                     __ptext53:
  9484                           	opt stack 0
  9485  008E54                     _RADIO_RxTimeout:
  9486                           	opt stack 12
  9487                           
  9488                           ;radio_driver_SX1276.c: 1069: SwTimerStop(RadioConfiguration.watchdogTimerId);
  9489                           
  9490                           ;incstack = 0
  9491  008E54  0101               	movlb	1	; () banked
  9492  008E56  517E               	movf	(_RadioConfiguration+41)& (0+255),w,b
  9493  008E58  ECFB  F047         	call	_SwTimerStop
  9494                           
  9495                           ;radio_driver_SX1276.c: 1070: RADIO_RegisterWrite(0x12, 1<<(7));
  9496  008E5C  0E80               	movlw	128
  9497  008E5E  0100               	movlb	0	; () banked
  9498  008E60  6F62               	movwf	RADIO_RegisterWrite@value& (0+255),b
  9499  008E62  0E12               	movlw	18
  9500  008E64  ECBE  F048         	call	_RADIO_RegisterWrite
  9501                           
  9502                           ;radio_driver_SX1276.c: 1072: RADIO_WriteMode(MODE_SLEEP, RadioConfiguration.modulation,
      +                           0);
  9503  008E68  C16D  F065         	movff	_RadioConfiguration+24,RADIO_WriteMode@newModulation
  9504  008E6C  0E00               	movlw	0
  9505  008E6E  0100               	movlb	0	; () banked
  9506  008E70  6F66               	movwf	RADIO_WriteMode@blocking& (0+255),b
  9507  008E72  0E00               	movlw	0
  9508  008E74  ECDA  F031         	call	_RADIO_WriteMode
  9509                           
  9510                           ;radio_driver_SX1276.c: 1073: RadioConfiguration.flags &= ~(1 << (1));
  9511  008E78  0101               	movlb	1	; () banked
  9512  008E7A  9378               	bcf	(_RadioConfiguration+35)& (0+255),1,b
  9513                           
  9514                           ; BSR set to: 1
  9515                           ;radio_driver_SX1276.c: 1075: LORAWAN_RxTimeout ();
  9516  008E7C  ECF4  F012         	call	_LORAWAN_RxTimeout	;wreg free
  9517  008E80  0012               	return		;funcret
  9518  008E82                     __end_of_RADIO_RxTimeout:
  9519                           	opt stack 0
  9520                           tosu	equ	0xFFF
  9521                           tosh	equ	0xFFE
  9522                           tosl	equ	0xFFD
  9523                           pclath	equ	0xFFA
  9524                           tblptru	equ	0xFF8
  9525                           tblptrh	equ	0xFF7
  9526                           tblptrl	equ	0xFF6
  9527                           tablat	equ	0xFF5
  9528                           prodh	equ	0xFF4
  9529                           prodl	equ	0xFF3
  9530                           intcon	equ	0xFF2
  9531                           intcon2	equ	0xFF1
  9532                           intcon3	equ	0xFF0
  9533                           postinc0	equ	0xFEE
  9534                           wreg	equ	0xFE8
  9535                           postinc1	equ	0xFE6
  9536                           postdec1	equ	0xFE5
  9537                           plusw1	equ	0xFE3
  9538                           fsr1h	equ	0xFE2
  9539                           fsr1l	equ	0xFE1
  9540                           indf2	equ	0xFDF
  9541                           postinc2	equ	0xFDE
  9542                           postdec2	equ	0xFDD
  9543                           fsr2h	equ	0xFDA
  9544                           fsr2l	equ	0xFD9
  9545                           status	equ	0xFD8
  9546                           
  9547 ;; *************** function _RADIO_FHSSChangeChannel *****************
  9548 ;; Defined at:
  9549 ;;		line 1158 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
  9550 ;; Parameters:    Size  Location     Type
  9551 ;;		None
  9552 ;; Auto vars:     Size  Location     Type
  9553 ;;  irqFlags        1   25[BANK0 ] unsigned char 
  9554 ;; Return value:  Size  Location     Type
  9555 ;;                  1    wreg      void 
  9556 ;; Registers used:
  9557 ;;		wreg, status,2, status,0, cstack
  9558 ;; Tracked objects:
  9559 ;;		On entry : 0/0
  9560 ;;		On exit  : 0/0
  9561 ;;		Unchanged: 0/0
  9562 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9563 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9564 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9565 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9566 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9567 ;;Total ram usage:        1 bytes
  9568 ;; Hardware stack levels used:    1
  9569 ;; Hardware stack levels required when called:   11
  9570 ;; This function calls:
  9571 ;;		_RADIO_RegisterRead
  9572 ;;		_RADIO_RegisterWrite
  9573 ;;		_RADIO_WriteFrequency
  9574 ;; This function is called by:
  9575 ;;		_RADIO_DIO1
  9576 ;;		_RADIO_DIO2
  9577 ;; This function uses a non-reentrant model
  9578 ;;
  9579                           
  9580                           	psect	text54
  9581  008ACC                     __ptext54:
  9582                           	opt stack 0
  9583  008ACC                     _RADIO_FHSSChangeChannel:
  9584                           	opt stack 17
  9585                           
  9586                           ;radio_driver_SX1276.c: 1160: uint8_t irqFlags;
  9587                           ;radio_driver_SX1276.c: 1161: irqFlags = RADIO_RegisterRead(0x12);
  9588                           
  9589                           ;incstack = 0
  9590  008ACC  0E12               	movlw	18
  9591  008ACE  ECE7  F047         	call	_RADIO_RegisterRead
  9592  008AD2  0100               	movlb	0	; () banked
  9593  008AD4  6F79               	movwf	RADIO_FHSSChangeChannel@irqFlags& (0+255),b
  9594                           
  9595                           ; BSR set to: 0
  9596                           ;radio_driver_SX1276.c: 1163: if ((0) != RadioConfiguration.frequencyHopPeriod)
  9597  008AD6  0101               	movlb	1	; () banked
  9598  008AD8  5173               	movf	(_RadioConfiguration+30)& (0+255),w,b
  9599  008ADA  1174               	iorwf	(_RadioConfiguration+31)& (0+255),w,b
  9600  008ADC  B4D8               	btfsc	status,2,c
  9601  008ADE  D00F               	goto	l375
  9602                           
  9603                           ; BSR set to: 1
  9604                           ;radio_driver_SX1276.c: 1164: {
  9605                           ;radio_driver_SX1276.c: 1165: if ((0) != RadioConfiguration.fhssNextFrequency)
  9606  008AE0  5184               	movf	(_RadioConfiguration+47)& (0+255),w,b
  9607  008AE2  1185               	iorwf	(_RadioConfiguration+48)& (0+255),w,b
  9608  008AE4  B4D8               	btfsc	status,2,c
  9609  008AE6  D00B               	goto	l375
  9610                           
  9611                           ; BSR set to: 1
  9612                           ;radio_driver_SX1276.c: 1166: {
  9613                           ;radio_driver_SX1276.c: 1167: RADIO_WriteFrequency(RadioConfiguration.fhssNextFrequency(
      +                          ));
  9614  008AE8  0E00               	movlw	0
  9615  008AEA  0100               	movlb	0	; () banked
  9616  008AEC  6F6D               	movwf	RADIO_WriteFrequency@frequency& (0+255),b
  9617  008AEE  0E00               	movlw	0
  9618  008AF0  6F6E               	movwf	(RADIO_WriteFrequency@frequency+1)& (0+255),b
  9619  008AF2  0E00               	movlw	0
  9620  008AF4  6F6F               	movwf	(RADIO_WriteFrequency@frequency+2)& (0+255),b
  9621  008AF6  0E00               	movlw	0
  9622  008AF8  6F70               	movwf	(RADIO_WriteFrequency@frequency+3)& (0+255),b
  9623  008AFA  ECC8  F033         	call	_RADIO_WriteFrequency	;wreg free
  9624  008AFE                     l375:
  9625                           
  9626                           ;radio_driver_SX1276.c: 1168: }
  9627                           ;radio_driver_SX1276.c: 1169: }
  9628                           ;radio_driver_SX1276.c: 1172: RADIO_RegisterWrite(0x12, 1<<(1));
  9629  008AFE  0E02               	movlw	2
  9630  008B00  0100               	movlb	0	; () banked
  9631  008B02  6F62               	movwf	RADIO_RegisterWrite@value& (0+255),b
  9632  008B04  0E12               	movlw	18
  9633  008B06  ECBE  F048         	call	_RADIO_RegisterWrite
  9634  008B0A  0012               	return		;funcret
  9635  008B0C                     __end_of_RADIO_FHSSChangeChannel:
  9636                           	opt stack 0
  9637                           tosu	equ	0xFFF
  9638                           tosh	equ	0xFFE
  9639                           tosl	equ	0xFFD
  9640                           pclath	equ	0xFFA
  9641                           tblptru	equ	0xFF8
  9642                           tblptrh	equ	0xFF7
  9643                           tblptrl	equ	0xFF6
  9644                           tablat	equ	0xFF5
  9645                           prodh	equ	0xFF4
  9646                           prodl	equ	0xFF3
  9647                           intcon	equ	0xFF2
  9648                           intcon2	equ	0xFF1
  9649                           intcon3	equ	0xFF0
  9650                           postinc0	equ	0xFEE
  9651                           wreg	equ	0xFE8
  9652                           postinc1	equ	0xFE6
  9653                           postdec1	equ	0xFE5
  9654                           plusw1	equ	0xFE3
  9655                           fsr1h	equ	0xFE2
  9656                           fsr1l	equ	0xFE1
  9657                           indf2	equ	0xFDF
  9658                           postinc2	equ	0xFDE
  9659                           postdec2	equ	0xFDD
  9660                           fsr2h	equ	0xFDA
  9661                           fsr2l	equ	0xFD9
  9662                           status	equ	0xFD8
  9663                           
  9664 ;; *************** function _RADIO_DIO0 *****************
  9665 ;; Defined at:
  9666 ;;		line 1176 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
  9667 ;; Parameters:    Size  Location     Type
  9668 ;;		None
  9669 ;; Auto vars:     Size  Location     Type
  9670 ;;  opMode          1  152[BANK0 ] unsigned char 
  9671 ;;  dioMapping      1  151[BANK0 ] unsigned char 
  9672 ;; Return value:  Size  Location     Type
  9673 ;;                  1    wreg      void 
  9674 ;; Registers used:
  9675 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, btemp+1, btemp+2, btemp+8, btemp+9, btem
      +p+10, btemp+11, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9676 ;; Tracked objects:
  9677 ;;		On entry : 0/0
  9678 ;;		On exit  : 0/0
  9679 ;;		Unchanged: 0/0
  9680 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9681 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9682 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9683 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9684 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9685 ;;Total ram usage:        4 bytes
  9686 ;; Hardware stack levels used:    1
  9687 ;; Hardware stack levels required when called:   17
  9688 ;; This function calls:
  9689 ;;		_RADIO_FSKPacketSent
  9690 ;;		_RADIO_FSKPayloadReady
  9691 ;;		_RADIO_RegisterRead
  9692 ;;		_RADIO_RxDone
  9693 ;;		_RADIO_TxDone
  9694 ;;		_RADIO_UnhandledInterrupt
  9695 ;; This function is called by:
  9696 ;;		_LORAWAN_Mainloop
  9697 ;; This function uses a non-reentrant model
  9698 ;;
  9699                           
  9700                           	psect	text55
  9701  0075FE                     __ptext55:
  9702                           	opt stack 0
  9703  0075FE                     _RADIO_DIO0:
  9704                           	opt stack 12
  9705                           
  9706                           ;radio_driver_SX1276.c: 1179: uint8_t dioMapping;
  9707                           ;radio_driver_SX1276.c: 1180: uint8_t opMode;
  9708                           ;radio_driver_SX1276.c: 1181: dioMapping = (RADIO_RegisterRead(0x40) & 0xC0) >> (6);
  9709                           
  9710                           ;incstack = 0
  9711  0075FE  0E40               	movlw	64
  9712  007600  ECE7  F047         	call	_RADIO_RegisterRead
  9713  007604  0100               	movlb	0	; () banked
  9714  007606  6FF5               	movwf	??_RADIO_DIO0& (0+255),b
  9715  007608  0E06               	movlw	6
  9716  00760A  6FF6               	movwf	(??_RADIO_DIO0+1)& (0+255),b
  9717  00760C                     u13495:
  9718  00760C  90D8               	bcf	status,0,c
  9719  00760E  33F5               	rrcf	??_RADIO_DIO0& (0+255),f,b
  9720  007610  2FF6               	decfsz	(??_RADIO_DIO0+1)& (0+255),f,b
  9721  007612  D7FC               	goto	u13495
  9722  007614  51F5               	movf	??_RADIO_DIO0& (0+255),w,b
  9723  007616  0B03               	andlw	3
  9724  007618  6FF7               	movwf	RADIO_DIO0@dioMapping& (0+255),b
  9725                           
  9726                           ;radio_driver_SX1276.c: 1182: opMode = RADIO_RegisterRead(0x01);
  9727  00761A  0E01               	movlw	1
  9728  00761C  ECE7  F047         	call	_RADIO_RegisterRead
  9729  007620  0100               	movlb	0	; () banked
  9730  007622  6FF8               	movwf	RADIO_DIO0@opMode& (0+255),b
  9731                           
  9732                           ; BSR set to: 0
  9733                           ;radio_driver_SX1276.c: 1184: if ((opMode & 0x80) != 0)
  9734  007624  BFF8               	btfsc	RADIO_DIO0@opMode& (0+255),7,b
  9735  007626  D00B               	goto	l380
  9736  007628  D02C               	goto	l386
  9737  00762A                     
  9738                           ; BSR set to: 0
  9739                           ;radio_driver_SX1276.c: 1190: RADIO_RxDone();
  9740                           
  9741                           ; BSR set to: 0
  9742  00762A  ECB5  F034         	call	_RADIO_RxDone	;wreg free
  9743                           
  9744                           ;radio_driver_SX1276.c: 1191: break;
  9745  00762E  0012               	return	
  9746  007630                     
  9747                           ;radio_driver_SX1276.c: 1193: RADIO_TxDone();
  9748  007630  ECB5  F02F         	call	_RADIO_TxDone	;wreg free
  9749                           
  9750                           ;radio_driver_SX1276.c: 1194: break;
  9751  007634  0012               	return	
  9752  007636                     
  9753                           ;radio_driver_SX1276.c: 1196: RADIO_UnhandledInterrupt(MODULATION_LORA);
  9754  007636  0E01               	movlw	1
  9755  007638  EC52  F046         	call	_RADIO_UnhandledInterrupt
  9756                           
  9757                           ;radio_driver_SX1276.c: 1198: }
  9758                           
  9759                           ;radio_driver_SX1276.c: 1197: break;
  9760  00763C  0012               	return	
  9761  00763E                     l380:
  9762  00763E  0100               	movlb	0	; () banked
  9763  007640  51F7               	movf	RADIO_DIO0@dioMapping& (0+255),w,b
  9764                           
  9765                           ; Switch size 1, requested type "space"
  9766                           ; Number of cases is 2, Range of values is 0 to 1
  9767                           ; switch strategies available:
  9768                           ; Name         Instructions Cycles
  9769                           ; simple_byte            7     4 (average)
  9770                           ;	Chosen strategy is simple_byte
  9771  007642  0A00               	xorlw	0	; case 0
  9772  007644  B4D8               	btfsc	status,2,c
  9773  007646  D7F1               	goto	l381
  9774  007648  0A01               	xorlw	1	; case 1
  9775  00764A  B4D8               	btfsc	status,2,c
  9776  00764C  D7F1               	goto	l383
  9777  00764E  D7F3               	goto	l384
  9778  007650                     
  9779                           ; BSR set to: 0
  9780                           ;radio_driver_SX1276.c: 1207: opMode &= 0x07;
  9781                           
  9782                           ; BSR set to: 0
  9783  007650  0E07               	movlw	7
  9784  007652  17F8               	andwf	RADIO_DIO0@opMode& (0+255),f,b
  9785                           
  9786                           ;radio_driver_SX1276.c: 1208: if (MODE_TX == opMode)
  9787  007654  0E03               	movlw	3
  9788  007656  19F8               	xorwf	RADIO_DIO0@opMode& (0+255),w,b
  9789  007658  A4D8               	btfss	status,2,c
  9790  00765A  D003               	goto	l388
  9791                           
  9792                           ; BSR set to: 0
  9793                           ;radio_driver_SX1276.c: 1209: {
  9794                           ;radio_driver_SX1276.c: 1211: RADIO_FSKPacketSent();
  9795  00765C  EC89  F02E         	call	_RADIO_FSKPacketSent	;wreg free
  9796                           
  9797                           ;radio_driver_SX1276.c: 1212: }
  9798  007660  0012               	return	
  9799  007662                     l388:
  9800                           
  9801                           ;radio_driver_SX1276.c: 1213: else if (MODE_RXCONT == opMode)
  9802  007662  0E05               	movlw	5
  9803  007664  0100               	movlb	0	; () banked
  9804  007666  19F8               	xorwf	RADIO_DIO0@opMode& (0+255),w,b
  9805  007668  A4D8               	btfss	status,2,c
  9806  00766A  D003               	goto	l390
  9807                           
  9808                           ; BSR set to: 0
  9809                           ;radio_driver_SX1276.c: 1214: {
  9810                           ;radio_driver_SX1276.c: 1216: RADIO_FSKPayloadReady();
  9811  00766C  EC67  F038         	call	_RADIO_FSKPayloadReady	;wreg free
  9812                           
  9813                           ;radio_driver_SX1276.c: 1217: }
  9814  007670  0012               	return	
  9815  007672                     l390:
  9816                           
  9817                           ;radio_driver_SX1276.c: 1218: else
  9818                           ;radio_driver_SX1276.c: 1219: {
  9819                           ;radio_driver_SX1276.c: 1220: RADIO_UnhandledInterrupt(MODULATION_FSK);
  9820  007672  0E00               	movlw	0
  9821  007674  EC52  F046         	call	_RADIO_UnhandledInterrupt
  9822                           
  9823                           ;radio_driver_SX1276.c: 1221: }
  9824                           ;radio_driver_SX1276.c: 1222: break;
  9825  007678  0012               	return	
  9826  00767A                     
  9827                           ;radio_driver_SX1276.c: 1224: RADIO_UnhandledInterrupt(MODULATION_FSK);
  9828  00767A  0E00               	movlw	0
  9829  00767C  EC52  F046         	call	_RADIO_UnhandledInterrupt
  9830                           
  9831                           ;radio_driver_SX1276.c: 1226: }
  9832                           
  9833                           ;radio_driver_SX1276.c: 1225: break;
  9834  007680  0012               	return	
  9835  007682                     l386:
  9836  007682  0100               	movlb	0	; () banked
  9837  007684  51F7               	movf	RADIO_DIO0@dioMapping& (0+255),w,b
  9838                           
  9839                           ; Switch size 1, requested type "space"
  9840                           ; Number of cases is 1, Range of values is 0 to 0
  9841                           ; switch strategies available:
  9842                           ; Name         Instructions Cycles
  9843                           ; simple_byte            4     3 (average)
  9844                           ;	Chosen strategy is simple_byte
  9845  007686  0A00               	xorlw	0	; case 0
  9846  007688  B4D8               	btfsc	status,2,c
  9847  00768A  D7E2               	goto	l387
  9848  00768C  D7F6               	goto	l393
  9849  00768E                     __end_of_RADIO_DIO0:
  9850                           	opt stack 0
  9851                           tosu	equ	0xFFF
  9852                           tosh	equ	0xFFE
  9853                           tosl	equ	0xFFD
  9854                           pclath	equ	0xFFA
  9855                           tblptru	equ	0xFF8
  9856                           tblptrh	equ	0xFF7
  9857                           tblptrl	equ	0xFF6
  9858                           tablat	equ	0xFF5
  9859                           prodh	equ	0xFF4
  9860                           prodl	equ	0xFF3
  9861                           intcon	equ	0xFF2
  9862                           intcon2	equ	0xFF1
  9863                           intcon3	equ	0xFF0
  9864                           postinc0	equ	0xFEE
  9865                           wreg	equ	0xFE8
  9866                           postinc1	equ	0xFE6
  9867                           postdec1	equ	0xFE5
  9868                           plusw1	equ	0xFE3
  9869                           fsr1h	equ	0xFE2
  9870                           fsr1l	equ	0xFE1
  9871                           indf2	equ	0xFDF
  9872                           postinc2	equ	0xFDE
  9873                           postdec2	equ	0xFDD
  9874                           fsr2h	equ	0xFDA
  9875                           fsr2l	equ	0xFD9
  9876                           status	equ	0xFD8
  9877                           
  9878 ;; *************** function _RADIO_UnhandledInterrupt *****************
  9879 ;; Defined at:
  9880 ;;		line 1139 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
  9881 ;; Parameters:    Size  Location     Type
  9882 ;;  modulation      1    wreg     enum E6984
  9883 ;; Auto vars:     Size  Location     Type
  9884 ;;  modulation      1    4[BANK0 ] enum E6984
  9885 ;; Return value:  Size  Location     Type
  9886 ;;                  1    wreg      void 
  9887 ;; Registers used:
  9888 ;;		wreg, status,2, status,0, cstack
  9889 ;; Tracked objects:
  9890 ;;		On entry : 0/0
  9891 ;;		On exit  : 0/0
  9892 ;;		Unchanged: 0/0
  9893 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9894 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9895 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9896 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9897 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9898 ;;Total ram usage:        1 bytes
  9899 ;; Hardware stack levels used:    1
  9900 ;; Hardware stack levels required when called:   10
  9901 ;; This function calls:
  9902 ;;		_RADIO_RegisterWrite
  9903 ;; This function is called by:
  9904 ;;		_RADIO_DIO0
  9905 ;;		_RADIO_DIO1
  9906 ;;		_RADIO_DIO2
  9907 ;;		_RADIO_DIO3
  9908 ;;		_RADIO_DIO4
  9909 ;;		_RADIO_DIO5
  9910 ;; This function uses a non-reentrant model
  9911 ;;
  9912                           
  9913                           	psect	text56
  9914  008CA4                     __ptext56:
  9915                           	opt stack 0
  9916  008CA4                     _RADIO_UnhandledInterrupt:
  9917                           	opt stack 18
  9918                           
  9919                           ;incstack = 0
  9920                           ;RADIO_UnhandledInterrupt@modulation stored from wreg
  9921  008CA4  0100               	movlb	0	; () banked
  9922  008CA6  6F64               	movwf	RADIO_UnhandledInterrupt@modulation& (0+255),b
  9923                           
  9924                           ;radio_driver_SX1276.c: 1144: if (MODULATION_LORA == modulation)
  9925  008CA8  0100               	movlb	0	; () banked
  9926  008CAA  0564               	decf	RADIO_UnhandledInterrupt@modulation& (0+255),w,b
  9927  008CAC  A4D8               	btfss	status,2,c
  9928  008CAE  D006               	goto	l369
  9929                           
  9930                           ; BSR set to: 0
  9931                           ;radio_driver_SX1276.c: 1145: {
  9932                           ;radio_driver_SX1276.c: 1146: RADIO_RegisterWrite(0x12, 0xFF);
  9933  008CB0  0EFF               	movlw	255
  9934  008CB2  6F62               	movwf	RADIO_RegisterWrite@value& (0+255),b
  9935  008CB4  0E12               	movlw	18
  9936  008CB6  ECBE  F048         	call	_RADIO_RegisterWrite
  9937                           
  9938                           ;radio_driver_SX1276.c: 1147: }
  9939  008CBA  0012               	return	
  9940  008CBC                     l369:
  9941                           
  9942                           ;radio_driver_SX1276.c: 1148: else
  9943                           ;radio_driver_SX1276.c: 1149: {
  9944                           ;radio_driver_SX1276.c: 1152: RADIO_RegisterWrite(0x3E, 0xFF);
  9945  008CBC  0EFF               	movlw	255
  9946  008CBE  0100               	movlb	0	; () banked
  9947  008CC0  6F62               	movwf	RADIO_RegisterWrite@value& (0+255),b
  9948  008CC2  0E3E               	movlw	62
  9949  008CC4  ECBE  F048         	call	_RADIO_RegisterWrite
  9950                           
  9951                           ;radio_driver_SX1276.c: 1153: RADIO_RegisterWrite(0x3F, 0xFF);
  9952  008CC8  0EFF               	movlw	255
  9953  008CCA  0100               	movlb	0	; () banked
  9954  008CCC  6F62               	movwf	RADIO_RegisterWrite@value& (0+255),b
  9955  008CCE  0E3F               	movlw	63
  9956  008CD0  ECBE  F048         	call	_RADIO_RegisterWrite
  9957  008CD4  0012               	return	
  9958  008CD6                     __end_of_RADIO_UnhandledInterrupt:
  9959                           	opt stack 0
  9960                           tosu	equ	0xFFF
  9961                           tosh	equ	0xFFE
  9962                           tosl	equ	0xFFD
  9963                           pclath	equ	0xFFA
  9964                           tblptru	equ	0xFF8
  9965                           tblptrh	equ	0xFF7
  9966                           tblptrl	equ	0xFF6
  9967                           tablat	equ	0xFF5
  9968                           prodh	equ	0xFF4
  9969                           prodl	equ	0xFF3
  9970                           intcon	equ	0xFF2
  9971                           intcon2	equ	0xFF1
  9972                           intcon3	equ	0xFF0
  9973                           postinc0	equ	0xFEE
  9974                           wreg	equ	0xFE8
  9975                           postinc1	equ	0xFE6
  9976                           postdec1	equ	0xFE5
  9977                           plusw1	equ	0xFE3
  9978                           fsr1h	equ	0xFE2
  9979                           fsr1l	equ	0xFE1
  9980                           indf2	equ	0xFDF
  9981                           postinc2	equ	0xFDE
  9982                           postdec2	equ	0xFDD
  9983                           fsr2h	equ	0xFDA
  9984                           fsr2l	equ	0xFD9
  9985                           status	equ	0xFD8
  9986                           
  9987 ;; *************** function _RADIO_TxDone *****************
  9988 ;; Defined at:
  9989 ;;		line 1078 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
  9990 ;; Parameters:    Size  Location     Type
  9991 ;;		None
  9992 ;; Auto vars:     Size  Location     Type
  9993 ;;  timeOnAir       4  135[BANK0 ] unsigned long 
  9994 ;; Return value:  Size  Location     Type
  9995 ;;                  1    wreg      void 
  9996 ;; Registers used:
  9997 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9998 ;; Tracked objects:
  9999 ;;		On entry : 0/0
 10000 ;;		On exit  : 0/0
 10001 ;;		Unchanged: 0/0
 10002 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10003 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10004 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10005 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10006 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10007 ;;Total ram usage:       12 bytes
 10008 ;; Hardware stack levels used:    1
 10009 ;; Hardware stack levels required when called:   15
 10010 ;; This function calls:
 10011 ;;		_LORAWAN_TxDone
 10012 ;;		_RADIO_RegisterWrite
 10013 ;;		_RADIO_WriteMode
 10014 ;;		_SwTimerReadValue
 10015 ;;		_SwTimerStop
 10016 ;;		___lmul
 10017 ;; This function is called by:
 10018 ;;		_RADIO_DIO0
 10019 ;; This function uses a non-reentrant model
 10020 ;;
 10021                           
 10022                           	psect	text57
 10023  005F6A                     __ptext57:
 10024                           	opt stack 0
 10025  005F6A                     _RADIO_TxDone:
 10026                           	opt stack 13
 10027                           
 10028                           ;radio_driver_SX1276.c: 1080: uint32_t timeOnAir;
 10029                           ;radio_driver_SX1276.c: 1082: SwTimerStop(RadioConfiguration.watchdogTimerId);
 10030                           
 10031                           ;incstack = 0
 10032  005F6A  0101               	movlb	1	; () banked
 10033  005F6C  517E               	movf	(_RadioConfiguration+41)& (0+255),w,b
 10034  005F6E  ECFB  F047         	call	_SwTimerStop
 10035                           
 10036                           ;radio_driver_SX1276.c: 1083: RADIO_RegisterWrite(0x12, 1<<(3));
 10037  005F72  0E08               	movlw	8
 10038  005F74  0100               	movlb	0	; () banked
 10039  005F76  6F62               	movwf	RADIO_RegisterWrite@value& (0+255),b
 10040  005F78  0E12               	movlw	18
 10041  005F7A  ECBE  F048         	call	_RADIO_RegisterWrite
 10042                           
 10043                           ;radio_driver_SX1276.c: 1084: RADIO_WriteMode(MODE_SLEEP, RadioConfiguration.modulation,
      +                           0);
 10044  005F7E  C16D  F065         	movff	_RadioConfiguration+24,RADIO_WriteMode@newModulation
 10045  005F82  0E00               	movlw	0
 10046  005F84  0100               	movlb	0	; () banked
 10047  005F86  6F66               	movwf	RADIO_WriteMode@blocking& (0+255),b
 10048  005F88  0E00               	movlw	0
 10049  005F8A  ECDA  F031         	call	_RADIO_WriteMode
 10050                           
 10051                           ;radio_driver_SX1276.c: 1085: RadioConfiguration.flags &= ~(1 << (0));
 10052  005F8E  0101               	movlb	1	; () banked
 10053  005F90  9178               	bcf	(_RadioConfiguration+35)& (0+255),0,b
 10054                           
 10055                           ; BSR set to: 1
 10056                           ;radio_driver_SX1276.c: 1086: if ((RadioConfiguration.flags & (1 << (4))) == 0)
 10057  005F92  B978               	btfsc	(_RadioConfiguration+35)& (0+255),4,b
 10058  005F94  0012               	return	
 10059                           
 10060                           ; BSR set to: 1
 10061                           ;radio_driver_SX1276.c: 1087: {
 10062                           ;radio_driver_SX1276.c: 1088: timeOnAir = ((uint32_t)20000) - ((SwTimerReadValue(RadioCo
      +                          nfiguration.timeOnAirTimerId)) < 0x00DFAC1FUL ? ( (((uint32_t)(SwTimerReadValue(RadioCon
      +                          figuration.timeOnAirTimerId))) * 125UL) >> (12) ) : ( (((uint32_t)(SwTimerReadValue(Radi
      +                          oConfiguration.t
 10063  005F96  517C               	movf	(_RadioConfiguration+39)& (0+255),w,b
 10064  005F98  EC86  F045         	call	_SwTimerReadValue
 10065  005F9C  0100               	movlb	0	; () banked
 10066  005F9E  5194               	movf	(?_SwTimerReadValue+3)& (0+255),w,b
 10067  005FA0  E108               	bnz	u12760
 10068  005FA2  0E1F               	movlw	31
 10069  005FA4  5D91               	subwf	?_SwTimerReadValue& (0+255),w,b
 10070  005FA6  0EAC               	movlw	172
 10071  005FA8  5992               	subwfb	(?_SwTimerReadValue+1)& (0+255),w,b
 10072  005FAA  0EDF               	movlw	223
 10073  005FAC  5993               	subwfb	(?_SwTimerReadValue+2)& (0+255),w,b
 10074  005FAE  A0D8               	btfss	status,0,c
 10075  005FB0  D021               	goto	l344
 10076  005FB2                     u12760:
 10077                           
 10078                           ; BSR set to: 0
 10079  005FB2  0101               	movlb	1	; () banked
 10080  005FB4  517C               	movf	(_RadioConfiguration+39)& (0+255),w,b
 10081  005FB6  EC86  F045         	call	_SwTimerReadValue
 10082  005FBA  0E0D               	movlw	13
 10083  005FBC  D006               	goto	u12770
 10084  005FBE                     u12775:
 10085  005FBE  0100               	movlb	0	; () banked
 10086  005FC0  90D8               	bcf	status,0,c
 10087  005FC2  3394               	rrcf	(?_SwTimerReadValue+3)& (0+255),f,b
 10088  005FC4  3393               	rrcf	(?_SwTimerReadValue+2)& (0+255),f,b
 10089  005FC6  3392               	rrcf	(?_SwTimerReadValue+1)& (0+255),f,b
 10090  005FC8  3391               	rrcf	?_SwTimerReadValue& (0+255),f,b
 10091  005FCA                     u12770:
 10092  005FCA  2EE8               	decfsz	wreg,f,c
 10093  005FCC  D7F8               	goto	u12775
 10094  005FCE  C091  F09A         	movff	?_SwTimerReadValue,___lmul@multiplier
 10095  005FD2  C092  F09B         	movff	?_SwTimerReadValue+1,___lmul@multiplier+1
 10096  005FD6  C093  F09C         	movff	?_SwTimerReadValue+2,___lmul@multiplier+2
 10097  005FDA  C094  F09D         	movff	?_SwTimerReadValue+3,___lmul@multiplier+3
 10098  005FDE  0E7D               	movlw	125
 10099  005FE0  6F9E               	movwf	___lmul@multiplicand& (0+255),b
 10100  005FE2  0E00               	movlw	0
 10101  005FE4  6F9F               	movwf	(___lmul@multiplicand+1)& (0+255),b
 10102  005FE6  0E00               	movlw	0
 10103  005FE8  6FA0               	movwf	(___lmul@multiplicand+2)& (0+255),b
 10104  005FEA  0E00               	movlw	0
 10105  005FEC  6FA1               	movwf	(___lmul@multiplicand+3)& (0+255),b
 10106  005FEE  EC4D  F042         	call	___lmul	;wreg free
 10107  005FF2  D021               	goto	L5
 10108  005FF4                     l344:
 10109  005FF4  0101               	movlb	1	; () banked
 10110  005FF6  517C               	movf	(_RadioConfiguration+39)& (0+255),w,b
 10111  005FF8  EC86  F045         	call	_SwTimerReadValue
 10112  005FFC  C091  F09A         	movff	?_SwTimerReadValue,___lmul@multiplier
 10113  006000  C092  F09B         	movff	?_SwTimerReadValue+1,___lmul@multiplier+1
 10114  006004  C093  F09C         	movff	?_SwTimerReadValue+2,___lmul@multiplier+2
 10115  006008  C094  F09D         	movff	?_SwTimerReadValue+3,___lmul@multiplier+3
 10116  00600C  0E7D               	movlw	125
 10117  00600E  0100               	movlb	0	; () banked
 10118  006010  6F9E               	movwf	___lmul@multiplicand& (0+255),b
 10119  006012  0E00               	movlw	0
 10120  006014  6F9F               	movwf	(___lmul@multiplicand+1)& (0+255),b
 10121  006016  0E00               	movlw	0
 10122  006018  6FA0               	movwf	(___lmul@multiplicand+2)& (0+255),b
 10123  00601A  0E00               	movlw	0
 10124  00601C  6FA1               	movwf	(___lmul@multiplicand+3)& (0+255),b
 10125  00601E  EC4D  F042         	call	___lmul	;wreg free
 10126  006022  0E0D               	movlw	13
 10127  006024  D006               	goto	u12780
 10128  006026                     u12785:
 10129  006026  0100               	movlb	0	; () banked
 10130  006028  90D8               	bcf	status,0,c
 10131  00602A  339D               	rrcf	(?___lmul+3)& (0+255),f,b
 10132  00602C  339C               	rrcf	(?___lmul+2)& (0+255),f,b
 10133  00602E  339B               	rrcf	(?___lmul+1)& (0+255),f,b
 10134  006030  339A               	rrcf	?___lmul& (0+255),f,b
 10135  006032                     u12780:
 10136  006032  2EE8               	decfsz	wreg,f,c
 10137  006034  D7F8               	goto	u12785
 10138  006036                     L5:
 10139  006036  C09A  F0EB         	movff	?___lmul,_RADIO_TxDone$532
 10140  00603A  C09B  F0EC         	movff	?___lmul+1,_RADIO_TxDone$532+1
 10141  00603E  C09C  F0ED         	movff	?___lmul+2,_RADIO_TxDone$532+2
 10142  006042  C09D  F0EE         	movff	?___lmul+3,_RADIO_TxDone$532+3
 10143                           
 10144                           ; BSR set to: 0
 10145  006046  C0EB  F0E3         	movff	_RADIO_TxDone$532,??_RADIO_TxDone
 10146  00604A  C0EC  F0E4         	movff	_RADIO_TxDone$532+1,??_RADIO_TxDone+1
 10147  00604E  C0ED  F0E5         	movff	_RADIO_TxDone$532+2,??_RADIO_TxDone+2
 10148  006052  C0EE  F0E6         	movff	_RADIO_TxDone$532+3,??_RADIO_TxDone+3
 10149  006056  0100               	movlb	0	; () banked
 10150  006058  1FE3               	comf	??_RADIO_TxDone& (0+255),f,b
 10151  00605A  1FE4               	comf	(??_RADIO_TxDone+1)& (0+255),f,b
 10152  00605C  1FE5               	comf	(??_RADIO_TxDone+2)& (0+255),f,b
 10153  00605E  1FE6               	comf	(??_RADIO_TxDone+3)& (0+255),f,b
 10154  006060  2BE3               	incf	??_RADIO_TxDone& (0+255),f,b
 10155  006062  0E00               	movlw	0
 10156  006064  23E4               	addwfc	(??_RADIO_TxDone+1)& (0+255),f,b
 10157  006066  23E5               	addwfc	(??_RADIO_TxDone+2)& (0+255),f,b
 10158  006068  23E6               	addwfc	(??_RADIO_TxDone+3)& (0+255),f,b
 10159  00606A  0E20               	movlw	32
 10160  00606C  25E3               	addwf	??_RADIO_TxDone& (0+255),w,b
 10161  00606E  6FE7               	movwf	RADIO_TxDone@timeOnAir& (0+255),b
 10162  006070  0E4E               	movlw	78
 10163  006072  21E4               	addwfc	(??_RADIO_TxDone+1)& (0+255),w,b
 10164  006074  6FE8               	movwf	(RADIO_TxDone@timeOnAir+1)& (0+255),b
 10165  006076  0E00               	movlw	0
 10166  006078  21E5               	addwfc	(??_RADIO_TxDone+2)& (0+255),w,b
 10167  00607A  6FE9               	movwf	(RADIO_TxDone@timeOnAir+2)& (0+255),b
 10168  00607C  0E00               	movlw	0
 10169  00607E  21E6               	addwfc	(??_RADIO_TxDone+3)& (0+255),w,b
 10170  006080  6FEA               	movwf	(RADIO_TxDone@timeOnAir+3)& (0+255),b
 10171                           
 10172                           ; BSR set to: 0
 10173                           ;radio_driver_SX1276.c: 1089: LORAWAN_TxDone((uint16_t)timeOnAir);
 10174  006082  C0E7  F0BB         	movff	RADIO_TxDone@timeOnAir,LORAWAN_TxDone@timeOnAir
 10175  006086  C0E8  F0BC         	movff	RADIO_TxDone@timeOnAir+1,LORAWAN_TxDone@timeOnAir+1
 10176  00608A  ECBD  F006         	call	_LORAWAN_TxDone	;wreg free
 10177  00608E  0012               	return	
 10178  006090                     __end_of_RADIO_TxDone:
 10179                           	opt stack 0
 10180                           tosu	equ	0xFFF
 10181                           tosh	equ	0xFFE
 10182                           tosl	equ	0xFFD
 10183                           pclath	equ	0xFFA
 10184                           tblptru	equ	0xFF8
 10185                           tblptrh	equ	0xFF7
 10186                           tblptrl	equ	0xFF6
 10187                           tablat	equ	0xFF5
 10188                           prodh	equ	0xFF4
 10189                           prodl	equ	0xFF3
 10190                           intcon	equ	0xFF2
 10191                           intcon2	equ	0xFF1
 10192                           intcon3	equ	0xFF0
 10193                           postinc0	equ	0xFEE
 10194                           wreg	equ	0xFE8
 10195                           postinc1	equ	0xFE6
 10196                           postdec1	equ	0xFE5
 10197                           plusw1	equ	0xFE3
 10198                           fsr1h	equ	0xFE2
 10199                           fsr1l	equ	0xFE1
 10200                           indf2	equ	0xFDF
 10201                           postinc2	equ	0xFDE
 10202                           postdec2	equ	0xFDD
 10203                           fsr2h	equ	0xFDA
 10204                           fsr2l	equ	0xFD9
 10205                           status	equ	0xFD8
 10206                           
 10207 ;; *************** function _RADIO_RxDone *****************
 10208 ;; Defined at:
 10209 ;;		line 961 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 10210 ;; Parameters:    Size  Location     Type
 10211 ;;		None
 10212 ;; Auto vars:     Size  Location     Type
 10213 ;;  i               1  148[BANK0 ] unsigned char 
 10214 ;;  irqFlags        1  147[BANK0 ] unsigned char 
 10215 ;; Return value:  Size  Location     Type
 10216 ;;                  1    wreg      void 
 10217 ;; Registers used:
 10218 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, btemp+8, btemp+9, btemp+10, btemp+11, to
      +sl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10219 ;; Tracked objects:
 10220 ;;		On entry : 0/0
 10221 ;;		On exit  : 0/0
 10222 ;;		Unchanged: 0/0
 10223 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10224 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10225 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10226 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10227 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10228 ;;Total ram usage:        2 bytes
 10229 ;; Hardware stack levels used:    1
 10230 ;; Hardware stack levels required when called:   16
 10231 ;; This function calls:
 10232 ;;		_HALSPICSAssert
 10233 ;;		_HALSPICSDeassert
 10234 ;;		_HALSPISend
 10235 ;;		_LORAWAN_RxDone
 10236 ;;		_RADIO_RegisterRead
 10237 ;;		_RADIO_RegisterWrite
 10238 ;;		_RADIO_WriteMode
 10239 ;;		_SwTimerStop
 10240 ;;		___abdiv
 10241 ;; This function is called by:
 10242 ;;		_RADIO_DIO0
 10243 ;; This function uses a non-reentrant model
 10244 ;;
 10245                           
 10246                           	psect	text58
 10247  00696A                     __ptext58:
 10248                           	opt stack 0
 10249  00696A                     _RADIO_RxDone:
 10250                           	opt stack 12
 10251                           
 10252                           ;radio_driver_SX1276.c: 963: uint8_t i, irqFlags;
 10253                           ;radio_driver_SX1276.c: 964: irqFlags = RADIO_RegisterRead(0x12);
 10254                           
 10255                           ;incstack = 0
 10256  00696A  0E12               	movlw	18
 10257  00696C  ECE7  F047         	call	_RADIO_RegisterRead
 10258  006970  0100               	movlb	0	; () banked
 10259  006972  6FF3               	movwf	RADIO_RxDone@irqFlags& (0+255),b
 10260                           
 10261                           ;radio_driver_SX1276.c: 967: RADIO_RegisterWrite(0x12, (1<<(6)) | (1<<(5)) | (1<<(4)));
 10262  006974  0E70               	movlw	112
 10263  006976  6F62               	movwf	RADIO_RegisterWrite@value& (0+255),b
 10264  006978  0E12               	movlw	18
 10265  00697A  ECBE  F048         	call	_RADIO_RegisterWrite
 10266                           
 10267                           ;radio_driver_SX1276.c: 968: if (((1<<(6)) | (1<<(4))) == (irqFlags & ((1<<(6)) | (1<<(4
      +                          )))))
 10268  00697E  0100               	movlb	0	; () banked
 10269  006980  51F3               	movf	RADIO_RxDone@irqFlags& (0+255),w,b
 10270  006982  0B50               	andlw	80
 10271  006984  0A50               	xorlw	80
 10272  006986  A4D8               	btfss	status,2,c
 10273  006988  0012               	return	
 10274                           
 10275                           ; BSR set to: 0
 10276                           ;radio_driver_SX1276.c: 969: {
 10277                           ;radio_driver_SX1276.c: 971: SwTimerStop(RadioConfiguration.watchdogTimerId);
 10278  00698A  0101               	movlb	1	; () banked
 10279  00698C  517E               	movf	(_RadioConfiguration+41)& (0+255),w,b
 10280  00698E  ECFB  F047         	call	_SwTimerStop
 10281                           
 10282                           ;radio_driver_SX1276.c: 974: i = RADIO_RegisterRead(0x1C);
 10283  006992  0E1C               	movlw	28
 10284  006994  ECE7  F047         	call	_RADIO_RegisterRead
 10285  006998  0100               	movlb	0	; () banked
 10286  00699A  6FF4               	movwf	RADIO_RxDone@i& (0+255),b
 10287                           
 10288                           ; BSR set to: 0
 10289                           ;radio_driver_SX1276.c: 975: if ((0 == RadioConfiguration.crcOn) || ((0 == (irqFlags & (
      +                          1<<(5)))) && (0 != (i & (1<<(6))))))
 10290  00699C  0101               	movlb	1	; () banked
 10291  00699E  5171               	movf	(_RadioConfiguration+28)& (0+255),w,b
 10292  0069A0  B4D8               	btfsc	status,2,c
 10293  0069A2  D004               	goto	u12680
 10294                           
 10295                           ; BSR set to: 1
 10296  0069A4  0100               	movlb	0	; () banked
 10297  0069A6  ABF3               	btfss	RADIO_RxDone@irqFlags& (0+255),5,b
 10298                           
 10299                           ; BSR set to: 0
 10300  0069A8  ADF4               	btfss	RADIO_RxDone@i& (0+255),6,b
 10301  0069AA  D03C               	goto	l316
 10302  0069AC                     u12680:
 10303                           
 10304                           ;radio_driver_SX1276.c: 976: {
 10305                           ;radio_driver_SX1276.c: 984: RadioConfiguration.dataBufferLen = RADIO_RegisterRead(0x13)
      +                          ;
 10306                           
 10307                           ; BSR set to: 0
 10308  0069AC  0E13               	movlw	19
 10309  0069AE  ECE7  F047         	call	_RADIO_RegisterRead
 10310  0069B2  0101               	movlb	1	; () banked
 10311  0069B4  6F79               	movwf	(_RadioConfiguration+36)& (0+255),b
 10312                           
 10313                           ;radio_driver_SX1276.c: 985: RADIO_RegisterWrite(0x0D, 0x00);
 10314  0069B6  0E00               	movlw	0
 10315  0069B8  0100               	movlb	0	; () banked
 10316  0069BA  6F62               	movwf	RADIO_RegisterWrite@value& (0+255),b
 10317  0069BC  0E0D               	movlw	13
 10318  0069BE  ECBE  F048         	call	_RADIO_RegisterWrite
 10319                           
 10320                           ;radio_driver_SX1276.c: 987: HALSPICSAssert();
 10321  0069C2  ECC8  F04A         	call	_HALSPICSAssert	;wreg free
 10322                           
 10323                           ;radio_driver_SX1276.c: 988: HALSPISend(0x00);
 10324  0069C6  0E00               	movlw	0
 10325  0069C8  EC1F  F04A         	call	_HALSPISend
 10326                           
 10327                           ;radio_driver_SX1276.c: 989: for (i = 0; i < RadioConfiguration.dataBufferLen; i++)
 10328  0069CC  0E00               	movlw	0
 10329  0069CE  0100               	movlb	0	; () banked
 10330  0069D0  6FF4               	movwf	RADIO_RxDone@i& (0+255),b
 10331  0069D2  D00F               	goto	l319
 10332  0069D4                     
 10333                           ; BSR set to: 0
 10334                           ;radio_driver_SX1276.c: 990: {
 10335                           ;radio_driver_SX1276.c: 991: RadioConfiguration.dataBuffer[i] = HALSPISend(0xFF);
 10336                           
 10337                           ; BSR set to: 0
 10338  0069D4  51F4               	movf	RADIO_RxDone@i& (0+255),w,b
 10339  0069D6  0D01               	mullw	1
 10340  0069D8  50F3               	movf	prodl,w,c
 10341  0069DA  0101               	movlb	1	; () banked
 10342  0069DC  257A               	addwf	(_RadioConfiguration+37)& (0+255),w,b
 10343  0069DE  6ED9               	movwf	fsr2l,c
 10344  0069E0  50F4               	movf	prodh,w,c
 10345  0069E2  217B               	addwfc	(_RadioConfiguration+38)& (0+255),w,b
 10346  0069E4  6EDA               	movwf	fsr2h,c
 10347  0069E6  0EFF               	movlw	255
 10348  0069E8  EC1F  F04A         	call	_HALSPISend
 10349  0069EC  6EDF               	movwf	indf2,c
 10350  0069EE  0100               	movlb	0	; () banked
 10351  0069F0  2BF4               	incf	RADIO_RxDone@i& (0+255),f,b
 10352  0069F2                     l319:
 10353                           
 10354                           ; BSR set to: 0
 10355                           
 10356                           ; BSR set to: 0
 10357  0069F2  0101               	movlb	1	; () banked
 10358  0069F4  5179               	movf	(_RadioConfiguration+36)& (0+255),w,b
 10359  0069F6  0100               	movlb	0	; () banked
 10360  0069F8  5DF4               	subwf	RADIO_RxDone@i& (0+255),w,b
 10361  0069FA  A0D8               	btfss	status,0,c
 10362  0069FC  D7EB               	goto	l320
 10363                           
 10364                           ; BSR set to: 0
 10365                           ;radio_driver_SX1276.c: 992: }
 10366                           ;radio_driver_SX1276.c: 993: HALSPICSDeassert();
 10367                           
 10368                           ; BSR set to: 0
 10369  0069FE  ECC6  F04A         	call	_HALSPICSDeassert	;wreg free
 10370                           
 10371                           ;radio_driver_SX1276.c: 994: RadioConfiguration.flags |= (1 << (2));
 10372  006A02  0101               	movlb	1	; () banked
 10373  006A04  8578               	bsf	(_RadioConfiguration+35)& (0+255),2,b
 10374                           
 10375                           ; BSR set to: 1
 10376                           ;radio_driver_SX1276.c: 996: RadioConfiguration.packetSNR = RADIO_RegisterRead(0x19);
 10377  006A06  0E19               	movlw	25
 10378  006A08  ECE7  F047         	call	_RADIO_RegisterRead
 10379  006A0C  0101               	movlb	1	; () banked
 10380  006A0E  6F87               	movwf	(_RadioConfiguration+50)& (0+255),b
 10381                           
 10382                           ; BSR set to: 1
 10383                           ;radio_driver_SX1276.c: 997: RadioConfiguration.packetSNR /= (int8_t)4;
 10384  006A10  0E04               	movlw	4
 10385  006A12  0100               	movlb	0	; () banked
 10386  006A14  6F60               	movwf	___abdiv@divisor& (0+255),b
 10387  006A16  0101               	movlb	1	; () banked
 10388  006A18  5187               	movf	(_RadioConfiguration+50)& (0+255),w,b
 10389  006A1A  ECDC  F03F         	call	___abdiv
 10390  006A1E  0101               	movlb	1	; () banked
 10391  006A20  6F87               	movwf	(_RadioConfiguration+50)& (0+255),b
 10392                           
 10393                           ;radio_driver_SX1276.c: 998: }
 10394  006A22  D002               	goto	l322
 10395  006A24                     l316:
 10396                           
 10397                           ;radio_driver_SX1276.c: 999: else
 10398                           ;radio_driver_SX1276.c: 1000: {
 10399                           ;radio_driver_SX1276.c: 1002: RadioConfiguration.flags |= (1 << (3));
 10400                           
 10401                           ; BSR set to: 1
 10402  006A24  0101               	movlb	1	; () banked
 10403  006A26  8778               	bsf	(_RadioConfiguration+35)& (0+255),3,b
 10404  006A28                     l322:
 10405                           
 10406                           ; BSR set to: 1
 10407                           ;radio_driver_SX1276.c: 1003: }
 10408                           ;radio_driver_SX1276.c: 1004: RADIO_WriteMode(MODE_SLEEP, RadioConfiguration.modulation,
      +                           0);
 10409                           
 10410                           ; BSR set to: 1
 10411  006A28  C16D  F065         	movff	_RadioConfiguration+24,RADIO_WriteMode@newModulation
 10412  006A2C  0E00               	movlw	0
 10413  006A2E  0100               	movlb	0	; () banked
 10414  006A30  6F66               	movwf	RADIO_WriteMode@blocking& (0+255),b
 10415  006A32  0E00               	movlw	0
 10416  006A34  ECDA  F031         	call	_RADIO_WriteMode
 10417                           
 10418                           ;radio_driver_SX1276.c: 1005: RadioConfiguration.flags &= ~(1 << (1));
 10419  006A38  0101               	movlb	1	; () banked
 10420  006A3A  9378               	bcf	(_RadioConfiguration+35)& (0+255),1,b
 10421                           
 10422                           ; BSR set to: 1
 10423                           ;radio_driver_SX1276.c: 1006: LORAWAN_RxDone(RadioConfiguration.dataBuffer, RadioConfigu
      +                          ration.dataBufferLen);
 10424  006A3C  C17A  F1F3         	movff	_RadioConfiguration+37,LORAWAN_RxDone@buffer
 10425  006A40  C17B  F1F4         	movff	_RadioConfiguration+38,LORAWAN_RxDone@buffer+1
 10426  006A44  C179  F1F5         	movff	_RadioConfiguration+36,LORAWAN_RxDone@bufferLength
 10427  006A48  EC6A  F000         	call	_LORAWAN_RxDone	;wreg free
 10428  006A4C  0012               	return	
 10429  006A4E                     __end_of_RADIO_RxDone:
 10430                           	opt stack 0
 10431                           tosu	equ	0xFFF
 10432                           tosh	equ	0xFFE
 10433                           tosl	equ	0xFFD
 10434                           pclath	equ	0xFFA
 10435                           tblptru	equ	0xFF8
 10436                           tblptrh	equ	0xFF7
 10437                           tblptrl	equ	0xFF6
 10438                           tablat	equ	0xFF5
 10439                           prodh	equ	0xFF4
 10440                           prodl	equ	0xFF3
 10441                           intcon	equ	0xFF2
 10442                           intcon2	equ	0xFF1
 10443                           intcon3	equ	0xFF0
 10444                           postinc0	equ	0xFEE
 10445                           wreg	equ	0xFE8
 10446                           postinc1	equ	0xFE6
 10447                           postdec1	equ	0xFE5
 10448                           plusw1	equ	0xFE3
 10449                           fsr1h	equ	0xFE2
 10450                           fsr1l	equ	0xFE1
 10451                           indf2	equ	0xFDF
 10452                           postinc2	equ	0xFDE
 10453                           postdec2	equ	0xFDD
 10454                           fsr2h	equ	0xFDA
 10455                           fsr2l	equ	0xFD9
 10456                           status	equ	0xFD8
 10457                           
 10458 ;; *************** function ___abdiv *****************
 10459 ;; Defined at:
 10460 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\abdiv.c"
 10461 ;; Parameters:    Size  Location     Type
 10462 ;;  dividend        1    wreg     char 
 10463 ;;  divisor         1    0[BANK0 ] char 
 10464 ;; Auto vars:     Size  Location     Type
 10465 ;;  dividend        1    6[BANK0 ] char 
 10466 ;;  quotient        1    5[BANK0 ] char 
 10467 ;;  sign            1    4[BANK0 ] unsigned char 
 10468 ;;  counter         1    3[BANK0 ] unsigned char 
 10469 ;; Return value:  Size  Location     Type
 10470 ;;                  1    wreg      char 
 10471 ;; Registers used:
 10472 ;;		wreg, status,2, status,0
 10473 ;; Tracked objects:
 10474 ;;		On entry : 0/0
 10475 ;;		On exit  : 0/0
 10476 ;;		Unchanged: 0/0
 10477 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10478 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10479 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10480 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10481 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10482 ;;Total ram usage:        7 bytes
 10483 ;; Hardware stack levels used:    1
 10484 ;; Hardware stack levels required when called:    7
 10485 ;; This function calls:
 10486 ;;		Nothing
 10487 ;; This function is called by:
 10488 ;;		_RADIO_RxDone
 10489 ;; This function uses a non-reentrant model
 10490 ;;
 10491                           
 10492                           	psect	text59
 10493  007FB8                     __ptext59:
 10494                           	opt stack 0
 10495  007FB8                     ___abdiv:
 10496                           	opt stack 20
 10497                           
 10498                           ;incstack = 0
 10499                           ;___abdiv@dividend stored from wreg
 10500  007FB8  0100               	movlb	0	; () banked
 10501  007FBA  6F66               	movwf	___abdiv@dividend& (0+255),b
 10502  007FBC  0E00               	movlw	0
 10503  007FBE  0100               	movlb	0	; () banked
 10504  007FC0  6F64               	movwf	___abdiv@sign& (0+255),b
 10505                           
 10506                           ; BSR set to: 0
 10507  007FC2  AF60               	btfss	___abdiv@divisor& (0+255),7,b
 10508  007FC4  D003               	goto	l2853
 10509                           
 10510                           ; BSR set to: 0
 10511  007FC6  6D60               	negf	___abdiv@divisor& (0+255),b
 10512                           
 10513                           ; BSR set to: 0
 10514  007FC8  0E01               	movlw	1
 10515  007FCA  6F64               	movwf	___abdiv@sign& (0+255),b
 10516  007FCC                     l2853:
 10517                           
 10518                           ; BSR set to: 0
 10519                           
 10520                           ; BSR set to: 0
 10521  007FCC  AF66               	btfss	___abdiv@dividend& (0+255),7,b
 10522  007FCE  D003               	goto	l2854
 10523                           
 10524                           ; BSR set to: 0
 10525  007FD0  6D66               	negf	___abdiv@dividend& (0+255),b
 10526                           
 10527                           ; BSR set to: 0
 10528  007FD2  0E01               	movlw	1
 10529  007FD4  1B64               	xorwf	___abdiv@sign& (0+255),f,b
 10530  007FD6                     l2854:
 10531                           
 10532                           ; BSR set to: 0
 10533                           
 10534                           ; BSR set to: 0
 10535  007FD6  0E00               	movlw	0
 10536  007FD8  6F65               	movwf	___abdiv@quotient& (0+255),b
 10537                           
 10538                           ; BSR set to: 0
 10539  007FDA  5160               	movf	___abdiv@divisor& (0+255),w,b
 10540  007FDC  B4D8               	btfsc	status,2,c
 10541  007FDE  D01A               	goto	l2861
 10542                           
 10543                           ; BSR set to: 0
 10544  007FE0  0E01               	movlw	1
 10545  007FE2  6F63               	movwf	___abdiv@counter& (0+255),b
 10546  007FE4  D003               	goto	l2856
 10547  007FE6                     
 10548                           ; BSR set to: 0
 10549                           
 10550                           ; BSR set to: 0
 10551  007FE6  90D8               	bcf	status,0,c
 10552  007FE8  3760               	rlcf	___abdiv@divisor& (0+255),f,b
 10553                           
 10554                           ; BSR set to: 0
 10555  007FEA  2B63               	incf	___abdiv@counter& (0+255),f,b
 10556  007FEC                     l2856:
 10557                           
 10558                           ; BSR set to: 0
 10559                           
 10560                           ; BSR set to: 0
 10561  007FEC  C060  F061         	movff	___abdiv@divisor,??___abdiv
 10562  007FF0  6B62               	clrf	(??___abdiv+1)& (0+255),b
 10563  007FF2  BF61               	btfsc	??___abdiv& (0+255),7,b
 10564  007FF4  0762               	decf	(??___abdiv+1)& (0+255),f,b
 10565  007FF6  AF61               	btfss	??___abdiv& (0+255),7,b
 10566  007FF8  D7F6               	goto	l2857
 10567  007FFA                     u12550:
 10568                           
 10569                           ; BSR set to: 0
 10570                           
 10571                           ; BSR set to: 0
 10572                           
 10573                           ; BSR set to: 0
 10574  007FFA  90D8               	bcf	status,0,c
 10575  007FFC  3765               	rlcf	___abdiv@quotient& (0+255),f,b
 10576  007FFE  5160               	movf	___abdiv@divisor& (0+255),w,b
 10577  008000  5D66               	subwf	___abdiv@dividend& (0+255),w,b
 10578  008002  A0D8               	btfss	status,0,c
 10579  008004  D003               	goto	l2860
 10580                           
 10581                           ; BSR set to: 0
 10582  008006  5160               	movf	___abdiv@divisor& (0+255),w,b
 10583  008008  5F66               	subwf	___abdiv@dividend& (0+255),f,b
 10584                           
 10585                           ; BSR set to: 0
 10586  00800A  8165               	bsf	___abdiv@quotient& (0+255),0,b
 10587  00800C                     l2860:
 10588                           
 10589                           ; BSR set to: 0
 10590                           
 10591                           ; BSR set to: 0
 10592  00800C  90D8               	bcf	status,0,c
 10593  00800E  3360               	rrcf	___abdiv@divisor& (0+255),f,b
 10594                           
 10595                           ; BSR set to: 0
 10596  008010  2F63               	decfsz	___abdiv@counter& (0+255),f,b
 10597  008012  D7F3               	goto	u12550
 10598  008014                     l2861:
 10599                           
 10600                           ; BSR set to: 0
 10601                           
 10602                           ; BSR set to: 0
 10603                           
 10604                           ; BSR set to: 0
 10605  008014  5164               	movf	___abdiv@sign& (0+255),w,b
 10606  008016  A4D8               	btfss	status,2,c
 10607                           
 10608                           ; BSR set to: 0
 10609  008018  6D65               	negf	___abdiv@quotient& (0+255),b
 10610                           
 10611                           ; BSR set to: 0
 10612                           
 10613                           ; BSR set to: 0
 10614  00801A  5165               	movf	___abdiv@quotient& (0+255),w,b
 10615  00801C  0012               	return	
 10616  00801E                     __end_of___abdiv:
 10617                           	opt stack 0
 10618                           tosu	equ	0xFFF
 10619                           tosh	equ	0xFFE
 10620                           tosl	equ	0xFFD
 10621                           pclath	equ	0xFFA
 10622                           tblptru	equ	0xFF8
 10623                           tblptrh	equ	0xFF7
 10624                           tblptrl	equ	0xFF6
 10625                           tablat	equ	0xFF5
 10626                           prodh	equ	0xFF4
 10627                           prodl	equ	0xFF3
 10628                           intcon	equ	0xFF2
 10629                           intcon2	equ	0xFF1
 10630                           intcon3	equ	0xFF0
 10631                           postinc0	equ	0xFEE
 10632                           wreg	equ	0xFE8
 10633                           postinc1	equ	0xFE6
 10634                           postdec1	equ	0xFE5
 10635                           plusw1	equ	0xFE3
 10636                           fsr1h	equ	0xFE2
 10637                           fsr1l	equ	0xFE1
 10638                           indf2	equ	0xFDF
 10639                           postinc2	equ	0xFDE
 10640                           postdec2	equ	0xFDD
 10641                           fsr2h	equ	0xFDA
 10642                           fsr2l	equ	0xFD9
 10643                           status	equ	0xFD8
 10644                           
 10645 ;; *************** function _RADIO_FSKPayloadReady *****************
 10646 ;; Defined at:
 10647 ;;		line 1010 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 10648 ;; Parameters:    Size  Location     Type
 10649 ;;		None
 10650 ;; Auto vars:     Size  Location     Type
 10651 ;;  i               1  148[BANK0 ] unsigned char 
 10652 ;;  irqFlags        1  147[BANK0 ] unsigned char 
 10653 ;; Return value:  Size  Location     Type
 10654 ;;                  1    wreg      void 
 10655 ;; Registers used:
 10656 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, btemp+1, btemp+2, btemp+8, btemp+9, btem
      +p+10, btemp+11, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10657 ;; Tracked objects:
 10658 ;;		On entry : 0/0
 10659 ;;		On exit  : 0/0
 10660 ;;		Unchanged: 0/0
 10661 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10662 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10663 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10664 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10665 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10666 ;;Total ram usage:        2 bytes
 10667 ;; Hardware stack levels used:    1
 10668 ;; Hardware stack levels required when called:   16
 10669 ;; This function calls:
 10670 ;;		_HALSPICSAssert
 10671 ;;		_HALSPICSDeassert
 10672 ;;		_HALSPISend
 10673 ;;		_LORAWAN_RxDone
 10674 ;;		_LORAWAN_RxTimeout
 10675 ;;		_RADIO_RegisterRead
 10676 ;;		_RADIO_WriteMode
 10677 ;;		_SwTimerStop
 10678 ;; This function is called by:
 10679 ;;		_RADIO_DIO0
 10680 ;; This function uses a non-reentrant model
 10681 ;;
 10682                           
 10683                           	psect	text60
 10684  0070CE                     __ptext60:
 10685                           	opt stack 0
 10686  0070CE                     _RADIO_FSKPayloadReady:
 10687                           	opt stack 12
 10688                           
 10689                           ;radio_driver_SX1276.c: 1012: uint8_t irqFlags;
 10690                           ;radio_driver_SX1276.c: 1013: uint8_t i;
 10691                           ;radio_driver_SX1276.c: 1015: irqFlags = RADIO_RegisterRead(0x3F);
 10692                           
 10693                           ; BSR set to: 0
 10694                           ;incstack = 0
 10695  0070CE  0E3F               	movlw	63
 10696  0070D0  ECE7  F047         	call	_RADIO_RegisterRead
 10697  0070D4  0100               	movlb	0	; () banked
 10698  0070D6  6FF3               	movwf	RADIO_FSKPayloadReady@irqFlags& (0+255),b
 10699                           
 10700                           ; BSR set to: 0
 10701                           ;radio_driver_SX1276.c: 1016: if ((1<<(2)) == (irqFlags & (1<<(2))))
 10702  0070D8  A5F3               	btfss	RADIO_FSKPayloadReady@irqFlags& (0+255),2,b
 10703  0070DA  0012               	return	
 10704                           
 10705                           ; BSR set to: 0
 10706                           ;radio_driver_SX1276.c: 1017: {
 10707                           ;radio_driver_SX1276.c: 1022: SwTimerStop(RadioConfiguration.watchdogTimerId);
 10708  0070DC  0101               	movlb	1	; () banked
 10709  0070DE  517E               	movf	(_RadioConfiguration+41)& (0+255),w,b
 10710  0070E0  ECFB  F047         	call	_SwTimerStop
 10711                           
 10712                           ;radio_driver_SX1276.c: 1023: SwTimerStop(RadioConfiguration.fskRxWindowTimerId);
 10713  0070E4  0101               	movlb	1	; () banked
 10714  0070E6  517D               	movf	(_RadioConfiguration+40)& (0+255),w,b
 10715  0070E8  ECFB  F047         	call	_SwTimerStop
 10716                           
 10717                           ;radio_driver_SX1276.c: 1025: HALSPICSAssert();
 10718  0070EC  ECC8  F04A         	call	_HALSPICSAssert	;wreg free
 10719                           
 10720                           ;radio_driver_SX1276.c: 1026: HALSPISend(0x00);
 10721  0070F0  0E00               	movlw	0
 10722  0070F2  EC1F  F04A         	call	_HALSPISend
 10723                           
 10724                           ;radio_driver_SX1276.c: 1027: RadioConfiguration.dataBufferLen = HALSPISend(0xFF);
 10725  0070F6  0EFF               	movlw	255
 10726  0070F8  EC1F  F04A         	call	_HALSPISend
 10727  0070FC  0101               	movlb	1	; () banked
 10728  0070FE  6F79               	movwf	(_RadioConfiguration+36)& (0+255),b
 10729                           
 10730                           ; BSR set to: 1
 10731                           ;radio_driver_SX1276.c: 1028: for (i = 0; i < RadioConfiguration.dataBufferLen; i++)
 10732  007100  0E00               	movlw	0
 10733  007102  0100               	movlb	0	; () banked
 10734  007104  6FF4               	movwf	RADIO_FSKPayloadReady@i& (0+255),b
 10735  007106  D00F               	goto	l327
 10736  007108                     
 10737                           ; BSR set to: 0
 10738                           ;radio_driver_SX1276.c: 1029: {
 10739                           ;radio_driver_SX1276.c: 1030: RadioConfiguration.dataBuffer[i] = HALSPISend(0xFF);
 10740                           
 10741                           ; BSR set to: 0
 10742  007108  51F4               	movf	RADIO_FSKPayloadReady@i& (0+255),w,b
 10743  00710A  0D01               	mullw	1
 10744  00710C  50F3               	movf	prodl,w,c
 10745  00710E  0101               	movlb	1	; () banked
 10746  007110  257A               	addwf	(_RadioConfiguration+37)& (0+255),w,b
 10747  007112  6ED9               	movwf	fsr2l,c
 10748  007114  50F4               	movf	prodh,w,c
 10749  007116  217B               	addwfc	(_RadioConfiguration+38)& (0+255),w,b
 10750  007118  6EDA               	movwf	fsr2h,c
 10751  00711A  0EFF               	movlw	255
 10752  00711C  EC1F  F04A         	call	_HALSPISend
 10753  007120  6EDF               	movwf	indf2,c
 10754  007122  0100               	movlb	0	; () banked
 10755  007124  2BF4               	incf	RADIO_FSKPayloadReady@i& (0+255),f,b
 10756  007126                     l327:
 10757                           
 10758                           ; BSR set to: 0
 10759                           
 10760                           ; BSR set to: 0
 10761  007126  0101               	movlb	1	; () banked
 10762  007128  5179               	movf	(_RadioConfiguration+36)& (0+255),w,b
 10763  00712A  0100               	movlb	0	; () banked
 10764  00712C  5DF4               	subwf	RADIO_FSKPayloadReady@i& (0+255),w,b
 10765  00712E  A0D8               	btfss	status,0,c
 10766  007130  D7EB               	goto	l328
 10767                           
 10768                           ; BSR set to: 0
 10769                           ;radio_driver_SX1276.c: 1031: }
 10770                           ;radio_driver_SX1276.c: 1032: HALSPICSDeassert();
 10771                           
 10772                           ; BSR set to: 0
 10773  007132  ECC6  F04A         	call	_HALSPICSDeassert	;wreg free
 10774                           
 10775                           ;radio_driver_SX1276.c: 1034: RADIO_WriteMode(MODE_SLEEP, RadioConfiguration.modulation,
      +                           0);
 10776  007136  C16D  F065         	movff	_RadioConfiguration+24,RADIO_WriteMode@newModulation
 10777  00713A  0E00               	movlw	0
 10778  00713C  0100               	movlb	0	; () banked
 10779  00713E  6F66               	movwf	RADIO_WriteMode@blocking& (0+255),b
 10780  007140  0E00               	movlw	0
 10781  007142  ECDA  F031         	call	_RADIO_WriteMode
 10782                           
 10783                           ;radio_driver_SX1276.c: 1035: RadioConfiguration.flags &= ~(1 << (1));
 10784  007146  0101               	movlb	1	; () banked
 10785  007148  9378               	bcf	(_RadioConfiguration+35)& (0+255),1,b
 10786                           
 10787                           ; BSR set to: 1
 10788                           ;radio_driver_SX1276.c: 1037: RadioConfiguration.packetSNR = -128;
 10789  00714A  0E80               	movlw	128
 10790  00714C  6F87               	movwf	(_RadioConfiguration+50)& (0+255),b
 10791                           
 10792                           ; BSR set to: 1
 10793                           ;radio_driver_SX1276.c: 1039: if (1 == RadioConfiguration.crcOn)
 10794  00714E  0571               	decf	(_RadioConfiguration+28)& (0+255),w,b
 10795  007150  A4D8               	btfss	status,2,c
 10796  007152  D008               	goto	l330
 10797                           
 10798                           ; BSR set to: 1
 10799                           ;radio_driver_SX1276.c: 1040: {
 10800                           ;radio_driver_SX1276.c: 1041: if ((1<<(1)) == (irqFlags & (1<<(1))))
 10801  007154  0100               	movlb	0	; () banked
 10802  007156  A3F3               	btfss	RADIO_FSKPayloadReady@irqFlags& (0+255),1,b
 10803  007158  D002               	goto	l331
 10804                           
 10805                           ; BSR set to: 0
 10806                           ;radio_driver_SX1276.c: 1042: {
 10807                           ;radio_driver_SX1276.c: 1043: RadioConfiguration.flags |= (1 << (2));
 10808  00715A  0101               	movlb	1	; () banked
 10809  00715C  D003               	goto	l330
 10810  00715E                     l331:
 10811                           
 10812                           ;radio_driver_SX1276.c: 1045: else
 10813                           ;radio_driver_SX1276.c: 1046: {
 10814                           ;radio_driver_SX1276.c: 1047: RadioConfiguration.flags &= ~(1 << (2));
 10815                           
 10816                           ; BSR set to: 1
 10817  00715E  0101               	movlb	1	; () banked
 10818  007160  9578               	bcf	(_RadioConfiguration+35)& (0+255),2,b
 10819                           
 10820                           ; BSR set to: 1
 10821                           ;radio_driver_SX1276.c: 1048: }
 10822                           ;radio_driver_SX1276.c: 1049: }
 10823  007162  D001               	goto	l333
 10824  007164                     l330:
 10825                           
 10826                           ; BSR set to: 1
 10827                           ;radio_driver_SX1276.c: 1050: else
 10828                           ;radio_driver_SX1276.c: 1051: {
 10829                           ;radio_driver_SX1276.c: 1052: RadioConfiguration.flags |= (1 << (2));
 10830                           
 10831                           ; BSR set to: 1
 10832  007164  8578               	bsf	(_RadioConfiguration+35)& (0+255),2,b
 10833  007166                     l333:
 10834                           
 10835                           ; BSR set to: 1
 10836                           ;radio_driver_SX1276.c: 1053: }
 10837                           ;radio_driver_SX1276.c: 1055: if ((RadioConfiguration.flags & (1 << (2))) != 0)
 10838                           
 10839                           ; BSR set to: 1
 10840  007166  A578               	btfss	(_RadioConfiguration+35)& (0+255),2,b
 10841  007168  D009               	goto	l334
 10842                           
 10843                           ; BSR set to: 1
 10844                           ;radio_driver_SX1276.c: 1056: {
 10845                           ;radio_driver_SX1276.c: 1057: LORAWAN_RxDone(RadioConfiguration.dataBuffer, RadioConfigu
      +                          ration.dataBufferLen);
 10846  00716A  C17A  F1F3         	movff	_RadioConfiguration+37,LORAWAN_RxDone@buffer
 10847  00716E  C17B  F1F4         	movff	_RadioConfiguration+38,LORAWAN_RxDone@buffer+1
 10848  007172  C179  F1F5         	movff	_RadioConfiguration+36,LORAWAN_RxDone@bufferLength
 10849  007176  EC6A  F000         	call	_LORAWAN_RxDone	;wreg free
 10850                           
 10851                           ;radio_driver_SX1276.c: 1058: }
 10852  00717A  0012               	return	
 10853  00717C                     l334:
 10854                           
 10855                           ;radio_driver_SX1276.c: 1059: else
 10856                           ;radio_driver_SX1276.c: 1060: {
 10857                           ;radio_driver_SX1276.c: 1061: LORAWAN_RxTimeout();
 10858  00717C  ECF4  F012         	call	_LORAWAN_RxTimeout	;wreg free
 10859  007180  0012               	return	
 10860  007182                     __end_of_RADIO_FSKPayloadReady:
 10861                           	opt stack 0
 10862                           tosu	equ	0xFFF
 10863                           tosh	equ	0xFFE
 10864                           tosl	equ	0xFFD
 10865                           pclath	equ	0xFFA
 10866                           tblptru	equ	0xFF8
 10867                           tblptrh	equ	0xFF7
 10868                           tblptrl	equ	0xFF6
 10869                           tablat	equ	0xFF5
 10870                           prodh	equ	0xFF4
 10871                           prodl	equ	0xFF3
 10872                           intcon	equ	0xFF2
 10873                           intcon2	equ	0xFF1
 10874                           intcon3	equ	0xFF0
 10875                           postinc0	equ	0xFEE
 10876                           wreg	equ	0xFE8
 10877                           postinc1	equ	0xFE6
 10878                           postdec1	equ	0xFE5
 10879                           plusw1	equ	0xFE3
 10880                           fsr1h	equ	0xFE2
 10881                           fsr1l	equ	0xFE1
 10882                           indf2	equ	0xFDF
 10883                           postinc2	equ	0xFDE
 10884                           postdec2	equ	0xFDD
 10885                           fsr2h	equ	0xFDA
 10886                           fsr2l	equ	0xFD9
 10887                           status	equ	0xFD8
 10888                           
 10889 ;; *************** function _LORAWAN_RxTimeout *****************
 10890 ;; Defined at:
 10891 ;;		line 464 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 10892 ;; Parameters:    Size  Location     Type
 10893 ;;		None
 10894 ;; Auto vars:     Size  Location     Type
 10895 ;;  minim           4  102[BANK0 ] unsigned long 
 10896 ;;  i               1  106[BANK0 ] unsigned char 
 10897 ;; Return value:  Size  Location     Type
 10898 ;;                  1    wreg      void 
 10899 ;; Registers used:
 10900 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, btemp+1, btemp+2, btemp+11, tosl, tblptrl, tblptrh, tb
      +lptru, prodl, prodh, cstack
 10901 ;; Tracked objects:
 10902 ;;		On entry : 0/0
 10903 ;;		On exit  : 0/0
 10904 ;;		Unchanged: 0/0
 10905 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10906 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10907 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10908 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10909 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10910 ;;Total ram usage:        9 bytes
 10911 ;; Hardware stack levels used:    1
 10912 ;; Hardware stack levels required when called:   15
 10913 ;; This function calls:
 10914 ;;		_LORAWAN_ReceiveWindow2Callback
 10915 ;;		_RADIO_Transmit
 10916 ;;		_ResetParametersForConfirmedTransmission
 10917 ;;		_ResetParametersForUnconfirmedTransmission
 10918 ;;		_RxData
 10919 ;;		_SelectChannelForTransmission
 10920 ;;		_SetJoinFailState
 10921 ;;		_SwTimerSetTimeout
 10922 ;;		_SwTimerStart
 10923 ;;		___lldiv
 10924 ;; This function is called by:
 10925 ;;		_RADIO_FSKPayloadReady
 10926 ;;		_RADIO_RxTimeout
 10927 ;;		_RADIO_RxFSKTimeout
 10928 ;;		_RADIO_WatchdogTimeout
 10929 ;; This function uses a non-reentrant model
 10930 ;;
 10931                           
 10932                           	psect	text61
 10933  0025E8                     __ptext61:
 10934                           	opt stack 0
 10935  0025E8                     _LORAWAN_RxTimeout:
 10936                           	opt stack 12
 10937                           
 10938                           ;lorawan_eu.c: 466: uint8_t i;
 10939                           ;lorawan_eu.c: 467: uint32_t minim = (4294967295UL);
 10940                           
 10941                           ;incstack = 0
 10942  0025E8  0100               	movlb	0	; () banked
 10943  0025EA  69C6               	setf	LORAWAN_RxTimeout@minim& (0+255),b
 10944  0025EC  69C7               	setf	(LORAWAN_RxTimeout@minim+1)& (0+255),b
 10945  0025EE  69C8               	setf	(LORAWAN_RxTimeout@minim+2)& (0+255),b
 10946  0025F0  69C9               	setf	(LORAWAN_RxTimeout@minim+3)& (0+255),b
 10947                           
 10948                           ;lorawan_eu.c: 469: if (loRa.macStatus.macPause == 0)
 10949  0025F2  0102               	movlb	2	; () banked
 10950  0025F4  B10D               	btfsc	(_loRa+3)& (0+255),0,b
 10951  0025F6  D190               	goto	l1894
 10952                           
 10953                           ; BSR set to: 2
 10954                           ;lorawan_eu.c: 470: {
 10955                           ;lorawan_eu.c: 472: if ( loRa.macStatus.macState == RX1_OPEN )
 10956  0025F8  510C               	movf	(_loRa+2)& (0+255),w,b
 10957  0025FA  0B0F               	andlw	15
 10958  0025FC  0A03               	xorlw	3
 10959  0025FE  A4D8               	btfss	status,2,c
 10960  002600  D011               	goto	l1895
 10961                           
 10962                           ; BSR set to: 2
 10963                           ;lorawan_eu.c: 473: {
 10964                           ;lorawan_eu.c: 474: if (CLASS_A == loRa.deviceClass)
 10965  002602  511C               	movf	(_loRa+18)& (0+255),w,b
 10966  002604  A4D8               	btfss	status,2,c
 10967  002606  D005               	goto	l1896
 10968                           
 10969                           ; BSR set to: 2
 10970                           ;lorawan_eu.c: 475: {
 10971                           ;lorawan_eu.c: 476: loRa.macStatus.macState = BETWEEN_RX1_RX2;
 10972  002608  510C               	movf	(_loRa+2)& (0+255),w,b
 10973  00260A  0BF0               	andlw	-16
 10974  00260C  0904               	iorlw	4
 10975  00260E  6F0C               	movwf	(_loRa+2)& (0+255),b
 10976                           
 10977                           ;lorawan_eu.c: 477: }
 10978  002610  0012               	return	
 10979  002612                     l1896:
 10980                           
 10981                           ; BSR set to: 2
 10982                           ;lorawan_eu.c: 478: else if (CLASS_C == loRa.deviceClass)
 10983                           
 10984                           ; BSR set to: 2
 10985  002612  0E02               	movlw	2
 10986  002614  191C               	xorwf	(_loRa+18)& (0+255),w,b
 10987  002616  A4D8               	btfss	status,2,c
 10988  002618  0012               	return	
 10989                           
 10990                           ; BSR set to: 2
 10991                           ;lorawan_eu.c: 479: {
 10992                           ;lorawan_eu.c: 480: LORAWAN_ReceiveWindow2Callback(0);
 10993  00261A  0E00               	movlw	0
 10994  00261C  6EE6               	movwf	postinc1,c
 10995  00261E  EC05  F036         	call	_LORAWAN_ReceiveWindow2Callback	;wreg free
 10996                           
 10997                           ;lorawan_eu.c: 481: }
 10998                           ;lorawan_eu.c: 482: }
 10999  002622  0012               	return	
 11000  002624                     l1895:
 11001                           
 11002                           ; BSR set to: 2
 11003                           ;lorawan_eu.c: 483: else
 11004                           ;lorawan_eu.c: 484: {
 11005                           ;lorawan_eu.c: 486: if (loRa.lorawanMacStatus.joining == 1)
 11006  002624  A50A               	btfss	_loRa& (0+255),2,b
 11007  002626  D003               	goto	l1900
 11008                           
 11009                           ; BSR set to: 2
 11010                           ;lorawan_eu.c: 487: {
 11011                           ;lorawan_eu.c: 488: SetJoinFailState();
 11012  002628  EC84  F046         	call	_SetJoinFailState	;wreg free
 11013                           
 11014                           ;lorawan_eu.c: 489: }
 11015  00262C  0012               	return	
 11016  00262E                     l1900:
 11017                           
 11018                           ; BSR set to: 2
 11019                           ;lorawan_eu.c: 491: else if (loRa.macStatus.networkJoined == 1)
 11020  00262E  A90C               	btfss	(_loRa+2)& (0+255),4,b
 11021  002630  0012               	return	
 11022                           
 11023                           ; BSR set to: 2
 11024                           ;lorawan_eu.c: 492: {
 11025                           ;lorawan_eu.c: 493: if (loRa.lorawanMacStatus.ackRequiredFromNextDownlinkMessage == 1)
 11026  002632  A10A               	btfss	_loRa& (0+255),0,b
 11027  002634  D058               	goto	l1903
 11028                           
 11029                           ; BSR set to: 2
 11030                           ;lorawan_eu.c: 494: {
 11031                           ;lorawan_eu.c: 495: if (loRa.counterRepetitionsConfirmedUplink <= loRa.maxRepetitionsCon
      +                          firmedUplink)
 11032  002636  51E3               	movf	(_loRa+217)& (0+255),w,b
 11033  002638  5DE1               	subwf	(_loRa+215)& (0+255),w,b
 11034  00263A  A0D8               	btfss	status,0,c
 11035  00263C  D038               	goto	l1904
 11036                           
 11037                           ; BSR set to: 2
 11038                           ;lorawan_eu.c: 496: {
 11039                           ;lorawan_eu.c: 497: loRa.macStatus.macState = RETRANSMISSION_DELAY;
 11040  00263E  510C               	movf	(_loRa+2)& (0+255),w,b
 11041  002640  0BF0               	andlw	-16
 11042  002642  0906               	iorlw	6
 11043  002644  6F0C               	movwf	(_loRa+2)& (0+255),b
 11044                           
 11045                           ; BSR set to: 2
 11046                           ;lorawan_eu.c: 498: SwTimerSetTimeout(loRa.ackTimeoutTimerId, ( (((uint32_t)(loRa.protoc
      +                          olParameters.ackTimeout)) << (12)) / 125UL ));
 11047  002646  51AA               	movf	(_loRa+160)& (0+255),w,b
 11048  002648  0100               	movlb	0	; () banked
 11049  00264A  6FC2               	movwf	??_LORAWAN_RxTimeout& (0+255),b
 11050  00264C  0102               	movlb	2	; () banked
 11051  00264E  51AB               	movf	(_loRa+161)& (0+255),w,b
 11052  002650  0100               	movlb	0	; () banked
 11053  002652  6FC3               	movwf	(??_LORAWAN_RxTimeout+1)& (0+255),b
 11054  002654  6BC4               	clrf	(??_LORAWAN_RxTimeout+2)& (0+255),b
 11055  002656  6BC5               	clrf	(??_LORAWAN_RxTimeout+3)& (0+255),b
 11056  002658  0E0C               	movlw	12
 11057  00265A                     u12055:
 11058  00265A  90D8               	bcf	status,0,c
 11059  00265C  37C2               	rlcf	??_LORAWAN_RxTimeout& (0+255),f,b
 11060  00265E  37C3               	rlcf	(??_LORAWAN_RxTimeout+1)& (0+255),f,b
 11061  002660  37C4               	rlcf	(??_LORAWAN_RxTimeout+2)& (0+255),f,b
 11062  002662  37C5               	rlcf	(??_LORAWAN_RxTimeout+3)& (0+255),f,b
 11063  002664  2EE8               	decfsz	wreg,f,c
 11064  002666  D7F9               	goto	u12055
 11065  002668  C0C2  F060         	movff	??_LORAWAN_RxTimeout,___lldiv@dividend
 11066  00266C  C0C3  F061         	movff	??_LORAWAN_RxTimeout+1,___lldiv@dividend+1
 11067  002670  C0C4  F062         	movff	??_LORAWAN_RxTimeout+2,___lldiv@dividend+2
 11068  002674  C0C5  F063         	movff	??_LORAWAN_RxTimeout+3,___lldiv@dividend+3
 11069  002678  0E7D               	movlw	125
 11070  00267A  6F64               	movwf	___lldiv@divisor& (0+255),b
 11071  00267C  0E00               	movlw	0
 11072  00267E  6F65               	movwf	(___lldiv@divisor+1)& (0+255),b
 11073  002680  0E00               	movlw	0
 11074  002682  6F66               	movwf	(___lldiv@divisor+2)& (0+255),b
 11075  002684  0E00               	movlw	0
 11076  002686  6F67               	movwf	(___lldiv@divisor+3)& (0+255),b
 11077  002688  ECE4  F03C         	call	___lldiv	;wreg free
 11078  00268C  C060  F06D         	movff	?___lldiv,SwTimerSetTimeout@timeout
 11079  002690  C061  F06E         	movff	?___lldiv+1,SwTimerSetTimeout@timeout+1
 11080  002694  C062  F06F         	movff	?___lldiv+2,SwTimerSetTimeout@timeout+2
 11081  002698  C063  F070         	movff	?___lldiv+3,SwTimerSetTimeout@timeout+3
 11082  00269C  0102               	movlb	2	; () banked
 11083  00269E  51F2               	movf	(_loRa+232)& (0+255),w,b
 11084  0026A0  EC01  F045         	call	_SwTimerSetTimeout
 11085                           
 11086                           ;lorawan_eu.c: 499: SwTimerStart(loRa.ackTimeoutTimerId);
 11087  0026A4  0102               	movlb	2	; () banked
 11088  0026A6  51F2               	movf	(_loRa+232)& (0+255),w,b
 11089  0026A8  ECB4  F03A         	call	_SwTimerStart
 11090                           
 11091                           ;lorawan_eu.c: 500: }
 11092  0026AC  0012               	return	
 11093  0026AE                     l1904:
 11094                           
 11095                           ;lorawan_eu.c: 501: else
 11096                           ;lorawan_eu.c: 502: {
 11097                           ;lorawan_eu.c: 503: ResetParametersForConfirmedTransmission ();
 11098  0026AE  ECD7  F049         	call	_ResetParametersForConfirmedTransmission	;wreg free
 11099                           
 11100                           ;lorawan_eu.c: 504: if (rxPayload.RxAppData != (0))
 11101  0026B2  0101               	movlb	1	; () banked
 11102  0026B4  510C               	movf	_rxPayload& (0+255),w,b
 11103  0026B6  110D               	iorwf	(_rxPayload+1)& (0+255),w,b
 11104  0026B8  B4D8               	btfsc	status,2,c
 11105  0026BA  0012               	return	
 11106                           
 11107                           ; BSR set to: 1
 11108                           ;lorawan_eu.c: 505: {
 11109                           ;lorawan_eu.c: 506: rxPayload.RxAppData ((0), 0, MAC_NOT_OK);
 11110  0026BC  0E00               	movlw	0
 11111  0026BE  0100               	movlb	0	; () banked
 11112  0026C0  6F60               	movwf	RxData@pData& (0+255),b
 11113  0026C2  0E00               	movlw	0
 11114  0026C4  6F61               	movwf	(RxData@pData+1)& (0+255),b
 11115  0026C6  0E00               	movlw	0
 11116  0026C8  6F62               	movwf	RxData@dataLength& (0+255),b
 11117  0026CA  0E00               	movlw	0
 11118  0026CC  6F63               	movwf	RxData@status& (0+255),b
 11119  0026CE  D801               	call	u12078
 11120  0026D0  0012               	return	
 11121  0026D2                     u12078:
 11122  0026D2  0005               	push	
 11123  0026D4  6EFA               	movwf	pclath,c
 11124  0026D6  0101               	movlb	1	; () banked
 11125  0026D8  510C               	movf	_rxPayload& (0+255),w,b
 11126  0026DA  6EFD               	movwf	tosl,c
 11127  0026DC  510D               	movf	(_rxPayload+1)& (0+255),w,b
 11128  0026DE  6EFE               	movwf	tosh,c
 11129  0026E0  6AFF               	clrf	tosu,c
 11130  0026E2  50FA               	movf	pclath,w,c
 11131  0026E4  0012               	return		;indir
 11132  0026E6                     l1903:
 11133                           
 11134                           ;lorawan_eu.c: 511: else
 11135                           ;lorawan_eu.c: 512: {
 11136                           ;lorawan_eu.c: 513: if (loRa.counterRepetitionsUnconfirmedUplink <= loRa.maxRepetitionsU
      +                          nconfirmedUplink)
 11137  0026E6  0102               	movlb	2	; () banked
 11138  0026E8  51E2               	movf	(_loRa+216)& (0+255),w,b
 11139  0026EA  5DE0               	subwf	(_loRa+214)& (0+255),w,b
 11140  0026EC  A0D8               	btfss	status,0,c
 11141  0026EE  D0F8               	goto	l1908
 11142                           
 11143                           ; BSR set to: 2
 11144                           ;lorawan_eu.c: 514: {
 11145                           ;lorawan_eu.c: 515: loRa.macStatus.macState = RETRANSMISSION_DELAY;
 11146  0026F0  510C               	movf	(_loRa+2)& (0+255),w,b
 11147  0026F2  0BF0               	andlw	-16
 11148  0026F4  0906               	iorlw	6
 11149  0026F6  6F0C               	movwf	(_loRa+2)& (0+255),b
 11150                           
 11151                           ; BSR set to: 2
 11152                           ;lorawan_eu.c: 516: if (SelectChannelForTransmission (1) == OK)
 11153  0026F8  0E01               	movlw	1
 11154  0026FA  EC09  F03F         	call	_SelectChannelForTransmission
 11155  0026FE  0900               	iorlw	0
 11156  002700  A4D8               	btfss	status,2,c
 11157  002702  D031               	goto	l1909
 11158                           
 11159                           ;lorawan_eu.c: 517: {
 11160                           ;lorawan_eu.c: 519: if (RADIO_Transmit (&macBuffer[16], loRa.lastPacketLength) == OK)
 11161  002704  0E9F               	movlw	low (_macBuffer+16)
 11162  002706  0100               	movlb	0	; () banked
 11163  002708  6FB1               	movwf	RADIO_Transmit@buffer& (0+255),b
 11164  00270A  0E06               	movlw	high (_macBuffer+16)
 11165  00270C  6FB2               	movwf	(RADIO_Transmit@buffer+1)& (0+255),b
 11166  00270E  C2DE  F0B3         	movff	_loRa+212,RADIO_Transmit@bufferLen
 11167  002712  ECF7  F01F         	call	_RADIO_Transmit	;wreg free
 11168  002716  0100               	movlb	0	; () banked
 11169  002718  51B1               	movf	?_RADIO_Transmit& (0+255),w,b
 11170  00271A  11B2               	iorwf	(?_RADIO_Transmit+1)& (0+255),w,b
 11171  00271C  A4D8               	btfss	status,2,c
 11172  00271E  D007               	goto	l1910
 11173                           
 11174                           ; BSR set to: 0
 11175                           ;lorawan_eu.c: 520: {
 11176                           ;lorawan_eu.c: 521: loRa.counterRepetitionsUnconfirmedUplink ++ ;
 11177  002720  0102               	movlb	2	; () banked
 11178  002722  2BE2               	incf	(_loRa+216)& (0+255),f,b
 11179                           
 11180                           ; BSR set to: 2
 11181                           ;lorawan_eu.c: 522: loRa.macStatus.macState = TRANSMISSION_OCCURRING;
 11182  002724  510C               	movf	(_loRa+2)& (0+255),w,b
 11183  002726  0BF0               	andlw	-16
 11184  002728  0901               	iorlw	1
 11185  00272A  6F0C               	movwf	(_loRa+2)& (0+255),b
 11186                           
 11187                           ;lorawan_eu.c: 523: }
 11188  00272C  0012               	return	
 11189  00272E                     l1910:
 11190                           
 11191                           ;lorawan_eu.c: 524: else
 11192                           ;lorawan_eu.c: 526: {
 11193                           ;lorawan_eu.c: 527: ResetParametersForUnconfirmedTransmission ();
 11194                           
 11195                           ; BSR set to: 2
 11196  00272E  ECB0  F049         	call	_ResetParametersForUnconfirmedTransmission	;wreg free
 11197                           
 11198                           ;lorawan_eu.c: 528: if (rxPayload.RxAppData != (0))
 11199  002732  0101               	movlb	1	; () banked
 11200  002734  510C               	movf	_rxPayload& (0+255),w,b
 11201  002736  110D               	iorwf	(_rxPayload+1)& (0+255),w,b
 11202  002738  B4D8               	btfsc	status,2,c
 11203  00273A  0012               	return	
 11204                           
 11205                           ; BSR set to: 1
 11206                           ;lorawan_eu.c: 529: {
 11207                           ;lorawan_eu.c: 530: rxPayload.RxAppData((0), 0, MAC_NOT_OK);
 11208  00273C  0E00               	movlw	0
 11209  00273E  0100               	movlb	0	; () banked
 11210  002740  6F60               	movwf	RxData@pData& (0+255),b
 11211  002742  0E00               	movlw	0
 11212  002744  6F61               	movwf	(RxData@pData+1)& (0+255),b
 11213  002746  0E00               	movlw	0
 11214  002748  6F62               	movwf	RxData@dataLength& (0+255),b
 11215  00274A  0E00               	movlw	0
 11216  00274C  6F63               	movwf	RxData@status& (0+255),b
 11217  00274E  D801               	call	u12128
 11218  002750  0012               	return	
 11219  002752                     u12128:
 11220  002752  0005               	push	
 11221  002754  6EFA               	movwf	pclath,c
 11222  002756  0101               	movlb	1	; () banked
 11223  002758  510C               	movf	_rxPayload& (0+255),w,b
 11224  00275A  6EFD               	movwf	tosl,c
 11225  00275C  510D               	movf	(_rxPayload+1)& (0+255),w,b
 11226  00275E  6EFE               	movwf	tosh,c
 11227  002760  6AFF               	clrf	tosu,c
 11228  002762  50FA               	movf	pclath,w,c
 11229  002764  0012               	return		;indir
 11230  002766                     l1909:
 11231                           
 11232                           ;lorawan_eu.c: 534: else
 11233                           ;lorawan_eu.c: 535: {
 11234                           ;lorawan_eu.c: 537: for (i = 0; i <= loRa.maxChannels; i ++)
 11235  002766  0E00               	movlw	0
 11236  002768  0100               	movlb	0	; () banked
 11237  00276A  6FCA               	movwf	LORAWAN_RxTimeout@i& (0+255),b
 11238  00276C  D07C               	goto	l1914
 11239  00276E                     
 11240                           ;lorawan_eu.c: 538: {
 11241                           ;lorawan_eu.c: 539: if ( (Channels[i].status == 1) && (Channels[i].channelTimer != 0) &&
      +                           (Channels[i].channelTimer <= minim) && (loRa.currentDataRate >= Channels[i].dataRange.m
      +                          in) && (loRa.currentDataRate <= Channels[i].dataRange.max) )
 11242                           
 11243                           ; BSR set to: 0
 11244  00276E  0100               	movlb	0	; () banked
 11245  002770  51CA               	movf	LORAWAN_RxTimeout@i& (0+255),w,b
 11246  002772  0D0E               	mullw	14
 11247  002774  0E04               	movlw	4
 11248  002776  26F3               	addwf	prodl,f,c
 11249  002778  0E00               	movlw	0
 11250  00277A  22F4               	addwfc	prodh,f,c
 11251  00277C  0E00               	movlw	low _Channels
 11252  00277E  24F3               	addwf	prodl,w,c
 11253  002780  6ED9               	movwf	fsr2l,c
 11254  002782  0E04               	movlw	high _Channels
 11255  002784  20F4               	addwfc	prodh,w,c
 11256  002786  6EDA               	movwf	fsr2h,c
 11257  002788  04DE               	decf	postinc2,w,c
 11258  00278A  A4D8               	btfss	status,2,c
 11259  00278C  D06A               	goto	l1916
 11260                           
 11261                           ; BSR set to: 0
 11262  00278E  51CA               	movf	LORAWAN_RxTimeout@i& (0+255),w,b
 11263  002790  0D0E               	mullw	14
 11264  002792  0E08               	movlw	8
 11265  002794  26F3               	addwf	prodl,f,c
 11266  002796  0E00               	movlw	0
 11267  002798  22F4               	addwfc	prodh,f,c
 11268  00279A  0E00               	movlw	low _Channels
 11269  00279C  24F3               	addwf	prodl,w,c
 11270  00279E  6ED9               	movwf	fsr2l,c
 11271  0027A0  0E04               	movlw	high _Channels
 11272  0027A2  20F4               	addwfc	prodh,w,c
 11273  0027A4  6EDA               	movwf	fsr2h,c
 11274  0027A6  50DE               	movf	postinc2,w,c
 11275  0027A8  10DE               	iorwf	postinc2,w,c
 11276  0027AA  10DE               	iorwf	postinc2,w,c
 11277  0027AC  10DE               	iorwf	postinc2,w,c
 11278  0027AE  B4D8               	btfsc	status,2,c
 11279  0027B0  D058               	goto	l1916
 11280                           
 11281                           ; BSR set to: 0
 11282  0027B2  51CA               	movf	LORAWAN_RxTimeout@i& (0+255),w,b
 11283  0027B4  0D0E               	mullw	14
 11284  0027B6  0E08               	movlw	8
 11285  0027B8  26F3               	addwf	prodl,f,c
 11286  0027BA  0E00               	movlw	0
 11287  0027BC  22F4               	addwfc	prodh,f,c
 11288  0027BE  0E00               	movlw	low _Channels
 11289  0027C0  24F3               	addwf	prodl,w,c
 11290  0027C2  6ED9               	movwf	fsr2l,c
 11291  0027C4  0E04               	movlw	high _Channels
 11292  0027C6  20F4               	addwfc	prodh,w,c
 11293  0027C8  6EDA               	movwf	fsr2h,c
 11294  0027CA  50DE               	movf	postinc2,w,c
 11295  0027CC  5DC6               	subwf	LORAWAN_RxTimeout@minim& (0+255),w,b
 11296  0027CE  50DE               	movf	postinc2,w,c
 11297  0027D0  59C7               	subwfb	(LORAWAN_RxTimeout@minim+1)& (0+255),w,b
 11298  0027D2  50DE               	movf	postinc2,w,c
 11299  0027D4  59C8               	subwfb	(LORAWAN_RxTimeout@minim+2)& (0+255),w,b
 11300  0027D6  50DE               	movf	postinc2,w,c
 11301  0027D8  59C9               	subwfb	(LORAWAN_RxTimeout@minim+3)& (0+255),w,b
 11302  0027DA  A0D8               	btfss	status,0,c
 11303  0027DC  D042               	goto	l1916
 11304                           
 11305                           ; BSR set to: 0
 11306  0027DE  51CA               	movf	LORAWAN_RxTimeout@i& (0+255),w,b
 11307  0027E0  0D0E               	mullw	14
 11308  0027E2  0E05               	movlw	5
 11309  0027E4  26F3               	addwf	prodl,f,c
 11310  0027E6  0E00               	movlw	0
 11311  0027E8  22F4               	addwfc	prodh,f,c
 11312  0027EA  0E00               	movlw	low _Channels
 11313  0027EC  24F3               	addwf	prodl,w,c
 11314  0027EE  6ED9               	movwf	fsr2l,c
 11315  0027F0  0E04               	movlw	high _Channels
 11316  0027F2  20F4               	addwfc	prodh,w,c
 11317  0027F4  6EDA               	movwf	fsr2h,c
 11318  0027F6  0104               	movlb	4	; () banked
 11319  0027F8  50DF               	movf	223,w,c
 11320  0027FA  0B0F               	andlw	15
 11321  0027FC  0100               	movlb	0	; () banked
 11322  0027FE  6FC2               	movwf	??_LORAWAN_RxTimeout& (0+255),b
 11323  002800  51C2               	movf	??_LORAWAN_RxTimeout& (0+255),w,b
 11324  002802  0102               	movlb	2	; () banked
 11325  002804  5DE9               	subwf	(_loRa+223)& (0+255),w,b
 11326  002806  A0D8               	btfss	status,0,c
 11327  002808  D02C               	goto	l1916
 11328                           
 11329                           ; BSR set to: 2
 11330  00280A  0100               	movlb	0	; () banked
 11331  00280C  51CA               	movf	LORAWAN_RxTimeout@i& (0+255),w,b
 11332  00280E  0D0E               	mullw	14
 11333  002810  0E05               	movlw	5
 11334  002812  26F3               	addwf	prodl,f,c
 11335  002814  0E00               	movlw	0
 11336  002816  22F4               	addwfc	prodh,f,c
 11337  002818  0E00               	movlw	low _Channels
 11338  00281A  24F3               	addwf	prodl,w,c
 11339  00281C  6ED9               	movwf	fsr2l,c
 11340  00281E  0E04               	movlw	high _Channels
 11341  002820  20F4               	addwfc	prodh,w,c
 11342  002822  6EDA               	movwf	fsr2h,c
 11343  002824  0104               	movlb	4	; () banked
 11344  002826  38DF               	swapf	223,w,c
 11345  002828  0B0F               	andlw	15
 11346  00282A  0100               	movlb	0	; () banked
 11347  00282C  6FC2               	movwf	??_LORAWAN_RxTimeout& (0+255),b
 11348  00282E  0102               	movlb	2	; () banked
 11349  002830  51E9               	movf	(_loRa+223)& (0+255),w,b
 11350  002832  0100               	movlb	0	; () banked
 11351  002834  5DC2               	subwf	??_LORAWAN_RxTimeout& (0+255),w,b
 11352  002836  A0D8               	btfss	status,0,c
 11353  002838  D014               	goto	l1916
 11354                           
 11355                           ; BSR set to: 0
 11356                           ;lorawan_eu.c: 540: {
 11357                           ;lorawan_eu.c: 541: minim = Channels[i].channelTimer;
 11358  00283A  51CA               	movf	LORAWAN_RxTimeout@i& (0+255),w,b
 11359  00283C  0D0E               	mullw	14
 11360  00283E  0E08               	movlw	8
 11361  002840  26F3               	addwf	prodl,f,c
 11362  002842  0E00               	movlw	0
 11363  002844  22F4               	addwfc	prodh,f,c
 11364  002846  0E00               	movlw	low _Channels
 11365  002848  24F3               	addwf	prodl,w,c
 11366  00284A  6ED9               	movwf	fsr2l,c
 11367  00284C  0E04               	movlw	high _Channels
 11368  00284E  20F4               	addwfc	prodh,w,c
 11369  002850  6EDA               	movwf	fsr2h,c
 11370  002852  CFDE F0C6          	movff	postinc2,LORAWAN_RxTimeout@minim
 11371  002856  CFDE F0C7          	movff	postinc2,LORAWAN_RxTimeout@minim+1
 11372  00285A  CFDE F0C8          	movff	postinc2,LORAWAN_RxTimeout@minim+2
 11373  00285E  CFDE F0C9          	movff	postinc2,LORAWAN_RxTimeout@minim+3
 11374  002862                     l1916:
 11375                           
 11376                           ; BSR set to: 0
 11377  002862  0100               	movlb	0	; () banked
 11378  002864  2BCA               	incf	LORAWAN_RxTimeout@i& (0+255),f,b
 11379  002866                     l1914:
 11380                           
 11381                           ; BSR set to: 0
 11382                           
 11383                           ; BSR set to: 0
 11384  002866  51CA               	movf	LORAWAN_RxTimeout@i& (0+255),w,b
 11385  002868  0102               	movlb	2	; () banked
 11386  00286A  5DF7               	subwf	(_loRa+237)& (0+255),w,b
 11387  00286C  B0D8               	btfsc	status,0,c
 11388  00286E  D77F               	goto	l1915
 11389                           
 11390                           ; BSR set to: 2
 11391                           ;lorawan_eu.c: 542: }
 11392                           ;lorawan_eu.c: 543: }
 11393                           ;lorawan_eu.c: 544: SwTimerSetTimeout (loRa.unconfirmedRetransmisionTimerId, ( (((uint32
      +                          _t)(minim + 50)) << (12)) / 125UL ) );
 11394                           
 11395                           ; BSR set to: 2
 11396  002870  C0C6  F0C2         	movff	LORAWAN_RxTimeout@minim,??_LORAWAN_RxTimeout
 11397  002874  C0C7  F0C3         	movff	LORAWAN_RxTimeout@minim+1,??_LORAWAN_RxTimeout+1
 11398  002878  C0C8  F0C4         	movff	LORAWAN_RxTimeout@minim+2,??_LORAWAN_RxTimeout+2
 11399  00287C  C0C9  F0C5         	movff	LORAWAN_RxTimeout@minim+3,??_LORAWAN_RxTimeout+3
 11400  002880  0E0C               	movlw	12
 11401  002882                     u12195:
 11402  002882  90D8               	bcf	status,0,c
 11403  002884  0100               	movlb	0	; () banked
 11404  002886  37C2               	rlcf	??_LORAWAN_RxTimeout& (0+255),f,b
 11405  002888  37C3               	rlcf	(??_LORAWAN_RxTimeout+1)& (0+255),f,b
 11406  00288A  37C4               	rlcf	(??_LORAWAN_RxTimeout+2)& (0+255),f,b
 11407  00288C  37C5               	rlcf	(??_LORAWAN_RxTimeout+3)& (0+255),f,b
 11408  00288E  2EE8               	decfsz	wreg,f,c
 11409  002890  D7F8               	goto	u12195
 11410  002892  0E00               	movlw	0
 11411  002894  25C2               	addwf	??_LORAWAN_RxTimeout& (0+255),w,b
 11412  002896  6F60               	movwf	___lldiv@dividend& (0+255),b
 11413  002898  0E20               	movlw	32
 11414  00289A  21C3               	addwfc	(??_LORAWAN_RxTimeout+1)& (0+255),w,b
 11415  00289C  6F61               	movwf	(___lldiv@dividend+1)& (0+255),b
 11416  00289E  0E03               	movlw	3
 11417  0028A0  21C4               	addwfc	(??_LORAWAN_RxTimeout+2)& (0+255),w,b
 11418  0028A2  6F62               	movwf	(___lldiv@dividend+2)& (0+255),b
 11419  0028A4  0E00               	movlw	0
 11420  0028A6  21C5               	addwfc	(??_LORAWAN_RxTimeout+3)& (0+255),w,b
 11421  0028A8  6F63               	movwf	(___lldiv@dividend+3)& (0+255),b
 11422  0028AA  0E7D               	movlw	125
 11423  0028AC  6F64               	movwf	___lldiv@divisor& (0+255),b
 11424  0028AE  0E00               	movlw	0
 11425  0028B0  6F65               	movwf	(___lldiv@divisor+1)& (0+255),b
 11426  0028B2  0E00               	movlw	0
 11427  0028B4  6F66               	movwf	(___lldiv@divisor+2)& (0+255),b
 11428  0028B6  0E00               	movlw	0
 11429  0028B8  6F67               	movwf	(___lldiv@divisor+3)& (0+255),b
 11430  0028BA  ECE4  F03C         	call	___lldiv	;wreg free
 11431  0028BE  C060  F06D         	movff	?___lldiv,SwTimerSetTimeout@timeout
 11432  0028C2  C061  F06E         	movff	?___lldiv+1,SwTimerSetTimeout@timeout+1
 11433  0028C6  C062  F06F         	movff	?___lldiv+2,SwTimerSetTimeout@timeout+2
 11434  0028CA  C063  F070         	movff	?___lldiv+3,SwTimerSetTimeout@timeout+3
 11435  0028CE  0102               	movlb	2	; () banked
 11436  0028D0  51F4               	movf	(_loRa+234)& (0+255),w,b
 11437  0028D2  EC01  F045         	call	_SwTimerSetTimeout
 11438                           
 11439                           ;lorawan_eu.c: 545: SwTimerStart (loRa.unconfirmedRetransmisionTimerId);
 11440  0028D6  0102               	movlb	2	; () banked
 11441  0028D8  51F4               	movf	(_loRa+234)& (0+255),w,b
 11442  0028DA  ECB4  F03A         	call	_SwTimerStart
 11443                           
 11444                           ;lorawan_eu.c: 546: }
 11445                           ;lorawan_eu.c: 547: }
 11446  0028DE  0012               	return	
 11447  0028E0                     l1908:
 11448                           
 11449                           ;lorawan_eu.c: 548: else
 11450                           ;lorawan_eu.c: 549: {
 11451                           ;lorawan_eu.c: 550: ResetParametersForUnconfirmedTransmission ();
 11452  0028E0  ECB0  F049         	call	_ResetParametersForUnconfirmedTransmission	;wreg free
 11453                           
 11454                           ;lorawan_eu.c: 551: if (rxPayload.RxAppData != (0))
 11455  0028E4  0101               	movlb	1	; () banked
 11456  0028E6  510C               	movf	_rxPayload& (0+255),w,b
 11457  0028E8  110D               	iorwf	(_rxPayload+1)& (0+255),w,b
 11458  0028EA  B4D8               	btfsc	status,2,c
 11459  0028EC  0012               	return	
 11460                           
 11461                           ; BSR set to: 1
 11462                           ;lorawan_eu.c: 552: {
 11463                           ;lorawan_eu.c: 553: rxPayload.RxAppData((0), 0, MAC_OK);
 11464  0028EE  0E00               	movlw	0
 11465  0028F0  0100               	movlb	0	; () banked
 11466  0028F2  6F60               	movwf	RxData@pData& (0+255),b
 11467  0028F4  0E00               	movlw	0
 11468  0028F6  6F61               	movwf	(RxData@pData+1)& (0+255),b
 11469  0028F8  0E00               	movlw	0
 11470  0028FA  6F62               	movwf	RxData@dataLength& (0+255),b
 11471  0028FC  0E01               	movlw	1
 11472  0028FE  6F63               	movwf	RxData@status& (0+255),b
 11473  002900  D801               	call	u12218
 11474  002902  0012               	return	
 11475  002904                     u12218:
 11476  002904  0005               	push	
 11477  002906  6EFA               	movwf	pclath,c
 11478  002908  0101               	movlb	1	; () banked
 11479  00290A  510C               	movf	_rxPayload& (0+255),w,b
 11480  00290C  6EFD               	movwf	tosl,c
 11481  00290E  510D               	movf	(_rxPayload+1)& (0+255),w,b
 11482  002910  6EFE               	movwf	tosh,c
 11483  002912  6AFF               	clrf	tosu,c
 11484  002914  50FA               	movf	pclath,w,c
 11485  002916  0012               	return		;indir
 11486  002918                     l1894:
 11487                           
 11488                           ;lorawan_eu.c: 560: else
 11489                           ;lorawan_eu.c: 561: {
 11490                           ;lorawan_eu.c: 563: if (rxPayload.RxAppData != (0))
 11491  002918  0101               	movlb	1	; () banked
 11492  00291A  510C               	movf	_rxPayload& (0+255),w,b
 11493  00291C  110D               	iorwf	(_rxPayload+1)& (0+255),w,b
 11494  00291E  B4D8               	btfsc	status,2,c
 11495  002920  0012               	return	
 11496                           
 11497                           ; BSR set to: 1
 11498                           ;lorawan_eu.c: 564: {
 11499                           ;lorawan_eu.c: 565: rxPayload.RxAppData((0), 0, RADIO_NOT_OK);
 11500  002922  0E00               	movlw	0
 11501  002924  0100               	movlb	0	; () banked
 11502  002926  6F60               	movwf	RxData@pData& (0+255),b
 11503  002928  0E00               	movlw	0
 11504  00292A  6F61               	movwf	(RxData@pData+1)& (0+255),b
 11505  00292C  0E00               	movlw	0
 11506  00292E  6F62               	movwf	RxData@dataLength& (0+255),b
 11507  002930  0E02               	movlw	2
 11508  002932  6F63               	movwf	RxData@status& (0+255),b
 11509  002934  D801               	call	u12238
 11510  002936  0012               	return	
 11511  002938                     u12238:
 11512  002938  0005               	push	
 11513  00293A  6EFA               	movwf	pclath,c
 11514  00293C  0101               	movlb	1	; () banked
 11515  00293E  510C               	movf	_rxPayload& (0+255),w,b
 11516  002940  6EFD               	movwf	tosl,c
 11517  002942  510D               	movf	(_rxPayload+1)& (0+255),w,b
 11518  002944  6EFE               	movwf	tosh,c
 11519  002946  6AFF               	clrf	tosu,c
 11520  002948  50FA               	movf	pclath,w,c
 11521  00294A  0012               	return		;indir
 11522  00294C                     __end_of_LORAWAN_RxTimeout:
 11523                           	opt stack 0
 11524                           tosu	equ	0xFFF
 11525                           tosh	equ	0xFFE
 11526                           tosl	equ	0xFFD
 11527                           pclath	equ	0xFFA
 11528                           tblptru	equ	0xFF8
 11529                           tblptrh	equ	0xFF7
 11530                           tblptrl	equ	0xFF6
 11531                           tablat	equ	0xFF5
 11532                           prodh	equ	0xFF4
 11533                           prodl	equ	0xFF3
 11534                           intcon	equ	0xFF2
 11535                           intcon2	equ	0xFF1
 11536                           intcon3	equ	0xFF0
 11537                           postinc0	equ	0xFEE
 11538                           wreg	equ	0xFE8
 11539                           postinc1	equ	0xFE6
 11540                           postdec1	equ	0xFE5
 11541                           plusw1	equ	0xFE3
 11542                           fsr1h	equ	0xFE2
 11543                           fsr1l	equ	0xFE1
 11544                           indf2	equ	0xFDF
 11545                           postinc2	equ	0xFDE
 11546                           postdec2	equ	0xFDD
 11547                           fsr2h	equ	0xFDA
 11548                           fsr2l	equ	0xFD9
 11549                           status	equ	0xFD8
 11550                           
 11551 ;; *************** function _LORAWAN_RxDone *****************
 11552 ;; Defined at:
 11553 ;;		line 1121 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 11554 ;; Parameters:    Size  Location     Type
 11555 ;;  buffer          2  102[BANK1 ] PTR unsigned char 
 11556 ;;		 -> radioBuffer(271), LORAWAN_RxDone@hdr(2), 
 11557 ;;  bufferLength    1  104[BANK1 ] unsigned char 
 11558 ;; Auto vars:     Size  Location     Type
 11559 ;;  hdr             2  145[BANK0 ] PTR struct .
 11560 ;;		 -> radioBuffer(271), LORAWAN_RxDone@hdr(2), 
 11561 ;;  joinAccept      2  142[BANK0 ] PTR struct .
 11562 ;;		 -> radioBuffer(271), LORAWAN_RxDone@hdr(2), 
 11563 ;;  computedMic     4  138[BANK0 ] unsigned long 
 11564 ;;  extractedMic    4  130[BANK0 ] unsigned long 
 11565 ;;  packet          2  136[BANK0 ] PTR unsigned char 
 11566 ;;		 -> radioBuffer(271), LORAWAN_RxDone@hdr(2), NULL(0), 
 11567 ;;  frmPayloadLe    1  144[BANK0 ] unsigned char 
 11568 ;;  temp            1  135[BANK0 ] unsigned char 
 11569 ;;  bufferIndex     1  134[BANK0 ] unsigned char 
 11570 ;;  mhdr            1  129[BANK0 ] struct .
 11571 ;;  channelIndex    1  128[BANK0 ] unsigned char 
 11572 ;;  fPort           1  127[BANK0 ] unsigned char 
 11573 ;; Return value:  Size  Location     Type
 11574 ;;                  1    wreg      enum E7426
 11575 ;; Registers used:
 11576 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, btemp+8, btemp+9, btemp+10, btemp+11, to
      +sl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11577 ;; Tracked objects:
 11578 ;;		On entry : 0/0
 11579 ;;		On exit  : 0/0
 11580 ;;		Unchanged: 0/0
 11581 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11582 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11583 ;;      Locals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11584 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11585 ;;      Totals:         0      25       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11586 ;;Total ram usage:       28 bytes
 11587 ;; Hardware stack levels used:    1
 11588 ;; Hardware stack levels required when called:   15
 11589 ;; This function calls:
 11590 ;;		_AESCmac
 11591 ;;		_AESEncodeLoRa
 11592 ;;		_AssembleEncryptionBlock
 11593 ;;		_CheckFlags
 11594 ;;		_CheckMcastFlags
 11595 ;;		_ComputeMic
 11596 ;;		_ComputeSessionKeys
 11597 ;;		_EncryptFRMPayload
 11598 ;;		_ExtractMic
 11599 ;;		_LORAWAN_EnterContinuousReceive
 11600 ;;		_LORAWAN_Send
 11601 ;;		_MacExecuteCommands
 11602 ;;		_RADIO_GetStatus
 11603 ;;		_RADIO_ReleaseData
 11604 ;;		_RxData
 11605 ;;		_SearchAvailableChannel
 11606 ;;		_SetJoinFailState
 11607 ;;		_SetReceptionNotOkState
 11608 ;;		_StartReTxTimer
 11609 ;;		_SwTimerStop
 11610 ;;		_UpdateCfList
 11611 ;;		_UpdateDLSettings
 11612 ;;		_UpdateJoinSuccessState
 11613 ;;		_UpdateReceiveDelays
 11614 ;;		_UpdateRetransmissionAckTimeoutState
 11615 ;;		_memcpy
 11616 ;; This function is called by:
 11617 ;;		_RADIO_RxDone
 11618 ;;		_RADIO_FSKPayloadReady
 11619 ;; This function uses a non-reentrant model
 11620 ;;
 11621                           
 11622                           	psect	text62
 11623  0000D4                     __ptext62:
 11624                           	opt stack 0
 11625  0000D4                     _LORAWAN_RxDone:
 11626                           	opt stack 12
 11627                           
 11628                           ;lorawan.c: 1123: uint32_t computedMic, extractedMic;
 11629                           ;lorawan.c: 1124: Mhdr_t mhdr;
 11630                           ;lorawan.c: 1125: uint8_t fPort, bufferIndex, channelIndex;
 11631                           ;lorawan.c: 1126: uint8_t frmPayloadLength;
 11632                           ;lorawan.c: 1127: uint8_t *packet;
 11633                           ;lorawan.c: 1128: uint8_t temp;
 11634                           ;lorawan.c: 1130: RADIO_ReleaseData();
 11635                           
 11636                           ;incstack = 0
 11637  0000D4  ECB0  F04A         	call	_RADIO_ReleaseData	;wreg free
 11638                           
 11639                           ;lorawan.c: 1132: if (loRa.macStatus.macPause == 0)
 11640  0000D8  0102               	movlb	2	; () banked
 11641  0000DA  B10D               	btfsc	(_loRa+3)& (0+255),0,b
 11642  0000DC  EF89  F006         	goto	l1148
 11643                           
 11644                           ; BSR set to: 2
 11645                           ;lorawan.c: 1133: {
 11646                           ;lorawan.c: 1134: mhdr.value = buffer[0];
 11647  0000E0  C1F3  FFD9         	movff	LORAWAN_RxDone@buffer,fsr2l
 11648  0000E4  C1F4  FFDA         	movff	LORAWAN_RxDone@buffer+1,fsr2h
 11649  0000E8  50DF               	movf	indf2,w,c
 11650  0000EA  0100               	movlb	0	; () banked
 11651  0000EC  6FE1               	movwf	LORAWAN_RxDone@mhdr& (0+255),b
 11652                           
 11653                           ; BSR set to: 0
 11654                           ;lorawan.c: 1135: if ( (mhdr.bits.mType == FRAME_TYPE_JOIN_ACCEPT) && (loRa.activationPa
      +                          rameters.activationType == 0) )
 11655  0000EE  39E1               	swapf	LORAWAN_RxDone@mhdr& (0+255),w,b
 11656  0000F0  32E8               	rrcf	wreg,f,c
 11657  0000F2  0B07               	andlw	7
 11658  0000F4  06E8               	decf	wreg,f,c
 11659  0000F6  A4D8               	btfss	status,2,c
 11660  0000F8  D0D8               	goto	l1149
 11661                           
 11662                           ; BSR set to: 0
 11663  0000FA  0102               	movlb	2	; () banked
 11664  0000FC  5127               	movf	(_loRa+29)& (0+255),w,b
 11665  0000FE  A4D8               	btfss	status,2,c
 11666  000100  D0D4               	goto	l1149
 11667                           
 11668                           ; BSR set to: 2
 11669                           ;lorawan.c: 1136: {
 11670                           ;lorawan.c: 1137: temp = bufferLength - 1;
 11671  000102  0101               	movlb	1	; () banked
 11672  000104  05F5               	decf	LORAWAN_RxDone@bufferLength& (0+255),w,b
 11673  000106  0100               	movlb	0	; () banked
 11674  000108  D028               	goto	L6
 11675  00010A                     
 11676                           ; BSR set to: 0
 11677                           ;lorawan.c: 1139: {
 11678                           ;lorawan.c: 1141: AESEncodeLoRa (&buffer[bufferLength - temp], loRa.activationParameters
      +                          .applicationKey);
 11679                           
 11680                           ; BSR set to: 0
 11681  00010A  51E7               	movf	LORAWAN_RxDone@temp& (0+255),w,b
 11682  00010C  6FDA               	movwf	??_LORAWAN_RxDone& (0+255),b
 11683  00010E  6BDB               	clrf	(??_LORAWAN_RxDone+1)& (0+255),b
 11684  000110  1FDA               	comf	??_LORAWAN_RxDone& (0+255),f,b
 11685  000112  1FDB               	comf	(??_LORAWAN_RxDone+1)& (0+255),f,b
 11686  000114  4BDA               	infsnz	??_LORAWAN_RxDone& (0+255),f,b
 11687  000116  2BDB               	incf	(??_LORAWAN_RxDone+1)& (0+255),f,b
 11688  000118  0101               	movlb	1	; () banked
 11689  00011A  51F5               	movf	LORAWAN_RxDone@bufferLength& (0+255),w,b
 11690  00011C  0100               	movlb	0	; () banked
 11691  00011E  6FDC               	movwf	(??_LORAWAN_RxDone+2)& (0+255),b
 11692  000120  6BDD               	clrf	(??_LORAWAN_RxDone+3)& (0+255),b
 11693  000122  51DA               	movf	??_LORAWAN_RxDone& (0+255),w,b
 11694  000124  27DC               	addwf	(??_LORAWAN_RxDone+2)& (0+255),f,b
 11695  000126  51DB               	movf	(??_LORAWAN_RxDone+1)& (0+255),w,b
 11696  000128  23DD               	addwfc	(??_LORAWAN_RxDone+3)& (0+255),f,b
 11697  00012A  51DC               	movf	(??_LORAWAN_RxDone+2)& (0+255),w,b
 11698  00012C  0101               	movlb	1	; () banked
 11699  00012E  25F3               	addwf	LORAWAN_RxDone@buffer& (0+255),w,b
 11700  000130  0100               	movlb	0	; () banked
 11701  000132  6F7D               	movwf	AESEncodeLoRa@block& (0+255),b
 11702  000134  51DD               	movf	(??_LORAWAN_RxDone+3)& (0+255),w,b
 11703  000136  0101               	movlb	1	; () banked
 11704  000138  21F4               	addwfc	(LORAWAN_RxDone@buffer+1)& (0+255),w,b
 11705  00013A  0100               	movlb	0	; () banked
 11706  00013C  6F7E               	movwf	(AESEncodeLoRa@block+1)& (0+255),b
 11707  00013E  0E4C               	movlw	low (_loRa+66)
 11708  000140  6F7F               	movwf	AESEncodeLoRa@key& (0+255),b
 11709  000142  0E02               	movlw	high (_loRa+66)
 11710  000144  6F80               	movwf	(AESEncodeLoRa@key+1)& (0+255),b
 11711  000146  EC1E  F046         	call	_AESEncodeLoRa	;wreg free
 11712                           
 11713                           ;lorawan.c: 1142: if (temp > 16)
 11714  00014A  0E10               	movlw	16
 11715  00014C  0100               	movlb	0	; () banked
 11716  00014E  65E7               	cpfsgt	LORAWAN_RxDone@temp& (0+255),b
 11717  000150  D003               	goto	l1152
 11718                           
 11719                           ; BSR set to: 0
 11720                           ;lorawan.c: 1143: {
 11721                           ;lorawan.c: 1144: temp -= 16;
 11722  000152  0E10               	movlw	16
 11723  000154  5FE7               	subwf	LORAWAN_RxDone@temp& (0+255),f,b
 11724                           
 11725                           ;lorawan.c: 1145: }
 11726  000156  D002               	goto	l1153
 11727  000158                     l1152:
 11728                           
 11729                           ; BSR set to: 0
 11730                           ;lorawan.c: 1146: else
 11731                           ;lorawan.c: 1147: {
 11732                           ;lorawan.c: 1148: temp = 0;
 11733                           
 11734                           ; BSR set to: 0
 11735  000158  0E00               	movlw	0
 11736  00015A                     L6:
 11737  00015A  6FE7               	movwf	LORAWAN_RxDone@temp& (0+255),b
 11738  00015C                     l1153:
 11739                           
 11740                           ; BSR set to: 0
 11741                           
 11742                           ; BSR set to: 0
 11743  00015C  51E7               	movf	LORAWAN_RxDone@temp& (0+255),w,b
 11744  00015E  A4D8               	btfss	status,2,c
 11745  000160  D7D4               	goto	l1151
 11746                           
 11747                           ; BSR set to: 0
 11748                           ;lorawan.c: 1149: }
 11749                           ;lorawan.c: 1150: }
 11750                           ;lorawan.c: 1153: computedMic = ComputeMic (loRa.activationParameters.applicationKey, bu
      +                          ffer, bufferLength - sizeof(extractedMic));
 11751                           
 11752                           ; BSR set to: 0
 11753  000162  0E4C               	movlw	low (_loRa+66)
 11754  000164  6FC7               	movwf	ComputeMic@key& (0+255),b
 11755  000166  0E02               	movlw	high (_loRa+66)
 11756  000168  6FC8               	movwf	(ComputeMic@key+1)& (0+255),b
 11757  00016A  C1F3  F0C9         	movff	LORAWAN_RxDone@buffer,ComputeMic@buffer
 11758  00016E  C1F4  F0CA         	movff	LORAWAN_RxDone@buffer+1,ComputeMic@buffer+1
 11759  000172  0101               	movlb	1	; () banked
 11760  000174  51F5               	movf	LORAWAN_RxDone@bufferLength& (0+255),w,b
 11761  000176  0FFC               	addlw	252
 11762  000178  0100               	movlb	0	; () banked
 11763  00017A  6FCB               	movwf	ComputeMic@bufferLength& (0+255),b
 11764  00017C  EC74  F040         	call	_ComputeMic	;wreg free
 11765  000180  C0C7  F0EA         	movff	?_ComputeMic,LORAWAN_RxDone@computedMic
 11766  000184  C0C8  F0EB         	movff	?_ComputeMic+1,LORAWAN_RxDone@computedMic+1
 11767  000188  C0C9  F0EC         	movff	?_ComputeMic+2,LORAWAN_RxDone@computedMic+2
 11768  00018C  C0CA  F0ED         	movff	?_ComputeMic+3,LORAWAN_RxDone@computedMic+3
 11769                           
 11770                           ;lorawan.c: 1154: extractedMic = ExtractMic (buffer, bufferLength);
 11771  000190  C1F3  F06B         	movff	LORAWAN_RxDone@buffer,ExtractMic@buffer
 11772  000194  C1F4  F06C         	movff	LORAWAN_RxDone@buffer+1,ExtractMic@buffer+1
 11773  000198  C1F5  F06D         	movff	LORAWAN_RxDone@bufferLength,ExtractMic@bufferLength
 11774  00019C  EC20  F042         	call	_ExtractMic	;wreg free
 11775  0001A0  C06B  F0E2         	movff	?_ExtractMic,LORAWAN_RxDone@extractedMic
 11776  0001A4  C06C  F0E3         	movff	?_ExtractMic+1,LORAWAN_RxDone@extractedMic+1
 11777  0001A8  C06D  F0E4         	movff	?_ExtractMic+2,LORAWAN_RxDone@extractedMic+2
 11778  0001AC  C06E  F0E5         	movff	?_ExtractMic+3,LORAWAN_RxDone@extractedMic+3
 11779                           
 11780                           ;lorawan.c: 1155: if (extractedMic != computedMic)
 11781  0001B0  0100               	movlb	0	; () banked
 11782  0001B2  51EA               	movf	LORAWAN_RxDone@computedMic& (0+255),w,b
 11783  0001B4  19E2               	xorwf	LORAWAN_RxDone@extractedMic& (0+255),w,b
 11784  0001B6  E10A               	bnz	u11290
 11785  0001B8  51EB               	movf	(LORAWAN_RxDone@computedMic+1)& (0+255),w,b
 11786  0001BA  19E3               	xorwf	(LORAWAN_RxDone@extractedMic+1)& (0+255),w,b
 11787  0001BC  E107               	bnz	u11290
 11788  0001BE  51EC               	movf	(LORAWAN_RxDone@computedMic+2)& (0+255),w,b
 11789  0001C0  19E4               	xorwf	(LORAWAN_RxDone@extractedMic+2)& (0+255),w,b
 11790  0001C2  E104               	bnz	u11290
 11791  0001C4  51ED               	movf	(LORAWAN_RxDone@computedMic+3)& (0+255),w,b
 11792  0001C6  19E5               	xorwf	(LORAWAN_RxDone@extractedMic+3)& (0+255),w,b
 11793  0001C8  B4D8               	btfsc	status,2,c
 11794  0001CA  D011               	goto	l1155
 11795  0001CC                     u11290:
 11796                           
 11797                           ; BSR set to: 0
 11798                           ;lorawan.c: 1156: {
 11799                           ;lorawan.c: 1157: if ((loRa.macStatus.macState == RX2_OPEN) || ((loRa.macStatus.macState
      +                           == RX1_OPEN) && (loRa.rx2DelayExpired)))
 11800  0001CC  0102               	movlb	2	; () banked
 11801  0001CE  510C               	movf	(_loRa+2)& (0+255),w,b
 11802  0001D0  0B0F               	andlw	15
 11803  0001D2  0A05               	xorlw	5
 11804  0001D4  B4D8               	btfsc	status,2,c
 11805  0001D6  D008               	goto	u11320
 11806                           
 11807                           ; BSR set to: 2
 11808  0001D8  510C               	movf	(_loRa+2)& (0+255),w,b
 11809  0001DA  0B0F               	andlw	15
 11810  0001DC  0A03               	xorlw	3
 11811  0001DE  A4D8               	btfss	status,2,c
 11812  0001E0  0012               	return	
 11813                           
 11814                           ; BSR set to: 2
 11815  0001E2  51FB               	movf	(_loRa+241)& (0+255),w,b
 11816  0001E4  B4D8               	btfsc	status,2,c
 11817  0001E6  0012               	return	
 11818  0001E8                     u11320:
 11819                           
 11820                           ; BSR set to: 2
 11821                           ;lorawan.c: 1158: {
 11822                           ;lorawan.c: 1159: SetJoinFailState();
 11823                           
 11824                           ; BSR set to: 2
 11825  0001E8  EC84  F046         	call	_SetJoinFailState	;wreg free
 11826                           
 11827                           ;lorawan.c: 1160: }
 11828                           ;lorawan.c: 1162: return INVALID_PARAMETER;
 11829                           ;	Return value of _LORAWAN_RxDone is never used
 11830  0001EC  0012               	return	
 11831  0001EE                     l1155:
 11832                           
 11833                           ;lorawan.c: 1163: }
 11834                           ;lorawan.c: 1166: if (loRa.macStatus.macState == RX1_OPEN)
 11835  0001EE  0102               	movlb	2	; () banked
 11836  0001F0  510C               	movf	(_loRa+2)& (0+255),w,b
 11837  0001F2  0B0F               	andlw	15
 11838  0001F4  0A03               	xorlw	3
 11839  0001F6  A4D8               	btfss	status,2,c
 11840  0001F8  D003               	goto	l1160
 11841                           
 11842                           ; BSR set to: 2
 11843                           ;lorawan.c: 1167: {
 11844                           ;lorawan.c: 1168: SwTimerStop (loRa.joinAccept2TimerId);
 11845  0001FA  51ED               	movf	(_loRa+227)& (0+255),w,b
 11846  0001FC  ECFB  F047         	call	_SwTimerStop
 11847  000200                     l1160:
 11848                           
 11849                           ;lorawan.c: 1169: }
 11850                           ;lorawan.c: 1171: JoinAccept_t *joinAccept;
 11851                           ;lorawan.c: 1172: joinAccept = (JoinAccept_t*)buffer;
 11852  000200  C1F3  F0EE         	movff	LORAWAN_RxDone@buffer,LORAWAN_RxDone@joinAccept
 11853  000204  C1F4  F0EF         	movff	LORAWAN_RxDone@buffer+1,LORAWAN_RxDone@joinAccept+1
 11854                           
 11855                           ;lorawan.c: 1174: loRa.activationParameters.deviceAddress.value = joinAccept->members.de
      +                          viceAddress.value;
 11856  000208  0100               	movlb	0	; () banked
 11857  00020A  EE20 F007          	lfsr	2,7
 11858  00020E  51EE               	movf	LORAWAN_RxDone@joinAccept& (0+255),w,b
 11859  000210  26D9               	addwf	fsr2l,f,c
 11860  000212  51EF               	movf	(LORAWAN_RxDone@joinAccept+1)& (0+255),w,b
 11861  000214  22DA               	addwfc	fsr2h,f,c
 11862  000216  CFDE F228          	movff	postinc2,_loRa+30
 11863  00021A  CFDE F229          	movff	postinc2,_loRa+31
 11864  00021E  CFDE F22A          	movff	postinc2,_loRa+32
 11865  000222  CFDE F22B          	movff	postinc2,_loRa+33
 11866                           
 11867                           ; BSR set to: 0
 11868                           ;lorawan.c: 1176: UpdateReceiveDelays (joinAccept->members.rxDelay & 0x0F);
 11869  000226  EE20 F00C          	lfsr	2,12
 11870  00022A  51EE               	movf	LORAWAN_RxDone@joinAccept& (0+255),w,b
 11871  00022C  26D9               	addwf	fsr2l,f,c
 11872  00022E  51EF               	movf	(LORAWAN_RxDone@joinAccept+1)& (0+255),w,b
 11873  000230  22DA               	addwfc	fsr2h,f,c
 11874  000232  50DF               	movf	indf2,w,c
 11875  000234  0B0F               	andlw	15
 11876  000236  EC45  F045         	call	_UpdateReceiveDelays
 11877                           
 11878                           ;lorawan.c: 1178: UpdateDLSettings(joinAccept->members.DLSettings.bits.rx2DataRate, join
      +                          Accept->members.DLSettings.bits.rx1DROffset);
 11879  00023A  0100               	movlb	0	; () banked
 11880  00023C  EE20 F00B          	lfsr	2,11
 11881  000240  51EE               	movf	LORAWAN_RxDone@joinAccept& (0+255),w,b
 11882  000242  26D9               	addwf	fsr2l,f,c
 11883  000244  51EF               	movf	(LORAWAN_RxDone@joinAccept+1)& (0+255),w,b
 11884  000246  22DA               	addwfc	fsr2h,f,c
 11885  000248  38DF               	swapf	223,w,c
 11886  00024A  0B07               	andlw	7
 11887  00024C  6F60               	movwf	UpdateDLSettings@dlRx1DrOffset& (0+255),b
 11888  00024E  EE20 F00B          	lfsr	2,11
 11889  000252  51EE               	movf	LORAWAN_RxDone@joinAccept& (0+255),w,b
 11890  000254  26D9               	addwf	fsr2l,f,c
 11891  000256  51EF               	movf	(LORAWAN_RxDone@joinAccept+1)& (0+255),w,b
 11892  000258  22DA               	addwfc	fsr2h,f,c
 11893  00025A  50DF               	movf	223,w,c
 11894  00025C  0B0F               	andlw	15
 11895  00025E  EC3D  F049         	call	_UpdateDLSettings
 11896                           
 11897                           ;lorawan.c: 1180: UpdateCfList (bufferLength, joinAccept);
 11898  000262  C0EE  F0A6         	movff	LORAWAN_RxDone@joinAccept,UpdateCfList@joinAccept
 11899  000266  C0EF  F0A7         	movff	LORAWAN_RxDone@joinAccept+1,UpdateCfList@joinAccept+1
 11900  00026A  0101               	movlb	1	; () banked
 11901  00026C  51F5               	movf	LORAWAN_RxDone@bufferLength& (0+255),w,b
 11902  00026E  EC35  F023         	call	_UpdateCfList
 11903                           
 11904                           ;lorawan.c: 1182: ComputeSessionKeys (joinAccept);
 11905  000272  C0EE  F091         	movff	LORAWAN_RxDone@joinAccept,ComputeSessionKeys@joinAcceptBuffer
 11906  000276  C0EF  F092         	movff	LORAWAN_RxDone@joinAccept+1,ComputeSessionKeys@joinAcceptBuffer+1
 11907  00027A  ECA1  F03C         	call	_ComputeSessionKeys	;wreg free
 11908                           
 11909                           ;lorawan.c: 1184: UpdateJoinSuccessState(0);
 11910  00027E  0E00               	movlw	0
 11911  000280  6EE6               	movwf	postinc1,c
 11912  000282  ECEA  F02D         	call	_UpdateJoinSuccessState	;wreg free
 11913                           
 11914                           ;lorawan.c: 1186: loRa.fCntUp.value = 0;
 11915  000286  0E00               	movlw	0
 11916  000288  0102               	movlb	2	; () banked
 11917  00028A  6F10               	movwf	(_loRa+6)& (0+255),b
 11918  00028C  0E00               	movlw	0
 11919  00028E  6F11               	movwf	(_loRa+7)& (0+255),b
 11920  000290  0E00               	movlw	0
 11921  000292  6F12               	movwf	(_loRa+8)& (0+255),b
 11922  000294  0E00               	movlw	0
 11923  000296  6F13               	movwf	(_loRa+9)& (0+255),b
 11924                           
 11925                           ; BSR set to: 2
 11926                           ;lorawan.c: 1187: loRa.fCntDown.value = 0;
 11927  000298  0E00               	movlw	0
 11928  00029A  6F14               	movwf	(_loRa+10)& (0+255),b
 11929  00029C  0E00               	movlw	0
 11930  00029E  6F15               	movwf	(_loRa+11)& (0+255),b
 11931  0002A0  0E00               	movlw	0
 11932  0002A2  6F16               	movwf	(_loRa+12)& (0+255),b
 11933  0002A4  0E00               	movlw	0
 11934  0002A6  6F17               	movwf	(_loRa+13)& (0+255),b
 11935                           
 11936                           ; BSR set to: 2
 11937                           ;lorawan.c: 1190: }
 11938                           
 11939                           ; BSR set to: 2
 11940                           ;lorawan.c: 1189: return OK;
 11941                           ;	Return value of _LORAWAN_RxDone is never used
 11942  0002A8  0012               	return	
 11943  0002AA                     l1149:
 11944                           
 11945                           ;lorawan.c: 1191: else if ( (mhdr.bits.mType == FRAME_TYPE_DATA_UNCONFIRMED_DOWN) || (mh
      +                          dr.bits.mType == FRAME_TYPE_DATA_CONFIRMED_DOWN) )
 11946                           
 11947                           ; BSR set to: 2
 11948  0002AA  0100               	movlb	0	; () banked
 11949  0002AC  39E1               	swapf	LORAWAN_RxDone@mhdr& (0+255),w,b
 11950  0002AE  32E8               	rrcf	wreg,f,c
 11951  0002B0  0B07               	andlw	7
 11952  0002B2  0A03               	xorlw	3
 11953  0002B4  B4D8               	btfsc	status,2,c
 11954  0002B6  D007               	goto	u11350
 11955                           
 11956                           ; BSR set to: 0
 11957  0002B8  39E1               	swapf	LORAWAN_RxDone@mhdr& (0+255),w,b
 11958  0002BA  32E8               	rrcf	wreg,f,c
 11959  0002BC  0B07               	andlw	7
 11960  0002BE  0A05               	xorlw	5
 11961  0002C0  A4D8               	btfss	status,2,c
 11962  0002C2  EF86  F006         	goto	l1162
 11963  0002C6                     u11350:
 11964                           
 11965                           ; BSR set to: 0
 11966                           ;lorawan.c: 1192: {
 11967                           ;lorawan.c: 1193: loRa.crtMacCmdIndex = 0;
 11968                           
 11969                           ; BSR set to: 0
 11970  0002C6  0E00               	movlw	0
 11971  0002C8  0102               	movlb	2	; () banked
 11972  0002CA  6FB1               	movwf	(_loRa+167)& (0+255),b
 11973                           
 11974                           ; BSR set to: 2
 11975                           ;lorawan.c: 1195: Hdr_t *hdr;
 11976                           ;lorawan.c: 1196: hdr=(Hdr_t*)buffer;
 11977  0002CC  C1F3  F0F1         	movff	LORAWAN_RxDone@buffer,LORAWAN_RxDone@hdr
 11978  0002D0  C1F4  F0F2         	movff	LORAWAN_RxDone@buffer+1,LORAWAN_RxDone@hdr+1
 11979                           
 11980                           ; BSR set to: 2
 11981                           ;lorawan.c: 1199: if ( (CLASS_C == loRa.deviceClass) && (hdr->members.devAddr.value == l
      +                          oRa.activationParameters.mcastDeviceAddress.value) && (1 == loRa.macStatus.mcastEnable) 
      +                          )
 11982  0002D4  0E02               	movlw	2
 11983  0002D6  191C               	xorwf	(_loRa+18)& (0+255),w,b
 11984  0002D8  A4D8               	btfss	status,2,c
 11985  0002DA  D210               	goto	l1165
 11986                           
 11987                           ; BSR set to: 2
 11988  0002DC  0100               	movlb	0	; () banked
 11989  0002DE  EE20 F001          	lfsr	2,1
 11990  0002E2  51F1               	movf	LORAWAN_RxDone@hdr& (0+255),w,b
 11991  0002E4  26D9               	addwf	fsr2l,f,c
 11992  0002E6  51F2               	movf	(LORAWAN_RxDone@hdr+1)& (0+255),w,b
 11993  0002E8  22DA               	addwfc	fsr2h,f,c
 11994  0002EA  0102               	movlb	2	; () banked
 11995  0002EC  516C               	movf	(_loRa+98)& (0+255),w,b
 11996  0002EE  18DE               	xorwf	postinc2,w,c
 11997  0002F0  E109               	bnz	u11371
 11998  0002F2  516D               	movf	(_loRa+99)& (0+255),w,b
 11999  0002F4  18DE               	xorwf	postinc2,w,c
 12000  0002F6  E106               	bnz	u11371
 12001  0002F8  516E               	movf	(_loRa+100)& (0+255),w,b
 12002  0002FA  18DE               	xorwf	postinc2,w,c
 12003  0002FC  E103               	bnz	u11371
 12004  0002FE  516F               	movf	(_loRa+101)& (0+255),w,b
 12005  000300  18DE               	xorwf	postinc2,w,c
 12006  000302  A4D8               	btfss	status,2,c
 12007  000304                     u11371:
 12008  000304  D1FB               	goto	l1165
 12009                           
 12010                           ; BSR set to: 2
 12011  000306  A50E               	btfss	(_loRa+4)& (0+255),2,b
 12012  000308  D1F9               	goto	l1165
 12013                           
 12014                           ; BSR set to: 2
 12015                           ;lorawan.c: 1200: {
 12016                           ;lorawan.c: 1202: if (0 == CheckMcastFlags(hdr))
 12017  00030A  C0F1  F060         	movff	LORAWAN_RxDone@hdr,CheckMcastFlags@hdr
 12018  00030E  C0F2  F061         	movff	LORAWAN_RxDone@hdr+1,CheckMcastFlags@hdr+1
 12019  000312  EC26  F03D         	call	_CheckMcastFlags	;wreg free
 12020  000316  0900               	iorlw	0
 12021  000318  A4D8               	btfss	status,2,c
 12022  00031A  D008               	goto	l1166
 12023                           
 12024                           ;lorawan.c: 1203: {
 12025                           ;lorawan.c: 1204: loRa.macStatus.macState = CLASS_C_RX2_2_OPEN;
 12026  00031C  0102               	movlb	2	; () banked
 12027  00031E  510C               	movf	(_loRa+2)& (0+255),w,b
 12028  000320  0BF0               	andlw	-16
 12029  000322  0909               	iorlw	9
 12030  000324  6F0C               	movwf	(_loRa+2)& (0+255),b
 12031                           
 12032                           ; BSR set to: 2
 12033                           ;lorawan.c: 1205: LORAWAN_EnterContinuousReceive();
 12034  000326  ECE6  F03D         	call	_LORAWAN_EnterContinuousReceive	;wreg free
 12035                           
 12036                           ;lorawan.c: 1206: return MCAST_MSG_ERROR;
 12037                           ;	Return value of _LORAWAN_RxDone is never used
 12038  00032A  0012               	return	
 12039  00032C                     l1166:
 12040                           
 12041                           ;lorawan.c: 1207: }
 12042                           ;lorawan.c: 1209: AssembleEncryptionBlock (1, hdr->members.fCnt, bufferLength - sizeof (
      +                          computedMic), 0x49, 1);
 12043  00032C  0100               	movlb	0	; () banked
 12044  00032E  EE20 F006          	lfsr	2,6
 12045  000332  51F1               	movf	LORAWAN_RxDone@hdr& (0+255),w,b
 12046  000334  26D9               	addwf	fsr2l,f,c
 12047  000336  51F2               	movf	(LORAWAN_RxDone@hdr+1)& (0+255),w,b
 12048  000338  22DA               	addwfc	fsr2h,f,c
 12049  00033A  CFDE F0DA          	movff	postinc2,??_LORAWAN_RxDone
 12050  00033E  CFDD F0DB          	movff	postdec2,??_LORAWAN_RxDone+1
 12051  000342  C0DA  F06B         	movff	??_LORAWAN_RxDone,AssembleEncryptionBlock@frameCounter
 12052  000346  C0DB  F06C         	movff	??_LORAWAN_RxDone+1,AssembleEncryptionBlock@frameCounter+1
 12053  00034A  6B6D               	clrf	(AssembleEncryptionBlock@frameCounter+2)& (0+255),b
 12054  00034C  6B6E               	clrf	(AssembleEncryptionBlock@frameCounter+3)& (0+255),b
 12055  00034E  0101               	movlb	1	; () banked
 12056  000350  51F5               	movf	LORAWAN_RxDone@bufferLength& (0+255),w,b
 12057  000352  0FFC               	addlw	252
 12058  000354  0100               	movlb	0	; () banked
 12059  000356  6F6F               	movwf	AssembleEncryptionBlock@blockId& (0+255),b
 12060  000358  0E49               	movlw	73
 12061  00035A  6F70               	movwf	AssembleEncryptionBlock@firstByte& (0+255),b
 12062  00035C  0E01               	movlw	1
 12063  00035E  6F71               	movwf	AssembleEncryptionBlock@multicastStatus& (0+255),b
 12064  000360  0E01               	movlw	1
 12065  000362  ECD6  F032         	call	_AssembleEncryptionBlock
 12066                           
 12067                           ;lorawan.c: 1210: memcpy (&radioBuffer[0], aesBuffer, sizeof (aesBuffer));
 12068  000366  0E80               	movlw	low _radioBuffer
 12069  000368  0100               	movlb	0	; () banked
 12070  00036A  6F60               	movwf	memcpy@d1& (0+255),b
 12071  00036C  0E05               	movlw	high _radioBuffer
 12072  00036E  6F61               	movwf	(memcpy@d1+1)& (0+255),b
 12073  000370  0EA0               	movlw	low _aesBuffer
 12074  000372  6F62               	movwf	memcpy@s1& (0+255),b
 12075  000374  0E03               	movlw	high _aesBuffer
 12076  000376  6F63               	movwf	(memcpy@s1+1)& (0+255),b
 12077  000378  0E00               	movlw	0
 12078  00037A  6F65               	movwf	(memcpy@n+1)& (0+255),b
 12079  00037C  0E10               	movlw	16
 12080  00037E  6F64               	movwf	memcpy@n& (0+255),b
 12081  000380  EC37  F041         	call	_memcpy	;wreg free
 12082                           
 12083                           ;lorawan.c: 1211: memcpy (&radioBuffer[16], buffer, bufferLength-sizeof(computedMic));
 12084  000384  0E90               	movlw	low (_radioBuffer+16)
 12085  000386  0100               	movlb	0	; () banked
 12086  000388  6F60               	movwf	memcpy@d1& (0+255),b
 12087  00038A  0E05               	movlw	high (_radioBuffer+16)
 12088  00038C  6F61               	movwf	(memcpy@d1+1)& (0+255),b
 12089  00038E  C1F3  F062         	movff	LORAWAN_RxDone@buffer,memcpy@s1
 12090  000392  C1F4  F063         	movff	LORAWAN_RxDone@buffer+1,memcpy@s1+1
 12091  000396  0EFC               	movlw	252
 12092  000398  0101               	movlb	1	; () banked
 12093  00039A  25F5               	addwf	LORAWAN_RxDone@bufferLength& (0+255),w,b
 12094  00039C  0100               	movlb	0	; () banked
 12095  00039E  6F64               	movwf	memcpy@n& (0+255),b
 12096  0003A0  6B65               	clrf	(memcpy@n+1)& (0+255),b
 12097  0003A2  0EFF               	movlw	255
 12098  0003A4  2365               	addwfc	(memcpy@n+1)& (0+255),f,b
 12099  0003A6  EC37  F041         	call	_memcpy	;wreg free
 12100                           
 12101                           ;lorawan.c: 1212: AESCmac(loRa.activationParameters.mcastNetworkSessionKey, aesBuffer, &
      +                          radioBuffer[0], bufferLength - sizeof(computedMic) + sizeof (aesBuffer));
 12102  0003AA  0E70               	movlw	low (_loRa+102)
 12103  0003AC  0100               	movlb	0	; () banked
 12104  0003AE  6FB9               	movwf	AESCmac@key& (0+255),b
 12105  0003B0  0E02               	movlw	high (_loRa+102)
 12106  0003B2  6FBA               	movwf	(AESCmac@key+1)& (0+255),b
 12107  0003B4  0EA0               	movlw	low _aesBuffer
 12108  0003B6  6FBB               	movwf	AESCmac@output& (0+255),b
 12109  0003B8  0E03               	movlw	high _aesBuffer
 12110  0003BA  6FBC               	movwf	(AESCmac@output+1)& (0+255),b
 12111  0003BC  0E80               	movlw	low _radioBuffer
 12112  0003BE  6FBD               	movwf	AESCmac@input& (0+255),b
 12113  0003C0  0E05               	movlw	high _radioBuffer
 12114  0003C2  6FBE               	movwf	(AESCmac@input+1)& (0+255),b
 12115  0003C4  0101               	movlb	1	; () banked
 12116  0003C6  51F5               	movf	LORAWAN_RxDone@bufferLength& (0+255),w,b
 12117  0003C8  0F0C               	addlw	12
 12118  0003CA  0100               	movlb	0	; () banked
 12119  0003CC  6FBF               	movwf	AESCmac@size& (0+255),b
 12120  0003CE  EC1F  F011         	call	_AESCmac	;wreg free
 12121                           
 12122                           ;lorawan.c: 1214: memcpy(&computedMic, aesBuffer, sizeof(computedMic));
 12123  0003D2  0EEA               	movlw	low LORAWAN_RxDone@computedMic
 12124  0003D4  0100               	movlb	0	; () banked
 12125  0003D6  6F60               	movwf	memcpy@d1& (0+255),b
 12126  0003D8  0E00               	movlw	high LORAWAN_RxDone@computedMic
 12127  0003DA  6F61               	movwf	(memcpy@d1+1)& (0+255),b
 12128  0003DC  0EA0               	movlw	low _aesBuffer
 12129  0003DE  6F62               	movwf	memcpy@s1& (0+255),b
 12130  0003E0  0E03               	movlw	high _aesBuffer
 12131  0003E2  6F63               	movwf	(memcpy@s1+1)& (0+255),b
 12132  0003E4  0E00               	movlw	0
 12133  0003E6  6F65               	movwf	(memcpy@n+1)& (0+255),b
 12134  0003E8  0E04               	movlw	4
 12135  0003EA  6F64               	movwf	memcpy@n& (0+255),b
 12136  0003EC  EC37  F041         	call	_memcpy	;wreg free
 12137                           
 12138                           ;lorawan.c: 1215: extractedMic = ExtractMic (&buffer[0], bufferLength);
 12139  0003F0  C1F3  F06B         	movff	LORAWAN_RxDone@buffer,ExtractMic@buffer
 12140  0003F4  C1F4  F06C         	movff	LORAWAN_RxDone@buffer+1,ExtractMic@buffer+1
 12141  0003F8  C1F5  F06D         	movff	LORAWAN_RxDone@bufferLength,ExtractMic@bufferLength
 12142  0003FC  EC20  F042         	call	_ExtractMic	;wreg free
 12143  000400  C06B  F0E2         	movff	?_ExtractMic,LORAWAN_RxDone@extractedMic
 12144  000404  C06C  F0E3         	movff	?_ExtractMic+1,LORAWAN_RxDone@extractedMic+1
 12145  000408  C06D  F0E4         	movff	?_ExtractMic+2,LORAWAN_RxDone@extractedMic+2
 12146  00040C  C06E  F0E5         	movff	?_ExtractMic+3,LORAWAN_RxDone@extractedMic+3
 12147                           
 12148                           ;lorawan.c: 1217: if (computedMic != extractedMic)
 12149  000410  0100               	movlb	0	; () banked
 12150  000412  51E2               	movf	LORAWAN_RxDone@extractedMic& (0+255),w,b
 12151  000414  19EA               	xorwf	LORAWAN_RxDone@computedMic& (0+255),w,b
 12152  000416  E10A               	bnz	u11400
 12153  000418  51E3               	movf	(LORAWAN_RxDone@extractedMic+1)& (0+255),w,b
 12154  00041A  19EB               	xorwf	(LORAWAN_RxDone@computedMic+1)& (0+255),w,b
 12155  00041C  E107               	bnz	u11400
 12156  00041E  51E4               	movf	(LORAWAN_RxDone@extractedMic+2)& (0+255),w,b
 12157  000420  19EC               	xorwf	(LORAWAN_RxDone@computedMic+2)& (0+255),w,b
 12158  000422  E104               	bnz	u11400
 12159  000424  51E5               	movf	(LORAWAN_RxDone@extractedMic+3)& (0+255),w,b
 12160  000426  19ED               	xorwf	(LORAWAN_RxDone@computedMic+3)& (0+255),w,b
 12161  000428  B4D8               	btfsc	status,2,c
 12162  00042A  D008               	goto	l1167
 12163  00042C                     u11400:
 12164                           
 12165                           ; BSR set to: 0
 12166                           ;lorawan.c: 1218: {
 12167                           ;lorawan.c: 1219: loRa.macStatus.macState = CLASS_C_RX2_2_OPEN;
 12168  00042C  0102               	movlb	2	; () banked
 12169  00042E  510C               	movf	(_loRa+2)& (0+255),w,b
 12170  000430  0BF0               	andlw	-16
 12171  000432  0909               	iorlw	9
 12172  000434  6F0C               	movwf	(_loRa+2)& (0+255),b
 12173                           
 12174                           ; BSR set to: 2
 12175                           ;lorawan.c: 1220: LORAWAN_EnterContinuousReceive();
 12176  000436  ECE6  F03D         	call	_LORAWAN_EnterContinuousReceive	;wreg free
 12177                           
 12178                           ;lorawan.c: 1221: return MCAST_MSG_ERROR;
 12179                           ;	Return value of _LORAWAN_RxDone is never used
 12180  00043A  0012               	return	
 12181  00043C                     l1167:
 12182                           
 12183                           ;lorawan.c: 1222: }
 12184                           ;lorawan.c: 1224: if (hdr->members.fCnt >= loRa.fMcastCntDown.members.valueLow)
 12185  00043C  0100               	movlb	0	; () banked
 12186  00043E  EE20 F006          	lfsr	2,6
 12187  000442  51F1               	movf	LORAWAN_RxDone@hdr& (0+255),w,b
 12188  000444  26D9               	addwf	fsr2l,f,c
 12189  000446  51F2               	movf	(LORAWAN_RxDone@hdr+1)& (0+255),w,b
 12190  000448  22DA               	addwfc	fsr2h,f,c
 12191  00044A  0102               	movlb	2	; () banked
 12192  00044C  5118               	movf	(_loRa+14)& (0+255),w,b
 12193  00044E  5CDE               	subwf	postinc2,w,c
 12194  000450  5119               	movf	(_loRa+15)& (0+255),w,b
 12195  000452  58DE               	subwfb	postinc2,w,c
 12196  000454  A0D8               	btfss	status,0,c
 12197  000456  D050               	goto	l1168
 12198                           
 12199                           ; BSR set to: 2
 12200                           ;lorawan.c: 1225: {
 12201                           ;lorawan.c: 1226: if ( (hdr->members.fCnt - loRa.fMcastCntDown.members.valueLow) > loRa.
      +                          protocolParameters.maxMultiFcntGap )
 12202  000458  0100               	movlb	0	; () banked
 12203  00045A  EE20 F006          	lfsr	2,6
 12204  00045E  51F1               	movf	LORAWAN_RxDone@hdr& (0+255),w,b
 12205  000460  26D9               	addwf	fsr2l,f,c
 12206  000462  51F2               	movf	(LORAWAN_RxDone@hdr+1)& (0+255),w,b
 12207  000464  22DA               	addwfc	fsr2h,f,c
 12208  000466  CFDE F0DA          	movff	postinc2,??_LORAWAN_RxDone
 12209  00046A  CFDD F0DB          	movff	postdec2,??_LORAWAN_RxDone+1
 12210  00046E  EE22  F018         	lfsr	2,_loRa+14
 12211  000472  CFDE F0DC          	movff	postinc2,??_LORAWAN_RxDone+2
 12212  000476  CFDD F0DD          	movff	postdec2,??_LORAWAN_RxDone+3
 12213  00047A  1FDC               	comf	(??_LORAWAN_RxDone+2)& (0+255),f,b
 12214  00047C  1FDD               	comf	(??_LORAWAN_RxDone+3)& (0+255),f,b
 12215  00047E  4BDC               	infsnz	(??_LORAWAN_RxDone+2)& (0+255),f,b
 12216  000480  2BDD               	incf	(??_LORAWAN_RxDone+3)& (0+255),f,b
 12217  000482  51DA               	movf	??_LORAWAN_RxDone& (0+255),w,b
 12218  000484  27DC               	addwf	(??_LORAWAN_RxDone+2)& (0+255),f,b
 12219  000486  51DB               	movf	(??_LORAWAN_RxDone+1)& (0+255),w,b
 12220  000488  23DD               	addwfc	(??_LORAWAN_RxDone+3)& (0+255),f,b
 12221  00048A  51DC               	movf	(??_LORAWAN_RxDone+2)& (0+255),w,b
 12222  00048C  0102               	movlb	2	; () banked
 12223  00048E  5DA8               	subwf	(_loRa+158)& (0+255),w,b
 12224  000490  0100               	movlb	0	; () banked
 12225  000492  51DD               	movf	(??_LORAWAN_RxDone+3)& (0+255),w,b
 12226  000494  0102               	movlb	2	; () banked
 12227  000496  59A9               	subwfb	(_loRa+159)& (0+255),w,b
 12228  000498  B0D8               	btfsc	status,0,c
 12229  00049A  D022               	goto	l1169
 12230                           
 12231                           ; BSR set to: 2
 12232                           ;lorawan.c: 1227: {
 12233                           ;lorawan.c: 1228: if (rxPayload.RxAppData != (0))
 12234  00049C  0101               	movlb	1	; () banked
 12235  00049E  510C               	movf	_rxPayload& (0+255),w,b
 12236  0004A0  110D               	iorwf	(_rxPayload+1)& (0+255),w,b
 12237  0004A2  B4D8               	btfsc	status,2,c
 12238  0004A4  D015               	goto	u11449
 12239                           
 12240                           ; BSR set to: 1
 12241                           ;lorawan.c: 1229: {
 12242                           ;lorawan.c: 1230: rxPayload.RxAppData ((0), 0, MCAST_RE_KEYING_NEEDED);
 12243  0004A6  0E00               	movlw	0
 12244  0004A8  0100               	movlb	0	; () banked
 12245  0004AA  6F60               	movwf	RxData@pData& (0+255),b
 12246  0004AC  0E00               	movlw	0
 12247  0004AE  6F61               	movwf	(RxData@pData+1)& (0+255),b
 12248  0004B0  0E00               	movlw	0
 12249  0004B2  6F62               	movwf	RxData@dataLength& (0+255),b
 12250  0004B4  0E05               	movlw	5
 12251  0004B6  6F63               	movwf	RxData@status& (0+255),b
 12252  0004B8  D801               	call	u11448
 12253  0004BA  D00A               	goto	u11449
 12254  0004BC                     u11448:
 12255  0004BC  0005               	push	
 12256  0004BE  6EFA               	movwf	pclath,c
 12257  0004C0  0101               	movlb	1	; () banked
 12258  0004C2  510C               	movf	_rxPayload& (0+255),w,b
 12259  0004C4  6EFD               	movwf	tosl,c
 12260  0004C6  510D               	movf	(_rxPayload+1)& (0+255),w,b
 12261  0004C8  6EFE               	movwf	tosh,c
 12262  0004CA  6AFF               	clrf	tosu,c
 12263  0004CC  50FA               	movf	pclath,w,c
 12264  0004CE  0012               	return		;indir
 12265  0004D0                     u11449:
 12266                           
 12267                           ;lorawan.c: 1231: }
 12268                           ;lorawan.c: 1233: loRa.macStatus.macState = CLASS_C_RX2_2_OPEN;
 12269  0004D0  0102               	movlb	2	; () banked
 12270  0004D2  510C               	movf	(_loRa+2)& (0+255),w,b
 12271  0004D4  0BF0               	andlw	-16
 12272  0004D6  0909               	iorlw	9
 12273  0004D8  6F0C               	movwf	(_loRa+2)& (0+255),b
 12274                           
 12275                           ; BSR set to: 2
 12276                           ;lorawan.c: 1234: LORAWAN_EnterContinuousReceive();
 12277  0004DA  ECE6  F03D         	call	_LORAWAN_EnterContinuousReceive	;wreg free
 12278                           
 12279                           ;lorawan.c: 1235: return MCAST_MSG_ERROR;
 12280                           ;	Return value of _LORAWAN_RxDone is never used
 12281  0004DE  0012               	return	
 12282  0004E0                     l1169:
 12283                           
 12284                           ;lorawan.c: 1237: else
 12285                           ;lorawan.c: 1238: {
 12286                           ;lorawan.c: 1239: loRa.fMcastCntDown.members.valueLow = hdr->members.fCnt;
 12287  0004E0  0100               	movlb	0	; () banked
 12288  0004E2  EE20 F006          	lfsr	2,6
 12289  0004E6  51F1               	movf	LORAWAN_RxDone@hdr& (0+255),w,b
 12290  0004E8  26D9               	addwf	fsr2l,f,c
 12291  0004EA  51F2               	movf	(LORAWAN_RxDone@hdr+1)& (0+255),w,b
 12292  0004EC  22DA               	addwfc	fsr2h,f,c
 12293  0004EE  CFDE F218          	movff	postinc2,_loRa+14
 12294  0004F2  CFDD F219          	movff	postdec2,_loRa+15
 12295                           
 12296                           ; BSR set to: 0
 12297                           ;lorawan.c: 1240: }
 12298                           ;lorawan.c: 1241: }
 12299  0004F6  D03A               	goto	l1174
 12300  0004F8                     l1168:
 12301                           
 12302                           ;lorawan.c: 1242: else
 12303                           ;lorawan.c: 1243: {
 12304                           ;lorawan.c: 1244: if ( (0 == hdr->members.fCnt) && (0xFFFF == loRa.fMcastCntDown.members
      +                          .valueLow) )
 12305                           
 12306                           ; BSR set to: 0
 12307  0004F8  0100               	movlb	0	; () banked
 12308  0004FA  EE20 F006          	lfsr	2,6
 12309  0004FE  51F1               	movf	LORAWAN_RxDone@hdr& (0+255),w,b
 12310  000500  26D9               	addwf	fsr2l,f,c
 12311  000502  51F2               	movf	(LORAWAN_RxDone@hdr+1)& (0+255),w,b
 12312  000504  22DA               	addwfc	fsr2h,f,c
 12313  000506  50DE               	movf	postinc2,w,c
 12314  000508  10DE               	iorwf	postinc2,w,c
 12315  00050A  A4D8               	btfss	status,2,c
 12316  00050C  D00D               	goto	l1173
 12317                           
 12318                           ; BSR set to: 0
 12319  00050E  0102               	movlb	2	; () banked
 12320  000510  2918               	incf	(_loRa+14)& (0+255),w,b
 12321  000512  E10A               	bnz	l11223
 12322  000514  2919               	incf	(_loRa+15)& (0+255),w,b
 12323  000516  A4D8               	btfss	status,2,c
 12324  000518  D007               	goto	l1173
 12325                           
 12326                           ; BSR set to: 2
 12327                           ;lorawan.c: 1245: {
 12328                           ;lorawan.c: 1246: loRa.fMcastCntDown.members.valueLow = 0;
 12329  00051A  0E00               	movlw	0
 12330  00051C  6F19               	movwf	(_loRa+15)& (0+255),b
 12331  00051E  0E00               	movlw	0
 12332  000520  6F18               	movwf	(_loRa+14)& (0+255),b
 12333                           
 12334                           ; BSR set to: 2
 12335                           ;lorawan.c: 1247: loRa.fMcastCntDown.members.valueHigh ++;
 12336  000522  4B1A               	infsnz	(_loRa+16)& (0+255),f,b
 12337  000524  2B1B               	incf	(_loRa+17)& (0+255),f,b
 12338                           
 12339                           ;lorawan.c: 1248: }
 12340  000526  D022               	goto	l1174
 12341  000528                     l1173:
 12342  000528                     l11223:
 12343                           
 12344                           ;lorawan.c: 1249: else
 12345                           ;lorawan.c: 1250: {
 12346                           ;lorawan.c: 1251: if (rxPayload.RxAppData != (0))
 12347  000528  0101               	movlb	1	; () banked
 12348  00052A  510C               	movf	_rxPayload& (0+255),w,b
 12349  00052C  110D               	iorwf	(_rxPayload+1)& (0+255),w,b
 12350  00052E  B4D8               	btfsc	status,2,c
 12351  000530  D015               	goto	u11489
 12352                           
 12353                           ; BSR set to: 1
 12354                           ;lorawan.c: 1252: {
 12355                           ;lorawan.c: 1253: rxPayload.RxAppData ((0), 0, MCAST_RE_KEYING_NEEDED);
 12356  000532  0E00               	movlw	0
 12357  000534  0100               	movlb	0	; () banked
 12358  000536  6F60               	movwf	RxData@pData& (0+255),b
 12359  000538  0E00               	movlw	0
 12360  00053A  6F61               	movwf	(RxData@pData+1)& (0+255),b
 12361  00053C  0E00               	movlw	0
 12362  00053E  6F62               	movwf	RxData@dataLength& (0+255),b
 12363  000540  0E05               	movlw	5
 12364  000542  6F63               	movwf	RxData@status& (0+255),b
 12365  000544  D801               	call	u11488
 12366  000546  D00A               	goto	u11489
 12367  000548                     u11488:
 12368  000548  0005               	push	
 12369  00054A  6EFA               	movwf	pclath,c
 12370  00054C  0101               	movlb	1	; () banked
 12371  00054E  510C               	movf	_rxPayload& (0+255),w,b
 12372  000550  6EFD               	movwf	tosl,c
 12373  000552  510D               	movf	(_rxPayload+1)& (0+255),w,b
 12374  000554  6EFE               	movwf	tosh,c
 12375  000556  6AFF               	clrf	tosu,c
 12376  000558  50FA               	movf	pclath,w,c
 12377  00055A  0012               	return		;indir
 12378  00055C                     u11489:
 12379                           
 12380                           ;lorawan.c: 1254: }
 12381                           ;lorawan.c: 1256: loRa.macStatus.macState = CLASS_C_RX2_2_OPEN;
 12382  00055C  0102               	movlb	2	; () banked
 12383  00055E  510C               	movf	(_loRa+2)& (0+255),w,b
 12384  000560  0BF0               	andlw	-16
 12385  000562  0909               	iorlw	9
 12386  000564  6F0C               	movwf	(_loRa+2)& (0+255),b
 12387                           
 12388                           ; BSR set to: 2
 12389                           ;lorawan.c: 1257: LORAWAN_EnterContinuousReceive();
 12390  000566  ECE6  F03D         	call	_LORAWAN_EnterContinuousReceive	;wreg free
 12391                           
 12392                           ;lorawan.c: 1258: return MCAST_MSG_ERROR;
 12393                           ;	Return value of _LORAWAN_RxDone is never used
 12394  00056A  0012               	return	
 12395  00056C                     l1174:
 12396                           
 12397                           ;lorawan.c: 1259: }
 12398                           ;lorawan.c: 1260: }
 12399                           ;lorawan.c: 1262: if (loRa.fMcastCntDown.value == (4294967295UL))
 12400  00056C  0102               	movlb	2	; () banked
 12401  00056E  2918               	incf	(_loRa+14)& (0+255),w,b
 12402  000570  E129               	bnz	l11245
 12403  000572  2919               	incf	(_loRa+15)& (0+255),w,b
 12404  000574  E127               	bnz	l11245
 12405  000576  291A               	incf	(_loRa+16)& (0+255),w,b
 12406  000578  E125               	bnz	l11245
 12407  00057A  291B               	incf	(_loRa+17)& (0+255),w,b
 12408  00057C  A4D8               	btfss	status,2,c
 12409  00057E  D022               	goto	l1176
 12410                           
 12411                           ; BSR set to: 2
 12412                           ;lorawan.c: 1263: {
 12413                           ;lorawan.c: 1264: if (rxPayload.RxAppData != (0))
 12414  000580  0101               	movlb	1	; () banked
 12415  000582  510C               	movf	_rxPayload& (0+255),w,b
 12416  000584  110D               	iorwf	(_rxPayload+1)& (0+255),w,b
 12417  000586  B4D8               	btfsc	status,2,c
 12418  000588  D015               	goto	u11519
 12419                           
 12420                           ; BSR set to: 1
 12421                           ;lorawan.c: 1265: {
 12422                           ;lorawan.c: 1266: rxPayload.RxAppData ((0), 0, MCAST_RE_KEYING_NEEDED);
 12423  00058A  0E00               	movlw	0
 12424  00058C  0100               	movlb	0	; () banked
 12425  00058E  6F60               	movwf	RxData@pData& (0+255),b
 12426  000590  0E00               	movlw	0
 12427  000592  6F61               	movwf	(RxData@pData+1)& (0+255),b
 12428  000594  0E00               	movlw	0
 12429  000596  6F62               	movwf	RxData@dataLength& (0+255),b
 12430  000598  0E05               	movlw	5
 12431  00059A  6F63               	movwf	RxData@status& (0+255),b
 12432  00059C  D801               	call	u11518
 12433  00059E  D00A               	goto	u11519
 12434  0005A0                     u11518:
 12435  0005A0  0005               	push	
 12436  0005A2  6EFA               	movwf	pclath,c
 12437  0005A4  0101               	movlb	1	; () banked
 12438  0005A6  510C               	movf	_rxPayload& (0+255),w,b
 12439  0005A8  6EFD               	movwf	tosl,c
 12440  0005AA  510D               	movf	(_rxPayload+1)& (0+255),w,b
 12441  0005AC  6EFE               	movwf	tosh,c
 12442  0005AE  6AFF               	clrf	tosu,c
 12443  0005B0  50FA               	movf	pclath,w,c
 12444  0005B2  0012               	return		;indir
 12445  0005B4                     u11519:
 12446                           
 12447                           ;lorawan.c: 1267: }
 12448                           ;lorawan.c: 1269: loRa.macStatus.macState = CLASS_C_RX2_2_OPEN;
 12449  0005B4  0102               	movlb	2	; () banked
 12450  0005B6  510C               	movf	(_loRa+2)& (0+255),w,b
 12451  0005B8  0BF0               	andlw	-16
 12452  0005BA  0909               	iorlw	9
 12453  0005BC  6F0C               	movwf	(_loRa+2)& (0+255),b
 12454                           
 12455                           ; BSR set to: 2
 12456                           ;lorawan.c: 1270: LORAWAN_EnterContinuousReceive();
 12457  0005BE  ECE6  F03D         	call	_LORAWAN_EnterContinuousReceive	;wreg free
 12458                           
 12459                           ;lorawan.c: 1271: return FRAME_COUNTER_ERROR_REJOIN_NEEDED;
 12460                           ;	Return value of _LORAWAN_RxDone is never used
 12461  0005C2  0012               	return	
 12462  0005C4                     l1176:
 12463  0005C4                     l11245:
 12464                           
 12465                           ;lorawan.c: 1272: }
 12466                           ;lorawan.c: 1274: if (CLASS_C_RX2_1_OPEN == loRa.macStatus.macState)
 12467  0005C4  0102               	movlb	2	; () banked
 12468  0005C6  510C               	movf	(_loRa+2)& (0+255),w,b
 12469  0005C8  0B0F               	andlw	15
 12470  0005CA  0A08               	xorlw	8
 12471  0005CC  A4D8               	btfss	status,2,c
 12472  0005CE  D008               	goto	l1178
 12473                           
 12474                           ; BSR set to: 2
 12475                           ;lorawan.c: 1275: {
 12476                           ;lorawan.c: 1276: SwTimerStop (loRa.receiveWindow1TimerId);
 12477  0005D0  51EE               	movf	(_loRa+228)& (0+255),w,b
 12478  0005D2  ECFB  F047         	call	_SwTimerStop
 12479                           
 12480                           ;lorawan.c: 1277: SwTimerStop (loRa.receiveWindow2TimerId);
 12481  0005D6  0102               	movlb	2	; () banked
 12482  0005D8  51EF               	movf	(_loRa+229)& (0+255),w,b
 12483  0005DA  ECFB  F047         	call	_SwTimerStop
 12484                           
 12485                           ;lorawan.c: 1278: }
 12486  0005DE  D009               	goto	l1180
 12487  0005E0                     l1178:
 12488                           
 12489                           ;lorawan.c: 1279: else if (RX1_OPEN == loRa.macStatus.macState)
 12490  0005E0  0102               	movlb	2	; () banked
 12491  0005E2  510C               	movf	(_loRa+2)& (0+255),w,b
 12492  0005E4  0B0F               	andlw	15
 12493  0005E6  0A03               	xorlw	3
 12494  0005E8  A4D8               	btfss	status,2,c
 12495  0005EA  D003               	goto	l1180
 12496                           
 12497                           ; BSR set to: 2
 12498                           ;lorawan.c: 1280: {
 12499                           ;lorawan.c: 1281: SwTimerStop (loRa.receiveWindow2TimerId);
 12500  0005EC  51EF               	movf	(_loRa+229)& (0+255),w,b
 12501  0005EE  ECFB  F047         	call	_SwTimerStop
 12502  0005F2                     l1180:
 12503                           
 12504                           ;lorawan.c: 1282: }
 12505                           ;lorawan.c: 1284: buffer = buffer + 8;
 12506  0005F2  0E08               	movlw	8
 12507  0005F4  0101               	movlb	1	; () banked
 12508  0005F6  25F3               	addwf	LORAWAN_RxDone@buffer& (0+255),w,b
 12509  0005F8  6FF3               	movwf	LORAWAN_RxDone@buffer& (0+255),b
 12510  0005FA  0E00               	movlw	0
 12511  0005FC  21F4               	addwfc	(LORAWAN_RxDone@buffer+1)& (0+255),w,b
 12512  0005FE  6FF4               	movwf	(LORAWAN_RxDone@buffer+1)& (0+255),b
 12513                           
 12514                           ; BSR set to: 1
 12515                           ;lorawan.c: 1286: if ( (sizeof(extractedMic) + hdr->members.fCtrl.fOptsLen + 8) != buffe
      +                          rLength)
 12516  000600  51F5               	movf	LORAWAN_RxDone@bufferLength& (0+255),w,b
 12517  000602  0100               	movlb	0	; () banked
 12518  000604  6FDA               	movwf	??_LORAWAN_RxDone& (0+255),b
 12519  000606  6BDB               	clrf	(??_LORAWAN_RxDone+1)& (0+255),b
 12520  000608  EE20 F005          	lfsr	2,5
 12521  00060C  51F1               	movf	LORAWAN_RxDone@hdr& (0+255),w,b
 12522  00060E  26D9               	addwf	fsr2l,f,c
 12523  000610  51F2               	movf	(LORAWAN_RxDone@hdr+1)& (0+255),w,b
 12524  000612  22DA               	addwfc	fsr2h,f,c
 12525  000614  50DF               	movf	223,w,c
 12526  000616  0B0F               	andlw	15
 12527  000618  6FDC               	movwf	(??_LORAWAN_RxDone+2)& (0+255),b
 12528  00061A  6BDD               	clrf	(??_LORAWAN_RxDone+3)& (0+255),b
 12529  00061C  0E0C               	movlw	12
 12530  00061E  27DC               	addwf	(??_LORAWAN_RxDone+2)& (0+255),f,b
 12531  000620  0E00               	movlw	0
 12532  000622  23DD               	addwfc	(??_LORAWAN_RxDone+3)& (0+255),f,b
 12533  000624  51DA               	movf	??_LORAWAN_RxDone& (0+255),w,b
 12534  000626  19DC               	xorwf	(??_LORAWAN_RxDone+2)& (0+255),w,b
 12535  000628  E104               	bnz	u11540
 12536  00062A  51DB               	movf	(??_LORAWAN_RxDone+1)& (0+255),w,b
 12537  00062C  19DD               	xorwf	(??_LORAWAN_RxDone+3)& (0+255),w,b
 12538  00062E  B4D8               	btfsc	status,2,c
 12539  000630  D037               	goto	l1181
 12540  000632                     u11540:
 12541                           
 12542                           ; BSR set to: 0
 12543                           ;lorawan.c: 1287: {
 12544                           ;lorawan.c: 1288: fPort = *(buffer++);
 12545  000632  C1F3  FFD9         	movff	LORAWAN_RxDone@buffer,fsr2l
 12546  000636  C1F4  FFDA         	movff	LORAWAN_RxDone@buffer+1,fsr2h
 12547  00063A  50DF               	movf	indf2,w,c
 12548  00063C  6FDF               	movwf	LORAWAN_RxDone@fPort& (0+255),b
 12549                           
 12550                           ; BSR set to: 0
 12551  00063E  0101               	movlb	1	; () banked
 12552  000640  4BF3               	infsnz	LORAWAN_RxDone@buffer& (0+255),f,b
 12553  000642  2BF4               	incf	(LORAWAN_RxDone@buffer+1)& (0+255),f,b
 12554                           
 12555                           ; BSR set to: 1
 12556                           ;lorawan.c: 1290: frmPayloadLength = bufferLength - 8 - sizeof (extractedMic);
 12557  000644  51F5               	movf	LORAWAN_RxDone@bufferLength& (0+255),w,b
 12558  000646  0FF4               	addlw	244
 12559  000648  0100               	movlb	0	; () banked
 12560  00064A  6FF0               	movwf	LORAWAN_RxDone@frmPayloadLength& (0+255),b
 12561                           
 12562                           ; BSR set to: 0
 12563                           ;lorawan.c: 1291: bufferIndex = 16 + 9;
 12564  00064C  0E19               	movlw	25
 12565  00064E  6FE6               	movwf	LORAWAN_RxDone@bufferIndex& (0+255),b
 12566                           
 12567                           ; BSR set to: 0
 12568                           ;lorawan.c: 1293: EncryptFRMPayload (buffer, frmPayloadLength - 1, 1, loRa.fMcastCntDown
      +                          .value, loRa.activationParameters.mcastApplicationSessionKey, bufferIndex, radioBuffer, 
      +                          1);
 12569  000650  C1F3  F091         	movff	LORAWAN_RxDone@buffer,EncryptFRMPayload@buffer
 12570  000654  C1F4  F092         	movff	LORAWAN_RxDone@buffer+1,EncryptFRMPayload@buffer+1
 12571  000658  05F0               	decf	LORAWAN_RxDone@frmPayloadLength& (0+255),w,b
 12572  00065A  6F93               	movwf	EncryptFRMPayload@bufferLength& (0+255),b
 12573  00065C  0E01               	movlw	1
 12574  00065E  6F94               	movwf	EncryptFRMPayload@dir& (0+255),b
 12575  000660  C218  F095         	movff	_loRa+14,EncryptFRMPayload@frameCounter
 12576  000664  C219  F096         	movff	_loRa+15,EncryptFRMPayload@frameCounter+1
 12577  000668  C21A  F097         	movff	_loRa+16,EncryptFRMPayload@frameCounter+2
 12578  00066C  C21B  F098         	movff	_loRa+17,EncryptFRMPayload@frameCounter+3
 12579  000670  0E80               	movlw	low (_loRa+118)
 12580  000672  6F99               	movwf	EncryptFRMPayload@key& (0+255),b
 12581  000674  0E02               	movlw	high (_loRa+118)
 12582  000676  6F9A               	movwf	(EncryptFRMPayload@key+1)& (0+255),b
 12583  000678  C0E6  F09B         	movff	LORAWAN_RxDone@bufferIndex,EncryptFRMPayload@macBufferIndex
 12584  00067C  0E80               	movlw	low _radioBuffer
 12585  00067E  6F9C               	movwf	EncryptFRMPayload@bufferToBeEncrypted& (0+255),b
 12586  000680  0E05               	movlw	high _radioBuffer
 12587  000682  6F9D               	movwf	(EncryptFRMPayload@bufferToBeEncrypted+1)& (0+255),b
 12588  000684  0E01               	movlw	1
 12589  000686  6F9E               	movwf	EncryptFRMPayload@multicastStatus& (0+255),b
 12590  000688  EC96  F027         	call	_EncryptFRMPayload	;wreg free
 12591                           
 12592                           ;lorawan.c: 1294: packet = buffer - 1;
 12593  00068C  0EFF               	movlw	255
 12594  00068E  0101               	movlb	1	; () banked
 12595  000690  25F3               	addwf	LORAWAN_RxDone@buffer& (0+255),w,b
 12596  000692  0100               	movlb	0	; () banked
 12597  000694  6FE8               	movwf	LORAWAN_RxDone@packet& (0+255),b
 12598  000696  0EFF               	movlw	255
 12599  000698  0101               	movlb	1	; () banked
 12600  00069A  21F4               	addwfc	(LORAWAN_RxDone@buffer+1)& (0+255),w,b
 12601  00069C  0100               	movlb	0	; () banked
 12602  00069E  D005               	goto	L7
 12603  0006A0                     l1181:
 12604                           
 12605                           ; BSR set to: 0
 12606                           ;lorawan.c: 1296: else
 12607                           ;lorawan.c: 1297: {
 12608                           ;lorawan.c: 1298: frmPayloadLength = 0;
 12609                           
 12610                           ; BSR set to: 0
 12611  0006A0  0E00               	movlw	0
 12612  0006A2  6FF0               	movwf	LORAWAN_RxDone@frmPayloadLength& (0+255),b
 12613                           
 12614                           ; BSR set to: 0
 12615                           ;lorawan.c: 1299: packet = (0);
 12616  0006A4  0E00               	movlw	0
 12617  0006A6  6FE8               	movwf	LORAWAN_RxDone@packet& (0+255),b
 12618  0006A8  0E00               	movlw	0
 12619  0006AA                     L7:
 12620  0006AA  6FE9               	movwf	(LORAWAN_RxDone@packet+1)& (0+255),b
 12621                           
 12622                           ; BSR set to: 0
 12623                           ;lorawan.c: 1300: }
 12624                           ;lorawan.c: 1302: loRa.macStatus.rxDone = 1;
 12625                           
 12626                           ; BSR set to: 0
 12627  0006AC  0102               	movlb	2	; () banked
 12628  0006AE  830D               	bsf	(_loRa+3)& (0+255),1,b
 12629                           
 12630                           ; BSR set to: 2
 12631                           ;lorawan.c: 1303: loRa.macStatus.macState = IDLE;
 12632  0006B0  910C               	bcf	(_loRa+2)& (0+255),0,b
 12633  0006B2  930C               	bcf	(_loRa+2)& (0+255),1,b
 12634  0006B4  950C               	bcf	(_loRa+2)& (0+255),2,b
 12635  0006B6  970C               	bcf	(_loRa+2)& (0+255),3,b
 12636                           
 12637                           ; BSR set to: 2
 12638                           ;lorawan.c: 1305: if (rxPayload.RxAppData != (0))
 12639  0006B8  0101               	movlb	1	; () banked
 12640  0006BA  510C               	movf	_rxPayload& (0+255),w,b
 12641  0006BC  110D               	iorwf	(_rxPayload+1)& (0+255),w,b
 12642  0006BE  B4D8               	btfsc	status,2,c
 12643  0006C0  D015               	goto	u11569
 12644                           
 12645                           ; BSR set to: 1
 12646                           ;lorawan.c: 1306: {
 12647                           ;lorawan.c: 1307: rxPayload.RxAppData (packet, frmPayloadLength, MAC_OK);
 12648  0006C2  C0E8  F060         	movff	LORAWAN_RxDone@packet,RxData@pData
 12649  0006C6  C0E9  F061         	movff	LORAWAN_RxDone@packet+1,RxData@pData+1
 12650  0006CA  C0F0  F062         	movff	LORAWAN_RxDone@frmPayloadLength,RxData@dataLength
 12651  0006CE  0E01               	movlw	1
 12652  0006D0  0100               	movlb	0	; () banked
 12653  0006D2  6F63               	movwf	RxData@status& (0+255),b
 12654  0006D4  D801               	call	u11568
 12655  0006D6  D00A               	goto	u11569
 12656  0006D8                     u11568:
 12657  0006D8  0005               	push	
 12658  0006DA  6EFA               	movwf	pclath,c
 12659  0006DC  0101               	movlb	1	; () banked
 12660  0006DE  510C               	movf	_rxPayload& (0+255),w,b
 12661  0006E0  6EFD               	movwf	tosl,c
 12662  0006E2  510D               	movf	(_rxPayload+1)& (0+255),w,b
 12663  0006E4  6EFE               	movwf	tosh,c
 12664  0006E6  6AFF               	clrf	tosu,c
 12665  0006E8  50FA               	movf	pclath,w,c
 12666  0006EA  0012               	return		;indir
 12667  0006EC                     u11569:
 12668                           
 12669                           ;lorawan.c: 1308: }
 12670                           ;lorawan.c: 1310: loRa.macStatus.macState = CLASS_C_RX2_2_OPEN;
 12671  0006EC  0102               	movlb	2	; () banked
 12672  0006EE  510C               	movf	(_loRa+2)& (0+255),w,b
 12673  0006F0  0BF0               	andlw	-16
 12674  0006F2  0909               	iorlw	9
 12675  0006F4  6F0C               	movwf	(_loRa+2)& (0+255),b
 12676                           
 12677                           ; BSR set to: 2
 12678                           ;lorawan.c: 1311: LORAWAN_EnterContinuousReceive();
 12679  0006F6  ECE6  F03D         	call	_LORAWAN_EnterContinuousReceive	;wreg free
 12680                           
 12681                           ;lorawan.c: 1312: return MAC_OK;
 12682                           ;	Return value of _LORAWAN_RxDone is never used
 12683  0006FA  0012               	return	
 12684  0006FC                     l1165:
 12685                           
 12686                           ;lorawan.c: 1313: }
 12687                           ;lorawan.c: 1316: if (hdr->members.devAddr.value != loRa.activationParameters.deviceAddr
      +                          ess.value)
 12688  0006FC  0100               	movlb	0	; () banked
 12689  0006FE  EE20 F001          	lfsr	2,1
 12690  000702  51F1               	movf	LORAWAN_RxDone@hdr& (0+255),w,b
 12691  000704  26D9               	addwf	fsr2l,f,c
 12692  000706  51F2               	movf	(LORAWAN_RxDone@hdr+1)& (0+255),w,b
 12693  000708  22DA               	addwfc	fsr2h,f,c
 12694  00070A  0102               	movlb	2	; () banked
 12695  00070C  5128               	movf	(_loRa+30)& (0+255),w,b
 12696  00070E  18DE               	xorwf	postinc2,w,c
 12697  000710  E10A               	bnz	u11570
 12698  000712  5129               	movf	(_loRa+31)& (0+255),w,b
 12699  000714  18DE               	xorwf	postinc2,w,c
 12700  000716  E107               	bnz	u11570
 12701  000718  512A               	movf	(_loRa+32)& (0+255),w,b
 12702  00071A  18DE               	xorwf	postinc2,w,c
 12703  00071C  E104               	bnz	u11570
 12704  00071E  512B               	movf	(_loRa+33)& (0+255),w,b
 12705  000720  18DE               	xorwf	postinc2,w,c
 12706  000722  B4D8               	btfsc	status,2,c
 12707  000724  D00E               	goto	l1184
 12708  000726                     u11570:
 12709                           
 12710                           ; BSR set to: 2
 12711                           ;lorawan.c: 1317: {
 12712                           ;lorawan.c: 1318: SetReceptionNotOkState();
 12713  000726  ECA7  F03D         	call	_SetReceptionNotOkState	;wreg free
 12714                           
 12715                           ;lorawan.c: 1319: if (CLASS_C == loRa.deviceClass)
 12716  00072A  0E02               	movlw	2
 12717  00072C  0102               	movlb	2	; () banked
 12718  00072E  191C               	xorwf	(_loRa+18)& (0+255),w,b
 12719  000730  A4D8               	btfss	status,2,c
 12720  000732  0012               	return	
 12721                           
 12722                           ; BSR set to: 2
 12723                           ;lorawan.c: 1320: {
 12724                           ;lorawan.c: 1321: loRa.macStatus.macState = CLASS_C_RX2_2_OPEN;
 12725  000734  510C               	movf	(_loRa+2)& (0+255),w,b
 12726  000736  0BF0               	andlw	-16
 12727  000738  0909               	iorlw	9
 12728  00073A  6F0C               	movwf	(_loRa+2)& (0+255),b
 12729                           
 12730                           ; BSR set to: 2
 12731                           ;lorawan.c: 1322: LORAWAN_EnterContinuousReceive();
 12732  00073C  ECE6  F03D         	call	_LORAWAN_EnterContinuousReceive	;wreg free
 12733                           
 12734                           ;lorawan.c: 1323: }
 12735                           ;lorawan.c: 1324: return INVALID_PARAMETER;
 12736                           ;	Return value of _LORAWAN_RxDone is never used
 12737  000740  0012               	return	
 12738  000742                     l1184:
 12739                           
 12740                           ;lorawan.c: 1325: }
 12741                           ;lorawan.c: 1327: AssembleEncryptionBlock (1, hdr->members.fCnt, bufferLength - sizeof (
      +                          computedMic), 0x49, 0);
 12742  000742  0100               	movlb	0	; () banked
 12743  000744  EE20 F006          	lfsr	2,6
 12744  000748  51F1               	movf	LORAWAN_RxDone@hdr& (0+255),w,b
 12745  00074A  26D9               	addwf	fsr2l,f,c
 12746  00074C  51F2               	movf	(LORAWAN_RxDone@hdr+1)& (0+255),w,b
 12747  00074E  22DA               	addwfc	fsr2h,f,c
 12748  000750  CFDE F0DA          	movff	postinc2,??_LORAWAN_RxDone
 12749  000754  CFDD F0DB          	movff	postdec2,??_LORAWAN_RxDone+1
 12750  000758  C0DA  F06B         	movff	??_LORAWAN_RxDone,AssembleEncryptionBlock@frameCounter
 12751  00075C  C0DB  F06C         	movff	??_LORAWAN_RxDone+1,AssembleEncryptionBlock@frameCounter+1
 12752  000760  6B6D               	clrf	(AssembleEncryptionBlock@frameCounter+2)& (0+255),b
 12753  000762  6B6E               	clrf	(AssembleEncryptionBlock@frameCounter+3)& (0+255),b
 12754  000764  0101               	movlb	1	; () banked
 12755  000766  51F5               	movf	LORAWAN_RxDone@bufferLength& (0+255),w,b
 12756  000768  0FFC               	addlw	252
 12757  00076A  0100               	movlb	0	; () banked
 12758  00076C  6F6F               	movwf	AssembleEncryptionBlock@blockId& (0+255),b
 12759  00076E  0E49               	movlw	73
 12760  000770  6F70               	movwf	AssembleEncryptionBlock@firstByte& (0+255),b
 12761  000772  0E00               	movlw	0
 12762  000774  6F71               	movwf	AssembleEncryptionBlock@multicastStatus& (0+255),b
 12763  000776  0E01               	movlw	1
 12764  000778  ECD6  F032         	call	_AssembleEncryptionBlock
 12765                           
 12766                           ;lorawan.c: 1328: memcpy (&radioBuffer[0], aesBuffer, sizeof (aesBuffer));
 12767  00077C  0E80               	movlw	low _radioBuffer
 12768  00077E  0100               	movlb	0	; () banked
 12769  000780  6F60               	movwf	memcpy@d1& (0+255),b
 12770  000782  0E05               	movlw	high _radioBuffer
 12771  000784  6F61               	movwf	(memcpy@d1+1)& (0+255),b
 12772  000786  0EA0               	movlw	low _aesBuffer
 12773  000788  6F62               	movwf	memcpy@s1& (0+255),b
 12774  00078A  0E03               	movlw	high _aesBuffer
 12775  00078C  6F63               	movwf	(memcpy@s1+1)& (0+255),b
 12776  00078E  0E00               	movlw	0
 12777  000790  6F65               	movwf	(memcpy@n+1)& (0+255),b
 12778  000792  0E10               	movlw	16
 12779  000794  6F64               	movwf	memcpy@n& (0+255),b
 12780  000796  EC37  F041         	call	_memcpy	;wreg free
 12781                           
 12782                           ;lorawan.c: 1329: memcpy (&radioBuffer[16], buffer, bufferLength-sizeof(computedMic));
 12783  00079A  0E90               	movlw	low (_radioBuffer+16)
 12784  00079C  0100               	movlb	0	; () banked
 12785  00079E  6F60               	movwf	memcpy@d1& (0+255),b
 12786  0007A0  0E05               	movlw	high (_radioBuffer+16)
 12787  0007A2  6F61               	movwf	(memcpy@d1+1)& (0+255),b
 12788  0007A4  C1F3  F062         	movff	LORAWAN_RxDone@buffer,memcpy@s1
 12789  0007A8  C1F4  F063         	movff	LORAWAN_RxDone@buffer+1,memcpy@s1+1
 12790  0007AC  0EFC               	movlw	252
 12791  0007AE  0101               	movlb	1	; () banked
 12792  0007B0  25F5               	addwf	LORAWAN_RxDone@bufferLength& (0+255),w,b
 12793  0007B2  0100               	movlb	0	; () banked
 12794  0007B4  6F64               	movwf	memcpy@n& (0+255),b
 12795  0007B6  6B65               	clrf	(memcpy@n+1)& (0+255),b
 12796  0007B8  0EFF               	movlw	255
 12797  0007BA  2365               	addwfc	(memcpy@n+1)& (0+255),f,b
 12798  0007BC  EC37  F041         	call	_memcpy	;wreg free
 12799                           
 12800                           ;lorawan.c: 1330: AESCmac(loRa.activationParameters.networkSessionKey, aesBuffer, &radio
      +                          Buffer[0], bufferLength - sizeof(computedMic) + sizeof (aesBuffer));
 12801  0007C0  0E2C               	movlw	low (_loRa+34)
 12802  0007C2  0100               	movlb	0	; () banked
 12803  0007C4  6FB9               	movwf	AESCmac@key& (0+255),b
 12804  0007C6  0E02               	movlw	high (_loRa+34)
 12805  0007C8  6FBA               	movwf	(AESCmac@key+1)& (0+255),b
 12806  0007CA  0EA0               	movlw	low _aesBuffer
 12807  0007CC  6FBB               	movwf	AESCmac@output& (0+255),b
 12808  0007CE  0E03               	movlw	high _aesBuffer
 12809  0007D0  6FBC               	movwf	(AESCmac@output+1)& (0+255),b
 12810  0007D2  0E80               	movlw	low _radioBuffer
 12811  0007D4  6FBD               	movwf	AESCmac@input& (0+255),b
 12812  0007D6  0E05               	movlw	high _radioBuffer
 12813  0007D8  6FBE               	movwf	(AESCmac@input+1)& (0+255),b
 12814  0007DA  0101               	movlb	1	; () banked
 12815  0007DC  51F5               	movf	LORAWAN_RxDone@bufferLength& (0+255),w,b
 12816  0007DE  0F0C               	addlw	12
 12817  0007E0  0100               	movlb	0	; () banked
 12818  0007E2  6FBF               	movwf	AESCmac@size& (0+255),b
 12819  0007E4  EC1F  F011         	call	_AESCmac	;wreg free
 12820                           
 12821                           ;lorawan.c: 1332: memcpy(&computedMic, aesBuffer, sizeof(computedMic));
 12822  0007E8  0EEA               	movlw	low LORAWAN_RxDone@computedMic
 12823  0007EA  0100               	movlb	0	; () banked
 12824  0007EC  6F60               	movwf	memcpy@d1& (0+255),b
 12825  0007EE  0E00               	movlw	high LORAWAN_RxDone@computedMic
 12826  0007F0  6F61               	movwf	(memcpy@d1+1)& (0+255),b
 12827  0007F2  0EA0               	movlw	low _aesBuffer
 12828  0007F4  6F62               	movwf	memcpy@s1& (0+255),b
 12829  0007F6  0E03               	movlw	high _aesBuffer
 12830  0007F8  6F63               	movwf	(memcpy@s1+1)& (0+255),b
 12831  0007FA  0E00               	movlw	0
 12832  0007FC  6F65               	movwf	(memcpy@n+1)& (0+255),b
 12833  0007FE  0E04               	movlw	4
 12834  000800  6F64               	movwf	memcpy@n& (0+255),b
 12835  000802  EC37  F041         	call	_memcpy	;wreg free
 12836                           
 12837                           ;lorawan.c: 1333: extractedMic = ExtractMic (&buffer[0], bufferLength);
 12838  000806  C1F3  F06B         	movff	LORAWAN_RxDone@buffer,ExtractMic@buffer
 12839  00080A  C1F4  F06C         	movff	LORAWAN_RxDone@buffer+1,ExtractMic@buffer+1
 12840  00080E  C1F5  F06D         	movff	LORAWAN_RxDone@bufferLength,ExtractMic@bufferLength
 12841  000812  EC20  F042         	call	_ExtractMic	;wreg free
 12842  000816  C06B  F0E2         	movff	?_ExtractMic,LORAWAN_RxDone@extractedMic
 12843  00081A  C06C  F0E3         	movff	?_ExtractMic+1,LORAWAN_RxDone@extractedMic+1
 12844  00081E  C06D  F0E4         	movff	?_ExtractMic+2,LORAWAN_RxDone@extractedMic+2
 12845  000822  C06E  F0E5         	movff	?_ExtractMic+3,LORAWAN_RxDone@extractedMic+3
 12846                           
 12847                           ;lorawan.c: 1336: if (computedMic != extractedMic)
 12848  000826  0100               	movlb	0	; () banked
 12849  000828  51E2               	movf	LORAWAN_RxDone@extractedMic& (0+255),w,b
 12850  00082A  19EA               	xorwf	LORAWAN_RxDone@computedMic& (0+255),w,b
 12851  00082C  E10A               	bnz	u11590
 12852  00082E  51E3               	movf	(LORAWAN_RxDone@extractedMic+1)& (0+255),w,b
 12853  000830  19EB               	xorwf	(LORAWAN_RxDone@computedMic+1)& (0+255),w,b
 12854  000832  E107               	bnz	u11590
 12855  000834  51E4               	movf	(LORAWAN_RxDone@extractedMic+2)& (0+255),w,b
 12856  000836  19EC               	xorwf	(LORAWAN_RxDone@computedMic+2)& (0+255),w,b
 12857  000838  E104               	bnz	u11590
 12858  00083A  51E5               	movf	(LORAWAN_RxDone@extractedMic+3)& (0+255),w,b
 12859  00083C  19ED               	xorwf	(LORAWAN_RxDone@computedMic+3)& (0+255),w,b
 12860  00083E  B4D8               	btfsc	status,2,c
 12861  000840  D00E               	goto	l1186
 12862  000842                     u11590:
 12863                           
 12864                           ; BSR set to: 0
 12865                           ;lorawan.c: 1337: {
 12866                           ;lorawan.c: 1338: SetReceptionNotOkState();
 12867  000842  ECA7  F03D         	call	_SetReceptionNotOkState	;wreg free
 12868                           
 12869                           ;lorawan.c: 1339: if (CLASS_C == loRa.deviceClass)
 12870  000846  0E02               	movlw	2
 12871  000848  0102               	movlb	2	; () banked
 12872  00084A  191C               	xorwf	(_loRa+18)& (0+255),w,b
 12873  00084C  A4D8               	btfss	status,2,c
 12874  00084E  0012               	return	
 12875                           
 12876                           ; BSR set to: 2
 12877                           ;lorawan.c: 1340: {
 12878                           ;lorawan.c: 1341: loRa.macStatus.macState = CLASS_C_RX2_2_OPEN;
 12879  000850  510C               	movf	(_loRa+2)& (0+255),w,b
 12880  000852  0BF0               	andlw	-16
 12881  000854  0909               	iorlw	9
 12882  000856  6F0C               	movwf	(_loRa+2)& (0+255),b
 12883                           
 12884                           ; BSR set to: 2
 12885                           ;lorawan.c: 1342: LORAWAN_EnterContinuousReceive();
 12886  000858  ECE6  F03D         	call	_LORAWAN_EnterContinuousReceive	;wreg free
 12887                           
 12888                           ;lorawan.c: 1343: }
 12889                           ;lorawan.c: 1344: return INVALID_PARAMETER;
 12890                           ;	Return value of _LORAWAN_RxDone is never used
 12891  00085C  0012               	return	
 12892  00085E                     l1186:
 12893                           
 12894                           ;lorawan.c: 1345: }
 12895                           ;lorawan.c: 1348: if (hdr->members.fCnt >= loRa.fCntDown.members.valueLow)
 12896  00085E  0100               	movlb	0	; () banked
 12897  000860  EE20 F006          	lfsr	2,6
 12898  000864  51F1               	movf	LORAWAN_RxDone@hdr& (0+255),w,b
 12899  000866  26D9               	addwf	fsr2l,f,c
 12900  000868  51F2               	movf	(LORAWAN_RxDone@hdr+1)& (0+255),w,b
 12901  00086A  22DA               	addwfc	fsr2h,f,c
 12902  00086C  0102               	movlb	2	; () banked
 12903  00086E  5114               	movf	(_loRa+10)& (0+255),w,b
 12904  000870  5CDE               	subwf	postinc2,w,c
 12905  000872  5115               	movf	(_loRa+11)& (0+255),w,b
 12906  000874  58DE               	subwfb	postinc2,w,c
 12907  000876  A0D8               	btfss	status,0,c
 12908  000878  D05D               	goto	l1188
 12909                           
 12910                           ; BSR set to: 2
 12911                           ;lorawan.c: 1349: {
 12912                           ;lorawan.c: 1350: if ((hdr->members.fCnt - loRa.fCntDown.members.valueLow) > loRa.protoc
      +                          olParameters.maxFcntGap)
 12913  00087A  0100               	movlb	0	; () banked
 12914  00087C  EE20 F006          	lfsr	2,6
 12915  000880  51F1               	movf	LORAWAN_RxDone@hdr& (0+255),w,b
 12916  000882  26D9               	addwf	fsr2l,f,c
 12917  000884  51F2               	movf	(LORAWAN_RxDone@hdr+1)& (0+255),w,b
 12918  000886  22DA               	addwfc	fsr2h,f,c
 12919  000888  CFDE F0DA          	movff	postinc2,??_LORAWAN_RxDone
 12920  00088C  CFDD F0DB          	movff	postdec2,??_LORAWAN_RxDone+1
 12921  000890  EE22  F014         	lfsr	2,_loRa+10
 12922  000894  CFDE F0DC          	movff	postinc2,??_LORAWAN_RxDone+2
 12923  000898  CFDD F0DD          	movff	postdec2,??_LORAWAN_RxDone+3
 12924  00089C  1FDC               	comf	(??_LORAWAN_RxDone+2)& (0+255),f,b
 12925  00089E  1FDD               	comf	(??_LORAWAN_RxDone+3)& (0+255),f,b
 12926  0008A0  4BDC               	infsnz	(??_LORAWAN_RxDone+2)& (0+255),f,b
 12927  0008A2  2BDD               	incf	(??_LORAWAN_RxDone+3)& (0+255),f,b
 12928  0008A4  51DA               	movf	??_LORAWAN_RxDone& (0+255),w,b
 12929  0008A6  27DC               	addwf	(??_LORAWAN_RxDone+2)& (0+255),f,b
 12930  0008A8  51DB               	movf	(??_LORAWAN_RxDone+1)& (0+255),w,b
 12931  0008AA  23DD               	addwfc	(??_LORAWAN_RxDone+3)& (0+255),f,b
 12932  0008AC  51DC               	movf	(??_LORAWAN_RxDone+2)& (0+255),w,b
 12933  0008AE  0102               	movlb	2	; () banked
 12934  0008B0  5DA6               	subwf	(_loRa+156)& (0+255),w,b
 12935  0008B2  0100               	movlb	0	; () banked
 12936  0008B4  51DD               	movf	(??_LORAWAN_RxDone+3)& (0+255),w,b
 12937  0008B6  0102               	movlb	2	; () banked
 12938  0008B8  59A7               	subwfb	(_loRa+157)& (0+255),w,b
 12939  0008BA  B0D8               	btfsc	status,0,c
 12940  0008BC  D02F               	goto	l1189
 12941                           
 12942                           ; BSR set to: 2
 12943                           ;lorawan.c: 1351: {
 12944                           ;lorawan.c: 1352: loRa.lorawanMacStatus.ackRequiredFromNextDownlinkMessage = 0;
 12945  0008BE  910A               	bcf	_loRa& (0+255),0,b
 12946                           
 12947                           ;lorawan.c: 1353: loRa.macStatus.macState = IDLE;
 12948  0008C0  910C               	bcf	(_loRa+2)& (0+255),0,b
 12949  0008C2  930C               	bcf	(_loRa+2)& (0+255),1,b
 12950  0008C4  950C               	bcf	(_loRa+2)& (0+255),2,b
 12951  0008C6  970C               	bcf	(_loRa+2)& (0+255),3,b
 12952                           
 12953                           ; BSR set to: 2
 12954                           ;lorawan.c: 1354: if (rxPayload.RxAppData != (0))
 12955  0008C8  0101               	movlb	1	; () banked
 12956  0008CA  510C               	movf	_rxPayload& (0+255),w,b
 12957  0008CC  110D               	iorwf	(_rxPayload+1)& (0+255),w,b
 12958  0008CE  B4D8               	btfsc	status,2,c
 12959  0008D0  D017               	goto	u11649
 12960                           
 12961                           ; BSR set to: 1
 12962                           ;lorawan.c: 1355: {
 12963                           ;lorawan.c: 1356: loRa.lorawanMacStatus.synchronization = 0;
 12964  0008D2  0102               	movlb	2	; () banked
 12965  0008D4  9B0A               	bcf	_loRa& (0+255),5,b
 12966                           
 12967                           ; BSR set to: 2
 12968                           ;lorawan.c: 1357: rxPayload.RxAppData ((0), 0, MAC_NOT_OK);
 12969  0008D6  0E00               	movlw	0
 12970  0008D8  0100               	movlb	0	; () banked
 12971  0008DA  6F60               	movwf	RxData@pData& (0+255),b
 12972  0008DC  0E00               	movlw	0
 12973  0008DE  6F61               	movwf	(RxData@pData+1)& (0+255),b
 12974  0008E0  0E00               	movlw	0
 12975  0008E2  6F62               	movwf	RxData@dataLength& (0+255),b
 12976  0008E4  0E00               	movlw	0
 12977  0008E6  6F63               	movwf	RxData@status& (0+255),b
 12978  0008E8  D801               	call	u11648
 12979  0008EA  D00A               	goto	u11649
 12980  0008EC                     u11648:
 12981  0008EC  0005               	push	
 12982  0008EE  6EFA               	movwf	pclath,c
 12983  0008F0  0101               	movlb	1	; () banked
 12984  0008F2  510C               	movf	_rxPayload& (0+255),w,b
 12985  0008F4  6EFD               	movwf	tosl,c
 12986  0008F6  510D               	movf	(_rxPayload+1)& (0+255),w,b
 12987  0008F8  6EFE               	movwf	tosh,c
 12988  0008FA  6AFF               	clrf	tosu,c
 12989  0008FC  50FA               	movf	pclath,w,c
 12990  0008FE  0012               	return		;indir
 12991  000900                     u11649:
 12992                           
 12993                           ;lorawan.c: 1358: }
 12994                           ;lorawan.c: 1359: loRa.macStatus.rxDone = 0;
 12995  000900  0102               	movlb	2	; () banked
 12996  000902  930D               	bcf	(_loRa+3)& (0+255),1,b
 12997                           
 12998                           ; BSR set to: 2
 12999                           ;lorawan.c: 1362: loRa.macStatus.rejoinNeeded = 1;
 13000  000904  830E               	bsf	(_loRa+4)& (0+255),1,b
 13001                           
 13002                           ; BSR set to: 2
 13003                           ;lorawan.c: 1363: if (CLASS_C == loRa.deviceClass)
 13004  000906  0E02               	movlw	2
 13005  000908  191C               	xorwf	(_loRa+18)& (0+255),w,b
 13006  00090A  A4D8               	btfss	status,2,c
 13007  00090C  0012               	return	
 13008                           
 13009                           ; BSR set to: 2
 13010                           ;lorawan.c: 1364: {
 13011                           ;lorawan.c: 1365: loRa.macStatus.macState = CLASS_C_RX2_2_OPEN;
 13012  00090E  510C               	movf	(_loRa+2)& (0+255),w,b
 13013  000910  0BF0               	andlw	-16
 13014  000912  0909               	iorlw	9
 13015  000914  6F0C               	movwf	(_loRa+2)& (0+255),b
 13016                           
 13017                           ; BSR set to: 2
 13018                           ;lorawan.c: 1366: LORAWAN_EnterContinuousReceive();
 13019  000916  ECE6  F03D         	call	_LORAWAN_EnterContinuousReceive	;wreg free
 13020                           
 13021                           ;lorawan.c: 1367: }
 13022                           ;lorawan.c: 1368: return FRAME_COUNTER_ERROR_REJOIN_NEEDED;
 13023                           ;	Return value of _LORAWAN_RxDone is never used
 13024  00091A  0012               	return	
 13025  00091C                     l1189:
 13026                           
 13027                           ;lorawan.c: 1370: else
 13028                           ;lorawan.c: 1371: {
 13029                           ;lorawan.c: 1372: loRa.fCntDown.members.valueLow = hdr->members.fCnt;
 13030  00091C  0100               	movlb	0	; () banked
 13031  00091E  EE20 F006          	lfsr	2,6
 13032  000922  51F1               	movf	LORAWAN_RxDone@hdr& (0+255),w,b
 13033  000924  26D9               	addwf	fsr2l,f,c
 13034  000926  51F2               	movf	(LORAWAN_RxDone@hdr+1)& (0+255),w,b
 13035  000928  22DA               	addwfc	fsr2h,f,c
 13036  00092A  CFDE F214          	movff	postinc2,_loRa+10
 13037  00092E  CFDD F215          	movff	postdec2,_loRa+11
 13038                           
 13039                           ; BSR set to: 0
 13040                           ;lorawan.c: 1373: }
 13041                           ;lorawan.c: 1374: }
 13042  000932  D02E               	goto	l1195
 13043  000934                     l1188:
 13044                           
 13045                           ;lorawan.c: 1375: else
 13046                           ;lorawan.c: 1376: {
 13047                           ;lorawan.c: 1377: if((hdr->members.fCnt == 0) && (loRa.fCntDown.members.valueLow == 0xFF
      +                          FF))
 13048                           
 13049                           ; BSR set to: 0
 13050  000934  0100               	movlb	0	; () banked
 13051  000936  EE20 F006          	lfsr	2,6
 13052  00093A  51F1               	movf	LORAWAN_RxDone@hdr& (0+255),w,b
 13053  00093C  26D9               	addwf	fsr2l,f,c
 13054  00093E  51F2               	movf	(LORAWAN_RxDone@hdr+1)& (0+255),w,b
 13055  000940  22DA               	addwfc	fsr2h,f,c
 13056  000942  50DE               	movf	postinc2,w,c
 13057  000944  10DE               	iorwf	postinc2,w,c
 13058  000946  A4D8               	btfss	status,2,c
 13059  000948  D015               	goto	l1194
 13060                           
 13061                           ; BSR set to: 0
 13062  00094A  0102               	movlb	2	; () banked
 13063  00094C  2914               	incf	(_loRa+10)& (0+255),w,b
 13064  00094E  E112               	bnz	l11357
 13065  000950  2915               	incf	(_loRa+11)& (0+255),w,b
 13066  000952  A4D8               	btfss	status,2,c
 13067  000954  D00F               	goto	l1194
 13068                           
 13069                           ; BSR set to: 2
 13070                           ;lorawan.c: 1378: {
 13071                           ;lorawan.c: 1380: loRa.fCntDown.members.valueLow = hdr->members.fCnt;
 13072  000956  0100               	movlb	0	; () banked
 13073  000958  EE20 F006          	lfsr	2,6
 13074  00095C  51F1               	movf	LORAWAN_RxDone@hdr& (0+255),w,b
 13075  00095E  26D9               	addwf	fsr2l,f,c
 13076  000960  51F2               	movf	(LORAWAN_RxDone@hdr+1)& (0+255),w,b
 13077  000962  22DA               	addwfc	fsr2h,f,c
 13078  000964  CFDE F214          	movff	postinc2,_loRa+10
 13079  000968  CFDD F215          	movff	postdec2,_loRa+11
 13080                           
 13081                           ; BSR set to: 0
 13082                           ;lorawan.c: 1381: loRa.fCntDown.members.valueHigh ++;
 13083  00096C  0102               	movlb	2	; () banked
 13084  00096E  4B16               	infsnz	(_loRa+12)& (0+255),f,b
 13085  000970  2B17               	incf	(_loRa+13)& (0+255),f,b
 13086                           
 13087                           ;lorawan.c: 1382: }
 13088  000972  D00E               	goto	l1195
 13089  000974                     l1194:
 13090  000974                     l11357:
 13091                           
 13092                           ;lorawan.c: 1383: else
 13093                           ;lorawan.c: 1384: {
 13094                           ;lorawan.c: 1385: SetReceptionNotOkState();
 13095  000974  ECA7  F03D         	call	_SetReceptionNotOkState	;wreg free
 13096                           
 13097                           ;lorawan.c: 1386: if (CLASS_C == loRa.deviceClass)
 13098  000978  0E02               	movlw	2
 13099  00097A  0102               	movlb	2	; () banked
 13100  00097C  191C               	xorwf	(_loRa+18)& (0+255),w,b
 13101  00097E  A4D8               	btfss	status,2,c
 13102  000980  0012               	return	
 13103                           
 13104                           ; BSR set to: 2
 13105                           ;lorawan.c: 1387: {
 13106                           ;lorawan.c: 1388: loRa.macStatus.macState = CLASS_C_RX2_2_OPEN;
 13107  000982  510C               	movf	(_loRa+2)& (0+255),w,b
 13108  000984  0BF0               	andlw	-16
 13109  000986  0909               	iorlw	9
 13110  000988  6F0C               	movwf	(_loRa+2)& (0+255),b
 13111                           
 13112                           ; BSR set to: 2
 13113                           ;lorawan.c: 1389: LORAWAN_EnterContinuousReceive();
 13114  00098A  ECE6  F03D         	call	_LORAWAN_EnterContinuousReceive	;wreg free
 13115                           
 13116                           ;lorawan.c: 1390: }
 13117                           ;lorawan.c: 1392: return INVALID_PARAMETER;
 13118                           ;	Return value of _LORAWAN_RxDone is never used
 13119  00098E  0012               	return	
 13120  000990                     l1195:
 13121                           
 13122                           ;lorawan.c: 1393: }
 13123                           ;lorawan.c: 1394: }
 13124                           ;lorawan.c: 1396: if (loRa.fCntDown.value == (4294967295UL))
 13125  000990  0102               	movlb	2	; () banked
 13126  000992  2914               	incf	(_loRa+10)& (0+255),w,b
 13127  000994  E113               	bnz	l11379
 13128  000996  2915               	incf	(_loRa+11)& (0+255),w,b
 13129  000998  E111               	bnz	l11379
 13130  00099A  2916               	incf	(_loRa+12)& (0+255),w,b
 13131  00099C  E10F               	bnz	l11379
 13132  00099E  2917               	incf	(_loRa+13)& (0+255),w,b
 13133  0009A0  A4D8               	btfss	status,2,c
 13134  0009A2  D00C               	goto	l1197
 13135                           
 13136                           ; BSR set to: 2
 13137                           ;lorawan.c: 1397: {
 13138                           ;lorawan.c: 1400: loRa.macStatus.rejoinNeeded = 1;
 13139  0009A4  830E               	bsf	(_loRa+4)& (0+255),1,b
 13140                           
 13141                           ; BSR set to: 2
 13142                           ;lorawan.c: 1401: if (CLASS_C == loRa.deviceClass)
 13143  0009A6  0E02               	movlw	2
 13144  0009A8  191C               	xorwf	(_loRa+18)& (0+255),w,b
 13145  0009AA  A4D8               	btfss	status,2,c
 13146  0009AC  0012               	return	
 13147                           
 13148                           ; BSR set to: 2
 13149                           ;lorawan.c: 1402: {
 13150                           ;lorawan.c: 1403: loRa.macStatus.macState = CLASS_C_RX2_2_OPEN;
 13151  0009AE  510C               	movf	(_loRa+2)& (0+255),w,b
 13152  0009B0  0BF0               	andlw	-16
 13153  0009B2  0909               	iorlw	9
 13154  0009B4  6F0C               	movwf	(_loRa+2)& (0+255),b
 13155                           
 13156                           ; BSR set to: 2
 13157                           ;lorawan.c: 1404: LORAWAN_EnterContinuousReceive();
 13158  0009B6  ECE6  F03D         	call	_LORAWAN_EnterContinuousReceive	;wreg free
 13159                           
 13160                           ;lorawan.c: 1405: }
 13161                           ;lorawan.c: 1406: return FRAME_COUNTER_ERROR_REJOIN_NEEDED;
 13162                           ;	Return value of _LORAWAN_RxDone is never used
 13163  0009BA  0012               	return	
 13164  0009BC                     l1197:
 13165  0009BC                     l11379:
 13166                           
 13167                           ;lorawan.c: 1407: }
 13168                           ;lorawan.c: 1410: if (loRa.macStatus.macState == RX1_OPEN)
 13169  0009BC  0102               	movlb	2	; () banked
 13170  0009BE  510C               	movf	(_loRa+2)& (0+255),w,b
 13171  0009C0  0B0F               	andlw	15
 13172  0009C2  0A03               	xorlw	3
 13173  0009C4  A4D8               	btfss	status,2,c
 13174  0009C6  D003               	goto	l1199
 13175                           
 13176                           ; BSR set to: 2
 13177                           ;lorawan.c: 1411: {
 13178                           ;lorawan.c: 1412: SwTimerStop (loRa.receiveWindow2TimerId);
 13179  0009C8  51EF               	movf	(_loRa+229)& (0+255),w,b
 13180  0009CA  ECFB  F047         	call	_SwTimerStop
 13181  0009CE                     l1199:
 13182                           
 13183                           ;lorawan.c: 1413: }
 13184                           ;lorawan.c: 1415: loRa.counterRepetitionsUnconfirmedUplink = 1;
 13185  0009CE  0E01               	movlw	1
 13186  0009D0  0102               	movlb	2	; () banked
 13187  0009D2  6FE2               	movwf	(_loRa+216)& (0+255),b
 13188                           
 13189                           ; BSR set to: 2
 13190                           ;lorawan.c: 1417: CheckFlags (hdr);
 13191  0009D4  C0F1  F060         	movff	LORAWAN_RxDone@hdr,CheckFlags@hdr
 13192  0009D8  C0F2  F061         	movff	LORAWAN_RxDone@hdr+1,CheckFlags@hdr+1
 13193  0009DC  EC96  F041         	call	_CheckFlags	;wreg free
 13194                           
 13195                           ;lorawan.c: 1419: if (hdr->members.fCtrl.fOptsLen != 0)
 13196  0009E0  0100               	movlb	0	; () banked
 13197  0009E2  EE20 F005          	lfsr	2,5
 13198  0009E6  51F1               	movf	LORAWAN_RxDone@hdr& (0+255),w,b
 13199  0009E8  26D9               	addwf	fsr2l,f,c
 13200  0009EA  51F2               	movf	(LORAWAN_RxDone@hdr+1)& (0+255),w,b
 13201  0009EC  22DA               	addwfc	fsr2h,f,c
 13202  0009EE  50DF               	movf	223,w,c
 13203  0009F0  0B0F               	andlw	15
 13204  0009F2  0900               	iorlw	0
 13205  0009F4  B4D8               	btfsc	status,2,c
 13206  0009F6  D016               	goto	l1200
 13207                           
 13208                           ; BSR set to: 0
 13209                           ;lorawan.c: 1420: {
 13210                           ;lorawan.c: 1421: buffer = MacExecuteCommands(hdr->members.MacCommands, hdr->members.fCt
      +                          rl.fOptsLen);
 13211  0009F8  0E08               	movlw	8
 13212  0009FA  25F1               	addwf	LORAWAN_RxDone@hdr& (0+255),w,b
 13213  0009FC  6FB0               	movwf	MacExecuteCommands@buffer& (0+255),b
 13214  0009FE  0E00               	movlw	0
 13215  000A00  21F2               	addwfc	(LORAWAN_RxDone@hdr+1)& (0+255),w,b
 13216  000A02  6FB1               	movwf	(MacExecuteCommands@buffer+1)& (0+255),b
 13217  000A04  EE20 F005          	lfsr	2,5
 13218  000A08  51F1               	movf	LORAWAN_RxDone@hdr& (0+255),w,b
 13219  000A0A  26D9               	addwf	fsr2l,f,c
 13220  000A0C  51F2               	movf	(LORAWAN_RxDone@hdr+1)& (0+255),w,b
 13221  000A0E  22DA               	addwfc	fsr2h,f,c
 13222  000A10  50DF               	movf	223,w,c
 13223  000A12  0B0F               	andlw	15
 13224  000A14  6FB2               	movwf	MacExecuteCommands@fOptsLen& (0+255),b
 13225  000A16  EC5B  F019         	call	_MacExecuteCommands	;wreg free
 13226  000A1A  C0B0  F1F3         	movff	?_MacExecuteCommands,LORAWAN_RxDone@buffer
 13227  000A1E  C0B1  F1F4         	movff	?_MacExecuteCommands+1,LORAWAN_RxDone@buffer+1
 13228                           
 13229                           ;lorawan.c: 1422: }
 13230  000A22  D007               	goto	l1201
 13231  000A24                     l1200:
 13232                           
 13233                           ;lorawan.c: 1423: else
 13234                           ;lorawan.c: 1424: {
 13235                           ;lorawan.c: 1425: buffer = buffer + 8;
 13236  000A24  0E08               	movlw	8
 13237  000A26  0101               	movlb	1	; () banked
 13238  000A28  25F3               	addwf	LORAWAN_RxDone@buffer& (0+255),w,b
 13239  000A2A  6FF3               	movwf	LORAWAN_RxDone@buffer& (0+255),b
 13240  000A2C  0E00               	movlw	0
 13241  000A2E  21F4               	addwfc	(LORAWAN_RxDone@buffer+1)& (0+255),w,b
 13242  000A30  6FF4               	movwf	(LORAWAN_RxDone@buffer+1)& (0+255),b
 13243  000A32                     l1201:
 13244                           
 13245                           ;lorawan.c: 1426: }
 13246                           ;lorawan.c: 1427: if ( (sizeof(extractedMic) + hdr->members.fCtrl.fOptsLen + 8) != buffe
      +                          rLength)
 13247                           
 13248                           ; BSR set to: 1
 13249  000A32  0101               	movlb	1	; () banked
 13250  000A34  51F5               	movf	LORAWAN_RxDone@bufferLength& (0+255),w,b
 13251  000A36  0100               	movlb	0	; () banked
 13252  000A38  6FDA               	movwf	??_LORAWAN_RxDone& (0+255),b
 13253  000A3A  6BDB               	clrf	(??_LORAWAN_RxDone+1)& (0+255),b
 13254  000A3C  EE20 F005          	lfsr	2,5
 13255  000A40  51F1               	movf	LORAWAN_RxDone@hdr& (0+255),w,b
 13256  000A42  26D9               	addwf	fsr2l,f,c
 13257  000A44  51F2               	movf	(LORAWAN_RxDone@hdr+1)& (0+255),w,b
 13258  000A46  22DA               	addwfc	fsr2h,f,c
 13259  000A48  50DF               	movf	223,w,c
 13260  000A4A  0B0F               	andlw	15
 13261  000A4C  6FDC               	movwf	(??_LORAWAN_RxDone+2)& (0+255),b
 13262  000A4E  6BDD               	clrf	(??_LORAWAN_RxDone+3)& (0+255),b
 13263  000A50  0E0C               	movlw	12
 13264  000A52  27DC               	addwf	(??_LORAWAN_RxDone+2)& (0+255),f,b
 13265  000A54  0E00               	movlw	0
 13266  000A56  23DD               	addwfc	(??_LORAWAN_RxDone+3)& (0+255),f,b
 13267  000A58  51DA               	movf	??_LORAWAN_RxDone& (0+255),w,b
 13268  000A5A  19DC               	xorwf	(??_LORAWAN_RxDone+2)& (0+255),w,b
 13269  000A5C  E104               	bnz	u11730
 13270  000A5E  51DB               	movf	(??_LORAWAN_RxDone+1)& (0+255),w,b
 13271  000A60  19DD               	xorwf	(??_LORAWAN_RxDone+3)& (0+255),w,b
 13272  000A62  B4D8               	btfsc	status,2,c
 13273  000A64  D098               	goto	l1202
 13274  000A66                     u11730:
 13275                           
 13276                           ; BSR set to: 0
 13277                           ;lorawan.c: 1428: {
 13278                           ;lorawan.c: 1429: fPort = *(buffer++);
 13279  000A66  C1F3  FFD9         	movff	LORAWAN_RxDone@buffer,fsr2l
 13280  000A6A  C1F4  FFDA         	movff	LORAWAN_RxDone@buffer+1,fsr2h
 13281  000A6E  50DF               	movf	indf2,w,c
 13282  000A70  6FDF               	movwf	LORAWAN_RxDone@fPort& (0+255),b
 13283                           
 13284                           ; BSR set to: 0
 13285  000A72  0101               	movlb	1	; () banked
 13286  000A74  4BF3               	infsnz	LORAWAN_RxDone@buffer& (0+255),f,b
 13287  000A76  2BF4               	incf	(LORAWAN_RxDone@buffer+1)& (0+255),f,b
 13288                           
 13289                           ; BSR set to: 1
 13290                           ;lorawan.c: 1431: frmPayloadLength = bufferLength - 8 - hdr->members.fCtrl.fOptsLen - si
      +                          zeof (extractedMic);
 13291  000A78  0100               	movlb	0	; () banked
 13292  000A7A  EE20 F005          	lfsr	2,5
 13293  000A7E  51F1               	movf	LORAWAN_RxDone@hdr& (0+255),w,b
 13294  000A80  26D9               	addwf	fsr2l,f,c
 13295  000A82  51F2               	movf	(LORAWAN_RxDone@hdr+1)& (0+255),w,b
 13296  000A84  22DA               	addwfc	fsr2h,f,c
 13297  000A86  50DF               	movf	223,w,c
 13298  000A88  0B0F               	andlw	15
 13299  000A8A  0800               	sublw	0
 13300  000A8C  0101               	movlb	1	; () banked
 13301  000A8E  25F5               	addwf	LORAWAN_RxDone@bufferLength& (0+255),w,b
 13302  000A90  0FF4               	addlw	244
 13303  000A92  0100               	movlb	0	; () banked
 13304  000A94  6FF0               	movwf	LORAWAN_RxDone@frmPayloadLength& (0+255),b
 13305                           
 13306                           ; BSR set to: 0
 13307                           ;lorawan.c: 1432: bufferIndex = 16 + 8 + hdr->members.fCtrl.fOptsLen + sizeof (fPort);
 13308  000A96  EE20 F005          	lfsr	2,5
 13309  000A9A  51F1               	movf	LORAWAN_RxDone@hdr& (0+255),w,b
 13310  000A9C  26D9               	addwf	fsr2l,f,c
 13311  000A9E  51F2               	movf	(LORAWAN_RxDone@hdr+1)& (0+255),w,b
 13312  000AA0  22DA               	addwfc	fsr2h,f,c
 13313  000AA2  50DF               	movf	223,w,c
 13314  000AA4  0B0F               	andlw	15
 13315  000AA6  0F19               	addlw	25
 13316  000AA8  6FE6               	movwf	LORAWAN_RxDone@bufferIndex& (0+255),b
 13317                           
 13318                           ; BSR set to: 0
 13319                           ;lorawan.c: 1434: if (fPort != 0)
 13320  000AAA  51DF               	movf	LORAWAN_RxDone@fPort& (0+255),w,b
 13321  000AAC  B4D8               	btfsc	status,2,c
 13322  000AAE  D028               	goto	l1203
 13323                           
 13324                           ; BSR set to: 0
 13325                           ;lorawan.c: 1435: {
 13326                           ;lorawan.c: 1436: EncryptFRMPayload (buffer, frmPayloadLength - 1, 1, loRa.fCntDown.valu
      +                          e, loRa.activationParameters.applicationSessionKey, bufferIndex, radioBuffer, 0);
 13327  000AB0  C1F3  F091         	movff	LORAWAN_RxDone@buffer,EncryptFRMPayload@buffer
 13328  000AB4  C1F4  F092         	movff	LORAWAN_RxDone@buffer+1,EncryptFRMPayload@buffer+1
 13329  000AB8  05F0               	decf	LORAWAN_RxDone@frmPayloadLength& (0+255),w,b
 13330  000ABA  6F93               	movwf	EncryptFRMPayload@bufferLength& (0+255),b
 13331  000ABC  0E01               	movlw	1
 13332  000ABE  6F94               	movwf	EncryptFRMPayload@dir& (0+255),b
 13333  000AC0  C214  F095         	movff	_loRa+10,EncryptFRMPayload@frameCounter
 13334  000AC4  C215  F096         	movff	_loRa+11,EncryptFRMPayload@frameCounter+1
 13335  000AC8  C216  F097         	movff	_loRa+12,EncryptFRMPayload@frameCounter+2
 13336  000ACC  C217  F098         	movff	_loRa+13,EncryptFRMPayload@frameCounter+3
 13337  000AD0  0E3C               	movlw	low (_loRa+50)
 13338  000AD2  6F99               	movwf	EncryptFRMPayload@key& (0+255),b
 13339  000AD4  0E02               	movlw	high (_loRa+50)
 13340  000AD6  6F9A               	movwf	(EncryptFRMPayload@key+1)& (0+255),b
 13341  000AD8  C0E6  F09B         	movff	LORAWAN_RxDone@bufferIndex,EncryptFRMPayload@macBufferIndex
 13342  000ADC  0E80               	movlw	low _radioBuffer
 13343  000ADE  6F9C               	movwf	EncryptFRMPayload@bufferToBeEncrypted& (0+255),b
 13344  000AE0  0E05               	movlw	high _radioBuffer
 13345  000AE2  6F9D               	movwf	(EncryptFRMPayload@bufferToBeEncrypted+1)& (0+255),b
 13346  000AE4  0E00               	movlw	0
 13347  000AE6  6F9E               	movwf	EncryptFRMPayload@multicastStatus& (0+255),b
 13348  000AE8  EC96  F027         	call	_EncryptFRMPayload	;wreg free
 13349                           
 13350                           ;lorawan.c: 1437: packet = buffer - 1;
 13351  000AEC  0EFF               	movlw	255
 13352  000AEE  0101               	movlb	1	; () banked
 13353  000AF0  25F3               	addwf	LORAWAN_RxDone@buffer& (0+255),w,b
 13354  000AF2  0100               	movlb	0	; () banked
 13355  000AF4  6FE8               	movwf	LORAWAN_RxDone@packet& (0+255),b
 13356  000AF6  0EFF               	movlw	255
 13357  000AF8  0101               	movlb	1	; () banked
 13358  000AFA  21F4               	addwfc	(LORAWAN_RxDone@buffer+1)& (0+255),w,b
 13359  000AFC  0100               	movlb	0	; () banked
 13360  000AFE  D050               	goto	L29
 13361  000B00                     l1203:
 13362                           
 13363                           ; BSR set to: 0
 13364                           ;lorawan.c: 1439: else
 13365                           ;lorawan.c: 1440: {
 13366                           ;lorawan.c: 1442: if(bufferLength > (13 + hdr->members.fCtrl.fOptsLen))
 13367                           
 13368                           ; BSR set to: 0
 13369  000B00  0101               	movlb	1	; () banked
 13370  000B02  51F5               	movf	LORAWAN_RxDone@bufferLength& (0+255),w,b
 13371  000B04  0100               	movlb	0	; () banked
 13372  000B06  6FDA               	movwf	??_LORAWAN_RxDone& (0+255),b
 13373  000B08  6BDB               	clrf	(??_LORAWAN_RxDone+1)& (0+255),b
 13374  000B0A  EE20 F005          	lfsr	2,5
 13375  000B0E  51F1               	movf	LORAWAN_RxDone@hdr& (0+255),w,b
 13376  000B10  26D9               	addwf	fsr2l,f,c
 13377  000B12  51F2               	movf	(LORAWAN_RxDone@hdr+1)& (0+255),w,b
 13378  000B14  22DA               	addwfc	fsr2h,f,c
 13379  000B16  50DF               	movf	223,w,c
 13380  000B18  0B0F               	andlw	15
 13381  000B1A  6FDC               	movwf	(??_LORAWAN_RxDone+2)& (0+255),b
 13382  000B1C  6BDD               	clrf	(??_LORAWAN_RxDone+3)& (0+255),b
 13383  000B1E  0E0D               	movlw	13
 13384  000B20  27DC               	addwf	(??_LORAWAN_RxDone+2)& (0+255),f,b
 13385  000B22  0E00               	movlw	0
 13386  000B24  23DD               	addwfc	(??_LORAWAN_RxDone+3)& (0+255),f,b
 13387  000B26  51DA               	movf	??_LORAWAN_RxDone& (0+255),w,b
 13388  000B28  5DDC               	subwf	(??_LORAWAN_RxDone+2)& (0+255),w,b
 13389  000B2A  51DD               	movf	(??_LORAWAN_RxDone+3)& (0+255),w,b
 13390  000B2C  0A80               	xorlw	128
 13391  000B2E  6FDE               	movwf	(??_LORAWAN_RxDone+4)& (0+255),b
 13392  000B30  51DB               	movf	(??_LORAWAN_RxDone+1)& (0+255),w,b
 13393  000B32  0A80               	xorlw	128
 13394  000B34  59DE               	subwfb	(??_LORAWAN_RxDone+4)& (0+255),w,b
 13395  000B36  B0D8               	btfsc	status,0,c
 13396  000B38  D02B               	goto	l1205
 13397                           
 13398                           ; BSR set to: 0
 13399                           ;lorawan.c: 1443: {
 13400                           ;lorawan.c: 1445: EncryptFRMPayload (buffer, frmPayloadLength - 1, 1, loRa.fCntDown.valu
      +                          e, loRa.activationParameters.networkSessionKey, bufferIndex, radioBuffer, 0);
 13401  000B3A  C1F3  F091         	movff	LORAWAN_RxDone@buffer,EncryptFRMPayload@buffer
 13402  000B3E  C1F4  F092         	movff	LORAWAN_RxDone@buffer+1,EncryptFRMPayload@buffer+1
 13403  000B42  05F0               	decf	LORAWAN_RxDone@frmPayloadLength& (0+255),w,b
 13404  000B44  6F93               	movwf	EncryptFRMPayload@bufferLength& (0+255),b
 13405  000B46  0E01               	movlw	1
 13406  000B48  6F94               	movwf	EncryptFRMPayload@dir& (0+255),b
 13407  000B4A  C214  F095         	movff	_loRa+10,EncryptFRMPayload@frameCounter
 13408  000B4E  C215  F096         	movff	_loRa+11,EncryptFRMPayload@frameCounter+1
 13409  000B52  C216  F097         	movff	_loRa+12,EncryptFRMPayload@frameCounter+2
 13410  000B56  C217  F098         	movff	_loRa+13,EncryptFRMPayload@frameCounter+3
 13411  000B5A  0E2C               	movlw	low (_loRa+34)
 13412  000B5C  6F99               	movwf	EncryptFRMPayload@key& (0+255),b
 13413  000B5E  0E02               	movlw	high (_loRa+34)
 13414  000B60  6F9A               	movwf	(EncryptFRMPayload@key+1)& (0+255),b
 13415  000B62  C0E6  F09B         	movff	LORAWAN_RxDone@bufferIndex,EncryptFRMPayload@macBufferIndex
 13416  000B66  0E80               	movlw	low _radioBuffer
 13417  000B68  6F9C               	movwf	EncryptFRMPayload@bufferToBeEncrypted& (0+255),b
 13418  000B6A  0E05               	movlw	high _radioBuffer
 13419  000B6C  6F9D               	movwf	(EncryptFRMPayload@bufferToBeEncrypted+1)& (0+255),b
 13420  000B6E  0E00               	movlw	0
 13421  000B70  6F9E               	movwf	EncryptFRMPayload@multicastStatus& (0+255),b
 13422  000B72  EC96  F027         	call	_EncryptFRMPayload	;wreg free
 13423                           
 13424                           ;lorawan.c: 1446: buffer = MacExecuteCommands(buffer, frmPayloadLength - 1 );
 13425  000B76  C1F3  F0B0         	movff	LORAWAN_RxDone@buffer,MacExecuteCommands@buffer
 13426  000B7A  C1F4  F0B1         	movff	LORAWAN_RxDone@buffer+1,MacExecuteCommands@buffer+1
 13427  000B7E  0100               	movlb	0	; () banked
 13428  000B80  05F0               	decf	LORAWAN_RxDone@frmPayloadLength& (0+255),w,b
 13429  000B82  6FB2               	movwf	MacExecuteCommands@fOptsLen& (0+255),b
 13430  000B84  EC5B  F019         	call	_MacExecuteCommands	;wreg free
 13431  000B88  C0B0  F1F3         	movff	?_MacExecuteCommands,LORAWAN_RxDone@buffer
 13432  000B8C  C0B1  F1F4         	movff	?_MacExecuteCommands+1,LORAWAN_RxDone@buffer+1
 13433  000B90                     l1205:
 13434                           
 13435                           ;lorawan.c: 1447: }
 13436                           ;lorawan.c: 1449: frmPayloadLength = 0;
 13437  000B90  0E00               	movlw	0
 13438  000B92  0100               	movlb	0	; () banked
 13439  000B94  D001               	goto	L9
 13440  000B96                     l1202:
 13441                           
 13442                           ; BSR set to: 0
 13443                           ;lorawan.c: 1453: else
 13444                           ;lorawan.c: 1454: {
 13445                           ;lorawan.c: 1455: frmPayloadLength = 0;
 13446                           
 13447                           ; BSR set to: 0
 13448  000B96  0E00               	movlw	0
 13449  000B98                     L9:
 13450  000B98  6FF0               	movwf	LORAWAN_RxDone@frmPayloadLength& (0+255),b
 13451                           
 13452                           ; BSR set to: 0
 13453                           ;lorawan.c: 1456: packet = (0);
 13454  000B9A  0E00               	movlw	0
 13455  000B9C  6FE8               	movwf	LORAWAN_RxDone@packet& (0+255),b
 13456  000B9E  0E00               	movlw	0
 13457  000BA0                     L29:
 13458  000BA0  6FE9               	movwf	(LORAWAN_RxDone@packet+1)& (0+255),b
 13459                           
 13460                           ; BSR set to: 0
 13461                           ;lorawan.c: 1457: }
 13462                           ;lorawan.c: 1459: loRa.counterRepetitionsUnconfirmedUplink = 1;
 13463                           
 13464                           ; BSR set to: 0
 13465  000BA2  0E01               	movlw	1
 13466  000BA4  0102               	movlb	2	; () banked
 13467  000BA6  6FE2               	movwf	(_loRa+216)& (0+255),b
 13468                           
 13469                           ; BSR set to: 2
 13470                           ;lorawan.c: 1461: loRa.adrAckCnt = 0;
 13471  000BA8  0E00               	movlw	0
 13472  000BAA  6FDB               	movwf	(_loRa+209)& (0+255),b
 13473  000BAC  0E00               	movlw	0
 13474  000BAE  6FDA               	movwf	(_loRa+208)& (0+255),b
 13475                           
 13476                           ; BSR set to: 2
 13477                           ;lorawan.c: 1462: loRa.counterAdrAckDelay = 0;
 13478  000BB0  0E00               	movlw	0
 13479  000BB2  6FF8               	movwf	(_loRa+238)& (0+255),b
 13480                           
 13481                           ; BSR set to: 2
 13482                           ;lorawan.c: 1463: loRa.lorawanMacStatus.adrAckRequest = 0;
 13483  000BB4  990A               	bcf	_loRa& (0+255),4,b
 13484                           
 13485                           ; BSR set to: 2
 13486                           ;lorawan.c: 1465: loRa.macStatus.rxDone = 1;
 13487  000BB6  830D               	bsf	(_loRa+3)& (0+255),1,b
 13488                           
 13489                           ; BSR set to: 2
 13490                           ;lorawan.c: 1467: if ( loRa.lorawanMacStatus.ackRequiredFromNextDownlinkMessage == 1 )
 13491  000BB8  A10A               	btfss	_loRa& (0+255),0,b
 13492  000BBA  D055               	goto	l1207
 13493                           
 13494                           ; BSR set to: 2
 13495                           ;lorawan.c: 1468: {
 13496                           ;lorawan.c: 1469: if (hdr->members.fCtrl.ack == 1)
 13497  000BBC  0100               	movlb	0	; () banked
 13498  000BBE  EE20 F005          	lfsr	2,5
 13499  000BC2  51F1               	movf	LORAWAN_RxDone@hdr& (0+255),w,b
 13500  000BC4  26D9               	addwf	fsr2l,f,c
 13501  000BC6  51F2               	movf	(LORAWAN_RxDone@hdr+1)& (0+255),w,b
 13502  000BC8  22DA               	addwfc	fsr2h,f,c
 13503  000BCA  AADF               	btfss	indf2,5,c
 13504  000BCC  D049               	goto	l1208
 13505                           
 13506                           ; BSR set to: 0
 13507                           ;lorawan.c: 1470: {
 13508                           ;lorawan.c: 1471: loRa.lorawanMacStatus.ackRequiredFromNextDownlinkMessage = 0;
 13509  000BCE  0102               	movlb	2	; () banked
 13510  000BD0  910A               	bcf	_loRa& (0+255),0,b
 13511                           
 13512                           ;lorawan.c: 1472: loRa.macStatus.macState = IDLE;
 13513  000BD2  910C               	bcf	(_loRa+2)& (0+255),0,b
 13514  000BD4  930C               	bcf	(_loRa+2)& (0+255),1,b
 13515  000BD6  950C               	bcf	(_loRa+2)& (0+255),2,b
 13516  000BD8  970C               	bcf	(_loRa+2)& (0+255),3,b
 13517                           
 13518                           ; BSR set to: 2
 13519                           ;lorawan.c: 1473: if (rxPayload.RxAppData != (0))
 13520  000BDA  0101               	movlb	1	; () banked
 13521  000BDC  510C               	movf	_rxPayload& (0+255),w,b
 13522  000BDE  110D               	iorwf	(_rxPayload+1)& (0+255),w,b
 13523  000BE0  B4D8               	btfsc	status,2,c
 13524  000BE2  D017               	goto	u11799
 13525                           
 13526                           ; BSR set to: 1
 13527                           ;lorawan.c: 1474: {
 13528                           ;lorawan.c: 1475: loRa.lorawanMacStatus.synchronization = 0;
 13529  000BE4  0102               	movlb	2	; () banked
 13530  000BE6  9B0A               	bcf	_loRa& (0+255),5,b
 13531                           
 13532                           ; BSR set to: 2
 13533                           ;lorawan.c: 1476: rxPayload.RxAppData (packet, frmPayloadLength, MAC_OK);
 13534  000BE8  C0E8  F060         	movff	LORAWAN_RxDone@packet,RxData@pData
 13535  000BEC  C0E9  F061         	movff	LORAWAN_RxDone@packet+1,RxData@pData+1
 13536  000BF0  C0F0  F062         	movff	LORAWAN_RxDone@frmPayloadLength,RxData@dataLength
 13537  000BF4  0E01               	movlw	1
 13538  000BF6  0100               	movlb	0	; () banked
 13539  000BF8  6F63               	movwf	RxData@status& (0+255),b
 13540  000BFA  D801               	call	u11798
 13541  000BFC  D00A               	goto	u11799
 13542  000BFE                     u11798:
 13543  000BFE  0005               	push	
 13544  000C00  6EFA               	movwf	pclath,c
 13545  000C02  0101               	movlb	1	; () banked
 13546  000C04  510C               	movf	_rxPayload& (0+255),w,b
 13547  000C06  6EFD               	movwf	tosl,c
 13548  000C08  510D               	movf	(_rxPayload+1)& (0+255),w,b
 13549  000C0A  6EFE               	movwf	tosh,c
 13550  000C0C  6AFF               	clrf	tosu,c
 13551  000C0E  50FA               	movf	pclath,w,c
 13552  000C10  0012               	return		;indir
 13553  000C12                     u11799:
 13554                           
 13555                           ;lorawan.c: 1477: }
 13556                           ;lorawan.c: 1478: loRa.macStatus.rxDone = 0;
 13557  000C12  0102               	movlb	2	; () banked
 13558  000C14  930D               	bcf	(_loRa+3)& (0+255),1,b
 13559                           
 13560                           ; BSR set to: 2
 13561                           ;lorawan.c: 1479: if ( (loRa.macStatus.automaticReply == 1) && (loRa.lorawanMacStatus.sy
      +                          nchronization == 0) && ( (loRa.lorawanMacStatus.ackRequiredFromNextUplinkMessage == 1) |
      +                          | (loRa.lorawanMacStatus.fPending == 1) ) )
 13562  000C16  BB0C               	btfsc	(_loRa+2)& (0+255),5,b
 13563                           
 13564                           ; BSR set to: 2
 13565  000C18  BB0A               	btfsc	_loRa& (0+255),5,b
 13566  000C1A  D06C               	goto	l1222
 13567                           
 13568                           ; BSR set to: 2
 13569  000C1C  B30A               	btfsc	_loRa& (0+255),1,b
 13570  000C1E  D002               	goto	u11830
 13571                           
 13572                           ; BSR set to: 2
 13573  000C20  A70A               	btfss	_loRa& (0+255),3,b
 13574  000C22  D068               	goto	l1222
 13575  000C24                     u11830:
 13576                           
 13577                           ; BSR set to: 2
 13578                           ;lorawan.c: 1480: {
 13579                           ;lorawan.c: 1481: if (SearchAvailableChannel (loRa.maxChannels, 1, &channelIndex) == OK)
 13580                           
 13581                           ; BSR set to: 2
 13582  000C24  0E01               	movlw	1
 13583  000C26  0100               	movlb	0	; () banked
 13584  000C28  6FAF               	movwf	SearchAvailableChannel@transmissionType& (0+255),b
 13585  000C2A  0EE0               	movlw	low LORAWAN_RxDone@channelIndex
 13586  000C2C  6FB0               	movwf	SearchAvailableChannel@channelIndex& (0+255),b
 13587  000C2E  0E00               	movlw	high LORAWAN_RxDone@channelIndex
 13588  000C30  6FB1               	movwf	(SearchAvailableChannel@channelIndex+1)& (0+255),b
 13589  000C32  0102               	movlb	2	; () banked
 13590  000C34  51F7               	movf	(_loRa+237)& (0+255),w,b
 13591  000C36  EC20  F02F         	call	_SearchAvailableChannel
 13592  000C3A  0900               	iorlw	0
 13593  000C3C  A4D8               	btfss	status,2,c
 13594  000C3E  D00D               	goto	l1213
 13595                           
 13596                           ;lorawan.c: 1482: {
 13597                           ;lorawan.c: 1483: LORAWAN_Send (0, 0, 0, 0);
 13598  000C40  0E00               	movlw	0
 13599  000C42  0100               	movlb	0	; () banked
 13600  000C44  6FD3               	movwf	LORAWAN_Send@port& (0+255),b
 13601  000C46  0E00               	movlw	0
 13602  000C48  6FD4               	movwf	LORAWAN_Send@buffer& (0+255),b
 13603  000C4A  0E00               	movlw	0
 13604  000C4C  6FD5               	movwf	(LORAWAN_Send@buffer+1)& (0+255),b
 13605  000C4E  0E00               	movlw	0
 13606  000C50  6FD6               	movwf	LORAWAN_Send@bufferLength& (0+255),b
 13607  000C52  0E00               	movlw	0
 13608  000C54  EC71  F036         	call	_LORAWAN_Send
 13609  000C58  D048               	goto	l11483
 13610  000C5A                     l1213:
 13611                           
 13612                           ;lorawan.c: 1486: else
 13613                           ;lorawan.c: 1487: {
 13614                           ;lorawan.c: 1489: StartReTxTimer();
 13615                           
 13616                           ; BSR set to: 2
 13617  000C5A  EC5C  F028         	call	_StartReTxTimer	;wreg free
 13618                           
 13619                           ;lorawan.c: 1490: }
 13620                           ;lorawan.c: 1491: }
 13621                           ;lorawan.c: 1492: }
 13622  000C5E  D04A               	goto	l1222
 13623  000C60                     l1208:
 13624                           
 13625                           ;lorawan.c: 1494: else
 13626                           ;lorawan.c: 1495: {
 13627                           ;lorawan.c: 1496: UpdateRetransmissionAckTimeoutState ();
 13628  000C60  EC9A  F03E         	call	_UpdateRetransmissionAckTimeoutState	;wreg free
 13629                           
 13630                           ;lorawan.c: 1497: }
 13631                           ;lorawan.c: 1498: }
 13632  000C64  D047               	goto	l1222
 13633  000C66                     l1207:
 13634                           
 13635                           ; BSR set to: 2
 13636                           ;lorawan.c: 1499: else
 13637                           ;lorawan.c: 1500: {
 13638                           ;lorawan.c: 1501: loRa.macStatus.macState = IDLE;
 13639  000C66  910C               	bcf	(_loRa+2)& (0+255),0,b
 13640  000C68  930C               	bcf	(_loRa+2)& (0+255),1,b
 13641  000C6A  950C               	bcf	(_loRa+2)& (0+255),2,b
 13642  000C6C  970C               	bcf	(_loRa+2)& (0+255),3,b
 13643                           
 13644                           ; BSR set to: 2
 13645                           ;lorawan.c: 1503: if (rxPayload.RxAppData != (0))
 13646  000C6E  0101               	movlb	1	; () banked
 13647  000C70  510C               	movf	_rxPayload& (0+255),w,b
 13648  000C72  110D               	iorwf	(_rxPayload+1)& (0+255),w,b
 13649  000C74  B4D8               	btfsc	status,2,c
 13650  000C76  D017               	goto	u11869
 13651                           
 13652                           ; BSR set to: 1
 13653                           ;lorawan.c: 1504: {
 13654                           ;lorawan.c: 1505: loRa.lorawanMacStatus.synchronization = 0;
 13655  000C78  0102               	movlb	2	; () banked
 13656  000C7A  9B0A               	bcf	_loRa& (0+255),5,b
 13657                           
 13658                           ; BSR set to: 2
 13659                           ;lorawan.c: 1506: rxPayload.RxAppData (packet, frmPayloadLength, MAC_OK);
 13660  000C7C  C0E8  F060         	movff	LORAWAN_RxDone@packet,RxData@pData
 13661  000C80  C0E9  F061         	movff	LORAWAN_RxDone@packet+1,RxData@pData+1
 13662  000C84  C0F0  F062         	movff	LORAWAN_RxDone@frmPayloadLength,RxData@dataLength
 13663  000C88  0E01               	movlw	1
 13664  000C8A  0100               	movlb	0	; () banked
 13665  000C8C  6F63               	movwf	RxData@status& (0+255),b
 13666  000C8E  D801               	call	u11868
 13667  000C90  D00A               	goto	u11869
 13668  000C92                     u11868:
 13669  000C92  0005               	push	
 13670  000C94  6EFA               	movwf	pclath,c
 13671  000C96  0101               	movlb	1	; () banked
 13672  000C98  510C               	movf	_rxPayload& (0+255),w,b
 13673  000C9A  6EFD               	movwf	tosl,c
 13674  000C9C  510D               	movf	(_rxPayload+1)& (0+255),w,b
 13675  000C9E  6EFE               	movwf	tosh,c
 13676  000CA0  6AFF               	clrf	tosu,c
 13677  000CA2  50FA               	movf	pclath,w,c
 13678  000CA4  0012               	return		;indir
 13679  000CA6                     u11869:
 13680                           
 13681                           ;lorawan.c: 1507: }
 13682                           ;lorawan.c: 1509: if ( (loRa.macStatus.automaticReply == 1) && (loRa.lorawanMacStatus.sy
      +                          nchronization == 0) && ( (loRa.lorawanMacStatus.ackRequiredFromNextUplinkMessage == 1) |
      +                          | (loRa.lorawanMacStatus.fPending == 1) ) )
 13683  000CA6  0102               	movlb	2	; () banked
 13684  000CA8  BB0C               	btfsc	(_loRa+2)& (0+255),5,b
 13685                           
 13686                           ; BSR set to: 2
 13687  000CAA  BB0A               	btfsc	_loRa& (0+255),5,b
 13688  000CAC  D023               	goto	l1222
 13689                           
 13690                           ; BSR set to: 2
 13691  000CAE  B30A               	btfsc	_loRa& (0+255),1,b
 13692  000CB0  D002               	goto	u11900
 13693                           
 13694                           ; BSR set to: 2
 13695  000CB2  A70A               	btfss	_loRa& (0+255),3,b
 13696  000CB4  D01F               	goto	l1222
 13697  000CB6                     u11900:
 13698                           
 13699                           ; BSR set to: 2
 13700                           ;lorawan.c: 1510: {
 13701                           ;lorawan.c: 1511: if (SearchAvailableChannel (loRa.maxChannels, 1, &channelIndex) == OK)
 13702                           
 13703                           ; BSR set to: 2
 13704  000CB6  0E01               	movlw	1
 13705  000CB8  0100               	movlb	0	; () banked
 13706  000CBA  6FAF               	movwf	SearchAvailableChannel@transmissionType& (0+255),b
 13707  000CBC  0EE0               	movlw	low LORAWAN_RxDone@channelIndex
 13708  000CBE  6FB0               	movwf	SearchAvailableChannel@channelIndex& (0+255),b
 13709  000CC0  0E00               	movlw	high LORAWAN_RxDone@channelIndex
 13710  000CC2  6FB1               	movwf	(SearchAvailableChannel@channelIndex+1)& (0+255),b
 13711  000CC4  0102               	movlb	2	; () banked
 13712  000CC6  51F7               	movf	(_loRa+237)& (0+255),w,b
 13713  000CC8  EC20  F02F         	call	_SearchAvailableChannel
 13714  000CCC  0900               	iorlw	0
 13715  000CCE  A4D8               	btfss	status,2,c
 13716  000CD0  D00F               	goto	l1221
 13717                           
 13718                           ;lorawan.c: 1512: {
 13719                           ;lorawan.c: 1513: LORAWAN_Send (0, 0, 0, 0);
 13720  000CD2  0E00               	movlw	0
 13721  000CD4  0100               	movlb	0	; () banked
 13722  000CD6  6FD3               	movwf	LORAWAN_Send@port& (0+255),b
 13723  000CD8  0E00               	movlw	0
 13724  000CDA  6FD4               	movwf	LORAWAN_Send@buffer& (0+255),b
 13725  000CDC  0E00               	movlw	0
 13726  000CDE  6FD5               	movwf	(LORAWAN_Send@buffer+1)& (0+255),b
 13727  000CE0  0E00               	movlw	0
 13728  000CE2  6FD6               	movwf	LORAWAN_Send@bufferLength& (0+255),b
 13729  000CE4  0E00               	movlw	0
 13730  000CE6  EC71  F036         	call	_LORAWAN_Send
 13731  000CEA                     l11483:
 13732                           
 13733                           ;lorawan.c: 1514: loRa.lorawanMacStatus.fPending = 0;
 13734  000CEA  0102               	movlb	2	; () banked
 13735  000CEC  970A               	bcf	_loRa& (0+255),3,b
 13736                           
 13737                           ;lorawan.c: 1515: }
 13738  000CEE  D002               	goto	l1222
 13739  000CF0                     l1221:
 13740                           
 13741                           ;lorawan.c: 1516: else
 13742                           ;lorawan.c: 1517: {
 13743                           ;lorawan.c: 1519: StartReTxTimer();
 13744                           
 13745                           ; BSR set to: 2
 13746  000CF0  EC5C  F028         	call	_StartReTxTimer	;wreg free
 13747  000CF4                     l1222:
 13748                           
 13749                           ;lorawan.c: 1520: }
 13750                           ;lorawan.c: 1521: }
 13751                           ;lorawan.c: 1522: }
 13752                           ;lorawan.c: 1524: if (CLASS_C == loRa.deviceClass)
 13753  000CF4  0E02               	movlw	2
 13754  000CF6  0102               	movlb	2	; () banked
 13755  000CF8  191C               	xorwf	(_loRa+18)& (0+255),w,b
 13756  000CFA  A4D8               	btfss	status,2,c
 13757  000CFC  0012               	return	
 13758                           
 13759                           ; BSR set to: 2
 13760                           ;lorawan.c: 1525: {
 13761                           ;lorawan.c: 1526: loRa.macStatus.macState = CLASS_C_RX2_2_OPEN;
 13762  000CFE  510C               	movf	(_loRa+2)& (0+255),w,b
 13763  000D00  0BF0               	andlw	-16
 13764  000D02  0909               	iorlw	9
 13765  000D04  6F0C               	movwf	(_loRa+2)& (0+255),b
 13766                           
 13767                           ; BSR set to: 2
 13768                           ;lorawan.c: 1527: LORAWAN_EnterContinuousReceive();
 13769  000D06  ECE6  F03D         	call	_LORAWAN_EnterContinuousReceive	;wreg free
 13770                           
 13771                           ;lorawan.c: 1528: }
 13772                           ;lorawan.c: 1529: }
 13773  000D0A  0012               	return	
 13774  000D0C                     l1162:
 13775                           
 13776                           ;lorawan.c: 1530: else
 13777                           ;lorawan.c: 1531: {
 13778                           ;lorawan.c: 1533: SetReceptionNotOkState ();
 13779  000D0C  ECA7  F03D         	call	_SetReceptionNotOkState	;wreg free
 13780                           
 13781                           ;lorawan.c: 1535: }
 13782                           ;lorawan.c: 1536: }
 13783                           
 13784                           ;lorawan.c: 1534: return INVALID_PARAMETER;
 13785                           ;	Return value of _LORAWAN_RxDone is never used
 13786  000D10  0012               	return	
 13787  000D12                     l1148:
 13788                           
 13789                           ;lorawan.c: 1537: else
 13790                           ;lorawan.c: 1538: {
 13791                           ;lorawan.c: 1540: if ( rxPayload.RxAppData != (0) )
 13792  000D12  0101               	movlb	1	; () banked
 13793  000D14  510C               	movf	_rxPayload& (0+255),w,b
 13794  000D16  110D               	iorwf	(_rxPayload+1)& (0+255),w,b
 13795  000D18  B4D8               	btfsc	status,2,c
 13796  000D1A  0012               	return	
 13797                           
 13798                           ; BSR set to: 1
 13799                           ;lorawan.c: 1541: {
 13800                           ;lorawan.c: 1542: if ((RADIO_GetStatus() & (1 << (3))) == 0)
 13801  000D1C  ECAD  F04A         	call	_RADIO_GetStatus	;wreg free
 13802  000D20  0100               	movlb	0	; () banked
 13803  000D22  6FDA               	movwf	??_LORAWAN_RxDone& (0+255),b
 13804  000D24  B7DA               	btfsc	??_LORAWAN_RxDone& (0+255),3,b
 13805  000D26  D014               	goto	l1227
 13806                           
 13807                           ; BSR set to: 0
 13808                           ;lorawan.c: 1543: {
 13809                           ;lorawan.c: 1544: rxPayload.RxAppData(buffer, bufferLength, RADIO_OK);
 13810  000D28  C1F3  F060         	movff	LORAWAN_RxDone@buffer,RxData@pData
 13811  000D2C  C1F4  F061         	movff	LORAWAN_RxDone@buffer+1,RxData@pData+1
 13812  000D30  C1F5  F062         	movff	LORAWAN_RxDone@bufferLength,RxData@dataLength
 13813  000D34  0E03               	movlw	3
 13814  000D36  6F63               	movwf	RxData@status& (0+255),b
 13815  000D38  D801               	call	u11958
 13816  000D3A  0012               	return	
 13817  000D3C                     u11958:
 13818  000D3C  0005               	push	
 13819  000D3E  6EFA               	movwf	pclath,c
 13820  000D40  0101               	movlb	1	; () banked
 13821  000D42  510C               	movf	_rxPayload& (0+255),w,b
 13822  000D44  6EFD               	movwf	tosl,c
 13823  000D46  510D               	movf	(_rxPayload+1)& (0+255),w,b
 13824  000D48  6EFE               	movwf	tosh,c
 13825  000D4A  6AFF               	clrf	tosu,c
 13826  000D4C  50FA               	movf	pclath,w,c
 13827  000D4E  0012               	return		;indir
 13828  000D50                     l1227:
 13829                           
 13830                           ;lorawan.c: 1546: else
 13831                           ;lorawan.c: 1547: {
 13832                           ;lorawan.c: 1548: rxPayload.RxAppData(buffer, bufferLength, RADIO_NOT_OK);
 13833  000D50  C1F3  F060         	movff	LORAWAN_RxDone@buffer,RxData@pData
 13834  000D54  C1F4  F061         	movff	LORAWAN_RxDone@buffer+1,RxData@pData+1
 13835  000D58  C1F5  F062         	movff	LORAWAN_RxDone@bufferLength,RxData@dataLength
 13836  000D5C  0E02               	movlw	2
 13837  000D5E  0100               	movlb	0	; () banked
 13838  000D60  6F63               	movwf	RxData@status& (0+255),b
 13839  000D62  D801               	call	u11968
 13840  000D64  0012               	return	
 13841  000D66                     u11968:
 13842  000D66  0005               	push	
 13843  000D68  6EFA               	movwf	pclath,c
 13844  000D6A  0101               	movlb	1	; () banked
 13845  000D6C  510C               	movf	_rxPayload& (0+255),w,b
 13846  000D6E  6EFD               	movwf	tosl,c
 13847  000D70  510D               	movf	(_rxPayload+1)& (0+255),w,b
 13848  000D72  6EFE               	movwf	tosh,c
 13849  000D74  6AFF               	clrf	tosu,c
 13850  000D76  50FA               	movf	pclath,w,c
 13851  000D78  0012               	return		;indir
 13852  000D7A                     __end_of_LORAWAN_RxDone:
 13853                           	opt stack 0
 13854                           tosu	equ	0xFFF
 13855                           tosh	equ	0xFFE
 13856                           tosl	equ	0xFFD
 13857                           pclath	equ	0xFFA
 13858                           tblptru	equ	0xFF8
 13859                           tblptrh	equ	0xFF7
 13860                           tblptrl	equ	0xFF6
 13861                           tablat	equ	0xFF5
 13862                           prodh	equ	0xFF4
 13863                           prodl	equ	0xFF3
 13864                           intcon	equ	0xFF2
 13865                           intcon2	equ	0xFF1
 13866                           intcon3	equ	0xFF0
 13867                           postinc0	equ	0xFEE
 13868                           wreg	equ	0xFE8
 13869                           postinc1	equ	0xFE6
 13870                           postdec1	equ	0xFE5
 13871                           plusw1	equ	0xFE3
 13872                           fsr1h	equ	0xFE2
 13873                           fsr1l	equ	0xFE1
 13874                           indf2	equ	0xFDF
 13875                           postinc2	equ	0xFDE
 13876                           postdec2	equ	0xFDD
 13877                           fsr2h	equ	0xFDA
 13878                           fsr2l	equ	0xFD9
 13879                           status	equ	0xFD8
 13880                           
 13881 ;; *************** function _UpdateRetransmissionAckTimeoutState *****************
 13882 ;; Defined at:
 13883 ;;		line 1034 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 13884 ;; Parameters:    Size  Location     Type
 13885 ;;		None
 13886 ;; Auto vars:     Size  Location     Type
 13887 ;;		None
 13888 ;; Return value:  Size  Location     Type
 13889 ;;                  1    wreg      void 
 13890 ;; Registers used:
 13891 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 13892 ;; Tracked objects:
 13893 ;;		On entry : 0/0
 13894 ;;		On exit  : 0/0
 13895 ;;		Unchanged: 0/0
 13896 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13897 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13898 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13899 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13900 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13901 ;;Total ram usage:        4 bytes
 13902 ;; Hardware stack levels used:    1
 13903 ;; Hardware stack levels required when called:   11
 13904 ;; This function calls:
 13905 ;;		_SwTimerSetTimeout
 13906 ;;		_SwTimerStart
 13907 ;;		___lldiv
 13908 ;; This function is called by:
 13909 ;;		_AckRetransmissionCallback
 13910 ;;		_LORAWAN_RxDone
 13911 ;; This function uses a non-reentrant model
 13912 ;;
 13913                           
 13914                           	psect	text63
 13915  007D34                     __ptext63:
 13916                           	opt stack 0
 13917  007D34                     _UpdateRetransmissionAckTimeoutState:
 13918                           	opt stack 16
 13919                           
 13920                           ;lorawan.c: 1036: loRa.macStatus.macState = RETRANSMISSION_DELAY;
 13921                           
 13922                           ;incstack = 0
 13923  007D34  0102               	movlb	2	; () banked
 13924  007D36  510C               	movf	(_loRa+2)& (0+255),w,b
 13925  007D38  0BF0               	andlw	-16
 13926  007D3A  0906               	iorlw	6
 13927  007D3C  6F0C               	movwf	(_loRa+2)& (0+255),b
 13928                           
 13929                           ; BSR set to: 2
 13930                           ;lorawan.c: 1037: SwTimerSetTimeout(loRa.ackTimeoutTimerId, ( (((uint32_t)(loRa.protocol
      +                          Parameters.ackTimeout)) << (12)) / 125UL ));
 13931  007D3E  51AA               	movf	(_loRa+160)& (0+255),w,b
 13932  007D40  0100               	movlb	0	; () banked
 13933  007D42  6F9A               	movwf	??_UpdateRetransmissionAckTimeoutState& (0+255),b
 13934  007D44  0102               	movlb	2	; () banked
 13935  007D46  51AB               	movf	(_loRa+161)& (0+255),w,b
 13936  007D48  0100               	movlb	0	; () banked
 13937  007D4A  6F9B               	movwf	(??_UpdateRetransmissionAckTimeoutState+1)& (0+255),b
 13938  007D4C  6B9C               	clrf	(??_UpdateRetransmissionAckTimeoutState+2)& (0+255),b
 13939  007D4E  6B9D               	clrf	(??_UpdateRetransmissionAckTimeoutState+3)& (0+255),b
 13940  007D50  0E0C               	movlw	12
 13941  007D52                     u10775:
 13942  007D52  90D8               	bcf	status,0,c
 13943  007D54  379A               	rlcf	??_UpdateRetransmissionAckTimeoutState& (0+255),f,b
 13944  007D56  379B               	rlcf	(??_UpdateRetransmissionAckTimeoutState+1)& (0+255),f,b
 13945  007D58  379C               	rlcf	(??_UpdateRetransmissionAckTimeoutState+2)& (0+255),f,b
 13946  007D5A  379D               	rlcf	(??_UpdateRetransmissionAckTimeoutState+3)& (0+255),f,b
 13947  007D5C  2EE8               	decfsz	wreg,f,c
 13948  007D5E  D7F9               	goto	u10775
 13949  007D60  C09A  F060         	movff	??_UpdateRetransmissionAckTimeoutState,___lldiv@dividend
 13950  007D64  C09B  F061         	movff	??_UpdateRetransmissionAckTimeoutState+1,___lldiv@dividend+1
 13951  007D68  C09C  F062         	movff	??_UpdateRetransmissionAckTimeoutState+2,___lldiv@dividend+2
 13952  007D6C  C09D  F063         	movff	??_UpdateRetransmissionAckTimeoutState+3,___lldiv@dividend+3
 13953  007D70  0E7D               	movlw	125
 13954  007D72  6F64               	movwf	___lldiv@divisor& (0+255),b
 13955  007D74  0E00               	movlw	0
 13956  007D76  6F65               	movwf	(___lldiv@divisor+1)& (0+255),b
 13957  007D78  0E00               	movlw	0
 13958  007D7A  6F66               	movwf	(___lldiv@divisor+2)& (0+255),b
 13959  007D7C  0E00               	movlw	0
 13960  007D7E  6F67               	movwf	(___lldiv@divisor+3)& (0+255),b
 13961  007D80  ECE4  F03C         	call	___lldiv	;wreg free
 13962  007D84  C060  F06D         	movff	?___lldiv,SwTimerSetTimeout@timeout
 13963  007D88  C061  F06E         	movff	?___lldiv+1,SwTimerSetTimeout@timeout+1
 13964  007D8C  C062  F06F         	movff	?___lldiv+2,SwTimerSetTimeout@timeout+2
 13965  007D90  C063  F070         	movff	?___lldiv+3,SwTimerSetTimeout@timeout+3
 13966  007D94  0102               	movlb	2	; () banked
 13967  007D96  51F2               	movf	(_loRa+232)& (0+255),w,b
 13968  007D98  EC01  F045         	call	_SwTimerSetTimeout
 13969                           
 13970                           ;lorawan.c: 1038: SwTimerStart(loRa.ackTimeoutTimerId);
 13971  007D9C  0102               	movlb	2	; () banked
 13972  007D9E  51F2               	movf	(_loRa+232)& (0+255),w,b
 13973  007DA0  ECB4  F03A         	call	_SwTimerStart
 13974  007DA4  0012               	return		;funcret
 13975  007DA6                     __end_of_UpdateRetransmissionAckTimeoutState:
 13976                           	opt stack 0
 13977                           tosu	equ	0xFFF
 13978                           tosh	equ	0xFFE
 13979                           tosl	equ	0xFFD
 13980                           pclath	equ	0xFFA
 13981                           tblptru	equ	0xFF8
 13982                           tblptrh	equ	0xFF7
 13983                           tblptrl	equ	0xFF6
 13984                           tablat	equ	0xFF5
 13985                           prodh	equ	0xFF4
 13986                           prodl	equ	0xFF3
 13987                           intcon	equ	0xFF2
 13988                           intcon2	equ	0xFF1
 13989                           intcon3	equ	0xFF0
 13990                           postinc0	equ	0xFEE
 13991                           wreg	equ	0xFE8
 13992                           postinc1	equ	0xFE6
 13993                           postdec1	equ	0xFE5
 13994                           plusw1	equ	0xFE3
 13995                           fsr1h	equ	0xFE2
 13996                           fsr1l	equ	0xFE1
 13997                           indf2	equ	0xFDF
 13998                           postinc2	equ	0xFDE
 13999                           postdec2	equ	0xFDD
 14000                           fsr2h	equ	0xFDA
 14001                           fsr2l	equ	0xFD9
 14002                           status	equ	0xFD8
 14003                           
 14004 ;; *************** function _UpdateDLSettings *****************
 14005 ;; Defined at:
 14006 ;;		line 888 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 14007 ;; Parameters:    Size  Location     Type
 14008 ;;  dlRx2Dr         1    wreg     unsigned char 
 14009 ;;  dlRx1DrOffse    1    0[BANK0 ] unsigned char 
 14010 ;; Auto vars:     Size  Location     Type
 14011 ;;  dlRx2Dr         1    1[BANK0 ] unsigned char 
 14012 ;; Return value:  Size  Location     Type
 14013 ;;                  1    wreg      void 
 14014 ;; Registers used:
 14015 ;;		wreg, status,2, status,0
 14016 ;; Tracked objects:
 14017 ;;		On entry : 0/0
 14018 ;;		On exit  : 0/0
 14019 ;;		Unchanged: 0/0
 14020 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14021 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14022 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14023 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14024 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14025 ;;Total ram usage:        2 bytes
 14026 ;; Hardware stack levels used:    1
 14027 ;; Hardware stack levels required when called:    7
 14028 ;; This function calls:
 14029 ;;		Nothing
 14030 ;; This function is called by:
 14031 ;;		_LORAWAN_RxDone
 14032 ;; This function uses a non-reentrant model
 14033 ;;
 14034                           
 14035                           	psect	text64
 14036  00927A                     __ptext64:
 14037                           	opt stack 0
 14038  00927A                     _UpdateDLSettings:
 14039                           	opt stack 19
 14040                           
 14041                           ;incstack = 0
 14042                           ;UpdateDLSettings@dlRx2Dr stored from wreg
 14043  00927A  0100               	movlb	0	; () banked
 14044  00927C  6F61               	movwf	UpdateDLSettings@dlRx2Dr& (0+255),b
 14045                           
 14046                           ;lorawan_eu.c: 890: if (dlRx2Dr <= 7)
 14047  00927E  0E08               	movlw	8
 14048  009280  0100               	movlb	0	; () banked
 14049  009282  6161               	cpfslt	UpdateDLSettings@dlRx2Dr& (0+255),b
 14050  009284  D002               	goto	l2013
 14051                           
 14052                           ; BSR set to: 0
 14053                           ;lorawan_eu.c: 891: {
 14054                           ;lorawan_eu.c: 892: loRa.receiveWindow2Parameters.dataRate = dlRx2Dr;
 14055  009286  C061  F226         	movff	UpdateDLSettings@dlRx2Dr,_loRa+28
 14056  00928A                     l2013:
 14057                           
 14058                           ; BSR set to: 0
 14059                           ;lorawan_eu.c: 893: }
 14060                           ;lorawan_eu.c: 895: if (dlRx1DrOffset <= 5)
 14061                           
 14062                           ; BSR set to: 0
 14063  00928A  0E06               	movlw	6
 14064  00928C  6160               	cpfslt	UpdateDLSettings@dlRx1DrOffset& (0+255),b
 14065  00928E  0012               	return	
 14066                           
 14067                           ; BSR set to: 0
 14068                           ;lorawan_eu.c: 896: {
 14069                           ;lorawan_eu.c: 898: loRa.offset = dlRx1DrOffset;
 14070  009290  C060  F2F9         	movff	UpdateDLSettings@dlRx1DrOffset,_loRa+239
 14071  009294  0012               	return	
 14072  009296                     __end_of_UpdateDLSettings:
 14073                           	opt stack 0
 14074                           tosu	equ	0xFFF
 14075                           tosh	equ	0xFFE
 14076                           tosl	equ	0xFFD
 14077                           pclath	equ	0xFFA
 14078                           tblptru	equ	0xFF8
 14079                           tblptrh	equ	0xFF7
 14080                           tblptrl	equ	0xFF6
 14081                           tablat	equ	0xFF5
 14082                           prodh	equ	0xFF4
 14083                           prodl	equ	0xFF3
 14084                           intcon	equ	0xFF2
 14085                           intcon2	equ	0xFF1
 14086                           intcon3	equ	0xFF0
 14087                           postinc0	equ	0xFEE
 14088                           wreg	equ	0xFE8
 14089                           postinc1	equ	0xFE6
 14090                           postdec1	equ	0xFE5
 14091                           plusw1	equ	0xFE3
 14092                           fsr1h	equ	0xFE2
 14093                           fsr1l	equ	0xFE1
 14094                           indf2	equ	0xFDF
 14095                           postinc2	equ	0xFDE
 14096                           postdec2	equ	0xFDD
 14097                           fsr2h	equ	0xFDA
 14098                           fsr2l	equ	0xFD9
 14099                           status	equ	0xFD8
 14100                           
 14101 ;; *************** function _UpdateCfList *****************
 14102 ;; Defined at:
 14103 ;;		line 824 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 14104 ;; Parameters:    Size  Location     Type
 14105 ;;  bufferLength    1    wreg     unsigned char 
 14106 ;;  joinAccept      2   70[BANK0 ] PTR struct .
 14107 ;;		 -> radioBuffer(271), LORAWAN_RxDone@hdr(2), 
 14108 ;; Auto vars:     Size  Location     Type
 14109 ;;  bufferLength    1   72[BANK0 ] unsigned char 
 14110 ;;  frequency       4   73[BANK0 ] unsigned long 
 14111 ;;  i               1   78[BANK0 ] unsigned char 
 14112 ;;  channelIndex    1   77[BANK0 ] unsigned char 
 14113 ;; Return value:  Size  Location     Type
 14114 ;;                  1    wreg      void 
 14115 ;; Registers used:
 14116 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14117 ;; Tracked objects:
 14118 ;;		On entry : 0/0
 14119 ;;		On exit  : 0/0
 14120 ;;		Unchanged: 0/0
 14121 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14122 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14123 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14124 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14125 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14126 ;;Total ram usage:        9 bytes
 14127 ;; Hardware stack levels used:    1
 14128 ;; Hardware stack levels required when called:    9
 14129 ;; This function calls:
 14130 ;;		_LORAWAN_SetChannelIdStatus
 14131 ;;		_ValidateFrequency
 14132 ;;		___lmul
 14133 ;;		___wmul
 14134 ;;		_memcpy
 14135 ;; This function is called by:
 14136 ;;		_LORAWAN_RxDone
 14137 ;; This function uses a non-reentrant model
 14138 ;;
 14139                           
 14140                           	psect	text65
 14141  00466A                     __ptext65:
 14142                           	opt stack 0
 14143  00466A                     _UpdateCfList:
 14144                           	opt stack 17
 14145                           
 14146                           ; BSR set to: 0
 14147                           ;incstack = 0
 14148                           ;UpdateCfList@bufferLength stored from wreg
 14149  00466A  0100               	movlb	0	; () banked
 14150  00466C  6FA8               	movwf	UpdateCfList@bufferLength& (0+255),b
 14151                           
 14152                           ;lorawan_eu.c: 826: uint8_t i;
 14153                           ;lorawan_eu.c: 827: uint32_t frequency;
 14154                           ;lorawan_eu.c: 828: uint8_t channelIndex;
 14155                           ;lorawan_eu.c: 830: if ( (bufferLength == 33) )
 14156  00466E  0E21               	movlw	33
 14157  004670  0100               	movlb	0	; () banked
 14158  004672  19A8               	xorwf	UpdateCfList@bufferLength& (0+255),w,b
 14159  004674  A4D8               	btfss	status,2,c
 14160  004676  0012               	return	
 14161                           
 14162                           ; BSR set to: 0
 14163                           ;lorawan_eu.c: 831: {
 14164                           ;lorawan_eu.c: 833: channelIndex = 3;
 14165  004678  0E03               	movlw	3
 14166  00467A  6FAD               	movwf	UpdateCfList@channelIndex& (0+255),b
 14167                           
 14168                           ;lorawan_eu.c: 835: for (i = 0; i < 5; i++ )
 14169  00467C  0E00               	movlw	0
 14170  00467E  6FAE               	movwf	UpdateCfList@i& (0+255),b
 14171  004680                     l10847:
 14172                           
 14173                           ; BSR set to: 0
 14174  004680  0E04               	movlw	4
 14175  004682  65AE               	cpfsgt	UpdateCfList@i& (0+255),b
 14176  004684  D001               	goto	l1997
 14177  004686  D0E5               	goto	u10920
 14178  004688                     l1997:
 14179                           
 14180                           ; BSR set to: 0
 14181                           ;lorawan_eu.c: 836: {
 14182                           ;lorawan_eu.c: 837: frequency = 0;
 14183                           
 14184                           ; BSR set to: 0
 14185  004688  0E00               	movlw	0
 14186  00468A  6FA9               	movwf	UpdateCfList@frequency& (0+255),b
 14187  00468C  0E00               	movlw	0
 14188  00468E  6FAA               	movwf	(UpdateCfList@frequency+1)& (0+255),b
 14189  004690  0E00               	movlw	0
 14190  004692  6FAB               	movwf	(UpdateCfList@frequency+2)& (0+255),b
 14191  004694  0E00               	movlw	0
 14192  004696  6FAC               	movwf	(UpdateCfList@frequency+3)& (0+255),b
 14193                           
 14194                           ; BSR set to: 0
 14195                           ;lorawan_eu.c: 838: memcpy (&frequency, joinAccept->members.cfList + 3*i, 3);
 14196  004698  0EA9               	movlw	low UpdateCfList@frequency
 14197  00469A  6F60               	movwf	memcpy@d1& (0+255),b
 14198  00469C  0E00               	movlw	high UpdateCfList@frequency
 14199  00469E  6F61               	movwf	(memcpy@d1+1)& (0+255),b
 14200  0046A0  51AE               	movf	UpdateCfList@i& (0+255),w,b
 14201  0046A2  0D03               	mullw	3
 14202  0046A4  0E0D               	movlw	13
 14203  0046A6  26F3               	addwf	prodl,f,c
 14204  0046A8  0E00               	movlw	0
 14205  0046AA  22F4               	addwfc	prodh,f,c
 14206  0046AC  50F3               	movf	prodl,w,c
 14207  0046AE  25A6               	addwf	UpdateCfList@joinAccept& (0+255),w,b
 14208  0046B0  6F62               	movwf	memcpy@s1& (0+255),b
 14209  0046B2  50F4               	movf	prodh,w,c
 14210  0046B4  21A7               	addwfc	(UpdateCfList@joinAccept+1)& (0+255),w,b
 14211  0046B6  6F63               	movwf	(memcpy@s1+1)& (0+255),b
 14212  0046B8  0E00               	movlw	0
 14213  0046BA  6F65               	movwf	(memcpy@n+1)& (0+255),b
 14214  0046BC  0E03               	movlw	3
 14215  0046BE  6F64               	movwf	memcpy@n& (0+255),b
 14216  0046C0  EC37  F041         	call	_memcpy	;wreg free
 14217                           
 14218                           ;lorawan_eu.c: 839: frequency *= 100;
 14219  0046C4  C0A9  F09A         	movff	UpdateCfList@frequency,___lmul@multiplier
 14220  0046C8  C0AA  F09B         	movff	UpdateCfList@frequency+1,___lmul@multiplier+1
 14221  0046CC  C0AB  F09C         	movff	UpdateCfList@frequency+2,___lmul@multiplier+2
 14222  0046D0  C0AC  F09D         	movff	UpdateCfList@frequency+3,___lmul@multiplier+3
 14223  0046D4  0E64               	movlw	100
 14224  0046D6  0100               	movlb	0	; () banked
 14225  0046D8  6F9E               	movwf	___lmul@multiplicand& (0+255),b
 14226  0046DA  0E00               	movlw	0
 14227  0046DC  6F9F               	movwf	(___lmul@multiplicand+1)& (0+255),b
 14228  0046DE  0E00               	movlw	0
 14229  0046E0  6FA0               	movwf	(___lmul@multiplicand+2)& (0+255),b
 14230  0046E2  0E00               	movlw	0
 14231  0046E4  6FA1               	movwf	(___lmul@multiplicand+3)& (0+255),b
 14232  0046E6  EC4D  F042         	call	___lmul	;wreg free
 14233  0046EA  C09A  F0A9         	movff	?___lmul,UpdateCfList@frequency
 14234  0046EE  C09B  F0AA         	movff	?___lmul+1,UpdateCfList@frequency+1
 14235  0046F2  C09C  F0AB         	movff	?___lmul+2,UpdateCfList@frequency+2
 14236  0046F6  C09D  F0AC         	movff	?___lmul+3,UpdateCfList@frequency+3
 14237                           
 14238                           ;lorawan_eu.c: 840: if (frequency != 0)
 14239  0046FA  0100               	movlb	0	; () banked
 14240  0046FC  51A9               	movf	UpdateCfList@frequency& (0+255),w,b
 14241  0046FE  11AA               	iorwf	(UpdateCfList@frequency+1)& (0+255),w,b
 14242  004700  11AB               	iorwf	(UpdateCfList@frequency+2)& (0+255),w,b
 14243  004702  11AC               	iorwf	(UpdateCfList@frequency+3)& (0+255),w,b
 14244  004704  B4D8               	btfsc	status,2,c
 14245  004706  D09B               	goto	l1999
 14246                           
 14247                           ; BSR set to: 0
 14248                           ;lorawan_eu.c: 841: {
 14249                           ;lorawan_eu.c: 842: if (ValidateFrequency (frequency) == OK)
 14250  004708  C0A9  F060         	movff	UpdateCfList@frequency,ValidateFrequency@frequencyNew
 14251  00470C  C0AA  F061         	movff	UpdateCfList@frequency+1,ValidateFrequency@frequencyNew+1
 14252  004710  C0AB  F062         	movff	UpdateCfList@frequency+2,ValidateFrequency@frequencyNew+2
 14253  004714  C0AC  F063         	movff	UpdateCfList@frequency+3,ValidateFrequency@frequencyNew+3
 14254  004718  EC0F  F040         	call	_ValidateFrequency	;wreg free
 14255  00471C  0900               	iorlw	0
 14256  00471E  A4D8               	btfss	status,2,c
 14257  004720  D095               	goto	l2001
 14258                           
 14259                           ;lorawan_eu.c: 843: {
 14260                           ;lorawan_eu.c: 844: Channels[i+channelIndex].frequency = frequency;
 14261  004722  0100               	movlb	0	; () banked
 14262  004724  51AE               	movf	UpdateCfList@i& (0+255),w,b
 14263  004726  25AD               	addwf	UpdateCfList@channelIndex& (0+255),w,b
 14264  004728  6F60               	movwf	___wmul@multiplier& (0+255),b
 14265  00472A  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
 14266  00472C  3761               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 14267  00472E  0E00               	movlw	0
 14268  004730  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 14269  004732  0E0E               	movlw	14
 14270  004734  6F62               	movwf	___wmul@multiplicand& (0+255),b
 14271  004736  ECD3  F047         	call	___wmul	;wreg free
 14272  00473A  0E00               	movlw	low _Channels
 14273  00473C  0100               	movlb	0	; () banked
 14274  00473E  2560               	addwf	?___wmul& (0+255),w,b
 14275  004740  6ED9               	movwf	fsr2l,c
 14276  004742  0E04               	movlw	high _Channels
 14277  004744  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 14278  004746  6EDA               	movwf	fsr2h,c
 14279  004748  C0A9  FFDE         	movff	UpdateCfList@frequency,postinc2
 14280  00474C  C0AA  FFDE         	movff	UpdateCfList@frequency+1,postinc2
 14281  004750  C0AB  FFDE         	movff	UpdateCfList@frequency+2,postinc2
 14282  004754  C0AC  FFDE         	movff	UpdateCfList@frequency+3,postinc2
 14283                           
 14284                           ;lorawan_eu.c: 845: Channels[i+channelIndex].dataRange.max = 5;
 14285  004758  51AE               	movf	UpdateCfList@i& (0+255),w,b
 14286  00475A  25AD               	addwf	UpdateCfList@channelIndex& (0+255),w,b
 14287  00475C  6F60               	movwf	___wmul@multiplier& (0+255),b
 14288  00475E  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
 14289  004760  3761               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 14290  004762  0E00               	movlw	0
 14291  004764  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 14292  004766  0E0E               	movlw	14
 14293  004768  6F62               	movwf	___wmul@multiplicand& (0+255),b
 14294  00476A  ECD3  F047         	call	___wmul	;wreg free
 14295  00476E  0E05               	movlw	5
 14296  004770  0100               	movlb	0	; () banked
 14297  004772  2760               	addwf	?___wmul& (0+255),f,b
 14298  004774  0E00               	movlw	0
 14299  004776  2361               	addwfc	(?___wmul+1)& (0+255),f,b
 14300  004778  0E00               	movlw	low _Channels
 14301  00477A  2560               	addwf	?___wmul& (0+255),w,b
 14302  00477C  6ED9               	movwf	fsr2l,c
 14303  00477E  0E04               	movlw	high _Channels
 14304  004780  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 14305  004782  6EDA               	movwf	fsr2h,c
 14306  004784  0104               	movlb	4	; () banked
 14307  004786  50DF               	movf	223,w,c
 14308  004788  0B0F               	andlw	-241
 14309  00478A  0950               	iorlw	80
 14310  00478C  6EDF               	movwf	223,c
 14311                           
 14312                           ;lorawan_eu.c: 846: Channels[i+channelIndex].dataRange.min = 0;
 14313  00478E  0100               	movlb	0	; () banked
 14314  004790  51AE               	movf	UpdateCfList@i& (0+255),w,b
 14315  004792  25AD               	addwf	UpdateCfList@channelIndex& (0+255),w,b
 14316  004794  6F60               	movwf	___wmul@multiplier& (0+255),b
 14317  004796  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
 14318  004798  3761               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 14319  00479A  0E00               	movlw	0
 14320  00479C  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 14321  00479E  0E0E               	movlw	14
 14322  0047A0  6F62               	movwf	___wmul@multiplicand& (0+255),b
 14323  0047A2  ECD3  F047         	call	___wmul	;wreg free
 14324  0047A6  0E05               	movlw	5
 14325  0047A8  0100               	movlb	0	; () banked
 14326  0047AA  2760               	addwf	?___wmul& (0+255),f,b
 14327  0047AC  0E00               	movlw	0
 14328  0047AE  2361               	addwfc	(?___wmul+1)& (0+255),f,b
 14329  0047B0  0E00               	movlw	low _Channels
 14330  0047B2  2560               	addwf	?___wmul& (0+255),w,b
 14331  0047B4  6ED9               	movwf	fsr2l,c
 14332  0047B6  0E04               	movlw	high _Channels
 14333  0047B8  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 14334  0047BA  6EDA               	movwf	fsr2h,c
 14335  0047BC  0104               	movlb	4	; () banked
 14336  0047BE  90DF               	bcf	223,0,c
 14337  0047C0  92DF               	bcf	223,1,c
 14338  0047C2  94DF               	bcf	223,2,c
 14339  0047C4  96DF               	bcf	223,3,c
 14340                           
 14341                           ;lorawan_eu.c: 847: Channels[i+channelIndex].dutyCycle = 999;
 14342  0047C6  0100               	movlb	0	; () banked
 14343  0047C8  51AE               	movf	UpdateCfList@i& (0+255),w,b
 14344  0047CA  25AD               	addwf	UpdateCfList@channelIndex& (0+255),w,b
 14345  0047CC  6F60               	movwf	___wmul@multiplier& (0+255),b
 14346  0047CE  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
 14347  0047D0  3761               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 14348  0047D2  0E00               	movlw	0
 14349  0047D4  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 14350  0047D6  0E0E               	movlw	14
 14351  0047D8  6F62               	movwf	___wmul@multiplicand& (0+255),b
 14352  0047DA  ECD3  F047         	call	___wmul	;wreg free
 14353  0047DE  0E06               	movlw	6
 14354  0047E0  0100               	movlb	0	; () banked
 14355  0047E2  2760               	addwf	?___wmul& (0+255),f,b
 14356  0047E4  0E00               	movlw	0
 14357  0047E6  2361               	addwfc	(?___wmul+1)& (0+255),f,b
 14358  0047E8  0E00               	movlw	low _Channels
 14359  0047EA  2560               	addwf	?___wmul& (0+255),w,b
 14360  0047EC  6ED9               	movwf	fsr2l,c
 14361  0047EE  0E04               	movlw	high _Channels
 14362  0047F0  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 14363  0047F2  6EDA               	movwf	fsr2h,c
 14364  0047F4  0EE7               	movlw	231
 14365  0047F6  6EDE               	movwf	postinc2,c
 14366  0047F8  0E03               	movlw	3
 14367  0047FA  6EDD               	movwf	postdec2,c
 14368                           
 14369                           ;lorawan_eu.c: 848: Channels[i+channelIndex].parametersDefined = 0xFF;
 14370  0047FC  51AE               	movf	UpdateCfList@i& (0+255),w,b
 14371  0047FE  25AD               	addwf	UpdateCfList@channelIndex& (0+255),w,b
 14372  004800  6F60               	movwf	___wmul@multiplier& (0+255),b
 14373  004802  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
 14374  004804  3761               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 14375  004806  0E00               	movlw	0
 14376  004808  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 14377  00480A  0E0E               	movlw	14
 14378  00480C  6F62               	movwf	___wmul@multiplicand& (0+255),b
 14379  00480E  ECD3  F047         	call	___wmul	;wreg free
 14380  004812  0E0D               	movlw	13
 14381  004814  0100               	movlb	0	; () banked
 14382  004816  2760               	addwf	?___wmul& (0+255),f,b
 14383  004818  0E00               	movlw	0
 14384  00481A  2361               	addwfc	(?___wmul+1)& (0+255),f,b
 14385  00481C  0E00               	movlw	low _Channels
 14386  00481E  2560               	addwf	?___wmul& (0+255),w,b
 14387  004820  6ED9               	movwf	fsr2l,c
 14388  004822  0E04               	movlw	high _Channels
 14389  004824  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 14390  004826  6EDA               	movwf	fsr2h,c
 14391  004828  0EFF               	movlw	255
 14392  00482A  6EDF               	movwf	indf2,c
 14393                           
 14394                           ;lorawan_eu.c: 849: LORAWAN_SetChannelIdStatus(i+channelIndex, 1);
 14395  00482C  0E01               	movlw	1
 14396  00482E  6F64               	movwf	LORAWAN_SetChannelIdStatus@statusNew& (0+255),b
 14397  004830  51AE               	movf	UpdateCfList@i& (0+255),w,b
 14398  004832  25AD               	addwf	UpdateCfList@channelIndex& (0+255),w,b
 14399  004834  ECF3  F041         	call	_LORAWAN_SetChannelIdStatus
 14400                           
 14401                           ;lorawan_eu.c: 850: loRa.macStatus.channelsModified = 1;
 14402  004838  0102               	movlb	2	; () banked
 14403  00483A  870D               	bsf	(_loRa+3)& (0+255),3,b
 14404                           
 14405                           ; BSR set to: 2
 14406                           ;lorawan_eu.c: 851: }
 14407                           ;lorawan_eu.c: 852: }
 14408  00483C  D007               	goto	l2001
 14409  00483E                     l1999:
 14410                           
 14411                           ;lorawan_eu.c: 853: else
 14412                           ;lorawan_eu.c: 854: {
 14413                           ;lorawan_eu.c: 855: LORAWAN_SetChannelIdStatus(i+channelIndex, 0);
 14414                           
 14415                           ; BSR set to: 2
 14416  00483E  0E00               	movlw	0
 14417  004840  0100               	movlb	0	; () banked
 14418  004842  6F64               	movwf	LORAWAN_SetChannelIdStatus@statusNew& (0+255),b
 14419  004844  51AE               	movf	UpdateCfList@i& (0+255),w,b
 14420  004846  25AD               	addwf	UpdateCfList@channelIndex& (0+255),w,b
 14421  004848  ECF3  F041         	call	_LORAWAN_SetChannelIdStatus
 14422  00484C                     l2001:
 14423  00484C  0100               	movlb	0	; () banked
 14424  00484E  2BAE               	incf	UpdateCfList@i& (0+255),f,b
 14425  004850  D717               	goto	l10847
 14426  004852                     u10920:
 14427                           
 14428                           ; BSR set to: 0
 14429                           ;lorawan_eu.c: 856: }
 14430                           ;lorawan_eu.c: 857: }
 14431                           ;lorawan_eu.c: 859: loRa.macStatus.channelsModified = 1;
 14432  004852  0102               	movlb	2	; () banked
 14433  004854  870D               	bsf	(_loRa+3)& (0+255),3,b
 14434  004856  0012               	return	
 14435  004858                     __end_of_UpdateCfList:
 14436                           	opt stack 0
 14437                           tosu	equ	0xFFF
 14438                           tosh	equ	0xFFE
 14439                           tosl	equ	0xFFD
 14440                           pclath	equ	0xFFA
 14441                           tblptru	equ	0xFF8
 14442                           tblptrh	equ	0xFF7
 14443                           tblptrl	equ	0xFF6
 14444                           tablat	equ	0xFF5
 14445                           prodh	equ	0xFF4
 14446                           prodl	equ	0xFF3
 14447                           intcon	equ	0xFF2
 14448                           intcon2	equ	0xFF1
 14449                           intcon3	equ	0xFF0
 14450                           postinc0	equ	0xFEE
 14451                           wreg	equ	0xFE8
 14452                           postinc1	equ	0xFE6
 14453                           postdec1	equ	0xFE5
 14454                           plusw1	equ	0xFE3
 14455                           fsr1h	equ	0xFE2
 14456                           fsr1l	equ	0xFE1
 14457                           indf2	equ	0xFDF
 14458                           postinc2	equ	0xFDE
 14459                           postdec2	equ	0xFDD
 14460                           fsr2h	equ	0xFDA
 14461                           fsr2l	equ	0xFD9
 14462                           status	equ	0xFD8
 14463                           
 14464 ;; *************** function _StartReTxTimer *****************
 14465 ;; Defined at:
 14466 ;;		line 902 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 14467 ;; Parameters:    Size  Location     Type
 14468 ;;		None
 14469 ;; Auto vars:     Size  Location     Type
 14470 ;;  minim           4   62[BANK0 ] unsigned long 
 14471 ;;  i               1   66[BANK0 ] unsigned char 
 14472 ;; Return value:  Size  Location     Type
 14473 ;;                  1    wreg      void 
 14474 ;; Registers used:
 14475 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 14476 ;; Tracked objects:
 14477 ;;		On entry : 0/0
 14478 ;;		On exit  : 0/0
 14479 ;;		Unchanged: 0/0
 14480 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14481 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14482 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14483 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14484 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14485 ;;Total ram usage:        9 bytes
 14486 ;; Hardware stack levels used:    1
 14487 ;; Hardware stack levels required when called:   11
 14488 ;; This function calls:
 14489 ;;		_SwTimerSetTimeout
 14490 ;;		_SwTimerStart
 14491 ;;		___lldiv
 14492 ;; This function is called by:
 14493 ;;		_LORAWAN_RxDone
 14494 ;; This function uses a non-reentrant model
 14495 ;;
 14496                           
 14497                           	psect	text66
 14498  0050B8                     __ptext66:
 14499                           	opt stack 0
 14500  0050B8                     _StartReTxTimer:
 14501                           	opt stack 15
 14502                           
 14503                           ;lorawan_eu.c: 904: uint8_t i;
 14504                           ;lorawan_eu.c: 905: uint32_t minim = (4294967295UL);
 14505                           
 14506                           ;incstack = 0
 14507  0050B8  0100               	movlb	0	; () banked
 14508  0050BA  699E               	setf	StartReTxTimer@minim& (0+255),b
 14509  0050BC  699F               	setf	(StartReTxTimer@minim+1)& (0+255),b
 14510  0050BE  69A0               	setf	(StartReTxTimer@minim+2)& (0+255),b
 14511  0050C0  69A1               	setf	(StartReTxTimer@minim+3)& (0+255),b
 14512                           
 14513                           ; BSR set to: 0
 14514                           ;lorawan_eu.c: 907: for (i = 0; i <= loRa.maxChannels; i++)
 14515  0050C2  0E00               	movlw	0
 14516  0050C4  6FA2               	movwf	StartReTxTimer@i& (0+255),b
 14517  0050C6  D07C               	goto	l2018
 14518  0050C8                     
 14519                           ;lorawan_eu.c: 908: {
 14520                           ;lorawan_eu.c: 909: if ( (Channels[i].status == 1) && (Channels[i].channelTimer != 0) &&
      +                           (Channels[i].channelTimer <= minim) && (loRa.currentDataRate >= Channels[i].dataRange.m
      +                          in) && (loRa.currentDataRate <= Channels[i].dataRange.max) )
 14521                           
 14522                           ; BSR set to: 0
 14523  0050C8  0100               	movlb	0	; () banked
 14524  0050CA  51A2               	movf	StartReTxTimer@i& (0+255),w,b
 14525  0050CC  0D0E               	mullw	14
 14526  0050CE  0E04               	movlw	4
 14527  0050D0  26F3               	addwf	prodl,f,c
 14528  0050D2  0E00               	movlw	0
 14529  0050D4  22F4               	addwfc	prodh,f,c
 14530  0050D6  0E00               	movlw	low _Channels
 14531  0050D8  24F3               	addwf	prodl,w,c
 14532  0050DA  6ED9               	movwf	fsr2l,c
 14533  0050DC  0E04               	movlw	high _Channels
 14534  0050DE  20F4               	addwfc	prodh,w,c
 14535  0050E0  6EDA               	movwf	fsr2h,c
 14536  0050E2  04DE               	decf	postinc2,w,c
 14537  0050E4  A4D8               	btfss	status,2,c
 14538  0050E6  D06A               	goto	l2020
 14539                           
 14540                           ; BSR set to: 0
 14541  0050E8  51A2               	movf	StartReTxTimer@i& (0+255),w,b
 14542  0050EA  0D0E               	mullw	14
 14543  0050EC  0E08               	movlw	8
 14544  0050EE  26F3               	addwf	prodl,f,c
 14545  0050F0  0E00               	movlw	0
 14546  0050F2  22F4               	addwfc	prodh,f,c
 14547  0050F4  0E00               	movlw	low _Channels
 14548  0050F6  24F3               	addwf	prodl,w,c
 14549  0050F8  6ED9               	movwf	fsr2l,c
 14550  0050FA  0E04               	movlw	high _Channels
 14551  0050FC  20F4               	addwfc	prodh,w,c
 14552  0050FE  6EDA               	movwf	fsr2h,c
 14553  005100  50DE               	movf	postinc2,w,c
 14554  005102  10DE               	iorwf	postinc2,w,c
 14555  005104  10DE               	iorwf	postinc2,w,c
 14556  005106  10DE               	iorwf	postinc2,w,c
 14557  005108  B4D8               	btfsc	status,2,c
 14558  00510A  D058               	goto	l2020
 14559                           
 14560                           ; BSR set to: 0
 14561  00510C  51A2               	movf	StartReTxTimer@i& (0+255),w,b
 14562  00510E  0D0E               	mullw	14
 14563  005110  0E08               	movlw	8
 14564  005112  26F3               	addwf	prodl,f,c
 14565  005114  0E00               	movlw	0
 14566  005116  22F4               	addwfc	prodh,f,c
 14567  005118  0E00               	movlw	low _Channels
 14568  00511A  24F3               	addwf	prodl,w,c
 14569  00511C  6ED9               	movwf	fsr2l,c
 14570  00511E  0E04               	movlw	high _Channels
 14571  005120  20F4               	addwfc	prodh,w,c
 14572  005122  6EDA               	movwf	fsr2h,c
 14573  005124  50DE               	movf	postinc2,w,c
 14574  005126  5D9E               	subwf	StartReTxTimer@minim& (0+255),w,b
 14575  005128  50DE               	movf	postinc2,w,c
 14576  00512A  599F               	subwfb	(StartReTxTimer@minim+1)& (0+255),w,b
 14577  00512C  50DE               	movf	postinc2,w,c
 14578  00512E  59A0               	subwfb	(StartReTxTimer@minim+2)& (0+255),w,b
 14579  005130  50DE               	movf	postinc2,w,c
 14580  005132  59A1               	subwfb	(StartReTxTimer@minim+3)& (0+255),w,b
 14581  005134  A0D8               	btfss	status,0,c
 14582  005136  D042               	goto	l2020
 14583                           
 14584                           ; BSR set to: 0
 14585  005138  51A2               	movf	StartReTxTimer@i& (0+255),w,b
 14586  00513A  0D0E               	mullw	14
 14587  00513C  0E05               	movlw	5
 14588  00513E  26F3               	addwf	prodl,f,c
 14589  005140  0E00               	movlw	0
 14590  005142  22F4               	addwfc	prodh,f,c
 14591  005144  0E00               	movlw	low _Channels
 14592  005146  24F3               	addwf	prodl,w,c
 14593  005148  6ED9               	movwf	fsr2l,c
 14594  00514A  0E04               	movlw	high _Channels
 14595  00514C  20F4               	addwfc	prodh,w,c
 14596  00514E  6EDA               	movwf	fsr2h,c
 14597  005150  0104               	movlb	4	; () banked
 14598  005152  50DF               	movf	223,w,c
 14599  005154  0B0F               	andlw	15
 14600  005156  0100               	movlb	0	; () banked
 14601  005158  6F9A               	movwf	??_StartReTxTimer& (0+255),b
 14602  00515A  519A               	movf	??_StartReTxTimer& (0+255),w,b
 14603  00515C  0102               	movlb	2	; () banked
 14604  00515E  5DE9               	subwf	(_loRa+223)& (0+255),w,b
 14605  005160  A0D8               	btfss	status,0,c
 14606  005162  D02C               	goto	l2020
 14607                           
 14608                           ; BSR set to: 2
 14609  005164  0100               	movlb	0	; () banked
 14610  005166  51A2               	movf	StartReTxTimer@i& (0+255),w,b
 14611  005168  0D0E               	mullw	14
 14612  00516A  0E05               	movlw	5
 14613  00516C  26F3               	addwf	prodl,f,c
 14614  00516E  0E00               	movlw	0
 14615  005170  22F4               	addwfc	prodh,f,c
 14616  005172  0E00               	movlw	low _Channels
 14617  005174  24F3               	addwf	prodl,w,c
 14618  005176  6ED9               	movwf	fsr2l,c
 14619  005178  0E04               	movlw	high _Channels
 14620  00517A  20F4               	addwfc	prodh,w,c
 14621  00517C  6EDA               	movwf	fsr2h,c
 14622  00517E  0104               	movlb	4	; () banked
 14623  005180  38DF               	swapf	223,w,c
 14624  005182  0B0F               	andlw	15
 14625  005184  0100               	movlb	0	; () banked
 14626  005186  6F9A               	movwf	??_StartReTxTimer& (0+255),b
 14627  005188  0102               	movlb	2	; () banked
 14628  00518A  51E9               	movf	(_loRa+223)& (0+255),w,b
 14629  00518C  0100               	movlb	0	; () banked
 14630  00518E  5D9A               	subwf	??_StartReTxTimer& (0+255),w,b
 14631  005190  A0D8               	btfss	status,0,c
 14632  005192  D014               	goto	l2020
 14633                           
 14634                           ; BSR set to: 0
 14635                           ;lorawan_eu.c: 910: {
 14636                           ;lorawan_eu.c: 911: minim = Channels[i].channelTimer;
 14637  005194  51A2               	movf	StartReTxTimer@i& (0+255),w,b
 14638  005196  0D0E               	mullw	14
 14639  005198  0E08               	movlw	8
 14640  00519A  26F3               	addwf	prodl,f,c
 14641  00519C  0E00               	movlw	0
 14642  00519E  22F4               	addwfc	prodh,f,c
 14643  0051A0  0E00               	movlw	low _Channels
 14644  0051A2  24F3               	addwf	prodl,w,c
 14645  0051A4  6ED9               	movwf	fsr2l,c
 14646  0051A6  0E04               	movlw	high _Channels
 14647  0051A8  20F4               	addwfc	prodh,w,c
 14648  0051AA  6EDA               	movwf	fsr2h,c
 14649  0051AC  CFDE F09E          	movff	postinc2,StartReTxTimer@minim
 14650  0051B0  CFDE F09F          	movff	postinc2,StartReTxTimer@minim+1
 14651  0051B4  CFDE F0A0          	movff	postinc2,StartReTxTimer@minim+2
 14652  0051B8  CFDE F0A1          	movff	postinc2,StartReTxTimer@minim+3
 14653  0051BC                     l2020:
 14654                           
 14655                           ; BSR set to: 0
 14656  0051BC  0100               	movlb	0	; () banked
 14657  0051BE  2BA2               	incf	StartReTxTimer@i& (0+255),f,b
 14658  0051C0                     l2018:
 14659                           
 14660                           ; BSR set to: 0
 14661                           
 14662                           ; BSR set to: 0
 14663  0051C0  51A2               	movf	StartReTxTimer@i& (0+255),w,b
 14664  0051C2  0102               	movlb	2	; () banked
 14665  0051C4  5DF7               	subwf	(_loRa+237)& (0+255),w,b
 14666  0051C6  B0D8               	btfsc	status,0,c
 14667  0051C8  D77F               	goto	l2019
 14668                           
 14669                           ; BSR set to: 2
 14670                           ;lorawan_eu.c: 912: }
 14671                           ;lorawan_eu.c: 913: }
 14672                           ;lorawan_eu.c: 914: loRa.macStatus.macState = RETRANSMISSION_DELAY;
 14673                           
 14674                           ; BSR set to: 2
 14675  0051CA  510C               	movf	(_loRa+2)& (0+255),w,b
 14676  0051CC  0BF0               	andlw	-16
 14677  0051CE  0906               	iorlw	6
 14678  0051D0  6F0C               	movwf	(_loRa+2)& (0+255),b
 14679                           
 14680                           ; BSR set to: 2
 14681                           ;lorawan_eu.c: 915: SwTimerSetTimeout (loRa.automaticReplyTimerId, ( (((uint32_t)(minim)
      +                          ) << (12)) / 125UL ) );
 14682  0051D2  C09E  F09A         	movff	StartReTxTimer@minim,??_StartReTxTimer
 14683  0051D6  C09F  F09B         	movff	StartReTxTimer@minim+1,??_StartReTxTimer+1
 14684  0051DA  C0A0  F09C         	movff	StartReTxTimer@minim+2,??_StartReTxTimer+2
 14685  0051DE  C0A1  F09D         	movff	StartReTxTimer@minim+3,??_StartReTxTimer+3
 14686  0051E2  0E0C               	movlw	12
 14687  0051E4                     u11205:
 14688  0051E4  90D8               	bcf	status,0,c
 14689  0051E6  0100               	movlb	0	; () banked
 14690  0051E8  379A               	rlcf	??_StartReTxTimer& (0+255),f,b
 14691  0051EA  379B               	rlcf	(??_StartReTxTimer+1)& (0+255),f,b
 14692  0051EC  379C               	rlcf	(??_StartReTxTimer+2)& (0+255),f,b
 14693  0051EE  379D               	rlcf	(??_StartReTxTimer+3)& (0+255),f,b
 14694  0051F0  2EE8               	decfsz	wreg,f,c
 14695  0051F2  D7F8               	goto	u11205
 14696  0051F4  C09A  F060         	movff	??_StartReTxTimer,___lldiv@dividend
 14697  0051F8  C09B  F061         	movff	??_StartReTxTimer+1,___lldiv@dividend+1
 14698  0051FC  C09C  F062         	movff	??_StartReTxTimer+2,___lldiv@dividend+2
 14699  005200  C09D  F063         	movff	??_StartReTxTimer+3,___lldiv@dividend+3
 14700  005204  0E7D               	movlw	125
 14701  005206  6F64               	movwf	___lldiv@divisor& (0+255),b
 14702  005208  0E00               	movlw	0
 14703  00520A  6F65               	movwf	(___lldiv@divisor+1)& (0+255),b
 14704  00520C  0E00               	movlw	0
 14705  00520E  6F66               	movwf	(___lldiv@divisor+2)& (0+255),b
 14706  005210  0E00               	movlw	0
 14707  005212  6F67               	movwf	(___lldiv@divisor+3)& (0+255),b
 14708  005214  ECE4  F03C         	call	___lldiv	;wreg free
 14709  005218  C060  F06D         	movff	?___lldiv,SwTimerSetTimeout@timeout
 14710  00521C  C061  F06E         	movff	?___lldiv+1,SwTimerSetTimeout@timeout+1
 14711  005220  C062  F06F         	movff	?___lldiv+2,SwTimerSetTimeout@timeout+2
 14712  005224  C063  F070         	movff	?___lldiv+3,SwTimerSetTimeout@timeout+3
 14713  005228  0102               	movlb	2	; () banked
 14714  00522A  51F0               	movf	(_loRa+230)& (0+255),w,b
 14715  00522C  EC01  F045         	call	_SwTimerSetTimeout
 14716                           
 14717                           ;lorawan_eu.c: 916: SwTimerStart (loRa.automaticReplyTimerId);
 14718  005230  0102               	movlb	2	; () banked
 14719  005232  51F0               	movf	(_loRa+230)& (0+255),w,b
 14720  005234  ECB4  F03A         	call	_SwTimerStart
 14721  005238  0012               	return		;funcret
 14722  00523A                     __end_of_StartReTxTimer:
 14723                           	opt stack 0
 14724                           tosu	equ	0xFFF
 14725                           tosh	equ	0xFFE
 14726                           tosl	equ	0xFFD
 14727                           pclath	equ	0xFFA
 14728                           tblptru	equ	0xFF8
 14729                           tblptrh	equ	0xFF7
 14730                           tblptrl	equ	0xFF6
 14731                           tablat	equ	0xFF5
 14732                           prodh	equ	0xFF4
 14733                           prodl	equ	0xFF3
 14734                           intcon	equ	0xFF2
 14735                           intcon2	equ	0xFF1
 14736                           intcon3	equ	0xFF0
 14737                           postinc0	equ	0xFEE
 14738                           wreg	equ	0xFE8
 14739                           postinc1	equ	0xFE6
 14740                           postdec1	equ	0xFE5
 14741                           plusw1	equ	0xFE3
 14742                           fsr1h	equ	0xFE2
 14743                           fsr1l	equ	0xFE1
 14744                           indf2	equ	0xFDF
 14745                           postinc2	equ	0xFDE
 14746                           postdec2	equ	0xFDD
 14747                           fsr2h	equ	0xFDA
 14748                           fsr2l	equ	0xFD9
 14749                           status	equ	0xFD8
 14750                           
 14751 ;; *************** function _SetReceptionNotOkState *****************
 14752 ;; Defined at:
 14753 ;;		line 1997 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 14754 ;; Parameters:    Size  Location     Type
 14755 ;;		None
 14756 ;; Auto vars:     Size  Location     Type
 14757 ;;		None
 14758 ;; Return value:  Size  Location     Type
 14759 ;;                  1    wreg      void 
 14760 ;; Registers used:
 14761 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14762 ;; Tracked objects:
 14763 ;;		On entry : 0/0
 14764 ;;		On exit  : 0/0
 14765 ;;		Unchanged: 0/0
 14766 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14767 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14768 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14769 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14770 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14771 ;;Total ram usage:        0 bytes
 14772 ;; Hardware stack levels used:    1
 14773 ;; Hardware stack levels required when called:   14
 14774 ;; This function calls:
 14775 ;;		_LORAWAN_EnterContinuousReceive
 14776 ;;		_RxData
 14777 ;; This function is called by:
 14778 ;;		_LORAWAN_RxDone
 14779 ;; This function uses a non-reentrant model
 14780 ;;
 14781                           
 14782                           	psect	text67
 14783  007B4E                     __ptext67:
 14784                           	opt stack 0
 14785  007B4E                     _SetReceptionNotOkState:
 14786                           	opt stack 12
 14787                           
 14788                           ;lorawan.c: 1999: if ( (loRa.macStatus.macState == RX2_OPEN) || ( (loRa.macStatus.macSta
      +                          te == RX1_OPEN) && (loRa.rx2DelayExpired) ) )
 14789                           
 14790                           ;incstack = 0
 14791  007B4E  0102               	movlb	2	; () banked
 14792  007B50  510C               	movf	(_loRa+2)& (0+255),w,b
 14793  007B52  0B0F               	andlw	15
 14794  007B54  0A05               	xorlw	5
 14795  007B56  B4D8               	btfsc	status,2,c
 14796  007B58  D008               	goto	u11010
 14797                           
 14798                           ; BSR set to: 2
 14799  007B5A  510C               	movf	(_loRa+2)& (0+255),w,b
 14800  007B5C  0B0F               	andlw	15
 14801  007B5E  0A03               	xorlw	3
 14802  007B60  A4D8               	btfss	status,2,c
 14803  007B62  D029               	goto	l1336
 14804                           
 14805                           ; BSR set to: 2
 14806  007B64  51FB               	movf	(_loRa+241)& (0+255),w,b
 14807  007B66  B4D8               	btfsc	status,2,c
 14808  007B68  D026               	goto	l1336
 14809  007B6A                     u11010:
 14810                           
 14811                           ; BSR set to: 2
 14812                           ;lorawan.c: 2000: {
 14813                           ;lorawan.c: 2001: loRa.lorawanMacStatus.ackRequiredFromNextDownlinkMessage = 0;
 14814  007B6A  910A               	bcf	_loRa& (0+255),0,b
 14815                           
 14816                           ;lorawan.c: 2002: loRa.macStatus.macState = IDLE;
 14817  007B6C  910C               	bcf	(_loRa+2)& (0+255),0,b
 14818  007B6E  930C               	bcf	(_loRa+2)& (0+255),1,b
 14819  007B70  950C               	bcf	(_loRa+2)& (0+255),2,b
 14820  007B72  970C               	bcf	(_loRa+2)& (0+255),3,b
 14821                           
 14822                           ; BSR set to: 2
 14823                           ;lorawan.c: 2004: if ((loRa.deviceClass == CLASS_A) && (rxPayload.RxAppData != (0)))
 14824  007B74  511C               	movf	(_loRa+18)& (0+255),w,b
 14825  007B76  A4D8               	btfss	status,2,c
 14826  007B78  D01C               	goto	u11049
 14827                           
 14828                           ; BSR set to: 2
 14829  007B7A  0101               	movlb	1	; () banked
 14830  007B7C  510C               	movf	_rxPayload& (0+255),w,b
 14831  007B7E  110D               	iorwf	(_rxPayload+1)& (0+255),w,b
 14832  007B80  B4D8               	btfsc	status,2,c
 14833  007B82  D017               	goto	u11049
 14834                           
 14835                           ; BSR set to: 1
 14836                           ;lorawan.c: 2005: {
 14837                           ;lorawan.c: 2006: loRa.lorawanMacStatus.synchronization = 0;
 14838  007B84  0102               	movlb	2	; () banked
 14839  007B86  9B0A               	bcf	_loRa& (0+255),5,b
 14840                           
 14841                           ; BSR set to: 2
 14842                           ;lorawan.c: 2007: rxPayload.RxAppData ((0), 0, MAC_NOT_OK);
 14843  007B88  0E00               	movlw	0
 14844  007B8A  0100               	movlb	0	; () banked
 14845  007B8C  6F60               	movwf	RxData@pData& (0+255),b
 14846  007B8E  0E00               	movlw	0
 14847  007B90  6F61               	movwf	(RxData@pData+1)& (0+255),b
 14848  007B92  0E00               	movlw	0
 14849  007B94  6F62               	movwf	RxData@dataLength& (0+255),b
 14850  007B96  0E00               	movlw	0
 14851  007B98  6F63               	movwf	RxData@status& (0+255),b
 14852  007B9A  D801               	call	u11048
 14853  007B9C  D00A               	goto	u11049
 14854  007B9E                     u11048:
 14855  007B9E  0005               	push	
 14856  007BA0  6EFA               	movwf	pclath,c
 14857  007BA2  0101               	movlb	1	; () banked
 14858  007BA4  510C               	movf	_rxPayload& (0+255),w,b
 14859  007BA6  6EFD               	movwf	tosl,c
 14860  007BA8  510D               	movf	(_rxPayload+1)& (0+255),w,b
 14861  007BAA  6EFE               	movwf	tosh,c
 14862  007BAC  6AFF               	clrf	tosu,c
 14863  007BAE  50FA               	movf	pclath,w,c
 14864  007BB0  0012               	return		;indir
 14865  007BB2                     u11049:
 14866                           
 14867                           ;lorawan.c: 2008: }
 14868                           ;lorawan.c: 2009: loRa.macStatus.rxDone = 0;
 14869  007BB2  0102               	movlb	2	; () banked
 14870  007BB4  930D               	bcf	(_loRa+3)& (0+255),1,b
 14871  007BB6                     l1336:
 14872                           
 14873                           ; BSR set to: 2
 14874                           ;lorawan.c: 2010: }
 14875                           ;lorawan.c: 2012: if (loRa.deviceClass == CLASS_C)
 14876                           
 14877                           ; BSR set to: 2
 14878  007BB6  0E02               	movlw	2
 14879  007BB8  191C               	xorwf	(_loRa+18)& (0+255),w,b
 14880  007BBA  A4D8               	btfss	status,2,c
 14881  007BBC  0012               	return	
 14882                           
 14883                           ; BSR set to: 2
 14884                           ;lorawan.c: 2013: {
 14885                           ;lorawan.c: 2014: loRa.macStatus.macState = CLASS_C_RX2_2_OPEN;
 14886  007BBE  510C               	movf	(_loRa+2)& (0+255),w,b
 14887  007BC0  0BF0               	andlw	-16
 14888  007BC2  0909               	iorlw	9
 14889  007BC4  6F0C               	movwf	(_loRa+2)& (0+255),b
 14890                           
 14891                           ; BSR set to: 2
 14892                           ;lorawan.c: 2015: LORAWAN_EnterContinuousReceive();
 14893  007BC6  ECE6  F03D         	call	_LORAWAN_EnterContinuousReceive	;wreg free
 14894  007BCA  0012               	return	
 14895  007BCC                     __end_of_SetReceptionNotOkState:
 14896                           	opt stack 0
 14897                           tosu	equ	0xFFF
 14898                           tosh	equ	0xFFE
 14899                           tosl	equ	0xFFD
 14900                           pclath	equ	0xFFA
 14901                           tblptru	equ	0xFF8
 14902                           tblptrh	equ	0xFF7
 14903                           tblptrl	equ	0xFF6
 14904                           tablat	equ	0xFF5
 14905                           prodh	equ	0xFF4
 14906                           prodl	equ	0xFF3
 14907                           intcon	equ	0xFF2
 14908                           intcon2	equ	0xFF1
 14909                           intcon3	equ	0xFF0
 14910                           postinc0	equ	0xFEE
 14911                           wreg	equ	0xFE8
 14912                           postinc1	equ	0xFE6
 14913                           postdec1	equ	0xFE5
 14914                           plusw1	equ	0xFE3
 14915                           fsr1h	equ	0xFE2
 14916                           fsr1l	equ	0xFE1
 14917                           indf2	equ	0xFDF
 14918                           postinc2	equ	0xFDE
 14919                           postdec2	equ	0xFDD
 14920                           fsr2h	equ	0xFDA
 14921                           fsr2l	equ	0xFD9
 14922                           status	equ	0xFD8
 14923                           
 14924 ;; *************** function _SetJoinFailState *****************
 14925 ;; Defined at:
 14926 ;;		line 1104 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 14927 ;; Parameters:    Size  Location     Type
 14928 ;;		None
 14929 ;; Auto vars:     Size  Location     Type
 14930 ;;		None
 14931 ;; Return value:  Size  Location     Type
 14932 ;;                  1    wreg      void 
 14933 ;; Registers used:
 14934 ;;		wreg, status,2, status,0, pclath, tosl, cstack
 14935 ;; Tracked objects:
 14936 ;;		On entry : 0/0
 14937 ;;		On exit  : 0/0
 14938 ;;		Unchanged: 0/0
 14939 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14940 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14941 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14942 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14943 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14944 ;;Total ram usage:        0 bytes
 14945 ;; Hardware stack levels used:    1
 14946 ;; Hardware stack levels required when called:    8
 14947 ;; This function calls:
 14948 ;;		_RxJoinResponse
 14949 ;; This function is called by:
 14950 ;;		_LORAWAN_RxDone
 14951 ;;		_LORAWAN_RxTimeout
 14952 ;; This function uses a non-reentrant model
 14953 ;;
 14954                           
 14955                           	psect	text68
 14956  008D08                     __ptext68:
 14957                           	opt stack 0
 14958  008D08                     _SetJoinFailState:
 14959                           	opt stack 18
 14960                           
 14961                           ;lorawan.c: 1106: loRa.macStatus.networkJoined = 0;
 14962                           
 14963                           ;incstack = 0
 14964  008D08  0102               	movlb	2	; () banked
 14965  008D0A  990C               	bcf	(_loRa+2)& (0+255),4,b
 14966                           
 14967                           ;lorawan.c: 1107: loRa.lorawanMacStatus.joining = 0;
 14968  008D0C  950A               	bcf	_loRa& (0+255),2,b
 14969                           
 14970                           ;lorawan.c: 1108: loRa.macStatus.macState = IDLE;
 14971  008D0E  910C               	bcf	(_loRa+2)& (0+255),0,b
 14972  008D10  930C               	bcf	(_loRa+2)& (0+255),1,b
 14973  008D12  950C               	bcf	(_loRa+2)& (0+255),2,b
 14974  008D14  970C               	bcf	(_loRa+2)& (0+255),3,b
 14975                           
 14976                           ; BSR set to: 2
 14977                           ;lorawan.c: 1109: if (rxPayload.RxJoinResponse != (0))
 14978  008D16  0101               	movlb	1	; () banked
 14979  008D18  510E               	movf	(_rxPayload+2)& (0+255),w,b
 14980  008D1A  110F               	iorwf	(_rxPayload+3)& (0+255),w,b
 14981  008D1C  B4D8               	btfsc	status,2,c
 14982  008D1E  0012               	return	
 14983                           
 14984                           ; BSR set to: 1
 14985                           ;lorawan.c: 1110: {
 14986                           ;lorawan.c: 1111: rxPayload.RxJoinResponse(0);
 14987  008D20  D801               	call	u10858
 14988  008D22  0012               	return	
 14989  008D24                     u10858:
 14990  008D24  0005               	push	
 14991  008D26  6EFA               	movwf	pclath,c
 14992  008D28  510E               	movf	(_rxPayload+2)& (0+255),w,b
 14993  008D2A  6EFD               	movwf	tosl,c
 14994  008D2C  510F               	movf	(_rxPayload+3)& (0+255),w,b
 14995  008D2E  6EFE               	movwf	tosh,c
 14996  008D30  6AFF               	clrf	tosu,c
 14997  008D32  50FA               	movf	pclath,w,c
 14998  008D34  0E00               	movlw	0
 14999  008D36  0012               	return		;indir
 15000  008D38                     __end_of_SetJoinFailState:
 15001                           	opt stack 0
 15002                           tosu	equ	0xFFF
 15003                           tosh	equ	0xFFE
 15004                           tosl	equ	0xFFD
 15005                           pclath	equ	0xFFA
 15006                           tblptru	equ	0xFF8
 15007                           tblptrh	equ	0xFF7
 15008                           tblptrl	equ	0xFF6
 15009                           tablat	equ	0xFF5
 15010                           prodh	equ	0xFF4
 15011                           prodl	equ	0xFF3
 15012                           intcon	equ	0xFF2
 15013                           intcon2	equ	0xFF1
 15014                           intcon3	equ	0xFF0
 15015                           postinc0	equ	0xFEE
 15016                           wreg	equ	0xFE8
 15017                           postinc1	equ	0xFE6
 15018                           postdec1	equ	0xFE5
 15019                           plusw1	equ	0xFE3
 15020                           fsr1h	equ	0xFE2
 15021                           fsr1l	equ	0xFE1
 15022                           indf2	equ	0xFDF
 15023                           postinc2	equ	0xFDE
 15024                           postdec2	equ	0xFDD
 15025                           fsr2h	equ	0xFDA
 15026                           fsr2l	equ	0xFD9
 15027                           status	equ	0xFD8
 15028                           
 15029 ;; *************** function _RxJoinResponse *****************
 15030 ;; Defined at:
 15031 ;;		line 87 in file "main.c"
 15032 ;; Parameters:    Size  Location     Type
 15033 ;;  status          1    wreg     unsigned char 
 15034 ;; Auto vars:     Size  Location     Type
 15035 ;;  status          1    0[COMRAM] unsigned char 
 15036 ;; Return value:  Size  Location     Type
 15037 ;;                  1    wreg      void 
 15038 ;; Registers used:
 15039 ;;		wreg
 15040 ;; Tracked objects:
 15041 ;;		On entry : 0/0
 15042 ;;		On exit  : 0/0
 15043 ;;		Unchanged: 0/0
 15044 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15045 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15046 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15047 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15048 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15049 ;;Total ram usage:        0 bytes
 15050 ;; Hardware stack levels used:    1
 15051 ;; Hardware stack levels required when called:    7
 15052 ;; This function calls:
 15053 ;;		Nothing
 15054 ;; This function is called by:
 15055 ;;		_main
 15056 ;;		_UpdateJoinSuccessState
 15057 ;;		_SetJoinFailState
 15058 ;; This function uses a non-reentrant model
 15059 ;;
 15060                           
 15061                           	psect	text69
 15062  0095A2                     __ptext69:
 15063                           	opt stack 0
 15064  0095A2                     _RxJoinResponse:
 15065                           	opt stack 20
 15066                           
 15067                           ;incstack = 0
 15068  0095A2  0012               	return		;funcret
 15069  0095A4                     __end_of_RxJoinResponse:
 15070                           	opt stack 0
 15071                           tosu	equ	0xFFF
 15072                           tosh	equ	0xFFE
 15073                           tosl	equ	0xFFD
 15074                           pclath	equ	0xFFA
 15075                           tblptru	equ	0xFF8
 15076                           tblptrh	equ	0xFF7
 15077                           tblptrl	equ	0xFF6
 15078                           tablat	equ	0xFF5
 15079                           prodh	equ	0xFF4
 15080                           prodl	equ	0xFF3
 15081                           intcon	equ	0xFF2
 15082                           intcon2	equ	0xFF1
 15083                           intcon3	equ	0xFF0
 15084                           postinc0	equ	0xFEE
 15085                           wreg	equ	0xFE8
 15086                           postinc1	equ	0xFE6
 15087                           postdec1	equ	0xFE5
 15088                           plusw1	equ	0xFE3
 15089                           fsr1h	equ	0xFE2
 15090                           fsr1l	equ	0xFE1
 15091                           indf2	equ	0xFDF
 15092                           postinc2	equ	0xFDE
 15093                           postdec2	equ	0xFDD
 15094                           fsr2h	equ	0xFDA
 15095                           fsr2l	equ	0xFD9
 15096                           status	equ	0xFD8
 15097                           
 15098 ;; *************** function _MacExecuteCommands *****************
 15099 ;; Defined at:
 15100 ;;		line 1575 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 15101 ;; Parameters:    Size  Location     Type
 15102 ;;  buffer          2   80[BANK0 ] PTR unsigned char 
 15103 ;;		 -> radioBuffer(271), LORAWAN_RxDone@hdr(2), 
 15104 ;;  fOptsLen        1   82[BANK0 ] unsigned char 
 15105 ;; Auto vars:     Size  Location     Type
 15106 ;;  ptr             2   86[BANK0 ] PTR unsigned char 
 15107 ;;		 -> radioBuffer(271), LORAWAN_RxDone@hdr(2), 
 15108 ;;  done            1   85[BANK0 ] unsigned char 
 15109 ;; Return value:  Size  Location     Type
 15110 ;;                  2   80[BANK0 ] PTR unsigned char 
 15111 ;; Registers used:
 15112 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15113 ;; Tracked objects:
 15114 ;;		On entry : 0/0
 15115 ;;		On exit  : 0/0
 15116 ;;		Unchanged: 0/0
 15117 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15118 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15119 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15120 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15121 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15122 ;;Total ram usage:        8 bytes
 15123 ;; Hardware stack levels used:    1
 15124 ;; Hardware stack levels required when called:   11
 15125 ;; This function calls:
 15126 ;;		_ExecuteDevStatus
 15127 ;;		_ExecuteDutyCycle
 15128 ;;		_ExecuteLinkAdr
 15129 ;;		_ExecuteLinkCheck
 15130 ;;		_ExecuteNewChannel
 15131 ;;		_ExecuteRxParamSetupReq
 15132 ;;		_ExecuteRxTimingSetup
 15133 ;; This function is called by:
 15134 ;;		_LORAWAN_RxDone
 15135 ;; This function uses a non-reentrant model
 15136 ;;
 15137                           
 15138                           	psect	text70
 15139  0032B6                     __ptext70:
 15140                           	opt stack 0
 15141  0032B6                     _MacExecuteCommands:
 15142                           	opt stack 15
 15143                           
 15144                           ;lorawan.c: 1577: bool done = 0;
 15145                           
 15146                           ;incstack = 0
 15147  0032B6  0E00               	movlw	0
 15148  0032B8  0100               	movlb	0	; () banked
 15149  0032BA  6FB5               	movwf	MacExecuteCommands@done& (0+255),b
 15150                           
 15151                           ; BSR set to: 0
 15152                           ;lorawan.c: 1578: uint8_t *ptr;
 15153                           ;lorawan.c: 1579: ptr = buffer;
 15154  0032BC  C0B0  F0B6         	movff	MacExecuteCommands@buffer,MacExecuteCommands@ptr
 15155  0032C0  C0B1  F0B7         	movff	MacExecuteCommands@buffer+1,MacExecuteCommands@ptr+1
 15156                           
 15157                           ;lorawan.c: 1580: while ( (ptr < ( buffer + fOptsLen )) && (done == 0) )
 15158  0032C4  D15A               	goto	l1248
 15159  0032C6                     
 15160                           ; BSR set to: 0
 15161                           ;lorawan.c: 1581: {
 15162                           ;lorawan.c: 1583: loRa.macCommands[loRa.crtMacCmdIndex].channelMaskAck = 0;
 15163                           
 15164                           ; BSR set to: 0
 15165  0032C6  0102               	movlb	2	; () banked
 15166  0032C8  51B1               	movf	(_loRa+167)& (0+255),w,b
 15167  0032CA  0D02               	mullw	2
 15168  0032CC  0E0A               	movlw	low _loRa
 15169  0032CE  0100               	movlb	0	; () banked
 15170  0032D0  6FB3               	movwf	??_MacExecuteCommands& (0+255),b
 15171  0032D2  0E02               	movlw	high _loRa
 15172  0032D4  6FB4               	movwf	(??_MacExecuteCommands+1)& (0+255),b
 15173  0032D6  0EA8               	movlw	168
 15174  0032D8  27B3               	addwf	??_MacExecuteCommands& (0+255),f,b
 15175  0032DA  0E00               	movlw	0
 15176  0032DC  23B4               	addwfc	(??_MacExecuteCommands+1)& (0+255),f,b
 15177  0032DE  50F3               	movf	prodl,w,c
 15178  0032E0  27B3               	addwf	??_MacExecuteCommands& (0+255),f,b
 15179  0032E2  50F4               	movf	prodh,w,c
 15180  0032E4  23B4               	addwfc	(??_MacExecuteCommands+1)& (0+255),f,b
 15181  0032E6  0E01               	movlw	1
 15182  0032E8  25B3               	addwf	??_MacExecuteCommands& (0+255),w,b
 15183  0032EA  6ED9               	movwf	fsr2l,c
 15184  0032EC  0E00               	movlw	0
 15185  0032EE  21B4               	addwfc	(??_MacExecuteCommands+1)& (0+255),w,b
 15186  0032F0  6EDA               	movwf	fsr2h,c
 15187  0032F2  0102               	movlb	2	; () banked
 15188  0032F4  90DF               	bcf	indf2,0,c
 15189                           
 15190                           ;lorawan.c: 1584: loRa.macCommands[loRa.crtMacCmdIndex].dataRateAck = 0;
 15191  0032F6  51B1               	movf	(_loRa+167)& (0+255),w,b
 15192  0032F8  0D02               	mullw	2
 15193  0032FA  0E0A               	movlw	low _loRa
 15194  0032FC  0100               	movlb	0	; () banked
 15195  0032FE  6FB3               	movwf	??_MacExecuteCommands& (0+255),b
 15196  003300  0E02               	movlw	high _loRa
 15197  003302  6FB4               	movwf	(??_MacExecuteCommands+1)& (0+255),b
 15198  003304  0EA8               	movlw	168
 15199  003306  27B3               	addwf	??_MacExecuteCommands& (0+255),f,b
 15200  003308  0E00               	movlw	0
 15201  00330A  23B4               	addwfc	(??_MacExecuteCommands+1)& (0+255),f,b
 15202  00330C  50F3               	movf	prodl,w,c
 15203  00330E  27B3               	addwf	??_MacExecuteCommands& (0+255),f,b
 15204  003310  50F4               	movf	prodh,w,c
 15205  003312  23B4               	addwfc	(??_MacExecuteCommands+1)& (0+255),f,b
 15206  003314  0E01               	movlw	1
 15207  003316  25B3               	addwf	??_MacExecuteCommands& (0+255),w,b
 15208  003318  6ED9               	movwf	fsr2l,c
 15209  00331A  0E00               	movlw	0
 15210  00331C  21B4               	addwfc	(??_MacExecuteCommands+1)& (0+255),w,b
 15211  00331E  6EDA               	movwf	fsr2h,c
 15212  003320  0102               	movlb	2	; () banked
 15213  003322  92DF               	bcf	indf2,1,c
 15214                           
 15215                           ;lorawan.c: 1585: loRa.macCommands[loRa.crtMacCmdIndex].powerAck = 0;
 15216  003324  51B1               	movf	(_loRa+167)& (0+255),w,b
 15217  003326  0D02               	mullw	2
 15218  003328  0E0A               	movlw	low _loRa
 15219  00332A  0100               	movlb	0	; () banked
 15220  00332C  6FB3               	movwf	??_MacExecuteCommands& (0+255),b
 15221  00332E  0E02               	movlw	high _loRa
 15222  003330  6FB4               	movwf	(??_MacExecuteCommands+1)& (0+255),b
 15223  003332  0EA8               	movlw	168
 15224  003334  27B3               	addwf	??_MacExecuteCommands& (0+255),f,b
 15225  003336  0E00               	movlw	0
 15226  003338  23B4               	addwfc	(??_MacExecuteCommands+1)& (0+255),f,b
 15227  00333A  50F3               	movf	prodl,w,c
 15228  00333C  27B3               	addwf	??_MacExecuteCommands& (0+255),f,b
 15229  00333E  50F4               	movf	prodh,w,c
 15230  003340  23B4               	addwfc	(??_MacExecuteCommands+1)& (0+255),f,b
 15231  003342  0E01               	movlw	1
 15232  003344  25B3               	addwf	??_MacExecuteCommands& (0+255),w,b
 15233  003346  6ED9               	movwf	fsr2l,c
 15234  003348  0E00               	movlw	0
 15235  00334A  21B4               	addwfc	(??_MacExecuteCommands+1)& (0+255),w,b
 15236  00334C  6EDA               	movwf	fsr2h,c
 15237  00334E  0102               	movlb	2	; () banked
 15238  003350  94DF               	bcf	indf2,2,c
 15239                           
 15240                           ;lorawan.c: 1586: loRa.macCommands[loRa.crtMacCmdIndex].channelAck = 0;
 15241  003352  51B1               	movf	(_loRa+167)& (0+255),w,b
 15242  003354  0D02               	mullw	2
 15243  003356  0E0A               	movlw	low _loRa
 15244  003358  0100               	movlb	0	; () banked
 15245  00335A  6FB3               	movwf	??_MacExecuteCommands& (0+255),b
 15246  00335C  0E02               	movlw	high _loRa
 15247  00335E  6FB4               	movwf	(??_MacExecuteCommands+1)& (0+255),b
 15248  003360  0EA8               	movlw	168
 15249  003362  27B3               	addwf	??_MacExecuteCommands& (0+255),f,b
 15250  003364  0E00               	movlw	0
 15251  003366  23B4               	addwfc	(??_MacExecuteCommands+1)& (0+255),f,b
 15252  003368  50F3               	movf	prodl,w,c
 15253  00336A  27B3               	addwf	??_MacExecuteCommands& (0+255),f,b
 15254  00336C  50F4               	movf	prodh,w,c
 15255  00336E  23B4               	addwfc	(??_MacExecuteCommands+1)& (0+255),f,b
 15256  003370  0E01               	movlw	1
 15257  003372  25B3               	addwf	??_MacExecuteCommands& (0+255),w,b
 15258  003374  6ED9               	movwf	fsr2l,c
 15259  003376  0E00               	movlw	0
 15260  003378  21B4               	addwfc	(??_MacExecuteCommands+1)& (0+255),w,b
 15261  00337A  6EDA               	movwf	fsr2h,c
 15262  00337C  0102               	movlb	2	; () banked
 15263  00337E  96DF               	bcf	indf2,3,c
 15264                           
 15265                           ;lorawan.c: 1587: loRa.macCommands[loRa.crtMacCmdIndex].dataRateReceiveWindowAck = 0;
 15266  003380  51B1               	movf	(_loRa+167)& (0+255),w,b
 15267  003382  0D02               	mullw	2
 15268  003384  0E0A               	movlw	low _loRa
 15269  003386  0100               	movlb	0	; () banked
 15270  003388  6FB3               	movwf	??_MacExecuteCommands& (0+255),b
 15271  00338A  0E02               	movlw	high _loRa
 15272  00338C  6FB4               	movwf	(??_MacExecuteCommands+1)& (0+255),b
 15273  00338E  0EA8               	movlw	168
 15274  003390  27B3               	addwf	??_MacExecuteCommands& (0+255),f,b
 15275  003392  0E00               	movlw	0
 15276  003394  23B4               	addwfc	(??_MacExecuteCommands+1)& (0+255),f,b
 15277  003396  50F3               	movf	prodl,w,c
 15278  003398  27B3               	addwf	??_MacExecuteCommands& (0+255),f,b
 15279  00339A  50F4               	movf	prodh,w,c
 15280  00339C  23B4               	addwfc	(??_MacExecuteCommands+1)& (0+255),f,b
 15281  00339E  0E01               	movlw	1
 15282  0033A0  25B3               	addwf	??_MacExecuteCommands& (0+255),w,b
 15283  0033A2  6ED9               	movwf	fsr2l,c
 15284  0033A4  0E00               	movlw	0
 15285  0033A6  21B4               	addwfc	(??_MacExecuteCommands+1)& (0+255),w,b
 15286  0033A8  6EDA               	movwf	fsr2h,c
 15287  0033AA  0102               	movlb	2	; () banked
 15288  0033AC  98DF               	bcf	indf2,4,c
 15289                           
 15290                           ;lorawan.c: 1588: loRa.macCommands[loRa.crtMacCmdIndex].rx1DROffestAck = 0;
 15291  0033AE  51B1               	movf	(_loRa+167)& (0+255),w,b
 15292  0033B0  0D02               	mullw	2
 15293  0033B2  0E0A               	movlw	low _loRa
 15294  0033B4  0100               	movlb	0	; () banked
 15295  0033B6  6FB3               	movwf	??_MacExecuteCommands& (0+255),b
 15296  0033B8  0E02               	movlw	high _loRa
 15297  0033BA  6FB4               	movwf	(??_MacExecuteCommands+1)& (0+255),b
 15298  0033BC  0EA8               	movlw	168
 15299  0033BE  27B3               	addwf	??_MacExecuteCommands& (0+255),f,b
 15300  0033C0  0E00               	movlw	0
 15301  0033C2  23B4               	addwfc	(??_MacExecuteCommands+1)& (0+255),f,b
 15302  0033C4  50F3               	movf	prodl,w,c
 15303  0033C6  27B3               	addwf	??_MacExecuteCommands& (0+255),f,b
 15304  0033C8  50F4               	movf	prodh,w,c
 15305  0033CA  23B4               	addwfc	(??_MacExecuteCommands+1)& (0+255),f,b
 15306  0033CC  0E01               	movlw	1
 15307  0033CE  25B3               	addwf	??_MacExecuteCommands& (0+255),w,b
 15308  0033D0  6ED9               	movwf	fsr2l,c
 15309  0033D2  0E00               	movlw	0
 15310  0033D4  21B4               	addwfc	(??_MacExecuteCommands+1)& (0+255),w,b
 15311  0033D6  6EDA               	movwf	fsr2h,c
 15312  0033D8  0102               	movlb	2	; () banked
 15313  0033DA  9ADF               	bcf	indf2,5,c
 15314                           
 15315                           ;lorawan.c: 1589: loRa.macCommands[loRa.crtMacCmdIndex].dataRateRangeAck = 0;
 15316  0033DC  51B1               	movf	(_loRa+167)& (0+255),w,b
 15317  0033DE  0D02               	mullw	2
 15318  0033E0  0E0A               	movlw	low _loRa
 15319  0033E2  0100               	movlb	0	; () banked
 15320  0033E4  6FB3               	movwf	??_MacExecuteCommands& (0+255),b
 15321  0033E6  0E02               	movlw	high _loRa
 15322  0033E8  6FB4               	movwf	(??_MacExecuteCommands+1)& (0+255),b
 15323  0033EA  0EA8               	movlw	168
 15324  0033EC  27B3               	addwf	??_MacExecuteCommands& (0+255),f,b
 15325  0033EE  0E00               	movlw	0
 15326  0033F0  23B4               	addwfc	(??_MacExecuteCommands+1)& (0+255),f,b
 15327  0033F2  50F3               	movf	prodl,w,c
 15328  0033F4  27B3               	addwf	??_MacExecuteCommands& (0+255),f,b
 15329  0033F6  50F4               	movf	prodh,w,c
 15330  0033F8  23B4               	addwfc	(??_MacExecuteCommands+1)& (0+255),f,b
 15331  0033FA  0E01               	movlw	1
 15332  0033FC  25B3               	addwf	??_MacExecuteCommands& (0+255),w,b
 15333  0033FE  6ED9               	movwf	fsr2l,c
 15334  003400  0E00               	movlw	0
 15335  003402  21B4               	addwfc	(??_MacExecuteCommands+1)& (0+255),w,b
 15336  003404  6EDA               	movwf	fsr2h,c
 15337  003406  0102               	movlb	2	; () banked
 15338  003408  9CDF               	bcf	indf2,6,c
 15339                           
 15340                           ;lorawan.c: 1590: loRa.macCommands[loRa.crtMacCmdIndex].channelFrequencyAck = 0;
 15341  00340A  51B1               	movf	(_loRa+167)& (0+255),w,b
 15342  00340C  0D02               	mullw	2
 15343  00340E  0E0A               	movlw	low _loRa
 15344  003410  0100               	movlb	0	; () banked
 15345  003412  6FB3               	movwf	??_MacExecuteCommands& (0+255),b
 15346  003414  0E02               	movlw	high _loRa
 15347  003416  6FB4               	movwf	(??_MacExecuteCommands+1)& (0+255),b
 15348  003418  0EA8               	movlw	168
 15349  00341A  27B3               	addwf	??_MacExecuteCommands& (0+255),f,b
 15350  00341C  0E00               	movlw	0
 15351  00341E  23B4               	addwfc	(??_MacExecuteCommands+1)& (0+255),f,b
 15352  003420  50F3               	movf	prodl,w,c
 15353  003422  27B3               	addwf	??_MacExecuteCommands& (0+255),f,b
 15354  003424  50F4               	movf	prodh,w,c
 15355  003426  23B4               	addwfc	(??_MacExecuteCommands+1)& (0+255),f,b
 15356  003428  0E01               	movlw	1
 15357  00342A  25B3               	addwf	??_MacExecuteCommands& (0+255),w,b
 15358  00342C  6ED9               	movwf	fsr2l,c
 15359  00342E  0E00               	movlw	0
 15360  003430  21B4               	addwfc	(??_MacExecuteCommands+1)& (0+255),w,b
 15361  003432  6EDA               	movwf	fsr2h,c
 15362  003434  0102               	movlb	2	; () banked
 15363  003436  9EDF               	bcf	indf2,7,c
 15364                           
 15365                           ; BSR set to: 2
 15366                           ;lorawan.c: 1593: loRa.macCommands[loRa.crtMacCmdIndex].receivedCid = *ptr;
 15367  003438  C0B6  FFD9         	movff	MacExecuteCommands@ptr,fsr2l
 15368  00343C  C0B7  FFDA         	movff	MacExecuteCommands@ptr+1,fsr2h
 15369  003440  51B1               	movf	(_loRa+167)& (0+255),w,b
 15370  003442  0D02               	mullw	2
 15371  003444  0EB2               	movlw	low (_loRa+168)
 15372  003446  24F3               	addwf	prodl,w,c
 15373  003448  6EE9               	movwf	fsr0l,c
 15374  00344A  0E02               	movlw	high (_loRa+168)
 15375  00344C  20F4               	addwfc	prodh,w,c
 15376  00344E  6EEA               	movwf	fsr0h,c
 15377  003450  CFDF FFEF          	movff	indf2,indf0
 15378                           
 15379                           ;lorawan.c: 1595: switch (*ptr ++)
 15380  003454  D064               	goto	l1238
 15381  003456                     
 15382                           ;lorawan.c: 1598: {
 15383                           ;lorawan.c: 1599: ptr = ExecuteLinkCheck (ptr );
 15384                           
 15385                           ; BSR set to: 2
 15386  003456  C0B6  F060         	movff	MacExecuteCommands@ptr,ExecuteLinkCheck@ptr
 15387  00345A  C0B7  F061         	movff	MacExecuteCommands@ptr+1,ExecuteLinkCheck@ptr+1
 15388  00345E  EC6B  F046         	call	_ExecuteLinkCheck
 15389  003462  C060  F0B6         	movff	?_ExecuteLinkCheck,MacExecuteCommands@ptr
 15390  003466  C061  F0B7         	movff	?_ExecuteLinkCheck+1,MacExecuteCommands@ptr+1
 15391  00346A  D04D               	goto	l10979
 15392  00346C                     
 15393                           ;lorawan.c: 1605: {
 15394                           ;lorawan.c: 1606: ptr = ExecuteLinkAdr (ptr );
 15395                           
 15396                           ; BSR set to: 2
 15397  00346C  C0B6  F06F         	movff	MacExecuteCommands@ptr,ExecuteLinkAdr@ptr
 15398  003470  C0B7  F070         	movff	MacExecuteCommands@ptr+1,ExecuteLinkAdr@ptr+1
 15399  003474  ECD6  F01A         	call	_ExecuteLinkAdr	;wreg free
 15400  003478  C06F  F0B6         	movff	?_ExecuteLinkAdr,MacExecuteCommands@ptr
 15401  00347C  C070  F0B7         	movff	?_ExecuteLinkAdr+1,MacExecuteCommands@ptr+1
 15402                           
 15403                           ;lorawan.c: 1607: } break;
 15404  003480  D06C               	goto	l1240
 15405  003482                     
 15406                           ;lorawan.c: 1610: {
 15407                           ;lorawan.c: 1611: ptr = ExecuteDutyCycle(ptr);
 15408  003482  C0B6  F060         	movff	MacExecuteCommands@ptr,ExecuteDutyCycle@ptr
 15409  003486  C0B7  F061         	movff	MacExecuteCommands@ptr+1,ExecuteDutyCycle@ptr+1
 15410  00348A  ECFA  F042         	call	_ExecuteDutyCycle	;wreg free
 15411  00348E  C060  F0B6         	movff	?_ExecuteDutyCycle,MacExecuteCommands@ptr
 15412  003492  C061  F0B7         	movff	?_ExecuteDutyCycle+1,MacExecuteCommands@ptr+1
 15413                           
 15414                           ;lorawan.c: 1612: } break;
 15415  003496  D061               	goto	l1240
 15416  003498                     
 15417                           ;lorawan.c: 1615: {
 15418                           ;lorawan.c: 1616: ptr = ExecuteRxParamSetupReq (ptr);
 15419  003498  C0B6  F0A6         	movff	MacExecuteCommands@ptr,ExecuteRxParamSetupReq@ptr
 15420  00349C  C0B7  F0A7         	movff	MacExecuteCommands@ptr+1,ExecuteRxParamSetupReq@ptr+1
 15421  0034A0  EC2B  F022         	call	_ExecuteRxParamSetupReq	;wreg free
 15422  0034A4  C0A6  F0B6         	movff	?_ExecuteRxParamSetupReq,MacExecuteCommands@ptr
 15423  0034A8  C0A7  F0B7         	movff	?_ExecuteRxParamSetupReq+1,MacExecuteCommands@ptr+1
 15424                           
 15425                           ;lorawan.c: 1617: } break;
 15426  0034AC  D056               	goto	l1240
 15427  0034AE                     
 15428                           ;lorawan.c: 1620: {
 15429                           ;lorawan.c: 1621: ptr = ExecuteDevStatus (ptr);
 15430  0034AE  C0B6  F060         	movff	MacExecuteCommands@ptr,ExecuteDevStatus@ptr
 15431  0034B2  C0B7  F061         	movff	MacExecuteCommands@ptr+1,ExecuteDevStatus@ptr+1
 15432  0034B6  EC69  F04A         	call	_ExecuteDevStatus	;wreg free
 15433  0034BA  C060  F0B6         	movff	?_ExecuteDevStatus,MacExecuteCommands@ptr
 15434  0034BE  C061  F0B7         	movff	?_ExecuteDevStatus+1,MacExecuteCommands@ptr+1
 15435                           
 15436                           ;lorawan.c: 1622: } break;
 15437  0034C2  D04B               	goto	l1240
 15438  0034C4                     
 15439                           ;lorawan.c: 1625: {
 15440                           ;lorawan.c: 1626: ptr = ExecuteNewChannel (ptr);
 15441  0034C4  C0B6  F0A6         	movff	MacExecuteCommands@ptr,ExecuteNewChannel@ptr
 15442  0034C8  C0B7  F0A7         	movff	MacExecuteCommands@ptr+1,ExecuteNewChannel@ptr+1
 15443  0034CC  EC8C  F01D         	call	_ExecuteNewChannel	;wreg free
 15444  0034D0  C0A6  F0B6         	movff	?_ExecuteNewChannel,MacExecuteCommands@ptr
 15445  0034D4  C0A7  F0B7         	movff	?_ExecuteNewChannel+1,MacExecuteCommands@ptr+1
 15446                           
 15447                           ;lorawan.c: 1628: } break;
 15448  0034D8  D040               	goto	l1240
 15449  0034DA                     
 15450                           ;lorawan.c: 1631: {
 15451                           ;lorawan.c: 1632: ptr = ExecuteRxTimingSetup (ptr);
 15452  0034DA  C0B6  F067         	movff	MacExecuteCommands@ptr,ExecuteRxTimingSetup@ptr
 15453  0034DE  C0B7  F068         	movff	MacExecuteCommands@ptr+1,ExecuteRxTimingSetup@ptr+1
 15454  0034E2  ECBF  F047         	call	_ExecuteRxTimingSetup	;wreg free
 15455  0034E6  C067  F0B6         	movff	?_ExecuteRxTimingSetup,MacExecuteCommands@ptr
 15456  0034EA  C068  F0B7         	movff	?_ExecuteRxTimingSetup+1,MacExecuteCommands@ptr+1
 15457                           
 15458                           ;lorawan.c: 1633: } break;
 15459  0034EE  D035               	goto	l1240
 15460  0034F0                     
 15461                           ;lorawan.c: 1636: {
 15462                           ;lorawan.c: 1637: done = 1;
 15463  0034F0  0E01               	movlw	1
 15464  0034F2  0100               	movlb	0	; () banked
 15465  0034F4  6FB5               	movwf	MacExecuteCommands@done& (0+255),b
 15466                           
 15467                           ; BSR set to: 0
 15468                           ;lorawan.c: 1638: ptr = buffer + fOptsLen;
 15469  0034F6  51B2               	movf	MacExecuteCommands@fOptsLen& (0+255),w,b
 15470  0034F8  0D01               	mullw	1
 15471  0034FA  50F3               	movf	prodl,w,c
 15472  0034FC  25B0               	addwf	MacExecuteCommands@buffer& (0+255),w,b
 15473  0034FE  6FB6               	movwf	MacExecuteCommands@ptr& (0+255),b
 15474  003500  50F4               	movf	prodh,w,c
 15475  003502  21B1               	addwfc	(MacExecuteCommands@buffer+1)& (0+255),w,b
 15476  003504  6FB7               	movwf	(MacExecuteCommands@ptr+1)& (0+255),b
 15477  003506                     l10979:
 15478                           
 15479                           ; BSR set to: 0
 15480                           ;lorawan.c: 1639: loRa.macCommands[loRa.crtMacCmdIndex].receivedCid = 0xFF;
 15481  003506  0102               	movlb	2	; () banked
 15482  003508  51B1               	movf	(_loRa+167)& (0+255),w,b
 15483  00350A  0D02               	mullw	2
 15484  00350C  0EB2               	movlw	low (_loRa+168)
 15485  00350E  24F3               	addwf	prodl,w,c
 15486  003510  6ED9               	movwf	fsr2l,c
 15487  003512  0E02               	movlw	high (_loRa+168)
 15488  003514  20F4               	addwfc	prodh,w,c
 15489  003516  6EDA               	movwf	fsr2h,c
 15490  003518  0EFF               	movlw	255
 15491  00351A  6EDF               	movwf	indf2,c
 15492                           
 15493                           ; BSR set to: 2
 15494                           ;lorawan.c: 1641: }
 15495                           
 15496                           ;lorawan.c: 1640: } break;
 15497  00351C  D01E               	goto	l1240
 15498  00351E                     l1238:
 15499                           
 15500                           ; BSR set to: 2
 15501                           
 15502                           ; BSR set to: 2
 15503  00351E  C0B6  FFD9         	movff	MacExecuteCommands@ptr,fsr2l
 15504  003522  C0B7  FFDA         	movff	MacExecuteCommands@ptr+1,fsr2h
 15505  003526  0100               	movlb	0	; () banked
 15506  003528  4BB6               	infsnz	MacExecuteCommands@ptr& (0+255),f,b
 15507  00352A  2BB7               	incf	(MacExecuteCommands@ptr+1)& (0+255),f,b
 15508  00352C  50DF               	movf	indf2,w,c
 15509                           
 15510                           ; Switch size 1, requested type "space"
 15511                           ; Number of cases is 7, Range of values is 2 to 8
 15512                           ; switch strategies available:
 15513                           ; Name         Instructions Cycles
 15514                           ; simple_byte           22    12 (average)
 15515                           ;	Chosen strategy is simple_byte
 15516  00352E  0A02               	xorlw	2	; case 2
 15517  003530  B4D8               	btfsc	status,2,c
 15518  003532  D791               	goto	l1239
 15519  003534  0A01               	xorlw	1	; case 3
 15520  003536  B4D8               	btfsc	status,2,c
 15521  003538  D799               	goto	l1241
 15522  00353A  0A07               	xorlw	7	; case 4
 15523  00353C  B4D8               	btfsc	status,2,c
 15524  00353E  D7A1               	goto	l1242
 15525  003540  0A01               	xorlw	1	; case 5
 15526  003542  B4D8               	btfsc	status,2,c
 15527  003544  D7A9               	goto	l1243
 15528  003546  0A03               	xorlw	3	; case 6
 15529  003548  B4D8               	btfsc	status,2,c
 15530  00354A  D7B1               	goto	l1244
 15531  00354C  0A01               	xorlw	1	; case 7
 15532  00354E  B4D8               	btfsc	status,2,c
 15533  003550  D7B9               	goto	l1245
 15534  003552  0A0F               	xorlw	15	; case 8
 15535  003554  B4D8               	btfsc	status,2,c
 15536  003556  D7C1               	goto	l1246
 15537  003558  D7CB               	goto	l1247
 15538  00355A                     l1240:
 15539                           
 15540                           ;lorawan.c: 1643: if((loRa.macCommands[loRa.crtMacCmdIndex].receivedCid != 0xFF) &&
 15541                           ;lorawan.c: 1644: (loRa.crtMacCmdIndex < 16))
 15542                           
 15543                           ; BSR set to: 0
 15544  00355A  0102               	movlb	2	; () banked
 15545  00355C  51B1               	movf	(_loRa+167)& (0+255),w,b
 15546  00355E  0D02               	mullw	2
 15547  003560  0EB2               	movlw	low (_loRa+168)
 15548  003562  24F3               	addwf	prodl,w,c
 15549  003564  6ED9               	movwf	fsr2l,c
 15550  003566  0E02               	movlw	high (_loRa+168)
 15551  003568  20F4               	addwfc	prodh,w,c
 15552  00356A  6EDA               	movwf	fsr2h,c
 15553  00356C  28DE               	incf	postinc2,w,c
 15554  00356E  B4D8               	btfsc	status,2,c
 15555  003570  D004               	goto	l1248
 15556                           
 15557                           ; BSR set to: 2
 15558  003572  0E10               	movlw	16
 15559  003574  61B1               	cpfslt	(_loRa+167)& (0+255),b
 15560  003576  D001               	goto	l1248
 15561                           
 15562                           ; BSR set to: 2
 15563                           ;lorawan.c: 1645: {
 15564                           ;lorawan.c: 1646: loRa.crtMacCmdIndex ++;
 15565  003578  2BB1               	incf	(_loRa+167)& (0+255),f,b
 15566  00357A                     l1248:
 15567                           
 15568                           ; BSR set to: 2
 15569                           
 15570                           ; BSR set to: 2
 15571  00357A  0100               	movlb	0	; () banked
 15572  00357C  51B2               	movf	MacExecuteCommands@fOptsLen& (0+255),w,b
 15573  00357E  0D01               	mullw	1
 15574  003580  C0B0  F0B3         	movff	MacExecuteCommands@buffer,??_MacExecuteCommands
 15575  003584  C0B1  F0B4         	movff	MacExecuteCommands@buffer+1,??_MacExecuteCommands+1
 15576  003588  50F3               	movf	prodl,w,c
 15577  00358A  27B3               	addwf	??_MacExecuteCommands& (0+255),f,b
 15578  00358C  50F4               	movf	prodh,w,c
 15579  00358E  23B4               	addwfc	(??_MacExecuteCommands+1)& (0+255),f,b
 15580  003590  51B3               	movf	??_MacExecuteCommands& (0+255),w,b
 15581  003592  5DB6               	subwf	MacExecuteCommands@ptr& (0+255),w,b
 15582  003594  51B4               	movf	(??_MacExecuteCommands+1)& (0+255),w,b
 15583  003596  59B7               	subwfb	(MacExecuteCommands@ptr+1)& (0+255),w,b
 15584  003598  B0D8               	btfsc	status,0,c
 15585  00359A  D003               	goto	u11130
 15586                           
 15587                           ; BSR set to: 0
 15588  00359C  51B5               	movf	MacExecuteCommands@done& (0+255),w,b
 15589  00359E  B4D8               	btfsc	status,2,c
 15590  0035A0  D692               	goto	l1237
 15591  0035A2                     u11130:
 15592                           
 15593                           ; BSR set to: 0
 15594                           ;lorawan.c: 1647: }
 15595                           ;lorawan.c: 1648: }
 15596                           ;lorawan.c: 1649: return ptr;
 15597                           
 15598                           ; BSR set to: 0
 15599                           
 15600                           ; BSR set to: 0
 15601  0035A2  C0B6  F0B0         	movff	MacExecuteCommands@ptr,?_MacExecuteCommands
 15602  0035A6  C0B7  F0B1         	movff	MacExecuteCommands@ptr+1,?_MacExecuteCommands+1
 15603  0035AA  0012               	return	
 15604  0035AC                     __end_of_MacExecuteCommands:
 15605                           	opt stack 0
 15606                           tosu	equ	0xFFF
 15607                           tosh	equ	0xFFE
 15608                           tosl	equ	0xFFD
 15609                           pclath	equ	0xFFA
 15610                           tblptru	equ	0xFF8
 15611                           tblptrh	equ	0xFF7
 15612                           tblptrl	equ	0xFF6
 15613                           tablat	equ	0xFF5
 15614                           prodh	equ	0xFF4
 15615                           prodl	equ	0xFF3
 15616                           intcon	equ	0xFF2
 15617                           intcon2	equ	0xFF1
 15618                           intcon3	equ	0xFF0
 15619                           indf0	equ	0xFEF
 15620                           postinc0	equ	0xFEE
 15621                           fsr0h	equ	0xFEA
 15622                           fsr0l	equ	0xFE9
 15623                           wreg	equ	0xFE8
 15624                           postinc1	equ	0xFE6
 15625                           postdec1	equ	0xFE5
 15626                           plusw1	equ	0xFE3
 15627                           fsr1h	equ	0xFE2
 15628                           fsr1l	equ	0xFE1
 15629                           indf2	equ	0xFDF
 15630                           postinc2	equ	0xFDE
 15631                           postdec2	equ	0xFDD
 15632                           fsr2h	equ	0xFDA
 15633                           fsr2l	equ	0xFD9
 15634                           status	equ	0xFD8
 15635                           
 15636 ;; *************** function _ExecuteRxTimingSetup *****************
 15637 ;; Defined at:
 15638 ;;		line 1659 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 15639 ;; Parameters:    Size  Location     Type
 15640 ;;  ptr             2    7[BANK0 ] PTR unsigned char 
 15641 ;;		 -> radioBuffer(271), LORAWAN_RxDone@hdr(2), 
 15642 ;; Auto vars:     Size  Location     Type
 15643 ;;  delay           1    9[BANK0 ] unsigned char 
 15644 ;; Return value:  Size  Location     Type
 15645 ;;                  2    7[BANK0 ] PTR unsigned char 
 15646 ;; Registers used:
 15647 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15648 ;; Tracked objects:
 15649 ;;		On entry : 0/0
 15650 ;;		On exit  : 0/0
 15651 ;;		Unchanged: 0/0
 15652 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15653 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15654 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15655 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15656 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15657 ;;Total ram usage:        3 bytes
 15658 ;; Hardware stack levels used:    1
 15659 ;; Hardware stack levels required when called:    9
 15660 ;; This function calls:
 15661 ;;		_UpdateReceiveDelays
 15662 ;; This function is called by:
 15663 ;;		_MacExecuteCommands
 15664 ;; This function uses a non-reentrant model
 15665 ;;
 15666                           
 15667                           	psect	text71
 15668  008F7E                     __ptext71:
 15669                           	opt stack 0
 15670  008F7E                     _ExecuteRxTimingSetup:
 15671                           	opt stack 16
 15672                           
 15673                           ;lorawan.c: 1661: uint8_t delay;
 15674                           ;lorawan.c: 1663: delay = (*ptr) & 0x0F;
 15675                           
 15676                           ; BSR set to: 0
 15677                           ;incstack = 0
 15678  008F7E  C067  FFD9         	movff	ExecuteRxTimingSetup@ptr,fsr2l
 15679  008F82  C068  FFDA         	movff	ExecuteRxTimingSetup@ptr+1,fsr2h
 15680  008F86  50DF               	movf	indf2,w,c
 15681  008F88  0B0F               	andlw	15
 15682  008F8A  0100               	movlb	0	; () banked
 15683  008F8C  6F69               	movwf	ExecuteRxTimingSetup@delay& (0+255),b
 15684                           
 15685                           ; BSR set to: 0
 15686                           ;lorawan.c: 1664: ptr++;
 15687  008F8E  4B67               	infsnz	ExecuteRxTimingSetup@ptr& (0+255),f,b
 15688  008F90  2B68               	incf	(ExecuteRxTimingSetup@ptr+1)& (0+255),f,b
 15689                           
 15690                           ; BSR set to: 0
 15691                           ;lorawan.c: 1666: UpdateReceiveDelays (delay);
 15692  008F92  5169               	movf	ExecuteRxTimingSetup@delay& (0+255),w,b
 15693  008F94  EC45  F045         	call	_UpdateReceiveDelays
 15694                           
 15695                           ;lorawan.c: 1667: loRa.macStatus.rxTimingSetup = 1;
 15696  008F98  0102               	movlb	2	; () banked
 15697  008F9A  810E               	bsf	(_loRa+4)& (0+255),0,b
 15698                           
 15699                           ; BSR set to: 2
 15700                           ;lorawan.c: 1669: return ptr;
 15701  008F9C  C067  F067         	movff	ExecuteRxTimingSetup@ptr,?_ExecuteRxTimingSetup
 15702  008FA0  C068  F068         	movff	ExecuteRxTimingSetup@ptr+1,?_ExecuteRxTimingSetup+1
 15703  008FA4  0012               	return	
 15704  008FA6                     __end_of_ExecuteRxTimingSetup:
 15705                           	opt stack 0
 15706                           tosu	equ	0xFFF
 15707                           tosh	equ	0xFFE
 15708                           tosl	equ	0xFFD
 15709                           pclath	equ	0xFFA
 15710                           tblptru	equ	0xFF8
 15711                           tblptrh	equ	0xFF7
 15712                           tblptrl	equ	0xFF6
 15713                           tablat	equ	0xFF5
 15714                           prodh	equ	0xFF4
 15715                           prodl	equ	0xFF3
 15716                           intcon	equ	0xFF2
 15717                           intcon2	equ	0xFF1
 15718                           intcon3	equ	0xFF0
 15719                           indf0	equ	0xFEF
 15720                           postinc0	equ	0xFEE
 15721                           fsr0h	equ	0xFEA
 15722                           fsr0l	equ	0xFE9
 15723                           wreg	equ	0xFE8
 15724                           postinc1	equ	0xFE6
 15725                           postdec1	equ	0xFE5
 15726                           plusw1	equ	0xFE3
 15727                           fsr1h	equ	0xFE2
 15728                           fsr1l	equ	0xFE1
 15729                           indf2	equ	0xFDF
 15730                           postinc2	equ	0xFDE
 15731                           postdec2	equ	0xFDD
 15732                           fsr2h	equ	0xFDA
 15733                           fsr2l	equ	0xFD9
 15734                           status	equ	0xFD8
 15735                           
 15736 ;; *************** function _UpdateReceiveDelays *****************
 15737 ;; Defined at:
 15738 ;;		line 2026 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 15739 ;; Parameters:    Size  Location     Type
 15740 ;;  delay           1    wreg     unsigned char 
 15741 ;; Auto vars:     Size  Location     Type
 15742 ;;  delay           1    6[BANK0 ] unsigned char 
 15743 ;; Return value:  Size  Location     Type
 15744 ;;                  1    wreg      void 
 15745 ;; Registers used:
 15746 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 15747 ;; Tracked objects:
 15748 ;;		On entry : 0/0
 15749 ;;		On exit  : 0/0
 15750 ;;		Unchanged: 0/0
 15751 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15752 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15753 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15754 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15755 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15756 ;;Total ram usage:        1 bytes
 15757 ;; Hardware stack levels used:    1
 15758 ;; Hardware stack levels required when called:    8
 15759 ;; This function calls:
 15760 ;;		___wmul
 15761 ;; This function is called by:
 15762 ;;		_LORAWAN_RxDone
 15763 ;;		_ExecuteRxTimingSetup
 15764 ;; This function uses a non-reentrant model
 15765 ;;
 15766                           
 15767                           	psect	text72
 15768  008A8A                     __ptext72:
 15769                           	opt stack 0
 15770  008A8A                     _UpdateReceiveDelays:
 15771                           	opt stack 18
 15772                           
 15773                           ; BSR set to: 2
 15774                           ;incstack = 0
 15775                           ;UpdateReceiveDelays@delay stored from wreg
 15776  008A8A  0100               	movlb	0	; () banked
 15777  008A8C  6F66               	movwf	UpdateReceiveDelays@delay& (0+255),b
 15778                           
 15779                           ;lorawan.c: 2028: loRa.protocolParameters.receiveDelay1 = 1000 * delay ;
 15780  008A8E  C066  F060         	movff	UpdateReceiveDelays@delay,___wmul@multiplier
 15781  008A92  0100               	movlb	0	; () banked
 15782  008A94  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
 15783  008A96  0E03               	movlw	3
 15784  008A98  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 15785  008A9A  0EE8               	movlw	232
 15786  008A9C  6F62               	movwf	___wmul@multiplicand& (0+255),b
 15787  008A9E  ECD3  F047         	call	___wmul	;wreg free
 15788  008AA2  C060  F29E         	movff	?___wmul,_loRa+148
 15789  008AA6  C061  F29F         	movff	?___wmul+1,_loRa+149
 15790                           
 15791                           ;lorawan.c: 2029: if (delay == 0)
 15792  008AAA  0100               	movlb	0	; () banked
 15793  008AAC  5166               	movf	UpdateReceiveDelays@delay& (0+255),w,b
 15794  008AAE  A4D8               	btfss	status,2,c
 15795  008AB0  D005               	goto	l1347
 15796                           
 15797                           ; BSR set to: 0
 15798                           ;lorawan.c: 2030: {
 15799                           ;lorawan.c: 2031: loRa.protocolParameters.receiveDelay1 = 1000;
 15800  008AB2  0E03               	movlw	3
 15801  008AB4  0102               	movlb	2	; () banked
 15802  008AB6  6F9F               	movwf	(_loRa+149)& (0+255),b
 15803  008AB8  0EE8               	movlw	232
 15804  008ABA  6F9E               	movwf	(_loRa+148)& (0+255),b
 15805  008ABC                     l1347:
 15806                           
 15807                           ;lorawan.c: 2032: }
 15808                           ;lorawan.c: 2034: loRa.protocolParameters.receiveDelay2 = loRa.protocolParameters.receiv
      +                          eDelay1 + 1000;
 15809                           
 15810                           ; BSR set to: 2
 15811  008ABC  0EE8               	movlw	232
 15812  008ABE  0102               	movlb	2	; () banked
 15813  008AC0  259E               	addwf	(_loRa+148)& (0+255),w,b
 15814  008AC2  6FA0               	movwf	(_loRa+150)& (0+255),b
 15815  008AC4  0E03               	movlw	3
 15816  008AC6  219F               	addwfc	(_loRa+149)& (0+255),w,b
 15817  008AC8  6FA1               	movwf	(_loRa+151)& (0+255),b
 15818                           
 15819                           ; BSR set to: 2
 15820  008ACA  0012               	return		;funcret
 15821  008ACC                     __end_of_UpdateReceiveDelays:
 15822                           	opt stack 0
 15823                           tosu	equ	0xFFF
 15824                           tosh	equ	0xFFE
 15825                           tosl	equ	0xFFD
 15826                           pclath	equ	0xFFA
 15827                           tblptru	equ	0xFF8
 15828                           tblptrh	equ	0xFF7
 15829                           tblptrl	equ	0xFF6
 15830                           tablat	equ	0xFF5
 15831                           prodh	equ	0xFF4
 15832                           prodl	equ	0xFF3
 15833                           intcon	equ	0xFF2
 15834                           intcon2	equ	0xFF1
 15835                           intcon3	equ	0xFF0
 15836                           indf0	equ	0xFEF
 15837                           postinc0	equ	0xFEE
 15838                           fsr0h	equ	0xFEA
 15839                           fsr0l	equ	0xFE9
 15840                           wreg	equ	0xFE8
 15841                           postinc1	equ	0xFE6
 15842                           postdec1	equ	0xFE5
 15843                           plusw1	equ	0xFE3
 15844                           fsr1h	equ	0xFE2
 15845                           fsr1l	equ	0xFE1
 15846                           indf2	equ	0xFDF
 15847                           postinc2	equ	0xFDE
 15848                           postdec2	equ	0xFDD
 15849                           fsr2h	equ	0xFDA
 15850                           fsr2l	equ	0xFD9
 15851                           status	equ	0xFD8
 15852                           
 15853 ;; *************** function ___wmul *****************
 15854 ;; Defined at:
 15855 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
 15856 ;; Parameters:    Size  Location     Type
 15857 ;;  multiplier      2    0[BANK0 ] unsigned int 
 15858 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 15859 ;; Auto vars:     Size  Location     Type
 15860 ;;  product         2    4[BANK0 ] unsigned int 
 15861 ;; Return value:  Size  Location     Type
 15862 ;;                  2    0[BANK0 ] unsigned int 
 15863 ;; Registers used:
 15864 ;;		wreg, status,2, status,0, prodl, prodh
 15865 ;; Tracked objects:
 15866 ;;		On entry : 0/0
 15867 ;;		On exit  : 0/0
 15868 ;;		Unchanged: 0/0
 15869 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15870 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15871 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15872 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15873 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15874 ;;Total ram usage:        6 bytes
 15875 ;; Hardware stack levels used:    1
 15876 ;; Hardware stack levels required when called:    7
 15877 ;; This function calls:
 15878 ;;		Nothing
 15879 ;; This function is called by:
 15880 ;;		_UpdateReceiveDelays
 15881 ;;		_UpdateCfList
 15882 ;;		_hexadecimalToDecimal
 15883 ;; This function uses a non-reentrant model
 15884 ;;
 15885                           
 15886                           	psect	text73
 15887  008FA6                     __ptext73:
 15888                           	opt stack 0
 15889  008FA6                     ___wmul:
 15890                           	opt stack 18
 15891                           
 15892                           ; BSR set to: 2
 15893                           ;incstack = 0
 15894  008FA6  0100               	movlb	0	; () banked
 15895  008FA8  5160               	movf	___wmul@multiplier& (0+255),w,b
 15896  008FAA  0362               	mulwf	___wmul@multiplicand& (0+255),b
 15897  008FAC  CFF3 F064          	movff	prodl,___wmul@product
 15898  008FB0  CFF4 F065          	movff	prodh,___wmul@product+1
 15899  008FB4  5160               	movf	___wmul@multiplier& (0+255),w,b
 15900  008FB6  0363               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 15901  008FB8  50F3               	movf	prodl,w,c
 15902  008FBA  2765               	addwf	(___wmul@product+1)& (0+255),f,b
 15903  008FBC  5161               	movf	(___wmul@multiplier+1)& (0+255),w,b
 15904  008FBE  0362               	mulwf	___wmul@multiplicand& (0+255),b
 15905  008FC0  50F3               	movf	prodl,w,c
 15906  008FC2  2765               	addwf	(___wmul@product+1)& (0+255),f,b
 15907                           
 15908                           ; BSR set to: 0
 15909  008FC4  C064  F060         	movff	___wmul@product,?___wmul
 15910  008FC8  C065  F061         	movff	___wmul@product+1,?___wmul+1
 15911  008FCC  0012               	return	
 15912  008FCE                     __end_of___wmul:
 15913                           	opt stack 0
 15914                           tosu	equ	0xFFF
 15915                           tosh	equ	0xFFE
 15916                           tosl	equ	0xFFD
 15917                           pclath	equ	0xFFA
 15918                           tblptru	equ	0xFF8
 15919                           tblptrh	equ	0xFF7
 15920                           tblptrl	equ	0xFF6
 15921                           tablat	equ	0xFF5
 15922                           prodh	equ	0xFF4
 15923                           prodl	equ	0xFF3
 15924                           intcon	equ	0xFF2
 15925                           intcon2	equ	0xFF1
 15926                           intcon3	equ	0xFF0
 15927                           indf0	equ	0xFEF
 15928                           postinc0	equ	0xFEE
 15929                           fsr0h	equ	0xFEA
 15930                           fsr0l	equ	0xFE9
 15931                           wreg	equ	0xFE8
 15932                           postinc1	equ	0xFE6
 15933                           postdec1	equ	0xFE5
 15934                           plusw1	equ	0xFE3
 15935                           fsr1h	equ	0xFE2
 15936                           fsr1l	equ	0xFE1
 15937                           indf2	equ	0xFDF
 15938                           postinc2	equ	0xFDE
 15939                           postdec2	equ	0xFDD
 15940                           fsr2h	equ	0xFDA
 15941                           fsr2l	equ	0xFD9
 15942                           status	equ	0xFD8
 15943                           
 15944 ;; *************** function _ExecuteRxParamSetupReq *****************
 15945 ;; Defined at:
 15946 ;;		line 740 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 15947 ;; Parameters:    Size  Location     Type
 15948 ;;  ptr             2   70[BANK0 ] PTR unsigned char 
 15949 ;;		 -> radioBuffer(271), LORAWAN_RxDone@hdr(2), 
 15950 ;; Auto vars:     Size  Location     Type
 15951 ;;  frequency       4   74[BANK0 ] unsigned long 
 15952 ;;  dlSettings      1   78[BANK0 ] struct .
 15953 ;; Return value:  Size  Location     Type
 15954 ;;                  2   70[BANK0 ] PTR unsigned char 
 15955 ;; Registers used:
 15956 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15957 ;; Tracked objects:
 15958 ;;		On entry : 0/0
 15959 ;;		On exit  : 0/0
 15960 ;;		Unchanged: 0/0
 15961 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15962 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15963 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15964 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15965 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15966 ;;Total ram usage:        9 bytes
 15967 ;; Hardware stack levels used:    1
 15968 ;; Hardware stack levels required when called:    8
 15969 ;; This function calls:
 15970 ;;		_UpdateReceiveWindow2Parameters
 15971 ;;		_ValidateDataRate
 15972 ;;		_ValidateFrequency
 15973 ;;		_ValidateRxOffset
 15974 ;;		___lmul
 15975 ;; This function is called by:
 15976 ;;		_MacExecuteCommands
 15977 ;; This function uses a non-reentrant model
 15978 ;;
 15979                           
 15980                           	psect	text74
 15981  004456                     __ptext74:
 15982                           	opt stack 0
 15983  004456                     _ExecuteRxParamSetupReq:
 15984                           	opt stack 17
 15985                           
 15986                           ;lorawan_eu.c: 742: DlSettings_t dlSettings;
 15987                           ;lorawan_eu.c: 743: uint32_t frequency = 0;
 15988                           
 15989                           ; BSR set to: 0
 15990                           ;incstack = 0
 15991  004456  0E00               	movlw	0
 15992  004458  0100               	movlb	0	; () banked
 15993  00445A  6FAA               	movwf	ExecuteRxParamSetupReq@frequency& (0+255),b
 15994  00445C  0E00               	movlw	0
 15995  00445E  6FAB               	movwf	(ExecuteRxParamSetupReq@frequency+1)& (0+255),b
 15996  004460  0E00               	movlw	0
 15997  004462  6FAC               	movwf	(ExecuteRxParamSetupReq@frequency+2)& (0+255),b
 15998  004464  0E00               	movlw	0
 15999  004466  6FAD               	movwf	(ExecuteRxParamSetupReq@frequency+3)& (0+255),b
 16000                           
 16001                           ; BSR set to: 0
 16002                           ;lorawan_eu.c: 747: dlSettings.value = *(ptr++);
 16003  004468  C0A6  FFD9         	movff	ExecuteRxParamSetupReq@ptr,fsr2l
 16004  00446C  C0A7  FFDA         	movff	ExecuteRxParamSetupReq@ptr+1,fsr2h
 16005  004470  50DF               	movf	indf2,w,c
 16006  004472  6FAE               	movwf	ExecuteRxParamSetupReq@dlSettings& (0+255),b
 16007                           
 16008                           ; BSR set to: 0
 16009  004474  4BA6               	infsnz	ExecuteRxParamSetupReq@ptr& (0+255),f,b
 16010  004476  2BA7               	incf	(ExecuteRxParamSetupReq@ptr+1)& (0+255),f,b
 16011                           
 16012                           ; BSR set to: 0
 16013                           ;lorawan_eu.c: 749: frequency = (*((uint32_t*)ptr)) & 0x00FFFFFF;
 16014  004478  C0A6  FFD9         	movff	ExecuteRxParamSetupReq@ptr,fsr2l
 16015  00447C  C0A7  FFDA         	movff	ExecuteRxParamSetupReq@ptr+1,fsr2h
 16016  004480  0EFF               	movlw	255
 16017  004482  14DE               	andwf	postinc2,w,c
 16018  004484  6FAA               	movwf	ExecuteRxParamSetupReq@frequency& (0+255),b
 16019  004486  0EFF               	movlw	255
 16020  004488  14DE               	andwf	postinc2,w,c
 16021  00448A  6FAB               	movwf	(ExecuteRxParamSetupReq@frequency+1)& (0+255),b
 16022  00448C  0EFF               	movlw	255
 16023  00448E  14DE               	andwf	postinc2,w,c
 16024  004490  6FAC               	movwf	(ExecuteRxParamSetupReq@frequency+2)& (0+255),b
 16025  004492  0E00               	movlw	0
 16026  004494  14DE               	andwf	postinc2,w,c
 16027  004496  6FAD               	movwf	(ExecuteRxParamSetupReq@frequency+3)& (0+255),b
 16028                           
 16029                           ; BSR set to: 0
 16030                           ;lorawan_eu.c: 750: frequency = frequency * 100;
 16031  004498  C0AA  F09A         	movff	ExecuteRxParamSetupReq@frequency,___lmul@multiplier
 16032  00449C  C0AB  F09B         	movff	ExecuteRxParamSetupReq@frequency+1,___lmul@multiplier+1
 16033  0044A0  C0AC  F09C         	movff	ExecuteRxParamSetupReq@frequency+2,___lmul@multiplier+2
 16034  0044A4  C0AD  F09D         	movff	ExecuteRxParamSetupReq@frequency+3,___lmul@multiplier+3
 16035  0044A8  0E64               	movlw	100
 16036  0044AA  6F9E               	movwf	___lmul@multiplicand& (0+255),b
 16037  0044AC  0E00               	movlw	0
 16038  0044AE  6F9F               	movwf	(___lmul@multiplicand+1)& (0+255),b
 16039  0044B0  0E00               	movlw	0
 16040  0044B2  6FA0               	movwf	(___lmul@multiplicand+2)& (0+255),b
 16041  0044B4  0E00               	movlw	0
 16042  0044B6  6FA1               	movwf	(___lmul@multiplicand+3)& (0+255),b
 16043  0044B8  EC4D  F042         	call	___lmul	;wreg free
 16044  0044BC  C09A  F0AA         	movff	?___lmul,ExecuteRxParamSetupReq@frequency
 16045  0044C0  C09B  F0AB         	movff	?___lmul+1,ExecuteRxParamSetupReq@frequency+1
 16046  0044C4  C09C  F0AC         	movff	?___lmul+2,ExecuteRxParamSetupReq@frequency+2
 16047  0044C8  C09D  F0AD         	movff	?___lmul+3,ExecuteRxParamSetupReq@frequency+3
 16048                           
 16049                           ;lorawan_eu.c: 751: ptr = ptr + 3;
 16050  0044CC  0E03               	movlw	3
 16051  0044CE  0100               	movlb	0	; () banked
 16052  0044D0  25A6               	addwf	ExecuteRxParamSetupReq@ptr& (0+255),w,b
 16053  0044D2  6FA6               	movwf	ExecuteRxParamSetupReq@ptr& (0+255),b
 16054  0044D4  0E00               	movlw	0
 16055  0044D6  21A7               	addwfc	(ExecuteRxParamSetupReq@ptr+1)& (0+255),w,b
 16056  0044D8  6FA7               	movwf	(ExecuteRxParamSetupReq@ptr+1)& (0+255),b
 16057                           
 16058                           ; BSR set to: 0
 16059                           ;lorawan_eu.c: 753: if (ValidateFrequency (frequency) == OK)
 16060  0044DA  C0AA  F060         	movff	ExecuteRxParamSetupReq@frequency,ValidateFrequency@frequencyNew
 16061  0044DE  C0AB  F061         	movff	ExecuteRxParamSetupReq@frequency+1,ValidateFrequency@frequencyNew+1
 16062  0044E2  C0AC  F062         	movff	ExecuteRxParamSetupReq@frequency+2,ValidateFrequency@frequencyNew+2
 16063  0044E6  C0AD  F063         	movff	ExecuteRxParamSetupReq@frequency+3,ValidateFrequency@frequencyNew+3
 16064  0044EA  EC0F  F040         	call	_ValidateFrequency	;wreg free
 16065  0044EE  0900               	iorlw	0
 16066  0044F0  A4D8               	btfss	status,2,c
 16067  0044F2  D018               	goto	l1971
 16068                           
 16069                           ;lorawan_eu.c: 754: {
 16070                           ;lorawan_eu.c: 755: loRa.macCommands[loRa.crtMacCmdIndex].channelAck = 1;
 16071  0044F4  0102               	movlb	2	; () banked
 16072  0044F6  51B1               	movf	(_loRa+167)& (0+255),w,b
 16073  0044F8  0D02               	mullw	2
 16074  0044FA  0E0A               	movlw	low _loRa
 16075  0044FC  0100               	movlb	0	; () banked
 16076  0044FE  6FA8               	movwf	??_ExecuteRxParamSetupReq& (0+255),b
 16077  004500  0E02               	movlw	high _loRa
 16078  004502  6FA9               	movwf	(??_ExecuteRxParamSetupReq+1)& (0+255),b
 16079  004504  0EA8               	movlw	168
 16080  004506  27A8               	addwf	??_ExecuteRxParamSetupReq& (0+255),f,b
 16081  004508  0E00               	movlw	0
 16082  00450A  23A9               	addwfc	(??_ExecuteRxParamSetupReq+1)& (0+255),f,b
 16083  00450C  50F3               	movf	prodl,w,c
 16084  00450E  27A8               	addwf	??_ExecuteRxParamSetupReq& (0+255),f,b
 16085  004510  50F4               	movf	prodh,w,c
 16086  004512  23A9               	addwfc	(??_ExecuteRxParamSetupReq+1)& (0+255),f,b
 16087  004514  0E01               	movlw	1
 16088  004516  25A8               	addwf	??_ExecuteRxParamSetupReq& (0+255),w,b
 16089  004518  6ED9               	movwf	fsr2l,c
 16090  00451A  0E00               	movlw	0
 16091  00451C  21A9               	addwfc	(??_ExecuteRxParamSetupReq+1)& (0+255),w,b
 16092  00451E  6EDA               	movwf	fsr2h,c
 16093  004520  0102               	movlb	2	; () banked
 16094  004522  86DF               	bsf	indf2,3,c
 16095  004524                     l1971:
 16096                           
 16097                           ;lorawan_eu.c: 756: }
 16098                           ;lorawan_eu.c: 758: if (ValidateDataRate (dlSettings.bits.rx2DataRate) == OK)
 16099                           
 16100                           ; BSR set to: 2
 16101  004524  0100               	movlb	0	; () banked
 16102  004526  51AE               	movf	ExecuteRxParamSetupReq@dlSettings& (0+255),w,b
 16103  004528  0B0F               	andlw	15
 16104  00452A  EC99  F049         	call	_ValidateDataRate
 16105  00452E  0900               	iorlw	0
 16106  004530  A4D8               	btfss	status,2,c
 16107  004532  D018               	goto	l1972
 16108                           
 16109                           ;lorawan_eu.c: 759: {
 16110                           ;lorawan_eu.c: 760: loRa.macCommands[loRa.crtMacCmdIndex].dataRateReceiveWindowAck = 1;
 16111  004534  0102               	movlb	2	; () banked
 16112  004536  51B1               	movf	(_loRa+167)& (0+255),w,b
 16113  004538  0D02               	mullw	2
 16114  00453A  0E0A               	movlw	low _loRa
 16115  00453C  0100               	movlb	0	; () banked
 16116  00453E  6FA8               	movwf	??_ExecuteRxParamSetupReq& (0+255),b
 16117  004540  0E02               	movlw	high _loRa
 16118  004542  6FA9               	movwf	(??_ExecuteRxParamSetupReq+1)& (0+255),b
 16119  004544  0EA8               	movlw	168
 16120  004546  27A8               	addwf	??_ExecuteRxParamSetupReq& (0+255),f,b
 16121  004548  0E00               	movlw	0
 16122  00454A  23A9               	addwfc	(??_ExecuteRxParamSetupReq+1)& (0+255),f,b
 16123  00454C  50F3               	movf	prodl,w,c
 16124  00454E  27A8               	addwf	??_ExecuteRxParamSetupReq& (0+255),f,b
 16125  004550  50F4               	movf	prodh,w,c
 16126  004552  23A9               	addwfc	(??_ExecuteRxParamSetupReq+1)& (0+255),f,b
 16127  004554  0E01               	movlw	1
 16128  004556  25A8               	addwf	??_ExecuteRxParamSetupReq& (0+255),w,b
 16129  004558  6ED9               	movwf	fsr2l,c
 16130  00455A  0E00               	movlw	0
 16131  00455C  21A9               	addwfc	(??_ExecuteRxParamSetupReq+1)& (0+255),w,b
 16132  00455E  6EDA               	movwf	fsr2h,c
 16133  004560  0102               	movlb	2	; () banked
 16134  004562  88DF               	bsf	indf2,4,c
 16135  004564                     l1972:
 16136                           
 16137                           ;lorawan_eu.c: 761: }
 16138                           ;lorawan_eu.c: 763: if (ValidateRxOffset (dlSettings.bits.rx1DROffset) == OK)
 16139                           
 16140                           ; BSR set to: 2
 16141  004564  0100               	movlb	0	; () banked
 16142  004566  39AE               	swapf	ExecuteRxParamSetupReq@dlSettings& (0+255),w,b
 16143  004568  0B07               	andlw	7
 16144  00456A  EC8D  F049         	call	_ValidateRxOffset
 16145  00456E  0900               	iorlw	0
 16146  004570  A4D8               	btfss	status,2,c
 16147  004572  D018               	goto	l1973
 16148                           
 16149                           ;lorawan_eu.c: 764: {
 16150                           ;lorawan_eu.c: 765: loRa.macCommands[loRa.crtMacCmdIndex].rx1DROffestAck = 1;
 16151  004574  0102               	movlb	2	; () banked
 16152  004576  51B1               	movf	(_loRa+167)& (0+255),w,b
 16153  004578  0D02               	mullw	2
 16154  00457A  0E0A               	movlw	low _loRa
 16155  00457C  0100               	movlb	0	; () banked
 16156  00457E  6FA8               	movwf	??_ExecuteRxParamSetupReq& (0+255),b
 16157  004580  0E02               	movlw	high _loRa
 16158  004582  6FA9               	movwf	(??_ExecuteRxParamSetupReq+1)& (0+255),b
 16159  004584  0EA8               	movlw	168
 16160  004586  27A8               	addwf	??_ExecuteRxParamSetupReq& (0+255),f,b
 16161  004588  0E00               	movlw	0
 16162  00458A  23A9               	addwfc	(??_ExecuteRxParamSetupReq+1)& (0+255),f,b
 16163  00458C  50F3               	movf	prodl,w,c
 16164  00458E  27A8               	addwf	??_ExecuteRxParamSetupReq& (0+255),f,b
 16165  004590  50F4               	movf	prodh,w,c
 16166  004592  23A9               	addwfc	(??_ExecuteRxParamSetupReq+1)& (0+255),f,b
 16167  004594  0E01               	movlw	1
 16168  004596  25A8               	addwf	??_ExecuteRxParamSetupReq& (0+255),w,b
 16169  004598  6ED9               	movwf	fsr2l,c
 16170  00459A  0E00               	movlw	0
 16171  00459C  21A9               	addwfc	(??_ExecuteRxParamSetupReq+1)& (0+255),w,b
 16172  00459E  6EDA               	movwf	fsr2h,c
 16173  0045A0  0102               	movlb	2	; () banked
 16174  0045A2  8ADF               	bsf	indf2,5,c
 16175  0045A4                     l1973:
 16176                           
 16177                           ;lorawan_eu.c: 766: }
 16178                           ;lorawan_eu.c: 768: if ( (loRa.macCommands[loRa.crtMacCmdIndex].dataRateReceiveWindowAck
      +                           == 1) && (loRa.macCommands[loRa.crtMacCmdIndex].channelAck == 1) && (loRa.macCommands[l
      +                          oRa.crtMacCmdIndex].rx1DROffestAck == 1))
 16179  0045A4  0102               	movlb	2	; () banked
 16180  0045A6  51B1               	movf	(_loRa+167)& (0+255),w,b
 16181  0045A8  0D02               	mullw	2
 16182  0045AA  0E0A               	movlw	low _loRa
 16183  0045AC  0100               	movlb	0	; () banked
 16184  0045AE  6FA8               	movwf	??_ExecuteRxParamSetupReq& (0+255),b
 16185  0045B0  0E02               	movlw	high _loRa
 16186  0045B2  6FA9               	movwf	(??_ExecuteRxParamSetupReq+1)& (0+255),b
 16187  0045B4  0EA8               	movlw	168
 16188  0045B6  27A8               	addwf	??_ExecuteRxParamSetupReq& (0+255),f,b
 16189  0045B8  0E00               	movlw	0
 16190  0045BA  23A9               	addwfc	(??_ExecuteRxParamSetupReq+1)& (0+255),f,b
 16191  0045BC  50F3               	movf	prodl,w,c
 16192  0045BE  27A8               	addwf	??_ExecuteRxParamSetupReq& (0+255),f,b
 16193  0045C0  50F4               	movf	prodh,w,c
 16194  0045C2  23A9               	addwfc	(??_ExecuteRxParamSetupReq+1)& (0+255),f,b
 16195  0045C4  0E01               	movlw	1
 16196  0045C6  25A8               	addwf	??_ExecuteRxParamSetupReq& (0+255),w,b
 16197  0045C8  6ED9               	movwf	fsr2l,c
 16198  0045CA  0E00               	movlw	0
 16199  0045CC  21A9               	addwfc	(??_ExecuteRxParamSetupReq+1)& (0+255),w,b
 16200  0045CE  6EDA               	movwf	fsr2h,c
 16201  0045D0  0102               	movlb	2	; () banked
 16202  0045D2  A8DF               	btfss	indf2,4,c
 16203  0045D4  D045               	goto	l1974
 16204                           
 16205                           ; BSR set to: 2
 16206  0045D6  51B1               	movf	(_loRa+167)& (0+255),w,b
 16207  0045D8  0D02               	mullw	2
 16208  0045DA  0E0A               	movlw	low _loRa
 16209  0045DC  0100               	movlb	0	; () banked
 16210  0045DE  6FA8               	movwf	??_ExecuteRxParamSetupReq& (0+255),b
 16211  0045E0  0E02               	movlw	high _loRa
 16212  0045E2  6FA9               	movwf	(??_ExecuteRxParamSetupReq+1)& (0+255),b
 16213  0045E4  0EA8               	movlw	168
 16214  0045E6  27A8               	addwf	??_ExecuteRxParamSetupReq& (0+255),f,b
 16215  0045E8  0E00               	movlw	0
 16216  0045EA  23A9               	addwfc	(??_ExecuteRxParamSetupReq+1)& (0+255),f,b
 16217  0045EC  50F3               	movf	prodl,w,c
 16218  0045EE  27A8               	addwf	??_ExecuteRxParamSetupReq& (0+255),f,b
 16219  0045F0  50F4               	movf	prodh,w,c
 16220  0045F2  23A9               	addwfc	(??_ExecuteRxParamSetupReq+1)& (0+255),f,b
 16221  0045F4  0E01               	movlw	1
 16222  0045F6  25A8               	addwf	??_ExecuteRxParamSetupReq& (0+255),w,b
 16223  0045F8  6ED9               	movwf	fsr2l,c
 16224  0045FA  0E00               	movlw	0
 16225  0045FC  21A9               	addwfc	(??_ExecuteRxParamSetupReq+1)& (0+255),w,b
 16226  0045FE  6EDA               	movwf	fsr2h,c
 16227  004600  0102               	movlb	2	; () banked
 16228  004602  A6DF               	btfss	indf2,3,c
 16229  004604  D02D               	goto	l1974
 16230                           
 16231                           ; BSR set to: 2
 16232  004606  51B1               	movf	(_loRa+167)& (0+255),w,b
 16233  004608  0D02               	mullw	2
 16234  00460A  0E0A               	movlw	low _loRa
 16235  00460C  0100               	movlb	0	; () banked
 16236  00460E  6FA8               	movwf	??_ExecuteRxParamSetupReq& (0+255),b
 16237  004610  0E02               	movlw	high _loRa
 16238  004612  6FA9               	movwf	(??_ExecuteRxParamSetupReq+1)& (0+255),b
 16239  004614  0EA8               	movlw	168
 16240  004616  27A8               	addwf	??_ExecuteRxParamSetupReq& (0+255),f,b
 16241  004618  0E00               	movlw	0
 16242  00461A  23A9               	addwfc	(??_ExecuteRxParamSetupReq+1)& (0+255),f,b
 16243  00461C  50F3               	movf	prodl,w,c
 16244  00461E  27A8               	addwf	??_ExecuteRxParamSetupReq& (0+255),f,b
 16245  004620  50F4               	movf	prodh,w,c
 16246  004622  23A9               	addwfc	(??_ExecuteRxParamSetupReq+1)& (0+255),f,b
 16247  004624  0E01               	movlw	1
 16248  004626  25A8               	addwf	??_ExecuteRxParamSetupReq& (0+255),w,b
 16249  004628  6ED9               	movwf	fsr2l,c
 16250  00462A  0E00               	movlw	0
 16251  00462C  21A9               	addwfc	(??_ExecuteRxParamSetupReq+1)& (0+255),w,b
 16252  00462E  6EDA               	movwf	fsr2h,c
 16253  004630  0102               	movlb	2	; () banked
 16254  004632  AADF               	btfss	indf2,5,c
 16255  004634  D015               	goto	l1974
 16256                           
 16257                           ; BSR set to: 2
 16258                           ;lorawan_eu.c: 769: {
 16259                           ;lorawan_eu.c: 770: loRa.offset = dlSettings.bits.rx1DROffset;
 16260  004636  0100               	movlb	0	; () banked
 16261  004638  39AE               	swapf	ExecuteRxParamSetupReq@dlSettings& (0+255),w,b
 16262  00463A  0B07               	andlw	7
 16263  00463C  0102               	movlb	2	; () banked
 16264  00463E  6FF9               	movwf	(_loRa+239)& (0+255),b
 16265                           
 16266                           ; BSR set to: 2
 16267                           ;lorawan_eu.c: 771: UpdateReceiveWindow2Parameters (frequency, dlSettings.bits.rx2DataRa
      +                          te);
 16268  004640  C0AA  F060         	movff	ExecuteRxParamSetupReq@frequency,UpdateReceiveWindow2Parameters@frequency
 16269  004644  C0AB  F061         	movff	ExecuteRxParamSetupReq@frequency+1,UpdateReceiveWindow2Parameters@frequency+1
 16270  004648  C0AC  F062         	movff	ExecuteRxParamSetupReq@frequency+2,UpdateReceiveWindow2Parameters@frequency+2
 16271  00464C  C0AD  F063         	movff	ExecuteRxParamSetupReq@frequency+3,UpdateReceiveWindow2Parameters@frequency+3
 16272  004650  0100               	movlb	0	; () banked
 16273  004652  51AE               	movf	ExecuteRxParamSetupReq@dlSettings& (0+255),w,b
 16274  004654  0B0F               	andlw	15
 16275  004656  6F64               	movwf	UpdateReceiveWindow2Parameters@dataRate& (0+255),b
 16276  004658  ECA5  F049         	call	_UpdateReceiveWindow2Parameters	;wreg free
 16277                           
 16278                           ;lorawan_eu.c: 772: loRa.macStatus.secondReceiveWindowModified = 1;
 16279  00465C  0102               	movlb	2	; () banked
 16280  00465E  8F0D               	bsf	(_loRa+3)& (0+255),7,b
 16281  004660                     l1974:
 16282                           
 16283                           ; BSR set to: 2
 16284                           ;lorawan_eu.c: 773: }
 16285                           ;lorawan_eu.c: 775: return ptr;
 16286                           
 16287                           ; BSR set to: 2
 16288  004660  C0A6  F0A6         	movff	ExecuteRxParamSetupReq@ptr,?_ExecuteRxParamSetupReq
 16289  004664  C0A7  F0A7         	movff	ExecuteRxParamSetupReq@ptr+1,?_ExecuteRxParamSetupReq+1
 16290  004668  0012               	return	
 16291  00466A                     __end_of_ExecuteRxParamSetupReq:
 16292                           	opt stack 0
 16293                           tosu	equ	0xFFF
 16294                           tosh	equ	0xFFE
 16295                           tosl	equ	0xFFD
 16296                           pclath	equ	0xFFA
 16297                           tblptru	equ	0xFF8
 16298                           tblptrh	equ	0xFF7
 16299                           tblptrl	equ	0xFF6
 16300                           tablat	equ	0xFF5
 16301                           prodh	equ	0xFF4
 16302                           prodl	equ	0xFF3
 16303                           intcon	equ	0xFF2
 16304                           intcon2	equ	0xFF1
 16305                           intcon3	equ	0xFF0
 16306                           indf0	equ	0xFEF
 16307                           postinc0	equ	0xFEE
 16308                           fsr0h	equ	0xFEA
 16309                           fsr0l	equ	0xFE9
 16310                           wreg	equ	0xFE8
 16311                           postinc1	equ	0xFE6
 16312                           postdec1	equ	0xFE5
 16313                           plusw1	equ	0xFE3
 16314                           fsr1h	equ	0xFE2
 16315                           fsr1l	equ	0xFE1
 16316                           indf2	equ	0xFDF
 16317                           postinc2	equ	0xFDE
 16318                           postdec2	equ	0xFDD
 16319                           fsr2h	equ	0xFDA
 16320                           fsr2l	equ	0xFD9
 16321                           status	equ	0xFD8
 16322                           
 16323 ;; *************** function _ValidateRxOffset *****************
 16324 ;; Defined at:
 16325 ;;		line 1076 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 16326 ;; Parameters:    Size  Location     Type
 16327 ;;  rxOffset        1    wreg     unsigned char 
 16328 ;; Auto vars:     Size  Location     Type
 16329 ;;  rxOffset        1    0[BANK0 ] unsigned char 
 16330 ;;  result          1    1[BANK0 ] enum E7249
 16331 ;; Return value:  Size  Location     Type
 16332 ;;                  1    wreg      enum E7249
 16333 ;; Registers used:
 16334 ;;		wreg, status,2, status,0
 16335 ;; Tracked objects:
 16336 ;;		On entry : 0/0
 16337 ;;		On exit  : 0/0
 16338 ;;		Unchanged: 0/0
 16339 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16340 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16341 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16342 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16343 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16344 ;;Total ram usage:        2 bytes
 16345 ;; Hardware stack levels used:    1
 16346 ;; Hardware stack levels required when called:    7
 16347 ;; This function calls:
 16348 ;;		Nothing
 16349 ;; This function is called by:
 16350 ;;		_ExecuteRxParamSetupReq
 16351 ;; This function uses a non-reentrant model
 16352 ;;
 16353                           
 16354                           	psect	text75
 16355  00931A                     __ptext75:
 16356                           	opt stack 0
 16357  00931A                     _ValidateRxOffset:
 16358                           	opt stack 17
 16359                           
 16360                           ; BSR set to: 2
 16361                           ;incstack = 0
 16362                           ;ValidateRxOffset@rxOffset stored from wreg
 16363  00931A  0100               	movlb	0	; () banked
 16364  00931C  6F60               	movwf	ValidateRxOffset@rxOffset& (0+255),b
 16365                           
 16366                           ;lorawan_eu.c: 1078: LorawanError_t result = OK;
 16367  00931E  0E00               	movlw	0
 16368  009320  0100               	movlb	0	; () banked
 16369  009322  6F61               	movwf	ValidateRxOffset@result& (0+255),b
 16370                           
 16371                           ; BSR set to: 0
 16372                           ;lorawan_eu.c: 1080: if (rxOffset > 5)
 16373  009324  0E05               	movlw	5
 16374  009326  6560               	cpfsgt	ValidateRxOffset@rxOffset& (0+255),b
 16375  009328  D002               	goto	l2069
 16376                           
 16377                           ; BSR set to: 0
 16378                           ;lorawan_eu.c: 1081: {
 16379                           ;lorawan_eu.c: 1082: result = INVALID_PARAMETER;
 16380  00932A  0E03               	movlw	3
 16381  00932C  6F61               	movwf	ValidateRxOffset@result& (0+255),b
 16382  00932E                     l2069:
 16383                           
 16384                           ; BSR set to: 0
 16385                           ;lorawan_eu.c: 1083: }
 16386                           ;lorawan_eu.c: 1085: return result;
 16387  00932E  5161               	movf	ValidateRxOffset@result& (0+255),w,b
 16388  009330  0012               	return	
 16389  009332                     __end_of_ValidateRxOffset:
 16390                           	opt stack 0
 16391                           tosu	equ	0xFFF
 16392                           tosh	equ	0xFFE
 16393                           tosl	equ	0xFFD
 16394                           pclath	equ	0xFFA
 16395                           tblptru	equ	0xFF8
 16396                           tblptrh	equ	0xFF7
 16397                           tblptrl	equ	0xFF6
 16398                           tablat	equ	0xFF5
 16399                           prodh	equ	0xFF4
 16400                           prodl	equ	0xFF3
 16401                           intcon	equ	0xFF2
 16402                           intcon2	equ	0xFF1
 16403                           intcon3	equ	0xFF0
 16404                           indf0	equ	0xFEF
 16405                           postinc0	equ	0xFEE
 16406                           fsr0h	equ	0xFEA
 16407                           fsr0l	equ	0xFE9
 16408                           wreg	equ	0xFE8
 16409                           postinc1	equ	0xFE6
 16410                           postdec1	equ	0xFE5
 16411                           plusw1	equ	0xFE3
 16412                           fsr1h	equ	0xFE2
 16413                           fsr1l	equ	0xFE1
 16414                           indf2	equ	0xFDF
 16415                           postinc2	equ	0xFDE
 16416                           postdec2	equ	0xFDD
 16417                           fsr2h	equ	0xFDA
 16418                           fsr2l	equ	0xFD9
 16419                           status	equ	0xFD8
 16420                           
 16421 ;; *************** function _UpdateReceiveWindow2Parameters *****************
 16422 ;; Defined at:
 16423 ;;		line 1084 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 16424 ;; Parameters:    Size  Location     Type
 16425 ;;  frequency       4    0[BANK0 ] unsigned long 
 16426 ;;  dataRate        1    4[BANK0 ] unsigned char 
 16427 ;; Auto vars:     Size  Location     Type
 16428 ;;		None
 16429 ;; Return value:  Size  Location     Type
 16430 ;;                  1    wreg      void 
 16431 ;; Registers used:
 16432 ;;		None
 16433 ;; Tracked objects:
 16434 ;;		On entry : 0/0
 16435 ;;		On exit  : 0/0
 16436 ;;		Unchanged: 0/0
 16437 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16438 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16439 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16440 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16441 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16442 ;;Total ram usage:        5 bytes
 16443 ;; Hardware stack levels used:    1
 16444 ;; Hardware stack levels required when called:    7
 16445 ;; This function calls:
 16446 ;;		Nothing
 16447 ;; This function is called by:
 16448 ;;		_ExecuteRxParamSetupReq
 16449 ;;		_LORAWAN_SetReceiveWindow2Parameters
 16450 ;; This function uses a non-reentrant model
 16451 ;;
 16452                           
 16453                           	psect	text76
 16454  00934A                     __ptext76:
 16455                           	opt stack 0
 16456  00934A                     _UpdateReceiveWindow2Parameters:
 16457                           	opt stack 17
 16458                           
 16459                           ;lorawan.c: 1086: loRa.receiveWindow2Parameters.dataRate = dataRate;
 16460                           
 16461                           ; BSR set to: 0
 16462                           ;incstack = 0
 16463  00934A  C064  F226         	movff	UpdateReceiveWindow2Parameters@dataRate,_loRa+28
 16464                           
 16465                           ;lorawan.c: 1087: loRa.receiveWindow2Parameters.frequency = frequency;
 16466  00934E  C060  F222         	movff	UpdateReceiveWindow2Parameters@frequency,_loRa+24
 16467  009352  C061  F223         	movff	UpdateReceiveWindow2Parameters@frequency+1,_loRa+25
 16468  009356  C062  F224         	movff	UpdateReceiveWindow2Parameters@frequency+2,_loRa+26
 16469  00935A  C063  F225         	movff	UpdateReceiveWindow2Parameters@frequency+3,_loRa+27
 16470  00935E  0012               	return		;funcret
 16471  009360                     __end_of_UpdateReceiveWindow2Parameters:
 16472                           	opt stack 0
 16473                           tosu	equ	0xFFF
 16474                           tosh	equ	0xFFE
 16475                           tosl	equ	0xFFD
 16476                           pclath	equ	0xFFA
 16477                           tblptru	equ	0xFF8
 16478                           tblptrh	equ	0xFF7
 16479                           tblptrl	equ	0xFF6
 16480                           tablat	equ	0xFF5
 16481                           prodh	equ	0xFF4
 16482                           prodl	equ	0xFF3
 16483                           intcon	equ	0xFF2
 16484                           intcon2	equ	0xFF1
 16485                           intcon3	equ	0xFF0
 16486                           indf0	equ	0xFEF
 16487                           postinc0	equ	0xFEE
 16488                           fsr0h	equ	0xFEA
 16489                           fsr0l	equ	0xFE9
 16490                           wreg	equ	0xFE8
 16491                           postinc1	equ	0xFE6
 16492                           postdec1	equ	0xFE5
 16493                           plusw1	equ	0xFE3
 16494                           fsr1h	equ	0xFE2
 16495                           fsr1l	equ	0xFE1
 16496                           indf2	equ	0xFDF
 16497                           postinc2	equ	0xFDE
 16498                           postdec2	equ	0xFDD
 16499                           fsr2h	equ	0xFDA
 16500                           fsr2l	equ	0xFD9
 16501                           status	equ	0xFD8
 16502                           
 16503 ;; *************** function _ExecuteNewChannel *****************
 16504 ;; Defined at:
 16505 ;;		line 677 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 16506 ;; Parameters:    Size  Location     Type
 16507 ;;  ptr             2   70[BANK0 ] PTR unsigned char 
 16508 ;;		 -> radioBuffer(271), LORAWAN_RxDone@hdr(2), 
 16509 ;; Auto vars:     Size  Location     Type
 16510 ;;  frequency       4   75[BANK0 ] unsigned long 
 16511 ;;  channelIndex    1   79[BANK0 ] unsigned char 
 16512 ;;  drRange         1   74[BANK0 ] struct .
 16513 ;; Return value:  Size  Location     Type
 16514 ;;                  2   70[BANK0 ] PTR unsigned char 
 16515 ;; Registers used:
 16516 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 16517 ;; Tracked objects:
 16518 ;;		On entry : 0/0
 16519 ;;		On exit  : 0/0
 16520 ;;		Unchanged: 0/0
 16521 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16522 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16523 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16524 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16525 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16526 ;;Total ram usage:       10 bytes
 16527 ;; Hardware stack levels used:    1
 16528 ;; Hardware stack levels required when called:    9
 16529 ;; This function calls:
 16530 ;;		_LORAWAN_SetChannelIdStatus
 16531 ;;		_UpdateChannelIdStatus
 16532 ;;		_UpdateDataRange
 16533 ;;		_UpdateDutyCycle
 16534 ;;		_UpdateFrequency
 16535 ;;		_ValidateChannelId
 16536 ;;		_ValidateDataRange
 16537 ;;		_ValidateFrequency
 16538 ;;		___lmul
 16539 ;; This function is called by:
 16540 ;;		_MacExecuteCommands
 16541 ;; This function uses a non-reentrant model
 16542 ;;
 16543                           
 16544                           	psect	text77
 16545  003B18                     __ptext77:
 16546                           	opt stack 0
 16547  003B18                     _ExecuteNewChannel:
 16548                           	opt stack 16
 16549                           
 16550                           ;lorawan_eu.c: 679: uint8_t channelIndex;
 16551                           ;lorawan_eu.c: 680: DataRange_t drRange;
 16552                           ;lorawan_eu.c: 681: uint32_t frequency = 0;
 16553                           
 16554                           ;incstack = 0
 16555  003B18  0E00               	movlw	0
 16556  003B1A  0100               	movlb	0	; () banked
 16557  003B1C  6FAB               	movwf	ExecuteNewChannel@frequency& (0+255),b
 16558  003B1E  0E00               	movlw	0
 16559  003B20  6FAC               	movwf	(ExecuteNewChannel@frequency+1)& (0+255),b
 16560  003B22  0E00               	movlw	0
 16561  003B24  6FAD               	movwf	(ExecuteNewChannel@frequency+2)& (0+255),b
 16562  003B26  0E00               	movlw	0
 16563  003B28  6FAE               	movwf	(ExecuteNewChannel@frequency+3)& (0+255),b
 16564                           
 16565                           ; BSR set to: 0
 16566                           ;lorawan_eu.c: 683: channelIndex = *(ptr++);
 16567  003B2A  C0A6  FFD9         	movff	ExecuteNewChannel@ptr,fsr2l
 16568  003B2E  C0A7  FFDA         	movff	ExecuteNewChannel@ptr+1,fsr2h
 16569  003B32  50DF               	movf	indf2,w,c
 16570  003B34  6FAF               	movwf	ExecuteNewChannel@channelIndex& (0+255),b
 16571                           
 16572                           ; BSR set to: 0
 16573  003B36  4BA6               	infsnz	ExecuteNewChannel@ptr& (0+255),f,b
 16574  003B38  2BA7               	incf	(ExecuteNewChannel@ptr+1)& (0+255),f,b
 16575                           
 16576                           ; BSR set to: 0
 16577                           ;lorawan_eu.c: 685: frequency = (*((uint32_t*)ptr)) & 0x00FFFFFF;
 16578  003B3A  C0A6  FFD9         	movff	ExecuteNewChannel@ptr,fsr2l
 16579  003B3E  C0A7  FFDA         	movff	ExecuteNewChannel@ptr+1,fsr2h
 16580  003B42  0EFF               	movlw	255
 16581  003B44  14DE               	andwf	postinc2,w,c
 16582  003B46  6FAB               	movwf	ExecuteNewChannel@frequency& (0+255),b
 16583  003B48  0EFF               	movlw	255
 16584  003B4A  14DE               	andwf	postinc2,w,c
 16585  003B4C  6FAC               	movwf	(ExecuteNewChannel@frequency+1)& (0+255),b
 16586  003B4E  0EFF               	movlw	255
 16587  003B50  14DE               	andwf	postinc2,w,c
 16588  003B52  6FAD               	movwf	(ExecuteNewChannel@frequency+2)& (0+255),b
 16589  003B54  0E00               	movlw	0
 16590  003B56  14DE               	andwf	postinc2,w,c
 16591  003B58  6FAE               	movwf	(ExecuteNewChannel@frequency+3)& (0+255),b
 16592                           
 16593                           ; BSR set to: 0
 16594                           ;lorawan_eu.c: 686: frequency = frequency * 100;
 16595  003B5A  C0AB  F09A         	movff	ExecuteNewChannel@frequency,___lmul@multiplier
 16596  003B5E  C0AC  F09B         	movff	ExecuteNewChannel@frequency+1,___lmul@multiplier+1
 16597  003B62  C0AD  F09C         	movff	ExecuteNewChannel@frequency+2,___lmul@multiplier+2
 16598  003B66  C0AE  F09D         	movff	ExecuteNewChannel@frequency+3,___lmul@multiplier+3
 16599  003B6A  0E64               	movlw	100
 16600  003B6C  6F9E               	movwf	___lmul@multiplicand& (0+255),b
 16601  003B6E  0E00               	movlw	0
 16602  003B70  6F9F               	movwf	(___lmul@multiplicand+1)& (0+255),b
 16603  003B72  0E00               	movlw	0
 16604  003B74  6FA0               	movwf	(___lmul@multiplicand+2)& (0+255),b
 16605  003B76  0E00               	movlw	0
 16606  003B78  6FA1               	movwf	(___lmul@multiplicand+3)& (0+255),b
 16607  003B7A  EC4D  F042         	call	___lmul	;wreg free
 16608  003B7E  C09A  F0AB         	movff	?___lmul,ExecuteNewChannel@frequency
 16609  003B82  C09B  F0AC         	movff	?___lmul+1,ExecuteNewChannel@frequency+1
 16610  003B86  C09C  F0AD         	movff	?___lmul+2,ExecuteNewChannel@frequency+2
 16611  003B8A  C09D  F0AE         	movff	?___lmul+3,ExecuteNewChannel@frequency+3
 16612                           
 16613                           ;lorawan_eu.c: 687: ptr = ptr + 3;
 16614  003B8E  0E03               	movlw	3
 16615  003B90  0100               	movlb	0	; () banked
 16616  003B92  25A6               	addwf	ExecuteNewChannel@ptr& (0+255),w,b
 16617  003B94  6FA6               	movwf	ExecuteNewChannel@ptr& (0+255),b
 16618  003B96  0E00               	movlw	0
 16619  003B98  21A7               	addwfc	(ExecuteNewChannel@ptr+1)& (0+255),w,b
 16620  003B9A  6FA7               	movwf	(ExecuteNewChannel@ptr+1)& (0+255),b
 16621                           
 16622                           ; BSR set to: 0
 16623                           ;lorawan_eu.c: 689: drRange.value = *(ptr++);
 16624  003B9C  C0A6  FFD9         	movff	ExecuteNewChannel@ptr,fsr2l
 16625  003BA0  C0A7  FFDA         	movff	ExecuteNewChannel@ptr+1,fsr2h
 16626  003BA4  50DF               	movf	indf2,w,c
 16627  003BA6  6FAA               	movwf	ExecuteNewChannel@drRange& (0+255),b
 16628                           
 16629                           ; BSR set to: 0
 16630  003BA8  4BA6               	infsnz	ExecuteNewChannel@ptr& (0+255),f,b
 16631  003BAA  2BA7               	incf	(ExecuteNewChannel@ptr+1)& (0+255),f,b
 16632                           
 16633                           ; BSR set to: 0
 16634                           ;lorawan_eu.c: 691: if (ValidateChannelId (channelIndex, 0) == OK)
 16635  003BAC  0E00               	movlw	0
 16636  003BAE  6F60               	movwf	ValidateChannelId@allowedForDefaultChannels& (0+255),b
 16637  003BB0  51AF               	movf	ExecuteNewChannel@channelIndex& (0+255),w,b
 16638  003BB2  EC48  F048         	call	_ValidateChannelId
 16639  003BB6  0900               	iorlw	0
 16640  003BB8  A4D8               	btfss	status,2,c
 16641  003BBA  D04B               	goto	l1960
 16642                           
 16643                           ;lorawan_eu.c: 692: {
 16644                           ;lorawan_eu.c: 693: if ( (ValidateFrequency (frequency) == OK) || (frequency == 0) )
 16645  003BBC  C0AB  F060         	movff	ExecuteNewChannel@frequency,ValidateFrequency@frequencyNew
 16646  003BC0  C0AC  F061         	movff	ExecuteNewChannel@frequency+1,ValidateFrequency@frequencyNew+1
 16647  003BC4  C0AD  F062         	movff	ExecuteNewChannel@frequency+2,ValidateFrequency@frequencyNew+2
 16648  003BC8  C0AE  F063         	movff	ExecuteNewChannel@frequency+3,ValidateFrequency@frequencyNew+3
 16649  003BCC  EC0F  F040         	call	_ValidateFrequency	;wreg free
 16650  003BD0  0900               	iorlw	0
 16651  003BD2  B4D8               	btfsc	status,2,c
 16652  003BD4  D007               	goto	u10480
 16653  003BD6  0100               	movlb	0	; () banked
 16654  003BD8  51AB               	movf	ExecuteNewChannel@frequency& (0+255),w,b
 16655  003BDA  11AC               	iorwf	(ExecuteNewChannel@frequency+1)& (0+255),w,b
 16656  003BDC  11AD               	iorwf	(ExecuteNewChannel@frequency+2)& (0+255),w,b
 16657  003BDE  11AE               	iorwf	(ExecuteNewChannel@frequency+3)& (0+255),w,b
 16658  003BE0  A4D8               	btfss	status,2,c
 16659  003BE2  D018               	goto	l1957
 16660  003BE4                     u10480:
 16661                           
 16662                           ;lorawan_eu.c: 694: {
 16663                           ;lorawan_eu.c: 695: loRa.macCommands[loRa.crtMacCmdIndex].channelFrequencyAck = 1;
 16664                           
 16665                           ; BSR set to: 0
 16666  003BE4  0102               	movlb	2	; () banked
 16667  003BE6  51B1               	movf	(_loRa+167)& (0+255),w,b
 16668  003BE8  0D02               	mullw	2
 16669  003BEA  0E0A               	movlw	low _loRa
 16670  003BEC  0100               	movlb	0	; () banked
 16671  003BEE  6FA8               	movwf	??_ExecuteNewChannel& (0+255),b
 16672  003BF0  0E02               	movlw	high _loRa
 16673  003BF2  6FA9               	movwf	(??_ExecuteNewChannel+1)& (0+255),b
 16674  003BF4  0EA8               	movlw	168
 16675  003BF6  27A8               	addwf	??_ExecuteNewChannel& (0+255),f,b
 16676  003BF8  0E00               	movlw	0
 16677  003BFA  23A9               	addwfc	(??_ExecuteNewChannel+1)& (0+255),f,b
 16678  003BFC  50F3               	movf	prodl,w,c
 16679  003BFE  27A8               	addwf	??_ExecuteNewChannel& (0+255),f,b
 16680  003C00  50F4               	movf	prodh,w,c
 16681  003C02  23A9               	addwfc	(??_ExecuteNewChannel+1)& (0+255),f,b
 16682  003C04  0E01               	movlw	1
 16683  003C06  25A8               	addwf	??_ExecuteNewChannel& (0+255),w,b
 16684  003C08  6ED9               	movwf	fsr2l,c
 16685  003C0A  0E00               	movlw	0
 16686  003C0C  21A9               	addwfc	(??_ExecuteNewChannel+1)& (0+255),w,b
 16687  003C0E  6EDA               	movwf	fsr2h,c
 16688  003C10  0102               	movlb	2	; () banked
 16689  003C12  8EDF               	bsf	indf2,7,c
 16690  003C14                     l1957:
 16691                           
 16692                           ;lorawan_eu.c: 696: }
 16693                           ;lorawan_eu.c: 698: if (ValidateDataRange (drRange.value) == OK)
 16694                           
 16695                           ; BSR set to: 2
 16696  003C14  0100               	movlb	0	; () banked
 16697  003C16  51AA               	movf	ExecuteNewChannel@drRange& (0+255),w,b
 16698  003C18  EC33  F044         	call	_ValidateDataRange
 16699  003C1C  0900               	iorlw	0
 16700  003C1E  A4D8               	btfss	status,2,c
 16701  003C20  D018               	goto	l1960
 16702                           
 16703                           ;lorawan_eu.c: 699: {
 16704                           ;lorawan_eu.c: 700: loRa.macCommands[loRa.crtMacCmdIndex].dataRateRangeAck = 1;
 16705  003C22  0102               	movlb	2	; () banked
 16706  003C24  51B1               	movf	(_loRa+167)& (0+255),w,b
 16707  003C26  0D02               	mullw	2
 16708  003C28  0E0A               	movlw	low _loRa
 16709  003C2A  0100               	movlb	0	; () banked
 16710  003C2C  6FA8               	movwf	??_ExecuteNewChannel& (0+255),b
 16711  003C2E  0E02               	movlw	high _loRa
 16712  003C30  6FA9               	movwf	(??_ExecuteNewChannel+1)& (0+255),b
 16713  003C32  0EA8               	movlw	168
 16714  003C34  27A8               	addwf	??_ExecuteNewChannel& (0+255),f,b
 16715  003C36  0E00               	movlw	0
 16716  003C38  23A9               	addwfc	(??_ExecuteNewChannel+1)& (0+255),f,b
 16717  003C3A  50F3               	movf	prodl,w,c
 16718  003C3C  27A8               	addwf	??_ExecuteNewChannel& (0+255),f,b
 16719  003C3E  50F4               	movf	prodh,w,c
 16720  003C40  23A9               	addwfc	(??_ExecuteNewChannel+1)& (0+255),f,b
 16721  003C42  0E01               	movlw	1
 16722  003C44  25A8               	addwf	??_ExecuteNewChannel& (0+255),w,b
 16723  003C46  6ED9               	movwf	fsr2l,c
 16724  003C48  0E00               	movlw	0
 16725  003C4A  21A9               	addwfc	(??_ExecuteNewChannel+1)& (0+255),w,b
 16726  003C4C  6EDA               	movwf	fsr2h,c
 16727  003C4E  0102               	movlb	2	; () banked
 16728  003C50  8CDF               	bsf	indf2,6,c
 16729  003C52                     l1960:
 16730                           
 16731                           ;lorawan_eu.c: 701: }
 16732                           ;lorawan_eu.c: 702: }
 16733                           ;lorawan_eu.c: 704: if ( (loRa.macCommands[loRa.crtMacCmdIndex].channelFrequencyAck == 1
      +                          ) && (loRa.macCommands[loRa.crtMacCmdIndex].dataRateRangeAck == 1) )
 16734                           
 16735                           ; BSR set to: 2
 16736  003C52  0102               	movlb	2	; () banked
 16737  003C54  51B1               	movf	(_loRa+167)& (0+255),w,b
 16738  003C56  0D02               	mullw	2
 16739  003C58  0E0A               	movlw	low _loRa
 16740  003C5A  0100               	movlb	0	; () banked
 16741  003C5C  6FA8               	movwf	??_ExecuteNewChannel& (0+255),b
 16742  003C5E  0E02               	movlw	high _loRa
 16743  003C60  6FA9               	movwf	(??_ExecuteNewChannel+1)& (0+255),b
 16744  003C62  0EA8               	movlw	168
 16745  003C64  27A8               	addwf	??_ExecuteNewChannel& (0+255),f,b
 16746  003C66  0E00               	movlw	0
 16747  003C68  23A9               	addwfc	(??_ExecuteNewChannel+1)& (0+255),f,b
 16748  003C6A  50F3               	movf	prodl,w,c
 16749  003C6C  27A8               	addwf	??_ExecuteNewChannel& (0+255),f,b
 16750  003C6E  50F4               	movf	prodh,w,c
 16751  003C70  23A9               	addwfc	(??_ExecuteNewChannel+1)& (0+255),f,b
 16752  003C72  0E01               	movlw	1
 16753  003C74  25A8               	addwf	??_ExecuteNewChannel& (0+255),w,b
 16754  003C76  6ED9               	movwf	fsr2l,c
 16755  003C78  0E00               	movlw	0
 16756  003C7A  21A9               	addwfc	(??_ExecuteNewChannel+1)& (0+255),w,b
 16757  003C7C  6EDA               	movwf	fsr2h,c
 16758  003C7E  0102               	movlb	2	; () banked
 16759  003C80  AEDF               	btfss	indf2,7,c
 16760  003C82  D07D               	goto	l1961
 16761                           
 16762                           ; BSR set to: 2
 16763  003C84  51B1               	movf	(_loRa+167)& (0+255),w,b
 16764  003C86  0D02               	mullw	2
 16765  003C88  0E0A               	movlw	low _loRa
 16766  003C8A  0100               	movlb	0	; () banked
 16767  003C8C  6FA8               	movwf	??_ExecuteNewChannel& (0+255),b
 16768  003C8E  0E02               	movlw	high _loRa
 16769  003C90  6FA9               	movwf	(??_ExecuteNewChannel+1)& (0+255),b
 16770  003C92  0EA8               	movlw	168
 16771  003C94  27A8               	addwf	??_ExecuteNewChannel& (0+255),f,b
 16772  003C96  0E00               	movlw	0
 16773  003C98  23A9               	addwfc	(??_ExecuteNewChannel+1)& (0+255),f,b
 16774  003C9A  50F3               	movf	prodl,w,c
 16775  003C9C  27A8               	addwf	??_ExecuteNewChannel& (0+255),f,b
 16776  003C9E  50F4               	movf	prodh,w,c
 16777  003CA0  23A9               	addwfc	(??_ExecuteNewChannel+1)& (0+255),f,b
 16778  003CA2  0E01               	movlw	1
 16779  003CA4  25A8               	addwf	??_ExecuteNewChannel& (0+255),w,b
 16780  003CA6  6ED9               	movwf	fsr2l,c
 16781  003CA8  0E00               	movlw	0
 16782  003CAA  21A9               	addwfc	(??_ExecuteNewChannel+1)& (0+255),w,b
 16783  003CAC  6EDA               	movwf	fsr2h,c
 16784  003CAE  0102               	movlb	2	; () banked
 16785  003CB0  ACDF               	btfss	indf2,6,c
 16786  003CB2  D065               	goto	l1961
 16787                           
 16788                           ; BSR set to: 2
 16789                           ;lorawan_eu.c: 705: {
 16790                           ;lorawan_eu.c: 706: if (loRa.lastUsedChannelIndex < 16)
 16791  003CB4  0E10               	movlw	16
 16792  003CB6  61E4               	cpfslt	(_loRa+218)& (0+255),b
 16793  003CB8  D02E               	goto	l1962
 16794                           
 16795                           ; BSR set to: 2
 16796                           ;lorawan_eu.c: 707: {
 16797                           ;lorawan_eu.c: 708: if (frequency != 0)
 16798  003CBA  0100               	movlb	0	; () banked
 16799  003CBC  51AB               	movf	ExecuteNewChannel@frequency& (0+255),w,b
 16800  003CBE  11AC               	iorwf	(ExecuteNewChannel@frequency+1)& (0+255),w,b
 16801  003CC0  11AD               	iorwf	(ExecuteNewChannel@frequency+2)& (0+255),w,b
 16802  003CC2  11AE               	iorwf	(ExecuteNewChannel@frequency+3)& (0+255),w,b
 16803  003CC4  B4D8               	btfsc	status,2,c
 16804  003CC6  D020               	goto	l1963
 16805                           
 16806                           ; BSR set to: 0
 16807                           ;lorawan_eu.c: 709: {
 16808                           ;lorawan_eu.c: 710: UpdateFrequency (channelIndex, frequency);
 16809  003CC8  C0AB  F060         	movff	ExecuteNewChannel@frequency,UpdateFrequency@frequencyNew
 16810  003CCC  C0AC  F061         	movff	ExecuteNewChannel@frequency+1,UpdateFrequency@frequencyNew+1
 16811  003CD0  C0AD  F062         	movff	ExecuteNewChannel@frequency+2,UpdateFrequency@frequencyNew+2
 16812  003CD4  C0AE  F063         	movff	ExecuteNewChannel@frequency+3,UpdateFrequency@frequencyNew+3
 16813  003CD8  51AF               	movf	ExecuteNewChannel@channelIndex& (0+255),w,b
 16814  003CDA  EC79  F044         	call	_UpdateFrequency
 16815                           
 16816                           ;lorawan_eu.c: 711: UpdateDataRange (channelIndex, drRange.value);
 16817  003CDE  C0AA  F060         	movff	ExecuteNewChannel@drRange,UpdateDataRange@dataRangeNew
 16818  003CE2  0100               	movlb	0	; () banked
 16819  003CE4  51AF               	movf	ExecuteNewChannel@channelIndex& (0+255),w,b
 16820  003CE6  EC9D  F02C         	call	_UpdateDataRange
 16821                           
 16822                           ;lorawan_eu.c: 712: UpdateDutyCycle (channelIndex, 302);
 16823  003CEA  0E01               	movlw	1
 16824  003CEC  0100               	movlb	0	; () banked
 16825  003CEE  6F61               	movwf	(UpdateDutyCycle@dutyCycleNew+1)& (0+255),b
 16826  003CF0  0E2E               	movlw	46
 16827  003CF2  6F60               	movwf	UpdateDutyCycle@dutyCycleNew& (0+255),b
 16828  003CF4  51AF               	movf	ExecuteNewChannel@channelIndex& (0+255),w,b
 16829  003CF6  EC9B  F044         	call	_UpdateDutyCycle
 16830                           
 16831                           ;lorawan_eu.c: 713: UpdateChannelIdStatus (channelIndex, 1);
 16832  003CFA  0E01               	movlw	1
 16833  003CFC  0100               	movlb	0	; () banked
 16834  003CFE  6F60               	movwf	UpdateChannelIdStatus@statusNew& (0+255),b
 16835  003D00  51AF               	movf	ExecuteNewChannel@channelIndex& (0+255),w,b
 16836  003D02  EC89  F02A         	call	_UpdateChannelIdStatus
 16837                           
 16838                           ;lorawan_eu.c: 714: }
 16839  003D06  D039               	goto	l1967
 16840  003D08                     l1963:
 16841                           
 16842                           ;lorawan_eu.c: 715: else
 16843                           ;lorawan_eu.c: 716: {
 16844                           ;lorawan_eu.c: 717: LORAWAN_SetChannelIdStatus (channelIndex, 0);
 16845  003D08  0E00               	movlw	0
 16846  003D0A  0100               	movlb	0	; () banked
 16847  003D0C  6F64               	movwf	LORAWAN_SetChannelIdStatus@statusNew& (0+255),b
 16848  003D0E  51AF               	movf	ExecuteNewChannel@channelIndex& (0+255),w,b
 16849  003D10  ECF3  F041         	call	_LORAWAN_SetChannelIdStatus
 16850                           
 16851                           ;lorawan_eu.c: 718: }
 16852                           ;lorawan_eu.c: 719: }
 16853  003D14  D032               	goto	l1967
 16854  003D16                     l1962:
 16855                           
 16856                           ;lorawan_eu.c: 720: else
 16857                           ;lorawan_eu.c: 721: {
 16858                           ;lorawan_eu.c: 722: if (frequency != 0)
 16859  003D16  0100               	movlb	0	; () banked
 16860  003D18  51AB               	movf	ExecuteNewChannel@frequency& (0+255),w,b
 16861  003D1A  11AC               	iorwf	(ExecuteNewChannel@frequency+1)& (0+255),w,b
 16862  003D1C  11AD               	iorwf	(ExecuteNewChannel@frequency+2)& (0+255),w,b
 16863  003D1E  11AE               	iorwf	(ExecuteNewChannel@frequency+3)& (0+255),w,b
 16864  003D20  B4D8               	btfsc	status,2,c
 16865  003D22  D024               	goto	l1966
 16866                           
 16867                           ; BSR set to: 0
 16868                           ;lorawan_eu.c: 723: {
 16869                           ;lorawan_eu.c: 724: UpdateFrequency (channelIndex + 16, frequency);
 16870  003D24  C0AB  F060         	movff	ExecuteNewChannel@frequency,UpdateFrequency@frequencyNew
 16871  003D28  C0AC  F061         	movff	ExecuteNewChannel@frequency+1,UpdateFrequency@frequencyNew+1
 16872  003D2C  C0AD  F062         	movff	ExecuteNewChannel@frequency+2,UpdateFrequency@frequencyNew+2
 16873  003D30  C0AE  F063         	movff	ExecuteNewChannel@frequency+3,UpdateFrequency@frequencyNew+3
 16874  003D34  51AF               	movf	ExecuteNewChannel@channelIndex& (0+255),w,b
 16875  003D36  0F10               	addlw	16
 16876  003D38  EC79  F044         	call	_UpdateFrequency
 16877                           
 16878                           ;lorawan_eu.c: 725: UpdateDataRange (channelIndex + 16, drRange.value);
 16879  003D3C  C0AA  F060         	movff	ExecuteNewChannel@drRange,UpdateDataRange@dataRangeNew
 16880  003D40  0100               	movlb	0	; () banked
 16881  003D42  51AF               	movf	ExecuteNewChannel@channelIndex& (0+255),w,b
 16882  003D44  0F10               	addlw	16
 16883  003D46  EC9D  F02C         	call	_UpdateDataRange
 16884                           
 16885                           ;lorawan_eu.c: 726: UpdateDutyCycle (channelIndex + 16, 302);
 16886  003D4A  0E01               	movlw	1
 16887  003D4C  0100               	movlb	0	; () banked
 16888  003D4E  6F61               	movwf	(UpdateDutyCycle@dutyCycleNew+1)& (0+255),b
 16889  003D50  0E2E               	movlw	46
 16890  003D52  6F60               	movwf	UpdateDutyCycle@dutyCycleNew& (0+255),b
 16891  003D54  51AF               	movf	ExecuteNewChannel@channelIndex& (0+255),w,b
 16892  003D56  0F10               	addlw	16
 16893  003D58  EC9B  F044         	call	_UpdateDutyCycle
 16894                           
 16895                           ;lorawan_eu.c: 727: UpdateChannelIdStatus (channelIndex + 16, 1);
 16896  003D5C  0E01               	movlw	1
 16897  003D5E  0100               	movlb	0	; () banked
 16898  003D60  6F60               	movwf	UpdateChannelIdStatus@statusNew& (0+255),b
 16899  003D62  51AF               	movf	ExecuteNewChannel@channelIndex& (0+255),w,b
 16900  003D64  0F10               	addlw	16
 16901  003D66  EC89  F02A         	call	_UpdateChannelIdStatus
 16902                           
 16903                           ;lorawan_eu.c: 728: }
 16904  003D6A  D007               	goto	l1967
 16905  003D6C                     l1966:
 16906                           
 16907                           ;lorawan_eu.c: 729: else
 16908                           ;lorawan_eu.c: 730: {
 16909                           ;lorawan_eu.c: 731: LORAWAN_SetChannelIdStatus (channelIndex + 16, 0);
 16910  003D6C  0E00               	movlw	0
 16911  003D6E  0100               	movlb	0	; () banked
 16912  003D70  6F64               	movwf	LORAWAN_SetChannelIdStatus@statusNew& (0+255),b
 16913  003D72  51AF               	movf	ExecuteNewChannel@channelIndex& (0+255),w,b
 16914  003D74  0F10               	addlw	16
 16915  003D76  ECF3  F041         	call	_LORAWAN_SetChannelIdStatus
 16916  003D7A                     l1967:
 16917                           
 16918                           ;lorawan_eu.c: 732: }
 16919                           ;lorawan_eu.c: 733: }
 16920                           ;lorawan_eu.c: 735: loRa.macStatus.channelsModified = 1;
 16921  003D7A  0102               	movlb	2	; () banked
 16922  003D7C  870D               	bsf	(_loRa+3)& (0+255),3,b
 16923  003D7E                     l1961:
 16924                           
 16925                           ; BSR set to: 2
 16926                           ;lorawan_eu.c: 736: }
 16927                           ;lorawan_eu.c: 737: return ptr;
 16928                           
 16929                           ; BSR set to: 2
 16930  003D7E  C0A6  F0A6         	movff	ExecuteNewChannel@ptr,?_ExecuteNewChannel
 16931  003D82  C0A7  F0A7         	movff	ExecuteNewChannel@ptr+1,?_ExecuteNewChannel+1
 16932  003D86  0012               	return	
 16933  003D88                     __end_of_ExecuteNewChannel:
 16934                           	opt stack 0
 16935                           tosu	equ	0xFFF
 16936                           tosh	equ	0xFFE
 16937                           tosl	equ	0xFFD
 16938                           pclath	equ	0xFFA
 16939                           tblptru	equ	0xFF8
 16940                           tblptrh	equ	0xFF7
 16941                           tblptrl	equ	0xFF6
 16942                           tablat	equ	0xFF5
 16943                           prodh	equ	0xFF4
 16944                           prodl	equ	0xFF3
 16945                           intcon	equ	0xFF2
 16946                           intcon2	equ	0xFF1
 16947                           intcon3	equ	0xFF0
 16948                           indf0	equ	0xFEF
 16949                           postinc0	equ	0xFEE
 16950                           fsr0h	equ	0xFEA
 16951                           fsr0l	equ	0xFE9
 16952                           wreg	equ	0xFE8
 16953                           postinc1	equ	0xFE6
 16954                           postdec1	equ	0xFE5
 16955                           plusw1	equ	0xFE3
 16956                           fsr1h	equ	0xFE2
 16957                           fsr1l	equ	0xFE1
 16958                           indf2	equ	0xFDF
 16959                           postinc2	equ	0xFDE
 16960                           postdec2	equ	0xFDD
 16961                           fsr2h	equ	0xFDA
 16962                           fsr2l	equ	0xFD9
 16963                           status	equ	0xFD8
 16964                           
 16965 ;; *************** function _ValidateFrequency *****************
 16966 ;; Defined at:
 16967 ;;		line 1088 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 16968 ;; Parameters:    Size  Location     Type
 16969 ;;  frequencyNew    4    0[BANK0 ] unsigned long 
 16970 ;; Auto vars:     Size  Location     Type
 16971 ;;  result          1    4[BANK0 ] enum E7249
 16972 ;; Return value:  Size  Location     Type
 16973 ;;                  1    wreg      enum E7249
 16974 ;; Registers used:
 16975 ;;		wreg, status,2, status,0
 16976 ;; Tracked objects:
 16977 ;;		On entry : 0/0
 16978 ;;		On exit  : 0/0
 16979 ;;		Unchanged: 0/0
 16980 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16981 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16982 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16983 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16984 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16985 ;;Total ram usage:        5 bytes
 16986 ;; Hardware stack levels used:    1
 16987 ;; Hardware stack levels required when called:    7
 16988 ;; This function calls:
 16989 ;;		Nothing
 16990 ;; This function is called by:
 16991 ;;		_ExecuteNewChannel
 16992 ;;		_ExecuteRxParamSetupReq
 16993 ;;		_UpdateCfList
 16994 ;;		_LORAWAN_SetReceiveWindow2Parameters
 16995 ;;		_LORAWAN_SetFrequency
 16996 ;; This function uses a non-reentrant model
 16997 ;;
 16998                           
 16999                           	psect	text78
 17000  00801E                     __ptext78:
 17001                           	opt stack 0
 17002  00801E                     _ValidateFrequency:
 17003                           	opt stack 18
 17004                           
 17005                           ;lorawan_eu.c: 1090: LorawanError_t result = OK;
 17006                           
 17007                           ; BSR set to: 2
 17008                           ;incstack = 0
 17009  00801E  0E00               	movlw	0
 17010  008020  0100               	movlb	0	; () banked
 17011  008022  6F64               	movwf	ValidateFrequency@result& (0+255),b
 17012                           
 17013                           ;lorawan_eu.c: 1092: if(ISM_EU868 == loRa.ismBand)
 17014  008024  0102               	movlb	2	; () banked
 17015  008026  51AE               	movf	(_loRa+164)& (0+255),w,b
 17016  008028  A4D8               	btfss	status,2,c
 17017  00802A  D013               	goto	l2073
 17018                           
 17019                           ; BSR set to: 2
 17020                           ;lorawan_eu.c: 1093: {
 17021                           ;lorawan_eu.c: 1094: if ( (frequencyNew > 870000000) || (frequencyNew < 863000000) )
 17022  00802C  0E81               	movlw	129
 17023  00802E  0100               	movlb	0	; () banked
 17024  008030  5D60               	subwf	ValidateFrequency@frequencyNew& (0+255),w,b
 17025  008032  0E25               	movlw	37
 17026  008034  5961               	subwfb	(ValidateFrequency@frequencyNew+1)& (0+255),w,b
 17027  008036  0EDB               	movlw	219
 17028  008038  5962               	subwfb	(ValidateFrequency@frequencyNew+2)& (0+255),w,b
 17029  00803A  0E33               	movlw	51
 17030  00803C  5963               	subwfb	(ValidateFrequency@frequencyNew+3)& (0+255),w,b
 17031  00803E  B0D8               	btfsc	status,0,c
 17032  008040  D01D               	goto	u9740
 17033                           
 17034                           ; BSR set to: 0
 17035  008042  0EC0               	movlw	192
 17036  008044  5D60               	subwf	ValidateFrequency@frequencyNew& (0+255),w,b
 17037  008046  0E55               	movlw	85
 17038  008048  5961               	subwfb	(ValidateFrequency@frequencyNew+1)& (0+255),w,b
 17039  00804A  0E70               	movlw	112
 17040  00804C  5962               	subwfb	(ValidateFrequency@frequencyNew+2)& (0+255),w,b
 17041  00804E  0E33               	movlw	51
 17042  008050  D012               	goto	L30
 17043  008052                     l2073:
 17044                           
 17045                           ;lorawan_eu.c: 1099: else
 17046                           ;lorawan_eu.c: 1100: {
 17047                           ;lorawan_eu.c: 1101: if ( (frequencyNew > 434790000) || (frequencyNew < 433050000) )
 17048                           
 17049                           ; BSR set to: 0
 17050  008052  0E71               	movlw	113
 17051  008054  0100               	movlb	0	; () banked
 17052  008056  5D60               	subwf	ValidateFrequency@frequencyNew& (0+255),w,b
 17053  008058  0E5E               	movlw	94
 17054  00805A  5961               	subwfb	(ValidateFrequency@frequencyNew+1)& (0+255),w,b
 17055  00805C  0EEA               	movlw	234
 17056  00805E  5962               	subwfb	(ValidateFrequency@frequencyNew+2)& (0+255),w,b
 17057  008060  0E19               	movlw	25
 17058  008062  5963               	subwfb	(ValidateFrequency@frequencyNew+3)& (0+255),w,b
 17059  008064  B0D8               	btfsc	status,0,c
 17060  008066  D00A               	goto	u9740
 17061                           
 17062                           ; BSR set to: 0
 17063  008068  0E90               	movlw	144
 17064  00806A  5D60               	subwf	ValidateFrequency@frequencyNew& (0+255),w,b
 17065  00806C  0ED1               	movlw	209
 17066  00806E  5961               	subwfb	(ValidateFrequency@frequencyNew+1)& (0+255),w,b
 17067  008070  0ECF               	movlw	207
 17068  008072  5962               	subwfb	(ValidateFrequency@frequencyNew+2)& (0+255),w,b
 17069  008074  0E19               	movlw	25
 17070  008076                     L30:
 17071  008076  5963               	subwfb	(ValidateFrequency@frequencyNew+3)& (0+255),w,b
 17072  008078  B0D8               	btfsc	status,0,c
 17073  00807A  D002               	goto	l2078
 17074  00807C                     u9740:
 17075                           
 17076                           ; BSR set to: 0
 17077                           ;lorawan_eu.c: 1102: {
 17078                           ;lorawan_eu.c: 1103: result = INVALID_PARAMETER ;
 17079                           
 17080                           ; BSR set to: 0
 17081  00807C  0E03               	movlw	3
 17082  00807E  6F64               	movwf	ValidateFrequency@result& (0+255),b
 17083  008080                     l2078:
 17084                           
 17085                           ; BSR set to: 0
 17086                           ;lorawan_eu.c: 1104: }
 17087                           ;lorawan_eu.c: 1105: }
 17088                           ;lorawan_eu.c: 1107: return result;
 17089                           
 17090                           ; BSR set to: 0
 17091  008080  5164               	movf	ValidateFrequency@result& (0+255),w,b
 17092  008082  0012               	return	
 17093  008084                     __end_of_ValidateFrequency:
 17094                           	opt stack 0
 17095                           tosu	equ	0xFFF
 17096                           tosh	equ	0xFFE
 17097                           tosl	equ	0xFFD
 17098                           pclath	equ	0xFFA
 17099                           tblptru	equ	0xFF8
 17100                           tblptrh	equ	0xFF7
 17101                           tblptrl	equ	0xFF6
 17102                           tablat	equ	0xFF5
 17103                           prodh	equ	0xFF4
 17104                           prodl	equ	0xFF3
 17105                           intcon	equ	0xFF2
 17106                           intcon2	equ	0xFF1
 17107                           intcon3	equ	0xFF0
 17108                           indf0	equ	0xFEF
 17109                           postinc0	equ	0xFEE
 17110                           fsr0h	equ	0xFEA
 17111                           fsr0l	equ	0xFE9
 17112                           wreg	equ	0xFE8
 17113                           postinc1	equ	0xFE6
 17114                           postdec1	equ	0xFE5
 17115                           plusw1	equ	0xFE3
 17116                           fsr1h	equ	0xFE2
 17117                           fsr1l	equ	0xFE1
 17118                           indf2	equ	0xFDF
 17119                           postinc2	equ	0xFDE
 17120                           postdec2	equ	0xFDD
 17121                           fsr2h	equ	0xFDA
 17122                           fsr2l	equ	0xFD9
 17123                           status	equ	0xFD8
 17124                           
 17125 ;; *************** function _ValidateDataRange *****************
 17126 ;; Defined at:
 17127 ;;		line 1110 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 17128 ;; Parameters:    Size  Location     Type
 17129 ;;  dataRangeNew    1    wreg     unsigned char 
 17130 ;; Auto vars:     Size  Location     Type
 17131 ;;  dataRangeNew    1    3[BANK0 ] unsigned char 
 17132 ;;  dataRateMin     1    5[BANK0 ] unsigned char 
 17133 ;;  dataRateMax     1    4[BANK0 ] unsigned char 
 17134 ;;  result          1    2[BANK0 ] enum E7249
 17135 ;; Return value:  Size  Location     Type
 17136 ;;                  1    wreg      enum E7249
 17137 ;; Registers used:
 17138 ;;		wreg, status,2, status,0, cstack
 17139 ;; Tracked objects:
 17140 ;;		On entry : 0/0
 17141 ;;		On exit  : 0/0
 17142 ;;		Unchanged: 0/0
 17143 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17144 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17145 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17146 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17147 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17148 ;;Total ram usage:        4 bytes
 17149 ;; Hardware stack levels used:    1
 17150 ;; Hardware stack levels required when called:    8
 17151 ;; This function calls:
 17152 ;;		_ValidateDataRate
 17153 ;; This function is called by:
 17154 ;;		_ExecuteNewChannel
 17155 ;;		_LORAWAN_SetDataRange
 17156 ;; This function uses a non-reentrant model
 17157 ;;
 17158                           
 17159                           	psect	text79
 17160  008866                     __ptext79:
 17161                           	opt stack 0
 17162  008866                     _ValidateDataRange:
 17163                           	opt stack 16
 17164                           
 17165                           ; BSR set to: 0
 17166                           ;incstack = 0
 17167                           ;ValidateDataRange@dataRangeNew stored from wreg
 17168  008866  0100               	movlb	0	; () banked
 17169  008868  6F63               	movwf	ValidateDataRange@dataRangeNew& (0+255),b
 17170                           
 17171                           ;lorawan_eu.c: 1112: LorawanError_t result = OK;
 17172  00886A  0E00               	movlw	0
 17173  00886C  0100               	movlb	0	; () banked
 17174  00886E  6F62               	movwf	ValidateDataRange@result& (0+255),b
 17175                           
 17176                           ; BSR set to: 0
 17177                           ;lorawan_eu.c: 1113: uint8_t dataRateMax, dataRateMin;
 17178                           ;lorawan_eu.c: 1115: dataRateMin = dataRangeNew & 0x0F;
 17179  008870  5163               	movf	ValidateDataRange@dataRangeNew& (0+255),w,b
 17180  008872  0B0F               	andlw	15
 17181  008874  6F65               	movwf	ValidateDataRange@dataRateMin& (0+255),b
 17182                           
 17183                           ; BSR set to: 0
 17184                           ;lorawan_eu.c: 1116: dataRateMax = (dataRangeNew & 0xF0) >> (4);
 17185  008876  3963               	swapf	ValidateDataRange@dataRangeNew& (0+255),w,b
 17186  008878  0B0F               	andlw	15
 17187  00887A  0B0F               	andlw	15
 17188  00887C  6F64               	movwf	ValidateDataRange@dataRateMax& (0+255),b
 17189                           
 17190                           ; BSR set to: 0
 17191                           ;lorawan_eu.c: 1118: if ( (ValidateDataRate (dataRateMax) != OK) || (ValidateDataRate (d
      +                          ataRateMin) != OK ) || (dataRateMax < dataRateMin) )
 17192  00887E  5164               	movf	ValidateDataRange@dataRateMax& (0+255),w,b
 17193  008880  EC99  F049         	call	_ValidateDataRate
 17194  008884  0900               	iorlw	0
 17195  008886  A4D8               	btfss	status,2,c
 17196  008888  D00C               	goto	u9770
 17197  00888A  0100               	movlb	0	; () banked
 17198  00888C  5165               	movf	ValidateDataRange@dataRateMin& (0+255),w,b
 17199  00888E  EC99  F049         	call	_ValidateDataRate
 17200  008892  0900               	iorlw	0
 17201  008894  A4D8               	btfss	status,2,c
 17202  008896  D005               	goto	u9770
 17203  008898  0100               	movlb	0	; () banked
 17204  00889A  5165               	movf	ValidateDataRange@dataRateMin& (0+255),w,b
 17205  00889C  5D64               	subwf	ValidateDataRange@dataRateMax& (0+255),w,b
 17206  00889E  B0D8               	btfsc	status,0,c
 17207  0088A0  D003               	goto	l2084
 17208  0088A2                     u9770:
 17209                           
 17210                           ;lorawan_eu.c: 1119: {
 17211                           ;lorawan_eu.c: 1120: result = INVALID_PARAMETER;
 17212                           
 17213                           ; BSR set to: 0
 17214  0088A2  0E03               	movlw	3
 17215  0088A4  0100               	movlb	0	; () banked
 17216  0088A6  6F62               	movwf	ValidateDataRange@result& (0+255),b
 17217  0088A8                     l2084:
 17218                           
 17219                           ; BSR set to: 0
 17220                           ;lorawan_eu.c: 1121: }
 17221                           ;lorawan_eu.c: 1122: return result;
 17222  0088A8  5162               	movf	ValidateDataRange@result& (0+255),w,b
 17223  0088AA  0012               	return	
 17224  0088AC                     __end_of_ValidateDataRange:
 17225                           	opt stack 0
 17226                           tosu	equ	0xFFF
 17227                           tosh	equ	0xFFE
 17228                           tosl	equ	0xFFD
 17229                           pclath	equ	0xFFA
 17230                           tblptru	equ	0xFF8
 17231                           tblptrh	equ	0xFF7
 17232                           tblptrl	equ	0xFF6
 17233                           tablat	equ	0xFF5
 17234                           prodh	equ	0xFF4
 17235                           prodl	equ	0xFF3
 17236                           intcon	equ	0xFF2
 17237                           intcon2	equ	0xFF1
 17238                           intcon3	equ	0xFF0
 17239                           indf0	equ	0xFEF
 17240                           postinc0	equ	0xFEE
 17241                           fsr0h	equ	0xFEA
 17242                           fsr0l	equ	0xFE9
 17243                           wreg	equ	0xFE8
 17244                           postinc1	equ	0xFE6
 17245                           postdec1	equ	0xFE5
 17246                           plusw1	equ	0xFE3
 17247                           fsr1h	equ	0xFE2
 17248                           fsr1l	equ	0xFE1
 17249                           indf2	equ	0xFDF
 17250                           postinc2	equ	0xFDE
 17251                           postdec2	equ	0xFDD
 17252                           fsr2h	equ	0xFDA
 17253                           fsr2l	equ	0xFD9
 17254                           status	equ	0xFD8
 17255                           
 17256 ;; *************** function _UpdateFrequency *****************
 17257 ;; Defined at:
 17258 ;;		line 1154 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 17259 ;; Parameters:    Size  Location     Type
 17260 ;;  channelId       1    wreg     unsigned char 
 17261 ;;  frequencyNew    4    0[BANK0 ] unsigned long 
 17262 ;; Auto vars:     Size  Location     Type
 17263 ;;  channelId       1    4[BANK0 ] unsigned char 
 17264 ;; Return value:  Size  Location     Type
 17265 ;;                  1    wreg      void 
 17266 ;; Registers used:
 17267 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 17268 ;; Tracked objects:
 17269 ;;		On entry : 0/0
 17270 ;;		On exit  : 0/0
 17271 ;;		Unchanged: 0/0
 17272 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17273 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17274 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17275 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17276 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17277 ;;Total ram usage:        5 bytes
 17278 ;; Hardware stack levels used:    1
 17279 ;; Hardware stack levels required when called:    7
 17280 ;; This function calls:
 17281 ;;		Nothing
 17282 ;; This function is called by:
 17283 ;;		_ExecuteNewChannel
 17284 ;;		_LORAWAN_SetFrequency
 17285 ;; This function uses a non-reentrant model
 17286 ;;
 17287                           
 17288                           	psect	text80
 17289  0088F2                     __ptext80:
 17290                           	opt stack 0
 17291  0088F2                     _UpdateFrequency:
 17292                           	opt stack 17
 17293                           
 17294                           ; BSR set to: 0
 17295                           ;incstack = 0
 17296                           ;UpdateFrequency@channelId stored from wreg
 17297  0088F2  0100               	movlb	0	; () banked
 17298  0088F4  6F64               	movwf	UpdateFrequency@channelId& (0+255),b
 17299                           
 17300                           ;lorawan_eu.c: 1156: Channels[channelId].frequency = frequencyNew;
 17301  0088F6  0100               	movlb	0	; () banked
 17302  0088F8  5164               	movf	UpdateFrequency@channelId& (0+255),w,b
 17303  0088FA  0D0E               	mullw	14
 17304  0088FC  0E00               	movlw	low _Channels
 17305  0088FE  24F3               	addwf	prodl,w,c
 17306  008900  6ED9               	movwf	fsr2l,c
 17307  008902  0E04               	movlw	high _Channels
 17308  008904  20F4               	addwfc	prodh,w,c
 17309  008906  6EDA               	movwf	fsr2h,c
 17310  008908  C060  FFDE         	movff	UpdateFrequency@frequencyNew,postinc2
 17311  00890C  C061  FFDE         	movff	UpdateFrequency@frequencyNew+1,postinc2
 17312  008910  C062  FFDE         	movff	UpdateFrequency@frequencyNew+2,postinc2
 17313  008914  C063  FFDE         	movff	UpdateFrequency@frequencyNew+3,postinc2
 17314                           
 17315                           ;lorawan_eu.c: 1157: Channels[channelId].parametersDefined |= 0X01;
 17316  008918  5164               	movf	UpdateFrequency@channelId& (0+255),w,b
 17317  00891A  0D0E               	mullw	14
 17318  00891C  0E0D               	movlw	13
 17319  00891E  26F3               	addwf	prodl,f,c
 17320  008920  0E00               	movlw	0
 17321  008922  22F4               	addwfc	prodh,f,c
 17322  008924  0E00               	movlw	low _Channels
 17323  008926  24F3               	addwf	prodl,w,c
 17324  008928  6ED9               	movwf	fsr2l,c
 17325  00892A  0E04               	movlw	high _Channels
 17326  00892C  20F4               	addwfc	prodh,w,c
 17327  00892E  6EDA               	movwf	fsr2h,c
 17328  008930  0E00               	movlw	0
 17329  008932  80DB               	bsf	plusw2,0,c
 17330                           
 17331                           ; BSR set to: 0
 17332  008934  0012               	return		;funcret
 17333  008936                     __end_of_UpdateFrequency:
 17334                           	opt stack 0
 17335                           tosu	equ	0xFFF
 17336                           tosh	equ	0xFFE
 17337                           tosl	equ	0xFFD
 17338                           pclath	equ	0xFFA
 17339                           tblptru	equ	0xFF8
 17340                           tblptrh	equ	0xFF7
 17341                           tblptrl	equ	0xFF6
 17342                           tablat	equ	0xFF5
 17343                           prodh	equ	0xFF4
 17344                           prodl	equ	0xFF3
 17345                           intcon	equ	0xFF2
 17346                           intcon2	equ	0xFF1
 17347                           intcon3	equ	0xFF0
 17348                           indf0	equ	0xFEF
 17349                           postinc0	equ	0xFEE
 17350                           fsr0h	equ	0xFEA
 17351                           fsr0l	equ	0xFE9
 17352                           wreg	equ	0xFE8
 17353                           postinc1	equ	0xFE6
 17354                           postdec1	equ	0xFE5
 17355                           plusw1	equ	0xFE3
 17356                           fsr1h	equ	0xFE2
 17357                           fsr1l	equ	0xFE1
 17358                           indf2	equ	0xFDF
 17359                           postinc2	equ	0xFDE
 17360                           postdec2	equ	0xFDD
 17361                           plusw2	equ	0xFDB
 17362                           fsr2h	equ	0xFDA
 17363                           fsr2l	equ	0xFD9
 17364                           status	equ	0xFD8
 17365                           
 17366 ;; *************** function _UpdateDutyCycle *****************
 17367 ;; Defined at:
 17368 ;;		line 1160 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 17369 ;; Parameters:    Size  Location     Type
 17370 ;;  channelId       1    wreg     unsigned char 
 17371 ;;  dutyCycleNew    2    0[BANK0 ] unsigned int 
 17372 ;; Auto vars:     Size  Location     Type
 17373 ;;  channelId       1    2[BANK0 ] unsigned char 
 17374 ;; Return value:  Size  Location     Type
 17375 ;;                  1    wreg      void 
 17376 ;; Registers used:
 17377 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 17378 ;; Tracked objects:
 17379 ;;		On entry : 0/0
 17380 ;;		On exit  : 0/0
 17381 ;;		Unchanged: 0/0
 17382 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17383 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17384 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17385 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17386 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17387 ;;Total ram usage:        3 bytes
 17388 ;; Hardware stack levels used:    1
 17389 ;; Hardware stack levels required when called:    7
 17390 ;; This function calls:
 17391 ;;		Nothing
 17392 ;; This function is called by:
 17393 ;;		_ExecuteNewChannel
 17394 ;;		_LORAWAN_SetDutyCycle
 17395 ;; This function uses a non-reentrant model
 17396 ;;
 17397                           
 17398                           	psect	text81
 17399  008936                     __ptext81:
 17400                           	opt stack 0
 17401  008936                     _UpdateDutyCycle:
 17402                           	opt stack 17
 17403                           
 17404                           ; BSR set to: 0
 17405                           ;incstack = 0
 17406                           ;UpdateDutyCycle@channelId stored from wreg
 17407  008936  0100               	movlb	0	; () banked
 17408  008938  6F62               	movwf	UpdateDutyCycle@channelId& (0+255),b
 17409                           
 17410                           ;lorawan_eu.c: 1162: Channels[channelId].dutyCycle = dutyCycleNew;
 17411  00893A  0100               	movlb	0	; () banked
 17412  00893C  5162               	movf	UpdateDutyCycle@channelId& (0+255),w,b
 17413  00893E  0D0E               	mullw	14
 17414  008940  0E06               	movlw	6
 17415  008942  26F3               	addwf	prodl,f,c
 17416  008944  0E00               	movlw	0
 17417  008946  22F4               	addwfc	prodh,f,c
 17418  008948  0E00               	movlw	low _Channels
 17419  00894A  24F3               	addwf	prodl,w,c
 17420  00894C  6ED9               	movwf	fsr2l,c
 17421  00894E  0E04               	movlw	high _Channels
 17422  008950  20F4               	addwfc	prodh,w,c
 17423  008952  6EDA               	movwf	fsr2h,c
 17424  008954  C060  FFDE         	movff	UpdateDutyCycle@dutyCycleNew,postinc2
 17425  008958  C061  FFDD         	movff	UpdateDutyCycle@dutyCycleNew+1,postdec2
 17426                           
 17427                           ;lorawan_eu.c: 1163: Channels[channelId].parametersDefined |= 0x04;
 17428  00895C  5162               	movf	UpdateDutyCycle@channelId& (0+255),w,b
 17429  00895E  0D0E               	mullw	14
 17430  008960  0E0D               	movlw	13
 17431  008962  26F3               	addwf	prodl,f,c
 17432  008964  0E00               	movlw	0
 17433  008966  22F4               	addwfc	prodh,f,c
 17434  008968  0E00               	movlw	low _Channels
 17435  00896A  24F3               	addwf	prodl,w,c
 17436  00896C  6ED9               	movwf	fsr2l,c
 17437  00896E  0E04               	movlw	high _Channels
 17438  008970  20F4               	addwfc	prodh,w,c
 17439  008972  6EDA               	movwf	fsr2h,c
 17440  008974  0E00               	movlw	0
 17441  008976  84DB               	bsf	plusw2,2,c
 17442                           
 17443                           ; BSR set to: 0
 17444  008978  0012               	return		;funcret
 17445  00897A                     __end_of_UpdateDutyCycle:
 17446                           	opt stack 0
 17447                           tosu	equ	0xFFF
 17448                           tosh	equ	0xFFE
 17449                           tosl	equ	0xFFD
 17450                           pclath	equ	0xFFA
 17451                           tblptru	equ	0xFF8
 17452                           tblptrh	equ	0xFF7
 17453                           tblptrl	equ	0xFF6
 17454                           tablat	equ	0xFF5
 17455                           prodh	equ	0xFF4
 17456                           prodl	equ	0xFF3
 17457                           intcon	equ	0xFF2
 17458                           intcon2	equ	0xFF1
 17459                           intcon3	equ	0xFF0
 17460                           indf0	equ	0xFEF
 17461                           postinc0	equ	0xFEE
 17462                           fsr0h	equ	0xFEA
 17463                           fsr0l	equ	0xFE9
 17464                           wreg	equ	0xFE8
 17465                           postinc1	equ	0xFE6
 17466                           postdec1	equ	0xFE5
 17467                           plusw1	equ	0xFE3
 17468                           fsr1h	equ	0xFE2
 17469                           fsr1l	equ	0xFE1
 17470                           indf2	equ	0xFDF
 17471                           postinc2	equ	0xFDE
 17472                           postdec2	equ	0xFDD
 17473                           plusw2	equ	0xFDB
 17474                           fsr2h	equ	0xFDA
 17475                           fsr2l	equ	0xFD9
 17476                           status	equ	0xFD8
 17477                           
 17478 ;; *************** function _UpdateDataRange *****************
 17479 ;; Defined at:
 17480 ;;		line 1009 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 17481 ;; Parameters:    Size  Location     Type
 17482 ;;  channelId       1    wreg     unsigned char 
 17483 ;;  dataRangeNew    1    0[BANK0 ] unsigned char 
 17484 ;; Auto vars:     Size  Location     Type
 17485 ;;  channelId       1    2[BANK0 ] unsigned char 
 17486 ;;  i               1    3[BANK0 ] unsigned char 
 17487 ;; Return value:  Size  Location     Type
 17488 ;;                  1    wreg      void 
 17489 ;; Registers used:
 17490 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 17491 ;; Tracked objects:
 17492 ;;		On entry : 0/0
 17493 ;;		On exit  : 0/0
 17494 ;;		Unchanged: 0/0
 17495 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17496 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17497 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17498 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17499 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17500 ;;Total ram usage:        4 bytes
 17501 ;; Hardware stack levels used:    1
 17502 ;; Hardware stack levels required when called:    7
 17503 ;; This function calls:
 17504 ;;		Nothing
 17505 ;; This function is called by:
 17506 ;;		_ExecuteNewChannel
 17507 ;;		_LORAWAN_SetDataRange
 17508 ;; This function uses a non-reentrant model
 17509 ;;
 17510                           
 17511                           	psect	text82
 17512  00593A                     __ptext82:
 17513                           	opt stack 0
 17514  00593A                     _UpdateDataRange:
 17515                           	opt stack 17
 17516                           
 17517                           ; BSR set to: 0
 17518                           ;incstack = 0
 17519                           ;UpdateDataRange@channelId stored from wreg
 17520  00593A  0100               	movlb	0	; () banked
 17521  00593C  6F62               	movwf	UpdateDataRange@channelId& (0+255),b
 17522                           
 17523                           ;lorawan_eu.c: 1011: uint8_t i;
 17524                           ;lorawan_eu.c: 1014: loRa.minDataRate = 7;
 17525  00593E  0E07               	movlw	7
 17526  005940  0102               	movlb	2	; () banked
 17527  005942  6FF5               	movwf	(_loRa+235)& (0+255),b
 17528                           
 17529                           ;lorawan_eu.c: 1015: loRa.maxDataRate = 0;
 17530  005944  0E00               	movlw	0
 17531  005946  6FF6               	movwf	(_loRa+236)& (0+255),b
 17532                           
 17533                           ; BSR set to: 2
 17534                           ;lorawan_eu.c: 1017: Channels[channelId].dataRange.value = dataRangeNew;
 17535  005948  0100               	movlb	0	; () banked
 17536  00594A  5162               	movf	UpdateDataRange@channelId& (0+255),w,b
 17537  00594C  0D0E               	mullw	14
 17538  00594E  0E05               	movlw	5
 17539  005950  26F3               	addwf	prodl,f,c
 17540  005952  0E00               	movlw	0
 17541  005954  22F4               	addwfc	prodh,f,c
 17542  005956  0E00               	movlw	low _Channels
 17543  005958  24F3               	addwf	prodl,w,c
 17544  00595A  6ED9               	movwf	fsr2l,c
 17545  00595C  0E04               	movlw	high _Channels
 17546  00595E  20F4               	addwfc	prodh,w,c
 17547  005960  6EDA               	movwf	fsr2h,c
 17548  005962  C060  FFDF         	movff	UpdateDataRange@dataRangeNew,indf2
 17549                           
 17550                           ; BSR set to: 0
 17551                           ;lorawan_eu.c: 1018: Channels[channelId].parametersDefined |= 0X02;
 17552  005966  5162               	movf	UpdateDataRange@channelId& (0+255),w,b
 17553  005968  0D0E               	mullw	14
 17554  00596A  0E0D               	movlw	13
 17555  00596C  26F3               	addwf	prodl,f,c
 17556  00596E  0E00               	movlw	0
 17557  005970  22F4               	addwfc	prodh,f,c
 17558  005972  0E00               	movlw	low _Channels
 17559  005974  24F3               	addwf	prodl,w,c
 17560  005976  6ED9               	movwf	fsr2l,c
 17561  005978  0E04               	movlw	high _Channels
 17562  00597A  20F4               	addwfc	prodh,w,c
 17563  00597C  6EDA               	movwf	fsr2h,c
 17564  00597E  0E00               	movlw	0
 17565  005980  82DB               	bsf	plusw2,1,c
 17566                           
 17567                           ; BSR set to: 0
 17568                           ;lorawan_eu.c: 1019: for (i=0; i < loRa.maxChannels; i++)
 17569  005982  0E00               	movlw	0
 17570  005984  6F63               	movwf	UpdateDataRange@i& (0+255),b
 17571  005986  D06D               	goto	l2048
 17572  005988                     
 17573                           ; BSR set to: 0
 17574                           ;lorawan_eu.c: 1020: {
 17575                           ;lorawan_eu.c: 1021: if ( (Channels[i].dataRange.min < loRa.minDataRate) && (Channels[i]
      +                          .status == 1) )
 17576                           
 17577                           ; BSR set to: 0
 17578  005988  5163               	movf	UpdateDataRange@i& (0+255),w,b
 17579  00598A  0D0E               	mullw	14
 17580  00598C  0E05               	movlw	5
 17581  00598E  26F3               	addwf	prodl,f,c
 17582  005990  0E00               	movlw	0
 17583  005992  22F4               	addwfc	prodh,f,c
 17584  005994  0E00               	movlw	low _Channels
 17585  005996  24F3               	addwf	prodl,w,c
 17586  005998  6ED9               	movwf	fsr2l,c
 17587  00599A  0E04               	movlw	high _Channels
 17588  00599C  20F4               	addwfc	prodh,w,c
 17589  00599E  6EDA               	movwf	fsr2h,c
 17590  0059A0  0104               	movlb	4	; () banked
 17591  0059A2  50DF               	movf	223,w,c
 17592  0059A4  0B0F               	andlw	15
 17593  0059A6  0100               	movlb	0	; () banked
 17594  0059A8  6F61               	movwf	??_UpdateDataRange& (0+255),b
 17595  0059AA  0102               	movlb	2	; () banked
 17596  0059AC  51F5               	movf	(_loRa+235)& (0+255),w,b
 17597  0059AE  0100               	movlb	0	; () banked
 17598  0059B0  5D61               	subwf	??_UpdateDataRange& (0+255),w,b
 17599  0059B2  B0D8               	btfsc	status,0,c
 17600  0059B4  D020               	goto	l2050
 17601                           
 17602                           ; BSR set to: 0
 17603  0059B6  5163               	movf	UpdateDataRange@i& (0+255),w,b
 17604  0059B8  0D0E               	mullw	14
 17605  0059BA  0E04               	movlw	4
 17606  0059BC  26F3               	addwf	prodl,f,c
 17607  0059BE  0E00               	movlw	0
 17608  0059C0  22F4               	addwfc	prodh,f,c
 17609  0059C2  0E00               	movlw	low _Channels
 17610  0059C4  24F3               	addwf	prodl,w,c
 17611  0059C6  6ED9               	movwf	fsr2l,c
 17612  0059C8  0E04               	movlw	high _Channels
 17613  0059CA  20F4               	addwfc	prodh,w,c
 17614  0059CC  6EDA               	movwf	fsr2h,c
 17615  0059CE  04DE               	decf	postinc2,w,c
 17616  0059D0  A4D8               	btfss	status,2,c
 17617  0059D2  D011               	goto	l2050
 17618                           
 17619                           ; BSR set to: 0
 17620                           ;lorawan_eu.c: 1022: {
 17621                           ;lorawan_eu.c: 1023: loRa.minDataRate = Channels[i].dataRange.min;
 17622  0059D4  5163               	movf	UpdateDataRange@i& (0+255),w,b
 17623  0059D6  0D0E               	mullw	14
 17624  0059D8  0E05               	movlw	5
 17625  0059DA  26F3               	addwf	prodl,f,c
 17626  0059DC  0E00               	movlw	0
 17627  0059DE  22F4               	addwfc	prodh,f,c
 17628  0059E0  0E00               	movlw	low _Channels
 17629  0059E2  24F3               	addwf	prodl,w,c
 17630  0059E4  6ED9               	movwf	fsr2l,c
 17631  0059E6  0E04               	movlw	high _Channels
 17632  0059E8  20F4               	addwfc	prodh,w,c
 17633  0059EA  6EDA               	movwf	fsr2h,c
 17634  0059EC  0104               	movlb	4	; () banked
 17635  0059EE  50DF               	movf	223,w,c
 17636  0059F0  0B0F               	andlw	15
 17637  0059F2  0102               	movlb	2	; () banked
 17638  0059F4  6FF5               	movwf	(_loRa+235)& (0+255),b
 17639  0059F6                     l2050:
 17640                           
 17641                           ;lorawan_eu.c: 1024: }
 17642                           ;lorawan_eu.c: 1025: if ( (Channels[i].dataRange.max > loRa.maxDataRate) && (Channels[i]
      +                          .status == 1) )
 17643  0059F6  0100               	movlb	0	; () banked
 17644  0059F8  5163               	movf	UpdateDataRange@i& (0+255),w,b
 17645  0059FA  0D0E               	mullw	14
 17646  0059FC  0E05               	movlw	5
 17647  0059FE  26F3               	addwf	prodl,f,c
 17648  005A00  0E00               	movlw	0
 17649  005A02  22F4               	addwfc	prodh,f,c
 17650  005A04  0E00               	movlw	low _Channels
 17651  005A06  24F3               	addwf	prodl,w,c
 17652  005A08  6ED9               	movwf	fsr2l,c
 17653  005A0A  0E04               	movlw	high _Channels
 17654  005A0C  20F4               	addwfc	prodh,w,c
 17655  005A0E  6EDA               	movwf	fsr2h,c
 17656  005A10  0104               	movlb	4	; () banked
 17657  005A12  38DF               	swapf	223,w,c
 17658  005A14  0B0F               	andlw	15
 17659  005A16  0102               	movlb	2	; () banked
 17660  005A18  61F6               	cpfslt	(_loRa+236)& (0+255),b
 17661  005A1A  D021               	goto	l2051
 17662                           
 17663                           ; BSR set to: 2
 17664  005A1C  0100               	movlb	0	; () banked
 17665  005A1E  5163               	movf	UpdateDataRange@i& (0+255),w,b
 17666  005A20  0D0E               	mullw	14
 17667  005A22  0E04               	movlw	4
 17668  005A24  26F3               	addwf	prodl,f,c
 17669  005A26  0E00               	movlw	0
 17670  005A28  22F4               	addwfc	prodh,f,c
 17671  005A2A  0E00               	movlw	low _Channels
 17672  005A2C  24F3               	addwf	prodl,w,c
 17673  005A2E  6ED9               	movwf	fsr2l,c
 17674  005A30  0E04               	movlw	high _Channels
 17675  005A32  20F4               	addwfc	prodh,w,c
 17676  005A34  6EDA               	movwf	fsr2h,c
 17677  005A36  04DE               	decf	postinc2,w,c
 17678  005A38  A4D8               	btfss	status,2,c
 17679  005A3A  D011               	goto	l2051
 17680                           
 17681                           ; BSR set to: 0
 17682                           ;lorawan_eu.c: 1026: {
 17683                           ;lorawan_eu.c: 1027: loRa.maxDataRate = Channels[i].dataRange.max;
 17684  005A3C  5163               	movf	UpdateDataRange@i& (0+255),w,b
 17685  005A3E  0D0E               	mullw	14
 17686  005A40  0E05               	movlw	5
 17687  005A42  26F3               	addwf	prodl,f,c
 17688  005A44  0E00               	movlw	0
 17689  005A46  22F4               	addwfc	prodh,f,c
 17690  005A48  0E00               	movlw	low _Channels
 17691  005A4A  24F3               	addwf	prodl,w,c
 17692  005A4C  6ED9               	movwf	fsr2l,c
 17693  005A4E  0E04               	movlw	high _Channels
 17694  005A50  20F4               	addwfc	prodh,w,c
 17695  005A52  6EDA               	movwf	fsr2h,c
 17696  005A54  0104               	movlb	4	; () banked
 17697  005A56  38DF               	swapf	223,w,c
 17698  005A58  0B0F               	andlw	15
 17699  005A5A  0102               	movlb	2	; () banked
 17700  005A5C  6FF6               	movwf	(_loRa+236)& (0+255),b
 17701  005A5E                     l2051:
 17702                           
 17703                           ; BSR set to: 2
 17704  005A5E  0100               	movlb	0	; () banked
 17705  005A60  2B63               	incf	UpdateDataRange@i& (0+255),f,b
 17706  005A62                     l2048:
 17707                           
 17708                           ; BSR set to: 0
 17709                           
 17710                           ; BSR set to: 0
 17711  005A62  0102               	movlb	2	; () banked
 17712  005A64  51F7               	movf	(_loRa+237)& (0+255),w,b
 17713  005A66  0100               	movlb	0	; () banked
 17714  005A68  5D63               	subwf	UpdateDataRange@i& (0+255),w,b
 17715  005A6A  A0D8               	btfss	status,0,c
 17716  005A6C  D78D               	goto	l2049
 17717                           
 17718                           ; BSR set to: 0
 17719                           ;lorawan_eu.c: 1028: }
 17720                           ;lorawan_eu.c: 1029: }
 17721                           ;lorawan_eu.c: 1031: if (loRa.currentDataRate > loRa.maxDataRate)
 17722                           
 17723                           ; BSR set to: 0
 17724  005A6E  0102               	movlb	2	; () banked
 17725  005A70  51E9               	movf	(_loRa+223)& (0+255),w,b
 17726  005A72  5DF6               	subwf	(_loRa+236)& (0+255),w,b
 17727  005A74  A0D8               	btfss	status,0,c
 17728                           
 17729                           ; BSR set to: 2
 17730                           ;lorawan_eu.c: 1032: {
 17731                           ;lorawan_eu.c: 1033: loRa.currentDataRate = loRa.maxDataRate;
 17732  005A76  C2F6  F2E9         	movff	_loRa+236,_loRa+223
 17733                           
 17734                           ; BSR set to: 2
 17735                           ;lorawan_eu.c: 1034: }
 17736                           ;lorawan_eu.c: 1036: if (loRa.currentDataRate < loRa.minDataRate)
 17737                           
 17738                           ; BSR set to: 2
 17739  005A7A  51F5               	movf	(_loRa+235)& (0+255),w,b
 17740  005A7C  5DE9               	subwf	(_loRa+223)& (0+255),w,b
 17741  005A7E  B0D8               	btfsc	status,0,c
 17742  005A80  0012               	return	
 17743                           
 17744                           ; BSR set to: 2
 17745                           ;lorawan_eu.c: 1037: {
 17746                           ;lorawan_eu.c: 1038: loRa.currentDataRate = loRa.minDataRate;
 17747  005A82  C2F5  F2E9         	movff	_loRa+235,_loRa+223
 17748  005A86  0012               	return	
 17749  005A88                     __end_of_UpdateDataRange:
 17750                           	opt stack 0
 17751                           tosu	equ	0xFFF
 17752                           tosh	equ	0xFFE
 17753                           tosl	equ	0xFFD
 17754                           pclath	equ	0xFFA
 17755                           tblptru	equ	0xFF8
 17756                           tblptrh	equ	0xFF7
 17757                           tblptrl	equ	0xFF6
 17758                           tablat	equ	0xFF5
 17759                           prodh	equ	0xFF4
 17760                           prodl	equ	0xFF3
 17761                           intcon	equ	0xFF2
 17762                           intcon2	equ	0xFF1
 17763                           intcon3	equ	0xFF0
 17764                           indf0	equ	0xFEF
 17765                           postinc0	equ	0xFEE
 17766                           fsr0h	equ	0xFEA
 17767                           fsr0l	equ	0xFE9
 17768                           wreg	equ	0xFE8
 17769                           postinc1	equ	0xFE6
 17770                           postdec1	equ	0xFE5
 17771                           plusw1	equ	0xFE3
 17772                           fsr1h	equ	0xFE2
 17773                           fsr1l	equ	0xFE1
 17774                           indf2	equ	0xFDF
 17775                           postinc2	equ	0xFDE
 17776                           postdec2	equ	0xFDD
 17777                           plusw2	equ	0xFDB
 17778                           fsr2h	equ	0xFDA
 17779                           fsr2l	equ	0xFD9
 17780                           status	equ	0xFD8
 17781                           
 17782 ;; *************** function _LORAWAN_SetChannelIdStatus *****************
 17783 ;; Defined at:
 17784 ;;		line 282 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 17785 ;; Parameters:    Size  Location     Type
 17786 ;;  channelId       1    wreg     unsigned char 
 17787 ;;  statusNew       1    4[BANK0 ] unsigned char 
 17788 ;; Auto vars:     Size  Location     Type
 17789 ;;  channelId       1    6[BANK0 ] unsigned char 
 17790 ;;  result          1    5[BANK0 ] enum E7249
 17791 ;; Return value:  Size  Location     Type
 17792 ;;                  1    wreg      enum E7249
 17793 ;; Registers used:
 17794 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 17795 ;; Tracked objects:
 17796 ;;		On entry : 0/0
 17797 ;;		On exit  : 0/0
 17798 ;;		Unchanged: 0/0
 17799 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17800 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17801 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17802 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17803 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17804 ;;Total ram usage:        3 bytes
 17805 ;; Hardware stack levels used:    1
 17806 ;; Hardware stack levels required when called:    8
 17807 ;; This function calls:
 17808 ;;		_UpdateChannelIdStatus
 17809 ;;		_ValidateChannelId
 17810 ;; This function is called by:
 17811 ;;		_ExecuteNewChannel
 17812 ;;		_UpdateCfList
 17813 ;; This function uses a non-reentrant model
 17814 ;;
 17815                           
 17816                           	psect	text83
 17817  0083E6                     __ptext83:
 17818                           	opt stack 0
 17819  0083E6                     _LORAWAN_SetChannelIdStatus:
 17820                           	opt stack 17
 17821                           
 17822                           ; BSR set to: 2
 17823                           ;incstack = 0
 17824                           ;LORAWAN_SetChannelIdStatus@channelId stored from wreg
 17825  0083E6  0100               	movlb	0	; () banked
 17826  0083E8  6F66               	movwf	LORAWAN_SetChannelIdStatus@channelId& (0+255),b
 17827                           
 17828                           ;lorawan_eu.c: 284: LorawanError_t result = OK;
 17829  0083EA  0E00               	movlw	0
 17830  0083EC  0100               	movlb	0	; () banked
 17831  0083EE  6F65               	movwf	LORAWAN_SetChannelIdStatus@result& (0+255),b
 17832                           
 17833                           ; BSR set to: 0
 17834                           ;lorawan_eu.c: 287: if (ValidateChannelId (channelId, 1) != OK)
 17835  0083F0  0E01               	movlw	1
 17836  0083F2  6F60               	movwf	ValidateChannelId@allowedForDefaultChannels& (0+255),b
 17837  0083F4  5166               	movf	LORAWAN_SetChannelIdStatus@channelId& (0+255),w,b
 17838  0083F6  EC48  F048         	call	_ValidateChannelId
 17839  0083FA  0900               	iorlw	0
 17840  0083FC  B4D8               	btfsc	status,2,c
 17841  0083FE  D004               	goto	l1836
 17842                           
 17843                           ;lorawan_eu.c: 288: {
 17844                           ;lorawan_eu.c: 289: result = INVALID_PARAMETER;
 17845  008400  0E03               	movlw	3
 17846  008402  0100               	movlb	0	; () banked
 17847  008404  6F65               	movwf	LORAWAN_SetChannelIdStatus@result& (0+255),b
 17848                           
 17849                           ;lorawan_eu.c: 290: }
 17850  008406  0012               	return	
 17851  008408                     l1836:
 17852                           
 17853                           ;lorawan_eu.c: 292: else
 17854                           ;lorawan_eu.c: 293: {
 17855                           ;lorawan_eu.c: 294: if ( (Channels[channelId].parametersDefined & (0X01 | 0X02 | 0x04) )
      +                           == (0X01 | 0X02 | 0x04) )
 17856                           
 17857                           ; BSR set to: 0
 17858  008408  0100               	movlb	0	; () banked
 17859  00840A  5166               	movf	LORAWAN_SetChannelIdStatus@channelId& (0+255),w,b
 17860  00840C  0D0E               	mullw	14
 17861  00840E  0E0D               	movlw	13
 17862  008410  26F3               	addwf	prodl,f,c
 17863  008412  0E00               	movlw	0
 17864  008414  22F4               	addwfc	prodh,f,c
 17865  008416  0E00               	movlw	low _Channels
 17866  008418  24F3               	addwf	prodl,w,c
 17867  00841A  6ED9               	movwf	fsr2l,c
 17868  00841C  0E04               	movlw	high _Channels
 17869  00841E  20F4               	addwfc	prodh,w,c
 17870  008420  6EDA               	movwf	fsr2h,c
 17871  008422  50DF               	movf	indf2,w,c
 17872  008424  0B07               	andlw	7
 17873  008426  0A07               	xorlw	7
 17874  008428  A4D8               	btfss	status,2,c
 17875  00842A  D006               	goto	l1838
 17876                           
 17877                           ; BSR set to: 0
 17878                           ;lorawan_eu.c: 295: {
 17879                           ;lorawan_eu.c: 296: UpdateChannelIdStatus (channelId, statusNew);
 17880  00842C  C064  F060         	movff	LORAWAN_SetChannelIdStatus@statusNew,UpdateChannelIdStatus@statusNew
 17881  008430  5166               	movf	LORAWAN_SetChannelIdStatus@channelId& (0+255),w,b
 17882  008432  EC89  F02A         	call	_UpdateChannelIdStatus
 17883                           
 17884                           ;lorawan_eu.c: 297: }
 17885  008436  0012               	return	
 17886  008438                     l1838:
 17887                           
 17888                           ;lorawan_eu.c: 298: else
 17889                           ;lorawan_eu.c: 299: {
 17890                           ;lorawan_eu.c: 300: result = INVALID_PARAMETER;
 17891  008438  0E03               	movlw	3
 17892  00843A  0100               	movlb	0	; () banked
 17893  00843C  6F65               	movwf	LORAWAN_SetChannelIdStatus@result& (0+255),b
 17894                           
 17895                           ; BSR set to: 0
 17896                           
 17897                           ; BSR set to: 0
 17898  00843E  0012               	return	
 17899  008440                     __end_of_LORAWAN_SetChannelIdStatus:
 17900                           	opt stack 0
 17901                           tosu	equ	0xFFF
 17902                           tosh	equ	0xFFE
 17903                           tosl	equ	0xFFD
 17904                           pclath	equ	0xFFA
 17905                           tblptru	equ	0xFF8
 17906                           tblptrh	equ	0xFF7
 17907                           tblptrl	equ	0xFF6
 17908                           tablat	equ	0xFF5
 17909                           prodh	equ	0xFF4
 17910                           prodl	equ	0xFF3
 17911                           intcon	equ	0xFF2
 17912                           intcon2	equ	0xFF1
 17913                           intcon3	equ	0xFF0
 17914                           indf0	equ	0xFEF
 17915                           postinc0	equ	0xFEE
 17916                           fsr0h	equ	0xFEA
 17917                           fsr0l	equ	0xFE9
 17918                           wreg	equ	0xFE8
 17919                           postinc1	equ	0xFE6
 17920                           postdec1	equ	0xFE5
 17921                           plusw1	equ	0xFE3
 17922                           fsr1h	equ	0xFE2
 17923                           fsr1l	equ	0xFE1
 17924                           indf2	equ	0xFDF
 17925                           postinc2	equ	0xFDE
 17926                           postdec2	equ	0xFDD
 17927                           plusw2	equ	0xFDB
 17928                           fsr2h	equ	0xFDA
 17929                           fsr2l	equ	0xFD9
 17930                           status	equ	0xFD8
 17931                           
 17932 ;; *************** function _ValidateChannelId *****************
 17933 ;; Defined at:
 17934 ;;		line 1125 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 17935 ;; Parameters:    Size  Location     Type
 17936 ;;  channelId       1    wreg     unsigned char 
 17937 ;;  allowedForDe    1    0[BANK0 ] unsigned char 
 17938 ;; Auto vars:     Size  Location     Type
 17939 ;;  channelId       1    2[BANK0 ] unsigned char 
 17940 ;;  result          1    1[BANK0 ] enum E7249
 17941 ;; Return value:  Size  Location     Type
 17942 ;;                  1    wreg      enum E7249
 17943 ;; Registers used:
 17944 ;;		wreg, status,2, status,0
 17945 ;; Tracked objects:
 17946 ;;		On entry : 0/0
 17947 ;;		On exit  : 0/0
 17948 ;;		Unchanged: 0/0
 17949 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17950 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17951 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17952 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17953 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17954 ;;Total ram usage:        3 bytes
 17955 ;; Hardware stack levels used:    1
 17956 ;; Hardware stack levels required when called:    7
 17957 ;; This function calls:
 17958 ;;		Nothing
 17959 ;; This function is called by:
 17960 ;;		_LORAWAN_SetChannelIdStatus
 17961 ;;		_ExecuteNewChannel
 17962 ;;		_LORAWAN_SetDataRange
 17963 ;;		_LORAWAN_GetDataRange
 17964 ;;		_LORAWAN_GetChannelIdStatus
 17965 ;;		_LORAWAN_SetFrequency
 17966 ;;		_LORAWAN_SetDutyCycle
 17967 ;;		_LORAWAN_GetDutyCycle
 17968 ;; This function uses a non-reentrant model
 17969 ;;
 17970                           
 17971                           	psect	text84
 17972  009090                     __ptext84:
 17973                           	opt stack 0
 17974  009090                     _ValidateChannelId:
 17975                           	opt stack 17
 17976                           
 17977                           ;incstack = 0
 17978                           ;ValidateChannelId@channelId stored from wreg
 17979  009090  0100               	movlb	0	; () banked
 17980  009092  6F62               	movwf	ValidateChannelId@channelId& (0+255),b
 17981                           
 17982                           ;lorawan_eu.c: 1127: LorawanError_t result = OK;
 17983  009094  0E00               	movlw	0
 17984  009096  0100               	movlb	0	; () banked
 17985  009098  6F61               	movwf	ValidateChannelId@result& (0+255),b
 17986                           
 17987                           ; BSR set to: 0
 17988                           ;lorawan_eu.c: 1129: if ( (channelId >= 16) || ( (allowedForDefaultChannels == 0) && (ch
      +                          annelId < 3) ) )
 17989  00909A  0E10               	movlw	16
 17990  00909C  6162               	cpfslt	ValidateChannelId@channelId& (0+255),b
 17991  00909E  D006               	goto	u8820
 17992                           
 17993                           ; BSR set to: 0
 17994  0090A0  5160               	movf	ValidateChannelId@allowedForDefaultChannels& (0+255),w,b
 17995  0090A2  A4D8               	btfss	status,2,c
 17996  0090A4  D005               	goto	l2090
 17997                           
 17998                           ; BSR set to: 0
 17999  0090A6  0E03               	movlw	3
 18000  0090A8  6162               	cpfslt	ValidateChannelId@channelId& (0+255),b
 18001  0090AA  D002               	goto	l2090
 18002  0090AC                     u8820:
 18003                           
 18004                           ; BSR set to: 0
 18005                           ;lorawan_eu.c: 1130: {
 18006                           ;lorawan_eu.c: 1131: result = INVALID_PARAMETER ;
 18007                           
 18008                           ; BSR set to: 0
 18009  0090AC  0E03               	movlw	3
 18010  0090AE  6F61               	movwf	ValidateChannelId@result& (0+255),b
 18011  0090B0                     l2090:
 18012                           
 18013                           ; BSR set to: 0
 18014                           ;lorawan_eu.c: 1132: }
 18015                           ;lorawan_eu.c: 1134: return result;
 18016  0090B0  5161               	movf	ValidateChannelId@result& (0+255),w,b
 18017  0090B2  0012               	return	
 18018  0090B4                     __end_of_ValidateChannelId:
 18019                           	opt stack 0
 18020                           tosu	equ	0xFFF
 18021                           tosh	equ	0xFFE
 18022                           tosl	equ	0xFFD
 18023                           pclath	equ	0xFFA
 18024                           tblptru	equ	0xFF8
 18025                           tblptrh	equ	0xFF7
 18026                           tblptrl	equ	0xFF6
 18027                           tablat	equ	0xFF5
 18028                           prodh	equ	0xFF4
 18029                           prodl	equ	0xFF3
 18030                           intcon	equ	0xFF2
 18031                           intcon2	equ	0xFF1
 18032                           intcon3	equ	0xFF0
 18033                           indf0	equ	0xFEF
 18034                           postinc0	equ	0xFEE
 18035                           fsr0h	equ	0xFEA
 18036                           fsr0l	equ	0xFE9
 18037                           wreg	equ	0xFE8
 18038                           postinc1	equ	0xFE6
 18039                           postdec1	equ	0xFE5
 18040                           plusw1	equ	0xFE3
 18041                           fsr1h	equ	0xFE2
 18042                           fsr1l	equ	0xFE1
 18043                           indf2	equ	0xFDF
 18044                           postinc2	equ	0xFDE
 18045                           postdec2	equ	0xFDD
 18046                           plusw2	equ	0xFDB
 18047                           fsr2h	equ	0xFDA
 18048                           fsr2l	equ	0xFD9
 18049                           status	equ	0xFD8
 18050                           
 18051 ;; *************** function _ExecuteLinkCheck *****************
 18052 ;; Defined at:
 18053 ;;		line 1652 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 18054 ;; Parameters:    Size  Location     Type
 18055 ;;  ptr             2    0[BANK0 ] PTR unsigned char 
 18056 ;;		 -> radioBuffer(271), LORAWAN_RxDone@hdr(2), 
 18057 ;; Auto vars:     Size  Location     Type
 18058 ;;		None
 18059 ;; Return value:  Size  Location     Type
 18060 ;;                  2    0[BANK0 ] PTR unsigned char 
 18061 ;; Registers used:
 18062 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 18063 ;; Tracked objects:
 18064 ;;		On entry : 0/0
 18065 ;;		On exit  : 0/0
 18066 ;;		Unchanged: 0/0
 18067 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18068 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18069 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18070 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18071 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18072 ;;Total ram usage:        2 bytes
 18073 ;; Hardware stack levels used:    1
 18074 ;; Hardware stack levels required when called:    7
 18075 ;; This function calls:
 18076 ;;		Nothing
 18077 ;; This function is called by:
 18078 ;;		_MacExecuteCommands
 18079 ;; This function uses a non-reentrant model
 18080 ;;
 18081                           
 18082                           	psect	text85
 18083  008CD6                     __ptext85:
 18084                           	opt stack 0
 18085  008CD6                     _ExecuteLinkCheck:
 18086                           	opt stack 18
 18087                           
 18088                           ;lorawan.c: 1654: loRa.linkCheckMargin = *(ptr++);
 18089                           
 18090                           ; BSR set to: 0
 18091                           ;incstack = 0
 18092  008CD6  C060  FFD9         	movff	ExecuteLinkCheck@ptr,fsr2l
 18093  008CDA  C061  FFDA         	movff	ExecuteLinkCheck@ptr+1,fsr2h
 18094  008CDE  50DF               	movf	indf2,w,c
 18095  008CE0  0102               	movlb	2	; () banked
 18096  008CE2  6FE7               	movwf	(_loRa+221)& (0+255),b
 18097                           
 18098                           ; BSR set to: 2
 18099  008CE4  0100               	movlb	0	; () banked
 18100  008CE6  4B60               	infsnz	ExecuteLinkCheck@ptr& (0+255),f,b
 18101  008CE8  2B61               	incf	(ExecuteLinkCheck@ptr+1)& (0+255),f,b
 18102                           
 18103                           ; BSR set to: 0
 18104                           ;lorawan.c: 1655: loRa.linkCheckGwCnt = *(ptr++);
 18105  008CEA  C060  FFD9         	movff	ExecuteLinkCheck@ptr,fsr2l
 18106  008CEE  C061  FFDA         	movff	ExecuteLinkCheck@ptr+1,fsr2h
 18107  008CF2  50DF               	movf	indf2,w,c
 18108  008CF4  0102               	movlb	2	; () banked
 18109  008CF6  6FE8               	movwf	(_loRa+222)& (0+255),b
 18110  008CF8  0100               	movlb	0	; () banked
 18111  008CFA  4B60               	infsnz	ExecuteLinkCheck@ptr& (0+255),f,b
 18112  008CFC  2B61               	incf	(ExecuteLinkCheck@ptr+1)& (0+255),f,b
 18113                           
 18114                           ; BSR set to: 0
 18115                           ;lorawan.c: 1656: return ptr;
 18116  008CFE  C060  F060         	movff	ExecuteLinkCheck@ptr,?_ExecuteLinkCheck
 18117  008D02  C061  F061         	movff	ExecuteLinkCheck@ptr+1,?_ExecuteLinkCheck+1
 18118  008D06  0012               	return	
 18119  008D08                     __end_of_ExecuteLinkCheck:
 18120                           	opt stack 0
 18121                           tosu	equ	0xFFF
 18122                           tosh	equ	0xFFE
 18123                           tosl	equ	0xFFD
 18124                           pclath	equ	0xFFA
 18125                           tblptru	equ	0xFF8
 18126                           tblptrh	equ	0xFF7
 18127                           tblptrl	equ	0xFF6
 18128                           tablat	equ	0xFF5
 18129                           prodh	equ	0xFF4
 18130                           prodl	equ	0xFF3
 18131                           intcon	equ	0xFF2
 18132                           intcon2	equ	0xFF1
 18133                           intcon3	equ	0xFF0
 18134                           indf0	equ	0xFEF
 18135                           postinc0	equ	0xFEE
 18136                           fsr0h	equ	0xFEA
 18137                           fsr0l	equ	0xFE9
 18138                           wreg	equ	0xFE8
 18139                           postinc1	equ	0xFE6
 18140                           postdec1	equ	0xFE5
 18141                           plusw1	equ	0xFE3
 18142                           fsr1h	equ	0xFE2
 18143                           fsr1l	equ	0xFE1
 18144                           indf2	equ	0xFDF
 18145                           postinc2	equ	0xFDE
 18146                           postdec2	equ	0xFDD
 18147                           plusw2	equ	0xFDB
 18148                           fsr2h	equ	0xFDA
 18149                           fsr2l	equ	0xFD9
 18150                           status	equ	0xFD8
 18151                           
 18152 ;; *************** function _ExecuteLinkAdr *****************
 18153 ;; Defined at:
 18154 ;;		line 613 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 18155 ;; Parameters:    Size  Location     Type
 18156 ;;  ptr             2   15[BANK0 ] PTR unsigned char 
 18157 ;;		 -> radioBuffer(271), LORAWAN_RxDone@hdr(2), 
 18158 ;; Auto vars:     Size  Location     Type
 18159 ;;  redundancy      2   22[BANK0 ] PTR struct .
 18160 ;;		 -> radioBuffer(271), LORAWAN_RxDone@hdr(2), 
 18161 ;;  channelMask     2   19[BANK0 ] unsigned int 
 18162 ;;  dataRate        1   24[BANK0 ] unsigned char 
 18163 ;;  txPower         1   21[BANK0 ] unsigned char 
 18164 ;; Return value:  Size  Location     Type
 18165 ;;                  2   15[BANK0 ] PTR unsigned char 
 18166 ;; Registers used:
 18167 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 18168 ;; Tracked objects:
 18169 ;;		On entry : 0/0
 18170 ;;		On exit  : 0/0
 18171 ;;		Unchanged: 0/0
 18172 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18173 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18174 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18175 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18176 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18177 ;;Total ram usage:       10 bytes
 18178 ;; Hardware stack levels used:    1
 18179 ;; Hardware stack levels required when called:   10
 18180 ;; This function calls:
 18181 ;;		_EnableChannels
 18182 ;;		_UpdateCurrentDataRate
 18183 ;;		_UpdateTxPower
 18184 ;;		_ValidateChannelMask
 18185 ;;		_ValidateChannelMaskCntl
 18186 ;;		_ValidateDataRate
 18187 ;;		_ValidateTxPower
 18188 ;; This function is called by:
 18189 ;;		_MacExecuteCommands
 18190 ;; This function uses a non-reentrant model
 18191 ;;
 18192                           
 18193                           	psect	text86
 18194  0035AC                     __ptext86:
 18195                           	opt stack 0
 18196  0035AC                     _ExecuteLinkAdr:
 18197                           	opt stack 15
 18198                           
 18199                           ;lorawan_eu.c: 615: uint8_t txPower, dataRate;
 18200                           ;lorawan_eu.c: 616: uint16_t channelMask;
 18201                           ;lorawan_eu.c: 618: txPower = *(ptr) & 0x0F;
 18202                           
 18203                           ; BSR set to: 0
 18204                           ;incstack = 0
 18205  0035AC  C06F  FFD9         	movff	ExecuteLinkAdr@ptr,fsr2l
 18206  0035B0  C070  FFDA         	movff	ExecuteLinkAdr@ptr+1,fsr2h
 18207  0035B4  50DF               	movf	indf2,w,c
 18208  0035B6  0B0F               	andlw	15
 18209  0035B8  0100               	movlb	0	; () banked
 18210  0035BA  6F75               	movwf	ExecuteLinkAdr@txPower& (0+255),b
 18211                           
 18212                           ;lorawan_eu.c: 619: dataRate = ( *(ptr) & 0xF0 ) >> (4);
 18213  0035BC  C06F  FFD9         	movff	ExecuteLinkAdr@ptr,fsr2l
 18214  0035C0  C070  FFDA         	movff	ExecuteLinkAdr@ptr+1,fsr2h
 18215  0035C4  50DF               	movf	indf2,w,c
 18216  0035C6  6F71               	movwf	??_ExecuteLinkAdr& (0+255),b
 18217  0035C8  3971               	swapf	??_ExecuteLinkAdr& (0+255),w,b
 18218  0035CA  0B0F               	andlw	15
 18219  0035CC  0B0F               	andlw	15
 18220  0035CE  6F78               	movwf	ExecuteLinkAdr@dataRate& (0+255),b
 18221                           
 18222                           ; BSR set to: 0
 18223                           ;lorawan_eu.c: 620: ptr++;
 18224  0035D0  4B6F               	infsnz	ExecuteLinkAdr@ptr& (0+255),f,b
 18225  0035D2  2B70               	incf	(ExecuteLinkAdr@ptr+1)& (0+255),f,b
 18226                           
 18227                           ; BSR set to: 0
 18228                           ;lorawan_eu.c: 621: channelMask = (*((uint16_t*)ptr));
 18229  0035D4  C06F  FFD9         	movff	ExecuteLinkAdr@ptr,fsr2l
 18230  0035D8  C070  FFDA         	movff	ExecuteLinkAdr@ptr+1,fsr2h
 18231  0035DC  CFDE F073          	movff	postinc2,ExecuteLinkAdr@channelMask
 18232  0035E0  CFDD F074          	movff	postdec2,ExecuteLinkAdr@channelMask+1
 18233                           
 18234                           ; BSR set to: 0
 18235                           ;lorawan_eu.c: 622: ptr = ptr + sizeof (channelMask);
 18236  0035E4  0E02               	movlw	2
 18237  0035E6  256F               	addwf	ExecuteLinkAdr@ptr& (0+255),w,b
 18238  0035E8  6F6F               	movwf	ExecuteLinkAdr@ptr& (0+255),b
 18239  0035EA  0E00               	movlw	0
 18240  0035EC  2170               	addwfc	(ExecuteLinkAdr@ptr+1)& (0+255),w,b
 18241  0035EE  6F70               	movwf	(ExecuteLinkAdr@ptr+1)& (0+255),b
 18242                           
 18243                           ; BSR set to: 0
 18244                           ;lorawan_eu.c: 623: Redundancy_t *redundancy;
 18245                           ;lorawan_eu.c: 624: redundancy = (Redundancy_t*)(ptr++);
 18246  0035F0  C06F  F076         	movff	ExecuteLinkAdr@ptr,ExecuteLinkAdr@redundancy
 18247  0035F4  C070  F077         	movff	ExecuteLinkAdr@ptr+1,ExecuteLinkAdr@redundancy+1
 18248                           
 18249                           ; BSR set to: 0
 18250  0035F8  4B6F               	infsnz	ExecuteLinkAdr@ptr& (0+255),f,b
 18251  0035FA  2B70               	incf	(ExecuteLinkAdr@ptr+1)& (0+255),f,b
 18252                           
 18253                           ; BSR set to: 0
 18254                           ;lorawan_eu.c: 626: if (1 == loRa.macStatus.adr)
 18255  0035FC  0102               	movlb	2	; () banked
 18256  0035FE  AD0C               	btfss	(_loRa+2)& (0+255),6,b
 18257  003600  D0EF               	goto	l1942
 18258                           
 18259                           ; BSR set to: 2
 18260                           ;lorawan_eu.c: 627: {
 18261                           ;lorawan_eu.c: 628: if ( (ValidateChannelMaskCntl(redundancy->chMaskCntl) == OK) && (Val
      +                          idateChannelMask(channelMask) == OK) )
 18262  003602  C076  FFD9         	movff	ExecuteLinkAdr@redundancy,fsr2l
 18263  003606  C077  FFDA         	movff	ExecuteLinkAdr@redundancy+1,fsr2h
 18264  00360A  0100               	movlb	0	; () banked
 18265  00360C  38DF               	swapf	223,w,c
 18266  00360E  0B07               	andlw	7
 18267  003610  EC9E  F048         	call	_ValidateChannelMaskCntl
 18268  003614  0900               	iorlw	0
 18269  003616  A4D8               	btfss	status,2,c
 18270  003618  D021               	goto	l1943
 18271  00361A  C073  F060         	movff	ExecuteLinkAdr@channelMask,ValidateChannelMask@channelMask
 18272  00361E  C074  F061         	movff	ExecuteLinkAdr@channelMask+1,ValidateChannelMask@channelMask+1
 18273  003622  EC67  F041         	call	_ValidateChannelMask	;wreg free
 18274  003626  0900               	iorlw	0
 18275  003628  A4D8               	btfss	status,2,c
 18276  00362A  D018               	goto	l1943
 18277                           
 18278                           ;lorawan_eu.c: 629: {
 18279                           ;lorawan_eu.c: 630: loRa.macCommands[loRa.crtMacCmdIndex].channelMaskAck = 1;
 18280  00362C  0102               	movlb	2	; () banked
 18281  00362E  51B1               	movf	(_loRa+167)& (0+255),w,b
 18282  003630  0D02               	mullw	2
 18283  003632  0E0A               	movlw	low _loRa
 18284  003634  0100               	movlb	0	; () banked
 18285  003636  6F71               	movwf	??_ExecuteLinkAdr& (0+255),b
 18286  003638  0E02               	movlw	high _loRa
 18287  00363A  6F72               	movwf	(??_ExecuteLinkAdr+1)& (0+255),b
 18288  00363C  0EA8               	movlw	168
 18289  00363E  2771               	addwf	??_ExecuteLinkAdr& (0+255),f,b
 18290  003640  0E00               	movlw	0
 18291  003642  2372               	addwfc	(??_ExecuteLinkAdr+1)& (0+255),f,b
 18292  003644  50F3               	movf	prodl,w,c
 18293  003646  2771               	addwf	??_ExecuteLinkAdr& (0+255),f,b
 18294  003648  50F4               	movf	prodh,w,c
 18295  00364A  2372               	addwfc	(??_ExecuteLinkAdr+1)& (0+255),f,b
 18296  00364C  0E01               	movlw	1
 18297  00364E  2571               	addwf	??_ExecuteLinkAdr& (0+255),w,b
 18298  003650  6ED9               	movwf	fsr2l,c
 18299  003652  0E00               	movlw	0
 18300  003654  2172               	addwfc	(??_ExecuteLinkAdr+1)& (0+255),w,b
 18301  003656  6EDA               	movwf	fsr2h,c
 18302  003658  0102               	movlb	2	; () banked
 18303  00365A  80DF               	bsf	indf2,0,c
 18304  00365C                     l1943:
 18305                           
 18306                           ;lorawan_eu.c: 631: }
 18307                           ;lorawan_eu.c: 633: if ( (ValidateDataRate (dataRate) == OK) && (dataRate >= loRa.minDat
      +                          aRate) && (dataRate <= loRa.maxDataRate) )
 18308                           
 18309                           ; BSR set to: 2
 18310  00365C  0100               	movlb	0	; () banked
 18311  00365E  5178               	movf	ExecuteLinkAdr@dataRate& (0+255),w,b
 18312  003660  EC99  F049         	call	_ValidateDataRate
 18313  003664  0900               	iorlw	0
 18314  003666  A4D8               	btfss	status,2,c
 18315  003668  D022               	goto	l1944
 18316  00366A  0102               	movlb	2	; () banked
 18317  00366C  51F5               	movf	(_loRa+235)& (0+255),w,b
 18318  00366E  0100               	movlb	0	; () banked
 18319  003670  5D78               	subwf	ExecuteLinkAdr@dataRate& (0+255),w,b
 18320  003672  A0D8               	btfss	status,0,c
 18321  003674  D01C               	goto	l1944
 18322                           
 18323                           ; BSR set to: 0
 18324  003676  5178               	movf	ExecuteLinkAdr@dataRate& (0+255),w,b
 18325  003678  0102               	movlb	2	; () banked
 18326  00367A  5DF6               	subwf	(_loRa+236)& (0+255),w,b
 18327  00367C  A0D8               	btfss	status,0,c
 18328  00367E  D017               	goto	l1944
 18329                           
 18330                           ; BSR set to: 2
 18331                           ;lorawan_eu.c: 634: {
 18332                           ;lorawan_eu.c: 635: loRa.macCommands[loRa.crtMacCmdIndex].dataRateAck = 1;
 18333  003680  51B1               	movf	(_loRa+167)& (0+255),w,b
 18334  003682  0D02               	mullw	2
 18335  003684  0E0A               	movlw	low _loRa
 18336  003686  0100               	movlb	0	; () banked
 18337  003688  6F71               	movwf	??_ExecuteLinkAdr& (0+255),b
 18338  00368A  0E02               	movlw	high _loRa
 18339  00368C  6F72               	movwf	(??_ExecuteLinkAdr+1)& (0+255),b
 18340  00368E  0EA8               	movlw	168
 18341  003690  2771               	addwf	??_ExecuteLinkAdr& (0+255),f,b
 18342  003692  0E00               	movlw	0
 18343  003694  2372               	addwfc	(??_ExecuteLinkAdr+1)& (0+255),f,b
 18344  003696  50F3               	movf	prodl,w,c
 18345  003698  2771               	addwf	??_ExecuteLinkAdr& (0+255),f,b
 18346  00369A  50F4               	movf	prodh,w,c
 18347  00369C  2372               	addwfc	(??_ExecuteLinkAdr+1)& (0+255),f,b
 18348  00369E  0E01               	movlw	1
 18349  0036A0  2571               	addwf	??_ExecuteLinkAdr& (0+255),w,b
 18350  0036A2  6ED9               	movwf	fsr2l,c
 18351  0036A4  0E00               	movlw	0
 18352  0036A6  2172               	addwfc	(??_ExecuteLinkAdr+1)& (0+255),w,b
 18353  0036A8  6EDA               	movwf	fsr2h,c
 18354  0036AA  0102               	movlb	2	; () banked
 18355  0036AC  82DF               	bsf	indf2,1,c
 18356  0036AE                     l1944:
 18357                           
 18358                           ;lorawan_eu.c: 636: }
 18359                           ;lorawan_eu.c: 638: if (ValidateTxPower (txPower) == OK)
 18360                           
 18361                           ; BSR set to: 2
 18362  0036AE  0100               	movlb	0	; () banked
 18363  0036B0  5175               	movf	ExecuteLinkAdr@txPower& (0+255),w,b
 18364  0036B2  EC6C  F047         	call	_ValidateTxPower
 18365  0036B6  0900               	iorlw	0
 18366  0036B8  A4D8               	btfss	status,2,c
 18367  0036BA  D018               	goto	l1945
 18368                           
 18369                           ;lorawan_eu.c: 639: {
 18370                           ;lorawan_eu.c: 640: loRa.macCommands[loRa.crtMacCmdIndex].powerAck = 1;
 18371  0036BC  0102               	movlb	2	; () banked
 18372  0036BE  51B1               	movf	(_loRa+167)& (0+255),w,b
 18373  0036C0  0D02               	mullw	2
 18374  0036C2  0E0A               	movlw	low _loRa
 18375  0036C4  0100               	movlb	0	; () banked
 18376  0036C6  6F71               	movwf	??_ExecuteLinkAdr& (0+255),b
 18377  0036C8  0E02               	movlw	high _loRa
 18378  0036CA  6F72               	movwf	(??_ExecuteLinkAdr+1)& (0+255),b
 18379  0036CC  0EA8               	movlw	168
 18380  0036CE  2771               	addwf	??_ExecuteLinkAdr& (0+255),f,b
 18381  0036D0  0E00               	movlw	0
 18382  0036D2  2372               	addwfc	(??_ExecuteLinkAdr+1)& (0+255),f,b
 18383  0036D4  50F3               	movf	prodl,w,c
 18384  0036D6  2771               	addwf	??_ExecuteLinkAdr& (0+255),f,b
 18385  0036D8  50F4               	movf	prodh,w,c
 18386  0036DA  2372               	addwfc	(??_ExecuteLinkAdr+1)& (0+255),f,b
 18387  0036DC  0E01               	movlw	1
 18388  0036DE  2571               	addwf	??_ExecuteLinkAdr& (0+255),w,b
 18389  0036E0  6ED9               	movwf	fsr2l,c
 18390  0036E2  0E00               	movlw	0
 18391  0036E4  2172               	addwfc	(??_ExecuteLinkAdr+1)& (0+255),w,b
 18392  0036E6  6EDA               	movwf	fsr2h,c
 18393  0036E8  0102               	movlb	2	; () banked
 18394  0036EA  84DF               	bsf	indf2,2,c
 18395  0036EC                     l1945:
 18396                           
 18397                           ;lorawan_eu.c: 641: }
 18398                           ;lorawan_eu.c: 643: if ( (loRa.macCommands[loRa.crtMacCmdIndex].powerAck == 1) && (loRa.
      +                          macCommands[loRa.crtMacCmdIndex].dataRateAck == 1) && (loRa.macCommands[loRa.crtMacCmdIn
      +                          dex].channelMaskAck == 1) )
 18399  0036EC  0102               	movlb	2	; () banked
 18400  0036EE  51B1               	movf	(_loRa+167)& (0+255),w,b
 18401  0036F0  0D02               	mullw	2
 18402  0036F2  0E0A               	movlw	low _loRa
 18403  0036F4  0100               	movlb	0	; () banked
 18404  0036F6  6F71               	movwf	??_ExecuteLinkAdr& (0+255),b
 18405  0036F8  0E02               	movlw	high _loRa
 18406  0036FA  6F72               	movwf	(??_ExecuteLinkAdr+1)& (0+255),b
 18407  0036FC  0EA8               	movlw	168
 18408  0036FE  2771               	addwf	??_ExecuteLinkAdr& (0+255),f,b
 18409  003700  0E00               	movlw	0
 18410  003702  2372               	addwfc	(??_ExecuteLinkAdr+1)& (0+255),f,b
 18411  003704  50F3               	movf	prodl,w,c
 18412  003706  2771               	addwf	??_ExecuteLinkAdr& (0+255),f,b
 18413  003708  50F4               	movf	prodh,w,c
 18414  00370A  2372               	addwfc	(??_ExecuteLinkAdr+1)& (0+255),f,b
 18415  00370C  0E01               	movlw	1
 18416  00370E  2571               	addwf	??_ExecuteLinkAdr& (0+255),w,b
 18417  003710  6ED9               	movwf	fsr2l,c
 18418  003712  0E00               	movlw	0
 18419  003714  2172               	addwfc	(??_ExecuteLinkAdr+1)& (0+255),w,b
 18420  003716  6EDA               	movwf	fsr2h,c
 18421  003718  0102               	movlb	2	; () banked
 18422  00371A  A4DF               	btfss	indf2,2,c
 18423  00371C  D0A6               	goto	l1949
 18424                           
 18425                           ; BSR set to: 2
 18426  00371E  51B1               	movf	(_loRa+167)& (0+255),w,b
 18427  003720  0D02               	mullw	2
 18428  003722  0E0A               	movlw	low _loRa
 18429  003724  0100               	movlb	0	; () banked
 18430  003726  6F71               	movwf	??_ExecuteLinkAdr& (0+255),b
 18431  003728  0E02               	movlw	high _loRa
 18432  00372A  6F72               	movwf	(??_ExecuteLinkAdr+1)& (0+255),b
 18433  00372C  0EA8               	movlw	168
 18434  00372E  2771               	addwf	??_ExecuteLinkAdr& (0+255),f,b
 18435  003730  0E00               	movlw	0
 18436  003732  2372               	addwfc	(??_ExecuteLinkAdr+1)& (0+255),f,b
 18437  003734  50F3               	movf	prodl,w,c
 18438  003736  2771               	addwf	??_ExecuteLinkAdr& (0+255),f,b
 18439  003738  50F4               	movf	prodh,w,c
 18440  00373A  2372               	addwfc	(??_ExecuteLinkAdr+1)& (0+255),f,b
 18441  00373C  0E01               	movlw	1
 18442  00373E  2571               	addwf	??_ExecuteLinkAdr& (0+255),w,b
 18443  003740  6ED9               	movwf	fsr2l,c
 18444  003742  0E00               	movlw	0
 18445  003744  2172               	addwfc	(??_ExecuteLinkAdr+1)& (0+255),w,b
 18446  003746  6EDA               	movwf	fsr2h,c
 18447  003748  0102               	movlb	2	; () banked
 18448  00374A  A2DF               	btfss	indf2,1,c
 18449  00374C  D08E               	goto	l1949
 18450                           
 18451                           ; BSR set to: 2
 18452  00374E  51B1               	movf	(_loRa+167)& (0+255),w,b
 18453  003750  0D02               	mullw	2
 18454  003752  0E0A               	movlw	low _loRa
 18455  003754  0100               	movlb	0	; () banked
 18456  003756  6F71               	movwf	??_ExecuteLinkAdr& (0+255),b
 18457  003758  0E02               	movlw	high _loRa
 18458  00375A  6F72               	movwf	(??_ExecuteLinkAdr+1)& (0+255),b
 18459  00375C  0EA8               	movlw	168
 18460  00375E  2771               	addwf	??_ExecuteLinkAdr& (0+255),f,b
 18461  003760  0E00               	movlw	0
 18462  003762  2372               	addwfc	(??_ExecuteLinkAdr+1)& (0+255),f,b
 18463  003764  50F3               	movf	prodl,w,c
 18464  003766  2771               	addwf	??_ExecuteLinkAdr& (0+255),f,b
 18465  003768  50F4               	movf	prodh,w,c
 18466  00376A  2372               	addwfc	(??_ExecuteLinkAdr+1)& (0+255),f,b
 18467  00376C  0E01               	movlw	1
 18468  00376E  2571               	addwf	??_ExecuteLinkAdr& (0+255),w,b
 18469  003770  6ED9               	movwf	fsr2l,c
 18470  003772  0E00               	movlw	0
 18471  003774  2172               	addwfc	(??_ExecuteLinkAdr+1)& (0+255),w,b
 18472  003776  6EDA               	movwf	fsr2h,c
 18473  003778  0102               	movlb	2	; () banked
 18474  00377A  A0DF               	btfss	indf2,0,c
 18475  00377C  D076               	goto	l1949
 18476                           
 18477                           ; BSR set to: 2
 18478                           ;lorawan_eu.c: 644: {
 18479                           ;lorawan_eu.c: 645: EnableChannels (channelMask, redundancy->chMaskCntl);
 18480  00377E  C073  F06C         	movff	ExecuteLinkAdr@channelMask,EnableChannels@channelMask
 18481  003782  C074  F06D         	movff	ExecuteLinkAdr@channelMask+1,EnableChannels@channelMask+1
 18482  003786  C076  FFD9         	movff	ExecuteLinkAdr@redundancy,fsr2l
 18483  00378A  C077  FFDA         	movff	ExecuteLinkAdr@redundancy+1,fsr2h
 18484  00378E  0100               	movlb	0	; () banked
 18485  003790  38DF               	swapf	223,w,c
 18486  003792  0B07               	andlw	7
 18487  003794  6F6E               	movwf	EnableChannels@channelMaskCntl& (0+255),b
 18488  003796  EC4B  F049         	call	_EnableChannels	;wreg free
 18489                           
 18490                           ;lorawan_eu.c: 647: UpdateTxPower (txPower);
 18491  00379A  0100               	movlb	0	; () banked
 18492  00379C  5175               	movf	ExecuteLinkAdr@txPower& (0+255),w,b
 18493  00379E  EC5F  F04A         	call	_UpdateTxPower
 18494                           
 18495                           ;lorawan_eu.c: 648: loRa.macStatus.txPowerModified = 1;
 18496  0037A2  0102               	movlb	2	; () banked
 18497  0037A4  890D               	bsf	(_loRa+3)& (0+255),4,b
 18498                           
 18499                           ; BSR set to: 2
 18500                           ;lorawan_eu.c: 649: UpdateCurrentDataRate (dataRate);
 18501  0037A6  0100               	movlb	0	; () banked
 18502  0037A8  5178               	movf	ExecuteLinkAdr@dataRate& (0+255),w,b
 18503  0037AA  EC64  F04A         	call	_UpdateCurrentDataRate
 18504                           
 18505                           ;lorawan_eu.c: 651: if (redundancy->nbRep == 0)
 18506  0037AE  C076  FFD9         	movff	ExecuteLinkAdr@redundancy,fsr2l
 18507  0037B2  C077  FFDA         	movff	ExecuteLinkAdr@redundancy+1,fsr2h
 18508  0037B6  0100               	movlb	0	; () banked
 18509  0037B8  50DF               	movf	223,w,c
 18510  0037BA  0B0F               	andlw	15
 18511  0037BC  0900               	iorlw	0
 18512  0037BE  A4D8               	btfss	status,2,c
 18513  0037C0  D002               	goto	l1947
 18514                           
 18515                           ; BSR set to: 0
 18516                           ;lorawan_eu.c: 652: {
 18517                           ;lorawan_eu.c: 653: loRa.maxRepetitionsUnconfirmedUplink = 0;
 18518  0037C2  0E00               	movlw	0
 18519  0037C4  D009               	goto	L10
 18520  0037C6                     l1947:
 18521                           
 18522                           ;lorawan_eu.c: 655: else
 18523                           ;lorawan_eu.c: 656: {
 18524                           ;lorawan_eu.c: 657: loRa.maxRepetitionsUnconfirmedUplink = redundancy->nbRep - 1;
 18525                           
 18526                           ; BSR set to: 2
 18527  0037C6  C076  FFD9         	movff	ExecuteLinkAdr@redundancy,fsr2l
 18528  0037CA  C077  FFDA         	movff	ExecuteLinkAdr@redundancy+1,fsr2h
 18529  0037CE  0100               	movlb	0	; () banked
 18530  0037D0  50DF               	movf	223,w,c
 18531  0037D2  0B0F               	andlw	15
 18532  0037D4  6F71               	movwf	??_ExecuteLinkAdr& (0+255),b
 18533  0037D6  0571               	decf	??_ExecuteLinkAdr& (0+255),w,b
 18534  0037D8                     L10:
 18535  0037D8  0102               	movlb	2	; () banked
 18536  0037DA  6FE0               	movwf	(_loRa+214)& (0+255),b
 18537                           
 18538                           ; BSR set to: 2
 18539                           ;lorawan_eu.c: 658: }
 18540                           ;lorawan_eu.c: 659: loRa.macStatus.nbRepModified = 1;
 18541                           
 18542                           ; BSR set to: 2
 18543  0037DC  8B0D               	bsf	(_loRa+3)& (0+255),5,b
 18544                           
 18545                           ; BSR set to: 2
 18546                           ;lorawan_eu.c: 660: }
 18547                           ;lorawan_eu.c: 661: }
 18548  0037DE  D045               	goto	l1949
 18549  0037E0                     l1942:
 18550                           
 18551                           ; BSR set to: 2
 18552                           ;lorawan_eu.c: 662: else
 18553                           ;lorawan_eu.c: 663: {
 18554                           ;lorawan_eu.c: 664: loRa.macCommands[loRa.crtMacCmdIndex].channelMaskAck = 0;
 18555                           
 18556                           ; BSR set to: 2
 18557  0037E0  51B1               	movf	(_loRa+167)& (0+255),w,b
 18558  0037E2  0D02               	mullw	2
 18559  0037E4  0E0A               	movlw	low _loRa
 18560  0037E6  0100               	movlb	0	; () banked
 18561  0037E8  6F71               	movwf	??_ExecuteLinkAdr& (0+255),b
 18562  0037EA  0E02               	movlw	high _loRa
 18563  0037EC  6F72               	movwf	(??_ExecuteLinkAdr+1)& (0+255),b
 18564  0037EE  0EA8               	movlw	168
 18565  0037F0  2771               	addwf	??_ExecuteLinkAdr& (0+255),f,b
 18566  0037F2  0E00               	movlw	0
 18567  0037F4  2372               	addwfc	(??_ExecuteLinkAdr+1)& (0+255),f,b
 18568  0037F6  50F3               	movf	prodl,w,c
 18569  0037F8  2771               	addwf	??_ExecuteLinkAdr& (0+255),f,b
 18570  0037FA  50F4               	movf	prodh,w,c
 18571  0037FC  2372               	addwfc	(??_ExecuteLinkAdr+1)& (0+255),f,b
 18572  0037FE  0E01               	movlw	1
 18573  003800  2571               	addwf	??_ExecuteLinkAdr& (0+255),w,b
 18574  003802  6ED9               	movwf	fsr2l,c
 18575  003804  0E00               	movlw	0
 18576  003806  2172               	addwfc	(??_ExecuteLinkAdr+1)& (0+255),w,b
 18577  003808  6EDA               	movwf	fsr2h,c
 18578  00380A  0102               	movlb	2	; () banked
 18579  00380C  90DF               	bcf	indf2,0,c
 18580                           
 18581                           ;lorawan_eu.c: 665: loRa.macCommands[loRa.crtMacCmdIndex].dataRateAck = 0;
 18582  00380E  51B1               	movf	(_loRa+167)& (0+255),w,b
 18583  003810  0D02               	mullw	2
 18584  003812  0E0A               	movlw	low _loRa
 18585  003814  0100               	movlb	0	; () banked
 18586  003816  6F71               	movwf	??_ExecuteLinkAdr& (0+255),b
 18587  003818  0E02               	movlw	high _loRa
 18588  00381A  6F72               	movwf	(??_ExecuteLinkAdr+1)& (0+255),b
 18589  00381C  0EA8               	movlw	168
 18590  00381E  2771               	addwf	??_ExecuteLinkAdr& (0+255),f,b
 18591  003820  0E00               	movlw	0
 18592  003822  2372               	addwfc	(??_ExecuteLinkAdr+1)& (0+255),f,b
 18593  003824  50F3               	movf	prodl,w,c
 18594  003826  2771               	addwf	??_ExecuteLinkAdr& (0+255),f,b
 18595  003828  50F4               	movf	prodh,w,c
 18596  00382A  2372               	addwfc	(??_ExecuteLinkAdr+1)& (0+255),f,b
 18597  00382C  0E01               	movlw	1
 18598  00382E  2571               	addwf	??_ExecuteLinkAdr& (0+255),w,b
 18599  003830  6ED9               	movwf	fsr2l,c
 18600  003832  0E00               	movlw	0
 18601  003834  2172               	addwfc	(??_ExecuteLinkAdr+1)& (0+255),w,b
 18602  003836  6EDA               	movwf	fsr2h,c
 18603  003838  0102               	movlb	2	; () banked
 18604  00383A  92DF               	bcf	indf2,1,c
 18605                           
 18606                           ;lorawan_eu.c: 666: loRa.macCommands[loRa.crtMacCmdIndex].powerAck = 0;
 18607  00383C  51B1               	movf	(_loRa+167)& (0+255),w,b
 18608  00383E  0D02               	mullw	2
 18609  003840  0E0A               	movlw	low _loRa
 18610  003842  0100               	movlb	0	; () banked
 18611  003844  6F71               	movwf	??_ExecuteLinkAdr& (0+255),b
 18612  003846  0E02               	movlw	high _loRa
 18613  003848  6F72               	movwf	(??_ExecuteLinkAdr+1)& (0+255),b
 18614  00384A  0EA8               	movlw	168
 18615  00384C  2771               	addwf	??_ExecuteLinkAdr& (0+255),f,b
 18616  00384E  0E00               	movlw	0
 18617  003850  2372               	addwfc	(??_ExecuteLinkAdr+1)& (0+255),f,b
 18618  003852  50F3               	movf	prodl,w,c
 18619  003854  2771               	addwf	??_ExecuteLinkAdr& (0+255),f,b
 18620  003856  50F4               	movf	prodh,w,c
 18621  003858  2372               	addwfc	(??_ExecuteLinkAdr+1)& (0+255),f,b
 18622  00385A  0E01               	movlw	1
 18623  00385C  2571               	addwf	??_ExecuteLinkAdr& (0+255),w,b
 18624  00385E  6ED9               	movwf	fsr2l,c
 18625  003860  0E00               	movlw	0
 18626  003862  2172               	addwfc	(??_ExecuteLinkAdr+1)& (0+255),w,b
 18627  003864  6EDA               	movwf	fsr2h,c
 18628  003866  0102               	movlb	2	; () banked
 18629  003868  94DF               	bcf	indf2,2,c
 18630  00386A                     l1949:
 18631                           
 18632                           ; BSR set to: 2
 18633                           ;lorawan_eu.c: 667: }
 18634                           ;lorawan_eu.c: 669: return ptr;
 18635                           
 18636                           ; BSR set to: 2
 18637  00386A  C06F  F06F         	movff	ExecuteLinkAdr@ptr,?_ExecuteLinkAdr
 18638  00386E  C070  F070         	movff	ExecuteLinkAdr@ptr+1,?_ExecuteLinkAdr+1
 18639  003872  0012               	return	
 18640  003874                     __end_of_ExecuteLinkAdr:
 18641                           	opt stack 0
 18642                           tosu	equ	0xFFF
 18643                           tosh	equ	0xFFE
 18644                           tosl	equ	0xFFD
 18645                           pclath	equ	0xFFA
 18646                           tblptru	equ	0xFF8
 18647                           tblptrh	equ	0xFF7
 18648                           tblptrl	equ	0xFF6
 18649                           tablat	equ	0xFF5
 18650                           prodh	equ	0xFF4
 18651                           prodl	equ	0xFF3
 18652                           intcon	equ	0xFF2
 18653                           intcon2	equ	0xFF1
 18654                           intcon3	equ	0xFF0
 18655                           indf0	equ	0xFEF
 18656                           postinc0	equ	0xFEE
 18657                           fsr0h	equ	0xFEA
 18658                           fsr0l	equ	0xFE9
 18659                           wreg	equ	0xFE8
 18660                           postinc1	equ	0xFE6
 18661                           postdec1	equ	0xFE5
 18662                           plusw1	equ	0xFE3
 18663                           fsr1h	equ	0xFE2
 18664                           fsr1l	equ	0xFE1
 18665                           indf2	equ	0xFDF
 18666                           postinc2	equ	0xFDE
 18667                           postdec2	equ	0xFDD
 18668                           plusw2	equ	0xFDB
 18669                           fsr2h	equ	0xFDA
 18670                           fsr2l	equ	0xFD9
 18671                           status	equ	0xFD8
 18672                           
 18673 ;; *************** function _ValidateTxPower *****************
 18674 ;; Defined at:
 18675 ;;		line 582 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 18676 ;; Parameters:    Size  Location     Type
 18677 ;;  txPowerNew      1    wreg     unsigned char 
 18678 ;; Auto vars:     Size  Location     Type
 18679 ;;  txPowerNew      1    1[BANK0 ] unsigned char 
 18680 ;;  result          1    0[BANK0 ] enum E7249
 18681 ;; Return value:  Size  Location     Type
 18682 ;;                  1    wreg      enum E7190
 18683 ;; Registers used:
 18684 ;;		wreg, status,2, status,0
 18685 ;; Tracked objects:
 18686 ;;		On entry : 0/0
 18687 ;;		On exit  : 0/0
 18688 ;;		Unchanged: 0/0
 18689 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18690 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18691 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18692 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18693 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18694 ;;Total ram usage:        2 bytes
 18695 ;; Hardware stack levels used:    1
 18696 ;; Hardware stack levels required when called:    7
 18697 ;; This function calls:
 18698 ;;		Nothing
 18699 ;; This function is called by:
 18700 ;;		_ExecuteLinkAdr
 18701 ;;		_LORAWAN_SetTxPower
 18702 ;; This function uses a non-reentrant model
 18703 ;;
 18704                           
 18705                           	psect	text87
 18706  008ED8                     __ptext87:
 18707                           	opt stack 0
 18708  008ED8                     _ValidateTxPower:
 18709                           	opt stack 17
 18710                           
 18711                           ; BSR set to: 2
 18712                           ;incstack = 0
 18713                           ;ValidateTxPower@txPowerNew stored from wreg
 18714  008ED8  0100               	movlb	0	; () banked
 18715  008EDA  6F61               	movwf	ValidateTxPower@txPowerNew& (0+255),b
 18716                           
 18717                           ;lorawan_eu.c: 584: LorawanError_t result = OK;
 18718  008EDC  0E00               	movlw	0
 18719  008EDE  0100               	movlb	0	; () banked
 18720  008EE0  6F60               	movwf	ValidateTxPower@result& (0+255),b
 18721                           
 18722                           ; BSR set to: 0
 18723                           ;lorawan_eu.c: 586: if (((ISM_EU868 == loRa.ismBand) && (0 == txPowerNew)) || (txPowerNe
      +                          w > 5))
 18724  008EE2  0102               	movlb	2	; () banked
 18725  008EE4  51AE               	movf	(_loRa+164)& (0+255),w,b
 18726  008EE6  A4D8               	btfss	status,2,c
 18727  008EE8  D004               	goto	u9240
 18728                           
 18729                           ; BSR set to: 2
 18730  008EEA  0100               	movlb	0	; () banked
 18731  008EEC  5161               	movf	ValidateTxPower@txPowerNew& (0+255),w,b
 18732  008EEE  B4D8               	btfsc	status,2,c
 18733  008EF0  D004               	goto	u9250
 18734  008EF2                     u9240:
 18735                           
 18736                           ; BSR set to: 0
 18737  008EF2  0E05               	movlw	5
 18738  008EF4  0100               	movlb	0	; () banked
 18739  008EF6  6561               	cpfsgt	ValidateTxPower@txPowerNew& (0+255),b
 18740  008EF8  D002               	goto	l1929
 18741  008EFA                     u9250:
 18742                           
 18743                           ; BSR set to: 0
 18744                           ;lorawan_eu.c: 587: {
 18745                           ;lorawan_eu.c: 588: result = INVALID_PARAMETER;
 18746                           
 18747                           ; BSR set to: 0
 18748  008EFA  0E03               	movlw	3
 18749  008EFC  6F60               	movwf	ValidateTxPower@result& (0+255),b
 18750  008EFE                     l1929:
 18751                           
 18752                           ; BSR set to: 0
 18753                           ;lorawan_eu.c: 589: }
 18754                           ;lorawan_eu.c: 591: return result;
 18755  008EFE  5160               	movf	ValidateTxPower@result& (0+255),w,b
 18756  008F00  0012               	return	
 18757  008F02                     __end_of_ValidateTxPower:
 18758                           	opt stack 0
 18759                           tosu	equ	0xFFF
 18760                           tosh	equ	0xFFE
 18761                           tosl	equ	0xFFD
 18762                           pclath	equ	0xFFA
 18763                           tblptru	equ	0xFF8
 18764                           tblptrh	equ	0xFF7
 18765                           tblptrl	equ	0xFF6
 18766                           tablat	equ	0xFF5
 18767                           prodh	equ	0xFF4
 18768                           prodl	equ	0xFF3
 18769                           intcon	equ	0xFF2
 18770                           intcon2	equ	0xFF1
 18771                           intcon3	equ	0xFF0
 18772                           indf0	equ	0xFEF
 18773                           postinc0	equ	0xFEE
 18774                           fsr0h	equ	0xFEA
 18775                           fsr0l	equ	0xFE9
 18776                           wreg	equ	0xFE8
 18777                           postinc1	equ	0xFE6
 18778                           postdec1	equ	0xFE5
 18779                           plusw1	equ	0xFE3
 18780                           fsr1h	equ	0xFE2
 18781                           fsr1l	equ	0xFE1
 18782                           indf2	equ	0xFDF
 18783                           postinc2	equ	0xFDE
 18784                           postdec2	equ	0xFDD
 18785                           plusw2	equ	0xFDB
 18786                           fsr2h	equ	0xFDA
 18787                           fsr2l	equ	0xFD9
 18788                           status	equ	0xFD8
 18789                           
 18790 ;; *************** function _ValidateDataRate *****************
 18791 ;; Defined at:
 18792 ;;		line 570 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 18793 ;; Parameters:    Size  Location     Type
 18794 ;;  dataRate        1    wreg     unsigned char 
 18795 ;; Auto vars:     Size  Location     Type
 18796 ;;  dataRate        1    0[BANK0 ] unsigned char 
 18797 ;;  result          1    1[BANK0 ] enum E7249
 18798 ;; Return value:  Size  Location     Type
 18799 ;;                  1    wreg      enum E7190
 18800 ;; Registers used:
 18801 ;;		wreg, status,2, status,0
 18802 ;; Tracked objects:
 18803 ;;		On entry : 0/0
 18804 ;;		On exit  : 0/0
 18805 ;;		Unchanged: 0/0
 18806 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18807 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18808 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18809 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18810 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18811 ;;Total ram usage:        2 bytes
 18812 ;; Hardware stack levels used:    1
 18813 ;; Hardware stack levels required when called:    7
 18814 ;; This function calls:
 18815 ;;		Nothing
 18816 ;; This function is called by:
 18817 ;;		_ExecuteLinkAdr
 18818 ;;		_ExecuteRxParamSetupReq
 18819 ;;		_ValidateDataRange
 18820 ;;		_LORAWAN_SetCurrentDataRate
 18821 ;;		_LORAWAN_SetReceiveWindow2Parameters
 18822 ;; This function uses a non-reentrant model
 18823 ;;
 18824                           
 18825                           	psect	text88
 18826  009332                     __ptext88:
 18827                           	opt stack 0
 18828  009332                     _ValidateDataRate:
 18829                           	opt stack 17
 18830                           
 18831                           ; BSR set to: 0
 18832                           ;incstack = 0
 18833                           ;ValidateDataRate@dataRate stored from wreg
 18834  009332  0100               	movlb	0	; () banked
 18835  009334  6F60               	movwf	ValidateDataRate@dataRate& (0+255),b
 18836                           
 18837                           ;lorawan_eu.c: 572: LorawanError_t result = OK;
 18838  009336  0E00               	movlw	0
 18839  009338  0100               	movlb	0	; () banked
 18840  00933A  6F61               	movwf	ValidateDataRate@result& (0+255),b
 18841                           
 18842                           ; BSR set to: 0
 18843                           ;lorawan_eu.c: 574: if ( dataRate > 7 )
 18844  00933C  0E07               	movlw	7
 18845  00933E  6560               	cpfsgt	ValidateDataRate@dataRate& (0+255),b
 18846  009340  D002               	goto	l1925
 18847                           
 18848                           ; BSR set to: 0
 18849                           ;lorawan_eu.c: 575: {
 18850                           ;lorawan_eu.c: 576: result = INVALID_PARAMETER;
 18851  009342  0E03               	movlw	3
 18852  009344  6F61               	movwf	ValidateDataRate@result& (0+255),b
 18853  009346                     l1925:
 18854                           
 18855                           ; BSR set to: 0
 18856                           ;lorawan_eu.c: 577: }
 18857                           ;lorawan_eu.c: 579: return result;
 18858  009346  5161               	movf	ValidateDataRate@result& (0+255),w,b
 18859  009348  0012               	return	
 18860  00934A                     __end_of_ValidateDataRate:
 18861                           	opt stack 0
 18862                           tosu	equ	0xFFF
 18863                           tosh	equ	0xFFE
 18864                           tosl	equ	0xFFD
 18865                           pclath	equ	0xFFA
 18866                           tblptru	equ	0xFF8
 18867                           tblptrh	equ	0xFF7
 18868                           tblptrl	equ	0xFF6
 18869                           tablat	equ	0xFF5
 18870                           prodh	equ	0xFF4
 18871                           prodl	equ	0xFF3
 18872                           intcon	equ	0xFF2
 18873                           intcon2	equ	0xFF1
 18874                           intcon3	equ	0xFF0
 18875                           indf0	equ	0xFEF
 18876                           postinc0	equ	0xFEE
 18877                           fsr0h	equ	0xFEA
 18878                           fsr0l	equ	0xFE9
 18879                           wreg	equ	0xFE8
 18880                           postinc1	equ	0xFE6
 18881                           postdec1	equ	0xFE5
 18882                           plusw1	equ	0xFE3
 18883                           fsr1h	equ	0xFE2
 18884                           fsr1l	equ	0xFE1
 18885                           indf2	equ	0xFDF
 18886                           postinc2	equ	0xFDE
 18887                           postdec2	equ	0xFDD
 18888                           plusw2	equ	0xFDB
 18889                           fsr2h	equ	0xFDA
 18890                           fsr2l	equ	0xFD9
 18891                           status	equ	0xFD8
 18892                           
 18893 ;; *************** function _ValidateChannelMaskCntl *****************
 18894 ;; Defined at:
 18895 ;;		line 1137 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 18896 ;; Parameters:    Size  Location     Type
 18897 ;;  channelMaskC    1    wreg     unsigned char 
 18898 ;; Auto vars:     Size  Location     Type
 18899 ;;  channelMaskC    1    1[BANK0 ] unsigned char 
 18900 ;;  result          1    0[BANK0 ] enum E7249
 18901 ;; Return value:  Size  Location     Type
 18902 ;;                  1    wreg      enum E7249
 18903 ;; Registers used:
 18904 ;;		wreg, status,2, status,0
 18905 ;; Tracked objects:
 18906 ;;		On entry : 0/0
 18907 ;;		On exit  : 0/0
 18908 ;;		Unchanged: 0/0
 18909 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18910 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18911 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18912 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18913 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18914 ;;Total ram usage:        2 bytes
 18915 ;; Hardware stack levels used:    1
 18916 ;; Hardware stack levels required when called:    7
 18917 ;; This function calls:
 18918 ;;		Nothing
 18919 ;; This function is called by:
 18920 ;;		_ExecuteLinkAdr
 18921 ;; This function uses a non-reentrant model
 18922 ;;
 18923                           
 18924                           	psect	text89
 18925  00913C                     __ptext89:
 18926                           	opt stack 0
 18927  00913C                     _ValidateChannelMaskCntl:
 18928                           	opt stack 17
 18929                           
 18930                           ; BSR set to: 0
 18931                           ;incstack = 0
 18932                           ;ValidateChannelMaskCntl@channelMaskCntl stored from wreg
 18933  00913C  0100               	movlb	0	; () banked
 18934  00913E  6F61               	movwf	ValidateChannelMaskCntl@channelMaskCntl& (0+255),b
 18935                           
 18936                           ;lorawan_eu.c: 1139: LorawanError_t result = OK;
 18937  009140  0E00               	movlw	0
 18938  009142  0100               	movlb	0	; () banked
 18939  009144  6F60               	movwf	ValidateChannelMaskCntl@result& (0+255),b
 18940                           
 18941                           ; BSR set to: 0
 18942                           ;lorawan_eu.c: 1141: if ( (channelMaskCntl != 0) && (channelMaskCntl != 6) )
 18943  009146  5161               	movf	ValidateChannelMaskCntl@channelMaskCntl& (0+255),w,b
 18944  009148  B4D8               	btfsc	status,2,c
 18945  00914A  D006               	goto	l2096
 18946                           
 18947                           ; BSR set to: 0
 18948  00914C  0E06               	movlw	6
 18949  00914E  1961               	xorwf	ValidateChannelMaskCntl@channelMaskCntl& (0+255),w,b
 18950  009150  B4D8               	btfsc	status,2,c
 18951  009152  D002               	goto	l2096
 18952                           
 18953                           ; BSR set to: 0
 18954                           ;lorawan_eu.c: 1142: {
 18955                           ;lorawan_eu.c: 1143: result = INVALID_PARAMETER;
 18956  009154  0E03               	movlw	3
 18957  009156  6F60               	movwf	ValidateChannelMaskCntl@result& (0+255),b
 18958  009158                     l2096:
 18959                           
 18960                           ; BSR set to: 0
 18961                           ;lorawan_eu.c: 1144: }
 18962                           ;lorawan_eu.c: 1146: return result;
 18963  009158  5160               	movf	ValidateChannelMaskCntl@result& (0+255),w,b
 18964  00915A  0012               	return	
 18965  00915C                     __end_of_ValidateChannelMaskCntl:
 18966                           	opt stack 0
 18967                           tosu	equ	0xFFF
 18968                           tosh	equ	0xFFE
 18969                           tosl	equ	0xFFD
 18970                           pclath	equ	0xFFA
 18971                           tblptru	equ	0xFF8
 18972                           tblptrh	equ	0xFF7
 18973                           tblptrl	equ	0xFF6
 18974                           tablat	equ	0xFF5
 18975                           prodh	equ	0xFF4
 18976                           prodl	equ	0xFF3
 18977                           intcon	equ	0xFF2
 18978                           intcon2	equ	0xFF1
 18979                           intcon3	equ	0xFF0
 18980                           indf0	equ	0xFEF
 18981                           postinc0	equ	0xFEE
 18982                           fsr0h	equ	0xFEA
 18983                           fsr0l	equ	0xFE9
 18984                           wreg	equ	0xFE8
 18985                           postinc1	equ	0xFE6
 18986                           postdec1	equ	0xFE5
 18987                           plusw1	equ	0xFE3
 18988                           fsr1h	equ	0xFE2
 18989                           fsr1l	equ	0xFE1
 18990                           indf2	equ	0xFDF
 18991                           postinc2	equ	0xFDE
 18992                           postdec2	equ	0xFDD
 18993                           plusw2	equ	0xFDB
 18994                           fsr2h	equ	0xFDA
 18995                           fsr2l	equ	0xFD9
 18996                           status	equ	0xFD8
 18997                           
 18998 ;; *************** function _ValidateChannelMask *****************
 18999 ;; Defined at:
 19000 ;;		line 1166 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 19001 ;; Parameters:    Size  Location     Type
 19002 ;;  channelMask     2    0[BANK0 ] unsigned int 
 19003 ;; Auto vars:     Size  Location     Type
 19004 ;;  i               1    4[BANK0 ] unsigned char 
 19005 ;; Return value:  Size  Location     Type
 19006 ;;                  1    wreg      enum E7249
 19007 ;; Registers used:
 19008 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 19009 ;; Tracked objects:
 19010 ;;		On entry : 0/0
 19011 ;;		On exit  : 0/0
 19012 ;;		Unchanged: 0/0
 19013 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19014 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19015 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19016 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19017 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19018 ;;Total ram usage:        5 bytes
 19019 ;; Hardware stack levels used:    1
 19020 ;; Hardware stack levels required when called:    7
 19021 ;; This function calls:
 19022 ;;		Nothing
 19023 ;; This function is called by:
 19024 ;;		_ExecuteLinkAdr
 19025 ;; This function uses a non-reentrant model
 19026 ;;
 19027                           
 19028                           	psect	text90
 19029  0082CE                     __ptext90:
 19030                           	opt stack 0
 19031  0082CE                     _ValidateChannelMask:
 19032                           	opt stack 17
 19033                           
 19034                           ;lorawan_eu.c: 1168: uint8_t i = 0;
 19035                           
 19036                           ; BSR set to: 0
 19037                           ;incstack = 0
 19038  0082CE  0E00               	movlw	0
 19039  0082D0  0100               	movlb	0	; () banked
 19040  0082D2  6F64               	movwf	ValidateChannelMask@i& (0+255),b
 19041                           
 19042                           ; BSR set to: 0
 19043                           ;lorawan_eu.c: 1170: if(channelMask != 0x0000U)
 19044  0082D4  5160               	movf	ValidateChannelMask@channelMask& (0+255),w,b
 19045  0082D6  1161               	iorwf	(ValidateChannelMask@channelMask+1)& (0+255),w,b
 19046  0082D8  B4D8               	btfsc	status,2,c
 19047  0082DA  D026               	goto	l2109
 19048                           
 19049                           ; BSR set to: 0
 19050                           ;lorawan_eu.c: 1171: {
 19051                           ;lorawan_eu.c: 1172: for (i = 0; i < 16; i++)
 19052  0082DC  0E00               	movlw	0
 19053  0082DE  6F64               	movwf	ValidateChannelMask@i& (0+255),b
 19054  0082E0                     l10167:
 19055                           
 19056                           ; BSR set to: 0
 19057  0082E0  0E0F               	movlw	15
 19058  0082E2  6564               	cpfsgt	ValidateChannelMask@i& (0+255),b
 19059  0082E4  D001               	goto	l2110
 19060  0082E6  D01E               	goto	u9930
 19061  0082E8                     l2110:
 19062                           
 19063                           ; BSR set to: 0
 19064                           ;lorawan_eu.c: 1173: {
 19065                           ;lorawan_eu.c: 1174: if ( ( (channelMask & (1 << (0))) == (1 << (0))) && ( (Channels[i].
      +                          parametersDefined & (0X01 | 0X02 | 0x04) ) != (0X01 | 0X02 | 0x04) ) )
 19066  0082E8  A160               	btfss	ValidateChannelMask@channelMask& (0+255),0,b
 19067  0082EA  D013               	goto	l2112
 19068                           
 19069                           ; BSR set to: 0
 19070  0082EC  5164               	movf	ValidateChannelMask@i& (0+255),w,b
 19071  0082EE  0D0E               	mullw	14
 19072  0082F0  0E0D               	movlw	13
 19073  0082F2  26F3               	addwf	prodl,f,c
 19074  0082F4  0E00               	movlw	0
 19075  0082F6  22F4               	addwfc	prodh,f,c
 19076  0082F8  0E00               	movlw	low _Channels
 19077  0082FA  24F3               	addwf	prodl,w,c
 19078  0082FC  6ED9               	movwf	fsr2l,c
 19079  0082FE  0E04               	movlw	high _Channels
 19080  008300  20F4               	addwfc	prodh,w,c
 19081  008302  6EDA               	movwf	fsr2h,c
 19082  008304  50DF               	movf	indf2,w,c
 19083  008306  0B07               	andlw	7
 19084  008308  0A07               	xorlw	7
 19085  00830A  B4D8               	btfsc	status,2,c
 19086  00830C  D002               	goto	l2112
 19087                           
 19088                           ; BSR set to: 0
 19089                           ;lorawan_eu.c: 1175: {
 19090                           ;lorawan_eu.c: 1176: return INVALID_PARAMETER;
 19091  00830E  0E03               	movlw	3
 19092                           
 19093                           ; BSR set to: 0
 19094  008310  0012               	return	
 19095  008312                     l2112:
 19096                           
 19097                           ; BSR set to: 0
 19098                           ;lorawan_eu.c: 1178: else
 19099                           ;lorawan_eu.c: 1179: {
 19100                           ;lorawan_eu.c: 1180: channelMask = channelMask >> (1);
 19101                           
 19102                           ; BSR set to: 0
 19103  008312  90D8               	bcf	status,0,c
 19104  008314  3161               	rrcf	(ValidateChannelMask@channelMask+1)& (0+255),w,b
 19105  008316  6F62               	movwf	??_ValidateChannelMask& (0+255),b
 19106  008318  3160               	rrcf	ValidateChannelMask@channelMask& (0+255),w,b
 19107  00831A  6F60               	movwf	ValidateChannelMask@channelMask& (0+255),b
 19108  00831C  C062  F061         	movff	??_ValidateChannelMask,ValidateChannelMask@channelMask+1
 19109                           
 19110                           ; BSR set to: 0
 19111                           
 19112                           ; BSR set to: 0
 19113  008320  2B64               	incf	ValidateChannelMask@i& (0+255),f,b
 19114  008322  D7DE               	goto	l10167
 19115  008324                     u9930:
 19116                           
 19117                           ; BSR set to: 0
 19118                           ;lorawan_eu.c: 1181: }
 19119                           ;lorawan_eu.c: 1182: }
 19120                           ;lorawan_eu.c: 1184: return OK;
 19121                           
 19122                           ; BSR set to: 0
 19123  008324  0E00               	movlw	0
 19124                           
 19125                           ; BSR set to: 0
 19126                           ;lorawan_eu.c: 1185: }
 19127                           
 19128                           ; BSR set to: 0
 19129  008326  0012               	return	
 19130  008328                     l2109:
 19131                           
 19132                           ; BSR set to: 0
 19133                           ;lorawan_eu.c: 1186: else
 19134                           ;lorawan_eu.c: 1187: {
 19135                           ;lorawan_eu.c: 1189: return INVALID_PARAMETER;
 19136                           
 19137                           ; BSR set to: 0
 19138  008328  0E03               	movlw	3
 19139                           
 19140                           ; BSR set to: 0
 19141  00832A  0012               	return	
 19142  00832C                     __end_of_ValidateChannelMask:
 19143                           	opt stack 0
 19144                           tosu	equ	0xFFF
 19145                           tosh	equ	0xFFE
 19146                           tosl	equ	0xFFD
 19147                           pclath	equ	0xFFA
 19148                           tblptru	equ	0xFF8
 19149                           tblptrh	equ	0xFF7
 19150                           tblptrl	equ	0xFF6
 19151                           tablat	equ	0xFF5
 19152                           prodh	equ	0xFF4
 19153                           prodl	equ	0xFF3
 19154                           intcon	equ	0xFF2
 19155                           intcon2	equ	0xFF1
 19156                           intcon3	equ	0xFF0
 19157                           indf0	equ	0xFEF
 19158                           postinc0	equ	0xFEE
 19159                           fsr0h	equ	0xFEA
 19160                           fsr0l	equ	0xFE9
 19161                           wreg	equ	0xFE8
 19162                           postinc1	equ	0xFE6
 19163                           postdec1	equ	0xFE5
 19164                           plusw1	equ	0xFE3
 19165                           fsr1h	equ	0xFE2
 19166                           fsr1l	equ	0xFE1
 19167                           indf2	equ	0xFDF
 19168                           postinc2	equ	0xFDE
 19169                           postdec2	equ	0xFDD
 19170                           plusw2	equ	0xFDB
 19171                           fsr2h	equ	0xFDA
 19172                           fsr2l	equ	0xFD9
 19173                           status	equ	0xFD8
 19174                           
 19175 ;; *************** function _UpdateTxPower *****************
 19176 ;; Defined at:
 19177 ;;		line 1029 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 19178 ;; Parameters:    Size  Location     Type
 19179 ;;  txPowerNew      1    wreg     unsigned char 
 19180 ;; Auto vars:     Size  Location     Type
 19181 ;;  txPowerNew      1    0[BANK0 ] unsigned char 
 19182 ;; Return value:  Size  Location     Type
 19183 ;;                  1    wreg      void 
 19184 ;; Registers used:
 19185 ;;		wreg
 19186 ;; Tracked objects:
 19187 ;;		On entry : 0/0
 19188 ;;		On exit  : 0/0
 19189 ;;		Unchanged: 0/0
 19190 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19191 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19192 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19193 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19194 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19195 ;;Total ram usage:        1 bytes
 19196 ;; Hardware stack levels used:    1
 19197 ;; Hardware stack levels required when called:    7
 19198 ;; This function calls:
 19199 ;;		Nothing
 19200 ;; This function is called by:
 19201 ;;		_ExecuteLinkAdr
 19202 ;;		_LORAWAN_SetTxPower
 19203 ;; This function uses a non-reentrant model
 19204 ;;
 19205                           
 19206                           	psect	text91
 19207  0094BE                     __ptext91:
 19208                           	opt stack 0
 19209  0094BE                     _UpdateTxPower:
 19210                           	opt stack 17
 19211                           
 19212                           ; BSR set to: 0
 19213                           ;incstack = 0
 19214                           ;UpdateTxPower@txPowerNew stored from wreg
 19215  0094BE  0100               	movlb	0	; () banked
 19216  0094C0  6F60               	movwf	UpdateTxPower@txPowerNew& (0+255),b
 19217                           
 19218                           ;lorawan.c: 1031: loRa.txPower = txPowerNew;
 19219  0094C2  C060  F2EB         	movff	UpdateTxPower@txPowerNew,_loRa+225
 19220  0094C6  0012               	return		;funcret
 19221  0094C8                     __end_of_UpdateTxPower:
 19222                           	opt stack 0
 19223                           tosu	equ	0xFFF
 19224                           tosh	equ	0xFFE
 19225                           tosl	equ	0xFFD
 19226                           pclath	equ	0xFFA
 19227                           tblptru	equ	0xFF8
 19228                           tblptrh	equ	0xFF7
 19229                           tblptrl	equ	0xFF6
 19230                           tablat	equ	0xFF5
 19231                           prodh	equ	0xFF4
 19232                           prodl	equ	0xFF3
 19233                           intcon	equ	0xFF2
 19234                           intcon2	equ	0xFF1
 19235                           intcon3	equ	0xFF0
 19236                           indf0	equ	0xFEF
 19237                           postinc0	equ	0xFEE
 19238                           fsr0h	equ	0xFEA
 19239                           fsr0l	equ	0xFE9
 19240                           wreg	equ	0xFE8
 19241                           postinc1	equ	0xFE6
 19242                           postdec1	equ	0xFE5
 19243                           plusw1	equ	0xFE3
 19244                           fsr1h	equ	0xFE2
 19245                           fsr1l	equ	0xFE1
 19246                           indf2	equ	0xFDF
 19247                           postinc2	equ	0xFDE
 19248                           postdec2	equ	0xFDD
 19249                           plusw2	equ	0xFDB
 19250                           fsr2h	equ	0xFDA
 19251                           fsr2l	equ	0xFD9
 19252                           status	equ	0xFD8
 19253                           
 19254 ;; *************** function _UpdateCurrentDataRate *****************
 19255 ;; Defined at:
 19256 ;;		line 1024 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 19257 ;; Parameters:    Size  Location     Type
 19258 ;;  valueNew        1    wreg     unsigned char 
 19259 ;; Auto vars:     Size  Location     Type
 19260 ;;  valueNew        1    0[BANK0 ] unsigned char 
 19261 ;; Return value:  Size  Location     Type
 19262 ;;                  1    wreg      void 
 19263 ;; Registers used:
 19264 ;;		wreg
 19265 ;; Tracked objects:
 19266 ;;		On entry : 0/0
 19267 ;;		On exit  : 0/0
 19268 ;;		Unchanged: 0/0
 19269 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19270 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19271 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19272 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19273 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19274 ;;Total ram usage:        1 bytes
 19275 ;; Hardware stack levels used:    1
 19276 ;; Hardware stack levels required when called:    7
 19277 ;; This function calls:
 19278 ;;		Nothing
 19279 ;; This function is called by:
 19280 ;;		_ExecuteLinkAdr
 19281 ;;		_LORAWAN_SetCurrentDataRate
 19282 ;; This function uses a non-reentrant model
 19283 ;;
 19284                           
 19285                           	psect	text92
 19286  0094C8                     __ptext92:
 19287                           	opt stack 0
 19288  0094C8                     _UpdateCurrentDataRate:
 19289                           	opt stack 17
 19290                           
 19291                           ;incstack = 0
 19292                           ;UpdateCurrentDataRate@valueNew stored from wreg
 19293  0094C8  0100               	movlb	0	; () banked
 19294  0094CA  6F60               	movwf	UpdateCurrentDataRate@valueNew& (0+255),b
 19295                           
 19296                           ;lorawan.c: 1026: loRa.currentDataRate = valueNew;
 19297  0094CC  C060  F2E9         	movff	UpdateCurrentDataRate@valueNew,_loRa+223
 19298  0094D0  0012               	return		;funcret
 19299  0094D2                     __end_of_UpdateCurrentDataRate:
 19300                           	opt stack 0
 19301                           tosu	equ	0xFFF
 19302                           tosh	equ	0xFFE
 19303                           tosl	equ	0xFFD
 19304                           pclath	equ	0xFFA
 19305                           tblptru	equ	0xFF8
 19306                           tblptrh	equ	0xFF7
 19307                           tblptrl	equ	0xFF6
 19308                           tablat	equ	0xFF5
 19309                           prodh	equ	0xFF4
 19310                           prodl	equ	0xFF3
 19311                           intcon	equ	0xFF2
 19312                           intcon2	equ	0xFF1
 19313                           intcon3	equ	0xFF0
 19314                           indf0	equ	0xFEF
 19315                           postinc0	equ	0xFEE
 19316                           fsr0h	equ	0xFEA
 19317                           fsr0l	equ	0xFE9
 19318                           wreg	equ	0xFE8
 19319                           postinc1	equ	0xFE6
 19320                           postdec1	equ	0xFE5
 19321                           plusw1	equ	0xFE3
 19322                           fsr1h	equ	0xFE2
 19323                           fsr1l	equ	0xFE1
 19324                           indf2	equ	0xFDF
 19325                           postinc2	equ	0xFDE
 19326                           postdec2	equ	0xFDD
 19327                           plusw2	equ	0xFDB
 19328                           fsr2h	equ	0xFDA
 19329                           fsr2l	equ	0xFD9
 19330                           status	equ	0xFD8
 19331                           
 19332 ;; *************** function _EnableChannels *****************
 19333 ;; Defined at:
 19334 ;;		line 1149 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 19335 ;; Parameters:    Size  Location     Type
 19336 ;;  channelMask     2   12[BANK0 ] unsigned int 
 19337 ;;  channelMaskC    1   14[BANK0 ] unsigned char 
 19338 ;; Auto vars:     Size  Location     Type
 19339 ;;		None
 19340 ;; Return value:  Size  Location     Type
 19341 ;;                  1    wreg      void 
 19342 ;; Registers used:
 19343 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 19344 ;; Tracked objects:
 19345 ;;		On entry : 0/0
 19346 ;;		On exit  : 0/0
 19347 ;;		Unchanged: 0/0
 19348 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19349 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19350 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19351 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19352 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19353 ;;Total ram usage:        3 bytes
 19354 ;; Hardware stack levels used:    1
 19355 ;; Hardware stack levels required when called:    9
 19356 ;; This function calls:
 19357 ;;		_EnableChannels1
 19358 ;; This function is called by:
 19359 ;;		_ExecuteLinkAdr
 19360 ;; This function uses a non-reentrant model
 19361 ;;
 19362                           
 19363                           	psect	text93
 19364  009296                     __ptext93:
 19365                           	opt stack 0
 19366  009296                     _EnableChannels:
 19367                           	opt stack 15
 19368                           
 19369                           ;lorawan_eu.c: 1151: EnableChannels1 (channelMask, channelMaskCntl, 0, 16);
 19370                           
 19371                           ;incstack = 0
 19372  009296  C06C  F064         	movff	EnableChannels@channelMask,EnableChannels1@channelMask
 19373  00929A  C06D  F065         	movff	EnableChannels@channelMask+1,EnableChannels1@channelMask+1
 19374  00929E  C06E  F066         	movff	EnableChannels@channelMaskCntl,EnableChannels1@channelMaskCntl
 19375  0092A2  0E00               	movlw	0
 19376  0092A4  0100               	movlb	0	; () banked
 19377  0092A6  6F67               	movwf	EnableChannels1@channelIndexMin& (0+255),b
 19378  0092A8  0E10               	movlw	16
 19379  0092AA  6F68               	movwf	EnableChannels1@channelIndexMax& (0+255),b
 19380  0092AC  ECD3  F03E         	call	_EnableChannels1	;wreg free
 19381  0092B0  0012               	return		;funcret
 19382  0092B2                     __end_of_EnableChannels:
 19383                           	opt stack 0
 19384                           tosu	equ	0xFFF
 19385                           tosh	equ	0xFFE
 19386                           tosl	equ	0xFFD
 19387                           pclath	equ	0xFFA
 19388                           tblptru	equ	0xFF8
 19389                           tblptrh	equ	0xFF7
 19390                           tblptrl	equ	0xFF6
 19391                           tablat	equ	0xFF5
 19392                           prodh	equ	0xFF4
 19393                           prodl	equ	0xFF3
 19394                           intcon	equ	0xFF2
 19395                           intcon2	equ	0xFF1
 19396                           intcon3	equ	0xFF0
 19397                           indf0	equ	0xFEF
 19398                           postinc0	equ	0xFEE
 19399                           fsr0h	equ	0xFEA
 19400                           fsr0l	equ	0xFE9
 19401                           wreg	equ	0xFE8
 19402                           postinc1	equ	0xFE6
 19403                           postdec1	equ	0xFE5
 19404                           plusw1	equ	0xFE3
 19405                           fsr1h	equ	0xFE2
 19406                           fsr1l	equ	0xFE1
 19407                           indf2	equ	0xFDF
 19408                           postinc2	equ	0xFDE
 19409                           postdec2	equ	0xFDD
 19410                           plusw2	equ	0xFDB
 19411                           fsr2h	equ	0xFDA
 19412                           fsr2l	equ	0xFD9
 19413                           status	equ	0xFD8
 19414                           
 19415 ;; *************** function _EnableChannels1 *****************
 19416 ;; Defined at:
 19417 ;;		line 1193 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 19418 ;; Parameters:    Size  Location     Type
 19419 ;;  channelMask     2    4[BANK0 ] unsigned int 
 19420 ;;  channelMaskC    1    6[BANK0 ] unsigned char 
 19421 ;;  channelIndex    1    7[BANK0 ] unsigned char 
 19422 ;;  channelIndex    1    8[BANK0 ] unsigned char 
 19423 ;; Auto vars:     Size  Location     Type
 19424 ;;  i               1   11[BANK0 ] unsigned char 
 19425 ;; Return value:  Size  Location     Type
 19426 ;;                  1    wreg      void 
 19427 ;; Registers used:
 19428 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 19429 ;; Tracked objects:
 19430 ;;		On entry : 0/0
 19431 ;;		On exit  : 0/0
 19432 ;;		Unchanged: 0/0
 19433 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19434 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19435 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19436 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19437 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19438 ;;Total ram usage:        8 bytes
 19439 ;; Hardware stack levels used:    1
 19440 ;; Hardware stack levels required when called:    8
 19441 ;; This function calls:
 19442 ;;		_UpdateChannelIdStatus
 19443 ;; This function is called by:
 19444 ;;		_EnableChannels
 19445 ;; This function uses a non-reentrant model
 19446 ;;
 19447                           
 19448                           	psect	text94
 19449  007DA6                     __ptext94:
 19450                           	opt stack 0
 19451  007DA6                     _EnableChannels1:
 19452                           	opt stack 15
 19453                           
 19454                           ;lorawan_eu.c: 1195: uint8_t i;
 19455                           ;lorawan_eu.c: 1197: if (channelMaskCntl == 6)
 19456                           
 19457                           ;incstack = 0
 19458  007DA6  0E06               	movlw	6
 19459  007DA8  0100               	movlb	0	; () banked
 19460  007DAA  1966               	xorwf	EnableChannels1@channelMaskCntl& (0+255),w,b
 19461  007DAC  A4D8               	btfss	status,2,c
 19462  007DAE  D00F               	goto	l2118
 19463                           
 19464                           ; BSR set to: 0
 19465                           ;lorawan_eu.c: 1198: {
 19466                           ;lorawan_eu.c: 1199: for ( i = channelIndexMin; i < channelIndexMax; i++ )
 19467  007DB0  C067  F06B         	movff	EnableChannels1@channelIndexMin,EnableChannels1@i
 19468  007DB4  D007               	goto	l2119
 19469  007DB6                     
 19470                           ; BSR set to: 0
 19471                           ;lorawan_eu.c: 1200: {
 19472                           ;lorawan_eu.c: 1201: UpdateChannelIdStatus (i, 1);
 19473                           
 19474                           ; BSR set to: 0
 19475  007DB6  0E01               	movlw	1
 19476  007DB8  6F60               	movwf	UpdateChannelIdStatus@statusNew& (0+255),b
 19477  007DBA  516B               	movf	EnableChannels1@i& (0+255),w,b
 19478  007DBC  EC89  F02A         	call	_UpdateChannelIdStatus
 19479  007DC0  0100               	movlb	0	; () banked
 19480  007DC2  2B6B               	incf	EnableChannels1@i& (0+255),f,b
 19481  007DC4                     l2119:
 19482                           
 19483                           ; BSR set to: 0
 19484                           
 19485                           ; BSR set to: 0
 19486  007DC4  5168               	movf	EnableChannels1@channelIndexMax& (0+255),w,b
 19487  007DC6  5D6B               	subwf	EnableChannels1@i& (0+255),w,b
 19488  007DC8  B0D8               	btfsc	status,0,c
 19489  007DCA  0012               	return	
 19490  007DCC  D7F4               	goto	l2120
 19491  007DCE                     l2118:
 19492                           
 19493                           ; BSR set to: 0
 19494                           ;lorawan_eu.c: 1204: else if (channelMaskCntl == 0)
 19495                           
 19496                           ; BSR set to: 0
 19497  007DCE  5166               	movf	EnableChannels1@channelMaskCntl& (0+255),w,b
 19498  007DD0  A4D8               	btfss	status,2,c
 19499  007DD2  0012               	return	
 19500                           
 19501                           ; BSR set to: 0
 19502                           ;lorawan_eu.c: 1205: {
 19503                           ;lorawan_eu.c: 1206: for ( i = channelIndexMin; i < channelIndexMax; i++ )
 19504  007DD4  C067  F06B         	movff	EnableChannels1@channelIndexMin,EnableChannels1@i
 19505  007DD8  D017               	goto	l2124
 19506  007DDA                     l2125:
 19507                           
 19508                           ; BSR set to: 0
 19509                           ;lorawan_eu.c: 1207: {
 19510                           ;lorawan_eu.c: 1208: if ( channelMask & (1 << (0)) == (1 << (0)))
 19511  007DDA  A164               	btfss	EnableChannels1@channelMask& (0+255),0,b
 19512  007DDC  D006               	goto	l2126
 19513                           
 19514                           ; BSR set to: 0
 19515                           ;lorawan_eu.c: 1209: {
 19516                           ;lorawan_eu.c: 1210: UpdateChannelIdStatus (i, 1);
 19517  007DDE  0E01               	movlw	1
 19518  007DE0  6F60               	movwf	UpdateChannelIdStatus@statusNew& (0+255),b
 19519  007DE2  516B               	movf	EnableChannels1@i& (0+255),w,b
 19520  007DE4  EC89  F02A         	call	_UpdateChannelIdStatus
 19521                           
 19522                           ;lorawan_eu.c: 1211: }
 19523  007DE8  D006               	goto	l2127
 19524  007DEA                     l2126:
 19525                           
 19526                           ;lorawan_eu.c: 1212: else
 19527                           ;lorawan_eu.c: 1213: {
 19528                           ;lorawan_eu.c: 1214: UpdateChannelIdStatus (i, 0);
 19529  007DEA  0E00               	movlw	0
 19530  007DEC  0100               	movlb	0	; () banked
 19531  007DEE  6F60               	movwf	UpdateChannelIdStatus@statusNew& (0+255),b
 19532  007DF0  516B               	movf	EnableChannels1@i& (0+255),w,b
 19533  007DF2  EC89  F02A         	call	_UpdateChannelIdStatus
 19534  007DF6                     l2127:
 19535                           
 19536                           ;lorawan_eu.c: 1215: }
 19537                           ;lorawan_eu.c: 1216: channelMask = channelMask >> (1);
 19538  007DF6  90D8               	bcf	status,0,c
 19539  007DF8  0100               	movlb	0	; () banked
 19540  007DFA  3165               	rrcf	(EnableChannels1@channelMask+1)& (0+255),w,b
 19541  007DFC  6F69               	movwf	??_EnableChannels1& (0+255),b
 19542  007DFE  3164               	rrcf	EnableChannels1@channelMask& (0+255),w,b
 19543  007E00  6F64               	movwf	EnableChannels1@channelMask& (0+255),b
 19544  007E02  C069  F065         	movff	??_EnableChannels1,EnableChannels1@channelMask+1
 19545                           
 19546                           ; BSR set to: 0
 19547  007E06  2B6B               	incf	EnableChannels1@i& (0+255),f,b
 19548  007E08                     l2124:
 19549                           
 19550                           ; BSR set to: 0
 19551                           
 19552                           ; BSR set to: 0
 19553  007E08  5168               	movf	EnableChannels1@channelIndexMax& (0+255),w,b
 19554  007E0A  5D6B               	subwf	EnableChannels1@i& (0+255),w,b
 19555  007E0C  B0D8               	btfsc	status,0,c
 19556  007E0E  0012               	return	
 19557  007E10  D7E4               	goto	l2125
 19558  007E12                     __end_of_EnableChannels1:
 19559                           	opt stack 0
 19560                           tosu	equ	0xFFF
 19561                           tosh	equ	0xFFE
 19562                           tosl	equ	0xFFD
 19563                           pclath	equ	0xFFA
 19564                           tblptru	equ	0xFF8
 19565                           tblptrh	equ	0xFF7
 19566                           tblptrl	equ	0xFF6
 19567                           tablat	equ	0xFF5
 19568                           prodh	equ	0xFF4
 19569                           prodl	equ	0xFF3
 19570                           intcon	equ	0xFF2
 19571                           intcon2	equ	0xFF1
 19572                           intcon3	equ	0xFF0
 19573                           indf0	equ	0xFEF
 19574                           postinc0	equ	0xFEE
 19575                           fsr0h	equ	0xFEA
 19576                           fsr0l	equ	0xFE9
 19577                           wreg	equ	0xFE8
 19578                           postinc1	equ	0xFE6
 19579                           postdec1	equ	0xFE5
 19580                           plusw1	equ	0xFE3
 19581                           fsr1h	equ	0xFE2
 19582                           fsr1l	equ	0xFE1
 19583                           indf2	equ	0xFDF
 19584                           postinc2	equ	0xFDE
 19585                           postdec2	equ	0xFDD
 19586                           plusw2	equ	0xFDB
 19587                           fsr2h	equ	0xFDA
 19588                           fsr2l	equ	0xFD9
 19589                           status	equ	0xFD8
 19590                           
 19591 ;; *************** function _UpdateChannelIdStatus *****************
 19592 ;; Defined at:
 19593 ;;		line 1042 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 19594 ;; Parameters:    Size  Location     Type
 19595 ;;  channelId       1    wreg     unsigned char 
 19596 ;;  statusNew       1    0[BANK0 ] unsigned char 
 19597 ;; Auto vars:     Size  Location     Type
 19598 ;;  channelId       1    2[BANK0 ] unsigned char 
 19599 ;;  i               1    3[BANK0 ] unsigned char 
 19600 ;; Return value:  Size  Location     Type
 19601 ;;                  1    wreg      void 
 19602 ;; Registers used:
 19603 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 19604 ;; Tracked objects:
 19605 ;;		On entry : 0/0
 19606 ;;		On exit  : 0/0
 19607 ;;		Unchanged: 0/0
 19608 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19609 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19610 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19611 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19612 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19613 ;;Total ram usage:        4 bytes
 19614 ;; Hardware stack levels used:    1
 19615 ;; Hardware stack levels required when called:    7
 19616 ;; This function calls:
 19617 ;;		Nothing
 19618 ;; This function is called by:
 19619 ;;		_LORAWAN_SetChannelIdStatus
 19620 ;;		_ExecuteNewChannel
 19621 ;;		_EnableChannels1
 19622 ;; This function uses a non-reentrant model
 19623 ;;
 19624                           
 19625                           	psect	text95
 19626  005512                     __ptext95:
 19627                           	opt stack 0
 19628  005512                     _UpdateChannelIdStatus:
 19629                           	opt stack 17
 19630                           
 19631                           ; BSR set to: 0
 19632                           ;incstack = 0
 19633                           ;UpdateChannelIdStatus@channelId stored from wreg
 19634  005512  0100               	movlb	0	; () banked
 19635  005514  6F62               	movwf	UpdateChannelIdStatus@channelId& (0+255),b
 19636                           
 19637                           ;lorawan_eu.c: 1044: uint8_t i;
 19638                           ;lorawan_eu.c: 1046: Channels[channelId].status = statusNew;
 19639  005516  0100               	movlb	0	; () banked
 19640  005518  5162               	movf	UpdateChannelIdStatus@channelId& (0+255),w,b
 19641  00551A  0D0E               	mullw	14
 19642  00551C  0E04               	movlw	4
 19643  00551E  26F3               	addwf	prodl,f,c
 19644  005520  0E00               	movlw	0
 19645  005522  22F4               	addwfc	prodh,f,c
 19646  005524  0E00               	movlw	low _Channels
 19647  005526  24F3               	addwf	prodl,w,c
 19648  005528  6ED9               	movwf	fsr2l,c
 19649  00552A  0E04               	movlw	high _Channels
 19650  00552C  20F4               	addwfc	prodh,w,c
 19651  00552E  6EDA               	movwf	fsr2h,c
 19652  005530  C060  FFDF         	movff	UpdateChannelIdStatus@statusNew,indf2
 19653                           
 19654                           ;lorawan_eu.c: 1047: if(Channels[channelId].status == 0)
 19655  005534  5162               	movf	UpdateChannelIdStatus@channelId& (0+255),w,b
 19656  005536  0D0E               	mullw	14
 19657  005538  0E04               	movlw	4
 19658  00553A  26F3               	addwf	prodl,f,c
 19659  00553C  0E00               	movlw	0
 19660  00553E  22F4               	addwfc	prodh,f,c
 19661  005540  0E00               	movlw	low _Channels
 19662  005542  24F3               	addwf	prodl,w,c
 19663  005544  6ED9               	movwf	fsr2l,c
 19664  005546  0E04               	movlw	high _Channels
 19665  005548  20F4               	addwfc	prodh,w,c
 19666  00554A  6EDA               	movwf	fsr2h,c
 19667  00554C  50DF               	movf	indf2,w,c
 19668  00554E  A4D8               	btfss	status,2,c
 19669  005550  D010               	goto	l2058
 19670                           
 19671                           ; BSR set to: 0
 19672                           ;lorawan_eu.c: 1048: {
 19673                           ;lorawan_eu.c: 1050: Channels[channelId].channelTimer = 0;
 19674  005552  5162               	movf	UpdateChannelIdStatus@channelId& (0+255),w,b
 19675  005554  0D0E               	mullw	14
 19676  005556  0E08               	movlw	8
 19677  005558  26F3               	addwf	prodl,f,c
 19678  00555A  0E00               	movlw	0
 19679  00555C  22F4               	addwfc	prodh,f,c
 19680  00555E  0E00               	movlw	low _Channels
 19681  005560  24F3               	addwf	prodl,w,c
 19682  005562  6ED9               	movwf	fsr2l,c
 19683  005564  0E04               	movlw	high _Channels
 19684  005566  20F4               	addwfc	prodh,w,c
 19685  005568  6EDA               	movwf	fsr2h,c
 19686  00556A  6ADE               	clrf	postinc2,c
 19687  00556C  6ADE               	clrf	postinc2,c
 19688  00556E  6ADE               	clrf	postinc2,c
 19689  005570  6ADD               	clrf	postdec2,c
 19690  005572                     l2058:
 19691                           
 19692                           ; BSR set to: 0
 19693                           ;lorawan_eu.c: 1051: }
 19694                           ;lorawan_eu.c: 1053: for (i = 0; i < loRa.maxChannels; i++)
 19695                           
 19696                           ; BSR set to: 0
 19697  005572  0E00               	movlw	0
 19698  005574  6F63               	movwf	UpdateChannelIdStatus@i& (0+255),b
 19699  005576  D06D               	goto	l2059
 19700  005578                     
 19701                           ; BSR set to: 0
 19702                           ;lorawan_eu.c: 1054: {
 19703                           ;lorawan_eu.c: 1055: if ( (Channels[i].dataRange.min < loRa.minDataRate) && (Channels[i]
      +                          .status == 1) )
 19704                           
 19705                           ; BSR set to: 0
 19706  005578  5163               	movf	UpdateChannelIdStatus@i& (0+255),w,b
 19707  00557A  0D0E               	mullw	14
 19708  00557C  0E05               	movlw	5
 19709  00557E  26F3               	addwf	prodl,f,c
 19710  005580  0E00               	movlw	0
 19711  005582  22F4               	addwfc	prodh,f,c
 19712  005584  0E00               	movlw	low _Channels
 19713  005586  24F3               	addwf	prodl,w,c
 19714  005588  6ED9               	movwf	fsr2l,c
 19715  00558A  0E04               	movlw	high _Channels
 19716  00558C  20F4               	addwfc	prodh,w,c
 19717  00558E  6EDA               	movwf	fsr2h,c
 19718  005590  0104               	movlb	4	; () banked
 19719  005592  50DF               	movf	223,w,c
 19720  005594  0B0F               	andlw	15
 19721  005596  0100               	movlb	0	; () banked
 19722  005598  6F61               	movwf	??_UpdateChannelIdStatus& (0+255),b
 19723  00559A  0102               	movlb	2	; () banked
 19724  00559C  51F5               	movf	(_loRa+235)& (0+255),w,b
 19725  00559E  0100               	movlb	0	; () banked
 19726  0055A0  5D61               	subwf	??_UpdateChannelIdStatus& (0+255),w,b
 19727  0055A2  B0D8               	btfsc	status,0,c
 19728  0055A4  D020               	goto	l2061
 19729                           
 19730                           ; BSR set to: 0
 19731  0055A6  5163               	movf	UpdateChannelIdStatus@i& (0+255),w,b
 19732  0055A8  0D0E               	mullw	14
 19733  0055AA  0E04               	movlw	4
 19734  0055AC  26F3               	addwf	prodl,f,c
 19735  0055AE  0E00               	movlw	0
 19736  0055B0  22F4               	addwfc	prodh,f,c
 19737  0055B2  0E00               	movlw	low _Channels
 19738  0055B4  24F3               	addwf	prodl,w,c
 19739  0055B6  6ED9               	movwf	fsr2l,c
 19740  0055B8  0E04               	movlw	high _Channels
 19741  0055BA  20F4               	addwfc	prodh,w,c
 19742  0055BC  6EDA               	movwf	fsr2h,c
 19743  0055BE  04DE               	decf	postinc2,w,c
 19744  0055C0  A4D8               	btfss	status,2,c
 19745  0055C2  D011               	goto	l2061
 19746                           
 19747                           ; BSR set to: 0
 19748                           ;lorawan_eu.c: 1056: {
 19749                           ;lorawan_eu.c: 1057: loRa.minDataRate = Channels[i].dataRange.min;
 19750  0055C4  5163               	movf	UpdateChannelIdStatus@i& (0+255),w,b
 19751  0055C6  0D0E               	mullw	14
 19752  0055C8  0E05               	movlw	5
 19753  0055CA  26F3               	addwf	prodl,f,c
 19754  0055CC  0E00               	movlw	0
 19755  0055CE  22F4               	addwfc	prodh,f,c
 19756  0055D0  0E00               	movlw	low _Channels
 19757  0055D2  24F3               	addwf	prodl,w,c
 19758  0055D4  6ED9               	movwf	fsr2l,c
 19759  0055D6  0E04               	movlw	high _Channels
 19760  0055D8  20F4               	addwfc	prodh,w,c
 19761  0055DA  6EDA               	movwf	fsr2h,c
 19762  0055DC  0104               	movlb	4	; () banked
 19763  0055DE  50DF               	movf	223,w,c
 19764  0055E0  0B0F               	andlw	15
 19765  0055E2  0102               	movlb	2	; () banked
 19766  0055E4  6FF5               	movwf	(_loRa+235)& (0+255),b
 19767  0055E6                     l2061:
 19768                           
 19769                           ;lorawan_eu.c: 1058: }
 19770                           ;lorawan_eu.c: 1059: if ( (Channels[i].dataRange.max > loRa.maxDataRate) && (Channels[i]
      +                          .status == 1) )
 19771  0055E6  0100               	movlb	0	; () banked
 19772  0055E8  5163               	movf	UpdateChannelIdStatus@i& (0+255),w,b
 19773  0055EA  0D0E               	mullw	14
 19774  0055EC  0E05               	movlw	5
 19775  0055EE  26F3               	addwf	prodl,f,c
 19776  0055F0  0E00               	movlw	0
 19777  0055F2  22F4               	addwfc	prodh,f,c
 19778  0055F4  0E00               	movlw	low _Channels
 19779  0055F6  24F3               	addwf	prodl,w,c
 19780  0055F8  6ED9               	movwf	fsr2l,c
 19781  0055FA  0E04               	movlw	high _Channels
 19782  0055FC  20F4               	addwfc	prodh,w,c
 19783  0055FE  6EDA               	movwf	fsr2h,c
 19784  005600  0104               	movlb	4	; () banked
 19785  005602  38DF               	swapf	223,w,c
 19786  005604  0B0F               	andlw	15
 19787  005606  0102               	movlb	2	; () banked
 19788  005608  61F6               	cpfslt	(_loRa+236)& (0+255),b
 19789  00560A  D021               	goto	l2062
 19790                           
 19791                           ; BSR set to: 2
 19792  00560C  0100               	movlb	0	; () banked
 19793  00560E  5163               	movf	UpdateChannelIdStatus@i& (0+255),w,b
 19794  005610  0D0E               	mullw	14
 19795  005612  0E04               	movlw	4
 19796  005614  26F3               	addwf	prodl,f,c
 19797  005616  0E00               	movlw	0
 19798  005618  22F4               	addwfc	prodh,f,c
 19799  00561A  0E00               	movlw	low _Channels
 19800  00561C  24F3               	addwf	prodl,w,c
 19801  00561E  6ED9               	movwf	fsr2l,c
 19802  005620  0E04               	movlw	high _Channels
 19803  005622  20F4               	addwfc	prodh,w,c
 19804  005624  6EDA               	movwf	fsr2h,c
 19805  005626  04DE               	decf	postinc2,w,c
 19806  005628  A4D8               	btfss	status,2,c
 19807  00562A  D011               	goto	l2062
 19808                           
 19809                           ; BSR set to: 0
 19810                           ;lorawan_eu.c: 1060: {
 19811                           ;lorawan_eu.c: 1061: loRa.maxDataRate = Channels[i].dataRange.max;
 19812  00562C  5163               	movf	UpdateChannelIdStatus@i& (0+255),w,b
 19813  00562E  0D0E               	mullw	14
 19814  005630  0E05               	movlw	5
 19815  005632  26F3               	addwf	prodl,f,c
 19816  005634  0E00               	movlw	0
 19817  005636  22F4               	addwfc	prodh,f,c
 19818  005638  0E00               	movlw	low _Channels
 19819  00563A  24F3               	addwf	prodl,w,c
 19820  00563C  6ED9               	movwf	fsr2l,c
 19821  00563E  0E04               	movlw	high _Channels
 19822  005640  20F4               	addwfc	prodh,w,c
 19823  005642  6EDA               	movwf	fsr2h,c
 19824  005644  0104               	movlb	4	; () banked
 19825  005646  38DF               	swapf	223,w,c
 19826  005648  0B0F               	andlw	15
 19827  00564A  0102               	movlb	2	; () banked
 19828  00564C  6FF6               	movwf	(_loRa+236)& (0+255),b
 19829  00564E                     l2062:
 19830                           
 19831                           ; BSR set to: 2
 19832  00564E  0100               	movlb	0	; () banked
 19833  005650  2B63               	incf	UpdateChannelIdStatus@i& (0+255),f,b
 19834  005652                     l2059:
 19835                           
 19836                           ; BSR set to: 0
 19837                           
 19838                           ; BSR set to: 0
 19839  005652  0102               	movlb	2	; () banked
 19840  005654  51F7               	movf	(_loRa+237)& (0+255),w,b
 19841  005656  0100               	movlb	0	; () banked
 19842  005658  5D63               	subwf	UpdateChannelIdStatus@i& (0+255),w,b
 19843  00565A  A0D8               	btfss	status,0,c
 19844  00565C  D78D               	goto	l2060
 19845                           
 19846                           ; BSR set to: 0
 19847                           ;lorawan_eu.c: 1062: }
 19848                           ;lorawan_eu.c: 1063: }
 19849                           ;lorawan_eu.c: 1065: if (loRa.currentDataRate > loRa.maxDataRate)
 19850                           
 19851                           ; BSR set to: 0
 19852  00565E  0102               	movlb	2	; () banked
 19853  005660  51E9               	movf	(_loRa+223)& (0+255),w,b
 19854  005662  5DF6               	subwf	(_loRa+236)& (0+255),w,b
 19855  005664  A0D8               	btfss	status,0,c
 19856                           
 19857                           ; BSR set to: 2
 19858                           ;lorawan_eu.c: 1066: {
 19859                           ;lorawan_eu.c: 1067: loRa.currentDataRate = loRa.maxDataRate;
 19860  005666  C2F6  F2E9         	movff	_loRa+236,_loRa+223
 19861                           
 19862                           ; BSR set to: 2
 19863                           ;lorawan_eu.c: 1068: }
 19864                           ;lorawan_eu.c: 1070: if (loRa.currentDataRate < loRa.minDataRate)
 19865                           
 19866                           ; BSR set to: 2
 19867  00566A  51F5               	movf	(_loRa+235)& (0+255),w,b
 19868  00566C  5DE9               	subwf	(_loRa+223)& (0+255),w,b
 19869  00566E  B0D8               	btfsc	status,0,c
 19870  005670  0012               	return	
 19871                           
 19872                           ; BSR set to: 2
 19873                           ;lorawan_eu.c: 1071: {
 19874                           ;lorawan_eu.c: 1072: loRa.currentDataRate = loRa.minDataRate;
 19875  005672  C2F5  F2E9         	movff	_loRa+235,_loRa+223
 19876  005676  0012               	return	
 19877  005678                     __end_of_UpdateChannelIdStatus:
 19878                           	opt stack 0
 19879                           tosu	equ	0xFFF
 19880                           tosh	equ	0xFFE
 19881                           tosl	equ	0xFFD
 19882                           pclath	equ	0xFFA
 19883                           tblptru	equ	0xFF8
 19884                           tblptrh	equ	0xFF7
 19885                           tblptrl	equ	0xFF6
 19886                           tablat	equ	0xFF5
 19887                           prodh	equ	0xFF4
 19888                           prodl	equ	0xFF3
 19889                           intcon	equ	0xFF2
 19890                           intcon2	equ	0xFF1
 19891                           intcon3	equ	0xFF0
 19892                           indf0	equ	0xFEF
 19893                           postinc0	equ	0xFEE
 19894                           fsr0h	equ	0xFEA
 19895                           fsr0l	equ	0xFE9
 19896                           wreg	equ	0xFE8
 19897                           postinc1	equ	0xFE6
 19898                           postdec1	equ	0xFE5
 19899                           plusw1	equ	0xFE3
 19900                           fsr1h	equ	0xFE2
 19901                           fsr1l	equ	0xFE1
 19902                           indf2	equ	0xFDF
 19903                           postinc2	equ	0xFDE
 19904                           postdec2	equ	0xFDD
 19905                           plusw2	equ	0xFDB
 19906                           fsr2h	equ	0xFDA
 19907                           fsr2l	equ	0xFD9
 19908                           status	equ	0xFD8
 19909                           
 19910 ;; *************** function _ExecuteDutyCycle *****************
 19911 ;; Defined at:
 19912 ;;		line 594 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 19913 ;; Parameters:    Size  Location     Type
 19914 ;;  ptr             2    0[BANK0 ] PTR unsigned char 
 19915 ;;		 -> radioBuffer(271), LORAWAN_RxDone@hdr(2), 
 19916 ;; Auto vars:     Size  Location     Type
 19917 ;;  maxDCycle       1    5[BANK0 ] unsigned char 
 19918 ;; Return value:  Size  Location     Type
 19919 ;;                  2    0[BANK0 ] PTR unsigned char 
 19920 ;; Registers used:
 19921 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 19922 ;; Tracked objects:
 19923 ;;		On entry : 0/0
 19924 ;;		On exit  : 0/0
 19925 ;;		Unchanged: 0/0
 19926 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19927 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19928 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19929 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19930 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19931 ;;Total ram usage:        6 bytes
 19932 ;; Hardware stack levels used:    1
 19933 ;; Hardware stack levels required when called:    7
 19934 ;; This function calls:
 19935 ;;		Nothing
 19936 ;; This function is called by:
 19937 ;;		_MacExecuteCommands
 19938 ;; This function uses a non-reentrant model
 19939 ;;
 19940                           
 19941                           	psect	text96
 19942  0085F4                     __ptext96:
 19943                           	opt stack 0
 19944  0085F4                     _ExecuteDutyCycle:
 19945                           	opt stack 18
 19946                           
 19947                           ;lorawan_eu.c: 596: uint8_t maxDCycle;
 19948                           ;lorawan_eu.c: 598: maxDCycle = *(ptr++);
 19949                           
 19950                           ; BSR set to: 2
 19951                           ;incstack = 0
 19952  0085F4  C060  FFD9         	movff	ExecuteDutyCycle@ptr,fsr2l
 19953  0085F8  C061  FFDA         	movff	ExecuteDutyCycle@ptr+1,fsr2h
 19954  0085FC  50DF               	movf	indf2,w,c
 19955  0085FE  0100               	movlb	0	; () banked
 19956  008600  6F65               	movwf	ExecuteDutyCycle@maxDCycle& (0+255),b
 19957                           
 19958                           ; BSR set to: 0
 19959  008602  4B60               	infsnz	ExecuteDutyCycle@ptr& (0+255),f,b
 19960  008604  2B61               	incf	(ExecuteDutyCycle@ptr+1)& (0+255),f,b
 19961                           
 19962                           ; BSR set to: 0
 19963                           ;lorawan_eu.c: 599: if (maxDCycle < 15)
 19964  008606  0E0F               	movlw	15
 19965  008608  6165               	cpfslt	ExecuteDutyCycle@maxDCycle& (0+255),b
 19966  00860A  D013               	goto	l1937
 19967                           
 19968                           ; BSR set to: 0
 19969                           ;lorawan_eu.c: 600: {
 19970                           ;lorawan_eu.c: 601: loRa.prescaler = 1 << maxDCycle;
 19971  00860C  C065  F062         	movff	ExecuteDutyCycle@maxDCycle,??_ExecuteDutyCycle
 19972  008610  0E01               	movlw	1
 19973  008612  6F63               	movwf	(??_ExecuteDutyCycle+1)& (0+255),b
 19974  008614  0E00               	movlw	0
 19975  008616  6F64               	movwf	(??_ExecuteDutyCycle+2)& (0+255),b
 19976  008618  2B62               	incf	??_ExecuteDutyCycle& (0+255),f,b
 19977  00861A  D003               	goto	u10384
 19978  00861C                     u10385:
 19979  00861C  90D8               	bcf	status,0,c
 19980  00861E  3763               	rlcf	(??_ExecuteDutyCycle+1)& (0+255),f,b
 19981  008620  3764               	rlcf	(??_ExecuteDutyCycle+2)& (0+255),f,b
 19982  008622                     u10384:
 19983  008622  2F62               	decfsz	??_ExecuteDutyCycle& (0+255),f,b
 19984  008624  D7FB               	goto	u10385
 19985  008626  C063  F2E5         	movff	??_ExecuteDutyCycle+1,_loRa+219
 19986  00862A  C064  F2E6         	movff	??_ExecuteDutyCycle+2,_loRa+220
 19987                           
 19988                           ;lorawan_eu.c: 602: loRa.macStatus.prescalerModified = 1;
 19989  00862E  0102               	movlb	2	; () banked
 19990  008630  8D0D               	bsf	(_loRa+3)& (0+255),6,b
 19991  008632                     l1937:
 19992                           
 19993                           ;lorawan_eu.c: 603: }
 19994                           ;lorawan_eu.c: 605: if (maxDCycle == 255)
 19995  008632  0100               	movlb	0	; () banked
 19996  008634  2965               	incf	ExecuteDutyCycle@maxDCycle& (0+255),w,b
 19997  008636  A4D8               	btfss	status,2,c
 19998  008638  D002               	goto	l1938
 19999                           
 20000                           ; BSR set to: 0
 20001                           ;lorawan_eu.c: 606: {
 20002                           ;lorawan_eu.c: 607: loRa.macStatus.silentImmediately = 1;
 20003  00863A  0102               	movlb	2	; () banked
 20004  00863C  8F0C               	bsf	(_loRa+2)& (0+255),7,b
 20005  00863E                     l1938:
 20006                           
 20007                           ;lorawan_eu.c: 608: }
 20008                           ;lorawan_eu.c: 610: return ptr;
 20009                           
 20010                           ; BSR set to: 2
 20011  00863E  C060  F060         	movff	ExecuteDutyCycle@ptr,?_ExecuteDutyCycle
 20012  008642  C061  F061         	movff	ExecuteDutyCycle@ptr+1,?_ExecuteDutyCycle+1
 20013  008646  0012               	return	
 20014  008648                     __end_of_ExecuteDutyCycle:
 20015                           	opt stack 0
 20016                           tosu	equ	0xFFF
 20017                           tosh	equ	0xFFE
 20018                           tosl	equ	0xFFD
 20019                           pclath	equ	0xFFA
 20020                           tblptru	equ	0xFF8
 20021                           tblptrh	equ	0xFF7
 20022                           tblptrl	equ	0xFF6
 20023                           tablat	equ	0xFF5
 20024                           prodh	equ	0xFF4
 20025                           prodl	equ	0xFF3
 20026                           intcon	equ	0xFF2
 20027                           intcon2	equ	0xFF1
 20028                           intcon3	equ	0xFF0
 20029                           indf0	equ	0xFEF
 20030                           postinc0	equ	0xFEE
 20031                           fsr0h	equ	0xFEA
 20032                           fsr0l	equ	0xFE9
 20033                           wreg	equ	0xFE8
 20034                           postinc1	equ	0xFE6
 20035                           postdec1	equ	0xFE5
 20036                           plusw1	equ	0xFE3
 20037                           fsr1h	equ	0xFE2
 20038                           fsr1l	equ	0xFE1
 20039                           indf2	equ	0xFDF
 20040                           postinc2	equ	0xFDE
 20041                           postdec2	equ	0xFDD
 20042                           plusw2	equ	0xFDB
 20043                           fsr2h	equ	0xFDA
 20044                           fsr2l	equ	0xFD9
 20045                           status	equ	0xFD8
 20046                           
 20047 ;; *************** function _ExecuteDevStatus *****************
 20048 ;; Defined at:
 20049 ;;		line 672 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 20050 ;; Parameters:    Size  Location     Type
 20051 ;;  ptr             2    0[BANK0 ] PTR unsigned char 
 20052 ;;		 -> radioBuffer(271), LORAWAN_RxDone@hdr(2), 
 20053 ;; Auto vars:     Size  Location     Type
 20054 ;;		None
 20055 ;; Return value:  Size  Location     Type
 20056 ;;                  2    0[BANK0 ] PTR unsigned char 
 20057 ;; Registers used:
 20058 ;;		wreg, status,2, status,0
 20059 ;; Tracked objects:
 20060 ;;		On entry : 0/0
 20061 ;;		On exit  : 0/0
 20062 ;;		Unchanged: 0/0
 20063 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20064 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20065 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20066 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20067 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20068 ;;Total ram usage:        2 bytes
 20069 ;; Hardware stack levels used:    1
 20070 ;; Hardware stack levels required when called:    7
 20071 ;; This function calls:
 20072 ;;		Nothing
 20073 ;; This function is called by:
 20074 ;;		_MacExecuteCommands
 20075 ;; This function uses a non-reentrant model
 20076 ;;
 20077                           
 20078                           	psect	text97
 20079  0094D2                     __ptext97:
 20080                           	opt stack 0
 20081  0094D2                     _ExecuteDevStatus:
 20082                           	opt stack 18
 20083                           
 20084                           ;lorawan_eu.c: 674: return ptr;
 20085                           
 20086                           ;incstack = 0
 20087  0094D2  C060  F060         	movff	ExecuteDevStatus@ptr,?_ExecuteDevStatus
 20088  0094D6  C061  F061         	movff	ExecuteDevStatus@ptr+1,?_ExecuteDevStatus+1
 20089  0094DA  0012               	return	
 20090  0094DC                     __end_of_ExecuteDevStatus:
 20091                           	opt stack 0
 20092                           tosu	equ	0xFFF
 20093                           tosh	equ	0xFFE
 20094                           tosl	equ	0xFFD
 20095                           pclath	equ	0xFFA
 20096                           tblptru	equ	0xFF8
 20097                           tblptrh	equ	0xFF7
 20098                           tblptrl	equ	0xFF6
 20099                           tablat	equ	0xFF5
 20100                           prodh	equ	0xFF4
 20101                           prodl	equ	0xFF3
 20102                           intcon	equ	0xFF2
 20103                           intcon2	equ	0xFF1
 20104                           intcon3	equ	0xFF0
 20105                           indf0	equ	0xFEF
 20106                           postinc0	equ	0xFEE
 20107                           fsr0h	equ	0xFEA
 20108                           fsr0l	equ	0xFE9
 20109                           wreg	equ	0xFE8
 20110                           postinc1	equ	0xFE6
 20111                           postdec1	equ	0xFE5
 20112                           plusw1	equ	0xFE3
 20113                           fsr1h	equ	0xFE2
 20114                           fsr1l	equ	0xFE1
 20115                           indf2	equ	0xFDF
 20116                           postinc2	equ	0xFDE
 20117                           postdec2	equ	0xFDD
 20118                           plusw2	equ	0xFDB
 20119                           fsr2h	equ	0xFDA
 20120                           fsr2l	equ	0xFD9
 20121                           status	equ	0xFD8
 20122                           
 20123 ;; *************** function _LORAWAN_Send *****************
 20124 ;; Defined at:
 20125 ;;		line 185 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 20126 ;; Parameters:    Size  Location     Type
 20127 ;;  confirmed       1    wreg     enum E7217
 20128 ;;  port            1  115[BANK0 ] unsigned char 
 20129 ;;  buffer          2  116[BANK0 ] PTR void 
 20130 ;;		 -> testtest(2), NULL(0), 
 20131 ;;  bufferLength    1  118[BANK0 ] unsigned char 
 20132 ;; Auto vars:     Size  Location     Type
 20133 ;;  confirmed       1  121[BANK0 ] enum E7217
 20134 ;;  result          1  120[BANK0 ] enum E7190
 20135 ;; Return value:  Size  Location     Type
 20136 ;;                  1    wreg      enum E7190
 20137 ;; Registers used:
 20138 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20139 ;; Tracked objects:
 20140 ;;		On entry : 0/0
 20141 ;;		On exit  : 0/0
 20142 ;;		Unchanged: 0/0
 20143 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20144 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20145 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20146 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20147 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20148 ;;Total ram usage:        7 bytes
 20149 ;; Hardware stack levels used:    1
 20150 ;; Hardware stack levels required when called:   13
 20151 ;; This function calls:
 20152 ;;		_AssemblePacket
 20153 ;;		_LORAWAN_GetMaxPayloadSize
 20154 ;;		_RADIO_ReceiveStop
 20155 ;;		_RADIO_Transmit
 20156 ;;		_SelectChannelForTransmission
 20157 ;; This function is called by:
 20158 ;;		_AutomaticReplyCallback
 20159 ;;		_LORAWAN_RxDone
 20160 ;;		_main
 20161 ;; This function uses a non-reentrant model
 20162 ;;
 20163                           
 20164                           	psect	text98
 20165  006CE2                     __ptext98:
 20166                           	opt stack 0
 20167  006CE2                     _LORAWAN_Send:
 20168                           	opt stack 17
 20169                           
 20170                           ;incstack = 0
 20171                           ;LORAWAN_Send@confirmed stored from wreg
 20172  006CE2  0100               	movlb	0	; () banked
 20173  006CE4  6FD9               	movwf	LORAWAN_Send@confirmed& (0+255),b
 20174                           
 20175                           ;lorawan.c: 187: LorawanError_t result;
 20176                           ;lorawan.c: 189: if (loRa.macStatus.macPause == 1)
 20177  006CE6  0102               	movlb	2	; () banked
 20178  006CE8  B10D               	btfsc	(_loRa+3)& (0+255),0,b
 20179  006CEA  0012               	return	
 20180                           
 20181                           ; BSR set to: 2
 20182                           ;lorawan.c: 192: }
 20183                           ;lorawan.c: 194: if (loRa.macStatus.silentImmediately == 1)
 20184                           
 20185                           ; BSR set to: 2
 20186                           ;lorawan.c: 190: {
 20187                           ;lorawan.c: 191: return MAC_PAUSED;
 20188                           ;	Return value of _LORAWAN_Send is never used
 20189  006CEC  BF0C               	btfsc	(_loRa+2)& (0+255),7,b
 20190  006CEE  0012               	return	
 20191                           
 20192                           ; BSR set to: 2
 20193                           ;lorawan.c: 197: }
 20194                           ;lorawan.c: 199: if (loRa.macStatus.networkJoined == 0)
 20195                           
 20196                           ; BSR set to: 2
 20197                           ;lorawan.c: 195: {
 20198                           ;lorawan.c: 196: return SILENT_IMMEDIATELY_ACTIVE;
 20199                           ;	Return value of _LORAWAN_Send is never used
 20200  006CF0  A90C               	btfss	(_loRa+2)& (0+255),4,b
 20201  006CF2  0012               	return	
 20202                           
 20203                           ; BSR set to: 2
 20204                           ;lorawan.c: 202: }
 20205                           ;lorawan.c: 204: if ( (port < 1) && (bufferLength != 0) )
 20206                           
 20207                           ; BSR set to: 2
 20208                           
 20209                           ; BSR set to: 2
 20210                           ;lorawan.c: 200: {
 20211                           ;lorawan.c: 201: return NETWORK_NOT_JOINED;
 20212                           ;	Return value of _LORAWAN_Send is never used
 20213  006CF4  0100               	movlb	0	; () banked
 20214  006CF6  51D3               	movf	LORAWAN_Send@port& (0+255),w,b
 20215  006CF8  A4D8               	btfss	status,2,c
 20216  006CFA  D003               	goto	l769
 20217                           
 20218                           ; BSR set to: 0
 20219  006CFC  51D6               	movf	LORAWAN_Send@bufferLength& (0+255),w,b
 20220  006CFE  A4D8               	btfss	status,2,c
 20221  006D00  0012               	return	
 20222  006D02                     l769:
 20223                           
 20224                           ; BSR set to: 0
 20225                           ;lorawan.c: 207: }
 20226                           ;lorawan.c: 210: if (bufferLength > LORAWAN_GetMaxPayloadSize ())
 20227                           
 20228                           ; BSR set to: 0
 20229  006D02  EC07  F041         	call	_LORAWAN_GetMaxPayloadSize	;wreg free
 20230  006D06  0100               	movlb	0	; () banked
 20231  006D08  6FD7               	movwf	??_LORAWAN_Send& (0+255),b
 20232  006D0A  51D6               	movf	LORAWAN_Send@bufferLength& (0+255),w,b
 20233  006D0C  5DD7               	subwf	??_LORAWAN_Send& (0+255),w,b
 20234  006D0E  A0D8               	btfss	status,0,c
 20235  006D10  0012               	return	
 20236                           
 20237                           ; BSR set to: 0
 20238                           ;lorawan.c: 213: }
 20239                           ;lorawan.c: 215: if (loRa.fCntUp.value == (4294967295UL))
 20240                           
 20241                           ; BSR set to: 0
 20242                           
 20243                           ; BSR set to: 0
 20244                           ;lorawan.c: 211: {
 20245                           ;lorawan.c: 212: return INVALID_BUFFER_LENGTH;
 20246                           ;	Return value of _LORAWAN_Send is never used
 20247  006D12  0102               	movlb	2	; () banked
 20248  006D14  2910               	incf	(_loRa+6)& (0+255),w,b
 20249  006D16  E109               	bnz	l10721
 20250  006D18  2911               	incf	(_loRa+7)& (0+255),w,b
 20251  006D1A  E107               	bnz	l10721
 20252  006D1C  2912               	incf	(_loRa+8)& (0+255),w,b
 20253  006D1E  E105               	bnz	l10721
 20254  006D20  2913               	incf	(_loRa+9)& (0+255),w,b
 20255  006D22  A4D8               	btfss	status,2,c
 20256  006D24  D002               	goto	l771
 20257                           
 20258                           ; BSR set to: 2
 20259                           ;lorawan.c: 216: {
 20260                           ;lorawan.c: 218: loRa.macStatus.rejoinNeeded = 1;
 20261  006D26  830E               	bsf	(_loRa+4)& (0+255),1,b
 20262                           
 20263                           ;lorawan.c: 219: return FRAME_COUNTER_ERROR_REJOIN_NEEDED;
 20264                           ;	Return value of _LORAWAN_Send is never used
 20265  006D28  0012               	return	
 20266  006D2A                     l771:
 20267  006D2A                     l10721:
 20268                           
 20269                           ; BSR set to: 2
 20270                           ;lorawan.c: 220: }
 20271                           ;lorawan.c: 222: if ((loRa.macStatus.macState != IDLE) && (CLASS_A == loRa.deviceClass))
 20272  006D2A  510C               	movf	(_loRa+2)& (0+255),w,b
 20273  006D2C  0B0F               	andlw	15
 20274  006D2E  0900               	iorlw	0
 20275  006D30  B4D8               	btfsc	status,2,c
 20276  006D32  D003               	goto	l772
 20277                           
 20278                           ; BSR set to: 2
 20279  006D34  511C               	movf	(_loRa+18)& (0+255),w,b
 20280  006D36  B4D8               	btfsc	status,2,c
 20281  006D38  0012               	return	
 20282  006D3A                     l772:
 20283                           
 20284                           ; BSR set to: 2
 20285                           ;lorawan.c: 225: }
 20286                           ;lorawan.c: 227: result = SelectChannelForTransmission (1);
 20287                           
 20288                           ; BSR set to: 2
 20289  006D3A  0E01               	movlw	1
 20290  006D3C  EC09  F03F         	call	_SelectChannelForTransmission
 20291  006D40  0100               	movlb	0	; () banked
 20292  006D42  6FD8               	movwf	LORAWAN_Send@result& (0+255),b
 20293                           
 20294                           ; BSR set to: 0
 20295                           ;lorawan.c: 228: if (result != OK)
 20296  006D44  51D8               	movf	LORAWAN_Send@result& (0+255),w,b
 20297  006D46  A4D8               	btfss	status,2,c
 20298  006D48  0012               	return	
 20299                           
 20300                           ; BSR set to: 0
 20301                           ;lorawan.c: 232: else
 20302                           ;lorawan.c: 233: {
 20303                           ;lorawan.c: 234: if (CLASS_C == loRa.deviceClass)
 20304                           
 20305                           ; BSR set to: 0
 20306                           
 20307                           ; BSR set to: 0
 20308                           ;lorawan.c: 231: }
 20309                           
 20310                           ; BSR set to: 0
 20311                           ;lorawan.c: 229: {
 20312                           ;lorawan.c: 230: return result;
 20313                           ;	Return value of _LORAWAN_Send is never used
 20314  006D4A  0E02               	movlw	2
 20315  006D4C  0102               	movlb	2	; () banked
 20316  006D4E  191C               	xorwf	(_loRa+18)& (0+255),w,b
 20317  006D50  B4D8               	btfsc	status,2,c
 20318                           
 20319                           ; BSR set to: 2
 20320                           ;lorawan.c: 235: {
 20321                           ;lorawan.c: 236: RADIO_ReceiveStop();
 20322  006D52  ECAE  F048         	call	_RADIO_ReceiveStop	;wreg free
 20323                           
 20324                           ;lorawan.c: 237: }
 20325                           ;lorawan.c: 239: AssemblePacket (confirmed, port, buffer, bufferLength);
 20326  006D56  C0D3  F0C7         	movff	LORAWAN_Send@port,AssemblePacket@port
 20327  006D5A  C0D4  F0C8         	movff	LORAWAN_Send@buffer,AssemblePacket@buffer
 20328  006D5E  C0D5  F0C9         	movff	LORAWAN_Send@buffer+1,AssemblePacket@buffer+1
 20329  006D62  C0D6  F0CA         	movff	LORAWAN_Send@bufferLength,AssemblePacket@bufferLength
 20330  006D66  0100               	movlb	0	; () banked
 20331  006D68  6BCB               	clrf	(AssemblePacket@bufferLength+1)& (0+255),b
 20332  006D6A  51D9               	movf	LORAWAN_Send@confirmed& (0+255),w,b
 20333  006D6C  EC47  F00F         	call	_AssemblePacket
 20334                           
 20335                           ;lorawan.c: 241: if (RADIO_Transmit (&macBuffer[16], loRa.lastPacketLength) == OK)
 20336  006D70  0E9F               	movlw	low (_macBuffer+16)
 20337  006D72  0100               	movlb	0	; () banked
 20338  006D74  6FB1               	movwf	RADIO_Transmit@buffer& (0+255),b
 20339  006D76  0E06               	movlw	high (_macBuffer+16)
 20340  006D78  6FB2               	movwf	(RADIO_Transmit@buffer+1)& (0+255),b
 20341  006D7A  C2DE  F0B3         	movff	_loRa+212,RADIO_Transmit@bufferLen
 20342  006D7E  ECF7  F01F         	call	_RADIO_Transmit	;wreg free
 20343  006D82  0100               	movlb	0	; () banked
 20344  006D84  51B1               	movf	?_RADIO_Transmit& (0+255),w,b
 20345  006D86  11B2               	iorwf	(?_RADIO_Transmit+1)& (0+255),w,b
 20346  006D88  A4D8               	btfss	status,2,c
 20347  006D8A  0012               	return	
 20348                           
 20349                           ; BSR set to: 0
 20350                           ;lorawan.c: 242: {
 20351                           ;lorawan.c: 243: loRa.fCntUp.value ++;
 20352  006D8C  0E01               	movlw	1
 20353  006D8E  0102               	movlb	2	; () banked
 20354  006D90  2710               	addwf	(_loRa+6)& (0+255),f,b
 20355  006D92  0E00               	movlw	0
 20356  006D94  2311               	addwfc	(_loRa+7)& (0+255),f,b
 20357  006D96  2312               	addwfc	(_loRa+8)& (0+255),f,b
 20358  006D98  2313               	addwfc	(_loRa+9)& (0+255),f,b
 20359                           
 20360                           ;lorawan.c: 245: if (CNF == confirmed)
 20361  006D9A  0100               	movlb	0	; () banked
 20362  006D9C  05D9               	decf	LORAWAN_Send@confirmed& (0+255),w,b
 20363  006D9E  A4D8               	btfss	status,2,c
 20364  006DA0  D002               	goto	l777
 20365                           
 20366                           ; BSR set to: 0
 20367                           ;lorawan.c: 246: {
 20368                           ;lorawan.c: 247: loRa.lorawanMacStatus.ackRequiredFromNextDownlinkMessage = 1;
 20369  006DA2  0102               	movlb	2	; () banked
 20370  006DA4  810A               	bsf	_loRa& (0+255),0,b
 20371  006DA6                     l777:
 20372                           
 20373                           ;lorawan.c: 248: }
 20374                           ;lorawan.c: 249: loRa.lorawanMacStatus.synchronization = 1;
 20375  006DA6  0102               	movlb	2	; () banked
 20376  006DA8  8B0A               	bsf	_loRa& (0+255),5,b
 20377                           
 20378                           ; BSR set to: 2
 20379                           ;lorawan.c: 250: loRa.macStatus.macState = TRANSMISSION_OCCURRING;
 20380  006DAA  510C               	movf	(_loRa+2)& (0+255),w,b
 20381  006DAC  0BF0               	andlw	-16
 20382  006DAE  0901               	iorlw	1
 20383  006DB0  6F0C               	movwf	(_loRa+2)& (0+255),b
 20384                           
 20385                           ; BSR set to: 2
 20386                           
 20387                           ; BSR set to: 2
 20388                           ;lorawan.c: 252: else
 20389                           ;lorawan.c: 253: {
 20390                           ;lorawan.c: 254: return MAC_STATE_NOT_READY_FOR_TRANSMISSION;
 20391                           ;	Return value of _LORAWAN_Send is never used
 20392                           
 20393                           ;lorawan.c: 251: }
 20394  006DB2  0012               	return	
 20395  006DB4                     __end_of_LORAWAN_Send:
 20396                           	opt stack 0
 20397                           tosu	equ	0xFFF
 20398                           tosh	equ	0xFFE
 20399                           tosl	equ	0xFFD
 20400                           pclath	equ	0xFFA
 20401                           tblptru	equ	0xFF8
 20402                           tblptrh	equ	0xFF7
 20403                           tblptrl	equ	0xFF6
 20404                           tablat	equ	0xFF5
 20405                           prodh	equ	0xFF4
 20406                           prodl	equ	0xFF3
 20407                           intcon	equ	0xFF2
 20408                           intcon2	equ	0xFF1
 20409                           intcon3	equ	0xFF0
 20410                           indf0	equ	0xFEF
 20411                           postinc0	equ	0xFEE
 20412                           fsr0h	equ	0xFEA
 20413                           fsr0l	equ	0xFE9
 20414                           wreg	equ	0xFE8
 20415                           postinc1	equ	0xFE6
 20416                           postdec1	equ	0xFE5
 20417                           plusw1	equ	0xFE3
 20418                           fsr1h	equ	0xFE2
 20419                           fsr1l	equ	0xFE1
 20420                           indf2	equ	0xFDF
 20421                           postinc2	equ	0xFDE
 20422                           postdec2	equ	0xFDD
 20423                           plusw2	equ	0xFDB
 20424                           fsr2h	equ	0xFDA
 20425                           fsr2l	equ	0xFD9
 20426                           status	equ	0xFD8
 20427                           
 20428 ;; *************** function _LORAWAN_GetMaxPayloadSize *****************
 20429 ;; Defined at:
 20430 ;;		line 1556 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 20431 ;; Parameters:    Size  Location     Type
 20432 ;;		None
 20433 ;; Auto vars:     Size  Location     Type
 20434 ;;  result          1   10[BANK0 ] unsigned char 
 20435 ;;  macCommandsL    1    9[BANK0 ] unsigned char 
 20436 ;; Return value:  Size  Location     Type
 20437 ;;                  1    wreg      unsigned char 
 20438 ;; Registers used:
 20439 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20440 ;; Tracked objects:
 20441 ;;		On entry : 0/0
 20442 ;;		On exit  : 0/0
 20443 ;;		Unchanged: 0/0
 20444 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20445 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20446 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20447 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20448 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20449 ;;Total ram usage:        3 bytes
 20450 ;; Hardware stack levels used:    1
 20451 ;; Hardware stack levels required when called:    8
 20452 ;; This function calls:
 20453 ;;		_CountfOptsLength
 20454 ;; This function is called by:
 20455 ;;		_LORAWAN_Send
 20456 ;;		_AckRetransmissionCallback
 20457 ;; This function uses a non-reentrant model
 20458 ;;
 20459                           
 20460                           	psect	text99
 20461  00820E                     __ptext99:
 20462                           	opt stack 0
 20463  00820E                     _LORAWAN_GetMaxPayloadSize:
 20464                           	opt stack 21
 20465                           
 20466                           ;lorawan.c: 1558: uint8_t result = 0;
 20467                           
 20468                           ;incstack = 0
 20469  00820E  0E00               	movlw	0
 20470  008210  0100               	movlb	0	; () banked
 20471  008212  6F6A               	movwf	LORAWAN_GetMaxPayloadSize@result& (0+255),b
 20472                           
 20473                           ; BSR set to: 0
 20474                           ;lorawan.c: 1559: uint8_t macCommandsLength;
 20475                           ;lorawan.c: 1561: macCommandsLength = CountfOptsLength();
 20476  008214  ECA6  F037         	call	_CountfOptsLength	;wreg free
 20477  008218  0100               	movlb	0	; () banked
 20478  00821A  6F69               	movwf	LORAWAN_GetMaxPayloadSize@macCommandsLength& (0+255),b
 20479                           
 20480                           ; BSR set to: 0
 20481                           ;lorawan.c: 1563: if (loRa.crtMacCmdIndex == 0)
 20482  00821C  0102               	movlb	2	; () banked
 20483  00821E  51B1               	movf	(_loRa+167)& (0+255),w,b
 20484  008220  A4D8               	btfss	status,2,c
 20485  008222  D00F               	goto	l1231
 20486                           
 20487                           ; BSR set to: 2
 20488                           ;lorawan.c: 1564: {
 20489                           ;lorawan.c: 1565: result = maxPayloadSize[loRa.currentDataRate];
 20490  008224  51E9               	movf	(_loRa+223)& (0+255),w,b
 20491  008226  0D01               	mullw	1
 20492  008228  0E77               	movlw	low _maxPayloadSize
 20493  00822A  24F3               	addwf	prodl,w,c
 20494  00822C  6EF6               	movwf	tblptrl,c
 20495  00822E  0EFF               	movlw	high _maxPayloadSize
 20496  008230  20F4               	addwfc	prodh,w,c
 20497  008232  6EF7               	movwf	tblptrh,c
 20498  008234                     	if	1	;There are 3 active tblptr bytes
 20499  008234  6AF8               	clrf	tblptru,c
 20500  008236  0E00               	movlw	low (__mediumconst shr (0+16))
 20501  008238  22F8               	addwfc	tblptru,f,c
 20502  00823A                     	endif
 20503  00823A  0008               	tblrd		*
 20504  00823C  CFF5 F06A          	movff	tablat,LORAWAN_GetMaxPayloadSize@result
 20505                           
 20506                           ;lorawan.c: 1566: }
 20507  008240  D013               	goto	l1232
 20508  008242                     l1231:
 20509                           
 20510                           ; BSR set to: 2
 20511                           ;lorawan.c: 1567: else
 20512                           ;lorawan.c: 1568: {
 20513                           ;lorawan.c: 1569: result = maxPayloadSize[loRa.currentDataRate] - macCommandsLength ;
 20514                           
 20515                           ; BSR set to: 2
 20516  008242  51E9               	movf	(_loRa+223)& (0+255),w,b
 20517  008244  0D01               	mullw	1
 20518  008246  0E77               	movlw	low _maxPayloadSize
 20519  008248  24F3               	addwf	prodl,w,c
 20520  00824A  6EF6               	movwf	tblptrl,c
 20521  00824C  0EFF               	movlw	high _maxPayloadSize
 20522  00824E  20F4               	addwfc	prodh,w,c
 20523  008250  6EF7               	movwf	tblptrh,c
 20524  008252                     	if	1	;There are 3 active tblptr bytes
 20525  008252  6AF8               	clrf	tblptru,c
 20526  008254  0E00               	movlw	low (__mediumconst shr (0+16))
 20527  008256  22F8               	addwfc	tblptru,f,c
 20528  008258                     	endif
 20529  008258  0008               	tblrd		*
 20530  00825A  CFF5 F068          	movff	tablat,??_LORAWAN_GetMaxPayloadSize
 20531  00825E  0100               	movlb	0	; () banked
 20532  008260  5169               	movf	LORAWAN_GetMaxPayloadSize@macCommandsLength& (0+255),w,b
 20533  008262  0800               	sublw	0
 20534  008264  2568               	addwf	??_LORAWAN_GetMaxPayloadSize& (0+255),w,b
 20535  008266  6F6A               	movwf	LORAWAN_GetMaxPayloadSize@result& (0+255),b
 20536  008268                     l1232:
 20537                           
 20538                           ;lorawan.c: 1570: }
 20539                           ;lorawan.c: 1572: return result;
 20540                           
 20541                           ; BSR set to: 0
 20542  008268  0100               	movlb	0	; () banked
 20543  00826A  516A               	movf	LORAWAN_GetMaxPayloadSize@result& (0+255),w,b
 20544  00826C  0012               	return	
 20545  00826E                     __end_of_LORAWAN_GetMaxPayloadSize:
 20546                           	opt stack 0
 20547                           tosu	equ	0xFFF
 20548                           tosh	equ	0xFFE
 20549                           tosl	equ	0xFFD
 20550                           pclath	equ	0xFFA
 20551                           tblptru	equ	0xFF8
 20552                           tblptrh	equ	0xFF7
 20553                           tblptrl	equ	0xFF6
 20554                           tablat	equ	0xFF5
 20555                           prodh	equ	0xFF4
 20556                           prodl	equ	0xFF3
 20557                           intcon	equ	0xFF2
 20558                           intcon2	equ	0xFF1
 20559                           intcon3	equ	0xFF0
 20560                           indf0	equ	0xFEF
 20561                           postinc0	equ	0xFEE
 20562                           fsr0h	equ	0xFEA
 20563                           fsr0l	equ	0xFE9
 20564                           wreg	equ	0xFE8
 20565                           postinc1	equ	0xFE6
 20566                           postdec1	equ	0xFE5
 20567                           plusw1	equ	0xFE3
 20568                           fsr1h	equ	0xFE2
 20569                           fsr1l	equ	0xFE1
 20570                           indf2	equ	0xFDF
 20571                           postinc2	equ	0xFDE
 20572                           postdec2	equ	0xFDD
 20573                           plusw2	equ	0xFDB
 20574                           fsr2h	equ	0xFDA
 20575                           fsr2l	equ	0xFD9
 20576                           status	equ	0xFD8
 20577                           
 20578 ;; *************** function _AssemblePacket *****************
 20579 ;; Defined at:
 20580 ;;		line 1672 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 20581 ;; Parameters:    Size  Location     Type
 20582 ;;  confirmed       1    wreg     unsigned char 
 20583 ;;  port            1  103[BANK0 ] unsigned char 
 20584 ;;  buffer          2  104[BANK0 ] PTR unsigned char 
 20585 ;;		 -> testtest(2), NULL(0), 
 20586 ;;  bufferLength    2  106[BANK0 ] unsigned int 
 20587 ;; Auto vars:     Size  Location     Type
 20588 ;;  confirmed       1  110[BANK0 ] unsigned char 
 20589 ;;  bufferIndex     1  114[BANK0 ] unsigned char 
 20590 ;;  macCmdIdx       1  113[BANK0 ] unsigned char 
 20591 ;;  fCtrl           1  112[BANK0 ] struct .
 20592 ;;  mhdr            1  111[BANK0 ] struct .
 20593 ;; Return value:  Size  Location     Type
 20594 ;;                  1    wreg      void 
 20595 ;; Registers used:
 20596 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20597 ;; Tracked objects:
 20598 ;;		On entry : 0/0
 20599 ;;		On exit  : 0/0
 20600 ;;		Unchanged: 0/0
 20601 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20602 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20603 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20604 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20605 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20606 ;;Total ram usage:       12 bytes
 20607 ;; Hardware stack levels used:    1
 20608 ;; Hardware stack levels required when called:   12
 20609 ;; This function calls:
 20610 ;;		_AESCmac
 20611 ;;		_AssembleEncryptionBlock
 20612 ;;		_CountfOptsLength
 20613 ;;		_EncryptFRMPayload
 20614 ;;		_FindSmallestDataRate
 20615 ;;		_IncludeMacCommandsResponse
 20616 ;;		_memcpy
 20617 ;;		_memset
 20618 ;; This function is called by:
 20619 ;;		_LORAWAN_Send
 20620 ;; This function uses a non-reentrant model
 20621 ;;
 20622                           
 20623                           	psect	text100
 20624  001E8E                     __ptext100:
 20625                           	opt stack 0
 20626  001E8E                     _AssemblePacket:
 20627                           	opt stack 17
 20628                           
 20629                           ; BSR set to: 0
 20630                           ;incstack = 0
 20631                           ;AssemblePacket@confirmed stored from wreg
 20632  001E8E  0100               	movlb	0	; () banked
 20633  001E90  6FCE               	movwf	AssemblePacket@confirmed& (0+255),b
 20634                           
 20635                           ;lorawan.c: 1674: Mhdr_t mhdr;
 20636                           ;lorawan.c: 1675: uint8_t bufferIndex = 16;
 20637  001E92  0E10               	movlw	16
 20638  001E94  0100               	movlb	0	; () banked
 20639  001E96  6FD2               	movwf	AssemblePacket@bufferIndex& (0+255),b
 20640                           
 20641                           ;lorawan.c: 1676: FCtrl_t fCtrl;
 20642                           ;lorawan.c: 1677: uint8_t macCmdIdx = 0;
 20643  001E98  0E00               	movlw	0
 20644  001E9A  6FD1               	movwf	AssemblePacket@macCmdIdx& (0+255),b
 20645                           
 20646                           ; BSR set to: 0
 20647                           ;lorawan.c: 1679: memset (&mhdr, 0, sizeof (mhdr) );
 20648  001E9C  0ECF               	movlw	low AssemblePacket@mhdr
 20649  001E9E  6F60               	movwf	memset@p1& (0+255),b
 20650  001EA0  0E00               	movlw	high AssemblePacket@mhdr
 20651  001EA2  6F61               	movwf	(memset@p1+1)& (0+255),b
 20652  001EA4  0E00               	movlw	0
 20653  001EA6  6F63               	movwf	(memset@c+1)& (0+255),b
 20654  001EA8  0E00               	movlw	0
 20655  001EAA  6F62               	movwf	memset@c& (0+255),b
 20656  001EAC  0E00               	movlw	0
 20657  001EAE  6F65               	movwf	(memset@n+1)& (0+255),b
 20658  001EB0  0E01               	movlw	1
 20659  001EB2  6F64               	movwf	memset@n& (0+255),b
 20660  001EB4  ECCC  F046         	call	_memset	;wreg free
 20661                           
 20662                           ;lorawan.c: 1680: memset (&macBuffer[0], 0, sizeof (macBuffer) );
 20663  001EB8  0E8F               	movlw	low _macBuffer
 20664  001EBA  0100               	movlb	0	; () banked
 20665  001EBC  6F60               	movwf	memset@p1& (0+255),b
 20666  001EBE  0E06               	movlw	high _macBuffer
 20667  001EC0  6F61               	movwf	(memset@p1+1)& (0+255),b
 20668  001EC2  0E00               	movlw	0
 20669  001EC4  6F63               	movwf	(memset@c+1)& (0+255),b
 20670  001EC6  0E00               	movlw	0
 20671  001EC8  6F62               	movwf	memset@c& (0+255),b
 20672  001ECA  0E01               	movlw	1
 20673  001ECC  6F65               	movwf	(memset@n+1)& (0+255),b
 20674  001ECE  0E0F               	movlw	15
 20675  001ED0  6F64               	movwf	memset@n& (0+255),b
 20676  001ED2  ECCC  F046         	call	_memset	;wreg free
 20677                           
 20678                           ;lorawan.c: 1681: memset (aesBuffer, 0, sizeof (aesBuffer) );
 20679  001ED6  0EA0               	movlw	low _aesBuffer
 20680  001ED8  0100               	movlb	0	; () banked
 20681  001EDA  6F60               	movwf	memset@p1& (0+255),b
 20682  001EDC  0E03               	movlw	high _aesBuffer
 20683  001EDE  6F61               	movwf	(memset@p1+1)& (0+255),b
 20684  001EE0  0E00               	movlw	0
 20685  001EE2  6F63               	movwf	(memset@c+1)& (0+255),b
 20686  001EE4  0E00               	movlw	0
 20687  001EE6  6F62               	movwf	memset@c& (0+255),b
 20688  001EE8  0E00               	movlw	0
 20689  001EEA  6F65               	movwf	(memset@n+1)& (0+255),b
 20690  001EEC  0E10               	movlw	16
 20691  001EEE  6F64               	movwf	memset@n& (0+255),b
 20692  001EF0  ECCC  F046         	call	_memset	;wreg free
 20693                           
 20694                           ;lorawan.c: 1683: if (confirmed == 1)
 20695  001EF4  0100               	movlb	0	; () banked
 20696  001EF6  05CE               	decf	AssemblePacket@confirmed& (0+255),w,b
 20697  001EF8  A4D8               	btfss	status,2,c
 20698  001EFA  D007               	goto	l1261
 20699                           
 20700                           ; BSR set to: 0
 20701                           ;lorawan.c: 1684: {
 20702                           ;lorawan.c: 1685: mhdr.bits.mType = FRAME_TYPE_DATA_CONFIRMED_UP;
 20703  001EFC  51CF               	movf	AssemblePacket@mhdr& (0+255),w,b
 20704  001EFE  0B1F               	andlw	-225
 20705  001F00  0980               	iorlw	128
 20706  001F02  6FCF               	movwf	AssemblePacket@mhdr& (0+255),b
 20707                           
 20708                           ; BSR set to: 0
 20709                           ;lorawan.c: 1686: loRa.lorawanMacStatus.ackRequiredFromNextDownlinkMessage = 1;
 20710  001F04  0102               	movlb	2	; () banked
 20711  001F06  810A               	bsf	_loRa& (0+255),0,b
 20712                           
 20713                           ;lorawan.c: 1687: }
 20714  001F08  D005               	goto	l1262
 20715  001F0A                     l1261:
 20716                           
 20717                           ;lorawan.c: 1688: else
 20718                           ;lorawan.c: 1689: {
 20719                           ;lorawan.c: 1690: mhdr.bits.mType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 20720                           
 20721                           ; BSR set to: 2
 20722  001F0A  0100               	movlb	0	; () banked
 20723  001F0C  51CF               	movf	AssemblePacket@mhdr& (0+255),w,b
 20724  001F0E  0B1F               	andlw	-225
 20725  001F10  0940               	iorlw	64
 20726  001F12  6FCF               	movwf	AssemblePacket@mhdr& (0+255),b
 20727  001F14                     l1262:
 20728                           
 20729                           ;lorawan.c: 1691: }
 20730                           ;lorawan.c: 1692: mhdr.bits.major = 0;
 20731  001F14  0EFC               	movlw	-4
 20732  001F16  0100               	movlb	0	; () banked
 20733  001F18  17CF               	andwf	AssemblePacket@mhdr& (0+255),f,b
 20734                           
 20735                           ; BSR set to: 0
 20736                           ;lorawan.c: 1693: mhdr.bits.rfu = 0;
 20737  001F1A  95CF               	bcf	AssemblePacket@mhdr& (0+255),2,b
 20738  001F1C  97CF               	bcf	AssemblePacket@mhdr& (0+255),3,b
 20739  001F1E  99CF               	bcf	AssemblePacket@mhdr& (0+255),4,b
 20740                           
 20741                           ; BSR set to: 0
 20742                           ;lorawan.c: 1694: macBuffer[bufferIndex++] = mhdr.value;
 20743  001F20  51D2               	movf	AssemblePacket@bufferIndex& (0+255),w,b
 20744  001F22  0D01               	mullw	1
 20745  001F24  0E8F               	movlw	low _macBuffer
 20746  001F26  24F3               	addwf	prodl,w,c
 20747  001F28  6ED9               	movwf	fsr2l,c
 20748  001F2A  0E06               	movlw	high _macBuffer
 20749  001F2C  20F4               	addwfc	prodh,w,c
 20750  001F2E  6EDA               	movwf	fsr2h,c
 20751  001F30  C0CF  FFDF         	movff	AssemblePacket@mhdr,indf2
 20752                           
 20753                           ; BSR set to: 0
 20754  001F34  2BD2               	incf	AssemblePacket@bufferIndex& (0+255),f,b
 20755                           
 20756                           ; BSR set to: 0
 20757                           ;lorawan.c: 1696: memcpy (&macBuffer[bufferIndex], loRa.activationParameters.deviceAddre
      +                          ss.buffer, sizeof (loRa.activationParameters.deviceAddress.buffer) );
 20758  001F36  51D2               	movf	AssemblePacket@bufferIndex& (0+255),w,b
 20759  001F38  0D01               	mullw	1
 20760  001F3A  0E8F               	movlw	low _macBuffer
 20761  001F3C  24F3               	addwf	prodl,w,c
 20762  001F3E  6F60               	movwf	memcpy@d1& (0+255),b
 20763  001F40  0E06               	movlw	high _macBuffer
 20764  001F42  20F4               	addwfc	prodh,w,c
 20765  001F44  6F61               	movwf	(memcpy@d1+1)& (0+255),b
 20766  001F46  0E28               	movlw	low (_loRa+30)
 20767  001F48  6F62               	movwf	memcpy@s1& (0+255),b
 20768  001F4A  0E02               	movlw	high (_loRa+30)
 20769  001F4C  6F63               	movwf	(memcpy@s1+1)& (0+255),b
 20770  001F4E  0E00               	movlw	0
 20771  001F50  6F65               	movwf	(memcpy@n+1)& (0+255),b
 20772  001F52  0E04               	movlw	4
 20773  001F54  6F64               	movwf	memcpy@n& (0+255),b
 20774  001F56  EC37  F041         	call	_memcpy	;wreg free
 20775                           
 20776                           ;lorawan.c: 1697: bufferIndex = bufferIndex + sizeof(loRa.activationParameters.deviceAdd
      +                          ress.buffer);
 20777  001F5A  0100               	movlb	0	; () banked
 20778  001F5C  51D2               	movf	AssemblePacket@bufferIndex& (0+255),w,b
 20779  001F5E  0F04               	addlw	4
 20780  001F60  6FD2               	movwf	AssemblePacket@bufferIndex& (0+255),b
 20781                           
 20782                           ; BSR set to: 0
 20783                           ;lorawan.c: 1699: fCtrl.value = 0;
 20784  001F62  0E00               	movlw	0
 20785  001F64  6FD0               	movwf	AssemblePacket@fCtrl& (0+255),b
 20786                           
 20787                           ; BSR set to: 0
 20788                           ;lorawan.c: 1701: if (loRa.macStatus.adr == 1)
 20789  001F66  0102               	movlb	2	; () banked
 20790  001F68  AD0C               	btfss	(_loRa+2)& (0+255),6,b
 20791  001F6A  D047               	goto	l1271
 20792                           
 20793                           ; BSR set to: 2
 20794                           ;lorawan.c: 1702: {
 20795                           ;lorawan.c: 1703: fCtrl.adr = 1;
 20796  001F6C  0100               	movlb	0	; () banked
 20797  001F6E  8FD0               	bsf	AssemblePacket@fCtrl& (0+255),7,b
 20798                           
 20799                           ; BSR set to: 0
 20800                           ;lorawan.c: 1704: if(loRa.currentDataRate > loRa.minDataRate)
 20801  001F70  0102               	movlb	2	; () banked
 20802  001F72  51E9               	movf	(_loRa+223)& (0+255),w,b
 20803  001F74  5DF5               	subwf	(_loRa+235)& (0+255),w,b
 20804  001F76  B0D8               	btfsc	status,0,c
 20805  001F78  D03F               	goto	l1264
 20806                           
 20807                           ; BSR set to: 2
 20808                           ;lorawan.c: 1705: {
 20809                           ;lorawan.c: 1706: fCtrl.adrAckReq = 1;
 20810  001F7A  0100               	movlb	0	; () banked
 20811  001F7C  8DD0               	bsf	AssemblePacket@fCtrl& (0+255),6,b
 20812                           
 20813                           ;lorawan.c: 1707: loRa.lorawanMacStatus.adrAckRequest = 1;
 20814  001F7E  0102               	movlb	2	; () banked
 20815  001F80  890A               	bsf	_loRa& (0+255),4,b
 20816                           
 20817                           ; BSR set to: 2
 20818                           ;lorawan.c: 1708: loRa.adrAckCnt ++;
 20819  001F82  4BDA               	infsnz	(_loRa+208)& (0+255),f,b
 20820  001F84  2BDB               	incf	(_loRa+209)& (0+255),f,b
 20821                           
 20822                           ; BSR set to: 2
 20823                           ;lorawan.c: 1710: if ( loRa.adrAckCnt == loRa.protocolParameters.adrAckLimit )
 20824  001F86  51AC               	movf	(_loRa+162)& (0+255),w,b
 20825  001F88  0100               	movlb	0	; () banked
 20826  001F8A  6FCC               	movwf	??_AssemblePacket& (0+255),b
 20827  001F8C  6BCD               	clrf	(??_AssemblePacket+1)& (0+255),b
 20828  001F8E  0102               	movlb	2	; () banked
 20829  001F90  51DA               	movf	(_loRa+208)& (0+255),w,b
 20830  001F92  0100               	movlb	0	; () banked
 20831  001F94  19CC               	xorwf	??_AssemblePacket& (0+255),w,b
 20832  001F96  E10C               	bnz	l10389
 20833  001F98  0102               	movlb	2	; () banked
 20834  001F9A  51DB               	movf	(_loRa+209)& (0+255),w,b
 20835  001F9C  0100               	movlb	0	; () banked
 20836  001F9E  19CD               	xorwf	(??_AssemblePacket+1)& (0+255),w,b
 20837  001FA0  A4D8               	btfss	status,2,c
 20838  001FA2  D006               	goto	l1265
 20839                           
 20840                           ; BSR set to: 0
 20841                           ;lorawan.c: 1711: {
 20842                           ;lorawan.c: 1712: loRa.counterAdrAckDelay = 0;
 20843  001FA4  0E00               	movlw	0
 20844  001FA6  0102               	movlb	2	; () banked
 20845  001FA8  6FF8               	movwf	(_loRa+238)& (0+255),b
 20846  001FAA  D023               	goto	l10401
 20847  001FAC                     l10387:
 20848                           
 20849                           ; BSR set to: 0
 20850                           ;lorawan.c: 1714: loRa.lorawanMacStatus.adrAckRequest = 0;
 20851  001FAC  0102               	movlb	2	; () banked
 20852  001FAE  D024               	goto	l1264
 20853  001FB0                     l1265:
 20854  001FB0                     l10389:
 20855                           
 20856                           ;lorawan.c: 1716: else
 20857                           ;lorawan.c: 1717: {
 20858                           ;lorawan.c: 1718: if (loRa.adrAckCnt > loRa.protocolParameters.adrAckLimit)
 20859  001FB0  0102               	movlb	2	; () banked
 20860  001FB2  51AC               	movf	(_loRa+162)& (0+255),w,b
 20861  001FB4  0100               	movlb	0	; () banked
 20862  001FB6  6FCC               	movwf	??_AssemblePacket& (0+255),b
 20863  001FB8  6BCD               	clrf	(??_AssemblePacket+1)& (0+255),b
 20864  001FBA  0102               	movlb	2	; () banked
 20865  001FBC  51DA               	movf	(_loRa+208)& (0+255),w,b
 20866  001FBE  0100               	movlb	0	; () banked
 20867  001FC0  5DCC               	subwf	??_AssemblePacket& (0+255),w,b
 20868  001FC2  0102               	movlb	2	; () banked
 20869  001FC4  51DB               	movf	(_loRa+209)& (0+255),w,b
 20870  001FC6  0100               	movlb	0	; () banked
 20871  001FC8  59CD               	subwfb	(??_AssemblePacket+1)& (0+255),w,b
 20872  001FCA  B0D8               	btfsc	status,0,c
 20873  001FCC  D013               	goto	l1267
 20874                           
 20875                           ; BSR set to: 0
 20876                           ;lorawan.c: 1719: {
 20877                           ;lorawan.c: 1721: loRa.counterAdrAckDelay ++ ;
 20878  001FCE  0102               	movlb	2	; () banked
 20879  001FD0  2BF8               	incf	(_loRa+238)& (0+255),f,b
 20880                           
 20881                           ; BSR set to: 2
 20882                           ;lorawan.c: 1724: if (loRa.counterAdrAckDelay > loRa.protocolParameters.adrAckDelay)
 20883  001FD2  51F8               	movf	(_loRa+238)& (0+255),w,b
 20884  001FD4  5DAD               	subwf	(_loRa+163)& (0+255),w,b
 20885  001FD6  B0D8               	btfsc	status,0,c
 20886  001FD8  D010               	goto	l1271
 20887                           
 20888                           ; BSR set to: 2
 20889                           ;lorawan.c: 1725: {
 20890                           ;lorawan.c: 1726: loRa.counterAdrAckDelay = 0;
 20891  001FDA  0E00               	movlw	0
 20892  001FDC  6FF8               	movwf	(_loRa+238)& (0+255),b
 20893                           
 20894                           ; BSR set to: 2
 20895                           ;lorawan.c: 1728: if(0 == FindSmallestDataRate())
 20896  001FDE  EC27  F035         	call	_FindSmallestDataRate	;wreg free
 20897  001FE2  0900               	iorlw	0
 20898  001FE4  A4D8               	btfss	status,2,c
 20899  001FE6  D009               	goto	l1271
 20900                           
 20901                           ;lorawan.c: 1729: {
 20902                           ;lorawan.c: 1731: loRa.adrAckCnt = 0;
 20903  001FE8  0E00               	movlw	0
 20904  001FEA  0102               	movlb	2	; () banked
 20905  001FEC  6FDB               	movwf	(_loRa+209)& (0+255),b
 20906  001FEE  0E00               	movlw	0
 20907  001FF0  6FDA               	movwf	(_loRa+208)& (0+255),b
 20908  001FF2                     l10401:
 20909                           
 20910                           ; BSR set to: 2
 20911                           ;lorawan.c: 1732: fCtrl.adrAckReq = 0;
 20912  001FF2  0100               	movlb	0	; () banked
 20913  001FF4                     l1267:
 20914                           
 20915                           ; BSR set to: 0
 20916                           ;lorawan.c: 1737: else
 20917                           ;lorawan.c: 1738: {
 20918                           ;lorawan.c: 1739: fCtrl.adrAckReq = 0;
 20919  001FF4  9DD0               	bcf	AssemblePacket@fCtrl& (0+255),6,b
 20920  001FF6  D7DA               	goto	l10387
 20921  001FF8                     l1264:
 20922                           
 20923                           ; BSR set to: 2
 20924                           ;lorawan.c: 1744: else
 20925                           ;lorawan.c: 1745: {
 20926                           ;lorawan.c: 1746: loRa.lorawanMacStatus.adrAckRequest = 0;
 20927  001FF8  990A               	bcf	_loRa& (0+255),4,b
 20928  001FFA                     l1271:
 20929                           
 20930                           ;lorawan.c: 1747: }
 20931                           ;lorawan.c: 1748: }
 20932                           ;lorawan.c: 1750: if (loRa.lorawanMacStatus.ackRequiredFromNextUplinkMessage == 1)
 20933                           
 20934                           ; BSR set to: 2
 20935  001FFA  0102               	movlb	2	; () banked
 20936  001FFC  A30A               	btfss	_loRa& (0+255),1,b
 20937  001FFE  D004               	goto	l1272
 20938                           
 20939                           ; BSR set to: 2
 20940                           ;lorawan.c: 1751: {
 20941                           ;lorawan.c: 1752: fCtrl.ack = 1;
 20942  002000  0100               	movlb	0	; () banked
 20943  002002  8BD0               	bsf	AssemblePacket@fCtrl& (0+255),5,b
 20944                           
 20945                           ;lorawan.c: 1753: loRa.lorawanMacStatus.ackRequiredFromNextUplinkMessage = 0;
 20946  002004  0102               	movlb	2	; () banked
 20947  002006  930A               	bcf	_loRa& (0+255),1,b
 20948  002008                     l1272:
 20949                           
 20950                           ; BSR set to: 2
 20951                           ;lorawan.c: 1754: }
 20952                           ;lorawan.c: 1756: fCtrl.fPending = 0;
 20953  002008  0100               	movlb	0	; () banked
 20954  00200A  99D0               	bcf	AssemblePacket@fCtrl& (0+255),4,b
 20955                           
 20956                           ; BSR set to: 0
 20957                           ;lorawan.c: 1758: if ( (loRa.crtMacCmdIndex == 0) || (bufferLength == 0) )
 20958  00200C  0102               	movlb	2	; () banked
 20959  00200E  51B1               	movf	(_loRa+167)& (0+255),w,b
 20960  002010  B4D8               	btfsc	status,2,c
 20961  002012  D005               	goto	u10180
 20962                           
 20963                           ; BSR set to: 2
 20964  002014  0100               	movlb	0	; () banked
 20965  002016  51CA               	movf	AssemblePacket@bufferLength& (0+255),w,b
 20966  002018  11CB               	iorwf	(AssemblePacket@bufferLength+1)& (0+255),w,b
 20967  00201A  A4D8               	btfss	status,2,c
 20968  00201C  D006               	goto	l1273
 20969  00201E                     u10180:
 20970                           
 20971                           ;lorawan.c: 1759: {
 20972                           ;lorawan.c: 1760: fCtrl.fOptsLen = 0;
 20973  00201E  0100               	movlb	0	; () banked
 20974  002020  91D0               	bcf	AssemblePacket@fCtrl& (0+255),0,b
 20975  002022  93D0               	bcf	AssemblePacket@fCtrl& (0+255),1,b
 20976  002024  95D0               	bcf	AssemblePacket@fCtrl& (0+255),2,b
 20977  002026  97D0               	bcf	AssemblePacket@fCtrl& (0+255),3,b
 20978                           
 20979                           ;lorawan.c: 1761: }
 20980  002028  D009               	goto	l1276
 20981  00202A                     l1273:
 20982                           
 20983                           ; BSR set to: 0
 20984                           ;lorawan.c: 1763: else
 20985                           ;lorawan.c: 1764: {
 20986                           ;lorawan.c: 1765: fCtrl.fOptsLen = CountfOptsLength();
 20987                           
 20988                           ; BSR set to: 0
 20989  00202A  ECA6  F037         	call	_CountfOptsLength	;wreg free
 20990  00202E  0100               	movlb	0	; () banked
 20991  002030  6FCC               	movwf	??_AssemblePacket& (0+255),b
 20992  002032  51D0               	movf	AssemblePacket@fCtrl& (0+255),w,b
 20993  002034  19CC               	xorwf	??_AssemblePacket& (0+255),w,b
 20994  002036  0BF0               	andlw	-16
 20995  002038  19CC               	xorwf	??_AssemblePacket& (0+255),w,b
 20996  00203A  6FD0               	movwf	AssemblePacket@fCtrl& (0+255),b
 20997  00203C                     l1276:
 20998                           
 20999                           ; BSR set to: 0
 21000                           ;lorawan.c: 1766: }
 21001                           ;lorawan.c: 1767: macBuffer[bufferIndex++] = fCtrl.value;
 21002                           
 21003                           ; BSR set to: 0
 21004  00203C  51D2               	movf	AssemblePacket@bufferIndex& (0+255),w,b
 21005  00203E  0D01               	mullw	1
 21006  002040  0E8F               	movlw	low _macBuffer
 21007  002042  24F3               	addwf	prodl,w,c
 21008  002044  6ED9               	movwf	fsr2l,c
 21009  002046  0E06               	movlw	high _macBuffer
 21010  002048  20F4               	addwfc	prodh,w,c
 21011  00204A  6EDA               	movwf	fsr2h,c
 21012  00204C  C0D0  FFDF         	movff	AssemblePacket@fCtrl,indf2
 21013                           
 21014                           ; BSR set to: 0
 21015  002050  2BD2               	incf	AssemblePacket@bufferIndex& (0+255),f,b
 21016                           
 21017                           ; BSR set to: 0
 21018                           ;lorawan.c: 1769: memcpy (&macBuffer[bufferIndex], &loRa.fCntUp.members.valueLow, sizeof
      +                           (loRa.fCntUp.members.valueLow) );
 21019  002052  51D2               	movf	AssemblePacket@bufferIndex& (0+255),w,b
 21020  002054  0D01               	mullw	1
 21021  002056  0E8F               	movlw	low _macBuffer
 21022  002058  24F3               	addwf	prodl,w,c
 21023  00205A  6F60               	movwf	memcpy@d1& (0+255),b
 21024  00205C  0E06               	movlw	high _macBuffer
 21025  00205E  20F4               	addwfc	prodh,w,c
 21026  002060  6F61               	movwf	(memcpy@d1+1)& (0+255),b
 21027  002062  0E10               	movlw	low (_loRa+6)
 21028  002064  6F62               	movwf	memcpy@s1& (0+255),b
 21029  002066  0E02               	movlw	high (_loRa+6)
 21030  002068  6F63               	movwf	(memcpy@s1+1)& (0+255),b
 21031  00206A  0E00               	movlw	0
 21032  00206C  6F65               	movwf	(memcpy@n+1)& (0+255),b
 21033  00206E  0E02               	movlw	2
 21034  002070  6F64               	movwf	memcpy@n& (0+255),b
 21035  002072  EC37  F041         	call	_memcpy	;wreg free
 21036                           
 21037                           ;lorawan.c: 1771: bufferIndex = bufferIndex + sizeof(loRa.fCntUp.members.valueLow);
 21038  002076  0100               	movlb	0	; () banked
 21039  002078  51D2               	movf	AssemblePacket@bufferIndex& (0+255),w,b
 21040  00207A  0F02               	addlw	2
 21041  00207C  6FD2               	movwf	AssemblePacket@bufferIndex& (0+255),b
 21042                           
 21043                           ; BSR set to: 0
 21044                           ;lorawan.c: 1773: if ( (loRa.crtMacCmdIndex != 0) && (bufferLength != 0) )
 21045  00207E  0102               	movlb	2	; () banked
 21046  002080  51B1               	movf	(_loRa+167)& (0+255),w,b
 21047  002082  B4D8               	btfsc	status,2,c
 21048  002084  D011               	goto	l1277
 21049                           
 21050                           ; BSR set to: 2
 21051  002086  0100               	movlb	0	; () banked
 21052  002088  51CA               	movf	AssemblePacket@bufferLength& (0+255),w,b
 21053  00208A  11CB               	iorwf	(AssemblePacket@bufferLength+1)& (0+255),w,b
 21054  00208C  B4D8               	btfsc	status,2,c
 21055  00208E  D00C               	goto	l1277
 21056                           
 21057                           ; BSR set to: 0
 21058                           ;lorawan.c: 1774: {
 21059                           ;lorawan.c: 1775: IncludeMacCommandsResponse (macBuffer, &bufferIndex, 1);
 21060  002090  0E8F               	movlw	low _macBuffer
 21061  002092  6F60               	movwf	IncludeMacCommandsResponse@macBuffer& (0+255),b
 21062  002094  0E06               	movlw	high _macBuffer
 21063  002096  6F61               	movwf	(IncludeMacCommandsResponse@macBuffer+1)& (0+255),b
 21064  002098  0ED2               	movlw	low AssemblePacket@bufferIndex
 21065  00209A  6F62               	movwf	IncludeMacCommandsResponse@pBufferIndex& (0+255),b
 21066  00209C  0E00               	movlw	high AssemblePacket@bufferIndex
 21067  00209E  6F63               	movwf	(IncludeMacCommandsResponse@pBufferIndex+1)& (0+255),b
 21068  0020A0  0E01               	movlw	1
 21069  0020A2  6F64               	movwf	IncludeMacCommandsResponse@bIncludeInFopts& (0+255),b
 21070  0020A4  EC16  F00D         	call	_IncludeMacCommandsResponse	;wreg free
 21071  0020A8                     l1277:
 21072                           
 21073                           ;lorawan.c: 1776: }
 21074                           ;lorawan.c: 1778: macBuffer[bufferIndex++] = port;
 21075  0020A8  0100               	movlb	0	; () banked
 21076  0020AA  51D2               	movf	AssemblePacket@bufferIndex& (0+255),w,b
 21077  0020AC  0D01               	mullw	1
 21078  0020AE  0E8F               	movlw	low _macBuffer
 21079  0020B0  24F3               	addwf	prodl,w,c
 21080  0020B2  6ED9               	movwf	fsr2l,c
 21081  0020B4  0E06               	movlw	high _macBuffer
 21082  0020B6  20F4               	addwfc	prodh,w,c
 21083  0020B8  6EDA               	movwf	fsr2h,c
 21084  0020BA  C0C7  FFDF         	movff	AssemblePacket@port,indf2
 21085                           
 21086                           ; BSR set to: 0
 21087  0020BE  2BD2               	incf	AssemblePacket@bufferIndex& (0+255),f,b
 21088                           
 21089                           ; BSR set to: 0
 21090                           ;lorawan.c: 1780: if (bufferLength != 0)
 21091  0020C0  51CA               	movf	AssemblePacket@bufferLength& (0+255),w,b
 21092  0020C2  11CB               	iorwf	(AssemblePacket@bufferLength+1)& (0+255),w,b
 21093  0020C4  B4D8               	btfsc	status,2,c
 21094  0020C6  D035               	goto	l1278
 21095                           
 21096                           ; BSR set to: 0
 21097                           ;lorawan.c: 1781: {
 21098                           ;lorawan.c: 1782: memcpy (&macBuffer[bufferIndex], buffer, bufferLength);
 21099  0020C8  51D2               	movf	AssemblePacket@bufferIndex& (0+255),w,b
 21100  0020CA  0D01               	mullw	1
 21101  0020CC  0E8F               	movlw	low _macBuffer
 21102  0020CE  24F3               	addwf	prodl,w,c
 21103  0020D0  6F60               	movwf	memcpy@d1& (0+255),b
 21104  0020D2  0E06               	movlw	high _macBuffer
 21105  0020D4  20F4               	addwfc	prodh,w,c
 21106  0020D6  6F61               	movwf	(memcpy@d1+1)& (0+255),b
 21107  0020D8  C0C8  F062         	movff	AssemblePacket@buffer,memcpy@s1
 21108  0020DC  C0C9  F063         	movff	AssemblePacket@buffer+1,memcpy@s1+1
 21109  0020E0  C0CA  F064         	movff	AssemblePacket@bufferLength,memcpy@n
 21110  0020E4  C0CB  F065         	movff	AssemblePacket@bufferLength+1,memcpy@n+1
 21111  0020E8  EC37  F041         	call	_memcpy	;wreg free
 21112                           
 21113                           ;lorawan.c: 1783: EncryptFRMPayload (buffer, bufferLength, 0, loRa.fCntUp.value, loRa.ac
      +                          tivationParameters.applicationSessionKey, bufferIndex, macBuffer, 0);
 21114  0020EC  C0C8  F091         	movff	AssemblePacket@buffer,EncryptFRMPayload@buffer
 21115  0020F0  C0C9  F092         	movff	AssemblePacket@buffer+1,EncryptFRMPayload@buffer+1
 21116  0020F4  C0CA  F093         	movff	AssemblePacket@bufferLength,EncryptFRMPayload@bufferLength
 21117  0020F8  0E00               	movlw	0
 21118  0020FA  0100               	movlb	0	; () banked
 21119  0020FC  6F94               	movwf	EncryptFRMPayload@dir& (0+255),b
 21120  0020FE  C210  F095         	movff	_loRa+6,EncryptFRMPayload@frameCounter
 21121  002102  C211  F096         	movff	_loRa+7,EncryptFRMPayload@frameCounter+1
 21122  002106  C212  F097         	movff	_loRa+8,EncryptFRMPayload@frameCounter+2
 21123  00210A  C213  F098         	movff	_loRa+9,EncryptFRMPayload@frameCounter+3
 21124  00210E  0E3C               	movlw	low (_loRa+50)
 21125  002110  6F99               	movwf	EncryptFRMPayload@key& (0+255),b
 21126  002112  0E02               	movlw	high (_loRa+50)
 21127  002114  6F9A               	movwf	(EncryptFRMPayload@key+1)& (0+255),b
 21128  002116  C0D2  F09B         	movff	AssemblePacket@bufferIndex,EncryptFRMPayload@macBufferIndex
 21129  00211A  0E8F               	movlw	low _macBuffer
 21130  00211C  6F9C               	movwf	EncryptFRMPayload@bufferToBeEncrypted& (0+255),b
 21131  00211E  0E06               	movlw	high _macBuffer
 21132  002120  6F9D               	movwf	(EncryptFRMPayload@bufferToBeEncrypted+1)& (0+255),b
 21133  002122  0E00               	movlw	0
 21134  002124  6F9E               	movwf	EncryptFRMPayload@multicastStatus& (0+255),b
 21135  002126  EC96  F027         	call	_EncryptFRMPayload	;wreg free
 21136                           
 21137                           ;lorawan.c: 1784: bufferIndex = bufferIndex + bufferLength;
 21138  00212A  0100               	movlb	0	; () banked
 21139  00212C  51D2               	movf	AssemblePacket@bufferIndex& (0+255),w,b
 21140  00212E  25CA               	addwf	AssemblePacket@bufferLength& (0+255),w,b
 21141  002130  D033               	goto	L11
 21142  002132                     l1278:
 21143                           
 21144                           ; BSR set to: 0
 21145                           ;lorawan.c: 1786: else if ( (loRa.crtMacCmdIndex > 0) )
 21146                           
 21147                           ; BSR set to: 0
 21148  002132  0102               	movlb	2	; () banked
 21149  002134  51B1               	movf	(_loRa+167)& (0+255),w,b
 21150  002136  B4D8               	btfsc	status,2,c
 21151  002138  D030               	goto	l1280
 21152                           
 21153                           ; BSR set to: 2
 21154                           ;lorawan.c: 1787: {
 21155                           ;lorawan.c: 1790: IncludeMacCommandsResponse (radioBuffer, &macCmdIdx, 0 );
 21156  00213A  0E80               	movlw	low _radioBuffer
 21157  00213C  0100               	movlb	0	; () banked
 21158  00213E  6F60               	movwf	IncludeMacCommandsResponse@macBuffer& (0+255),b
 21159  002140  0E05               	movlw	high _radioBuffer
 21160  002142  6F61               	movwf	(IncludeMacCommandsResponse@macBuffer+1)& (0+255),b
 21161  002144  0ED1               	movlw	low AssemblePacket@macCmdIdx
 21162  002146  6F62               	movwf	IncludeMacCommandsResponse@pBufferIndex& (0+255),b
 21163  002148  0E00               	movlw	high AssemblePacket@macCmdIdx
 21164  00214A  6F63               	movwf	(IncludeMacCommandsResponse@pBufferIndex+1)& (0+255),b
 21165  00214C  0E00               	movlw	0
 21166  00214E  6F64               	movwf	IncludeMacCommandsResponse@bIncludeInFopts& (0+255),b
 21167  002150  EC16  F00D         	call	_IncludeMacCommandsResponse	;wreg free
 21168                           
 21169                           ;lorawan.c: 1791: EncryptFRMPayload (radioBuffer, macCmdIdx, 0, loRa.fCntUp.value, loRa.
      +                          activationParameters.networkSessionKey, bufferIndex, macBuffer, 0);
 21170  002154  0E80               	movlw	low _radioBuffer
 21171  002156  0100               	movlb	0	; () banked
 21172  002158  6F91               	movwf	EncryptFRMPayload@buffer& (0+255),b
 21173  00215A  0E05               	movlw	high _radioBuffer
 21174  00215C  6F92               	movwf	(EncryptFRMPayload@buffer+1)& (0+255),b
 21175  00215E  C0D1  F093         	movff	AssemblePacket@macCmdIdx,EncryptFRMPayload@bufferLength
 21176  002162  0E00               	movlw	0
 21177  002164  6F94               	movwf	EncryptFRMPayload@dir& (0+255),b
 21178  002166  C210  F095         	movff	_loRa+6,EncryptFRMPayload@frameCounter
 21179  00216A  C211  F096         	movff	_loRa+7,EncryptFRMPayload@frameCounter+1
 21180  00216E  C212  F097         	movff	_loRa+8,EncryptFRMPayload@frameCounter+2
 21181  002172  C213  F098         	movff	_loRa+9,EncryptFRMPayload@frameCounter+3
 21182  002176  0E2C               	movlw	low (_loRa+34)
 21183  002178  6F99               	movwf	EncryptFRMPayload@key& (0+255),b
 21184  00217A  0E02               	movlw	high (_loRa+34)
 21185  00217C  6F9A               	movwf	(EncryptFRMPayload@key+1)& (0+255),b
 21186  00217E  C0D2  F09B         	movff	AssemblePacket@bufferIndex,EncryptFRMPayload@macBufferIndex
 21187  002182  0E8F               	movlw	low _macBuffer
 21188  002184  6F9C               	movwf	EncryptFRMPayload@bufferToBeEncrypted& (0+255),b
 21189  002186  0E06               	movlw	high _macBuffer
 21190  002188  6F9D               	movwf	(EncryptFRMPayload@bufferToBeEncrypted+1)& (0+255),b
 21191  00218A  0E00               	movlw	0
 21192  00218C  6F9E               	movwf	EncryptFRMPayload@multicastStatus& (0+255),b
 21193  00218E  EC96  F027         	call	_EncryptFRMPayload	;wreg free
 21194                           
 21195                           ;lorawan.c: 1792: bufferIndex = bufferIndex + macCmdIdx;
 21196  002192  0100               	movlb	0	; () banked
 21197  002194  51D2               	movf	AssemblePacket@bufferIndex& (0+255),w,b
 21198  002196  25D1               	addwf	AssemblePacket@macCmdIdx& (0+255),w,b
 21199  002198                     L11:
 21200  002198  6FD2               	movwf	AssemblePacket@bufferIndex& (0+255),b
 21201  00219A                     l1280:
 21202                           
 21203                           ;lorawan.c: 1793: }
 21204                           ;lorawan.c: 1795: AssembleEncryptionBlock (0, loRa.fCntUp.value, bufferIndex - 16, 0x49,
      +                           0);
 21205                           
 21206                           ; BSR set to: 0
 21207                           
 21208                           ; BSR set to: 0
 21209  00219A  C210  F06B         	movff	_loRa+6,AssembleEncryptionBlock@frameCounter
 21210  00219E  C211  F06C         	movff	_loRa+7,AssembleEncryptionBlock@frameCounter+1
 21211  0021A2  C212  F06D         	movff	_loRa+8,AssembleEncryptionBlock@frameCounter+2
 21212  0021A6  C213  F06E         	movff	_loRa+9,AssembleEncryptionBlock@frameCounter+3
 21213  0021AA  0100               	movlb	0	; () banked
 21214  0021AC  51D2               	movf	AssemblePacket@bufferIndex& (0+255),w,b
 21215  0021AE  0FF0               	addlw	240
 21216  0021B0  6F6F               	movwf	AssembleEncryptionBlock@blockId& (0+255),b
 21217  0021B2  0E49               	movlw	73
 21218  0021B4  6F70               	movwf	AssembleEncryptionBlock@firstByte& (0+255),b
 21219  0021B6  0E00               	movlw	0
 21220  0021B8  6F71               	movwf	AssembleEncryptionBlock@multicastStatus& (0+255),b
 21221  0021BA  0E00               	movlw	0
 21222  0021BC  ECD6  F032         	call	_AssembleEncryptionBlock
 21223                           
 21224                           ;lorawan.c: 1796: memcpy (&macBuffer[0], aesBuffer, sizeof (aesBuffer));
 21225  0021C0  0E8F               	movlw	low _macBuffer
 21226  0021C2  0100               	movlb	0	; () banked
 21227  0021C4  6F60               	movwf	memcpy@d1& (0+255),b
 21228  0021C6  0E06               	movlw	high _macBuffer
 21229  0021C8  6F61               	movwf	(memcpy@d1+1)& (0+255),b
 21230  0021CA  0EA0               	movlw	low _aesBuffer
 21231  0021CC  6F62               	movwf	memcpy@s1& (0+255),b
 21232  0021CE  0E03               	movlw	high _aesBuffer
 21233  0021D0  6F63               	movwf	(memcpy@s1+1)& (0+255),b
 21234  0021D2  0E00               	movlw	0
 21235  0021D4  6F65               	movwf	(memcpy@n+1)& (0+255),b
 21236  0021D6  0E10               	movlw	16
 21237  0021D8  6F64               	movwf	memcpy@n& (0+255),b
 21238  0021DA  EC37  F041         	call	_memcpy	;wreg free
 21239                           
 21240                           ;lorawan.c: 1798: AESCmac (loRa.activationParameters.networkSessionKey, aesBuffer, macBu
      +                          ffer, bufferIndex );
 21241  0021DE  0E2C               	movlw	low (_loRa+34)
 21242  0021E0  0100               	movlb	0	; () banked
 21243  0021E2  6FB9               	movwf	AESCmac@key& (0+255),b
 21244  0021E4  0E02               	movlw	high (_loRa+34)
 21245  0021E6  6FBA               	movwf	(AESCmac@key+1)& (0+255),b
 21246  0021E8  0EA0               	movlw	low _aesBuffer
 21247  0021EA  6FBB               	movwf	AESCmac@output& (0+255),b
 21248  0021EC  0E03               	movlw	high _aesBuffer
 21249  0021EE  6FBC               	movwf	(AESCmac@output+1)& (0+255),b
 21250  0021F0  0E8F               	movlw	low _macBuffer
 21251  0021F2  6FBD               	movwf	AESCmac@input& (0+255),b
 21252  0021F4  0E06               	movlw	high _macBuffer
 21253  0021F6  6FBE               	movwf	(AESCmac@input+1)& (0+255),b
 21254  0021F8  C0D2  F0BF         	movff	AssemblePacket@bufferIndex,AESCmac@size
 21255  0021FC  EC1F  F011         	call	_AESCmac	;wreg free
 21256                           
 21257                           ;lorawan.c: 1800: memcpy (&macBuffer[bufferIndex], aesBuffer, 4);
 21258  002200  0100               	movlb	0	; () banked
 21259  002202  51D2               	movf	AssemblePacket@bufferIndex& (0+255),w,b
 21260  002204  0D01               	mullw	1
 21261  002206  0E8F               	movlw	low _macBuffer
 21262  002208  24F3               	addwf	prodl,w,c
 21263  00220A  6F60               	movwf	memcpy@d1& (0+255),b
 21264  00220C  0E06               	movlw	high _macBuffer
 21265  00220E  20F4               	addwfc	prodh,w,c
 21266  002210  6F61               	movwf	(memcpy@d1+1)& (0+255),b
 21267  002212  0EA0               	movlw	low _aesBuffer
 21268  002214  6F62               	movwf	memcpy@s1& (0+255),b
 21269  002216  0E03               	movlw	high _aesBuffer
 21270  002218  6F63               	movwf	(memcpy@s1+1)& (0+255),b
 21271  00221A  0E00               	movlw	0
 21272  00221C  6F65               	movwf	(memcpy@n+1)& (0+255),b
 21273  00221E  0E04               	movlw	4
 21274  002220  6F64               	movwf	memcpy@n& (0+255),b
 21275  002222  EC37  F041         	call	_memcpy	;wreg free
 21276                           
 21277                           ;lorawan.c: 1801: bufferIndex = bufferIndex + 4;
 21278  002226  0100               	movlb	0	; () banked
 21279  002228  51D2               	movf	AssemblePacket@bufferIndex& (0+255),w,b
 21280  00222A  0F04               	addlw	4
 21281  00222C  6FD2               	movwf	AssemblePacket@bufferIndex& (0+255),b
 21282                           
 21283                           ; BSR set to: 0
 21284                           ;lorawan.c: 1803: loRa.lastPacketLength = bufferIndex - 16;
 21285  00222E  0EF0               	movlw	240
 21286  002230  25D2               	addwf	AssemblePacket@bufferIndex& (0+255),w,b
 21287  002232  0102               	movlb	2	; () banked
 21288  002234  6FDE               	movwf	(_loRa+212)& (0+255),b
 21289  002236  6BDF               	clrf	(_loRa+213)& (0+255),b
 21290  002238  0EFF               	movlw	255
 21291  00223A  23DF               	addwfc	(_loRa+213)& (0+255),f,b
 21292                           
 21293                           ; BSR set to: 2
 21294  00223C  0012               	return		;funcret
 21295  00223E                     __end_of_AssemblePacket:
 21296                           	opt stack 0
 21297                           tosu	equ	0xFFF
 21298                           tosh	equ	0xFFE
 21299                           tosl	equ	0xFFD
 21300                           pclath	equ	0xFFA
 21301                           tblptru	equ	0xFF8
 21302                           tblptrh	equ	0xFF7
 21303                           tblptrl	equ	0xFF6
 21304                           tablat	equ	0xFF5
 21305                           prodh	equ	0xFF4
 21306                           prodl	equ	0xFF3
 21307                           intcon	equ	0xFF2
 21308                           intcon2	equ	0xFF1
 21309                           intcon3	equ	0xFF0
 21310                           indf0	equ	0xFEF
 21311                           postinc0	equ	0xFEE
 21312                           fsr0h	equ	0xFEA
 21313                           fsr0l	equ	0xFE9
 21314                           wreg	equ	0xFE8
 21315                           postinc1	equ	0xFE6
 21316                           postdec1	equ	0xFE5
 21317                           plusw1	equ	0xFE3
 21318                           fsr1h	equ	0xFE2
 21319                           fsr1l	equ	0xFE1
 21320                           indf2	equ	0xFDF
 21321                           postinc2	equ	0xFDE
 21322                           postdec2	equ	0xFDD
 21323                           plusw2	equ	0xFDB
 21324                           fsr2h	equ	0xFDA
 21325                           fsr2l	equ	0xFD9
 21326                           status	equ	0xFD8
 21327                           
 21328 ;; *************** function _IncludeMacCommandsResponse *****************
 21329 ;; Defined at:
 21330 ;;		line 1845 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 21331 ;; Parameters:    Size  Location     Type
 21332 ;;  macBuffer       2    0[BANK0 ] PTR unsigned char 
 21333 ;;		 -> radioBuffer(271), macBuffer(271), 
 21334 ;;  pBufferIndex    2    2[BANK0 ] PTR unsigned char 
 21335 ;;		 -> AssemblePacket@macCmdIdx(1), AssemblePacket@bufferIndex(1), 
 21336 ;;  bIncludeInFo    1    4[BANK0 ] unsigned char 
 21337 ;; Auto vars:     Size  Location     Type
 21338 ;;  bufferIndex     1   14[BANK0 ] unsigned char 
 21339 ;;  i               1   13[BANK0 ] unsigned char 
 21340 ;; Return value:  Size  Location     Type
 21341 ;;                  1    wreg      void 
 21342 ;; Registers used:
 21343 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21344 ;; Tracked objects:
 21345 ;;		On entry : 0/0
 21346 ;;		On exit  : 0/0
 21347 ;;		Unchanged: 0/0
 21348 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21349 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21350 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21351 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21352 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21353 ;;Total ram usage:       15 bytes
 21354 ;; Hardware stack levels used:    1
 21355 ;; Hardware stack levels required when called:    8
 21356 ;; This function calls:
 21357 ;;		_RADIO_GetPacketSnr
 21358 ;; This function is called by:
 21359 ;;		_AssemblePacket
 21360 ;; This function uses a non-reentrant model
 21361 ;;
 21362                           
 21363                           	psect	text101
 21364  001A2C                     __ptext101:
 21365                           	opt stack 0
 21366  001A2C                     _IncludeMacCommandsResponse:
 21367                           	opt stack 20
 21368                           
 21369                           ;lorawan.c: 1847: uint8_t i = 0;
 21370                           
 21371                           ; BSR set to: 2
 21372                           ;incstack = 0
 21373  001A2C  0E00               	movlw	0
 21374  001A2E  0100               	movlb	0	; () banked
 21375  001A30  6F6D               	movwf	IncludeMacCommandsResponse@i& (0+255),b
 21376                           
 21377                           ; BSR set to: 0
 21378                           ;lorawan.c: 1848: uint8_t bufferIndex = *pBufferIndex;
 21379  001A32  C062  FFD9         	movff	IncludeMacCommandsResponse@pBufferIndex,fsr2l
 21380  001A36  C063  FFDA         	movff	IncludeMacCommandsResponse@pBufferIndex+1,fsr2h
 21381  001A3A  50DF               	movf	indf2,w,c
 21382  001A3C  6F6E               	movwf	IncludeMacCommandsResponse@bufferIndex& (0+255),b
 21383                           
 21384                           ; BSR set to: 0
 21385                           ;lorawan.c: 1850: for(i = 0; i < loRa.crtMacCmdIndex ; i++)
 21386  001A3E  0E00               	movlw	0
 21387  001A40  6F6D               	movwf	IncludeMacCommandsResponse@i& (0+255),b
 21388  001A42  D218               	goto	l1291
 21389  001A44                     
 21390                           ; BSR set to: 0
 21391                           ;lorawan.c: 1851: {
 21392                           ;lorawan.c: 1852: if((bIncludeInFopts) && (loRa.macCommands[i].receivedCid != 0xFF))
 21393                           
 21394                           ; BSR set to: 0
 21395  001A44  5164               	movf	IncludeMacCommandsResponse@bIncludeInFopts& (0+255),w,b
 21396  001A46  B4D8               	btfsc	status,2,c
 21397  001A48  D1F6               	goto	l1296
 21398                           
 21399                           ; BSR set to: 0
 21400  001A4A  516D               	movf	IncludeMacCommandsResponse@i& (0+255),w,b
 21401  001A4C  0D02               	mullw	2
 21402  001A4E  0EB2               	movlw	low (_loRa+168)
 21403  001A50  24F3               	addwf	prodl,w,c
 21404  001A52  6ED9               	movwf	fsr2l,c
 21405  001A54  0E02               	movlw	high (_loRa+168)
 21406  001A56  20F4               	addwfc	prodh,w,c
 21407  001A58  6EDA               	movwf	fsr2h,c
 21408  001A5A  28DE               	incf	postinc2,w,c
 21409  001A5C  B4D8               	btfsc	status,2,c
 21410  001A5E  D1EB               	goto	l1296
 21411                           
 21412                           ; BSR set to: 0
 21413                           ;lorawan.c: 1853: {
 21414                           ;lorawan.c: 1854: if((bufferIndex - (*pBufferIndex) + macEndDevCmdReplyLen[loRa.macComma
      +                          nds[i].receivedCid - 2]) > 0x0F)
 21415  001A60  C062  FFD9         	movff	IncludeMacCommandsResponse@pBufferIndex,fsr2l
 21416  001A64  C063  FFDA         	movff	IncludeMacCommandsResponse@pBufferIndex+1,fsr2h
 21417  001A68  50DF               	movf	indf2,w,c
 21418  001A6A  6F65               	movwf	??_IncludeMacCommandsResponse& (0+255),b
 21419  001A6C  6B66               	clrf	(??_IncludeMacCommandsResponse+1)& (0+255),b
 21420  001A6E  1F65               	comf	??_IncludeMacCommandsResponse& (0+255),f,b
 21421  001A70  1F66               	comf	(??_IncludeMacCommandsResponse+1)& (0+255),f,b
 21422  001A72  4B65               	infsnz	??_IncludeMacCommandsResponse& (0+255),f,b
 21423  001A74  2B66               	incf	(??_IncludeMacCommandsResponse+1)& (0+255),f,b
 21424  001A76  0EFE               	movlw	254
 21425  001A78  6F67               	movwf	(??_IncludeMacCommandsResponse+2)& (0+255),b
 21426  001A7A  0EFF               	movlw	255
 21427  001A7C  6F68               	movwf	(??_IncludeMacCommandsResponse+3)& (0+255),b
 21428  001A7E  516D               	movf	IncludeMacCommandsResponse@i& (0+255),w,b
 21429  001A80  0D02               	mullw	2
 21430  001A82  0EB2               	movlw	low (_loRa+168)
 21431  001A84  24F3               	addwf	prodl,w,c
 21432  001A86  6ED9               	movwf	fsr2l,c
 21433  001A88  0E02               	movlw	high (_loRa+168)
 21434  001A8A  20F4               	addwfc	prodh,w,c
 21435  001A8C  6EDA               	movwf	fsr2h,c
 21436  001A8E  50DF               	movf	indf2,w,c
 21437  001A90  6F69               	movwf	(??_IncludeMacCommandsResponse+4)& (0+255),b
 21438  001A92  6B6A               	clrf	(??_IncludeMacCommandsResponse+5)& (0+255),b
 21439  001A94  5167               	movf	(??_IncludeMacCommandsResponse+2)& (0+255),w,b
 21440  001A96  2769               	addwf	(??_IncludeMacCommandsResponse+4)& (0+255),f,b
 21441  001A98  5168               	movf	(??_IncludeMacCommandsResponse+3)& (0+255),w,b
 21442  001A9A  236A               	addwfc	(??_IncludeMacCommandsResponse+5)& (0+255),f,b
 21443  001A9C  0E95               	movlw	low _macEndDevCmdReplyLen
 21444  001A9E  2569               	addwf	(??_IncludeMacCommandsResponse+4)& (0+255),w,b
 21445  001AA0  6EF6               	movwf	tblptrl,c
 21446  001AA2  0EFF               	movlw	high _macEndDevCmdReplyLen
 21447  001AA4  216A               	addwfc	(??_IncludeMacCommandsResponse+5)& (0+255),w,b
 21448  001AA6  6EF7               	movwf	tblptrh,c
 21449  001AA8                     	if	1	;There are 3 active tblptr bytes
 21450  001AA8  6AF8               	clrf	tblptru,c
 21451  001AAA  0E00               	movlw	low (__mediumconst shr (0+16))
 21452  001AAC  22F8               	addwfc	tblptru,f,c
 21453  001AAE                     	endif
 21454  001AAE  0008               	tblrd		*
 21455  001AB0  50F5               	movf	tablat,w,c
 21456  001AB2  C06E  F06B         	movff	IncludeMacCommandsResponse@bufferIndex,??_IncludeMacCommandsResponse+6
 21457  001AB6  6B6C               	clrf	(??_IncludeMacCommandsResponse+7)& (0+255),b
 21458  001AB8  276B               	addwf	(??_IncludeMacCommandsResponse+6)& (0+255),f,b
 21459  001ABA  0E00               	movlw	0
 21460  001ABC  236C               	addwfc	(??_IncludeMacCommandsResponse+7)& (0+255),f,b
 21461  001ABE  5165               	movf	??_IncludeMacCommandsResponse& (0+255),w,b
 21462  001AC0  276B               	addwf	(??_IncludeMacCommandsResponse+6)& (0+255),f,b
 21463  001AC2  5166               	movf	(??_IncludeMacCommandsResponse+1)& (0+255),w,b
 21464  001AC4  236C               	addwfc	(??_IncludeMacCommandsResponse+7)& (0+255),f,b
 21465  001AC6  BF6C               	btfsc	(??_IncludeMacCommandsResponse+7)& (0+255),7,b
 21466  001AC8  D1B6               	goto	l1296
 21467  001ACA  516C               	movf	(??_IncludeMacCommandsResponse+7)& (0+255),w,b
 21468  001ACC  E105               	bnz	u9580
 21469  001ACE  0E10               	movlw	16
 21470  001AD0  5D6B               	subwf	(??_IncludeMacCommandsResponse+6)& (0+255),w,b
 21471  001AD2  B0D8               	btfsc	status,0,c
 21472  001AD4  D1D5               	goto	u9690
 21473  001AD6  D1AF               	goto	l1296
 21474  001AD8                     u9580:
 21475                           
 21476                           ; BSR set to: 0
 21477                           ;lorawan.c: 1855: {
 21478                           ;lorawan.c: 1856: break;
 21479  001AD8  D1D3               	goto	u9690
 21480  001ADA                     
 21481                           ; BSR set to: 0
 21482                           ;lorawan.c: 1862: {
 21483                           ;lorawan.c: 1863: macBuffer[bufferIndex++] = LINK_ADR_CID;
 21484                           
 21485                           ; BSR set to: 0
 21486  001ADA  516E               	movf	IncludeMacCommandsResponse@bufferIndex& (0+255),w,b
 21487  001ADC  0D01               	mullw	1
 21488  001ADE  50F3               	movf	prodl,w,c
 21489  001AE0  2560               	addwf	IncludeMacCommandsResponse@macBuffer& (0+255),w,b
 21490  001AE2  6ED9               	movwf	fsr2l,c
 21491  001AE4  50F4               	movf	prodh,w,c
 21492  001AE6  2161               	addwfc	(IncludeMacCommandsResponse@macBuffer+1)& (0+255),w,b
 21493  001AE8  6EDA               	movwf	fsr2h,c
 21494  001AEA  0E03               	movlw	3
 21495  001AEC  6EDF               	movwf	indf2,c
 21496                           
 21497                           ; BSR set to: 0
 21498  001AEE  2B6E               	incf	IncludeMacCommandsResponse@bufferIndex& (0+255),f,b
 21499                           
 21500                           ; BSR set to: 0
 21501                           ;lorawan.c: 1864: macBuffer[bufferIndex] = 0x00;
 21502  001AF0  516E               	movf	IncludeMacCommandsResponse@bufferIndex& (0+255),w,b
 21503  001AF2  0D01               	mullw	1
 21504  001AF4  50F3               	movf	prodl,w,c
 21505  001AF6  2560               	addwf	IncludeMacCommandsResponse@macBuffer& (0+255),w,b
 21506  001AF8  6ED9               	movwf	fsr2l,c
 21507  001AFA  50F4               	movf	prodh,w,c
 21508  001AFC  2161               	addwfc	(IncludeMacCommandsResponse@macBuffer+1)& (0+255),w,b
 21509  001AFE  6EDA               	movwf	fsr2h,c
 21510  001B00  0E00               	movlw	0
 21511  001B02  6EDF               	movwf	indf2,c
 21512                           
 21513                           ; BSR set to: 0
 21514                           ;lorawan.c: 1865: if (loRa.macCommands[i].channelMaskAck == 1)
 21515  001B04  516D               	movf	IncludeMacCommandsResponse@i& (0+255),w,b
 21516  001B06  0D02               	mullw	2
 21517  001B08  0E0A               	movlw	low _loRa
 21518  001B0A  6F65               	movwf	??_IncludeMacCommandsResponse& (0+255),b
 21519  001B0C  0E02               	movlw	high _loRa
 21520  001B0E  6F66               	movwf	(??_IncludeMacCommandsResponse+1)& (0+255),b
 21521  001B10  0EA8               	movlw	168
 21522  001B12  2765               	addwf	??_IncludeMacCommandsResponse& (0+255),f,b
 21523  001B14  0E00               	movlw	0
 21524  001B16  2366               	addwfc	(??_IncludeMacCommandsResponse+1)& (0+255),f,b
 21525  001B18  50F3               	movf	prodl,w,c
 21526  001B1A  2765               	addwf	??_IncludeMacCommandsResponse& (0+255),f,b
 21527  001B1C  50F4               	movf	prodh,w,c
 21528  001B1E  2366               	addwfc	(??_IncludeMacCommandsResponse+1)& (0+255),f,b
 21529  001B20  0E01               	movlw	1
 21530  001B22  2565               	addwf	??_IncludeMacCommandsResponse& (0+255),w,b
 21531  001B24  6ED9               	movwf	fsr2l,c
 21532  001B26  0E00               	movlw	0
 21533  001B28  2166               	addwfc	(??_IncludeMacCommandsResponse+1)& (0+255),w,b
 21534  001B2A  6EDA               	movwf	fsr2h,c
 21535  001B2C  0102               	movlb	2	; () banked
 21536  001B2E  A0DF               	btfss	indf2,0,c
 21537  001B30  D00B               	goto	l1298
 21538                           
 21539                           ; BSR set to: 2
 21540                           ;lorawan.c: 1866: {
 21541                           ;lorawan.c: 1867: macBuffer[bufferIndex] |= 0x01;
 21542  001B32  0100               	movlb	0	; () banked
 21543  001B34  516E               	movf	IncludeMacCommandsResponse@bufferIndex& (0+255),w,b
 21544  001B36  0D01               	mullw	1
 21545  001B38  50F3               	movf	prodl,w,c
 21546  001B3A  2560               	addwf	IncludeMacCommandsResponse@macBuffer& (0+255),w,b
 21547  001B3C  6ED9               	movwf	fsr2l,c
 21548  001B3E  50F4               	movf	prodh,w,c
 21549  001B40  2161               	addwfc	(IncludeMacCommandsResponse@macBuffer+1)& (0+255),w,b
 21550  001B42  6EDA               	movwf	fsr2h,c
 21551  001B44  0E00               	movlw	0
 21552  001B46  80DB               	bsf	plusw2,0,c
 21553  001B48                     l1298:
 21554                           
 21555                           ;lorawan.c: 1868: }
 21556                           ;lorawan.c: 1870: if (loRa.macCommands[i].dataRateAck == 1)
 21557  001B48  0100               	movlb	0	; () banked
 21558  001B4A  516D               	movf	IncludeMacCommandsResponse@i& (0+255),w,b
 21559  001B4C  0D02               	mullw	2
 21560  001B4E  0E0A               	movlw	low _loRa
 21561  001B50  6F65               	movwf	??_IncludeMacCommandsResponse& (0+255),b
 21562  001B52  0E02               	movlw	high _loRa
 21563  001B54  6F66               	movwf	(??_IncludeMacCommandsResponse+1)& (0+255),b
 21564  001B56  0EA8               	movlw	168
 21565  001B58  2765               	addwf	??_IncludeMacCommandsResponse& (0+255),f,b
 21566  001B5A  0E00               	movlw	0
 21567  001B5C  2366               	addwfc	(??_IncludeMacCommandsResponse+1)& (0+255),f,b
 21568  001B5E  50F3               	movf	prodl,w,c
 21569  001B60  2765               	addwf	??_IncludeMacCommandsResponse& (0+255),f,b
 21570  001B62  50F4               	movf	prodh,w,c
 21571  001B64  2366               	addwfc	(??_IncludeMacCommandsResponse+1)& (0+255),f,b
 21572  001B66  0E01               	movlw	1
 21573  001B68  2565               	addwf	??_IncludeMacCommandsResponse& (0+255),w,b
 21574  001B6A  6ED9               	movwf	fsr2l,c
 21575  001B6C  0E00               	movlw	0
 21576  001B6E  2166               	addwfc	(??_IncludeMacCommandsResponse+1)& (0+255),w,b
 21577  001B70  6EDA               	movwf	fsr2h,c
 21578  001B72  0102               	movlb	2	; () banked
 21579  001B74  A2DF               	btfss	indf2,1,c
 21580  001B76  D00B               	goto	l1299
 21581                           
 21582                           ; BSR set to: 2
 21583                           ;lorawan.c: 1871: {
 21584                           ;lorawan.c: 1872: macBuffer[bufferIndex] |= 0x02;
 21585  001B78  0100               	movlb	0	; () banked
 21586  001B7A  516E               	movf	IncludeMacCommandsResponse@bufferIndex& (0+255),w,b
 21587  001B7C  0D01               	mullw	1
 21588  001B7E  50F3               	movf	prodl,w,c
 21589  001B80  2560               	addwf	IncludeMacCommandsResponse@macBuffer& (0+255),w,b
 21590  001B82  6ED9               	movwf	fsr2l,c
 21591  001B84  50F4               	movf	prodh,w,c
 21592  001B86  2161               	addwfc	(IncludeMacCommandsResponse@macBuffer+1)& (0+255),w,b
 21593  001B88  6EDA               	movwf	fsr2h,c
 21594  001B8A  0E00               	movlw	0
 21595  001B8C  82DB               	bsf	plusw2,1,c
 21596  001B8E                     l1299:
 21597                           
 21598                           ;lorawan.c: 1873: }
 21599                           ;lorawan.c: 1875: if (loRa.macCommands[i].powerAck == 1)
 21600  001B8E  0100               	movlb	0	; () banked
 21601  001B90  516D               	movf	IncludeMacCommandsResponse@i& (0+255),w,b
 21602  001B92  0D02               	mullw	2
 21603  001B94  0E0A               	movlw	low _loRa
 21604  001B96  6F65               	movwf	??_IncludeMacCommandsResponse& (0+255),b
 21605  001B98  0E02               	movlw	high _loRa
 21606  001B9A  6F66               	movwf	(??_IncludeMacCommandsResponse+1)& (0+255),b
 21607  001B9C  0EA8               	movlw	168
 21608  001B9E  2765               	addwf	??_IncludeMacCommandsResponse& (0+255),f,b
 21609  001BA0  0E00               	movlw	0
 21610  001BA2  2366               	addwfc	(??_IncludeMacCommandsResponse+1)& (0+255),f,b
 21611  001BA4  50F3               	movf	prodl,w,c
 21612  001BA6  2765               	addwf	??_IncludeMacCommandsResponse& (0+255),f,b
 21613  001BA8  50F4               	movf	prodh,w,c
 21614  001BAA  2366               	addwfc	(??_IncludeMacCommandsResponse+1)& (0+255),f,b
 21615  001BAC  0E01               	movlw	1
 21616  001BAE  2565               	addwf	??_IncludeMacCommandsResponse& (0+255),w,b
 21617  001BB0  6ED9               	movwf	fsr2l,c
 21618  001BB2  0E00               	movlw	0
 21619  001BB4  2166               	addwfc	(??_IncludeMacCommandsResponse+1)& (0+255),w,b
 21620  001BB6  6EDA               	movwf	fsr2h,c
 21621  001BB8  0102               	movlb	2	; () banked
 21622  001BBA  A4DF               	btfss	indf2,2,c
 21623  001BBC  D089               	goto	l1305
 21624                           
 21625                           ; BSR set to: 2
 21626                           ;lorawan.c: 1876: {
 21627                           ;lorawan.c: 1877: macBuffer[bufferIndex] |= 0x04;
 21628  001BBE  0100               	movlb	0	; () banked
 21629  001BC0  516E               	movf	IncludeMacCommandsResponse@bufferIndex& (0+255),w,b
 21630  001BC2  0D01               	mullw	1
 21631  001BC4  50F3               	movf	prodl,w,c
 21632  001BC6  2560               	addwf	IncludeMacCommandsResponse@macBuffer& (0+255),w,b
 21633  001BC8  6ED9               	movwf	fsr2l,c
 21634  001BCA  50F4               	movf	prodh,w,c
 21635  001BCC  2161               	addwfc	(IncludeMacCommandsResponse@macBuffer+1)& (0+255),w,b
 21636  001BCE  6EDA               	movwf	fsr2h,c
 21637  001BD0  0E00               	movlw	0
 21638  001BD2  84DB               	bsf	plusw2,2,c
 21639                           
 21640                           ; BSR set to: 0
 21641  001BD4  D07D               	goto	l1305
 21642  001BD6                     
 21643                           ; BSR set to: 0
 21644                           ;lorawan.c: 1884: {
 21645                           ;lorawan.c: 1885: macBuffer[bufferIndex++] = RX2_SETUP_CID;
 21646                           
 21647                           ; BSR set to: 0
 21648  001BD6  516E               	movf	IncludeMacCommandsResponse@bufferIndex& (0+255),w,b
 21649  001BD8  0D01               	mullw	1
 21650  001BDA  50F3               	movf	prodl,w,c
 21651  001BDC  2560               	addwf	IncludeMacCommandsResponse@macBuffer& (0+255),w,b
 21652  001BDE  6ED9               	movwf	fsr2l,c
 21653  001BE0  50F4               	movf	prodh,w,c
 21654  001BE2  2161               	addwfc	(IncludeMacCommandsResponse@macBuffer+1)& (0+255),w,b
 21655  001BE4  6EDA               	movwf	fsr2h,c
 21656  001BE6  0E05               	movlw	5
 21657  001BE8  6EDF               	movwf	indf2,c
 21658                           
 21659                           ; BSR set to: 0
 21660  001BEA  2B6E               	incf	IncludeMacCommandsResponse@bufferIndex& (0+255),f,b
 21661                           
 21662                           ; BSR set to: 0
 21663                           ;lorawan.c: 1886: macBuffer[bufferIndex] = 0x00;
 21664  001BEC  516E               	movf	IncludeMacCommandsResponse@bufferIndex& (0+255),w,b
 21665  001BEE  0D01               	mullw	1
 21666  001BF0  50F3               	movf	prodl,w,c
 21667  001BF2  2560               	addwf	IncludeMacCommandsResponse@macBuffer& (0+255),w,b
 21668  001BF4  6ED9               	movwf	fsr2l,c
 21669  001BF6  50F4               	movf	prodh,w,c
 21670  001BF8  2161               	addwfc	(IncludeMacCommandsResponse@macBuffer+1)& (0+255),w,b
 21671  001BFA  6EDA               	movwf	fsr2h,c
 21672  001BFC  0E00               	movlw	0
 21673  001BFE  6EDF               	movwf	indf2,c
 21674                           
 21675                           ; BSR set to: 0
 21676                           ;lorawan.c: 1887: if (loRa.macCommands[i].channelAck == 1)
 21677  001C00  516D               	movf	IncludeMacCommandsResponse@i& (0+255),w,b
 21678  001C02  0D02               	mullw	2
 21679  001C04  0E0A               	movlw	low _loRa
 21680  001C06  6F65               	movwf	??_IncludeMacCommandsResponse& (0+255),b
 21681  001C08  0E02               	movlw	high _loRa
 21682  001C0A  6F66               	movwf	(??_IncludeMacCommandsResponse+1)& (0+255),b
 21683  001C0C  0EA8               	movlw	168
 21684  001C0E  2765               	addwf	??_IncludeMacCommandsResponse& (0+255),f,b
 21685  001C10  0E00               	movlw	0
 21686  001C12  2366               	addwfc	(??_IncludeMacCommandsResponse+1)& (0+255),f,b
 21687  001C14  50F3               	movf	prodl,w,c
 21688  001C16  2765               	addwf	??_IncludeMacCommandsResponse& (0+255),f,b
 21689  001C18  50F4               	movf	prodh,w,c
 21690  001C1A  2366               	addwfc	(??_IncludeMacCommandsResponse+1)& (0+255),f,b
 21691  001C1C  0E01               	movlw	1
 21692  001C1E  2565               	addwf	??_IncludeMacCommandsResponse& (0+255),w,b
 21693  001C20  6ED9               	movwf	fsr2l,c
 21694  001C22  0E00               	movlw	0
 21695  001C24  2166               	addwfc	(??_IncludeMacCommandsResponse+1)& (0+255),w,b
 21696  001C26  6EDA               	movwf	fsr2h,c
 21697  001C28  0102               	movlb	2	; () banked
 21698  001C2A  A6DF               	btfss	indf2,3,c
 21699  001C2C  D00B               	goto	l1303
 21700                           
 21701                           ; BSR set to: 2
 21702                           ;lorawan.c: 1888: {
 21703                           ;lorawan.c: 1889: macBuffer[bufferIndex] |= 0x01;
 21704  001C2E  0100               	movlb	0	; () banked
 21705  001C30  516E               	movf	IncludeMacCommandsResponse@bufferIndex& (0+255),w,b
 21706  001C32  0D01               	mullw	1
 21707  001C34  50F3               	movf	prodl,w,c
 21708  001C36  2560               	addwf	IncludeMacCommandsResponse@macBuffer& (0+255),w,b
 21709  001C38  6ED9               	movwf	fsr2l,c
 21710  001C3A  50F4               	movf	prodh,w,c
 21711  001C3C  2161               	addwfc	(IncludeMacCommandsResponse@macBuffer+1)& (0+255),w,b
 21712  001C3E  6EDA               	movwf	fsr2h,c
 21713  001C40  0E00               	movlw	0
 21714  001C42  80DB               	bsf	plusw2,0,c
 21715  001C44                     l1303:
 21716                           
 21717                           ;lorawan.c: 1890: }
 21718                           ;lorawan.c: 1892: if (loRa.macCommands[i].dataRateReceiveWindowAck == 1)
 21719  001C44  0100               	movlb	0	; () banked
 21720  001C46  516D               	movf	IncludeMacCommandsResponse@i& (0+255),w,b
 21721  001C48  0D02               	mullw	2
 21722  001C4A  0E0A               	movlw	low _loRa
 21723  001C4C  6F65               	movwf	??_IncludeMacCommandsResponse& (0+255),b
 21724  001C4E  0E02               	movlw	high _loRa
 21725  001C50  6F66               	movwf	(??_IncludeMacCommandsResponse+1)& (0+255),b
 21726  001C52  0EA8               	movlw	168
 21727  001C54  2765               	addwf	??_IncludeMacCommandsResponse& (0+255),f,b
 21728  001C56  0E00               	movlw	0
 21729  001C58  2366               	addwfc	(??_IncludeMacCommandsResponse+1)& (0+255),f,b
 21730  001C5A  50F3               	movf	prodl,w,c
 21731  001C5C  2765               	addwf	??_IncludeMacCommandsResponse& (0+255),f,b
 21732  001C5E  50F4               	movf	prodh,w,c
 21733  001C60  2366               	addwfc	(??_IncludeMacCommandsResponse+1)& (0+255),f,b
 21734  001C62  0E01               	movlw	1
 21735  001C64  2565               	addwf	??_IncludeMacCommandsResponse& (0+255),w,b
 21736  001C66  6ED9               	movwf	fsr2l,c
 21737  001C68  0E00               	movlw	0
 21738  001C6A  2166               	addwfc	(??_IncludeMacCommandsResponse+1)& (0+255),w,b
 21739  001C6C  6EDA               	movwf	fsr2h,c
 21740  001C6E  0102               	movlb	2	; () banked
 21741  001C70  A8DF               	btfss	indf2,4,c
 21742  001C72  D00B               	goto	l1304
 21743                           
 21744                           ; BSR set to: 2
 21745                           ;lorawan.c: 1893: {
 21746                           ;lorawan.c: 1894: macBuffer[bufferIndex] |= 0x02;
 21747  001C74  0100               	movlb	0	; () banked
 21748  001C76  516E               	movf	IncludeMacCommandsResponse@bufferIndex& (0+255),w,b
 21749  001C78  0D01               	mullw	1
 21750  001C7A  50F3               	movf	prodl,w,c
 21751  001C7C  2560               	addwf	IncludeMacCommandsResponse@macBuffer& (0+255),w,b
 21752  001C7E  6ED9               	movwf	fsr2l,c
 21753  001C80  50F4               	movf	prodh,w,c
 21754  001C82  2161               	addwfc	(IncludeMacCommandsResponse@macBuffer+1)& (0+255),w,b
 21755  001C84  6EDA               	movwf	fsr2h,c
 21756  001C86  0E00               	movlw	0
 21757  001C88  82DB               	bsf	plusw2,1,c
 21758  001C8A                     l1304:
 21759                           
 21760                           ;lorawan.c: 1895: }
 21761                           ;lorawan.c: 1897: if (loRa.macCommands[i].rx1DROffestAck == 1)
 21762  001C8A  0100               	movlb	0	; () banked
 21763  001C8C  516D               	movf	IncludeMacCommandsResponse@i& (0+255),w,b
 21764  001C8E  0D02               	mullw	2
 21765  001C90  0E0A               	movlw	low _loRa
 21766  001C92  6F65               	movwf	??_IncludeMacCommandsResponse& (0+255),b
 21767  001C94  0E02               	movlw	high _loRa
 21768  001C96  6F66               	movwf	(??_IncludeMacCommandsResponse+1)& (0+255),b
 21769  001C98  0EA8               	movlw	168
 21770  001C9A  2765               	addwf	??_IncludeMacCommandsResponse& (0+255),f,b
 21771  001C9C  0E00               	movlw	0
 21772  001C9E  2366               	addwfc	(??_IncludeMacCommandsResponse+1)& (0+255),f,b
 21773  001CA0  50F3               	movf	prodl,w,c
 21774  001CA2  2765               	addwf	??_IncludeMacCommandsResponse& (0+255),f,b
 21775  001CA4  50F4               	movf	prodh,w,c
 21776  001CA6  2366               	addwfc	(??_IncludeMacCommandsResponse+1)& (0+255),f,b
 21777  001CA8  0E01               	movlw	1
 21778  001CAA  2565               	addwf	??_IncludeMacCommandsResponse& (0+255),w,b
 21779  001CAC  6ED9               	movwf	fsr2l,c
 21780  001CAE  0E00               	movlw	0
 21781  001CB0  2166               	addwfc	(??_IncludeMacCommandsResponse+1)& (0+255),w,b
 21782  001CB2  6EDA               	movwf	fsr2h,c
 21783  001CB4  0102               	movlb	2	; () banked
 21784  001CB6  AADF               	btfss	indf2,5,c
 21785  001CB8  D00B               	goto	l1305
 21786                           
 21787                           ; BSR set to: 2
 21788                           ;lorawan.c: 1898: {
 21789                           ;lorawan.c: 1899: macBuffer[bufferIndex] |= 0x04;
 21790  001CBA  0100               	movlb	0	; () banked
 21791  001CBC  516E               	movf	IncludeMacCommandsResponse@bufferIndex& (0+255),w,b
 21792  001CBE  0D01               	mullw	1
 21793  001CC0  50F3               	movf	prodl,w,c
 21794  001CC2  2560               	addwf	IncludeMacCommandsResponse@macBuffer& (0+255),w,b
 21795  001CC4  6ED9               	movwf	fsr2l,c
 21796  001CC6  50F4               	movf	prodh,w,c
 21797  001CC8  2161               	addwfc	(IncludeMacCommandsResponse@macBuffer+1)& (0+255),w,b
 21798  001CCA  6EDA               	movwf	fsr2h,c
 21799  001CCC  0E00               	movlw	0
 21800  001CCE  84DB               	bsf	plusw2,2,c
 21801  001CD0                     l1305:
 21802                           
 21803                           ;lorawan.c: 1900: }
 21804                           ;lorawan.c: 1902: bufferIndex ++;
 21805                           
 21806                           ; BSR set to: 0
 21807  001CD0  0100               	movlb	0	; () banked
 21808  001CD2  D03C               	goto	L12
 21809  001CD4                     
 21810                           ; BSR set to: 0
 21811                           ;lorawan.c: 1907: {
 21812                           ;lorawan.c: 1908: macBuffer[bufferIndex++] = DEV_STATUS_CID;
 21813                           
 21814                           ; BSR set to: 0
 21815  001CD4  516E               	movf	IncludeMacCommandsResponse@bufferIndex& (0+255),w,b
 21816  001CD6  0D01               	mullw	1
 21817  001CD8  50F3               	movf	prodl,w,c
 21818  001CDA  2560               	addwf	IncludeMacCommandsResponse@macBuffer& (0+255),w,b
 21819  001CDC  6ED9               	movwf	fsr2l,c
 21820  001CDE  50F4               	movf	prodh,w,c
 21821  001CE0  2161               	addwfc	(IncludeMacCommandsResponse@macBuffer+1)& (0+255),w,b
 21822  001CE2  6EDA               	movwf	fsr2h,c
 21823  001CE4  0E06               	movlw	6
 21824  001CE6  6EDF               	movwf	indf2,c
 21825                           
 21826                           ; BSR set to: 0
 21827  001CE8  2B6E               	incf	IncludeMacCommandsResponse@bufferIndex& (0+255),f,b
 21828                           
 21829                           ; BSR set to: 0
 21830                           ;lorawan.c: 1909: macBuffer[bufferIndex++] = loRa.batteryLevel;
 21831  001CEA  516E               	movf	IncludeMacCommandsResponse@bufferIndex& (0+255),w,b
 21832  001CEC  0D01               	mullw	1
 21833  001CEE  50F3               	movf	prodl,w,c
 21834  001CF0  2560               	addwf	IncludeMacCommandsResponse@macBuffer& (0+255),w,b
 21835  001CF2  6ED9               	movwf	fsr2l,c
 21836  001CF4  50F4               	movf	prodh,w,c
 21837  001CF6  2161               	addwfc	(IncludeMacCommandsResponse@macBuffer+1)& (0+255),w,b
 21838  001CF8  6EDA               	movwf	fsr2h,c
 21839  001CFA  C2EA  FFDF         	movff	_loRa+224,indf2
 21840  001CFE  2B6E               	incf	IncludeMacCommandsResponse@bufferIndex& (0+255),f,b
 21841                           
 21842                           ; BSR set to: 0
 21843                           ;lorawan.c: 1910: if ((RADIO_GetPacketSnr() < -32) || (RADIO_GetPacketSnr() > 31))
 21844  001D00  ECAA  F04A         	call	_RADIO_GetPacketSnr	;wreg free
 21845  001D04  0A80               	xorlw	128
 21846  001D06  0FA0               	addlw	160
 21847  001D08  A0D8               	btfss	status,0,c
 21848  001D0A  D006               	goto	u9660
 21849  001D0C  ECAA  F04A         	call	_RADIO_GetPacketSnr	;wreg free
 21850  001D10  0A80               	xorlw	128
 21851  001D12  0F60               	addlw	-160
 21852  001D14  A0D8               	btfss	status,0,c
 21853  001D16  D00C               	goto	l1307
 21854  001D18                     u9660:
 21855                           
 21856                           ;lorawan.c: 1911: {
 21857                           ;lorawan.c: 1912: macBuffer[bufferIndex++] = 0x20;
 21858  001D18  0100               	movlb	0	; () banked
 21859  001D1A  516E               	movf	IncludeMacCommandsResponse@bufferIndex& (0+255),w,b
 21860  001D1C  0D01               	mullw	1
 21861  001D1E  50F3               	movf	prodl,w,c
 21862  001D20  2560               	addwf	IncludeMacCommandsResponse@macBuffer& (0+255),w,b
 21863  001D22  6ED9               	movwf	fsr2l,c
 21864  001D24  50F4               	movf	prodh,w,c
 21865  001D26  2161               	addwfc	(IncludeMacCommandsResponse@macBuffer+1)& (0+255),w,b
 21866  001D28  6EDA               	movwf	fsr2h,c
 21867  001D2A  0E20               	movlw	32
 21868  001D2C  6EDF               	movwf	indf2,c
 21869  001D2E  D00E               	goto	L12
 21870  001D30                     l1307:
 21871                           
 21872                           ;lorawan.c: 1914: else
 21873                           ;lorawan.c: 1915: {
 21874                           ;lorawan.c: 1916: macBuffer[bufferIndex++] = ((uint8_t)RADIO_GetPacketSnr() & 0x3F);
 21875                           
 21876                           ; BSR set to: 0
 21877  001D30  0100               	movlb	0	; () banked
 21878  001D32  516E               	movf	IncludeMacCommandsResponse@bufferIndex& (0+255),w,b
 21879  001D34  0D01               	mullw	1
 21880  001D36  50F3               	movf	prodl,w,c
 21881  001D38  2560               	addwf	IncludeMacCommandsResponse@macBuffer& (0+255),w,b
 21882  001D3A  6ED9               	movwf	fsr2l,c
 21883  001D3C  50F4               	movf	prodh,w,c
 21884  001D3E  2161               	addwfc	(IncludeMacCommandsResponse@macBuffer+1)& (0+255),w,b
 21885  001D40  6EDA               	movwf	fsr2h,c
 21886  001D42  ECAA  F04A         	call	_RADIO_GetPacketSnr	;wreg free
 21887  001D46  0B3F               	andlw	63
 21888  001D48  6EDF               	movwf	indf2,c
 21889  001D4A  D7C2               	goto	l1305
 21890  001D4C                     L12:
 21891  001D4C  2B6E               	incf	IncludeMacCommandsResponse@bufferIndex& (0+255),f,b
 21892                           
 21893                           ; BSR set to: 0
 21894                           ;lorawan.c: 1917: }
 21895                           ;lorawan.c: 1918: }
 21896                           ;lorawan.c: 1919: break;
 21897  001D4E  D091               	goto	l1301
 21898  001D50                     
 21899                           ; BSR set to: 0
 21900                           ;lorawan.c: 1922: {
 21901                           ;lorawan.c: 1923: macBuffer[bufferIndex++] = NEW_CHANNEL_CID;
 21902                           
 21903                           ; BSR set to: 0
 21904  001D50  516E               	movf	IncludeMacCommandsResponse@bufferIndex& (0+255),w,b
 21905  001D52  0D01               	mullw	1
 21906  001D54  50F3               	movf	prodl,w,c
 21907  001D56  2560               	addwf	IncludeMacCommandsResponse@macBuffer& (0+255),w,b
 21908  001D58  6ED9               	movwf	fsr2l,c
 21909  001D5A  50F4               	movf	prodh,w,c
 21910  001D5C  2161               	addwfc	(IncludeMacCommandsResponse@macBuffer+1)& (0+255),w,b
 21911  001D5E  6EDA               	movwf	fsr2h,c
 21912  001D60  0E07               	movlw	7
 21913  001D62  6EDF               	movwf	indf2,c
 21914                           
 21915                           ; BSR set to: 0
 21916  001D64  2B6E               	incf	IncludeMacCommandsResponse@bufferIndex& (0+255),f,b
 21917                           
 21918                           ; BSR set to: 0
 21919                           ;lorawan.c: 1924: macBuffer[bufferIndex] = 0x00;
 21920  001D66  516E               	movf	IncludeMacCommandsResponse@bufferIndex& (0+255),w,b
 21921  001D68  0D01               	mullw	1
 21922  001D6A  50F3               	movf	prodl,w,c
 21923  001D6C  2560               	addwf	IncludeMacCommandsResponse@macBuffer& (0+255),w,b
 21924  001D6E  6ED9               	movwf	fsr2l,c
 21925  001D70  50F4               	movf	prodh,w,c
 21926  001D72  2161               	addwfc	(IncludeMacCommandsResponse@macBuffer+1)& (0+255),w,b
 21927  001D74  6EDA               	movwf	fsr2h,c
 21928  001D76  0E00               	movlw	0
 21929  001D78  6EDF               	movwf	indf2,c
 21930                           
 21931                           ; BSR set to: 0
 21932                           ;lorawan.c: 1925: if (loRa.macCommands[i].channelFrequencyAck == 1)
 21933  001D7A  516D               	movf	IncludeMacCommandsResponse@i& (0+255),w,b
 21934  001D7C  0D02               	mullw	2
 21935  001D7E  0E0A               	movlw	low _loRa
 21936  001D80  6F65               	movwf	??_IncludeMacCommandsResponse& (0+255),b
 21937  001D82  0E02               	movlw	high _loRa
 21938  001D84  6F66               	movwf	(??_IncludeMacCommandsResponse+1)& (0+255),b
 21939  001D86  0EA8               	movlw	168
 21940  001D88  2765               	addwf	??_IncludeMacCommandsResponse& (0+255),f,b
 21941  001D8A  0E00               	movlw	0
 21942  001D8C  2366               	addwfc	(??_IncludeMacCommandsResponse+1)& (0+255),f,b
 21943  001D8E  50F3               	movf	prodl,w,c
 21944  001D90  2765               	addwf	??_IncludeMacCommandsResponse& (0+255),f,b
 21945  001D92  50F4               	movf	prodh,w,c
 21946  001D94  2366               	addwfc	(??_IncludeMacCommandsResponse+1)& (0+255),f,b
 21947  001D96  0E01               	movlw	1
 21948  001D98  2565               	addwf	??_IncludeMacCommandsResponse& (0+255),w,b
 21949  001D9A  6ED9               	movwf	fsr2l,c
 21950  001D9C  0E00               	movlw	0
 21951  001D9E  2166               	addwfc	(??_IncludeMacCommandsResponse+1)& (0+255),w,b
 21952  001DA0  6EDA               	movwf	fsr2h,c
 21953  001DA2  0102               	movlb	2	; () banked
 21954  001DA4  AEDF               	btfss	indf2,7,c
 21955  001DA6  D00B               	goto	l1312
 21956                           
 21957                           ; BSR set to: 2
 21958                           ;lorawan.c: 1926: {
 21959                           ;lorawan.c: 1927: macBuffer[bufferIndex] |= 0x01;
 21960  001DA8  0100               	movlb	0	; () banked
 21961  001DAA  516E               	movf	IncludeMacCommandsResponse@bufferIndex& (0+255),w,b
 21962  001DAC  0D01               	mullw	1
 21963  001DAE  50F3               	movf	prodl,w,c
 21964  001DB0  2560               	addwf	IncludeMacCommandsResponse@macBuffer& (0+255),w,b
 21965  001DB2  6ED9               	movwf	fsr2l,c
 21966  001DB4  50F4               	movf	prodh,w,c
 21967  001DB6  2161               	addwfc	(IncludeMacCommandsResponse@macBuffer+1)& (0+255),w,b
 21968  001DB8  6EDA               	movwf	fsr2h,c
 21969  001DBA  0E00               	movlw	0
 21970  001DBC  80DB               	bsf	plusw2,0,c
 21971  001DBE                     l1312:
 21972                           
 21973                           ;lorawan.c: 1928: }
 21974                           ;lorawan.c: 1930: if (loRa.macCommands[i].dataRateRangeAck == 1)
 21975  001DBE  0100               	movlb	0	; () banked
 21976  001DC0  516D               	movf	IncludeMacCommandsResponse@i& (0+255),w,b
 21977  001DC2  0D02               	mullw	2
 21978  001DC4  0E0A               	movlw	low _loRa
 21979  001DC6  6F65               	movwf	??_IncludeMacCommandsResponse& (0+255),b
 21980  001DC8  0E02               	movlw	high _loRa
 21981  001DCA  6F66               	movwf	(??_IncludeMacCommandsResponse+1)& (0+255),b
 21982  001DCC  0EA8               	movlw	168
 21983  001DCE  2765               	addwf	??_IncludeMacCommandsResponse& (0+255),f,b
 21984  001DD0  0E00               	movlw	0
 21985  001DD2  2366               	addwfc	(??_IncludeMacCommandsResponse+1)& (0+255),f,b
 21986  001DD4  50F3               	movf	prodl,w,c
 21987  001DD6  2765               	addwf	??_IncludeMacCommandsResponse& (0+255),f,b
 21988  001DD8  50F4               	movf	prodh,w,c
 21989  001DDA  2366               	addwfc	(??_IncludeMacCommandsResponse+1)& (0+255),f,b
 21990  001DDC  0E01               	movlw	1
 21991  001DDE  2565               	addwf	??_IncludeMacCommandsResponse& (0+255),w,b
 21992  001DE0  6ED9               	movwf	fsr2l,c
 21993  001DE2  0E00               	movlw	0
 21994  001DE4  2166               	addwfc	(??_IncludeMacCommandsResponse+1)& (0+255),w,b
 21995  001DE6  6EDA               	movwf	fsr2h,c
 21996  001DE8  0102               	movlb	2	; () banked
 21997  001DEA  ACDF               	btfss	indf2,6,c
 21998  001DEC  D771               	goto	l1305
 21999                           
 22000                           ; BSR set to: 2
 22001                           ;lorawan.c: 1931: {
 22002                           ;lorawan.c: 1932: macBuffer[bufferIndex] |= 0x02;
 22003  001DEE  0100               	movlb	0	; () banked
 22004  001DF0  516E               	movf	IncludeMacCommandsResponse@bufferIndex& (0+255),w,b
 22005  001DF2  0D01               	mullw	1
 22006  001DF4  50F3               	movf	prodl,w,c
 22007  001DF6  2560               	addwf	IncludeMacCommandsResponse@macBuffer& (0+255),w,b
 22008  001DF8  6ED9               	movwf	fsr2l,c
 22009  001DFA  50F4               	movf	prodh,w,c
 22010  001DFC  2161               	addwfc	(IncludeMacCommandsResponse@macBuffer+1)& (0+255),w,b
 22011  001DFE  6EDA               	movwf	fsr2h,c
 22012  001E00  0E00               	movlw	0
 22013  001E02  82DB               	bsf	plusw2,1,c
 22014                           
 22015                           ; BSR set to: 0
 22016  001E04  D765               	goto	l1305
 22017  001E06                     l1314:
 22018                           
 22019                           ; BSR set to: 0
 22020                           ;lorawan.c: 1939: {
 22021                           ;lorawan.c: 1940: loRa.linkCheckMargin = 255;
 22022  001E06  0102               	movlb	2	; () banked
 22023  001E08  69E7               	setf	(_loRa+221)& (0+255),b
 22024                           
 22025                           ; BSR set to: 2
 22026                           ;lorawan.c: 1941: loRa.linkCheckGwCnt = 0;
 22027  001E0A  0E00               	movlw	0
 22028  001E0C  6FE8               	movwf	(_loRa+222)& (0+255),b
 22029                           
 22030                           ; BSR set to: 2
 22031                           ;lorawan.c: 1942: macBuffer[bufferIndex++] = loRa.macCommands[i].receivedCid;
 22032  001E0E  0100               	movlb	0	; () banked
 22033  001E10                     
 22034                           ; BSR set to: 0
 22035                           ;lorawan.c: 1947: case DUTY_CYCLE_CID:
 22036                           ;lorawan.c: 1948: {
 22037                           ;lorawan.c: 1949: macBuffer[bufferIndex++] = loRa.macCommands[i].receivedCid;
 22038                           
 22039                           ; BSR set to: 0
 22040                           
 22041                           ; BSR set to: 0
 22042  001E10  516D               	movf	IncludeMacCommandsResponse@i& (0+255),w,b
 22043  001E12  0D02               	mullw	2
 22044  001E14  0EB2               	movlw	low (_loRa+168)
 22045  001E16  24F3               	addwf	prodl,w,c
 22046  001E18  6ED9               	movwf	fsr2l,c
 22047  001E1A  0E02               	movlw	high (_loRa+168)
 22048  001E1C  20F4               	addwfc	prodh,w,c
 22049  001E1E  6EDA               	movwf	fsr2h,c
 22050  001E20  516E               	movf	IncludeMacCommandsResponse@bufferIndex& (0+255),w,b
 22051  001E22  0D01               	mullw	1
 22052  001E24  50F3               	movf	prodl,w,c
 22053  001E26  2560               	addwf	IncludeMacCommandsResponse@macBuffer& (0+255),w,b
 22054  001E28  6EE9               	movwf	fsr0l,c
 22055  001E2A  50F4               	movf	prodh,w,c
 22056  001E2C  2161               	addwfc	(IncludeMacCommandsResponse@macBuffer+1)& (0+255),w,b
 22057  001E2E  6EEA               	movwf	fsr0h,c
 22058  001E30  CFDF FFEF          	movff	indf2,indf0
 22059  001E34  D78B               	goto	L12
 22060  001E36                     l1296:
 22061                           
 22062                           ; BSR set to: 0
 22063                           
 22064                           ; BSR set to: 0
 22065  001E36  516D               	movf	IncludeMacCommandsResponse@i& (0+255),w,b
 22066  001E38  0D02               	mullw	2
 22067  001E3A  0EB2               	movlw	low (_loRa+168)
 22068  001E3C  24F3               	addwf	prodl,w,c
 22069  001E3E  6ED9               	movwf	fsr2l,c
 22070  001E40  0E02               	movlw	high (_loRa+168)
 22071  001E42  20F4               	addwfc	prodh,w,c
 22072  001E44  6EDA               	movwf	fsr2h,c
 22073  001E46  50DF               	movf	indf2,w,c
 22074                           
 22075                           ; Switch size 1, requested type "space"
 22076                           ; Number of cases is 7, Range of values is 2 to 8
 22077                           ; switch strategies available:
 22078                           ; Name         Instructions Cycles
 22079                           ; simple_byte           22    12 (average)
 22080                           ;	Chosen strategy is simple_byte
 22081  001E48  0A02               	xorlw	2	; case 2
 22082  001E4A  B4D8               	btfsc	status,2,c
 22083  001E4C  D7DC               	goto	l1314
 22084  001E4E  0A01               	xorlw	1	; case 3
 22085  001E50  B4D8               	btfsc	status,2,c
 22086  001E52  D643               	goto	l1297
 22087  001E54  0A07               	xorlw	7	; case 4
 22088  001E56  B4D8               	btfsc	status,2,c
 22089  001E58  D7DB               	goto	l1315
 22090  001E5A  0A01               	xorlw	1	; case 5
 22091  001E5C  B4D8               	btfsc	status,2,c
 22092  001E5E  D6BB               	goto	l1302
 22093  001E60  0A03               	xorlw	3	; case 6
 22094  001E62  B4D8               	btfsc	status,2,c
 22095  001E64  D737               	goto	l1306
 22096  001E66  0A01               	xorlw	1	; case 7
 22097  001E68  B4D8               	btfsc	status,2,c
 22098  001E6A  D772               	goto	l1311
 22099  001E6C  0A0F               	xorlw	15	; case 8
 22100  001E6E  B4D8               	btfsc	status,2,c
 22101  001E70  D7CF               	goto	l1315
 22102  001E72                     l1301:
 22103                           
 22104                           ; BSR set to: 0
 22105                           
 22106                           ; BSR set to: 0
 22107  001E72  2B6D               	incf	IncludeMacCommandsResponse@i& (0+255),f,b
 22108  001E74                     l1291:
 22109                           
 22110                           ; BSR set to: 0
 22111                           
 22112                           ; BSR set to: 0
 22113  001E74  0102               	movlb	2	; () banked
 22114  001E76  51B1               	movf	(_loRa+167)& (0+255),w,b
 22115  001E78  0100               	movlb	0	; () banked
 22116  001E7A  5D6D               	subwf	IncludeMacCommandsResponse@i& (0+255),w,b
 22117  001E7C  A0D8               	btfss	status,0,c
 22118  001E7E  D5E2               	goto	l1292
 22119  001E80                     u9690:
 22120                           
 22121                           ; BSR set to: 0
 22122                           ;lorawan.c: 1957: }
 22123                           ;lorawan.c: 1959: *pBufferIndex = bufferIndex;
 22124                           
 22125                           ; BSR set to: 0
 22126  001E80  C062  FFD9         	movff	IncludeMacCommandsResponse@pBufferIndex,fsr2l
 22127  001E84  C063  FFDA         	movff	IncludeMacCommandsResponse@pBufferIndex+1,fsr2h
 22128  001E88  C06E  FFDF         	movff	IncludeMacCommandsResponse@bufferIndex,indf2
 22129                           
 22130                           ; BSR set to: 0
 22131  001E8C  0012               	return		;funcret
 22132  001E8E                     __end_of_IncludeMacCommandsResponse:
 22133                           	opt stack 0
 22134                           tosu	equ	0xFFF
 22135                           tosh	equ	0xFFE
 22136                           tosl	equ	0xFFD
 22137                           pclath	equ	0xFFA
 22138                           tblptru	equ	0xFF8
 22139                           tblptrh	equ	0xFF7
 22140                           tblptrl	equ	0xFF6
 22141                           tablat	equ	0xFF5
 22142                           prodh	equ	0xFF4
 22143                           prodl	equ	0xFF3
 22144                           intcon	equ	0xFF2
 22145                           intcon2	equ	0xFF1
 22146                           intcon3	equ	0xFF0
 22147                           indf0	equ	0xFEF
 22148                           postinc0	equ	0xFEE
 22149                           fsr0h	equ	0xFEA
 22150                           fsr0l	equ	0xFE9
 22151                           wreg	equ	0xFE8
 22152                           postinc1	equ	0xFE6
 22153                           postdec1	equ	0xFE5
 22154                           plusw1	equ	0xFE3
 22155                           fsr1h	equ	0xFE2
 22156                           fsr1l	equ	0xFE1
 22157                           indf2	equ	0xFDF
 22158                           postinc2	equ	0xFDE
 22159                           postdec2	equ	0xFDD
 22160                           plusw2	equ	0xFDB
 22161                           fsr2h	equ	0xFDA
 22162                           fsr2l	equ	0xFD9
 22163                           status	equ	0xFD8
 22164                           
 22165 ;; *************** function _RADIO_GetPacketSnr *****************
 22166 ;; Defined at:
 22167 ;;		line 1429 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 22168 ;; Parameters:    Size  Location     Type
 22169 ;;		None
 22170 ;; Auto vars:     Size  Location     Type
 22171 ;;		None
 22172 ;; Return value:  Size  Location     Type
 22173 ;;                  1    wreg      char 
 22174 ;; Registers used:
 22175 ;;		wreg, status,2
 22176 ;; Tracked objects:
 22177 ;;		On entry : 0/0
 22178 ;;		On exit  : 0/0
 22179 ;;		Unchanged: 0/0
 22180 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22181 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22182 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22183 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22184 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22185 ;;Total ram usage:        0 bytes
 22186 ;; Hardware stack levels used:    1
 22187 ;; Hardware stack levels required when called:    7
 22188 ;; This function calls:
 22189 ;;		Nothing
 22190 ;; This function is called by:
 22191 ;;		_IncludeMacCommandsResponse
 22192 ;; This function uses a non-reentrant model
 22193 ;;
 22194                           
 22195                           	psect	text102
 22196  009554                     __ptext102:
 22197                           	opt stack 0
 22198  009554                     _RADIO_GetPacketSnr:
 22199                           	opt stack 20
 22200                           
 22201                           ;radio_driver_SX1276.c: 1431: return RadioConfiguration.packetSNR;
 22202                           
 22203                           ; BSR set to: 0
 22204                           ;incstack = 0
 22205  009554  0101               	movlb	1	; () banked
 22206  009556  5187               	movf	(_RadioConfiguration+50)& (0+255),w,b
 22207  009558  0012               	return	
 22208  00955A                     __end_of_RADIO_GetPacketSnr:
 22209                           	opt stack 0
 22210                           tosu	equ	0xFFF
 22211                           tosh	equ	0xFFE
 22212                           tosl	equ	0xFFD
 22213                           pclath	equ	0xFFA
 22214                           tblptru	equ	0xFF8
 22215                           tblptrh	equ	0xFF7
 22216                           tblptrl	equ	0xFF6
 22217                           tablat	equ	0xFF5
 22218                           prodh	equ	0xFF4
 22219                           prodl	equ	0xFF3
 22220                           intcon	equ	0xFF2
 22221                           intcon2	equ	0xFF1
 22222                           intcon3	equ	0xFF0
 22223                           indf0	equ	0xFEF
 22224                           postinc0	equ	0xFEE
 22225                           fsr0h	equ	0xFEA
 22226                           fsr0l	equ	0xFE9
 22227                           wreg	equ	0xFE8
 22228                           postinc1	equ	0xFE6
 22229                           postdec1	equ	0xFE5
 22230                           plusw1	equ	0xFE3
 22231                           fsr1h	equ	0xFE2
 22232                           fsr1l	equ	0xFE1
 22233                           indf2	equ	0xFDF
 22234                           postinc2	equ	0xFDE
 22235                           postdec2	equ	0xFDD
 22236                           plusw2	equ	0xFDB
 22237                           fsr2h	equ	0xFDA
 22238                           fsr2l	equ	0xFD9
 22239                           status	equ	0xFD8
 22240                           
 22241 ;; *************** function _FindSmallestDataRate *****************
 22242 ;; Defined at:
 22243 ;;		line 1963 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 22244 ;; Parameters:    Size  Location     Type
 22245 ;;		None
 22246 ;; Auto vars:     Size  Location     Type
 22247 ;;  dataRate        1    3[BANK0 ] unsigned char 
 22248 ;;  i               1    2[BANK0 ] unsigned char 
 22249 ;;  found           1    1[BANK0 ] unsigned char 
 22250 ;; Return value:  Size  Location     Type
 22251 ;;                  1    wreg      unsigned char 
 22252 ;; Registers used:
 22253 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 22254 ;; Tracked objects:
 22255 ;;		On entry : 0/0
 22256 ;;		On exit  : 0/0
 22257 ;;		Unchanged: 0/0
 22258 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22259 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22260 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22261 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22262 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22263 ;;Total ram usage:        4 bytes
 22264 ;; Hardware stack levels used:    1
 22265 ;; Hardware stack levels required when called:    7
 22266 ;; This function calls:
 22267 ;;		Nothing
 22268 ;; This function is called by:
 22269 ;;		_AckRetransmissionCallback
 22270 ;;		_AssemblePacket
 22271 ;; This function uses a non-reentrant model
 22272 ;;
 22273                           
 22274                           	psect	text103
 22275  006A4E                     __ptext103:
 22276                           	opt stack 0
 22277  006A4E                     _FindSmallestDataRate:
 22278                           	opt stack 21
 22279                           
 22280                           ;lorawan.c: 1965: uint8_t i = 0, dataRate;
 22281                           
 22282                           ; BSR set to: 1
 22283                           ;incstack = 0
 22284  006A4E  0E00               	movlw	0
 22285  006A50  0100               	movlb	0	; () banked
 22286  006A52  6F62               	movwf	FindSmallestDataRate@i& (0+255),b
 22287                           
 22288                           ;lorawan.c: 1966: bool found = 0;
 22289  006A54  0E00               	movlw	0
 22290  006A56  6F61               	movwf	FindSmallestDataRate@found& (0+255),b
 22291                           
 22292                           ; BSR set to: 0
 22293                           ;lorawan.c: 1968: if (loRa.currentDataRate > loRa.minDataRate)
 22294  006A58  0102               	movlb	2	; () banked
 22295  006A5A  51E9               	movf	(_loRa+223)& (0+255),w,b
 22296  006A5C  5DF5               	subwf	(_loRa+235)& (0+255),w,b
 22297  006A5E  B0D8               	btfsc	status,0,c
 22298  006A60  D062               	goto	l1332
 22299                           
 22300                           ; BSR set to: 2
 22301                           ;lorawan.c: 1969: {
 22302                           ;lorawan.c: 1970: dataRate = loRa.currentDataRate - 1;
 22303  006A62  05E9               	decf	(_loRa+223)& (0+255),w,b
 22304  006A64  0100               	movlb	0	; () banked
 22305  006A66  D050               	goto	L13
 22306  006A68                     
 22307                           ; BSR set to: 0
 22308                           ;lorawan.c: 1973: {
 22309                           ;lorawan.c: 1974: for ( i = 0; i < loRa.maxChannels; i++ )
 22310                           
 22311                           ; BSR set to: 0
 22312  006A68  0E00               	movlw	0
 22313  006A6A  6F62               	movwf	FindSmallestDataRate@i& (0+255),b
 22314  006A6C  D03D               	goto	l1324
 22315  006A6E                     
 22316                           ; BSR set to: 0
 22317                           ;lorawan.c: 1975: {
 22318                           ;lorawan.c: 1976: if ( (dataRate >= Channels[i].dataRange.min) && (dataRate <= Channels[
      +                          i].dataRange.max ) && ( Channels[i].status == 1 ) )
 22319                           
 22320                           ; BSR set to: 0
 22321  006A6E  5162               	movf	FindSmallestDataRate@i& (0+255),w,b
 22322  006A70  0D0E               	mullw	14
 22323  006A72  0E05               	movlw	5
 22324  006A74  26F3               	addwf	prodl,f,c
 22325  006A76  0E00               	movlw	0
 22326  006A78  22F4               	addwfc	prodh,f,c
 22327  006A7A  0E00               	movlw	low _Channels
 22328  006A7C  24F3               	addwf	prodl,w,c
 22329  006A7E  6ED9               	movwf	fsr2l,c
 22330  006A80  0E04               	movlw	high _Channels
 22331  006A82  20F4               	addwfc	prodh,w,c
 22332  006A84  6EDA               	movwf	fsr2h,c
 22333  006A86  0104               	movlb	4	; () banked
 22334  006A88  50DF               	movf	223,w,c
 22335  006A8A  0B0F               	andlw	15
 22336  006A8C  0100               	movlb	0	; () banked
 22337  006A8E  6F60               	movwf	??_FindSmallestDataRate& (0+255),b
 22338  006A90  5160               	movf	??_FindSmallestDataRate& (0+255),w,b
 22339  006A92  5D63               	subwf	FindSmallestDataRate@dataRate& (0+255),w,b
 22340  006A94  A0D8               	btfss	status,0,c
 22341  006A96  D027               	goto	l1326
 22342                           
 22343                           ; BSR set to: 0
 22344  006A98  5162               	movf	FindSmallestDataRate@i& (0+255),w,b
 22345  006A9A  0D0E               	mullw	14
 22346  006A9C  0E05               	movlw	5
 22347  006A9E  26F3               	addwf	prodl,f,c
 22348  006AA0  0E00               	movlw	0
 22349  006AA2  22F4               	addwfc	prodh,f,c
 22350  006AA4  0E00               	movlw	low _Channels
 22351  006AA6  24F3               	addwf	prodl,w,c
 22352  006AA8  6ED9               	movwf	fsr2l,c
 22353  006AAA  0E04               	movlw	high _Channels
 22354  006AAC  20F4               	addwfc	prodh,w,c
 22355  006AAE  6EDA               	movwf	fsr2h,c
 22356  006AB0  0104               	movlb	4	; () banked
 22357  006AB2  38DF               	swapf	223,w,c
 22358  006AB4  0B0F               	andlw	15
 22359  006AB6  0100               	movlb	0	; () banked
 22360  006AB8  6F60               	movwf	??_FindSmallestDataRate& (0+255),b
 22361  006ABA  5163               	movf	FindSmallestDataRate@dataRate& (0+255),w,b
 22362  006ABC  5D60               	subwf	??_FindSmallestDataRate& (0+255),w,b
 22363  006ABE  A0D8               	btfss	status,0,c
 22364  006AC0  D012               	goto	l1326
 22365                           
 22366                           ; BSR set to: 0
 22367  006AC2  5162               	movf	FindSmallestDataRate@i& (0+255),w,b
 22368  006AC4  0D0E               	mullw	14
 22369  006AC6  0E04               	movlw	4
 22370  006AC8  26F3               	addwf	prodl,f,c
 22371  006ACA  0E00               	movlw	0
 22372  006ACC  22F4               	addwfc	prodh,f,c
 22373  006ACE  0E00               	movlw	low _Channels
 22374  006AD0  24F3               	addwf	prodl,w,c
 22375  006AD2  6ED9               	movwf	fsr2l,c
 22376  006AD4  0E04               	movlw	high _Channels
 22377  006AD6  20F4               	addwfc	prodh,w,c
 22378  006AD8  6EDA               	movwf	fsr2h,c
 22379  006ADA  04DE               	decf	postinc2,w,c
 22380  006ADC  A4D8               	btfss	status,2,c
 22381  006ADE  D003               	goto	l1326
 22382                           
 22383                           ; BSR set to: 0
 22384                           ;lorawan.c: 1977: {
 22385                           ;lorawan.c: 1978: found = 1;
 22386  006AE0  0E01               	movlw	1
 22387  006AE2  6F61               	movwf	FindSmallestDataRate@found& (0+255),b
 22388                           
 22389                           ;lorawan.c: 1979: break;
 22390  006AE4  D007               	goto	u9300
 22391  006AE6                     l1326:
 22392                           
 22393                           ; BSR set to: 0
 22394                           
 22395                           ; BSR set to: 0
 22396  006AE6  2B62               	incf	FindSmallestDataRate@i& (0+255),f,b
 22397  006AE8                     l1324:
 22398                           
 22399                           ; BSR set to: 0
 22400                           
 22401                           ; BSR set to: 0
 22402  006AE8  0102               	movlb	2	; () banked
 22403  006AEA  51F7               	movf	(_loRa+237)& (0+255),w,b
 22404  006AEC  0100               	movlb	0	; () banked
 22405  006AEE  5D62               	subwf	FindSmallestDataRate@i& (0+255),w,b
 22406  006AF0  A0D8               	btfss	status,0,c
 22407  006AF2  D7BD               	goto	l1325
 22408  006AF4                     u9300:
 22409                           
 22410                           ; BSR set to: 0
 22411                           ;lorawan.c: 1980: }
 22412                           ;lorawan.c: 1981: }
 22413                           ;lorawan.c: 1982: if ( (found == 0) && (dataRate > loRa.minDataRate) )
 22414                           
 22415                           ; BSR set to: 0
 22416  006AF4  5161               	movf	FindSmallestDataRate@found& (0+255),w,b
 22417  006AF6  A4D8               	btfss	status,2,c
 22418  006AF8  D008               	goto	l1328
 22419                           
 22420                           ; BSR set to: 0
 22421  006AFA  5163               	movf	FindSmallestDataRate@dataRate& (0+255),w,b
 22422  006AFC  0102               	movlb	2	; () banked
 22423  006AFE  5DF5               	subwf	(_loRa+235)& (0+255),w,b
 22424  006B00  B0D8               	btfsc	status,0,c
 22425  006B02  D003               	goto	l1328
 22426                           
 22427                           ; BSR set to: 2
 22428                           ;lorawan.c: 1983: {
 22429                           ;lorawan.c: 1984: dataRate = dataRate - 1;
 22430  006B04  0100               	movlb	0	; () banked
 22431  006B06  0563               	decf	FindSmallestDataRate@dataRate& (0+255),w,b
 22432  006B08                     L13:
 22433  006B08  6F63               	movwf	FindSmallestDataRate@dataRate& (0+255),b
 22434  006B0A                     l1328:
 22435                           
 22436                           ; BSR set to: 0
 22437                           
 22438                           ; BSR set to: 0
 22439  006B0A  0100               	movlb	0	; () banked
 22440  006B0C  5161               	movf	FindSmallestDataRate@found& (0+255),w,b
 22441  006B0E  A4D8               	btfss	status,2,c
 22442  006B10  D006               	goto	u9340
 22443                           
 22444                           ; BSR set to: 0
 22445  006B12  0102               	movlb	2	; () banked
 22446  006B14  51F5               	movf	(_loRa+235)& (0+255),w,b
 22447  006B16  0100               	movlb	0	; () banked
 22448  006B18  5D63               	subwf	FindSmallestDataRate@dataRate& (0+255),w,b
 22449  006B1A  B0D8               	btfsc	status,0,c
 22450  006B1C  D7A5               	goto	l1323
 22451  006B1E                     u9340:
 22452                           
 22453                           ; BSR set to: 0
 22454                           ;lorawan.c: 1985: }
 22455                           ;lorawan.c: 1986: }
 22456                           ;lorawan.c: 1988: if (found == 1)
 22457                           
 22458                           ; BSR set to: 0
 22459                           
 22460                           ; BSR set to: 0
 22461  006B1E  0561               	decf	FindSmallestDataRate@found& (0+255),w,b
 22462  006B20  B4D8               	btfsc	status,2,c
 22463                           
 22464                           ; BSR set to: 0
 22465                           ;lorawan.c: 1989: {
 22466                           ;lorawan.c: 1990: loRa.currentDataRate = dataRate;
 22467  006B22  C063  F2E9         	movff	FindSmallestDataRate@dataRate,_loRa+223
 22468  006B26                     l1332:
 22469                           
 22470                           ;lorawan.c: 1991: }
 22471                           ;lorawan.c: 1992: }
 22472                           ;lorawan.c: 1994: return found;
 22473                           
 22474                           ; BSR set to: 0
 22475                           
 22476                           ; BSR set to: 0
 22477  006B26  0100               	movlb	0	; () banked
 22478  006B28  5161               	movf	FindSmallestDataRate@found& (0+255),w,b
 22479  006B2A  0012               	return	
 22480  006B2C                     __end_of_FindSmallestDataRate:
 22481                           	opt stack 0
 22482                           tosu	equ	0xFFF
 22483                           tosh	equ	0xFFE
 22484                           tosl	equ	0xFFD
 22485                           pclath	equ	0xFFA
 22486                           tblptru	equ	0xFF8
 22487                           tblptrh	equ	0xFF7
 22488                           tblptrl	equ	0xFF6
 22489                           tablat	equ	0xFF5
 22490                           prodh	equ	0xFF4
 22491                           prodl	equ	0xFF3
 22492                           intcon	equ	0xFF2
 22493                           intcon2	equ	0xFF1
 22494                           intcon3	equ	0xFF0
 22495                           indf0	equ	0xFEF
 22496                           postinc0	equ	0xFEE
 22497                           fsr0h	equ	0xFEA
 22498                           fsr0l	equ	0xFE9
 22499                           wreg	equ	0xFE8
 22500                           postinc1	equ	0xFE6
 22501                           postdec1	equ	0xFE5
 22502                           plusw1	equ	0xFE3
 22503                           fsr1h	equ	0xFE2
 22504                           fsr1l	equ	0xFE1
 22505                           indf2	equ	0xFDF
 22506                           postinc2	equ	0xFDE
 22507                           postdec2	equ	0xFDD
 22508                           plusw2	equ	0xFDB
 22509                           fsr2h	equ	0xFDA
 22510                           fsr2l	equ	0xFD9
 22511                           status	equ	0xFD8
 22512                           
 22513 ;; *************** function _EncryptFRMPayload *****************
 22514 ;; Defined at:
 22515 ;;		line 2205 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 22516 ;; Parameters:    Size  Location     Type
 22517 ;;  buffer          2   49[BANK0 ] PTR unsigned char 
 22518 ;;		 -> testtest(2), radioBuffer(271), LORAWAN_RxDone@hdr(2), NULL(0), 
 22519 ;;  bufferLength    1   51[BANK0 ] unsigned char 
 22520 ;;  dir             1   52[BANK0 ] unsigned char 
 22521 ;;  frameCounter    4   53[BANK0 ] unsigned long 
 22522 ;;  key             2   57[BANK0 ] PTR unsigned char 
 22523 ;;		 -> loRa.activationParameters(105), loRa(245), 
 22524 ;;  macBufferInd    1   59[BANK0 ] unsigned char 
 22525 ;;  bufferToBeEn    2   60[BANK0 ] PTR unsigned char 
 22526 ;;		 -> radioBuffer(271), macBuffer(271), 
 22527 ;;  multicastSta    1   62[BANK0 ] unsigned char 
 22528 ;; Auto vars:     Size  Location     Type
 22529 ;;  j               1   70[BANK0 ] unsigned char 
 22530 ;;  i               1   69[BANK0 ] unsigned char 
 22531 ;;  k               1   68[BANK0 ] unsigned char 
 22532 ;; Return value:  Size  Location     Type
 22533 ;;                  1    wreg      void 
 22534 ;; Registers used:
 22535 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22536 ;; Tracked objects:
 22537 ;;		On entry : 0/0
 22538 ;;		On exit  : 0/0
 22539 ;;		Unchanged: 0/0
 22540 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22541 ;;      Params:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22542 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22543 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22544 ;;      Totals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22545 ;;Total ram usage:       22 bytes
 22546 ;; Hardware stack levels used:    1
 22547 ;; Hardware stack levels required when called:   10
 22548 ;; This function calls:
 22549 ;;		_AESEncodeLoRa
 22550 ;;		_AssembleEncryptionBlock
 22551 ;;		___awdiv
 22552 ;; This function is called by:
 22553 ;;		_LORAWAN_RxDone
 22554 ;;		_AssemblePacket
 22555 ;; This function uses a non-reentrant model
 22556 ;;
 22557                           
 22558                           	psect	text104
 22559  004F2C                     __ptext104:
 22560                           	opt stack 0
 22561  004F2C                     _EncryptFRMPayload:
 22562                           	opt stack 18
 22563                           
 22564                           ;lorawan.c: 2207: uint8_t k = 0, i = 0, j = 0;
 22565                           
 22566                           ; BSR set to: 0
 22567                           ;incstack = 0
 22568  004F2C  0E00               	movlw	0
 22569  004F2E  0100               	movlb	0	; () banked
 22570  004F30  6FA4               	movwf	EncryptFRMPayload@k& (0+255),b
 22571  004F32  0E00               	movlw	0
 22572  004F34  6FA5               	movwf	EncryptFRMPayload@i& (0+255),b
 22573  004F36  0E00               	movlw	0
 22574  004F38  6FA6               	movwf	EncryptFRMPayload@j& (0+255),b
 22575                           
 22576                           ; BSR set to: 0
 22577                           ;lorawan.c: 2209: k = bufferLength / 16;
 22578  004F3A  C093  F066         	movff	EncryptFRMPayload@bufferLength,___awdiv@dividend
 22579  004F3E  6B67               	clrf	(___awdiv@dividend+1)& (0+255),b
 22580  004F40  0E00               	movlw	0
 22581  004F42  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
 22582  004F44  0E10               	movlw	16
 22583  004F46  6F68               	movwf	___awdiv@divisor& (0+255),b
 22584  004F48  EC5E  F03C         	call	___awdiv	;wreg free
 22585  004F4C  0100               	movlb	0	; () banked
 22586  004F4E  5166               	movf	?___awdiv& (0+255),w,b
 22587  004F50  6FA4               	movwf	EncryptFRMPayload@k& (0+255),b
 22588                           
 22589                           ; BSR set to: 0
 22590                           ;lorawan.c: 2210: for (i = 1; i <= k; i++)
 22591  004F52  0E01               	movlw	1
 22592  004F54  6FA5               	movwf	EncryptFRMPayload@i& (0+255),b
 22593  004F56  D05A               	goto	l1397
 22594  004F58                     
 22595                           ; BSR set to: 0
 22596                           ;lorawan.c: 2211: {
 22597                           ;lorawan.c: 2212: AssembleEncryptionBlock (dir, frameCounter, i, 0x01, multicastStatus);
 22598                           
 22599                           ; BSR set to: 0
 22600  004F58  C095  F06B         	movff	EncryptFRMPayload@frameCounter,AssembleEncryptionBlock@frameCounter
 22601  004F5C  C096  F06C         	movff	EncryptFRMPayload@frameCounter+1,AssembleEncryptionBlock@frameCounter+1
 22602  004F60  C097  F06D         	movff	EncryptFRMPayload@frameCounter+2,AssembleEncryptionBlock@frameCounter+2
 22603  004F64  C098  F06E         	movff	EncryptFRMPayload@frameCounter+3,AssembleEncryptionBlock@frameCounter+3
 22604  004F68  C0A5  F06F         	movff	EncryptFRMPayload@i,AssembleEncryptionBlock@blockId
 22605  004F6C  0E01               	movlw	1
 22606  004F6E  6F70               	movwf	AssembleEncryptionBlock@firstByte& (0+255),b
 22607  004F70  C09E  F071         	movff	EncryptFRMPayload@multicastStatus,AssembleEncryptionBlock@multicastStatus
 22608  004F74  5194               	movf	EncryptFRMPayload@dir& (0+255),w,b
 22609  004F76  ECD6  F032         	call	_AssembleEncryptionBlock
 22610                           
 22611                           ;lorawan.c: 2213: AESEncodeLoRa(aesBuffer, key);
 22612  004F7A  0EA0               	movlw	low _aesBuffer
 22613  004F7C  0100               	movlb	0	; () banked
 22614  004F7E  6F7D               	movwf	AESEncodeLoRa@block& (0+255),b
 22615  004F80  0E03               	movlw	high _aesBuffer
 22616  004F82  6F7E               	movwf	(AESEncodeLoRa@block+1)& (0+255),b
 22617  004F84  C099  F07F         	movff	EncryptFRMPayload@key,AESEncodeLoRa@key
 22618  004F88  C09A  F080         	movff	EncryptFRMPayload@key+1,AESEncodeLoRa@key+1
 22619  004F8C  EC1E  F046         	call	_AESEncodeLoRa	;wreg free
 22620                           
 22621                           ;lorawan.c: 2215: for (j = 0; j < 16; j++)
 22622  004F90  0E00               	movlw	0
 22623  004F92  0100               	movlb	0	; () banked
 22624  004F94  6FA6               	movwf	EncryptFRMPayload@j& (0+255),b
 22625  004F96                     l9885:
 22626                           
 22627                           ; BSR set to: 0
 22628  004F96  0E0F               	movlw	15
 22629  004F98  65A6               	cpfsgt	EncryptFRMPayload@j& (0+255),b
 22630  004F9A  D001               	goto	l1399
 22631  004F9C  D036               	goto	u9380
 22632  004F9E                     l1399:
 22633                           
 22634                           ; BSR set to: 0
 22635                           ;lorawan.c: 2216: {
 22636                           ;lorawan.c: 2217: bufferToBeEncrypted[macBufferIndex++] = aesBuffer[j] ^ buffer[16*(i-1)
      +                           + j];
 22637                           
 22638                           ; BSR set to: 0
 22639  004F9E  519B               	movf	EncryptFRMPayload@macBufferIndex& (0+255),w,b
 22640  004FA0  0D01               	mullw	1
 22641  004FA2  50F3               	movf	prodl,w,c
 22642  004FA4  259C               	addwf	EncryptFRMPayload@bufferToBeEncrypted& (0+255),w,b
 22643  004FA6  6ED9               	movwf	fsr2l,c
 22644  004FA8  50F4               	movf	prodh,w,c
 22645  004FAA  219D               	addwfc	(EncryptFRMPayload@bufferToBeEncrypted+1)& (0+255),w,b
 22646  004FAC  6EDA               	movwf	fsr2h,c
 22647  004FAE  0EF0               	movlw	240
 22648  004FB0  6F9F               	movwf	??_EncryptFRMPayload& (0+255),b
 22649  004FB2  0EFF               	movlw	255
 22650  004FB4  6FA0               	movwf	(??_EncryptFRMPayload+1)& (0+255),b
 22651  004FB6  51A5               	movf	EncryptFRMPayload@i& (0+255),w,b
 22652  004FB8  6FA1               	movwf	(??_EncryptFRMPayload+2)& (0+255),b
 22653  004FBA  6BA2               	clrf	(??_EncryptFRMPayload+3)& (0+255),b
 22654  004FBC  3BA1               	swapf	(??_EncryptFRMPayload+2)& (0+255),f,b
 22655  004FBE  3BA2               	swapf	(??_EncryptFRMPayload+3)& (0+255),f,b
 22656  004FC0  0EF0               	movlw	240
 22657  004FC2  17A2               	andwf	(??_EncryptFRMPayload+3)& (0+255),f,b
 22658  004FC4  51A1               	movf	(??_EncryptFRMPayload+2)& (0+255),w,b
 22659  004FC6  0B0F               	andlw	15
 22660  004FC8  13A2               	iorwf	(??_EncryptFRMPayload+3)& (0+255),f,b
 22661  004FCA  0EF0               	movlw	240
 22662  004FCC  17A1               	andwf	(??_EncryptFRMPayload+2)& (0+255),f,b
 22663  004FCE  51A6               	movf	EncryptFRMPayload@j& (0+255),w,b
 22664  004FD0  27A1               	addwf	(??_EncryptFRMPayload+2)& (0+255),f,b
 22665  004FD2  0E00               	movlw	0
 22666  004FD4  23A2               	addwfc	(??_EncryptFRMPayload+3)& (0+255),f,b
 22667  004FD6  519F               	movf	??_EncryptFRMPayload& (0+255),w,b
 22668  004FD8  27A1               	addwf	(??_EncryptFRMPayload+2)& (0+255),f,b
 22669  004FDA  51A0               	movf	(??_EncryptFRMPayload+1)& (0+255),w,b
 22670  004FDC  23A2               	addwfc	(??_EncryptFRMPayload+3)& (0+255),f,b
 22671  004FDE  51A1               	movf	(??_EncryptFRMPayload+2)& (0+255),w,b
 22672  004FE0  2591               	addwf	EncryptFRMPayload@buffer& (0+255),w,b
 22673  004FE2  6EE9               	movwf	fsr0l,c
 22674  004FE4  51A2               	movf	(??_EncryptFRMPayload+3)& (0+255),w,b
 22675  004FE6  2192               	addwfc	(EncryptFRMPayload@buffer+1)& (0+255),w,b
 22676  004FE8  6EEA               	movwf	fsr0h,c
 22677  004FEA  50EF               	movf	indf0,w,c
 22678  004FEC  6FA3               	movwf	(??_EncryptFRMPayload+4)& (0+255),b
 22679  004FEE  51A6               	movf	EncryptFRMPayload@j& (0+255),w,b
 22680  004FF0  0D01               	mullw	1
 22681  004FF2  0EA0               	movlw	low _aesBuffer
 22682  004FF4  24F3               	addwf	prodl,w,c
 22683  004FF6  6EE9               	movwf	fsr0l,c
 22684  004FF8  0E03               	movlw	high _aesBuffer
 22685  004FFA  20F4               	addwfc	prodh,w,c
 22686  004FFC  6EEA               	movwf	fsr0h,c
 22687  004FFE  50EF               	movf	indf0,w,c
 22688  005000  19A3               	xorwf	(??_EncryptFRMPayload+4)& (0+255),w,b
 22689  005002  6EDF               	movwf	indf2,c
 22690                           
 22691                           ; BSR set to: 0
 22692  005004  2B9B               	incf	EncryptFRMPayload@macBufferIndex& (0+255),f,b
 22693                           
 22694                           ; BSR set to: 0
 22695  005006  2BA6               	incf	EncryptFRMPayload@j& (0+255),f,b
 22696  005008  D7C6               	goto	l9885
 22697  00500A                     u9380:
 22698                           
 22699                           ; BSR set to: 0
 22700                           
 22701                           ; BSR set to: 0
 22702  00500A  2BA5               	incf	EncryptFRMPayload@i& (0+255),f,b
 22703  00500C                     l1397:
 22704                           
 22705                           ; BSR set to: 0
 22706                           
 22707                           ; BSR set to: 0
 22708  00500C  51A5               	movf	EncryptFRMPayload@i& (0+255),w,b
 22709  00500E  5DA4               	subwf	EncryptFRMPayload@k& (0+255),w,b
 22710  005010  B0D8               	btfsc	status,0,c
 22711  005012  D7A2               	goto	l1398
 22712                           
 22713                           ; BSR set to: 0
 22714                           ;lorawan.c: 2218: }
 22715                           ;lorawan.c: 2219: }
 22716                           ;lorawan.c: 2221: if ( (bufferLength % 16) != 0 )
 22717                           
 22718                           ; BSR set to: 0
 22719  005014  C093  F09F         	movff	EncryptFRMPayload@bufferLength,??_EncryptFRMPayload
 22720  005018  0E0F               	movlw	15
 22721  00501A  179F               	andwf	??_EncryptFRMPayload& (0+255),f,b
 22722  00501C  B4D8               	btfsc	status,2,c
 22723  00501E  0012               	return	
 22724                           
 22725                           ; BSR set to: 0
 22726                           ;lorawan.c: 2222: {
 22727                           ;lorawan.c: 2223: AssembleEncryptionBlock (dir, frameCounter, i, 0x01, multicastStatus);
 22728  005020  C095  F06B         	movff	EncryptFRMPayload@frameCounter,AssembleEncryptionBlock@frameCounter
 22729  005024  C096  F06C         	movff	EncryptFRMPayload@frameCounter+1,AssembleEncryptionBlock@frameCounter+1
 22730  005028  C097  F06D         	movff	EncryptFRMPayload@frameCounter+2,AssembleEncryptionBlock@frameCounter+2
 22731  00502C  C098  F06E         	movff	EncryptFRMPayload@frameCounter+3,AssembleEncryptionBlock@frameCounter+3
 22732  005030  C0A5  F06F         	movff	EncryptFRMPayload@i,AssembleEncryptionBlock@blockId
 22733  005034  0E01               	movlw	1
 22734  005036  6F70               	movwf	AssembleEncryptionBlock@firstByte& (0+255),b
 22735  005038  C09E  F071         	movff	EncryptFRMPayload@multicastStatus,AssembleEncryptionBlock@multicastStatus
 22736  00503C  5194               	movf	EncryptFRMPayload@dir& (0+255),w,b
 22737  00503E  ECD6  F032         	call	_AssembleEncryptionBlock
 22738                           
 22739                           ;lorawan.c: 2224: AESEncodeLoRa (aesBuffer, key);
 22740  005042  0EA0               	movlw	low _aesBuffer
 22741  005044  0100               	movlb	0	; () banked
 22742  005046  6F7D               	movwf	AESEncodeLoRa@block& (0+255),b
 22743  005048  0E03               	movlw	high _aesBuffer
 22744  00504A  6F7E               	movwf	(AESEncodeLoRa@block+1)& (0+255),b
 22745  00504C  C099  F07F         	movff	EncryptFRMPayload@key,AESEncodeLoRa@key
 22746  005050  C09A  F080         	movff	EncryptFRMPayload@key+1,AESEncodeLoRa@key+1
 22747  005054  EC1E  F046         	call	_AESEncodeLoRa	;wreg free
 22748                           
 22749                           ;lorawan.c: 2226: for (j = 0; j < (bufferLength % 16); j++)
 22750  005058  0E00               	movlw	0
 22751  00505A  0100               	movlb	0	; () banked
 22752  00505C  6FA6               	movwf	EncryptFRMPayload@j& (0+255),b
 22753  00505E  D023               	goto	l1403
 22754  005060                     
 22755                           ; BSR set to: 0
 22756                           ;lorawan.c: 2227: {
 22757                           ;lorawan.c: 2228: bufferToBeEncrypted[macBufferIndex++] = aesBuffer[j] ^ buffer[(16*k) +
      +                           j];
 22758                           
 22759                           ; BSR set to: 0
 22760  005060  519B               	movf	EncryptFRMPayload@macBufferIndex& (0+255),w,b
 22761  005062  0D01               	mullw	1
 22762  005064  50F3               	movf	prodl,w,c
 22763  005066  259C               	addwf	EncryptFRMPayload@bufferToBeEncrypted& (0+255),w,b
 22764  005068  6ED9               	movwf	fsr2l,c
 22765  00506A  50F4               	movf	prodh,w,c
 22766  00506C  219D               	addwfc	(EncryptFRMPayload@bufferToBeEncrypted+1)& (0+255),w,b
 22767  00506E  6EDA               	movwf	fsr2h,c
 22768  005070  51A4               	movf	EncryptFRMPayload@k& (0+255),w,b
 22769  005072  0D10               	mullw	16
 22770  005074  51A6               	movf	EncryptFRMPayload@j& (0+255),w,b
 22771  005076  26F3               	addwf	prodl,f,c
 22772  005078  0E00               	movlw	0
 22773  00507A  22F4               	addwfc	prodh,f,c
 22774  00507C  50F3               	movf	prodl,w,c
 22775  00507E  2591               	addwf	EncryptFRMPayload@buffer& (0+255),w,b
 22776  005080  6EE9               	movwf	fsr0l,c
 22777  005082  50F4               	movf	prodh,w,c
 22778  005084  2192               	addwfc	(EncryptFRMPayload@buffer+1)& (0+255),w,b
 22779  005086  6EEA               	movwf	fsr0h,c
 22780  005088  50EF               	movf	indf0,w,c
 22781  00508A  6F9F               	movwf	??_EncryptFRMPayload& (0+255),b
 22782  00508C  51A6               	movf	EncryptFRMPayload@j& (0+255),w,b
 22783  00508E  0D01               	mullw	1
 22784  005090  0EA0               	movlw	low _aesBuffer
 22785  005092  24F3               	addwf	prodl,w,c
 22786  005094  6EE9               	movwf	fsr0l,c
 22787  005096  0E03               	movlw	high _aesBuffer
 22788  005098  20F4               	addwfc	prodh,w,c
 22789  00509A  6EEA               	movwf	fsr0h,c
 22790  00509C  50EF               	movf	indf0,w,c
 22791  00509E  199F               	xorwf	??_EncryptFRMPayload& (0+255),w,b
 22792  0050A0  6EDF               	movwf	indf2,c
 22793                           
 22794                           ; BSR set to: 0
 22795  0050A2  2B9B               	incf	EncryptFRMPayload@macBufferIndex& (0+255),f,b
 22796                           
 22797                           ; BSR set to: 0
 22798  0050A4  2BA6               	incf	EncryptFRMPayload@j& (0+255),f,b
 22799  0050A6                     l1403:
 22800                           
 22801                           ; BSR set to: 0
 22802                           
 22803                           ; BSR set to: 0
 22804  0050A6  C093  F09F         	movff	EncryptFRMPayload@bufferLength,??_EncryptFRMPayload
 22805  0050AA  0E0F               	movlw	15
 22806  0050AC  179F               	andwf	??_EncryptFRMPayload& (0+255),f,b
 22807  0050AE  519F               	movf	??_EncryptFRMPayload& (0+255),w,b
 22808  0050B0  5DA6               	subwf	EncryptFRMPayload@j& (0+255),w,b
 22809  0050B2  B0D8               	btfsc	status,0,c
 22810  0050B4  0012               	return	
 22811  0050B6  D7D4               	goto	l1404
 22812  0050B8                     __end_of_EncryptFRMPayload:
 22813                           	opt stack 0
 22814                           tosu	equ	0xFFF
 22815                           tosh	equ	0xFFE
 22816                           tosl	equ	0xFFD
 22817                           pclath	equ	0xFFA
 22818                           tblptru	equ	0xFF8
 22819                           tblptrh	equ	0xFF7
 22820                           tblptrl	equ	0xFF6
 22821                           tablat	equ	0xFF5
 22822                           prodh	equ	0xFF4
 22823                           prodl	equ	0xFF3
 22824                           intcon	equ	0xFF2
 22825                           intcon2	equ	0xFF1
 22826                           intcon3	equ	0xFF0
 22827                           indf0	equ	0xFEF
 22828                           postinc0	equ	0xFEE
 22829                           fsr0h	equ	0xFEA
 22830                           fsr0l	equ	0xFE9
 22831                           wreg	equ	0xFE8
 22832                           postinc1	equ	0xFE6
 22833                           postdec1	equ	0xFE5
 22834                           plusw1	equ	0xFE3
 22835                           fsr1h	equ	0xFE2
 22836                           fsr1l	equ	0xFE1
 22837                           indf2	equ	0xFDF
 22838                           postinc2	equ	0xFDE
 22839                           postdec2	equ	0xFDD
 22840                           plusw2	equ	0xFDB
 22841                           fsr2h	equ	0xFDA
 22842                           fsr2l	equ	0xFD9
 22843                           status	equ	0xFD8
 22844                           
 22845 ;; *************** function ___awdiv *****************
 22846 ;; Defined at:
 22847 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awdiv.c"
 22848 ;; Parameters:    Size  Location     Type
 22849 ;;  dividend        2    6[BANK0 ] int 
 22850 ;;  divisor         2    8[BANK0 ] int 
 22851 ;; Auto vars:     Size  Location     Type
 22852 ;;  quotient        2   12[BANK0 ] int 
 22853 ;;  sign            1   11[BANK0 ] unsigned char 
 22854 ;;  counter         1   10[BANK0 ] unsigned char 
 22855 ;; Return value:  Size  Location     Type
 22856 ;;                  2    6[BANK0 ] int 
 22857 ;; Registers used:
 22858 ;;		wreg, status,2, status,0
 22859 ;; Tracked objects:
 22860 ;;		On entry : 0/0
 22861 ;;		On exit  : 0/0
 22862 ;;		Unchanged: 0/0
 22863 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22864 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22865 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22866 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22867 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22868 ;;Total ram usage:        8 bytes
 22869 ;; Hardware stack levels used:    1
 22870 ;; Hardware stack levels required when called:    7
 22871 ;; This function calls:
 22872 ;;		Nothing
 22873 ;; This function is called by:
 22874 ;;		_EncryptFRMPayload
 22875 ;;		_main
 22876 ;; This function uses a non-reentrant model
 22877 ;;
 22878                           
 22879                           	psect	text105
 22880  0078BC                     __ptext105:
 22881                           	opt stack 0
 22882  0078BC                     ___awdiv:
 22883                           	opt stack 23
 22884                           
 22885                           ; BSR set to: 0
 22886                           ;incstack = 0
 22887  0078BC  0E00               	movlw	0
 22888  0078BE  0100               	movlb	0	; () banked
 22889  0078C0  6F6B               	movwf	___awdiv@sign& (0+255),b
 22890                           
 22891                           ; BSR set to: 0
 22892  0078C2  AF69               	btfss	(___awdiv@divisor+1)& (0+255),7,b
 22893  0078C4  D006               	goto	l2997
 22894                           
 22895                           ; BSR set to: 0
 22896  0078C6  6D68               	negf	___awdiv@divisor& (0+255),b
 22897  0078C8  1F69               	comf	(___awdiv@divisor+1)& (0+255),f,b
 22898  0078CA  B0D8               	btfsc	status,0,c
 22899  0078CC  2B69               	incf	(___awdiv@divisor+1)& (0+255),f,b
 22900                           
 22901                           ; BSR set to: 0
 22902  0078CE  0E01               	movlw	1
 22903  0078D0  6F6B               	movwf	___awdiv@sign& (0+255),b
 22904  0078D2                     l2997:
 22905                           
 22906                           ; BSR set to: 0
 22907                           
 22908                           ; BSR set to: 0
 22909  0078D2  AF67               	btfss	(___awdiv@dividend+1)& (0+255),7,b
 22910  0078D4  D006               	goto	l2998
 22911                           
 22912                           ; BSR set to: 0
 22913  0078D6  6D66               	negf	___awdiv@dividend& (0+255),b
 22914  0078D8  1F67               	comf	(___awdiv@dividend+1)& (0+255),f,b
 22915  0078DA  B0D8               	btfsc	status,0,c
 22916  0078DC  2B67               	incf	(___awdiv@dividend+1)& (0+255),f,b
 22917                           
 22918                           ; BSR set to: 0
 22919  0078DE  0E01               	movlw	1
 22920  0078E0  1B6B               	xorwf	___awdiv@sign& (0+255),f,b
 22921  0078E2                     l2998:
 22922                           
 22923                           ; BSR set to: 0
 22924                           
 22925                           ; BSR set to: 0
 22926  0078E2  0E00               	movlw	0
 22927  0078E4  6F6D               	movwf	(___awdiv@quotient+1)& (0+255),b
 22928  0078E6  0E00               	movlw	0
 22929  0078E8  6F6C               	movwf	___awdiv@quotient& (0+255),b
 22930                           
 22931                           ; BSR set to: 0
 22932  0078EA  5168               	movf	___awdiv@divisor& (0+255),w,b
 22933  0078EC  1169               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
 22934  0078EE  B4D8               	btfsc	status,2,c
 22935  0078F0  D01C               	goto	l3005
 22936                           
 22937                           ; BSR set to: 0
 22938  0078F2  0E01               	movlw	1
 22939  0078F4  6F6A               	movwf	___awdiv@counter& (0+255),b
 22940  0078F6  D004               	goto	l3000
 22941  0078F8                     
 22942                           ; BSR set to: 0
 22943                           
 22944                           ; BSR set to: 0
 22945  0078F8  90D8               	bcf	status,0,c
 22946  0078FA  3768               	rlcf	___awdiv@divisor& (0+255),f,b
 22947  0078FC  3769               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
 22948  0078FE  2B6A               	incf	___awdiv@counter& (0+255),f,b
 22949  007900                     l3000:
 22950                           
 22951                           ; BSR set to: 0
 22952                           
 22953                           ; BSR set to: 0
 22954  007900  AF69               	btfss	(___awdiv@divisor+1)& (0+255),7,b
 22955  007902  D7FA               	goto	l3001
 22956  007904                     u8910:
 22957                           
 22958                           ; BSR set to: 0
 22959                           
 22960                           ; BSR set to: 0
 22961                           
 22962                           ; BSR set to: 0
 22963  007904  90D8               	bcf	status,0,c
 22964  007906  376C               	rlcf	___awdiv@quotient& (0+255),f,b
 22965  007908  376D               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
 22966                           
 22967                           ; BSR set to: 0
 22968  00790A  5168               	movf	___awdiv@divisor& (0+255),w,b
 22969  00790C  5D66               	subwf	___awdiv@dividend& (0+255),w,b
 22970  00790E  5169               	movf	(___awdiv@divisor+1)& (0+255),w,b
 22971  007910  5967               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
 22972  007912  A0D8               	btfss	status,0,c
 22973  007914  D005               	goto	l3004
 22974                           
 22975                           ; BSR set to: 0
 22976  007916  5168               	movf	___awdiv@divisor& (0+255),w,b
 22977  007918  5F66               	subwf	___awdiv@dividend& (0+255),f,b
 22978  00791A  5169               	movf	(___awdiv@divisor+1)& (0+255),w,b
 22979  00791C  5B67               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
 22980                           
 22981                           ; BSR set to: 0
 22982  00791E  816C               	bsf	___awdiv@quotient& (0+255),0,b
 22983  007920                     l3004:
 22984                           
 22985                           ; BSR set to: 0
 22986                           
 22987                           ; BSR set to: 0
 22988  007920  90D8               	bcf	status,0,c
 22989  007922  3369               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
 22990  007924  3368               	rrcf	___awdiv@divisor& (0+255),f,b
 22991                           
 22992                           ; BSR set to: 0
 22993  007926  2F6A               	decfsz	___awdiv@counter& (0+255),f,b
 22994  007928  D7ED               	goto	u8910
 22995  00792A                     l3005:
 22996                           
 22997                           ; BSR set to: 0
 22998                           
 22999                           ; BSR set to: 0
 23000                           
 23001                           ; BSR set to: 0
 23002  00792A  516B               	movf	___awdiv@sign& (0+255),w,b
 23003  00792C  B4D8               	btfsc	status,2,c
 23004  00792E  D004               	goto	l3006
 23005                           
 23006                           ; BSR set to: 0
 23007  007930  6D6C               	negf	___awdiv@quotient& (0+255),b
 23008  007932  1F6D               	comf	(___awdiv@quotient+1)& (0+255),f,b
 23009  007934  B0D8               	btfsc	status,0,c
 23010  007936  2B6D               	incf	(___awdiv@quotient+1)& (0+255),f,b
 23011  007938                     l3006:
 23012                           
 23013                           ; BSR set to: 0
 23014                           
 23015                           ; BSR set to: 0
 23016  007938  C06C  F066         	movff	___awdiv@quotient,?___awdiv
 23017  00793C  C06D  F067         	movff	___awdiv@quotient+1,?___awdiv+1
 23018  007940  0012               	return	
 23019  007942                     __end_of___awdiv:
 23020                           	opt stack 0
 23021                           tosu	equ	0xFFF
 23022                           tosh	equ	0xFFE
 23023                           tosl	equ	0xFFD
 23024                           pclath	equ	0xFFA
 23025                           tblptru	equ	0xFF8
 23026                           tblptrh	equ	0xFF7
 23027                           tblptrl	equ	0xFF6
 23028                           tablat	equ	0xFF5
 23029                           prodh	equ	0xFF4
 23030                           prodl	equ	0xFF3
 23031                           intcon	equ	0xFF2
 23032                           intcon2	equ	0xFF1
 23033                           intcon3	equ	0xFF0
 23034                           indf0	equ	0xFEF
 23035                           postinc0	equ	0xFEE
 23036                           fsr0h	equ	0xFEA
 23037                           fsr0l	equ	0xFE9
 23038                           wreg	equ	0xFE8
 23039                           postinc1	equ	0xFE6
 23040                           postdec1	equ	0xFE5
 23041                           plusw1	equ	0xFE3
 23042                           fsr1h	equ	0xFE2
 23043                           fsr1l	equ	0xFE1
 23044                           indf2	equ	0xFDF
 23045                           postinc2	equ	0xFDE
 23046                           postdec2	equ	0xFDD
 23047                           plusw2	equ	0xFDB
 23048                           fsr2h	equ	0xFDA
 23049                           fsr2l	equ	0xFD9
 23050                           status	equ	0xFD8
 23051                           
 23052 ;; *************** function _AssembleEncryptionBlock *****************
 23053 ;; Defined at:
 23054 ;;		line 2156 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 23055 ;; Parameters:    Size  Location     Type
 23056 ;;  dir             1    wreg     unsigned char 
 23057 ;;  frameCounter    4   11[BANK0 ] unsigned long 
 23058 ;;  blockId         1   15[BANK0 ] unsigned char 
 23059 ;;  firstByte       1   16[BANK0 ] unsigned char 
 23060 ;;  multicastSta    1   17[BANK0 ] unsigned char 
 23061 ;; Auto vars:     Size  Location     Type
 23062 ;;  dir             1   18[BANK0 ] unsigned char 
 23063 ;;  bufferIndex     1   19[BANK0 ] unsigned char 
 23064 ;; Return value:  Size  Location     Type
 23065 ;;                  1    wreg      void 
 23066 ;; Registers used:
 23067 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23068 ;; Tracked objects:
 23069 ;;		On entry : 0/0
 23070 ;;		On exit  : 0/0
 23071 ;;		Unchanged: 0/0
 23072 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23073 ;;      Params:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23074 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23075 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23076 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23077 ;;Total ram usage:        9 bytes
 23078 ;; Hardware stack levels used:    1
 23079 ;; Hardware stack levels required when called:    8
 23080 ;; This function calls:
 23081 ;;		_memcpy
 23082 ;;		_memset
 23083 ;; This function is called by:
 23084 ;;		_LORAWAN_RxDone
 23085 ;;		_AssemblePacket
 23086 ;;		_EncryptFRMPayload
 23087 ;; This function uses a non-reentrant model
 23088 ;;
 23089                           
 23090                           	psect	text106
 23091  0065AC                     __ptext106:
 23092                           	opt stack 0
 23093  0065AC                     _AssembleEncryptionBlock:
 23094                           	opt stack 19
 23095                           
 23096                           ; BSR set to: 0
 23097                           ;incstack = 0
 23098                           ;AssembleEncryptionBlock@dir stored from wreg
 23099  0065AC  0100               	movlb	0	; () banked
 23100  0065AE  6F72               	movwf	AssembleEncryptionBlock@dir& (0+255),b
 23101                           
 23102                           ;lorawan.c: 2158: uint8_t bufferIndex = 0;
 23103  0065B0  0E00               	movlw	0
 23104  0065B2  0100               	movlb	0	; () banked
 23105  0065B4  6F73               	movwf	AssembleEncryptionBlock@bufferIndex& (0+255),b
 23106                           
 23107                           ; BSR set to: 0
 23108                           ;lorawan.c: 2160: memset (aesBuffer, 0, sizeof (aesBuffer));
 23109  0065B6  0EA0               	movlw	low _aesBuffer
 23110  0065B8  6F60               	movwf	memset@p1& (0+255),b
 23111  0065BA  0E03               	movlw	high _aesBuffer
 23112  0065BC  6F61               	movwf	(memset@p1+1)& (0+255),b
 23113  0065BE  0E00               	movlw	0
 23114  0065C0  6F63               	movwf	(memset@c+1)& (0+255),b
 23115  0065C2  0E00               	movlw	0
 23116  0065C4  6F62               	movwf	memset@c& (0+255),b
 23117  0065C6  0E00               	movlw	0
 23118  0065C8  6F65               	movwf	(memset@n+1)& (0+255),b
 23119  0065CA  0E10               	movlw	16
 23120  0065CC  6F64               	movwf	memset@n& (0+255),b
 23121  0065CE  ECCC  F046         	call	_memset	;wreg free
 23122                           
 23123                           ;lorawan.c: 2162: aesBuffer[bufferIndex] = firstByte;
 23124  0065D2  0100               	movlb	0	; () banked
 23125  0065D4  5173               	movf	AssembleEncryptionBlock@bufferIndex& (0+255),w,b
 23126  0065D6  0D01               	mullw	1
 23127  0065D8  0EA0               	movlw	low _aesBuffer
 23128  0065DA  24F3               	addwf	prodl,w,c
 23129  0065DC  6ED9               	movwf	fsr2l,c
 23130  0065DE  0E03               	movlw	high _aesBuffer
 23131  0065E0  20F4               	addwfc	prodh,w,c
 23132  0065E2  6EDA               	movwf	fsr2h,c
 23133  0065E4  C070  FFDF         	movff	AssembleEncryptionBlock@firstByte,indf2
 23134                           
 23135                           ; BSR set to: 0
 23136                           ;lorawan.c: 2164: bufferIndex = bufferIndex + 5;
 23137  0065E8  5173               	movf	AssembleEncryptionBlock@bufferIndex& (0+255),w,b
 23138  0065EA  0F05               	addlw	5
 23139  0065EC  6F73               	movwf	AssembleEncryptionBlock@bufferIndex& (0+255),b
 23140                           
 23141                           ; BSR set to: 0
 23142                           ;lorawan.c: 2166: aesBuffer[bufferIndex++] = dir;
 23143  0065EE  5173               	movf	AssembleEncryptionBlock@bufferIndex& (0+255),w,b
 23144  0065F0  0D01               	mullw	1
 23145  0065F2  0EA0               	movlw	low _aesBuffer
 23146  0065F4  24F3               	addwf	prodl,w,c
 23147  0065F6  6ED9               	movwf	fsr2l,c
 23148  0065F8  0E03               	movlw	high _aesBuffer
 23149  0065FA  20F4               	addwfc	prodh,w,c
 23150  0065FC  6EDA               	movwf	fsr2h,c
 23151  0065FE  C072  FFDF         	movff	AssembleEncryptionBlock@dir,indf2
 23152                           
 23153                           ; BSR set to: 0
 23154  006602  2B73               	incf	AssembleEncryptionBlock@bufferIndex& (0+255),f,b
 23155                           
 23156                           ; BSR set to: 0
 23157                           ;lorawan.c: 2168: if (0 == multicastStatus)
 23158  006604  5171               	movf	AssembleEncryptionBlock@multicastStatus& (0+255),w,b
 23159  006606  A4D8               	btfss	status,2,c
 23160  006608  D013               	goto	l1386
 23161                           
 23162                           ; BSR set to: 0
 23163                           ;lorawan.c: 2169: {
 23164                           ;lorawan.c: 2170: memcpy (&aesBuffer[bufferIndex], &loRa.activationParameters.deviceAddr
      +                          ess, sizeof (loRa.activationParameters.deviceAddress));
 23165  00660A  5173               	movf	AssembleEncryptionBlock@bufferIndex& (0+255),w,b
 23166  00660C  0D01               	mullw	1
 23167  00660E  0EA0               	movlw	low _aesBuffer
 23168  006610  24F3               	addwf	prodl,w,c
 23169  006612  6F60               	movwf	memcpy@d1& (0+255),b
 23170  006614  0E03               	movlw	high _aesBuffer
 23171  006616  20F4               	addwfc	prodh,w,c
 23172  006618  6F61               	movwf	(memcpy@d1+1)& (0+255),b
 23173  00661A  0E28               	movlw	low (_loRa+30)
 23174  00661C  6F62               	movwf	memcpy@s1& (0+255),b
 23175  00661E  0E02               	movlw	high (_loRa+30)
 23176  006620  6F63               	movwf	(memcpy@s1+1)& (0+255),b
 23177  006622  0E00               	movlw	0
 23178  006624  6F65               	movwf	(memcpy@n+1)& (0+255),b
 23179  006626  0E04               	movlw	4
 23180  006628  6F64               	movwf	memcpy@n& (0+255),b
 23181  00662A  EC37  F041         	call	_memcpy	;wreg free
 23182  00662E  D012               	goto	l9515
 23183  006630                     l1386:
 23184                           
 23185                           ; BSR set to: 0
 23186                           ;lorawan.c: 2173: else
 23187                           ;lorawan.c: 2174: {
 23188                           ;lorawan.c: 2175: memcpy (&aesBuffer[bufferIndex], &loRa.activationParameters.mcastDevic
      +                          eAddress, sizeof (loRa.activationParameters.mcastDeviceAddress));
 23189                           
 23190                           ; BSR set to: 0
 23191  006630  5173               	movf	AssembleEncryptionBlock@bufferIndex& (0+255),w,b
 23192  006632  0D01               	mullw	1
 23193  006634  0EA0               	movlw	low _aesBuffer
 23194  006636  24F3               	addwf	prodl,w,c
 23195  006638  6F60               	movwf	memcpy@d1& (0+255),b
 23196  00663A  0E03               	movlw	high _aesBuffer
 23197  00663C  20F4               	addwfc	prodh,w,c
 23198  00663E  6F61               	movwf	(memcpy@d1+1)& (0+255),b
 23199  006640  0E6C               	movlw	low (_loRa+98)
 23200  006642  6F62               	movwf	memcpy@s1& (0+255),b
 23201  006644  0E02               	movlw	high (_loRa+98)
 23202  006646  6F63               	movwf	(memcpy@s1+1)& (0+255),b
 23203  006648  0E00               	movlw	0
 23204  00664A  6F65               	movwf	(memcpy@n+1)& (0+255),b
 23205  00664C  0E04               	movlw	4
 23206  00664E  6F64               	movwf	memcpy@n& (0+255),b
 23207  006650  EC37  F041         	call	_memcpy	;wreg free
 23208  006654                     l9515:
 23209                           
 23210                           ;lorawan.c: 2176: bufferIndex = bufferIndex + sizeof (loRa.activationParameters.mcastDev
      +                          iceAddress);
 23211  006654  0100               	movlb	0	; () banked
 23212  006656  5173               	movf	AssembleEncryptionBlock@bufferIndex& (0+255),w,b
 23213  006658  0F04               	addlw	4
 23214  00665A  6F73               	movwf	AssembleEncryptionBlock@bufferIndex& (0+255),b
 23215                           
 23216                           ; BSR set to: 0
 23217                           ;lorawan.c: 2177: }
 23218                           ;lorawan.c: 2179: memcpy (&aesBuffer[bufferIndex], &frameCounter, sizeof (frameCounter))
      +                          ;
 23219                           
 23220                           ; BSR set to: 0
 23221  00665C  5173               	movf	AssembleEncryptionBlock@bufferIndex& (0+255),w,b
 23222  00665E  0D01               	mullw	1
 23223  006660  0EA0               	movlw	low _aesBuffer
 23224  006662  24F3               	addwf	prodl,w,c
 23225  006664  6F60               	movwf	memcpy@d1& (0+255),b
 23226  006666  0E03               	movlw	high _aesBuffer
 23227  006668  20F4               	addwfc	prodh,w,c
 23228  00666A  6F61               	movwf	(memcpy@d1+1)& (0+255),b
 23229  00666C  0E6B               	movlw	low AssembleEncryptionBlock@frameCounter
 23230  00666E  6F62               	movwf	memcpy@s1& (0+255),b
 23231  006670  0E00               	movlw	high AssembleEncryptionBlock@frameCounter
 23232  006672  6F63               	movwf	(memcpy@s1+1)& (0+255),b
 23233  006674  0E00               	movlw	0
 23234  006676  6F65               	movwf	(memcpy@n+1)& (0+255),b
 23235  006678  0E04               	movlw	4
 23236  00667A  6F64               	movwf	memcpy@n& (0+255),b
 23237  00667C  EC37  F041         	call	_memcpy	;wreg free
 23238                           
 23239                           ;lorawan.c: 2180: bufferIndex = bufferIndex + sizeof (frameCounter) ;
 23240  006680  0100               	movlb	0	; () banked
 23241  006682  5173               	movf	AssembleEncryptionBlock@bufferIndex& (0+255),w,b
 23242  006684  0F04               	addlw	4
 23243  006686  6F73               	movwf	AssembleEncryptionBlock@bufferIndex& (0+255),b
 23244                           
 23245                           ; BSR set to: 0
 23246                           ;lorawan.c: 2182: bufferIndex ++;
 23247  006688  2B73               	incf	AssembleEncryptionBlock@bufferIndex& (0+255),f,b
 23248                           
 23249                           ; BSR set to: 0
 23250                           ;lorawan.c: 2184: aesBuffer[bufferIndex] = blockId;
 23251  00668A  5173               	movf	AssembleEncryptionBlock@bufferIndex& (0+255),w,b
 23252  00668C  0D01               	mullw	1
 23253  00668E  0EA0               	movlw	low _aesBuffer
 23254  006690  24F3               	addwf	prodl,w,c
 23255  006692  6ED9               	movwf	fsr2l,c
 23256  006694  0E03               	movlw	high _aesBuffer
 23257  006696  20F4               	addwfc	prodh,w,c
 23258  006698  6EDA               	movwf	fsr2h,c
 23259  00669A  C06F  FFDF         	movff	AssembleEncryptionBlock@blockId,indf2
 23260                           
 23261                           ; BSR set to: 0
 23262  00669E  0012               	return		;funcret
 23263  0066A0                     __end_of_AssembleEncryptionBlock:
 23264                           	opt stack 0
 23265                           tosu	equ	0xFFF
 23266                           tosh	equ	0xFFE
 23267                           tosl	equ	0xFFD
 23268                           pclath	equ	0xFFA
 23269                           tblptru	equ	0xFF8
 23270                           tblptrh	equ	0xFF7
 23271                           tblptrl	equ	0xFF6
 23272                           tablat	equ	0xFF5
 23273                           prodh	equ	0xFF4
 23274                           prodl	equ	0xFF3
 23275                           intcon	equ	0xFF2
 23276                           intcon2	equ	0xFF1
 23277                           intcon3	equ	0xFF0
 23278                           indf0	equ	0xFEF
 23279                           postinc0	equ	0xFEE
 23280                           fsr0h	equ	0xFEA
 23281                           fsr0l	equ	0xFE9
 23282                           wreg	equ	0xFE8
 23283                           postinc1	equ	0xFE6
 23284                           postdec1	equ	0xFE5
 23285                           plusw1	equ	0xFE3
 23286                           fsr1h	equ	0xFE2
 23287                           fsr1l	equ	0xFE1
 23288                           indf2	equ	0xFDF
 23289                           postinc2	equ	0xFDE
 23290                           postdec2	equ	0xFDD
 23291                           plusw2	equ	0xFDB
 23292                           fsr2h	equ	0xFDA
 23293                           fsr2l	equ	0xFD9
 23294                           status	equ	0xFD8
 23295                           
 23296 ;; *************** function _CountfOptsLength *****************
 23297 ;; Defined at:
 23298 ;;		line 2134 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 23299 ;; Parameters:    Size  Location     Type
 23300 ;;		None
 23301 ;; Auto vars:     Size  Location     Type
 23302 ;;  i               1    7[BANK0 ] unsigned char 
 23303 ;;  macCommandLe    1    6[BANK0 ] unsigned char 
 23304 ;; Return value:  Size  Location     Type
 23305 ;;                  1    wreg      unsigned char 
 23306 ;; Registers used:
 23307 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 23308 ;; Tracked objects:
 23309 ;;		On entry : 0/0
 23310 ;;		On exit  : 0/0
 23311 ;;		Unchanged: 0/0
 23312 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23313 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23314 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23315 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23316 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23317 ;;Total ram usage:        8 bytes
 23318 ;; Hardware stack levels used:    1
 23319 ;; Hardware stack levels required when called:    7
 23320 ;; This function calls:
 23321 ;;		Nothing
 23322 ;; This function is called by:
 23323 ;;		_LORAWAN_GetMaxPayloadSize
 23324 ;;		_AssemblePacket
 23325 ;; This function uses a non-reentrant model
 23326 ;;
 23327                           
 23328                           	psect	text107
 23329  006F4C                     __ptext107:
 23330                           	opt stack 0
 23331  006F4C                     _CountfOptsLength:
 23332                           	opt stack 21
 23333                           
 23334                           ;lorawan.c: 2136: uint8_t i, macCommandLength=0;
 23335                           
 23336                           ; BSR set to: 0
 23337                           ;incstack = 0
 23338  006F4C  0E00               	movlw	0
 23339  006F4E  0100               	movlb	0	; () banked
 23340  006F50  6F66               	movwf	CountfOptsLength@macCommandLength& (0+255),b
 23341                           
 23342                           ;lorawan.c: 2138: for (i = 0; i < loRa.crtMacCmdIndex; i++)
 23343  006F52  0E00               	movlw	0
 23344  006F54  6F67               	movwf	CountfOptsLength@i& (0+255),b
 23345  006F56  D057               	goto	l1377
 23346  006F58                     
 23347                           ; BSR set to: 0
 23348                           ;lorawan.c: 2139: {
 23349                           ;lorawan.c: 2140: if(loRa.macCommands[i].receivedCid != 0xFF)
 23350                           
 23351                           ; BSR set to: 0
 23352  006F58  5167               	movf	CountfOptsLength@i& (0+255),w,b
 23353  006F5A  0D02               	mullw	2
 23354  006F5C  0EB2               	movlw	low (_loRa+168)
 23355  006F5E  24F3               	addwf	prodl,w,c
 23356  006F60  6ED9               	movwf	fsr2l,c
 23357  006F62  0E02               	movlw	high (_loRa+168)
 23358  006F64  20F4               	addwfc	prodh,w,c
 23359  006F66  6EDA               	movwf	fsr2h,c
 23360  006F68  28DE               	incf	postinc2,w,c
 23361  006F6A  B4D8               	btfsc	status,2,c
 23362  006F6C  D04B               	goto	l1381
 23363                           
 23364                           ; BSR set to: 0
 23365                           ;lorawan.c: 2141: {
 23366                           ;lorawan.c: 2142: if((macCommandLength + macEndDevCmdReplyLen[loRa.macCommands[i].receiv
      +                          edCid - 2]) <= 0x0F)
 23367  006F6E  0EFE               	movlw	254
 23368  006F70  6F60               	movwf	??_CountfOptsLength& (0+255),b
 23369  006F72  0EFF               	movlw	255
 23370  006F74  6F61               	movwf	(??_CountfOptsLength+1)& (0+255),b
 23371  006F76  5167               	movf	CountfOptsLength@i& (0+255),w,b
 23372  006F78  0D02               	mullw	2
 23373  006F7A  0EB2               	movlw	low (_loRa+168)
 23374  006F7C  24F3               	addwf	prodl,w,c
 23375  006F7E  6ED9               	movwf	fsr2l,c
 23376  006F80  0E02               	movlw	high (_loRa+168)
 23377  006F82  20F4               	addwfc	prodh,w,c
 23378  006F84  6EDA               	movwf	fsr2h,c
 23379  006F86  50DF               	movf	indf2,w,c
 23380  006F88  6F62               	movwf	(??_CountfOptsLength+2)& (0+255),b
 23381  006F8A  6B63               	clrf	(??_CountfOptsLength+3)& (0+255),b
 23382  006F8C  5160               	movf	??_CountfOptsLength& (0+255),w,b
 23383  006F8E  2762               	addwf	(??_CountfOptsLength+2)& (0+255),f,b
 23384  006F90  5161               	movf	(??_CountfOptsLength+1)& (0+255),w,b
 23385  006F92  2363               	addwfc	(??_CountfOptsLength+3)& (0+255),f,b
 23386  006F94  0E95               	movlw	low _macEndDevCmdReplyLen
 23387  006F96  2562               	addwf	(??_CountfOptsLength+2)& (0+255),w,b
 23388  006F98  6EF6               	movwf	tblptrl,c
 23389  006F9A  0EFF               	movlw	high _macEndDevCmdReplyLen
 23390  006F9C  2163               	addwfc	(??_CountfOptsLength+3)& (0+255),w,b
 23391  006F9E  6EF7               	movwf	tblptrh,c
 23392  006FA0                     	if	1	;There are 3 active tblptr bytes
 23393  006FA0  6AF8               	clrf	tblptru,c
 23394  006FA2  0E00               	movlw	low (__mediumconst shr (0+16))
 23395  006FA4  22F8               	addwfc	tblptru,f,c
 23396  006FA6                     	endif
 23397  006FA6  0008               	tblrd		*
 23398  006FA8  50F5               	movf	tablat,w,c
 23399  006FAA  C066  F064         	movff	CountfOptsLength@macCommandLength,??_CountfOptsLength+4
 23400  006FAE  6B65               	clrf	(??_CountfOptsLength+5)& (0+255),b
 23401  006FB0  2764               	addwf	(??_CountfOptsLength+4)& (0+255),f,b
 23402  006FB2  0E00               	movlw	0
 23403  006FB4  2365               	addwfc	(??_CountfOptsLength+5)& (0+255),f,b
 23404  006FB6  BF65               	btfsc	(??_CountfOptsLength+5)& (0+255),7,b
 23405  006FB8  D006               	goto	u9540
 23406  006FBA  5165               	movf	(??_CountfOptsLength+5)& (0+255),w,b
 23407  006FBC  E12A               	bnz	l9969
 23408  006FBE  0E10               	movlw	16
 23409  006FC0  5D64               	subwf	(??_CountfOptsLength+4)& (0+255),w,b
 23410  006FC2  B0D8               	btfsc	status,0,c
 23411  006FC4  D026               	goto	u9550
 23412  006FC6                     u9540:
 23413                           
 23414                           ; BSR set to: 0
 23415                           ;lorawan.c: 2143: {
 23416                           ;lorawan.c: 2144: macCommandLength += macEndDevCmdReplyLen[loRa.macCommands[i].receivedC
      +                          id - 2];
 23417  006FC6  0EFE               	movlw	254
 23418  006FC8  6F60               	movwf	??_CountfOptsLength& (0+255),b
 23419  006FCA  0EFF               	movlw	255
 23420  006FCC  6F61               	movwf	(??_CountfOptsLength+1)& (0+255),b
 23421  006FCE  5167               	movf	CountfOptsLength@i& (0+255),w,b
 23422  006FD0  0D02               	mullw	2
 23423  006FD2  0EB2               	movlw	low (_loRa+168)
 23424  006FD4  24F3               	addwf	prodl,w,c
 23425  006FD6  6ED9               	movwf	fsr2l,c
 23426  006FD8  0E02               	movlw	high (_loRa+168)
 23427  006FDA  20F4               	addwfc	prodh,w,c
 23428  006FDC  6EDA               	movwf	fsr2h,c
 23429  006FDE  50DF               	movf	indf2,w,c
 23430  006FE0  6F62               	movwf	(??_CountfOptsLength+2)& (0+255),b
 23431  006FE2  6B63               	clrf	(??_CountfOptsLength+3)& (0+255),b
 23432  006FE4  5160               	movf	??_CountfOptsLength& (0+255),w,b
 23433  006FE6  2762               	addwf	(??_CountfOptsLength+2)& (0+255),f,b
 23434  006FE8  5161               	movf	(??_CountfOptsLength+1)& (0+255),w,b
 23435  006FEA  2363               	addwfc	(??_CountfOptsLength+3)& (0+255),f,b
 23436  006FEC  0E95               	movlw	low _macEndDevCmdReplyLen
 23437  006FEE  2562               	addwf	(??_CountfOptsLength+2)& (0+255),w,b
 23438  006FF0  6EF6               	movwf	tblptrl,c
 23439  006FF2  0EFF               	movlw	high _macEndDevCmdReplyLen
 23440  006FF4  2163               	addwfc	(??_CountfOptsLength+3)& (0+255),w,b
 23441  006FF6  6EF7               	movwf	tblptrh,c
 23442  006FF8                     	if	1	;There are 3 active tblptr bytes
 23443  006FF8  6AF8               	clrf	tblptru,c
 23444  006FFA  0E00               	movlw	low (__mediumconst shr (0+16))
 23445  006FFC  22F8               	addwfc	tblptru,f,c
 23446  006FFE                     	endif
 23447  006FFE  0008               	tblrd		*
 23448  007000  50F5               	movf	tablat,w,c
 23449  007002  2766               	addwf	CountfOptsLength@macCommandLength& (0+255),f,b
 23450  007004                     l1381:
 23451                           
 23452                           ; BSR set to: 0
 23453                           
 23454                           ; BSR set to: 0
 23455                           
 23456                           ; BSR set to: 0
 23457  007004  2B67               	incf	CountfOptsLength@i& (0+255),f,b
 23458  007006                     l1377:
 23459                           
 23460                           ; BSR set to: 0
 23461                           
 23462                           ; BSR set to: 0
 23463  007006  0102               	movlb	2	; () banked
 23464  007008  51B1               	movf	(_loRa+167)& (0+255),w,b
 23465  00700A  0100               	movlb	0	; () banked
 23466  00700C  5D67               	subwf	CountfOptsLength@i& (0+255),w,b
 23467  00700E  A0D8               	btfss	status,0,c
 23468  007010  D7A3               	goto	l1378
 23469  007012                     u9550:
 23470  007012                     l9969:
 23471                           
 23472                           ; BSR set to: 0
 23473                           ;lorawan.c: 2149: }
 23474                           ;lorawan.c: 2150: }
 23475                           ;lorawan.c: 2151: }
 23476                           ;lorawan.c: 2153: return macCommandLength;
 23477  007012  5166               	movf	CountfOptsLength@macCommandLength& (0+255),w,b
 23478  007014  0012               	return	
 23479  007016                     __end_of_CountfOptsLength:
 23480                           	opt stack 0
 23481                           tosu	equ	0xFFF
 23482                           tosh	equ	0xFFE
 23483                           tosl	equ	0xFFD
 23484                           pclath	equ	0xFFA
 23485                           tblptru	equ	0xFF8
 23486                           tblptrh	equ	0xFF7
 23487                           tblptrl	equ	0xFF6
 23488                           tablat	equ	0xFF5
 23489                           prodh	equ	0xFF4
 23490                           prodl	equ	0xFF3
 23491                           intcon	equ	0xFF2
 23492                           intcon2	equ	0xFF1
 23493                           intcon3	equ	0xFF0
 23494                           indf0	equ	0xFEF
 23495                           postinc0	equ	0xFEE
 23496                           fsr0h	equ	0xFEA
 23497                           fsr0l	equ	0xFE9
 23498                           wreg	equ	0xFE8
 23499                           postinc1	equ	0xFE6
 23500                           postdec1	equ	0xFE5
 23501                           plusw1	equ	0xFE3
 23502                           fsr1h	equ	0xFE2
 23503                           fsr1l	equ	0xFE1
 23504                           indf2	equ	0xFDF
 23505                           postinc2	equ	0xFDE
 23506                           postdec2	equ	0xFDD
 23507                           plusw2	equ	0xFDB
 23508                           fsr2h	equ	0xFDA
 23509                           fsr2l	equ	0xFD9
 23510                           status	equ	0xFD8
 23511                           
 23512 ;; *************** function _ExtractMic *****************
 23513 ;; Defined at:
 23514 ;;		line 2187 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 23515 ;; Parameters:    Size  Location     Type
 23516 ;;  buffer          2   11[BANK0 ] PTR unsigned char 
 23517 ;;		 -> radioBuffer(271), LORAWAN_RxDone@hdr(2), 
 23518 ;;  bufferLength    1   13[BANK0 ] unsigned char 
 23519 ;; Auto vars:     Size  Location     Type
 23520 ;;  mic             4   19[BANK0 ] unsigned long 
 23521 ;; Return value:  Size  Location     Type
 23522 ;;                  4   11[BANK0 ] unsigned long 
 23523 ;; Registers used:
 23524 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 23525 ;; Tracked objects:
 23526 ;;		On entry : 0/0
 23527 ;;		On exit  : 0/0
 23528 ;;		Unchanged: 0/0
 23529 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23530 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23531 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23532 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23533 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23534 ;;Total ram usage:       12 bytes
 23535 ;; Hardware stack levels used:    1
 23536 ;; Hardware stack levels required when called:    8
 23537 ;; This function calls:
 23538 ;;		_memcpy
 23539 ;; This function is called by:
 23540 ;;		_LORAWAN_RxDone
 23541 ;; This function uses a non-reentrant model
 23542 ;;
 23543                           
 23544                           	psect	text108
 23545  008440                     __ptext108:
 23546                           	opt stack 0
 23547  008440                     _ExtractMic:
 23548                           	opt stack 18
 23549                           
 23550                           ;lorawan.c: 2189: uint32_t mic = 0;
 23551                           
 23552                           ; BSR set to: 0
 23553                           ;incstack = 0
 23554  008440  0E00               	movlw	0
 23555  008442  0100               	movlb	0	; () banked
 23556  008444  6F73               	movwf	ExtractMic@mic& (0+255),b
 23557  008446  0E00               	movlw	0
 23558  008448  6F74               	movwf	(ExtractMic@mic+1)& (0+255),b
 23559  00844A  0E00               	movlw	0
 23560  00844C  6F75               	movwf	(ExtractMic@mic+2)& (0+255),b
 23561  00844E  0E00               	movlw	0
 23562  008450  6F76               	movwf	(ExtractMic@mic+3)& (0+255),b
 23563                           
 23564                           ; BSR set to: 0
 23565                           ;lorawan.c: 2190: memcpy (&mic, &buffer[bufferLength - 4], sizeof (mic));
 23566  008452  0E73               	movlw	low ExtractMic@mic
 23567  008454  6F60               	movwf	memcpy@d1& (0+255),b
 23568  008456  0E00               	movlw	high ExtractMic@mic
 23569  008458  6F61               	movwf	(memcpy@d1+1)& (0+255),b
 23570  00845A  0EFC               	movlw	252
 23571  00845C  6F6F               	movwf	??_ExtractMic& (0+255),b
 23572  00845E  0EFF               	movlw	255
 23573  008460  6F70               	movwf	(??_ExtractMic+1)& (0+255),b
 23574  008462  516D               	movf	ExtractMic@bufferLength& (0+255),w,b
 23575  008464  6F71               	movwf	(??_ExtractMic+2)& (0+255),b
 23576  008466  6B72               	clrf	(??_ExtractMic+3)& (0+255),b
 23577  008468  516F               	movf	??_ExtractMic& (0+255),w,b
 23578  00846A  2771               	addwf	(??_ExtractMic+2)& (0+255),f,b
 23579  00846C  5170               	movf	(??_ExtractMic+1)& (0+255),w,b
 23580  00846E  2372               	addwfc	(??_ExtractMic+3)& (0+255),f,b
 23581  008470  5171               	movf	(??_ExtractMic+2)& (0+255),w,b
 23582  008472  256B               	addwf	ExtractMic@buffer& (0+255),w,b
 23583  008474  6F62               	movwf	memcpy@s1& (0+255),b
 23584  008476  5172               	movf	(??_ExtractMic+3)& (0+255),w,b
 23585  008478  216C               	addwfc	(ExtractMic@buffer+1)& (0+255),w,b
 23586  00847A  6F63               	movwf	(memcpy@s1+1)& (0+255),b
 23587  00847C  0E00               	movlw	0
 23588  00847E  6F65               	movwf	(memcpy@n+1)& (0+255),b
 23589  008480  0E04               	movlw	4
 23590  008482  6F64               	movwf	memcpy@n& (0+255),b
 23591  008484  EC37  F041         	call	_memcpy	;wreg free
 23592                           
 23593                           ;lorawan.c: 2191: return mic;
 23594  008488  C073  F06B         	movff	ExtractMic@mic,?_ExtractMic
 23595  00848C  C074  F06C         	movff	ExtractMic@mic+1,?_ExtractMic+1
 23596  008490  C075  F06D         	movff	ExtractMic@mic+2,?_ExtractMic+2
 23597  008494  C076  F06E         	movff	ExtractMic@mic+3,?_ExtractMic+3
 23598  008498  0012               	return	
 23599  00849A                     __end_of_ExtractMic:
 23600                           	opt stack 0
 23601                           tosu	equ	0xFFF
 23602                           tosh	equ	0xFFE
 23603                           tosl	equ	0xFFD
 23604                           pclath	equ	0xFFA
 23605                           tblptru	equ	0xFF8
 23606                           tblptrh	equ	0xFF7
 23607                           tblptrl	equ	0xFF6
 23608                           tablat	equ	0xFF5
 23609                           prodh	equ	0xFF4
 23610                           prodl	equ	0xFF3
 23611                           intcon	equ	0xFF2
 23612                           intcon2	equ	0xFF1
 23613                           intcon3	equ	0xFF0
 23614                           indf0	equ	0xFEF
 23615                           postinc0	equ	0xFEE
 23616                           fsr0h	equ	0xFEA
 23617                           fsr0l	equ	0xFE9
 23618                           wreg	equ	0xFE8
 23619                           postinc1	equ	0xFE6
 23620                           postdec1	equ	0xFE5
 23621                           plusw1	equ	0xFE3
 23622                           fsr1h	equ	0xFE2
 23623                           fsr1l	equ	0xFE1
 23624                           indf2	equ	0xFDF
 23625                           postinc2	equ	0xFDE
 23626                           postdec2	equ	0xFDD
 23627                           plusw2	equ	0xFDB
 23628                           fsr2h	equ	0xFDA
 23629                           fsr2l	equ	0xFD9
 23630                           status	equ	0xFD8
 23631                           
 23632 ;; *************** function _ComputeSessionKeys *****************
 23633 ;; Defined at:
 23634 ;;		line 2062 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 23635 ;; Parameters:    Size  Location     Type
 23636 ;;  joinAcceptBu    2   49[BANK0 ] PTR struct .
 23637 ;;		 -> radioBuffer(271), LORAWAN_RxDone@hdr(2), 
 23638 ;; Auto vars:     Size  Location     Type
 23639 ;;		None
 23640 ;; Return value:  Size  Location     Type
 23641 ;;                  1    wreg      void 
 23642 ;; Registers used:
 23643 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23644 ;; Tracked objects:
 23645 ;;		On entry : 0/0
 23646 ;;		On exit  : 0/0
 23647 ;;		Unchanged: 0/0
 23648 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23649 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23650 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23651 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23652 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23653 ;;Total ram usage:        2 bytes
 23654 ;; Hardware stack levels used:    1
 23655 ;; Hardware stack levels required when called:   10
 23656 ;; This function calls:
 23657 ;;		_AESEncodeLoRa
 23658 ;;		_PrepareSessionKeys
 23659 ;; This function is called by:
 23660 ;;		_LORAWAN_RxDone
 23661 ;; This function uses a non-reentrant model
 23662 ;;
 23663                           
 23664                           	psect	text109
 23665  007942                     __ptext109:
 23666                           	opt stack 0
 23667  007942                     _ComputeSessionKeys:
 23668                           	opt stack 16
 23669                           
 23670                           ;lorawan.c: 2064: PrepareSessionKeys(loRa.activationParameters.applicationSessionKey, jo
      +                          inAcceptBuffer->members.appNonce, joinAcceptBuffer->members.networkId);
 23671                           
 23672                           ;incstack = 0
 23673  007942  0E3C               	movlw	low (_loRa+50)
 23674  007944  0100               	movlb	0	; () banked
 23675  007946  6F6B               	movwf	PrepareSessionKeys@sessionKey& (0+255),b
 23676  007948  0E02               	movlw	high (_loRa+50)
 23677  00794A  6F6C               	movwf	(PrepareSessionKeys@sessionKey+1)& (0+255),b
 23678  00794C  0E01               	movlw	1
 23679  00794E  2591               	addwf	ComputeSessionKeys@joinAcceptBuffer& (0+255),w,b
 23680  007950  6F6D               	movwf	PrepareSessionKeys@appNonce& (0+255),b
 23681  007952  0E00               	movlw	0
 23682  007954  2192               	addwfc	(ComputeSessionKeys@joinAcceptBuffer+1)& (0+255),w,b
 23683  007956  6F6E               	movwf	(PrepareSessionKeys@appNonce+1)& (0+255),b
 23684  007958  0E04               	movlw	4
 23685  00795A  2591               	addwf	ComputeSessionKeys@joinAcceptBuffer& (0+255),w,b
 23686  00795C  6F6F               	movwf	PrepareSessionKeys@networkId& (0+255),b
 23687  00795E  0E00               	movlw	0
 23688  007960  2192               	addwfc	(ComputeSessionKeys@joinAcceptBuffer+1)& (0+255),w,b
 23689  007962  6F70               	movwf	(PrepareSessionKeys@networkId+1)& (0+255),b
 23690  007964  EC18  F039         	call	_PrepareSessionKeys	;wreg free
 23691                           
 23692                           ;lorawan.c: 2065: loRa.activationParameters.applicationSessionKey[0] = 0x02;
 23693  007968  0E02               	movlw	2
 23694  00796A  0102               	movlb	2	; () banked
 23695  00796C  6F3C               	movwf	(_loRa+50)& (0+255),b
 23696                           
 23697                           ; BSR set to: 2
 23698                           ;lorawan.c: 2066: AESEncodeLoRa(loRa.activationParameters.applicationSessionKey, loRa.ac
      +                          tivationParameters.applicationKey);
 23699  00796E  0E3C               	movlw	low (_loRa+50)
 23700  007970  0100               	movlb	0	; () banked
 23701  007972  6F7D               	movwf	AESEncodeLoRa@block& (0+255),b
 23702  007974  0E02               	movlw	high (_loRa+50)
 23703  007976  6F7E               	movwf	(AESEncodeLoRa@block+1)& (0+255),b
 23704  007978  0E4C               	movlw	low (_loRa+66)
 23705  00797A  6F7F               	movwf	AESEncodeLoRa@key& (0+255),b
 23706  00797C  0E02               	movlw	high (_loRa+66)
 23707  00797E  6F80               	movwf	(AESEncodeLoRa@key+1)& (0+255),b
 23708  007980  EC1E  F046         	call	_AESEncodeLoRa	;wreg free
 23709                           
 23710                           ;lorawan.c: 2068: PrepareSessionKeys(loRa.activationParameters.networkSessionKey, joinAc
      +                          ceptBuffer->members.appNonce, joinAcceptBuffer->members.networkId);
 23711  007984  0E2C               	movlw	low (_loRa+34)
 23712  007986  0100               	movlb	0	; () banked
 23713  007988  6F6B               	movwf	PrepareSessionKeys@sessionKey& (0+255),b
 23714  00798A  0E02               	movlw	high (_loRa+34)
 23715  00798C  6F6C               	movwf	(PrepareSessionKeys@sessionKey+1)& (0+255),b
 23716  00798E  0E01               	movlw	1
 23717  007990  2591               	addwf	ComputeSessionKeys@joinAcceptBuffer& (0+255),w,b
 23718  007992  6F6D               	movwf	PrepareSessionKeys@appNonce& (0+255),b
 23719  007994  0E00               	movlw	0
 23720  007996  2192               	addwfc	(ComputeSessionKeys@joinAcceptBuffer+1)& (0+255),w,b
 23721  007998  6F6E               	movwf	(PrepareSessionKeys@appNonce+1)& (0+255),b
 23722  00799A  0E04               	movlw	4
 23723  00799C  2591               	addwf	ComputeSessionKeys@joinAcceptBuffer& (0+255),w,b
 23724  00799E  6F6F               	movwf	PrepareSessionKeys@networkId& (0+255),b
 23725  0079A0  0E00               	movlw	0
 23726  0079A2  2192               	addwfc	(ComputeSessionKeys@joinAcceptBuffer+1)& (0+255),w,b
 23727  0079A4  6F70               	movwf	(PrepareSessionKeys@networkId+1)& (0+255),b
 23728  0079A6  EC18  F039         	call	_PrepareSessionKeys	;wreg free
 23729                           
 23730                           ;lorawan.c: 2069: loRa.activationParameters.networkSessionKey[0] = 0x01;
 23731  0079AA  0E01               	movlw	1
 23732  0079AC  0102               	movlb	2	; () banked
 23733  0079AE  6F2C               	movwf	(_loRa+34)& (0+255),b
 23734                           
 23735                           ;lorawan.c: 2070: AESEncodeLoRa(loRa.activationParameters.networkSessionKey, loRa.activa
      +                          tionParameters.applicationKey);
 23736  0079B0  0E2C               	movlw	low (_loRa+34)
 23737  0079B2  0100               	movlb	0	; () banked
 23738  0079B4  6F7D               	movwf	AESEncodeLoRa@block& (0+255),b
 23739  0079B6  0E02               	movlw	high (_loRa+34)
 23740  0079B8  6F7E               	movwf	(AESEncodeLoRa@block+1)& (0+255),b
 23741  0079BA  0E4C               	movlw	low (_loRa+66)
 23742  0079BC  6F7F               	movwf	AESEncodeLoRa@key& (0+255),b
 23743  0079BE  0E02               	movlw	high (_loRa+66)
 23744  0079C0  6F80               	movwf	(AESEncodeLoRa@key+1)& (0+255),b
 23745  0079C2  EC1E  F046         	call	_AESEncodeLoRa	;wreg free
 23746  0079C6  0012               	return		;funcret
 23747  0079C8                     __end_of_ComputeSessionKeys:
 23748                           	opt stack 0
 23749                           tosu	equ	0xFFF
 23750                           tosh	equ	0xFFE
 23751                           tosl	equ	0xFFD
 23752                           pclath	equ	0xFFA
 23753                           tblptru	equ	0xFF8
 23754                           tblptrh	equ	0xFF7
 23755                           tblptrl	equ	0xFF6
 23756                           tablat	equ	0xFF5
 23757                           prodh	equ	0xFF4
 23758                           prodl	equ	0xFF3
 23759                           intcon	equ	0xFF2
 23760                           intcon2	equ	0xFF1
 23761                           intcon3	equ	0xFF0
 23762                           indf0	equ	0xFEF
 23763                           postinc0	equ	0xFEE
 23764                           fsr0h	equ	0xFEA
 23765                           fsr0l	equ	0xFE9
 23766                           wreg	equ	0xFE8
 23767                           postinc1	equ	0xFE6
 23768                           postdec1	equ	0xFE5
 23769                           plusw1	equ	0xFE3
 23770                           fsr1h	equ	0xFE2
 23771                           fsr1l	equ	0xFE1
 23772                           indf2	equ	0xFDF
 23773                           postinc2	equ	0xFDE
 23774                           postdec2	equ	0xFDD
 23775                           plusw2	equ	0xFDB
 23776                           fsr2h	equ	0xFDA
 23777                           fsr2l	equ	0xFD9
 23778                           status	equ	0xFD8
 23779                           
 23780 ;; *************** function _PrepareSessionKeys *****************
 23781 ;; Defined at:
 23782 ;;		line 2045 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 23783 ;; Parameters:    Size  Location     Type
 23784 ;;  sessionKey      2   11[BANK0 ] PTR unsigned char 
 23785 ;;		 -> loRa.activationParameters(105), loRa(245), 
 23786 ;;  appNonce        2   13[BANK0 ] PTR unsigned char 
 23787 ;;		 -> ComputeSessionKeys@joinAcceptBuffer(2), radioBuffer(271), LORAWAN_RxDone@hdr(2), 
 23788 ;;  networkId       2   15[BANK0 ] PTR unsigned char 
 23789 ;;		 -> ComputeSessionKeys@joinAcceptBuffer(2), radioBuffer(271), LORAWAN_RxDone@hdr(2), 
 23790 ;; Auto vars:     Size  Location     Type
 23791 ;;  index           1   17[BANK0 ] unsigned char 
 23792 ;; Return value:  Size  Location     Type
 23793 ;;                  1    wreg      void 
 23794 ;; Registers used:
 23795 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23796 ;; Tracked objects:
 23797 ;;		On entry : 0/0
 23798 ;;		On exit  : 0/0
 23799 ;;		Unchanged: 0/0
 23800 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23801 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23802 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23803 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23804 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23805 ;;Total ram usage:        7 bytes
 23806 ;; Hardware stack levels used:    1
 23807 ;; Hardware stack levels required when called:    8
 23808 ;; This function calls:
 23809 ;;		_memcpy
 23810 ;;		_memset
 23811 ;; This function is called by:
 23812 ;;		_ComputeSessionKeys
 23813 ;; This function uses a non-reentrant model
 23814 ;;
 23815                           
 23816                           	psect	text110
 23817  007230                     __ptext110:
 23818                           	opt stack 0
 23819  007230                     _PrepareSessionKeys:
 23820                           	opt stack 17
 23821                           
 23822                           ;lorawan.c: 2047: uint8_t index = 0;
 23823                           
 23824                           ;incstack = 0
 23825  007230  0E00               	movlw	0
 23826  007232  0100               	movlb	0	; () banked
 23827  007234  6F71               	movwf	PrepareSessionKeys@index& (0+255),b
 23828                           
 23829                           ; BSR set to: 0
 23830                           ;lorawan.c: 2049: memset (&sessionKey[index], 0, sizeof(aesBuffer));
 23831  007236  5171               	movf	PrepareSessionKeys@index& (0+255),w,b
 23832  007238  0D01               	mullw	1
 23833  00723A  50F3               	movf	prodl,w,c
 23834  00723C  256B               	addwf	PrepareSessionKeys@sessionKey& (0+255),w,b
 23835  00723E  6F60               	movwf	memset@p1& (0+255),b
 23836  007240  50F4               	movf	prodh,w,c
 23837  007242  216C               	addwfc	(PrepareSessionKeys@sessionKey+1)& (0+255),w,b
 23838  007244  6F61               	movwf	(memset@p1+1)& (0+255),b
 23839  007246  0E00               	movlw	0
 23840  007248  6F63               	movwf	(memset@c+1)& (0+255),b
 23841  00724A  0E00               	movlw	0
 23842  00724C  6F62               	movwf	memset@c& (0+255),b
 23843  00724E  0E00               	movlw	0
 23844  007250  6F65               	movwf	(memset@n+1)& (0+255),b
 23845  007252  0E10               	movlw	16
 23846  007254  6F64               	movwf	memset@n& (0+255),b
 23847  007256  ECCC  F046         	call	_memset	;wreg free
 23848                           
 23849                           ;lorawan.c: 2050: index ++;
 23850  00725A  0100               	movlb	0	; () banked
 23851  00725C  2B71               	incf	PrepareSessionKeys@index& (0+255),f,b
 23852                           
 23853                           ; BSR set to: 0
 23854                           ;lorawan.c: 2052: memcpy(&sessionKey[index], appNonce, 3);
 23855  00725E  5171               	movf	PrepareSessionKeys@index& (0+255),w,b
 23856  007260  0D01               	mullw	1
 23857  007262  50F3               	movf	prodl,w,c
 23858  007264  256B               	addwf	PrepareSessionKeys@sessionKey& (0+255),w,b
 23859  007266  6F60               	movwf	memcpy@d1& (0+255),b
 23860  007268  50F4               	movf	prodh,w,c
 23861  00726A  216C               	addwfc	(PrepareSessionKeys@sessionKey+1)& (0+255),w,b
 23862  00726C  6F61               	movwf	(memcpy@d1+1)& (0+255),b
 23863  00726E  C06D  F062         	movff	PrepareSessionKeys@appNonce,memcpy@s1
 23864  007272  C06E  F063         	movff	PrepareSessionKeys@appNonce+1,memcpy@s1+1
 23865  007276  0E00               	movlw	0
 23866  007278  6F65               	movwf	(memcpy@n+1)& (0+255),b
 23867  00727A  0E03               	movlw	3
 23868  00727C  6F64               	movwf	memcpy@n& (0+255),b
 23869  00727E  EC37  F041         	call	_memcpy	;wreg free
 23870                           
 23871                           ;lorawan.c: 2053: index = index + 3;
 23872  007282  0100               	movlb	0	; () banked
 23873  007284  5171               	movf	PrepareSessionKeys@index& (0+255),w,b
 23874  007286  0F03               	addlw	3
 23875  007288  6F71               	movwf	PrepareSessionKeys@index& (0+255),b
 23876                           
 23877                           ; BSR set to: 0
 23878                           ;lorawan.c: 2055: memcpy(&sessionKey[index], networkId, 3);
 23879  00728A  5171               	movf	PrepareSessionKeys@index& (0+255),w,b
 23880  00728C  0D01               	mullw	1
 23881  00728E  50F3               	movf	prodl,w,c
 23882  007290  256B               	addwf	PrepareSessionKeys@sessionKey& (0+255),w,b
 23883  007292  6F60               	movwf	memcpy@d1& (0+255),b
 23884  007294  50F4               	movf	prodh,w,c
 23885  007296  216C               	addwfc	(PrepareSessionKeys@sessionKey+1)& (0+255),w,b
 23886  007298  6F61               	movwf	(memcpy@d1+1)& (0+255),b
 23887  00729A  C06F  F062         	movff	PrepareSessionKeys@networkId,memcpy@s1
 23888  00729E  C070  F063         	movff	PrepareSessionKeys@networkId+1,memcpy@s1+1
 23889  0072A2  0E00               	movlw	0
 23890  0072A4  6F65               	movwf	(memcpy@n+1)& (0+255),b
 23891  0072A6  0E03               	movlw	3
 23892  0072A8  6F64               	movwf	memcpy@n& (0+255),b
 23893  0072AA  EC37  F041         	call	_memcpy	;wreg free
 23894                           
 23895                           ;lorawan.c: 2056: index = index + 3;
 23896  0072AE  0100               	movlb	0	; () banked
 23897  0072B0  5171               	movf	PrepareSessionKeys@index& (0+255),w,b
 23898  0072B2  0F03               	addlw	3
 23899  0072B4  6F71               	movwf	PrepareSessionKeys@index& (0+255),b
 23900                           
 23901                           ; BSR set to: 0
 23902                           ;lorawan.c: 2058: memcpy(&sessionKey[index], &loRa.devNonce, sizeof(loRa.devNonce) );
 23903  0072B6  5171               	movf	PrepareSessionKeys@index& (0+255),w,b
 23904  0072B8  0D01               	mullw	1
 23905  0072BA  50F3               	movf	prodl,w,c
 23906  0072BC  256B               	addwf	PrepareSessionKeys@sessionKey& (0+255),w,b
 23907  0072BE  6F60               	movwf	memcpy@d1& (0+255),b
 23908  0072C0  50F4               	movf	prodh,w,c
 23909  0072C2  216C               	addwfc	(PrepareSessionKeys@sessionKey+1)& (0+255),w,b
 23910  0072C4  6F61               	movwf	(memcpy@d1+1)& (0+255),b
 23911  0072C6  0EDC               	movlw	low (_loRa+210)
 23912  0072C8  6F62               	movwf	memcpy@s1& (0+255),b
 23913  0072CA  0E02               	movlw	high (_loRa+210)
 23914  0072CC  6F63               	movwf	(memcpy@s1+1)& (0+255),b
 23915  0072CE  0E00               	movlw	0
 23916  0072D0  6F65               	movwf	(memcpy@n+1)& (0+255),b
 23917  0072D2  0E02               	movlw	2
 23918  0072D4  6F64               	movwf	memcpy@n& (0+255),b
 23919  0072D6  EC37  F041         	call	_memcpy	;wreg free
 23920  0072DA  0012               	return		;funcret
 23921  0072DC                     __end_of_PrepareSessionKeys:
 23922                           	opt stack 0
 23923                           tosu	equ	0xFFF
 23924                           tosh	equ	0xFFE
 23925                           tosl	equ	0xFFD
 23926                           pclath	equ	0xFFA
 23927                           tblptru	equ	0xFF8
 23928                           tblptrh	equ	0xFF7
 23929                           tblptrl	equ	0xFF6
 23930                           tablat	equ	0xFF5
 23931                           prodh	equ	0xFF4
 23932                           prodl	equ	0xFF3
 23933                           intcon	equ	0xFF2
 23934                           intcon2	equ	0xFF1
 23935                           intcon3	equ	0xFF0
 23936                           indf0	equ	0xFEF
 23937                           postinc0	equ	0xFEE
 23938                           fsr0h	equ	0xFEA
 23939                           fsr0l	equ	0xFE9
 23940                           wreg	equ	0xFE8
 23941                           postinc1	equ	0xFE6
 23942                           postdec1	equ	0xFE5
 23943                           plusw1	equ	0xFE3
 23944                           fsr1h	equ	0xFE2
 23945                           fsr1l	equ	0xFE1
 23946                           indf2	equ	0xFDF
 23947                           postinc2	equ	0xFDE
 23948                           postdec2	equ	0xFDD
 23949                           plusw2	equ	0xFDB
 23950                           fsr2h	equ	0xFDA
 23951                           fsr2l	equ	0xFD9
 23952                           status	equ	0xFD8
 23953                           
 23954 ;; *************** function _CheckMcastFlags *****************
 23955 ;; Defined at:
 23956 ;;		line 2097 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 23957 ;; Parameters:    Size  Location     Type
 23958 ;;  hdr             2    0[BANK0 ] PTR struct .
 23959 ;;		 -> radioBuffer(271), LORAWAN_RxDone@hdr(2), 
 23960 ;; Auto vars:     Size  Location     Type
 23961 ;;		None
 23962 ;; Return value:  Size  Location     Type
 23963 ;;                  1    wreg      unsigned char 
 23964 ;; Registers used:
 23965 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 23966 ;; Tracked objects:
 23967 ;;		On entry : 0/0
 23968 ;;		On exit  : 0/0
 23969 ;;		Unchanged: 0/0
 23970 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23971 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23972 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23973 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23974 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23975 ;;Total ram usage:        2 bytes
 23976 ;; Hardware stack levels used:    1
 23977 ;; Hardware stack levels required when called:    7
 23978 ;; This function calls:
 23979 ;;		Nothing
 23980 ;; This function is called by:
 23981 ;;		_LORAWAN_RxDone
 23982 ;; This function uses a non-reentrant model
 23983 ;;
 23984                           
 23985                           	psect	text111
 23986  007A4C                     __ptext111:
 23987                           	opt stack 0
 23988  007A4C                     _CheckMcastFlags:
 23989                           	opt stack 19
 23990                           
 23991                           ;lorawan.c: 2109: if ((0 != hdr->members.fCtrl.ack) || (0 != hdr->members.fCtrl.adrAckRe
      +                          q) || (FRAME_TYPE_DATA_UNCONFIRMED_DOWN != hdr->members.mhdr.bits.mType))
 23992                           
 23993                           ;incstack = 0
 23994  007A4C  0100               	movlb	0	; () banked
 23995  007A4E  EE20 F005          	lfsr	2,5
 23996  007A52  5160               	movf	CheckMcastFlags@hdr& (0+255),w,b
 23997  007A54  26D9               	addwf	fsr2l,f,c
 23998  007A56  5161               	movf	(CheckMcastFlags@hdr+1)& (0+255),w,b
 23999  007A58  22DA               	addwfc	fsr2h,f,c
 24000  007A5A  BADF               	btfsc	indf2,5,c
 24001  007A5C  D012               	goto	u10950
 24002                           
 24003                           ; BSR set to: 0
 24004  007A5E  EE20 F005          	lfsr	2,5
 24005  007A62  5160               	movf	CheckMcastFlags@hdr& (0+255),w,b
 24006  007A64  26D9               	addwf	fsr2l,f,c
 24007  007A66  5161               	movf	(CheckMcastFlags@hdr+1)& (0+255),w,b
 24008  007A68  22DA               	addwfc	fsr2h,f,c
 24009  007A6A  BCDF               	btfsc	indf2,6,c
 24010  007A6C  D00A               	goto	u10950
 24011                           
 24012                           ; BSR set to: 0
 24013  007A6E  C060  FFD9         	movff	CheckMcastFlags@hdr,fsr2l
 24014  007A72  C061  FFDA         	movff	CheckMcastFlags@hdr+1,fsr2h
 24015  007A76  38DF               	swapf	223,w,c
 24016  007A78  32E8               	rrcf	wreg,f,c
 24017  007A7A  0B07               	andlw	7
 24018  007A7C  0A03               	xorlw	3
 24019  007A7E  B4D8               	btfsc	status,2,c
 24020  007A80  D002               	goto	l1367
 24021  007A82                     u10950:
 24022                           
 24023                           ; BSR set to: 0
 24024                           ;lorawan.c: 2110: {
 24025                           ;lorawan.c: 2111: return 0;
 24026                           
 24027                           ; BSR set to: 0
 24028  007A82  0E00               	movlw	0
 24029                           
 24030                           ; BSR set to: 0
 24031  007A84  0012               	return	
 24032  007A86                     l1367:
 24033                           
 24034                           ; BSR set to: 0
 24035                           ;lorawan.c: 2112: }
 24036                           ;lorawan.c: 2114: if (0 != hdr->members.fCtrl.fOptsLen)
 24037                           
 24038                           ; BSR set to: 0
 24039  007A86  EE20 F005          	lfsr	2,5
 24040  007A8A  5160               	movf	CheckMcastFlags@hdr& (0+255),w,b
 24041  007A8C  26D9               	addwf	fsr2l,f,c
 24042  007A8E  5161               	movf	(CheckMcastFlags@hdr+1)& (0+255),w,b
 24043  007A90  22DA               	addwfc	fsr2h,f,c
 24044  007A92  50DF               	movf	223,w,c
 24045  007A94  0B0F               	andlw	15
 24046  007A96  0900               	iorlw	0
 24047  007A98  B4D8               	btfsc	status,2,c
 24048  007A9A  D002               	goto	l1371
 24049                           
 24050                           ; BSR set to: 0
 24051                           ;lorawan.c: 2115: {
 24052                           ;lorawan.c: 2116: return 0;
 24053  007A9C  0E00               	movlw	0
 24054                           
 24055                           ; BSR set to: 0
 24056  007A9E  0012               	return	
 24057  007AA0                     l1371:
 24058                           
 24059                           ; BSR set to: 0
 24060                           ;lorawan.c: 2118: else
 24061                           ;lorawan.c: 2119: {
 24062                           ;lorawan.c: 2120: if ( 0 == *(((uint8_t *)hdr) + 8))
 24063                           
 24064                           ; BSR set to: 0
 24065  007AA0  EE20 F008          	lfsr	2,8
 24066  007AA4  5160               	movf	CheckMcastFlags@hdr& (0+255),w,b
 24067  007AA6  26D9               	addwf	fsr2l,f,c
 24068  007AA8  5161               	movf	(CheckMcastFlags@hdr+1)& (0+255),w,b
 24069  007AAA  22DA               	addwfc	fsr2h,f,c
 24070  007AAC  50DF               	movf	indf2,w,c
 24071  007AAE  A4D8               	btfss	status,2,c
 24072  007AB0  D002               	goto	l1373
 24073                           
 24074                           ; BSR set to: 0
 24075                           ;lorawan.c: 2121: {
 24076                           ;lorawan.c: 2122: return 0;
 24077  007AB2  0E00               	movlw	0
 24078                           
 24079                           ; BSR set to: 0
 24080  007AB4  0012               	return	
 24081  007AB6                     l1373:
 24082                           
 24083                           ; BSR set to: 0
 24084                           ;lorawan.c: 2123: }
 24085                           ;lorawan.c: 2124: }
 24086                           ;lorawan.c: 2126: if (hdr->members.fCtrl.fPending == 1)
 24087                           
 24088                           ; BSR set to: 0
 24089                           
 24090                           ; BSR set to: 0
 24091  007AB6  EE20 F005          	lfsr	2,5
 24092  007ABA  5160               	movf	CheckMcastFlags@hdr& (0+255),w,b
 24093  007ABC  26D9               	addwf	fsr2l,f,c
 24094  007ABE  5161               	movf	(CheckMcastFlags@hdr+1)& (0+255),w,b
 24095  007AC0  22DA               	addwfc	fsr2h,f,c
 24096  007AC2  A8DF               	btfss	indf2,4,c
 24097  007AC4  D002               	goto	l1374
 24098                           
 24099                           ; BSR set to: 0
 24100                           ;lorawan.c: 2127: {
 24101                           ;lorawan.c: 2128: loRa.lorawanMacStatus.fPending = 1;
 24102  007AC6  0102               	movlb	2	; () banked
 24103  007AC8  870A               	bsf	_loRa& (0+255),3,b
 24104  007ACA                     l1374:
 24105                           
 24106                           ;lorawan.c: 2129: }
 24107                           ;lorawan.c: 2131: return 1;
 24108                           
 24109                           ; BSR set to: 2
 24110  007ACA  0E01               	movlw	1
 24111  007ACC  0012               	return	
 24112  007ACE                     __end_of_CheckMcastFlags:
 24113                           	opt stack 0
 24114                           tosu	equ	0xFFF
 24115                           tosh	equ	0xFFE
 24116                           tosl	equ	0xFFD
 24117                           pclath	equ	0xFFA
 24118                           tblptru	equ	0xFF8
 24119                           tblptrh	equ	0xFF7
 24120                           tblptrl	equ	0xFF6
 24121                           tablat	equ	0xFF5
 24122                           prodh	equ	0xFF4
 24123                           prodl	equ	0xFF3
 24124                           intcon	equ	0xFF2
 24125                           intcon2	equ	0xFF1
 24126                           intcon3	equ	0xFF0
 24127                           indf0	equ	0xFEF
 24128                           postinc0	equ	0xFEE
 24129                           fsr0h	equ	0xFEA
 24130                           fsr0l	equ	0xFE9
 24131                           wreg	equ	0xFE8
 24132                           postinc1	equ	0xFE6
 24133                           postdec1	equ	0xFE5
 24134                           plusw1	equ	0xFE3
 24135                           fsr1h	equ	0xFE2
 24136                           fsr1l	equ	0xFE1
 24137                           indf2	equ	0xFDF
 24138                           postinc2	equ	0xFDE
 24139                           postdec2	equ	0xFDD
 24140                           plusw2	equ	0xFDB
 24141                           fsr2h	equ	0xFDA
 24142                           fsr2l	equ	0xFD9
 24143                           status	equ	0xFD8
 24144                           
 24145 ;; *************** function _CheckFlags *****************
 24146 ;; Defined at:
 24147 ;;		line 2074 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 24148 ;; Parameters:    Size  Location     Type
 24149 ;;  hdr             2    0[BANK0 ] PTR struct .
 24150 ;;		 -> radioBuffer(271), LORAWAN_RxDone@hdr(2), 
 24151 ;; Auto vars:     Size  Location     Type
 24152 ;;		None
 24153 ;; Return value:  Size  Location     Type
 24154 ;;                  1    wreg      void 
 24155 ;; Registers used:
 24156 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 24157 ;; Tracked objects:
 24158 ;;		On entry : 0/0
 24159 ;;		On exit  : 0/0
 24160 ;;		Unchanged: 0/0
 24161 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24162 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24163 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24164 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24165 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24166 ;;Total ram usage:        2 bytes
 24167 ;; Hardware stack levels used:    1
 24168 ;; Hardware stack levels required when called:    7
 24169 ;; This function calls:
 24170 ;;		Nothing
 24171 ;; This function is called by:
 24172 ;;		_LORAWAN_RxDone
 24173 ;; This function uses a non-reentrant model
 24174 ;;
 24175                           
 24176                           	psect	text112
 24177  00832C                     __ptext112:
 24178                           	opt stack 0
 24179  00832C                     _CheckFlags:
 24180                           	opt stack 19
 24181                           
 24182                           ;lorawan.c: 2076: if (hdr->members.fCtrl.adr == 1)
 24183                           
 24184                           ;incstack = 0
 24185  00832C  0100               	movlb	0	; () banked
 24186  00832E  EE20 F005          	lfsr	2,5
 24187  008332  5160               	movf	CheckFlags@hdr& (0+255),w,b
 24188  008334  26D9               	addwf	fsr2l,f,c
 24189  008336  5161               	movf	(CheckFlags@hdr+1)& (0+255),w,b
 24190  008338  22DA               	addwfc	fsr2h,f,c
 24191  00833A  AEDF               	btfss	indf2,7,c
 24192  00833C  D002               	goto	l1360
 24193                           
 24194                           ; BSR set to: 0
 24195                           ;lorawan.c: 2077: {
 24196                           ;lorawan.c: 2078: loRa.macStatus.adr = 1;
 24197  00833E  0102               	movlb	2	; () banked
 24198  008340  8D0C               	bsf	(_loRa+2)& (0+255),6,b
 24199  008342                     l1360:
 24200                           
 24201                           ;lorawan.c: 2079: }
 24202                           ;lorawan.c: 2081: if (hdr->members.fCtrl.fPending == 1)
 24203                           
 24204                           ; BSR set to: 2
 24205  008342  0100               	movlb	0	; () banked
 24206  008344  EE20 F005          	lfsr	2,5
 24207  008348  5160               	movf	CheckFlags@hdr& (0+255),w,b
 24208  00834A  26D9               	addwf	fsr2l,f,c
 24209  00834C  5161               	movf	(CheckFlags@hdr+1)& (0+255),w,b
 24210  00834E  22DA               	addwfc	fsr2h,f,c
 24211  008350  A8DF               	btfss	indf2,4,c
 24212  008352  D002               	goto	l1361
 24213                           
 24214                           ; BSR set to: 0
 24215                           ;lorawan.c: 2082: {
 24216                           ;lorawan.c: 2083: loRa.lorawanMacStatus.fPending = 1;
 24217  008354  0102               	movlb	2	; () banked
 24218  008356  870A               	bsf	_loRa& (0+255),3,b
 24219  008358                     l1361:
 24220                           
 24221                           ;lorawan.c: 2084: }
 24222                           ;lorawan.c: 2086: if (hdr->members.fCtrl.adrAckReq == 1)
 24223                           
 24224                           ; BSR set to: 2
 24225  008358  0100               	movlb	0	; () banked
 24226  00835A  EE20 F005          	lfsr	2,5
 24227  00835E  5160               	movf	CheckFlags@hdr& (0+255),w,b
 24228  008360  26D9               	addwf	fsr2l,f,c
 24229  008362  5161               	movf	(CheckFlags@hdr+1)& (0+255),w,b
 24230  008364  22DA               	addwfc	fsr2h,f,c
 24231  008366  ACDF               	btfss	indf2,6,c
 24232  008368  D002               	goto	l1362
 24233                           
 24234                           ; BSR set to: 0
 24235                           ;lorawan.c: 2087: {
 24236                           ;lorawan.c: 2088: loRa.lorawanMacStatus.adrAckRequest = 1;
 24237  00836A  0102               	movlb	2	; () banked
 24238  00836C  890A               	bsf	_loRa& (0+255),4,b
 24239  00836E                     l1362:
 24240                           
 24241                           ;lorawan.c: 2089: }
 24242                           ;lorawan.c: 2091: if (hdr->members.mhdr.bits.mType == FRAME_TYPE_DATA_CONFIRMED_DOWN)
 24243                           
 24244                           ; BSR set to: 2
 24245  00836E  C060  FFD9         	movff	CheckFlags@hdr,fsr2l
 24246  008372  C061  FFDA         	movff	CheckFlags@hdr+1,fsr2h
 24247  008376  0100               	movlb	0	; () banked
 24248  008378  38DF               	swapf	223,w,c
 24249  00837A  32E8               	rrcf	wreg,f,c
 24250  00837C  0B07               	andlw	7
 24251  00837E  0A05               	xorlw	5
 24252  008380  A4D8               	btfss	status,2,c
 24253  008382  0012               	return	
 24254                           
 24255                           ; BSR set to: 0
 24256                           ;lorawan.c: 2092: {
 24257                           ;lorawan.c: 2093: loRa.lorawanMacStatus.ackRequiredFromNextUplinkMessage = 1;
 24258  008384  0102               	movlb	2	; () banked
 24259  008386  830A               	bsf	_loRa& (0+255),1,b
 24260  008388  0012               	return	
 24261  00838A                     __end_of_CheckFlags:
 24262                           	opt stack 0
 24263                           tosu	equ	0xFFF
 24264                           tosh	equ	0xFFE
 24265                           tosl	equ	0xFFD
 24266                           pclath	equ	0xFFA
 24267                           tblptru	equ	0xFF8
 24268                           tblptrh	equ	0xFF7
 24269                           tblptrl	equ	0xFF6
 24270                           tablat	equ	0xFF5
 24271                           prodh	equ	0xFF4
 24272                           prodl	equ	0xFF3
 24273                           intcon	equ	0xFF2
 24274                           intcon2	equ	0xFF1
 24275                           intcon3	equ	0xFF0
 24276                           indf0	equ	0xFEF
 24277                           postinc0	equ	0xFEE
 24278                           fsr0h	equ	0xFEA
 24279                           fsr0l	equ	0xFE9
 24280                           wreg	equ	0xFE8
 24281                           postinc1	equ	0xFE6
 24282                           postdec1	equ	0xFE5
 24283                           plusw1	equ	0xFE3
 24284                           fsr1h	equ	0xFE2
 24285                           fsr1l	equ	0xFE1
 24286                           indf2	equ	0xFDF
 24287                           postinc2	equ	0xFDE
 24288                           postdec2	equ	0xFDD
 24289                           plusw2	equ	0xFDB
 24290                           fsr2h	equ	0xFDA
 24291                           fsr2l	equ	0xFD9
 24292                           status	equ	0xFD8
 24293                           
 24294 ;; *************** function _RADIO_FSKPacketSent *****************
 24295 ;; Defined at:
 24296 ;;		line 1093 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 24297 ;; Parameters:    Size  Location     Type
 24298 ;;		None
 24299 ;; Auto vars:     Size  Location     Type
 24300 ;;  timeOnAir       4  135[BANK0 ] unsigned long 
 24301 ;;  irqFlags        1  143[BANK0 ] unsigned char 
 24302 ;; Return value:  Size  Location     Type
 24303 ;;                  1    wreg      void 
 24304 ;; Registers used:
 24305 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 24306 ;; Tracked objects:
 24307 ;;		On entry : 0/0
 24308 ;;		On exit  : 0/0
 24309 ;;		Unchanged: 0/0
 24310 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24311 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24312 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24313 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24314 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24315 ;;Total ram usage:       13 bytes
 24316 ;; Hardware stack levels used:    1
 24317 ;; Hardware stack levels required when called:   15
 24318 ;; This function calls:
 24319 ;;		_LORAWAN_TxDone
 24320 ;;		_RADIO_RegisterRead
 24321 ;;		_RADIO_WriteMode
 24322 ;;		_SwTimerReadValue
 24323 ;;		_SwTimerStop
 24324 ;;		___lmul
 24325 ;; This function is called by:
 24326 ;;		_RADIO_DIO0
 24327 ;; This function uses a non-reentrant model
 24328 ;;
 24329                           
 24330                           	psect	text113
 24331  005D12                     __ptext113:
 24332                           	opt stack 0
 24333  005D12                     _RADIO_FSKPacketSent:
 24334                           	opt stack 13
 24335                           
 24336                           ;radio_driver_SX1276.c: 1095: uint8_t irqFlags;
 24337                           ;radio_driver_SX1276.c: 1096: uint32_t timeOnAir;
 24338                           ;radio_driver_SX1276.c: 1098: irqFlags = RADIO_RegisterRead(0x3F);
 24339                           
 24340                           ;incstack = 0
 24341  005D12  0E3F               	movlw	63
 24342  005D14  ECE7  F047         	call	_RADIO_RegisterRead
 24343  005D18  0100               	movlb	0	; () banked
 24344  005D1A  6FEF               	movwf	RADIO_FSKPacketSent@irqFlags& (0+255),b
 24345                           
 24346                           ; BSR set to: 0
 24347                           ;radio_driver_SX1276.c: 1099: if ((1<<(3)) == (irqFlags & (1<<(3))))
 24348  005D1C  A7EF               	btfss	RADIO_FSKPacketSent@irqFlags& (0+255),3,b
 24349  005D1E  0012               	return	
 24350                           
 24351                           ; BSR set to: 0
 24352                           ;radio_driver_SX1276.c: 1100: {
 24353                           ;radio_driver_SX1276.c: 1101: RADIO_WriteMode(MODE_SLEEP, RadioConfiguration.modulation,
      +                           0);
 24354  005D20  C16D  F065         	movff	_RadioConfiguration+24,RADIO_WriteMode@newModulation
 24355  005D24  0E00               	movlw	0
 24356  005D26  6F66               	movwf	RADIO_WriteMode@blocking& (0+255),b
 24357  005D28  0E00               	movlw	0
 24358  005D2A  ECDA  F031         	call	_RADIO_WriteMode
 24359                           
 24360                           ;radio_driver_SX1276.c: 1102: RadioConfiguration.flags &= ~(1 << (0));
 24361  005D2E  0101               	movlb	1	; () banked
 24362  005D30  9178               	bcf	(_RadioConfiguration+35)& (0+255),0,b
 24363                           
 24364                           ; BSR set to: 1
 24365                           ;radio_driver_SX1276.c: 1104: SwTimerStop(RadioConfiguration.watchdogTimerId);
 24366  005D32  517E               	movf	(_RadioConfiguration+41)& (0+255),w,b
 24367  005D34  ECFB  F047         	call	_SwTimerStop
 24368                           
 24369                           ;radio_driver_SX1276.c: 1106: if ((RadioConfiguration.flags & (1 << (4))) == 0)
 24370  005D38  0101               	movlb	1	; () banked
 24371  005D3A  B978               	btfsc	(_RadioConfiguration+35)& (0+255),4,b
 24372  005D3C  0012               	return	
 24373                           
 24374                           ; BSR set to: 1
 24375                           ;radio_driver_SX1276.c: 1107: {
 24376                           ;radio_driver_SX1276.c: 1108: timeOnAir = ((uint32_t)20000) - ((SwTimerReadValue(RadioCo
      +                          nfiguration.timeOnAirTimerId)) < 0x00DFAC1FUL ? ( (((uint32_t)(SwTimerReadValue(RadioCon
      +                          figuration.timeOnAirTimerId))) * 125UL) >> (12) ) : ( (((uint32_t)(SwTimerReadValue(Radi
      +                          oConfiguration.t
 24377  005D3E  517C               	movf	(_RadioConfiguration+39)& (0+255),w,b
 24378  005D40  EC86  F045         	call	_SwTimerReadValue
 24379  005D44  0100               	movlb	0	; () banked
 24380  005D46  5194               	movf	(?_SwTimerReadValue+3)& (0+255),w,b
 24381  005D48  E108               	bnz	u12810
 24382  005D4A  0E1F               	movlw	31
 24383  005D4C  5D91               	subwf	?_SwTimerReadValue& (0+255),w,b
 24384  005D4E  0EAC               	movlw	172
 24385  005D50  5992               	subwfb	(?_SwTimerReadValue+1)& (0+255),w,b
 24386  005D52  0EDF               	movlw	223
 24387  005D54  5993               	subwfb	(?_SwTimerReadValue+2)& (0+255),w,b
 24388  005D56  A0D8               	btfss	status,0,c
 24389  005D58  D021               	goto	l353
 24390  005D5A                     u12810:
 24391                           
 24392                           ; BSR set to: 0
 24393  005D5A  0101               	movlb	1	; () banked
 24394  005D5C  517C               	movf	(_RadioConfiguration+39)& (0+255),w,b
 24395  005D5E  EC86  F045         	call	_SwTimerReadValue
 24396  005D62  0E0D               	movlw	13
 24397  005D64  D006               	goto	u12820
 24398  005D66                     u12825:
 24399  005D66  0100               	movlb	0	; () banked
 24400  005D68  90D8               	bcf	status,0,c
 24401  005D6A  3394               	rrcf	(?_SwTimerReadValue+3)& (0+255),f,b
 24402  005D6C  3393               	rrcf	(?_SwTimerReadValue+2)& (0+255),f,b
 24403  005D6E  3392               	rrcf	(?_SwTimerReadValue+1)& (0+255),f,b
 24404  005D70  3391               	rrcf	?_SwTimerReadValue& (0+255),f,b
 24405  005D72                     u12820:
 24406  005D72  2EE8               	decfsz	wreg,f,c
 24407  005D74  D7F8               	goto	u12825
 24408  005D76  C091  F09A         	movff	?_SwTimerReadValue,___lmul@multiplier
 24409  005D7A  C092  F09B         	movff	?_SwTimerReadValue+1,___lmul@multiplier+1
 24410  005D7E  C093  F09C         	movff	?_SwTimerReadValue+2,___lmul@multiplier+2
 24411  005D82  C094  F09D         	movff	?_SwTimerReadValue+3,___lmul@multiplier+3
 24412  005D86  0E7D               	movlw	125
 24413  005D88  6F9E               	movwf	___lmul@multiplicand& (0+255),b
 24414  005D8A  0E00               	movlw	0
 24415  005D8C  6F9F               	movwf	(___lmul@multiplicand+1)& (0+255),b
 24416  005D8E  0E00               	movlw	0
 24417  005D90  6FA0               	movwf	(___lmul@multiplicand+2)& (0+255),b
 24418  005D92  0E00               	movlw	0
 24419  005D94  6FA1               	movwf	(___lmul@multiplicand+3)& (0+255),b
 24420  005D96  EC4D  F042         	call	___lmul	;wreg free
 24421  005D9A  D021               	goto	L14
 24422  005D9C                     l353:
 24423  005D9C  0101               	movlb	1	; () banked
 24424  005D9E  517C               	movf	(_RadioConfiguration+39)& (0+255),w,b
 24425  005DA0  EC86  F045         	call	_SwTimerReadValue
 24426  005DA4  C091  F09A         	movff	?_SwTimerReadValue,___lmul@multiplier
 24427  005DA8  C092  F09B         	movff	?_SwTimerReadValue+1,___lmul@multiplier+1
 24428  005DAC  C093  F09C         	movff	?_SwTimerReadValue+2,___lmul@multiplier+2
 24429  005DB0  C094  F09D         	movff	?_SwTimerReadValue+3,___lmul@multiplier+3
 24430  005DB4  0E7D               	movlw	125
 24431  005DB6  0100               	movlb	0	; () banked
 24432  005DB8  6F9E               	movwf	___lmul@multiplicand& (0+255),b
 24433  005DBA  0E00               	movlw	0
 24434  005DBC  6F9F               	movwf	(___lmul@multiplicand+1)& (0+255),b
 24435  005DBE  0E00               	movlw	0
 24436  005DC0  6FA0               	movwf	(___lmul@multiplicand+2)& (0+255),b
 24437  005DC2  0E00               	movlw	0
 24438  005DC4  6FA1               	movwf	(___lmul@multiplicand+3)& (0+255),b
 24439  005DC6  EC4D  F042         	call	___lmul	;wreg free
 24440  005DCA  0E0D               	movlw	13
 24441  005DCC  D006               	goto	u12830
 24442  005DCE                     u12835:
 24443  005DCE  0100               	movlb	0	; () banked
 24444  005DD0  90D8               	bcf	status,0,c
 24445  005DD2  339D               	rrcf	(?___lmul+3)& (0+255),f,b
 24446  005DD4  339C               	rrcf	(?___lmul+2)& (0+255),f,b
 24447  005DD6  339B               	rrcf	(?___lmul+1)& (0+255),f,b
 24448  005DD8  339A               	rrcf	?___lmul& (0+255),f,b
 24449  005DDA                     u12830:
 24450  005DDA  2EE8               	decfsz	wreg,f,c
 24451  005DDC  D7F8               	goto	u12835
 24452  005DDE                     L14:
 24453  005DDE  C09A  F0EB         	movff	?___lmul,_RADIO_FSKPacketSent$536
 24454  005DE2  C09B  F0EC         	movff	?___lmul+1,_RADIO_FSKPacketSent$536+1
 24455  005DE6  C09C  F0ED         	movff	?___lmul+2,_RADIO_FSKPacketSent$536+2
 24456  005DEA  C09D  F0EE         	movff	?___lmul+3,_RADIO_FSKPacketSent$536+3
 24457                           
 24458                           ; BSR set to: 0
 24459  005DEE  C0EB  F0E3         	movff	_RADIO_FSKPacketSent$536,??_RADIO_FSKPacketSent
 24460  005DF2  C0EC  F0E4         	movff	_RADIO_FSKPacketSent$536+1,??_RADIO_FSKPacketSent+1
 24461  005DF6  C0ED  F0E5         	movff	_RADIO_FSKPacketSent$536+2,??_RADIO_FSKPacketSent+2
 24462  005DFA  C0EE  F0E6         	movff	_RADIO_FSKPacketSent$536+3,??_RADIO_FSKPacketSent+3
 24463  005DFE  0100               	movlb	0	; () banked
 24464  005E00  1FE3               	comf	??_RADIO_FSKPacketSent& (0+255),f,b
 24465  005E02  1FE4               	comf	(??_RADIO_FSKPacketSent+1)& (0+255),f,b
 24466  005E04  1FE5               	comf	(??_RADIO_FSKPacketSent+2)& (0+255),f,b
 24467  005E06  1FE6               	comf	(??_RADIO_FSKPacketSent+3)& (0+255),f,b
 24468  005E08  2BE3               	incf	??_RADIO_FSKPacketSent& (0+255),f,b
 24469  005E0A  0E00               	movlw	0
 24470  005E0C  23E4               	addwfc	(??_RADIO_FSKPacketSent+1)& (0+255),f,b
 24471  005E0E  23E5               	addwfc	(??_RADIO_FSKPacketSent+2)& (0+255),f,b
 24472  005E10  23E6               	addwfc	(??_RADIO_FSKPacketSent+3)& (0+255),f,b
 24473  005E12  0E20               	movlw	32
 24474  005E14  25E3               	addwf	??_RADIO_FSKPacketSent& (0+255),w,b
 24475  005E16  6FE7               	movwf	RADIO_FSKPacketSent@timeOnAir& (0+255),b
 24476  005E18  0E4E               	movlw	78
 24477  005E1A  21E4               	addwfc	(??_RADIO_FSKPacketSent+1)& (0+255),w,b
 24478  005E1C  6FE8               	movwf	(RADIO_FSKPacketSent@timeOnAir+1)& (0+255),b
 24479  005E1E  0E00               	movlw	0
 24480  005E20  21E5               	addwfc	(??_RADIO_FSKPacketSent+2)& (0+255),w,b
 24481  005E22  6FE9               	movwf	(RADIO_FSKPacketSent@timeOnAir+2)& (0+255),b
 24482  005E24  0E00               	movlw	0
 24483  005E26  21E6               	addwfc	(??_RADIO_FSKPacketSent+3)& (0+255),w,b
 24484  005E28  6FEA               	movwf	(RADIO_FSKPacketSent@timeOnAir+3)& (0+255),b
 24485                           
 24486                           ; BSR set to: 0
 24487                           ;radio_driver_SX1276.c: 1109: SwTimerStop(RadioConfiguration.timeOnAirTimerId);
 24488  005E2A  0101               	movlb	1	; () banked
 24489  005E2C  517C               	movf	(_RadioConfiguration+39)& (0+255),w,b
 24490  005E2E  ECFB  F047         	call	_SwTimerStop
 24491                           
 24492                           ;radio_driver_SX1276.c: 1110: LORAWAN_TxDone((uint16_t)timeOnAir);
 24493  005E32  C0E7  F0BB         	movff	RADIO_FSKPacketSent@timeOnAir,LORAWAN_TxDone@timeOnAir
 24494  005E36  C0E8  F0BC         	movff	RADIO_FSKPacketSent@timeOnAir+1,LORAWAN_TxDone@timeOnAir+1
 24495  005E3A  ECBD  F006         	call	_LORAWAN_TxDone	;wreg free
 24496  005E3E  0012               	return	
 24497  005E40                     __end_of_RADIO_FSKPacketSent:
 24498                           	opt stack 0
 24499                           tosu	equ	0xFFF
 24500                           tosh	equ	0xFFE
 24501                           tosl	equ	0xFFD
 24502                           pclath	equ	0xFFA
 24503                           tblptru	equ	0xFF8
 24504                           tblptrh	equ	0xFF7
 24505                           tblptrl	equ	0xFF6
 24506                           tablat	equ	0xFF5
 24507                           prodh	equ	0xFF4
 24508                           prodl	equ	0xFF3
 24509                           intcon	equ	0xFF2
 24510                           intcon2	equ	0xFF1
 24511                           intcon3	equ	0xFF0
 24512                           indf0	equ	0xFEF
 24513                           postinc0	equ	0xFEE
 24514                           fsr0h	equ	0xFEA
 24515                           fsr0l	equ	0xFE9
 24516                           wreg	equ	0xFE8
 24517                           postinc1	equ	0xFE6
 24518                           postdec1	equ	0xFE5
 24519                           plusw1	equ	0xFE3
 24520                           fsr1h	equ	0xFE2
 24521                           fsr1l	equ	0xFE1
 24522                           indf2	equ	0xFDF
 24523                           postinc2	equ	0xFDE
 24524                           postdec2	equ	0xFDD
 24525                           plusw2	equ	0xFDB
 24526                           fsr2h	equ	0xFDA
 24527                           fsr2l	equ	0xFD9
 24528                           status	equ	0xFD8
 24529                           
 24530 ;; *************** function _LORAWAN_TxDone *****************
 24531 ;; Defined at:
 24532 ;;		line 365 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 24533 ;; Parameters:    Size  Location     Type
 24534 ;;  timeOnAir       2   91[BANK0 ] unsigned int 
 24535 ;; Auto vars:     Size  Location     Type
 24536 ;;  minim           4  126[BANK0 ] unsigned long 
 24537 ;;  ticks           4  122[BANK0 ] unsigned long 
 24538 ;;  delta           4  114[BANK0 ] unsigned long 
 24539 ;;  i               1  130[BANK0 ] unsigned char 
 24540 ;;  found           1  113[BANK0 ] unsigned char 
 24541 ;; Return value:  Size  Location     Type
 24542 ;;                  1    wreg      void 
 24543 ;; Registers used:
 24544 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 24545 ;; Tracked objects:
 24546 ;;		On entry : 0/0
 24547 ;;		On exit  : 0/0
 24548 ;;		Unchanged: 0/0
 24549 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24550 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24551 ;;      Locals:         0      26       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24552 ;;      Temps:          0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24553 ;;      Totals:         0      40       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24554 ;;Total ram usage:       40 bytes
 24555 ;; Hardware stack levels used:    1
 24556 ;; Hardware stack levels required when called:   14
 24557 ;; This function calls:
 24558 ;;		_LORAWAN_EnterContinuousReceive
 24559 ;;		_RADIO_GetStatus
 24560 ;;		_RxData
 24561 ;;		_SwTimerIsRunning
 24562 ;;		_SwTimerReadValue
 24563 ;;		_SwTimerSetTimeout
 24564 ;;		_SwTimerStart
 24565 ;;		_SwTimerStop
 24566 ;;		___lldiv
 24567 ;;		___lmul
 24568 ;; This function is called by:
 24569 ;;		_RADIO_TxDone
 24570 ;;		_RADIO_FSKPacketSent
 24571 ;;		_RADIO_WatchdogTimeout
 24572 ;; This function uses a non-reentrant model
 24573 ;;
 24574                           
 24575                           	psect	text114
 24576  000D7A                     __ptext114:
 24577                           	opt stack 0
 24578  000D7A                     _LORAWAN_TxDone:
 24579                           	opt stack 13
 24580                           
 24581                           ;lorawan_eu.c: 367: if (loRa.macStatus.macPause == 0)
 24582                           
 24583                           ;incstack = 0
 24584  000D7A  0102               	movlb	2	; () banked
 24585  000D7C  B10D               	btfsc	(_loRa+3)& (0+255),0,b
 24586  000D7E  D3A2               	goto	l1865
 24587                           
 24588                           ; BSR set to: 2
 24589                           ;lorawan_eu.c: 368: {
 24590                           ;lorawan_eu.c: 369: bool found = 0;
 24591  000D80  0E00               	movlw	0
 24592  000D82  0100               	movlb	0	; () banked
 24593  000D84  6FD1               	movwf	LORAWAN_TxDone@found& (0+255),b
 24594                           
 24595                           ;lorawan_eu.c: 370: uint8_t i;
 24596                           ;lorawan_eu.c: 371: uint32_t delta = 0, minim = (4294967295UL), ticks;
 24597  000D86  0E00               	movlw	0
 24598  000D88  6FD2               	movwf	LORAWAN_TxDone@delta& (0+255),b
 24599  000D8A  0E00               	movlw	0
 24600  000D8C  6FD3               	movwf	(LORAWAN_TxDone@delta+1)& (0+255),b
 24601  000D8E  0E00               	movlw	0
 24602  000D90  6FD4               	movwf	(LORAWAN_TxDone@delta+2)& (0+255),b
 24603  000D92  0E00               	movlw	0
 24604  000D94  6FD5               	movwf	(LORAWAN_TxDone@delta+3)& (0+255),b
 24605                           
 24606                           ; BSR set to: 0
 24607  000D96  69DE               	setf	LORAWAN_TxDone@minim& (0+255),b
 24608  000D98  69DF               	setf	(LORAWAN_TxDone@minim+1)& (0+255),b
 24609  000D9A  69E0               	setf	(LORAWAN_TxDone@minim+2)& (0+255),b
 24610  000D9C  69E1               	setf	(LORAWAN_TxDone@minim+3)& (0+255),b
 24611                           
 24612                           ;lorawan_eu.c: 374: loRa.rx2DelayExpired = 0;
 24613  000D9E  0E00               	movlw	0
 24614  000DA0  0102               	movlb	2	; () banked
 24615  000DA2  6FFB               	movwf	(_loRa+241)& (0+255),b
 24616                           
 24617                           ;lorawan_eu.c: 376: loRa.macStatus.macState = BEFORE_RX1;
 24618  000DA4  510C               	movf	(_loRa+2)& (0+255),w,b
 24619  000DA6  0BF0               	andlw	-16
 24620  000DA8  0902               	iorlw	2
 24621  000DAA  6F0C               	movwf	(_loRa+2)& (0+255),b
 24622                           
 24623                           ; BSR set to: 2
 24624                           ;lorawan_eu.c: 378: i = loRa.lastUsedChannelIndex;
 24625  000DAC  C2E4  F0E2         	movff	_loRa+218,LORAWAN_TxDone@i
 24626                           
 24627                           ; BSR set to: 2
 24628                           ;lorawan_eu.c: 381: if (loRa.lorawanMacStatus.joining == 1)
 24629  000DB0  A50A               	btfss	_loRa& (0+255),2,b
 24630  000DB2  D0BA               	goto	l1866
 24631                           
 24632                           ; BSR set to: 2
 24633                           ;lorawan_eu.c: 382: {
 24634                           ;lorawan_eu.c: 383: SwTimerSetTimeout(loRa.joinAccept1TimerId, ( (((uint32_t)(loRa.proto
      +                          colParameters.joinAcceptDelay1 + rxWindowOffset[loRa.receiveWindow1Parameters.dataRate])
      +                          ) << (12)) / 125UL ));
 24635  000DB4  5121               	movf	(_loRa+23)& (0+255),w,b
 24636  000DB6  0D01               	mullw	1
 24637  000DB8  0E6F               	movlw	low _rxWindowOffset
 24638  000DBA  24F3               	addwf	prodl,w,c
 24639  000DBC  6EF6               	movwf	tblptrl,c
 24640  000DBE  0EFF               	movlw	high _rxWindowOffset
 24641  000DC0  20F4               	addwfc	prodh,w,c
 24642  000DC2  6EF7               	movwf	tblptrh,c
 24643  000DC4                     	if	1	;There are 3 active tblptr bytes
 24644  000DC4  6AF8               	clrf	tblptru,c
 24645  000DC6  0E00               	movlw	low (__mediumconst shr (0+16))
 24646  000DC8  22F8               	addwfc	tblptru,f,c
 24647  000DCA                     	endif
 24648  000DCA  0008               	tblrd		*
 24649  000DCC  CFF5 F0BD          	movff	tablat,??_LORAWAN_TxDone
 24650  000DD0  51A2               	movf	(_loRa+152)& (0+255),w,b
 24651  000DD2  0100               	movlb	0	; () banked
 24652  000DD4  25BD               	addwf	??_LORAWAN_TxDone& (0+255),w,b
 24653  000DD6  6FBE               	movwf	(??_LORAWAN_TxDone+1)& (0+255),b
 24654  000DD8  0E00               	movlw	0
 24655  000DDA  BFBD               	btfsc	??_LORAWAN_TxDone& (0+255),7,b
 24656  000DDC  0EFF               	movlw	255
 24657  000DDE  0102               	movlb	2	; () banked
 24658  000DE0  21A3               	addwfc	(_loRa+153)& (0+255),w,b
 24659  000DE2  0100               	movlb	0	; () banked
 24660  000DE4  6FBF               	movwf	(??_LORAWAN_TxDone+2)& (0+255),b
 24661  000DE6  6BC0               	clrf	(??_LORAWAN_TxDone+3)& (0+255),b
 24662  000DE8  6BC1               	clrf	(??_LORAWAN_TxDone+4)& (0+255),b
 24663  000DEA  0E0C               	movlw	12
 24664  000DEC                     u12265:
 24665  000DEC  90D8               	bcf	status,0,c
 24666  000DEE  37BE               	rlcf	(??_LORAWAN_TxDone+1)& (0+255),f,b
 24667  000DF0  37BF               	rlcf	(??_LORAWAN_TxDone+2)& (0+255),f,b
 24668  000DF2  37C0               	rlcf	(??_LORAWAN_TxDone+3)& (0+255),f,b
 24669  000DF4  37C1               	rlcf	(??_LORAWAN_TxDone+4)& (0+255),f,b
 24670  000DF6  2EE8               	decfsz	wreg,f,c
 24671  000DF8  D7F9               	goto	u12265
 24672  000DFA  C0BE  F060         	movff	??_LORAWAN_TxDone+1,___lldiv@dividend
 24673  000DFE  C0BF  F061         	movff	??_LORAWAN_TxDone+2,___lldiv@dividend+1
 24674  000E02  C0C0  F062         	movff	??_LORAWAN_TxDone+3,___lldiv@dividend+2
 24675  000E06  C0C1  F063         	movff	??_LORAWAN_TxDone+4,___lldiv@dividend+3
 24676  000E0A  0E7D               	movlw	125
 24677  000E0C  6F64               	movwf	___lldiv@divisor& (0+255),b
 24678  000E0E  0E00               	movlw	0
 24679  000E10  6F65               	movwf	(___lldiv@divisor+1)& (0+255),b
 24680  000E12  0E00               	movlw	0
 24681  000E14  6F66               	movwf	(___lldiv@divisor+2)& (0+255),b
 24682  000E16  0E00               	movlw	0
 24683  000E18  6F67               	movwf	(___lldiv@divisor+3)& (0+255),b
 24684  000E1A  ECE4  F03C         	call	___lldiv	;wreg free
 24685  000E1E  C060  F06D         	movff	?___lldiv,SwTimerSetTimeout@timeout
 24686  000E22  C061  F06E         	movff	?___lldiv+1,SwTimerSetTimeout@timeout+1
 24687  000E26  C062  F06F         	movff	?___lldiv+2,SwTimerSetTimeout@timeout+2
 24688  000E2A  C063  F070         	movff	?___lldiv+3,SwTimerSetTimeout@timeout+3
 24689  000E2E  0102               	movlb	2	; () banked
 24690  000E30  51EC               	movf	(_loRa+226)& (0+255),w,b
 24691  000E32  EC01  F045         	call	_SwTimerSetTimeout
 24692                           
 24693                           ;lorawan_eu.c: 384: SwTimerSetTimeout(loRa.joinAccept2TimerId, ( (((uint32_t)(loRa.proto
      +                          colParameters.joinAcceptDelay2 + rxWindowOffset[loRa.receiveWindow2Parameters.dataRate])
      +                          ) << (12)) / 125UL ));
 24694  000E36  0102               	movlb	2	; () banked
 24695  000E38  5126               	movf	(_loRa+28)& (0+255),w,b
 24696  000E3A  0D01               	mullw	1
 24697  000E3C  0E6F               	movlw	low _rxWindowOffset
 24698  000E3E  24F3               	addwf	prodl,w,c
 24699  000E40  6EF6               	movwf	tblptrl,c
 24700  000E42  0EFF               	movlw	high _rxWindowOffset
 24701  000E44  20F4               	addwfc	prodh,w,c
 24702  000E46  6EF7               	movwf	tblptrh,c
 24703  000E48                     	if	1	;There are 3 active tblptr bytes
 24704  000E48  6AF8               	clrf	tblptru,c
 24705  000E4A  0E00               	movlw	low (__mediumconst shr (0+16))
 24706  000E4C  22F8               	addwfc	tblptru,f,c
 24707  000E4E                     	endif
 24708  000E4E  0008               	tblrd		*
 24709  000E50  CFF5 F0BD          	movff	tablat,??_LORAWAN_TxDone
 24710  000E54  51A4               	movf	(_loRa+154)& (0+255),w,b
 24711  000E56  0100               	movlb	0	; () banked
 24712  000E58  25BD               	addwf	??_LORAWAN_TxDone& (0+255),w,b
 24713  000E5A  6FBE               	movwf	(??_LORAWAN_TxDone+1)& (0+255),b
 24714  000E5C  0E00               	movlw	0
 24715  000E5E  BFBD               	btfsc	??_LORAWAN_TxDone& (0+255),7,b
 24716  000E60  0EFF               	movlw	255
 24717  000E62  0102               	movlb	2	; () banked
 24718  000E64  21A5               	addwfc	(_loRa+155)& (0+255),w,b
 24719  000E66  0100               	movlb	0	; () banked
 24720  000E68  6FBF               	movwf	(??_LORAWAN_TxDone+2)& (0+255),b
 24721  000E6A  6BC0               	clrf	(??_LORAWAN_TxDone+3)& (0+255),b
 24722  000E6C  6BC1               	clrf	(??_LORAWAN_TxDone+4)& (0+255),b
 24723  000E6E  0E0C               	movlw	12
 24724  000E70                     u12275:
 24725  000E70  90D8               	bcf	status,0,c
 24726  000E72  37BE               	rlcf	(??_LORAWAN_TxDone+1)& (0+255),f,b
 24727  000E74  37BF               	rlcf	(??_LORAWAN_TxDone+2)& (0+255),f,b
 24728  000E76  37C0               	rlcf	(??_LORAWAN_TxDone+3)& (0+255),f,b
 24729  000E78  37C1               	rlcf	(??_LORAWAN_TxDone+4)& (0+255),f,b
 24730  000E7A  2EE8               	decfsz	wreg,f,c
 24731  000E7C  D7F9               	goto	u12275
 24732  000E7E  C0BE  F060         	movff	??_LORAWAN_TxDone+1,___lldiv@dividend
 24733  000E82  C0BF  F061         	movff	??_LORAWAN_TxDone+2,___lldiv@dividend+1
 24734  000E86  C0C0  F062         	movff	??_LORAWAN_TxDone+3,___lldiv@dividend+2
 24735  000E8A  C0C1  F063         	movff	??_LORAWAN_TxDone+4,___lldiv@dividend+3
 24736  000E8E  0E7D               	movlw	125
 24737  000E90  6F64               	movwf	___lldiv@divisor& (0+255),b
 24738  000E92  0E00               	movlw	0
 24739  000E94  6F65               	movwf	(___lldiv@divisor+1)& (0+255),b
 24740  000E96  0E00               	movlw	0
 24741  000E98  6F66               	movwf	(___lldiv@divisor+2)& (0+255),b
 24742  000E9A  0E00               	movlw	0
 24743  000E9C  6F67               	movwf	(___lldiv@divisor+3)& (0+255),b
 24744  000E9E  ECE4  F03C         	call	___lldiv	;wreg free
 24745  000EA2  C060  F06D         	movff	?___lldiv,SwTimerSetTimeout@timeout
 24746  000EA6  C061  F06E         	movff	?___lldiv+1,SwTimerSetTimeout@timeout+1
 24747  000EAA  C062  F06F         	movff	?___lldiv+2,SwTimerSetTimeout@timeout+2
 24748  000EAE  C063  F070         	movff	?___lldiv+3,SwTimerSetTimeout@timeout+3
 24749  000EB2  0102               	movlb	2	; () banked
 24750  000EB4  51ED               	movf	(_loRa+227)& (0+255),w,b
 24751  000EB6  EC01  F045         	call	_SwTimerSetTimeout
 24752                           
 24753                           ;lorawan_eu.c: 385: SwTimerStart(loRa.joinAccept1TimerId);
 24754  000EBA  0102               	movlb	2	; () banked
 24755  000EBC  51EC               	movf	(_loRa+226)& (0+255),w,b
 24756  000EBE  ECB4  F03A         	call	_SwTimerStart
 24757                           
 24758                           ;lorawan_eu.c: 386: SwTimerStart(loRa.joinAccept2TimerId);
 24759  000EC2  0102               	movlb	2	; () banked
 24760  000EC4  51ED               	movf	(_loRa+227)& (0+255),w,b
 24761  000EC6  ECB4  F03A         	call	_SwTimerStart
 24762                           
 24763                           ;lorawan_eu.c: 388: Channels[i].channelTimer = ((uint32_t)timeOnAir) * (((uint32_t)3029 
      +                          + 1) * ((uint32_t)loRa.prescaler) - 1);
 24764  000ECA  C2E5  F09A         	movff	_loRa+219,___lmul@multiplier
 24765  000ECE  C2E6  F09B         	movff	_loRa+220,___lmul@multiplier+1
 24766  000ED2  0100               	movlb	0	; () banked
 24767  000ED4  6B9C               	clrf	(___lmul@multiplier+2)& (0+255),b
 24768  000ED6  6B9D               	clrf	(___lmul@multiplier+3)& (0+255),b
 24769  000ED8  0ED6               	movlw	214
 24770  000EDA  6F9E               	movwf	___lmul@multiplicand& (0+255),b
 24771  000EDC  0E0B               	movlw	11
 24772  000EDE  6F9F               	movwf	(___lmul@multiplicand+1)& (0+255),b
 24773  000EE0  0E00               	movlw	0
 24774  000EE2  6FA0               	movwf	(___lmul@multiplicand+2)& (0+255),b
 24775  000EE4  0E00               	movlw	0
 24776  000EE6  6FA1               	movwf	(___lmul@multiplicand+3)& (0+255),b
 24777  000EE8  EC4D  F042         	call	___lmul	;wreg free
 24778  000EEC  0EFF               	movlw	255
 24779  000EEE  0100               	movlb	0	; () banked
 24780  000EF0  259A               	addwf	?___lmul& (0+255),w,b
 24781  000EF2  6FD6               	movwf	_LORAWAN_TxDone$5621& (0+255),b
 24782  000EF4  0EFF               	movlw	255
 24783  000EF6  219B               	addwfc	(?___lmul+1)& (0+255),w,b
 24784  000EF8  6FD7               	movwf	(_LORAWAN_TxDone$5621+1)& (0+255),b
 24785  000EFA  0EFF               	movlw	255
 24786  000EFC  219C               	addwfc	(?___lmul+2)& (0+255),w,b
 24787  000EFE  6FD8               	movwf	(_LORAWAN_TxDone$5621+2)& (0+255),b
 24788  000F00  0EFF               	movlw	255
 24789  000F02  219D               	addwfc	(?___lmul+3)& (0+255),w,b
 24790  000F04  6FD9               	movwf	(_LORAWAN_TxDone$5621+3)& (0+255),b
 24791                           
 24792                           ; BSR set to: 0
 24793                           ;lorawan_eu.c: 388: Channels[i].channelTimer = ((uint32_t)timeOnAir) * (((uint32_t)3029 
      +                          + 1) * ((uint32_t)loRa.prescaler) - 1);
 24794  000F06  C0D6  F09A         	movff	_LORAWAN_TxDone$5621,___lmul@multiplier
 24795  000F0A  C0D7  F09B         	movff	_LORAWAN_TxDone$5621+1,___lmul@multiplier+1
 24796  000F0E  C0D8  F09C         	movff	_LORAWAN_TxDone$5621+2,___lmul@multiplier+2
 24797  000F12  C0D9  F09D         	movff	_LORAWAN_TxDone$5621+3,___lmul@multiplier+3
 24798  000F16  C0BB  F09E         	movff	LORAWAN_TxDone@timeOnAir,___lmul@multiplicand
 24799  000F1A  C0BC  F09F         	movff	LORAWAN_TxDone@timeOnAir+1,___lmul@multiplicand+1
 24800  000F1E  6BA0               	clrf	(___lmul@multiplicand+2)& (0+255),b
 24801  000F20  6BA1               	clrf	(___lmul@multiplicand+3)& (0+255),b
 24802  000F22  EC4D  F042         	call	___lmul	;wreg free
 24803  000F26  D0D7               	goto	L15
 24804  000F28                     l1866:
 24805                           
 24806                           ;lorawan_eu.c: 390: else
 24807                           ;lorawan_eu.c: 391: {
 24808                           ;lorawan_eu.c: 392: SwTimerSetTimeout(loRa.receiveWindow1TimerId, ( (((uint32_t)(loRa.pr
      +                          otocolParameters.receiveDelay1 + rxWindowOffset[loRa.receiveWindow1Parameters.dataRate])
      +                          ) << (12)) / 125UL ));
 24809                           
 24810                           ; BSR set to: 0
 24811  000F28  0102               	movlb	2	; () banked
 24812  000F2A  5121               	movf	(_loRa+23)& (0+255),w,b
 24813  000F2C  0D01               	mullw	1
 24814  000F2E  0E6F               	movlw	low _rxWindowOffset
 24815  000F30  24F3               	addwf	prodl,w,c
 24816  000F32  6EF6               	movwf	tblptrl,c
 24817  000F34  0EFF               	movlw	high _rxWindowOffset
 24818  000F36  20F4               	addwfc	prodh,w,c
 24819  000F38  6EF7               	movwf	tblptrh,c
 24820  000F3A                     	if	1	;There are 3 active tblptr bytes
 24821  000F3A  6AF8               	clrf	tblptru,c
 24822  000F3C  0E00               	movlw	low (__mediumconst shr (0+16))
 24823  000F3E  22F8               	addwfc	tblptru,f,c
 24824  000F40                     	endif
 24825  000F40  0008               	tblrd		*
 24826  000F42  CFF5 F0BD          	movff	tablat,??_LORAWAN_TxDone
 24827  000F46  519E               	movf	(_loRa+148)& (0+255),w,b
 24828  000F48  0100               	movlb	0	; () banked
 24829  000F4A  25BD               	addwf	??_LORAWAN_TxDone& (0+255),w,b
 24830  000F4C  6FBE               	movwf	(??_LORAWAN_TxDone+1)& (0+255),b
 24831  000F4E  0E00               	movlw	0
 24832  000F50  BFBD               	btfsc	??_LORAWAN_TxDone& (0+255),7,b
 24833  000F52  0EFF               	movlw	255
 24834  000F54  0102               	movlb	2	; () banked
 24835  000F56  219F               	addwfc	(_loRa+149)& (0+255),w,b
 24836  000F58  0100               	movlb	0	; () banked
 24837  000F5A  6FBF               	movwf	(??_LORAWAN_TxDone+2)& (0+255),b
 24838  000F5C  6BC0               	clrf	(??_LORAWAN_TxDone+3)& (0+255),b
 24839  000F5E  6BC1               	clrf	(??_LORAWAN_TxDone+4)& (0+255),b
 24840  000F60  0E0C               	movlw	12
 24841  000F62                     u12285:
 24842  000F62  90D8               	bcf	status,0,c
 24843  000F64  37BE               	rlcf	(??_LORAWAN_TxDone+1)& (0+255),f,b
 24844  000F66  37BF               	rlcf	(??_LORAWAN_TxDone+2)& (0+255),f,b
 24845  000F68  37C0               	rlcf	(??_LORAWAN_TxDone+3)& (0+255),f,b
 24846  000F6A  37C1               	rlcf	(??_LORAWAN_TxDone+4)& (0+255),f,b
 24847  000F6C  2EE8               	decfsz	wreg,f,c
 24848  000F6E  D7F9               	goto	u12285
 24849  000F70  C0BE  F060         	movff	??_LORAWAN_TxDone+1,___lldiv@dividend
 24850  000F74  C0BF  F061         	movff	??_LORAWAN_TxDone+2,___lldiv@dividend+1
 24851  000F78  C0C0  F062         	movff	??_LORAWAN_TxDone+3,___lldiv@dividend+2
 24852  000F7C  C0C1  F063         	movff	??_LORAWAN_TxDone+4,___lldiv@dividend+3
 24853  000F80  0E7D               	movlw	125
 24854  000F82  6F64               	movwf	___lldiv@divisor& (0+255),b
 24855  000F84  0E00               	movlw	0
 24856  000F86  6F65               	movwf	(___lldiv@divisor+1)& (0+255),b
 24857  000F88  0E00               	movlw	0
 24858  000F8A  6F66               	movwf	(___lldiv@divisor+2)& (0+255),b
 24859  000F8C  0E00               	movlw	0
 24860  000F8E  6F67               	movwf	(___lldiv@divisor+3)& (0+255),b
 24861  000F90  ECE4  F03C         	call	___lldiv	;wreg free
 24862  000F94  C060  F06D         	movff	?___lldiv,SwTimerSetTimeout@timeout
 24863  000F98  C061  F06E         	movff	?___lldiv+1,SwTimerSetTimeout@timeout+1
 24864  000F9C  C062  F06F         	movff	?___lldiv+2,SwTimerSetTimeout@timeout+2
 24865  000FA0  C063  F070         	movff	?___lldiv+3,SwTimerSetTimeout@timeout+3
 24866  000FA4  0102               	movlb	2	; () banked
 24867  000FA6  51EE               	movf	(_loRa+228)& (0+255),w,b
 24868  000FA8  EC01  F045         	call	_SwTimerSetTimeout
 24869                           
 24870                           ;lorawan_eu.c: 393: SwTimerSetTimeout(loRa.receiveWindow2TimerId, ( (((uint32_t)(loRa.pr
      +                          otocolParameters.receiveDelay2 + rxWindowOffset[loRa.receiveWindow2Parameters.dataRate])
      +                          ) << (12)) / 125UL ));
 24871  000FAC  0102               	movlb	2	; () banked
 24872  000FAE  5126               	movf	(_loRa+28)& (0+255),w,b
 24873  000FB0  0D01               	mullw	1
 24874  000FB2  0E6F               	movlw	low _rxWindowOffset
 24875  000FB4  24F3               	addwf	prodl,w,c
 24876  000FB6  6EF6               	movwf	tblptrl,c
 24877  000FB8  0EFF               	movlw	high _rxWindowOffset
 24878  000FBA  20F4               	addwfc	prodh,w,c
 24879  000FBC  6EF7               	movwf	tblptrh,c
 24880  000FBE                     	if	1	;There are 3 active tblptr bytes
 24881  000FBE  6AF8               	clrf	tblptru,c
 24882  000FC0  0E00               	movlw	low (__mediumconst shr (0+16))
 24883  000FC2  22F8               	addwfc	tblptru,f,c
 24884  000FC4                     	endif
 24885  000FC4  0008               	tblrd		*
 24886  000FC6  CFF5 F0BD          	movff	tablat,??_LORAWAN_TxDone
 24887  000FCA  51A0               	movf	(_loRa+150)& (0+255),w,b
 24888  000FCC  0100               	movlb	0	; () banked
 24889  000FCE  25BD               	addwf	??_LORAWAN_TxDone& (0+255),w,b
 24890  000FD0  6FBE               	movwf	(??_LORAWAN_TxDone+1)& (0+255),b
 24891  000FD2  0E00               	movlw	0
 24892  000FD4  BFBD               	btfsc	??_LORAWAN_TxDone& (0+255),7,b
 24893  000FD6  0EFF               	movlw	255
 24894  000FD8  0102               	movlb	2	; () banked
 24895  000FDA  21A1               	addwfc	(_loRa+151)& (0+255),w,b
 24896  000FDC  0100               	movlb	0	; () banked
 24897  000FDE  6FBF               	movwf	(??_LORAWAN_TxDone+2)& (0+255),b
 24898  000FE0  6BC0               	clrf	(??_LORAWAN_TxDone+3)& (0+255),b
 24899  000FE2  6BC1               	clrf	(??_LORAWAN_TxDone+4)& (0+255),b
 24900  000FE4  0E0C               	movlw	12
 24901  000FE6                     u12295:
 24902  000FE6  90D8               	bcf	status,0,c
 24903  000FE8  37BE               	rlcf	(??_LORAWAN_TxDone+1)& (0+255),f,b
 24904  000FEA  37BF               	rlcf	(??_LORAWAN_TxDone+2)& (0+255),f,b
 24905  000FEC  37C0               	rlcf	(??_LORAWAN_TxDone+3)& (0+255),f,b
 24906  000FEE  37C1               	rlcf	(??_LORAWAN_TxDone+4)& (0+255),f,b
 24907  000FF0  2EE8               	decfsz	wreg,f,c
 24908  000FF2  D7F9               	goto	u12295
 24909  000FF4  C0BE  F060         	movff	??_LORAWAN_TxDone+1,___lldiv@dividend
 24910  000FF8  C0BF  F061         	movff	??_LORAWAN_TxDone+2,___lldiv@dividend+1
 24911  000FFC  C0C0  F062         	movff	??_LORAWAN_TxDone+3,___lldiv@dividend+2
 24912  001000  C0C1  F063         	movff	??_LORAWAN_TxDone+4,___lldiv@dividend+3
 24913  001004  0E7D               	movlw	125
 24914  001006  6F64               	movwf	___lldiv@divisor& (0+255),b
 24915  001008  0E00               	movlw	0
 24916  00100A  6F65               	movwf	(___lldiv@divisor+1)& (0+255),b
 24917  00100C  0E00               	movlw	0
 24918  00100E  6F66               	movwf	(___lldiv@divisor+2)& (0+255),b
 24919  001010  0E00               	movlw	0
 24920  001012  6F67               	movwf	(___lldiv@divisor+3)& (0+255),b
 24921  001014  ECE4  F03C         	call	___lldiv	;wreg free
 24922  001018  C060  F06D         	movff	?___lldiv,SwTimerSetTimeout@timeout
 24923  00101C  C061  F06E         	movff	?___lldiv+1,SwTimerSetTimeout@timeout+1
 24924  001020  C062  F06F         	movff	?___lldiv+2,SwTimerSetTimeout@timeout+2
 24925  001024  C063  F070         	movff	?___lldiv+3,SwTimerSetTimeout@timeout+3
 24926  001028  0102               	movlb	2	; () banked
 24927  00102A  51EF               	movf	(_loRa+229)& (0+255),w,b
 24928  00102C  EC01  F045         	call	_SwTimerSetTimeout
 24929                           
 24930                           ;lorawan_eu.c: 394: SwTimerStart(loRa.receiveWindow1TimerId);
 24931  001030  0102               	movlb	2	; () banked
 24932  001032  51EE               	movf	(_loRa+228)& (0+255),w,b
 24933  001034  ECB4  F03A         	call	_SwTimerStart
 24934                           
 24935                           ;lorawan_eu.c: 395: if (CLASS_A == loRa.deviceClass)
 24936  001038  0102               	movlb	2	; () banked
 24937  00103A  511C               	movf	(_loRa+18)& (0+255),w,b
 24938  00103C  A4D8               	btfss	status,2,c
 24939  00103E  D003               	goto	l1868
 24940                           
 24941                           ; BSR set to: 2
 24942                           ;lorawan_eu.c: 396: {
 24943                           ;lorawan_eu.c: 397: SwTimerStart(loRa.receiveWindow2TimerId);
 24944  001040  51EF               	movf	(_loRa+229)& (0+255),w,b
 24945  001042  ECB4  F03A         	call	_SwTimerStart
 24946  001046                     l1868:
 24947                           
 24948                           ;lorawan_eu.c: 398: }
 24949                           ;lorawan_eu.c: 400: Channels[i].channelTimer = ((uint32_t)timeOnAir) * (((uint32_t)Chann
      +                          els[i].dutyCycle + 1) * ((uint32_t)loRa.prescaler) - 1);
 24950  001046  0100               	movlb	0	; () banked
 24951  001048  51E2               	movf	LORAWAN_TxDone@i& (0+255),w,b
 24952  00104A  0D0E               	mullw	14
 24953  00104C  0E06               	movlw	6
 24954  00104E  26F3               	addwf	prodl,f,c
 24955  001050  0E00               	movlw	0
 24956  001052  22F4               	addwfc	prodh,f,c
 24957  001054  0E00               	movlw	low _Channels
 24958  001056  24F3               	addwf	prodl,w,c
 24959  001058  6ED9               	movwf	fsr2l,c
 24960  00105A  0E04               	movlw	high _Channels
 24961  00105C  20F4               	addwfc	prodh,w,c
 24962  00105E  6EDA               	movwf	fsr2h,c
 24963  001060  CFDE F0BD          	movff	postinc2,??_LORAWAN_TxDone
 24964  001064  CFDD F0BE          	movff	postdec2,??_LORAWAN_TxDone+1
 24965  001068  51BD               	movf	??_LORAWAN_TxDone& (0+255),w,b
 24966  00106A  6FBF               	movwf	(??_LORAWAN_TxDone+2)& (0+255),b
 24967  00106C  51BE               	movf	(??_LORAWAN_TxDone+1)& (0+255),w,b
 24968  00106E  6FC0               	movwf	(??_LORAWAN_TxDone+3)& (0+255),b
 24969  001070  6BC1               	clrf	(??_LORAWAN_TxDone+4)& (0+255),b
 24970  001072  6BC2               	clrf	(??_LORAWAN_TxDone+5)& (0+255),b
 24971  001074  0E01               	movlw	1
 24972  001076  25BF               	addwf	(??_LORAWAN_TxDone+2)& (0+255),w,b
 24973  001078  6F9A               	movwf	___lmul@multiplier& (0+255),b
 24974  00107A  0E00               	movlw	0
 24975  00107C  21C0               	addwfc	(??_LORAWAN_TxDone+3)& (0+255),w,b
 24976  00107E  6F9B               	movwf	(___lmul@multiplier+1)& (0+255),b
 24977  001080  0E00               	movlw	0
 24978  001082  21C1               	addwfc	(??_LORAWAN_TxDone+4)& (0+255),w,b
 24979  001084  6F9C               	movwf	(___lmul@multiplier+2)& (0+255),b
 24980  001086  0E00               	movlw	0
 24981  001088  21C2               	addwfc	(??_LORAWAN_TxDone+5)& (0+255),w,b
 24982  00108A  6F9D               	movwf	(___lmul@multiplier+3)& (0+255),b
 24983  00108C  C2E5  F09E         	movff	_loRa+219,___lmul@multiplicand
 24984  001090  C2E6  F09F         	movff	_loRa+220,___lmul@multiplicand+1
 24985  001094  6BA0               	clrf	(___lmul@multiplicand+2)& (0+255),b
 24986  001096  6BA1               	clrf	(___lmul@multiplicand+3)& (0+255),b
 24987  001098  EC4D  F042         	call	___lmul	;wreg free
 24988  00109C  0EFF               	movlw	255
 24989  00109E  0100               	movlb	0	; () banked
 24990  0010A0  259A               	addwf	?___lmul& (0+255),w,b
 24991  0010A2  6FD6               	movwf	_LORAWAN_TxDone$5621& (0+255),b
 24992  0010A4  0EFF               	movlw	255
 24993  0010A6  219B               	addwfc	(?___lmul+1)& (0+255),w,b
 24994  0010A8  6FD7               	movwf	(_LORAWAN_TxDone$5621+1)& (0+255),b
 24995  0010AA  0EFF               	movlw	255
 24996  0010AC  219C               	addwfc	(?___lmul+2)& (0+255),w,b
 24997  0010AE  6FD8               	movwf	(_LORAWAN_TxDone$5621+2)& (0+255),b
 24998  0010B0  0EFF               	movlw	255
 24999  0010B2  219D               	addwfc	(?___lmul+3)& (0+255),w,b
 25000  0010B4  6FD9               	movwf	(_LORAWAN_TxDone$5621+3)& (0+255),b
 25001                           
 25002                           ;lorawan_eu.c: 398: }
 25003                           ;lorawan_eu.c: 400: Channels[i].channelTimer = ((uint32_t)timeOnAir) * (((uint32_t)Chann
      +                          els[i].dutyCycle + 1) * ((uint32_t)loRa.prescaler) - 1);
 25004  0010B6  C0D6  F09A         	movff	_LORAWAN_TxDone$5621,___lmul@multiplier
 25005  0010BA  C0D7  F09B         	movff	_LORAWAN_TxDone$5621+1,___lmul@multiplier+1
 25006  0010BE  C0D8  F09C         	movff	_LORAWAN_TxDone$5621+2,___lmul@multiplier+2
 25007  0010C2  C0D9  F09D         	movff	_LORAWAN_TxDone$5621+3,___lmul@multiplier+3
 25008  0010C6  C0BB  F09E         	movff	LORAWAN_TxDone@timeOnAir,___lmul@multiplicand
 25009  0010CA  C0BC  F09F         	movff	LORAWAN_TxDone@timeOnAir+1,___lmul@multiplicand+1
 25010  0010CE  6BA0               	clrf	(___lmul@multiplicand+2)& (0+255),b
 25011  0010D0  6BA1               	clrf	(___lmul@multiplicand+3)& (0+255),b
 25012  0010D2  EC4D  F042         	call	___lmul	;wreg free
 25013  0010D6                     L15:
 25014  0010D6  0100               	movlb	0	; () banked
 25015  0010D8  51E2               	movf	LORAWAN_TxDone@i& (0+255),w,b
 25016  0010DA  0D0E               	mullw	14
 25017  0010DC  0E08               	movlw	8
 25018  0010DE  26F3               	addwf	prodl,f,c
 25019  0010E0  0E00               	movlw	0
 25020  0010E2  22F4               	addwfc	prodh,f,c
 25021  0010E4  0E00               	movlw	low _Channels
 25022  0010E6  24F3               	addwf	prodl,w,c
 25023  0010E8  6ED9               	movwf	fsr2l,c
 25024  0010EA  0E04               	movlw	high _Channels
 25025  0010EC  20F4               	addwfc	prodh,w,c
 25026  0010EE  6EDA               	movwf	fsr2h,c
 25027  0010F0  C09A  FFDE         	movff	?___lmul,postinc2
 25028  0010F4  C09B  FFDE         	movff	?___lmul+1,postinc2
 25029  0010F8  C09C  FFDE         	movff	?___lmul+2,postinc2
 25030  0010FC  C09D  FFDE         	movff	?___lmul+3,postinc2
 25031                           
 25032                           ; BSR set to: 0
 25033                           ;lorawan_eu.c: 401: }
 25034                           ;lorawan_eu.c: 403: if(SwTimerIsRunning(loRa.dutyCycleTimerId))
 25035  001100  0102               	movlb	2	; () banked
 25036  001102  51F3               	movf	(_loRa+233)& (0+255),w,b
 25037  001104  EC81  F047         	call	_SwTimerIsRunning
 25038  001108  0900               	iorlw	0
 25039  00110A  B4D8               	btfsc	status,2,c
 25040  00110C  D08A               	goto	l1869
 25041                           
 25042                           ;lorawan_eu.c: 404: {
 25043                           ;lorawan_eu.c: 405: SwTimerStop(loRa.dutyCycleTimerId);
 25044  00110E  0102               	movlb	2	; () banked
 25045  001110  51F3               	movf	(_loRa+233)& (0+255),w,b
 25046  001112  ECFB  F047         	call	_SwTimerStop
 25047                           
 25048                           ;lorawan_eu.c: 407: ticks = SwTimerReadValue (loRa.dutyCycleTimerId);
 25049  001116  0102               	movlb	2	; () banked
 25050  001118  51F3               	movf	(_loRa+233)& (0+255),w,b
 25051  00111A  EC86  F045         	call	_SwTimerReadValue
 25052  00111E  C091  F0DA         	movff	?_SwTimerReadValue,LORAWAN_TxDone@ticks
 25053  001122  C092  F0DB         	movff	?_SwTimerReadValue+1,LORAWAN_TxDone@ticks+1
 25054  001126  C093  F0DC         	movff	?_SwTimerReadValue+2,LORAWAN_TxDone@ticks+2
 25055  00112A  C094  F0DD         	movff	?_SwTimerReadValue+3,LORAWAN_TxDone@ticks+3
 25056                           
 25057                           ;lorawan_eu.c: 408: delta = loRa.lastTimerValue - ((ticks) < 0x00DFAC1FUL ? ( (((uint32_
      +                          t)(ticks)) * 125UL) >> (12) ) : ( (((uint32_t)(ticks)) >> (12)) * 125UL ) );
 25058  00112E  0100               	movlb	0	; () banked
 25059  001130  51DD               	movf	(LORAWAN_TxDone@ticks+3)& (0+255),w,b
 25060  001132  E108               	bnz	u12320
 25061  001134  0E1F               	movlw	31
 25062  001136  5DDA               	subwf	LORAWAN_TxDone@ticks& (0+255),w,b
 25063  001138  0EAC               	movlw	172
 25064  00113A  59DB               	subwfb	(LORAWAN_TxDone@ticks+1)& (0+255),w,b
 25065  00113C  0EDF               	movlw	223
 25066  00113E  59DC               	subwfb	(LORAWAN_TxDone@ticks+2)& (0+255),w,b
 25067  001140  A0D8               	btfss	status,0,c
 25068  001142  D024               	goto	l1871
 25069  001144                     u12320:
 25070                           
 25071                           ; BSR set to: 0
 25072  001144  C0DA  F0BD         	movff	LORAWAN_TxDone@ticks,??_LORAWAN_TxDone
 25073  001148  C0DB  F0BE         	movff	LORAWAN_TxDone@ticks+1,??_LORAWAN_TxDone+1
 25074  00114C  C0DC  F0BF         	movff	LORAWAN_TxDone@ticks+2,??_LORAWAN_TxDone+2
 25075  001150  C0DD  F0C0         	movff	LORAWAN_TxDone@ticks+3,??_LORAWAN_TxDone+3
 25076  001154  0E0D               	movlw	13
 25077  001156  D005               	goto	u12330
 25078  001158                     u12335:
 25079  001158  90D8               	bcf	status,0,c
 25080  00115A  33C0               	rrcf	(??_LORAWAN_TxDone+3)& (0+255),f,b
 25081  00115C  33BF               	rrcf	(??_LORAWAN_TxDone+2)& (0+255),f,b
 25082  00115E  33BE               	rrcf	(??_LORAWAN_TxDone+1)& (0+255),f,b
 25083  001160  33BD               	rrcf	??_LORAWAN_TxDone& (0+255),f,b
 25084  001162                     u12330:
 25085  001162  2EE8               	decfsz	wreg,f,c
 25086  001164  D7F9               	goto	u12335
 25087  001166  C0BD  F09A         	movff	??_LORAWAN_TxDone,___lmul@multiplier
 25088  00116A  C0BE  F09B         	movff	??_LORAWAN_TxDone+1,___lmul@multiplier+1
 25089  00116E  C0BF  F09C         	movff	??_LORAWAN_TxDone+2,___lmul@multiplier+2
 25090  001172  C0C0  F09D         	movff	??_LORAWAN_TxDone+3,___lmul@multiplier+3
 25091  001176  0E7D               	movlw	125
 25092  001178  6F9E               	movwf	___lmul@multiplicand& (0+255),b
 25093  00117A  0E00               	movlw	0
 25094  00117C  6F9F               	movwf	(___lmul@multiplicand+1)& (0+255),b
 25095  00117E  0E00               	movlw	0
 25096  001180  6FA0               	movwf	(___lmul@multiplicand+2)& (0+255),b
 25097  001182  0E00               	movlw	0
 25098  001184  6FA1               	movwf	(___lmul@multiplicand+3)& (0+255),b
 25099  001186  EC4D  F042         	call	___lmul	;wreg free
 25100  00118A  D01D               	goto	L16
 25101  00118C                     l1871:
 25102  00118C  C0DA  F09A         	movff	LORAWAN_TxDone@ticks,___lmul@multiplier
 25103  001190  C0DB  F09B         	movff	LORAWAN_TxDone@ticks+1,___lmul@multiplier+1
 25104  001194  C0DC  F09C         	movff	LORAWAN_TxDone@ticks+2,___lmul@multiplier+2
 25105  001198  C0DD  F09D         	movff	LORAWAN_TxDone@ticks+3,___lmul@multiplier+3
 25106  00119C  0E7D               	movlw	125
 25107  00119E  0100               	movlb	0	; () banked
 25108  0011A0  6F9E               	movwf	___lmul@multiplicand& (0+255),b
 25109  0011A2  0E00               	movlw	0
 25110  0011A4  6F9F               	movwf	(___lmul@multiplicand+1)& (0+255),b
 25111  0011A6  0E00               	movlw	0
 25112  0011A8  6FA0               	movwf	(___lmul@multiplicand+2)& (0+255),b
 25113  0011AA  0E00               	movlw	0
 25114  0011AC  6FA1               	movwf	(___lmul@multiplicand+3)& (0+255),b
 25115  0011AE  EC4D  F042         	call	___lmul	;wreg free
 25116  0011B2  0E0D               	movlw	13
 25117  0011B4  D006               	goto	u12340
 25118  0011B6                     u12345:
 25119  0011B6  0100               	movlb	0	; () banked
 25120  0011B8  90D8               	bcf	status,0,c
 25121  0011BA  339D               	rrcf	(?___lmul+3)& (0+255),f,b
 25122  0011BC  339C               	rrcf	(?___lmul+2)& (0+255),f,b
 25123  0011BE  339B               	rrcf	(?___lmul+1)& (0+255),f,b
 25124  0011C0  339A               	rrcf	?___lmul& (0+255),f,b
 25125  0011C2                     u12340:
 25126  0011C2  2EE8               	decfsz	wreg,f,c
 25127  0011C4  D7F8               	goto	u12345
 25128  0011C6                     L16:
 25129  0011C6  C09A  F0C9         	movff	?___lmul,_LORAWAN_TxDone$2660
 25130  0011CA  C09B  F0CA         	movff	?___lmul+1,_LORAWAN_TxDone$2660+1
 25131  0011CE  C09C  F0CB         	movff	?___lmul+2,_LORAWAN_TxDone$2660+2
 25132  0011D2  C09D  F0CC         	movff	?___lmul+3,_LORAWAN_TxDone$2660+3
 25133                           
 25134                           ; BSR set to: 0
 25135  0011D6  C0C9  F0BD         	movff	_LORAWAN_TxDone$2660,??_LORAWAN_TxDone
 25136  0011DA  C0CA  F0BE         	movff	_LORAWAN_TxDone$2660+1,??_LORAWAN_TxDone+1
 25137  0011DE  C0CB  F0BF         	movff	_LORAWAN_TxDone$2660+2,??_LORAWAN_TxDone+2
 25138  0011E2  C0CC  F0C0         	movff	_LORAWAN_TxDone$2660+3,??_LORAWAN_TxDone+3
 25139  0011E6  0100               	movlb	0	; () banked
 25140  0011E8  1FBD               	comf	??_LORAWAN_TxDone& (0+255),f,b
 25141  0011EA  1FBE               	comf	(??_LORAWAN_TxDone+1)& (0+255),f,b
 25142  0011EC  1FBF               	comf	(??_LORAWAN_TxDone+2)& (0+255),f,b
 25143  0011EE  1FC0               	comf	(??_LORAWAN_TxDone+3)& (0+255),f,b
 25144  0011F0  2BBD               	incf	??_LORAWAN_TxDone& (0+255),f,b
 25145  0011F2  0E00               	movlw	0
 25146  0011F4  23BE               	addwfc	(??_LORAWAN_TxDone+1)& (0+255),f,b
 25147  0011F6  23BF               	addwfc	(??_LORAWAN_TxDone+2)& (0+255),f,b
 25148  0011F8  23C0               	addwfc	(??_LORAWAN_TxDone+3)& (0+255),f,b
 25149  0011FA  0102               	movlb	2	; () banked
 25150  0011FC  51D2               	movf	(_loRa+200)& (0+255),w,b
 25151  0011FE  0100               	movlb	0	; () banked
 25152  001200  25BD               	addwf	??_LORAWAN_TxDone& (0+255),w,b
 25153  001202  6FD2               	movwf	LORAWAN_TxDone@delta& (0+255),b
 25154  001204  0102               	movlb	2	; () banked
 25155  001206  51D3               	movf	(_loRa+201)& (0+255),w,b
 25156  001208  0100               	movlb	0	; () banked
 25157  00120A  21BE               	addwfc	(??_LORAWAN_TxDone+1)& (0+255),w,b
 25158  00120C  6FD3               	movwf	(LORAWAN_TxDone@delta+1)& (0+255),b
 25159  00120E  0102               	movlb	2	; () banked
 25160  001210  51D4               	movf	(_loRa+202)& (0+255),w,b
 25161  001212  0100               	movlb	0	; () banked
 25162  001214  21BF               	addwfc	(??_LORAWAN_TxDone+2)& (0+255),w,b
 25163  001216  6FD4               	movwf	(LORAWAN_TxDone@delta+2)& (0+255),b
 25164  001218  0102               	movlb	2	; () banked
 25165  00121A  51D5               	movf	(_loRa+203)& (0+255),w,b
 25166  00121C  0100               	movlb	0	; () banked
 25167  00121E  21C0               	addwfc	(??_LORAWAN_TxDone+3)& (0+255),w,b
 25168  001220  6FD5               	movwf	(LORAWAN_TxDone@delta+3)& (0+255),b
 25169  001222                     l1869:
 25170                           
 25171                           ;lorawan_eu.c: 409: }
 25172                           ;lorawan_eu.c: 411: for (i=0; i < 16; i++)
 25173                           
 25174                           ; BSR set to: 0
 25175  001222  0E00               	movlw	0
 25176  001224  0100               	movlb	0	; () banked
 25177  001226  6FE2               	movwf	LORAWAN_TxDone@i& (0+255),b
 25178  001228                     l11625:
 25179                           
 25180                           ; BSR set to: 0
 25181  001228  0E0F               	movlw	15
 25182  00122A  65E2               	cpfsgt	LORAWAN_TxDone@i& (0+255),b
 25183  00122C  D001               	goto	l1874
 25184  00122E  D0D4               	goto	u12420
 25185  001230                     l1874:
 25186                           
 25187                           ; BSR set to: 0
 25188                           ;lorawan_eu.c: 412: {
 25189                           ;lorawan_eu.c: 413: if ((Channels[i].status == 1) && ( Channels[i].channelTimer != 0 ))
 25190                           
 25191                           ; BSR set to: 0
 25192  001230  51E2               	movf	LORAWAN_TxDone@i& (0+255),w,b
 25193  001232  0D0E               	mullw	14
 25194  001234  0E04               	movlw	4
 25195  001236  26F3               	addwf	prodl,f,c
 25196  001238  0E00               	movlw	0
 25197  00123A  22F4               	addwfc	prodh,f,c
 25198  00123C  0E00               	movlw	low _Channels
 25199  00123E  24F3               	addwf	prodl,w,c
 25200  001240  6ED9               	movwf	fsr2l,c
 25201  001242  0E04               	movlw	high _Channels
 25202  001244  20F4               	addwfc	prodh,w,c
 25203  001246  6EDA               	movwf	fsr2h,c
 25204  001248  04DE               	decf	postinc2,w,c
 25205  00124A  A4D8               	btfss	status,2,c
 25206  00124C  D0C3               	goto	l1880
 25207                           
 25208                           ; BSR set to: 0
 25209  00124E  51E2               	movf	LORAWAN_TxDone@i& (0+255),w,b
 25210  001250  0D0E               	mullw	14
 25211  001252  0E08               	movlw	8
 25212  001254  26F3               	addwf	prodl,f,c
 25213  001256  0E00               	movlw	0
 25214  001258  22F4               	addwfc	prodh,f,c
 25215  00125A  0E00               	movlw	low _Channels
 25216  00125C  24F3               	addwf	prodl,w,c
 25217  00125E  6ED9               	movwf	fsr2l,c
 25218  001260  0E04               	movlw	high _Channels
 25219  001262  20F4               	addwfc	prodh,w,c
 25220  001264  6EDA               	movwf	fsr2h,c
 25221  001266  50DE               	movf	postinc2,w,c
 25222  001268  10DE               	iorwf	postinc2,w,c
 25223  00126A  10DE               	iorwf	postinc2,w,c
 25224  00126C  10DE               	iorwf	postinc2,w,c
 25225  00126E  B4D8               	btfsc	status,2,c
 25226  001270  D0B1               	goto	l1880
 25227                           
 25228                           ; BSR set to: 0
 25229                           ;lorawan_eu.c: 414: {
 25230                           ;lorawan_eu.c: 415: if( i != loRa.lastUsedChannelIndex )
 25231  001272  51E2               	movf	LORAWAN_TxDone@i& (0+255),w,b
 25232  001274  0102               	movlb	2	; () banked
 25233  001276  19E4               	xorwf	(_loRa+218)& (0+255),w,b
 25234  001278  B4D8               	btfsc	status,2,c
 25235  00127A  D06D               	goto	l1879
 25236                           
 25237                           ; BSR set to: 2
 25238                           ;lorawan_eu.c: 416: {
 25239                           ;lorawan_eu.c: 417: if (Channels[i].channelTimer > delta)
 25240  00127C  0100               	movlb	0	; () banked
 25241  00127E  51E2               	movf	LORAWAN_TxDone@i& (0+255),w,b
 25242  001280  0D0E               	mullw	14
 25243  001282  0E08               	movlw	8
 25244  001284  26F3               	addwf	prodl,f,c
 25245  001286  0E00               	movlw	0
 25246  001288  22F4               	addwfc	prodh,f,c
 25247  00128A  0E00               	movlw	low _Channels
 25248  00128C  24F3               	addwf	prodl,w,c
 25249  00128E  6ED9               	movwf	fsr2l,c
 25250  001290  0E04               	movlw	high _Channels
 25251  001292  20F4               	addwfc	prodh,w,c
 25252  001294  6EDA               	movwf	fsr2h,c
 25253  001296  50DE               	movf	postinc2,w,c
 25254  001298  5DD2               	subwf	LORAWAN_TxDone@delta& (0+255),w,b
 25255  00129A  50DE               	movf	postinc2,w,c
 25256  00129C  59D3               	subwfb	(LORAWAN_TxDone@delta+1)& (0+255),w,b
 25257  00129E  50DE               	movf	postinc2,w,c
 25258  0012A0  59D4               	subwfb	(LORAWAN_TxDone@delta+2)& (0+255),w,b
 25259  0012A2  50DE               	movf	postinc2,w,c
 25260  0012A4  59D5               	subwfb	(LORAWAN_TxDone@delta+3)& (0+255),w,b
 25261  0012A6  B0D8               	btfsc	status,0,c
 25262  0012A8  D046               	goto	l1878
 25263                           
 25264                           ; BSR set to: 0
 25265                           ;lorawan_eu.c: 418: {
 25266                           ;lorawan_eu.c: 419: Channels[i].channelTimer = Channels[i].channelTimer - delta;
 25267  0012AA  51E2               	movf	LORAWAN_TxDone@i& (0+255),w,b
 25268  0012AC  0D0E               	mullw	14
 25269  0012AE  0E08               	movlw	8
 25270  0012B0  26F3               	addwf	prodl,f,c
 25271  0012B2  0E00               	movlw	0
 25272  0012B4  22F4               	addwfc	prodh,f,c
 25273  0012B6  0E00               	movlw	low _Channels
 25274  0012B8  24F3               	addwf	prodl,w,c
 25275  0012BA  6ED9               	movwf	fsr2l,c
 25276  0012BC  0E04               	movlw	high _Channels
 25277  0012BE  20F4               	addwfc	prodh,w,c
 25278  0012C0  6EDA               	movwf	fsr2h,c
 25279  0012C2  CFDE F0BD          	movff	postinc2,??_LORAWAN_TxDone
 25280  0012C6  CFDE F0BE          	movff	postinc2,??_LORAWAN_TxDone+1
 25281  0012CA  CFDE F0BF          	movff	postinc2,??_LORAWAN_TxDone+2
 25282  0012CE  CFDE F0C0          	movff	postinc2,??_LORAWAN_TxDone+3
 25283  0012D2  C0D2  F0C1         	movff	LORAWAN_TxDone@delta,??_LORAWAN_TxDone+4
 25284  0012D6  C0D3  F0C2         	movff	LORAWAN_TxDone@delta+1,??_LORAWAN_TxDone+5
 25285  0012DA  C0D4  F0C3         	movff	LORAWAN_TxDone@delta+2,??_LORAWAN_TxDone+6
 25286  0012DE  C0D5  F0C4         	movff	LORAWAN_TxDone@delta+3,??_LORAWAN_TxDone+7
 25287  0012E2  1FC1               	comf	(??_LORAWAN_TxDone+4)& (0+255),f,b
 25288  0012E4  1FC2               	comf	(??_LORAWAN_TxDone+5)& (0+255),f,b
 25289  0012E6  1FC3               	comf	(??_LORAWAN_TxDone+6)& (0+255),f,b
 25290  0012E8  1FC4               	comf	(??_LORAWAN_TxDone+7)& (0+255),f,b
 25291  0012EA  2BC1               	incf	(??_LORAWAN_TxDone+4)& (0+255),f,b
 25292  0012EC  0E00               	movlw	0
 25293  0012EE  23C2               	addwfc	(??_LORAWAN_TxDone+5)& (0+255),f,b
 25294  0012F0  23C3               	addwfc	(??_LORAWAN_TxDone+6)& (0+255),f,b
 25295  0012F2  23C4               	addwfc	(??_LORAWAN_TxDone+7)& (0+255),f,b
 25296  0012F4  51BD               	movf	??_LORAWAN_TxDone& (0+255),w,b
 25297  0012F6  25C1               	addwf	(??_LORAWAN_TxDone+4)& (0+255),w,b
 25298  0012F8  6FC5               	movwf	(??_LORAWAN_TxDone+8)& (0+255),b
 25299  0012FA  51BE               	movf	(??_LORAWAN_TxDone+1)& (0+255),w,b
 25300  0012FC  21C2               	addwfc	(??_LORAWAN_TxDone+5)& (0+255),w,b
 25301  0012FE  6FC6               	movwf	(??_LORAWAN_TxDone+9)& (0+255),b
 25302  001300  51BF               	movf	(??_LORAWAN_TxDone+2)& (0+255),w,b
 25303  001302  21C3               	addwfc	(??_LORAWAN_TxDone+6)& (0+255),w,b
 25304  001304  6FC7               	movwf	(??_LORAWAN_TxDone+10)& (0+255),b
 25305  001306  51C0               	movf	(??_LORAWAN_TxDone+3)& (0+255),w,b
 25306  001308  21C4               	addwfc	(??_LORAWAN_TxDone+7)& (0+255),w,b
 25307  00130A  6FC8               	movwf	(??_LORAWAN_TxDone+11)& (0+255),b
 25308  00130C  51E2               	movf	LORAWAN_TxDone@i& (0+255),w,b
 25309  00130E  0D0E               	mullw	14
 25310  001310  0E08               	movlw	8
 25311  001312  26F3               	addwf	prodl,f,c
 25312  001314  0E00               	movlw	0
 25313  001316  22F4               	addwfc	prodh,f,c
 25314  001318  0E00               	movlw	low _Channels
 25315  00131A  24F3               	addwf	prodl,w,c
 25316  00131C  6ED9               	movwf	fsr2l,c
 25317  00131E  0E04               	movlw	high _Channels
 25318  001320  20F4               	addwfc	prodh,w,c
 25319  001322  6EDA               	movwf	fsr2h,c
 25320  001324  C0C5  FFDE         	movff	??_LORAWAN_TxDone+8,postinc2
 25321  001328  C0C6  FFDE         	movff	??_LORAWAN_TxDone+9,postinc2
 25322  00132C  C0C7  FFDE         	movff	??_LORAWAN_TxDone+10,postinc2
 25323  001330  C0C8  FFDE         	movff	??_LORAWAN_TxDone+11,postinc2
 25324                           
 25325                           ;lorawan_eu.c: 420: }
 25326  001334  D010               	goto	l1879
 25327  001336                     l1878:
 25328                           
 25329                           ; BSR set to: 0
 25330                           ;lorawan_eu.c: 421: else
 25331                           ;lorawan_eu.c: 422: {
 25332                           ;lorawan_eu.c: 423: Channels[i].channelTimer = 0;
 25333                           
 25334                           ; BSR set to: 0
 25335  001336  51E2               	movf	LORAWAN_TxDone@i& (0+255),w,b
 25336  001338  0D0E               	mullw	14
 25337  00133A  0E08               	movlw	8
 25338  00133C  26F3               	addwf	prodl,f,c
 25339  00133E  0E00               	movlw	0
 25340  001340  22F4               	addwfc	prodh,f,c
 25341  001342  0E00               	movlw	low _Channels
 25342  001344  24F3               	addwf	prodl,w,c
 25343  001346  6ED9               	movwf	fsr2l,c
 25344  001348  0E04               	movlw	high _Channels
 25345  00134A  20F4               	addwfc	prodh,w,c
 25346  00134C  6EDA               	movwf	fsr2h,c
 25347  00134E  6ADE               	clrf	postinc2,c
 25348  001350  6ADE               	clrf	postinc2,c
 25349  001352  6ADE               	clrf	postinc2,c
 25350  001354  6ADD               	clrf	postdec2,c
 25351  001356                     l1879:
 25352                           
 25353                           ;lorawan_eu.c: 424: }
 25354                           ;lorawan_eu.c: 425: }
 25355                           ;lorawan_eu.c: 426: if ( (Channels[i].channelTimer <= minim) && (Channels[i].channelTime
      +                          r !=0) )
 25356                           
 25357                           ; BSR set to: 0
 25358  001356  0100               	movlb	0	; () banked
 25359  001358  51E2               	movf	LORAWAN_TxDone@i& (0+255),w,b
 25360  00135A  0D0E               	mullw	14
 25361  00135C  0E08               	movlw	8
 25362  00135E  26F3               	addwf	prodl,f,c
 25363  001360  0E00               	movlw	0
 25364  001362  22F4               	addwfc	prodh,f,c
 25365  001364  0E00               	movlw	low _Channels
 25366  001366  24F3               	addwf	prodl,w,c
 25367  001368  6ED9               	movwf	fsr2l,c
 25368  00136A  0E04               	movlw	high _Channels
 25369  00136C  20F4               	addwfc	prodh,w,c
 25370  00136E  6EDA               	movwf	fsr2h,c
 25371  001370  50DE               	movf	postinc2,w,c
 25372  001372  5DDE               	subwf	LORAWAN_TxDone@minim& (0+255),w,b
 25373  001374  50DE               	movf	postinc2,w,c
 25374  001376  59DF               	subwfb	(LORAWAN_TxDone@minim+1)& (0+255),w,b
 25375  001378  50DE               	movf	postinc2,w,c
 25376  00137A  59E0               	subwfb	(LORAWAN_TxDone@minim+2)& (0+255),w,b
 25377  00137C  50DE               	movf	postinc2,w,c
 25378  00137E  59E1               	subwfb	(LORAWAN_TxDone@minim+3)& (0+255),w,b
 25379  001380  A0D8               	btfss	status,0,c
 25380  001382  D028               	goto	l1880
 25381                           
 25382                           ; BSR set to: 0
 25383  001384  51E2               	movf	LORAWAN_TxDone@i& (0+255),w,b
 25384  001386  0D0E               	mullw	14
 25385  001388  0E08               	movlw	8
 25386  00138A  26F3               	addwf	prodl,f,c
 25387  00138C  0E00               	movlw	0
 25388  00138E  22F4               	addwfc	prodh,f,c
 25389  001390  0E00               	movlw	low _Channels
 25390  001392  24F3               	addwf	prodl,w,c
 25391  001394  6ED9               	movwf	fsr2l,c
 25392  001396  0E04               	movlw	high _Channels
 25393  001398  20F4               	addwfc	prodh,w,c
 25394  00139A  6EDA               	movwf	fsr2h,c
 25395  00139C  50DE               	movf	postinc2,w,c
 25396  00139E  10DE               	iorwf	postinc2,w,c
 25397  0013A0  10DE               	iorwf	postinc2,w,c
 25398  0013A2  10DE               	iorwf	postinc2,w,c
 25399  0013A4  B4D8               	btfsc	status,2,c
 25400  0013A6  D016               	goto	l1880
 25401                           
 25402                           ; BSR set to: 0
 25403                           ;lorawan_eu.c: 427: {
 25404                           ;lorawan_eu.c: 428: minim = Channels[i].channelTimer;
 25405  0013A8  51E2               	movf	LORAWAN_TxDone@i& (0+255),w,b
 25406  0013AA  0D0E               	mullw	14
 25407  0013AC  0E08               	movlw	8
 25408  0013AE  26F3               	addwf	prodl,f,c
 25409  0013B0  0E00               	movlw	0
 25410  0013B2  22F4               	addwfc	prodh,f,c
 25411  0013B4  0E00               	movlw	low _Channels
 25412  0013B6  24F3               	addwf	prodl,w,c
 25413  0013B8  6ED9               	movwf	fsr2l,c
 25414  0013BA  0E04               	movlw	high _Channels
 25415  0013BC  20F4               	addwfc	prodh,w,c
 25416  0013BE  6EDA               	movwf	fsr2h,c
 25417  0013C0  CFDE F0DE          	movff	postinc2,LORAWAN_TxDone@minim
 25418  0013C4  CFDE F0DF          	movff	postinc2,LORAWAN_TxDone@minim+1
 25419  0013C8  CFDE F0E0          	movff	postinc2,LORAWAN_TxDone@minim+2
 25420  0013CC  CFDE F0E1          	movff	postinc2,LORAWAN_TxDone@minim+3
 25421                           
 25422                           ; BSR set to: 0
 25423                           ;lorawan_eu.c: 429: found = 1;
 25424  0013D0  0E01               	movlw	1
 25425  0013D2  6FD1               	movwf	LORAWAN_TxDone@found& (0+255),b
 25426  0013D4                     l1880:
 25427                           
 25428                           ; BSR set to: 0
 25429                           
 25430                           ; BSR set to: 0
 25431                           
 25432                           ; BSR set to: 0
 25433  0013D4  2BE2               	incf	LORAWAN_TxDone@i& (0+255),f,b
 25434  0013D6  D728               	goto	l11625
 25435  0013D8                     u12420:
 25436                           
 25437                           ; BSR set to: 0
 25438                           ;lorawan_eu.c: 430: }
 25439                           ;lorawan_eu.c: 431: }
 25440                           ;lorawan_eu.c: 432: }
 25441                           ;lorawan_eu.c: 433: if (found == 1)
 25442                           
 25443                           ; BSR set to: 0
 25444  0013D8  05D1               	decf	LORAWAN_TxDone@found& (0+255),w,b
 25445  0013DA  A4D8               	btfss	status,2,c
 25446  0013DC  D067               	goto	l1881
 25447                           
 25448                           ; BSR set to: 0
 25449                           ;lorawan_eu.c: 434: {
 25450                           ;lorawan_eu.c: 435: loRa.lastTimerValue = minim;
 25451  0013DE  C0DE  F2D2         	movff	LORAWAN_TxDone@minim,_loRa+200
 25452  0013E2  C0DF  F2D3         	movff	LORAWAN_TxDone@minim+1,_loRa+201
 25453  0013E6  C0E0  F2D4         	movff	LORAWAN_TxDone@minim+2,_loRa+202
 25454  0013EA  C0E1  F2D5         	movff	LORAWAN_TxDone@minim+3,_loRa+203
 25455                           
 25456                           ; BSR set to: 0
 25457                           ;lorawan_eu.c: 436: SwTimerSetTimeout (loRa.dutyCycleTimerId, ((minim) < 0x000FFFFFUL ? 
      +                          ( (((uint32_t)(minim)) << (12)) / 125UL ) : ( (((uint32_t)(minim)) / 125UL) << (12) ) ))
      +                          ;
 25458  0013EE  51E1               	movf	(LORAWAN_TxDone@minim+3)& (0+255),w,b
 25459  0013F0  E107               	bnz	u12440
 25460  0013F2  29DE               	incf	LORAWAN_TxDone@minim& (0+255),w,b
 25461  0013F4  0EFF               	movlw	255
 25462  0013F6  59DF               	subwfb	(LORAWAN_TxDone@minim+1)& (0+255),w,b
 25463  0013F8  0E0F               	movlw	15
 25464  0013FA  59E0               	subwfb	(LORAWAN_TxDone@minim+2)& (0+255),w,b
 25465  0013FC  A0D8               	btfss	status,0,c
 25466  0013FE  D01C               	goto	l1883
 25467  001400                     u12440:
 25468                           
 25469                           ; BSR set to: 0
 25470  001400  C0DE  F060         	movff	LORAWAN_TxDone@minim,___lldiv@dividend
 25471  001404  C0DF  F061         	movff	LORAWAN_TxDone@minim+1,___lldiv@dividend+1
 25472  001408  C0E0  F062         	movff	LORAWAN_TxDone@minim+2,___lldiv@dividend+2
 25473  00140C  C0E1  F063         	movff	LORAWAN_TxDone@minim+3,___lldiv@dividend+3
 25474  001410  0E7D               	movlw	125
 25475  001412  6F64               	movwf	___lldiv@divisor& (0+255),b
 25476  001414  0E00               	movlw	0
 25477  001416  6F65               	movwf	(___lldiv@divisor+1)& (0+255),b
 25478  001418  0E00               	movlw	0
 25479  00141A  6F66               	movwf	(___lldiv@divisor+2)& (0+255),b
 25480  00141C  0E00               	movlw	0
 25481  00141E  6F67               	movwf	(___lldiv@divisor+3)& (0+255),b
 25482  001420  ECE4  F03C         	call	___lldiv	;wreg free
 25483  001424  0E0C               	movlw	12
 25484  001426                     u12455:
 25485  001426  90D8               	bcf	status,0,c
 25486  001428  0100               	movlb	0	; () banked
 25487  00142A  3760               	rlcf	?___lldiv& (0+255),f,b
 25488  00142C  3761               	rlcf	(?___lldiv+1)& (0+255),f,b
 25489  00142E  3762               	rlcf	(?___lldiv+2)& (0+255),f,b
 25490  001430  3763               	rlcf	(?___lldiv+3)& (0+255),f,b
 25491  001432  2EE8               	decfsz	wreg,f,c
 25492  001434  D7F8               	goto	u12455
 25493  001436  D022               	goto	L17
 25494  001438                     l1883:
 25495                           
 25496                           ; BSR set to: 0
 25497                           
 25498                           ; BSR set to: 0
 25499  001438  C0DE  F0BD         	movff	LORAWAN_TxDone@minim,??_LORAWAN_TxDone
 25500  00143C  C0DF  F0BE         	movff	LORAWAN_TxDone@minim+1,??_LORAWAN_TxDone+1
 25501  001440  C0E0  F0BF         	movff	LORAWAN_TxDone@minim+2,??_LORAWAN_TxDone+2
 25502  001444  C0E1  F0C0         	movff	LORAWAN_TxDone@minim+3,??_LORAWAN_TxDone+3
 25503  001448  0E0C               	movlw	12
 25504  00144A                     u12465:
 25505  00144A  90D8               	bcf	status,0,c
 25506  00144C  37BD               	rlcf	??_LORAWAN_TxDone& (0+255),f,b
 25507  00144E  37BE               	rlcf	(??_LORAWAN_TxDone+1)& (0+255),f,b
 25508  001450  37BF               	rlcf	(??_LORAWAN_TxDone+2)& (0+255),f,b
 25509  001452  37C0               	rlcf	(??_LORAWAN_TxDone+3)& (0+255),f,b
 25510  001454  2EE8               	decfsz	wreg,f,c
 25511  001456  D7F9               	goto	u12465
 25512  001458  C0BD  F060         	movff	??_LORAWAN_TxDone,___lldiv@dividend
 25513  00145C  C0BE  F061         	movff	??_LORAWAN_TxDone+1,___lldiv@dividend+1
 25514  001460  C0BF  F062         	movff	??_LORAWAN_TxDone+2,___lldiv@dividend+2
 25515  001464  C0C0  F063         	movff	??_LORAWAN_TxDone+3,___lldiv@dividend+3
 25516  001468  0E7D               	movlw	125
 25517  00146A  6F64               	movwf	___lldiv@divisor& (0+255),b
 25518  00146C  0E00               	movlw	0
 25519  00146E  6F65               	movwf	(___lldiv@divisor+1)& (0+255),b
 25520  001470  0E00               	movlw	0
 25521  001472  6F66               	movwf	(___lldiv@divisor+2)& (0+255),b
 25522  001474  0E00               	movlw	0
 25523  001476  6F67               	movwf	(___lldiv@divisor+3)& (0+255),b
 25524  001478  ECE4  F03C         	call	___lldiv	;wreg free
 25525  00147C                     L17:
 25526  00147C  C060  F0CD         	movff	?___lldiv,_LORAWAN_TxDone$2661
 25527  001480  C061  F0CE         	movff	?___lldiv+1,_LORAWAN_TxDone$2661+1
 25528  001484  C062  F0CF         	movff	?___lldiv+2,_LORAWAN_TxDone$2661+2
 25529  001488  C063  F0D0         	movff	?___lldiv+3,_LORAWAN_TxDone$2661+3
 25530  00148C  C0CD  F06D         	movff	_LORAWAN_TxDone$2661,SwTimerSetTimeout@timeout
 25531  001490  C0CE  F06E         	movff	_LORAWAN_TxDone$2661+1,SwTimerSetTimeout@timeout+1
 25532  001494  C0CF  F06F         	movff	_LORAWAN_TxDone$2661+2,SwTimerSetTimeout@timeout+2
 25533  001498  C0D0  F070         	movff	_LORAWAN_TxDone$2661+3,SwTimerSetTimeout@timeout+3
 25534  00149C  0102               	movlb	2	; () banked
 25535  00149E  51F3               	movf	(_loRa+233)& (0+255),w,b
 25536  0014A0  EC01  F045         	call	_SwTimerSetTimeout
 25537                           
 25538                           ;lorawan_eu.c: 437: SwTimerStart (loRa.dutyCycleTimerId);
 25539  0014A4  0102               	movlb	2	; () banked
 25540  0014A6  51F3               	movf	(_loRa+233)& (0+255),w,b
 25541  0014A8  ECB4  F03A         	call	_SwTimerStart
 25542  0014AC                     l1881:
 25543                           
 25544                           ;lorawan_eu.c: 438: }
 25545                           ;lorawan_eu.c: 439: if (CLASS_C == loRa.deviceClass)
 25546  0014AC  0E02               	movlw	2
 25547  0014AE  0102               	movlb	2	; () banked
 25548  0014B0  191C               	xorwf	(_loRa+18)& (0+255),w,b
 25549  0014B2  A4D8               	btfss	status,2,c
 25550  0014B4  0012               	return	
 25551                           
 25552                           ; BSR set to: 2
 25553                           ;lorawan_eu.c: 440: {
 25554                           ;lorawan_eu.c: 441: loRa.macStatus.macState = CLASS_C_RX2_1_OPEN;
 25555  0014B6  510C               	movf	(_loRa+2)& (0+255),w,b
 25556  0014B8  0BF0               	andlw	-16
 25557  0014BA  0908               	iorlw	8
 25558  0014BC  6F0C               	movwf	(_loRa+2)& (0+255),b
 25559                           
 25560                           ; BSR set to: 2
 25561                           ;lorawan_eu.c: 442: LORAWAN_EnterContinuousReceive();
 25562  0014BE  ECE6  F03D         	call	_LORAWAN_EnterContinuousReceive	;wreg free
 25563                           
 25564                           ;lorawan_eu.c: 443: }
 25565                           ;lorawan_eu.c: 444: }
 25566  0014C2  0012               	return	
 25567  0014C4                     l1865:
 25568                           
 25569                           ;lorawan_eu.c: 445: else
 25570                           ;lorawan_eu.c: 446: {
 25571                           ;lorawan_eu.c: 447: if ((RADIO_GetStatus() & (1 << (4))) != 0)
 25572  0014C4  ECAD  F04A         	call	_RADIO_GetStatus	;wreg free
 25573  0014C8  0100               	movlb	0	; () banked
 25574  0014CA  6FBD               	movwf	??_LORAWAN_TxDone& (0+255),b
 25575  0014CC  A9BD               	btfss	??_LORAWAN_TxDone& (0+255),4,b
 25576  0014CE  D014               	goto	l1888
 25577                           
 25578                           ; BSR set to: 0
 25579                           ;lorawan_eu.c: 448: {
 25580                           ;lorawan_eu.c: 450: rxPayload.RxAppData( (0), 0, RADIO_NOT_OK );
 25581  0014D0  0E00               	movlw	0
 25582  0014D2  6F60               	movwf	RxData@pData& (0+255),b
 25583  0014D4  0E00               	movlw	0
 25584  0014D6  6F61               	movwf	(RxData@pData+1)& (0+255),b
 25585  0014D8  0E00               	movlw	0
 25586  0014DA  6F62               	movwf	RxData@dataLength& (0+255),b
 25587  0014DC  0E02               	movlw	2
 25588  0014DE  6F63               	movwf	RxData@status& (0+255),b
 25589  0014E0  D801               	call	u12498
 25590  0014E2  0012               	return	
 25591  0014E4                     u12498:
 25592  0014E4  0005               	push	
 25593  0014E6  6EFA               	movwf	pclath,c
 25594  0014E8  0101               	movlb	1	; () banked
 25595  0014EA  510C               	movf	_rxPayload& (0+255),w,b
 25596  0014EC  6EFD               	movwf	tosl,c
 25597  0014EE  510D               	movf	(_rxPayload+1)& (0+255),w,b
 25598  0014F0  6EFE               	movwf	tosh,c
 25599  0014F2  6AFF               	clrf	tosu,c
 25600  0014F4  50FA               	movf	pclath,w,c
 25601  0014F6  0012               	return		;indir
 25602  0014F8                     l1888:
 25603                           
 25604                           ;lorawan_eu.c: 452: else
 25605                           ;lorawan_eu.c: 453: {
 25606                           ;lorawan_eu.c: 455: if ( rxPayload.RxAppData != (0) )
 25607  0014F8  0101               	movlb	1	; () banked
 25608  0014FA  510C               	movf	_rxPayload& (0+255),w,b
 25609  0014FC  110D               	iorwf	(_rxPayload+1)& (0+255),w,b
 25610  0014FE  B4D8               	btfsc	status,2,c
 25611  001500  0012               	return	
 25612                           
 25613                           ; BSR set to: 1
 25614                           ;lorawan_eu.c: 456: {
 25615                           ;lorawan_eu.c: 457: rxPayload.RxAppData( (0), 0, RADIO_OK );
 25616  001502  0E00               	movlw	0
 25617  001504  0100               	movlb	0	; () banked
 25618  001506  6F60               	movwf	RxData@pData& (0+255),b
 25619  001508  0E00               	movlw	0
 25620  00150A  6F61               	movwf	(RxData@pData+1)& (0+255),b
 25621  00150C  0E00               	movlw	0
 25622  00150E  6F62               	movwf	RxData@dataLength& (0+255),b
 25623  001510  0E03               	movlw	3
 25624  001512  6F63               	movwf	RxData@status& (0+255),b
 25625  001514  D801               	call	u12518
 25626  001516  0012               	return	
 25627  001518                     u12518:
 25628  001518  0005               	push	
 25629  00151A  6EFA               	movwf	pclath,c
 25630  00151C  0101               	movlb	1	; () banked
 25631  00151E  510C               	movf	_rxPayload& (0+255),w,b
 25632  001520  6EFD               	movwf	tosl,c
 25633  001522  510D               	movf	(_rxPayload+1)& (0+255),w,b
 25634  001524  6EFE               	movwf	tosh,c
 25635  001526  6AFF               	clrf	tosu,c
 25636  001528  50FA               	movf	pclath,w,c
 25637  00152A  0012               	return		;indir
 25638  00152C                     __end_of_LORAWAN_TxDone:
 25639                           	opt stack 0
 25640                           tosu	equ	0xFFF
 25641                           tosh	equ	0xFFE
 25642                           tosl	equ	0xFFD
 25643                           pclath	equ	0xFFA
 25644                           tblptru	equ	0xFF8
 25645                           tblptrh	equ	0xFF7
 25646                           tblptrl	equ	0xFF6
 25647                           tablat	equ	0xFF5
 25648                           prodh	equ	0xFF4
 25649                           prodl	equ	0xFF3
 25650                           intcon	equ	0xFF2
 25651                           intcon2	equ	0xFF1
 25652                           intcon3	equ	0xFF0
 25653                           indf0	equ	0xFEF
 25654                           postinc0	equ	0xFEE
 25655                           fsr0h	equ	0xFEA
 25656                           fsr0l	equ	0xFE9
 25657                           wreg	equ	0xFE8
 25658                           postinc1	equ	0xFE6
 25659                           postdec1	equ	0xFE5
 25660                           plusw1	equ	0xFE3
 25661                           fsr1h	equ	0xFE2
 25662                           fsr1l	equ	0xFE1
 25663                           indf2	equ	0xFDF
 25664                           postinc2	equ	0xFDE
 25665                           postdec2	equ	0xFDD
 25666                           plusw2	equ	0xFDB
 25667                           fsr2h	equ	0xFDA
 25668                           fsr2l	equ	0xFD9
 25669                           status	equ	0xFD8
 25670                           
 25671 ;; *************** function _SwTimerReadValue *****************
 25672 ;; Defined at:
 25673 ;;		line 193 in file "mcc_generated_files/LoRaWAN/sw_timer.c"
 25674 ;; Parameters:    Size  Location     Type
 25675 ;;  timerId         1    wreg     unsigned char 
 25676 ;; Auto vars:     Size  Location     Type
 25677 ;;  timerId         1   57[BANK0 ] unsigned char 
 25678 ;;  ticksCount      4   53[BANK0 ] unsigned long 
 25679 ;; Return value:  Size  Location     Type
 25680 ;;                  4   49[BANK0 ] unsigned long 
 25681 ;; Registers used:
 25682 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 25683 ;; Tracked objects:
 25684 ;;		On entry : 0/0
 25685 ;;		On exit  : 0/0
 25686 ;;		Unchanged: 0/0
 25687 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25688 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25689 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25690 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25691 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25692 ;;Total ram usage:        9 bytes
 25693 ;; Hardware stack levels used:    1
 25694 ;; Hardware stack levels required when called:   10
 25695 ;; This function calls:
 25696 ;;		_SwTimersInterrupt
 25697 ;; This function is called by:
 25698 ;;		_RADIO_TxDone
 25699 ;;		_RADIO_FSKPacketSent
 25700 ;;		_LORAWAN_TxDone
 25701 ;;		_LORAWAN_Pause
 25702 ;; This function uses a non-reentrant model
 25703 ;;
 25704                           
 25705                           	psect	text115
 25706  008B0C                     __ptext115:
 25707                           	opt stack 0
 25708  008B0C                     _SwTimerReadValue:
 25709                           	opt stack 16
 25710                           
 25711                           ;incstack = 0
 25712                           ;SwTimerReadValue@timerId stored from wreg
 25713  008B0C  0100               	movlb	0	; () banked
 25714  008B0E  6F99               	movwf	SwTimerReadValue@timerId& (0+255),b
 25715                           
 25716                           ;sw_timer.c: 195: uint32_t ticksCount;
 25717                           ;sw_timer.c: 197: (INTCONbits.GIE = 0);
 25718  008B10  9EF2               	bcf	intcon,7,c	;volatile
 25719                           
 25720                           ;sw_timer.c: 200: SwTimersInterrupt();
 25721  008B12  ECD7  F030         	call	_SwTimersInterrupt	;wreg free
 25722                           
 25723                           ;sw_timer.c: 201: ticksCount = swTimers[timerId].ticksRemaining;
 25724  008B16  0100               	movlb	0	; () banked
 25725  008B18  5199               	movf	SwTimerReadValue@timerId& (0+255),w,b
 25726  008B1A  0D08               	mullw	8
 25727  008B1C  0E00               	movlw	low _swTimers
 25728  008B1E  24F3               	addwf	prodl,w,c
 25729  008B20  6ED9               	movwf	fsr2l,c
 25730  008B22  0E03               	movlw	high _swTimers
 25731  008B24  20F4               	addwfc	prodh,w,c
 25732  008B26  6EDA               	movwf	fsr2h,c
 25733  008B28  CFDE F095          	movff	postinc2,SwTimerReadValue@ticksCount
 25734  008B2C  CFDE F096          	movff	postinc2,SwTimerReadValue@ticksCount+1
 25735  008B30  CFDE F097          	movff	postinc2,SwTimerReadValue@ticksCount+2
 25736  008B34  CFDE F098          	movff	postinc2,SwTimerReadValue@ticksCount+3
 25737                           
 25738                           ; BSR set to: 0
 25739                           ;sw_timer.c: 202: (INTCONbits.GIE = 1);
 25740  008B38  8EF2               	bsf	intcon,7,c	;volatile
 25741                           
 25742                           ; BSR set to: 0
 25743                           ;sw_timer.c: 204: return ticksCount;
 25744  008B3A  C095  F091         	movff	SwTimerReadValue@ticksCount,?_SwTimerReadValue
 25745  008B3E  C096  F092         	movff	SwTimerReadValue@ticksCount+1,?_SwTimerReadValue+1
 25746  008B42  C097  F093         	movff	SwTimerReadValue@ticksCount+2,?_SwTimerReadValue+2
 25747  008B46  C098  F094         	movff	SwTimerReadValue@ticksCount+3,?_SwTimerReadValue+3
 25748  008B4A  0012               	return	
 25749  008B4C                     __end_of_SwTimerReadValue:
 25750                           	opt stack 0
 25751                           tosu	equ	0xFFF
 25752                           tosh	equ	0xFFE
 25753                           tosl	equ	0xFFD
 25754                           pclath	equ	0xFFA
 25755                           tblptru	equ	0xFF8
 25756                           tblptrh	equ	0xFF7
 25757                           tblptrl	equ	0xFF6
 25758                           tablat	equ	0xFF5
 25759                           prodh	equ	0xFF4
 25760                           prodl	equ	0xFF3
 25761                           intcon	equ	0xFF2
 25762                           intcon2	equ	0xFF1
 25763                           intcon3	equ	0xFF0
 25764                           indf0	equ	0xFEF
 25765                           postinc0	equ	0xFEE
 25766                           fsr0h	equ	0xFEA
 25767                           fsr0l	equ	0xFE9
 25768                           wreg	equ	0xFE8
 25769                           postinc1	equ	0xFE6
 25770                           postdec1	equ	0xFE5
 25771                           plusw1	equ	0xFE3
 25772                           fsr1h	equ	0xFE2
 25773                           fsr1l	equ	0xFE1
 25774                           indf2	equ	0xFDF
 25775                           postinc2	equ	0xFDE
 25776                           postdec2	equ	0xFDD
 25777                           plusw2	equ	0xFDB
 25778                           fsr2h	equ	0xFDA
 25779                           fsr2l	equ	0xFD9
 25780                           status	equ	0xFD8
 25781                           
 25782 ;; *************** function _SwTimerIsRunning *****************
 25783 ;; Defined at:
 25784 ;;		line 207 in file "mcc_generated_files/LoRaWAN/sw_timer.c"
 25785 ;; Parameters:    Size  Location     Type
 25786 ;;  timerId         1    wreg     unsigned char 
 25787 ;; Auto vars:     Size  Location     Type
 25788 ;;  timerId         1    0[BANK0 ] unsigned char 
 25789 ;;  isRunning       1    1[BANK0 ] unsigned char 
 25790 ;; Return value:  Size  Location     Type
 25791 ;;                  1    wreg      unsigned char 
 25792 ;; Registers used:
 25793 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 25794 ;; Tracked objects:
 25795 ;;		On entry : 0/0
 25796 ;;		On exit  : 0/0
 25797 ;;		Unchanged: 0/0
 25798 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25799 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25800 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25801 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25802 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25803 ;;Total ram usage:        2 bytes
 25804 ;; Hardware stack levels used:    1
 25805 ;; Hardware stack levels required when called:    7
 25806 ;; This function calls:
 25807 ;;		Nothing
 25808 ;; This function is called by:
 25809 ;;		_LORAWAN_TxDone
 25810 ;; This function uses a non-reentrant model
 25811 ;;
 25812                           
 25813                           	psect	text116
 25814  008F02                     __ptext116:
 25815                           	opt stack 0
 25816  008F02                     _SwTimerIsRunning:
 25817                           	opt stack 19
 25818                           
 25819                           ; BSR set to: 0
 25820                           ;incstack = 0
 25821                           ;SwTimerIsRunning@timerId stored from wreg
 25822  008F02  0100               	movlb	0	; () banked
 25823  008F04  6F60               	movwf	SwTimerIsRunning@timerId& (0+255),b
 25824                           
 25825                           ;sw_timer.c: 209: uint8_t isRunning;
 25826                           ;sw_timer.c: 211: (INTCONbits.GIE = 0);
 25827  008F06  9EF2               	bcf	intcon,7,c	;volatile
 25828                           
 25829                           ;sw_timer.c: 212: isRunning = swTimers[timerId].running;
 25830  008F08  0100               	movlb	0	; () banked
 25831  008F0A  5160               	movf	SwTimerIsRunning@timerId& (0+255),w,b
 25832  008F0C  0D08               	mullw	8
 25833  008F0E  0E04               	movlw	4
 25834  008F10  26F3               	addwf	prodl,f,c
 25835  008F12  0E00               	movlw	0
 25836  008F14  22F4               	addwfc	prodh,f,c
 25837  008F16  0E00               	movlw	low _swTimers
 25838  008F18  24F3               	addwf	prodl,w,c
 25839  008F1A  6ED9               	movwf	fsr2l,c
 25840  008F1C  0E03               	movlw	high _swTimers
 25841  008F1E  20F4               	addwfc	prodh,w,c
 25842  008F20  6EDA               	movwf	fsr2h,c
 25843  008F22  50DF               	movf	indf2,w,c
 25844  008F24  6F61               	movwf	SwTimerIsRunning@isRunning& (0+255),b
 25845                           
 25846                           ; BSR set to: 0
 25847                           ;sw_timer.c: 213: (INTCONbits.GIE = 1);
 25848  008F26  8EF2               	bsf	intcon,7,c	;volatile
 25849                           
 25850                           ; BSR set to: 0
 25851                           ;sw_timer.c: 215: return isRunning;
 25852  008F28  5161               	movf	SwTimerIsRunning@isRunning& (0+255),w,b
 25853  008F2A  0012               	return	
 25854  008F2C                     __end_of_SwTimerIsRunning:
 25855                           	opt stack 0
 25856                           tosu	equ	0xFFF
 25857                           tosh	equ	0xFFE
 25858                           tosl	equ	0xFFD
 25859                           pclath	equ	0xFFA
 25860                           tblptru	equ	0xFF8
 25861                           tblptrh	equ	0xFF7
 25862                           tblptrl	equ	0xFF6
 25863                           tablat	equ	0xFF5
 25864                           prodh	equ	0xFF4
 25865                           prodl	equ	0xFF3
 25866                           intcon	equ	0xFF2
 25867                           intcon2	equ	0xFF1
 25868                           intcon3	equ	0xFF0
 25869                           indf0	equ	0xFEF
 25870                           postinc0	equ	0xFEE
 25871                           fsr0h	equ	0xFEA
 25872                           fsr0l	equ	0xFE9
 25873                           wreg	equ	0xFE8
 25874                           postinc1	equ	0xFE6
 25875                           postdec1	equ	0xFE5
 25876                           plusw1	equ	0xFE3
 25877                           fsr1h	equ	0xFE2
 25878                           fsr1l	equ	0xFE1
 25879                           indf2	equ	0xFDF
 25880                           postinc2	equ	0xFDE
 25881                           postdec2	equ	0xFDD
 25882                           plusw2	equ	0xFDB
 25883                           fsr2h	equ	0xFDA
 25884                           fsr2l	equ	0xFD9
 25885                           status	equ	0xFD8
 25886                           
 25887 ;; *************** function _RADIO_GetStatus *****************
 25888 ;; Defined at:
 25889 ;;		line 1116 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 25890 ;; Parameters:    Size  Location     Type
 25891 ;;		None
 25892 ;; Auto vars:     Size  Location     Type
 25893 ;;		None
 25894 ;; Return value:  Size  Location     Type
 25895 ;;                  1    wreg      unsigned char 
 25896 ;; Registers used:
 25897 ;;		wreg, status,2
 25898 ;; Tracked objects:
 25899 ;;		On entry : 0/0
 25900 ;;		On exit  : 0/0
 25901 ;;		Unchanged: 0/0
 25902 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25903 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25904 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25905 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25906 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25907 ;;Total ram usage:        0 bytes
 25908 ;; Hardware stack levels used:    1
 25909 ;; Hardware stack levels required when called:    7
 25910 ;; This function calls:
 25911 ;;		Nothing
 25912 ;; This function is called by:
 25913 ;;		_LORAWAN_ReceiveWindow2Callback
 25914 ;;		_LORAWAN_RxDone
 25915 ;;		_LORAWAN_TxDone
 25916 ;; This function uses a non-reentrant model
 25917 ;;
 25918                           
 25919                           	psect	text117
 25920  00955A                     __ptext117:
 25921                           	opt stack 0
 25922  00955A                     _RADIO_GetStatus:
 25923                           	opt stack 19
 25924                           
 25925                           ;radio_driver_SX1276.c: 1118: return RadioConfiguration.flags;
 25926                           
 25927                           ; BSR set to: 0
 25928                           ;incstack = 0
 25929  00955A  0101               	movlb	1	; () banked
 25930  00955C  5178               	movf	(_RadioConfiguration+35)& (0+255),w,b
 25931  00955E  0012               	return	
 25932  009560                     __end_of_RADIO_GetStatus:
 25933                           	opt stack 0
 25934                           tosu	equ	0xFFF
 25935                           tosh	equ	0xFFE
 25936                           tosl	equ	0xFFD
 25937                           pclath	equ	0xFFA
 25938                           tblptru	equ	0xFF8
 25939                           tblptrh	equ	0xFF7
 25940                           tblptrl	equ	0xFF6
 25941                           tablat	equ	0xFF5
 25942                           prodh	equ	0xFF4
 25943                           prodl	equ	0xFF3
 25944                           intcon	equ	0xFF2
 25945                           intcon2	equ	0xFF1
 25946                           intcon3	equ	0xFF0
 25947                           indf0	equ	0xFEF
 25948                           postinc0	equ	0xFEE
 25949                           fsr0h	equ	0xFEA
 25950                           fsr0l	equ	0xFE9
 25951                           wreg	equ	0xFE8
 25952                           postinc1	equ	0xFE6
 25953                           postdec1	equ	0xFE5
 25954                           plusw1	equ	0xFE3
 25955                           fsr1h	equ	0xFE2
 25956                           fsr1l	equ	0xFE1
 25957                           indf2	equ	0xFDF
 25958                           postinc2	equ	0xFDE
 25959                           postdec2	equ	0xFDD
 25960                           plusw2	equ	0xFDB
 25961                           fsr2h	equ	0xFDA
 25962                           fsr2l	equ	0xFD9
 25963                           status	equ	0xFD8
 25964                           
 25965 ;; *************** function _LORAWAN_EnterContinuousReceive *****************
 25966 ;; Defined at:
 25967 ;;		line 915 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 25968 ;; Parameters:    Size  Location     Type
 25969 ;;		None
 25970 ;; Auto vars:     Size  Location     Type
 25971 ;;		None
 25972 ;; Return value:  Size  Location     Type
 25973 ;;                  1    wreg      void 
 25974 ;; Registers used:
 25975 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 25976 ;; Tracked objects:
 25977 ;;		On entry : 0/0
 25978 ;;		On exit  : 0/0
 25979 ;;		Unchanged: 0/0
 25980 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25981 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25982 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25983 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25984 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25985 ;;Total ram usage:        0 bytes
 25986 ;; Hardware stack levels used:    1
 25987 ;; Hardware stack levels required when called:   13
 25988 ;; This function calls:
 25989 ;;		_ConfigureRadioRx
 25990 ;;		_RADIO_ReceiveStart
 25991 ;;		_RADIO_ReceiveStop
 25992 ;;		_RADIO_ReleaseData
 25993 ;;		_ResetParametersForConfirmedTransmission
 25994 ;;		_ResetParametersForUnconfirmedTransmission
 25995 ;;		_RxData
 25996 ;; This function is called by:
 25997 ;;		_LORAWAN_ReceiveWindow2Callback
 25998 ;;		_LORAWAN_RxDone
 25999 ;;		_SetReceptionNotOkState
 26000 ;;		_LORAWAN_TxDone
 26001 ;; This function uses a non-reentrant model
 26002 ;;
 26003                           
 26004                           	psect	text118
 26005  007BCC                     __ptext118:
 26006                           	opt stack 0
 26007  007BCC                     _LORAWAN_EnterContinuousReceive:
 26008                           	opt stack 13
 26009                           
 26010                           ;lorawan.c: 917: RADIO_ReceiveStop();
 26011                           
 26012                           ; BSR set to: 1
 26013                           ;incstack = 0
 26014  007BCC  ECAE  F048         	call	_RADIO_ReceiveStop	;wreg free
 26015                           
 26016                           ;lorawan.c: 918: RADIO_ReleaseData();
 26017  007BD0  ECB0  F04A         	call	_RADIO_ReleaseData	;wreg free
 26018                           
 26019                           ;lorawan.c: 920: ConfigureRadioRx(loRa.receiveWindow2Parameters.dataRate, loRa.receiveWi
      +                          ndow2Parameters.frequency);
 26020  007BD4  C222  F073         	movff	_loRa+24,ConfigureRadioRx@freq
 26021  007BD8  C223  F074         	movff	_loRa+25,ConfigureRadioRx@freq+1
 26022  007BDC  C224  F075         	movff	_loRa+26,ConfigureRadioRx@freq+2
 26023  007BE0  C225  F076         	movff	_loRa+27,ConfigureRadioRx@freq+3
 26024  007BE4  0102               	movlb	2	; () banked
 26025  007BE6  5126               	movf	(_loRa+28)& (0+255),w,b
 26026  007BE8  EC96  F047         	call	_ConfigureRadioRx
 26027                           
 26028                           ;lorawan.c: 922: if (RADIO_ReceiveStart(0) != OK)
 26029  007BEC  0E00               	movlw	0
 26030  007BEE  0100               	movlb	0	; () banked
 26031  007BF0  6FB2               	movwf	(RADIO_ReceiveStart@rxWindowSize+1)& (0+255),b
 26032  007BF2  0E00               	movlw	0
 26033  007BF4  6FB1               	movwf	RADIO_ReceiveStart@rxWindowSize& (0+255),b
 26034  007BF6  EC13  F021         	call	_RADIO_ReceiveStart	;wreg free
 26035  007BFA  0100               	movlb	0	; () banked
 26036  007BFC  51B1               	movf	?_RADIO_ReceiveStart& (0+255),w,b
 26037  007BFE  11B2               	iorwf	(?_RADIO_ReceiveStart+1)& (0+255),w,b
 26038  007C00  B4D8               	btfsc	status,2,c
 26039  007C02  0012               	return	
 26040                           
 26041                           ; BSR set to: 0
 26042                           ;lorawan.c: 923: {
 26043                           ;lorawan.c: 924: ResetParametersForConfirmedTransmission ();
 26044  007C04  ECD7  F049         	call	_ResetParametersForConfirmedTransmission	;wreg free
 26045                           
 26046                           ;lorawan.c: 925: ResetParametersForUnconfirmedTransmission ();
 26047  007C08  ECB0  F049         	call	_ResetParametersForUnconfirmedTransmission	;wreg free
 26048                           
 26049                           ;lorawan.c: 926: loRa.macStatus.macState = IDLE;
 26050  007C0C  0102               	movlb	2	; () banked
 26051  007C0E  910C               	bcf	(_loRa+2)& (0+255),0,b
 26052  007C10  930C               	bcf	(_loRa+2)& (0+255),1,b
 26053  007C12  950C               	bcf	(_loRa+2)& (0+255),2,b
 26054  007C14  970C               	bcf	(_loRa+2)& (0+255),3,b
 26055                           
 26056                           ; BSR set to: 2
 26057                           ;lorawan.c: 927: if (rxPayload.RxAppData != (0))
 26058  007C16  0101               	movlb	1	; () banked
 26059  007C18  510C               	movf	_rxPayload& (0+255),w,b
 26060  007C1A  110D               	iorwf	(_rxPayload+1)& (0+255),w,b
 26061  007C1C  B4D8               	btfsc	status,2,c
 26062  007C1E  0012               	return	
 26063                           
 26064                           ; BSR set to: 1
 26065                           ;lorawan.c: 928: {
 26066                           ;lorawan.c: 929: rxPayload.RxAppData ((0), 0, MAC_NOT_OK);
 26067  007C20  0E00               	movlw	0
 26068  007C22  0100               	movlb	0	; () banked
 26069  007C24  6F60               	movwf	RxData@pData& (0+255),b
 26070  007C26  0E00               	movlw	0
 26071  007C28  6F61               	movwf	(RxData@pData+1)& (0+255),b
 26072  007C2A  0E00               	movlw	0
 26073  007C2C  6F62               	movwf	RxData@dataLength& (0+255),b
 26074  007C2E  0E00               	movlw	0
 26075  007C30  6F63               	movwf	RxData@status& (0+255),b
 26076  007C32  D801               	call	u10258
 26077  007C34  0012               	return	
 26078  007C36                     u10258:
 26079  007C36  0005               	push	
 26080  007C38  6EFA               	movwf	pclath,c
 26081  007C3A  0101               	movlb	1	; () banked
 26082  007C3C  510C               	movf	_rxPayload& (0+255),w,b
 26083  007C3E  6EFD               	movwf	tosl,c
 26084  007C40  510D               	movf	(_rxPayload+1)& (0+255),w,b
 26085  007C42  6EFE               	movwf	tosh,c
 26086  007C44  6AFF               	clrf	tosu,c
 26087  007C46  50FA               	movf	pclath,w,c
 26088  007C48  0012               	return		;indir
 26089  007C4A                     __end_of_LORAWAN_EnterContinuousReceive:
 26090                           	opt stack 0
 26091                           tosu	equ	0xFFF
 26092                           tosh	equ	0xFFE
 26093                           tosl	equ	0xFFD
 26094                           pclath	equ	0xFFA
 26095                           tblptru	equ	0xFF8
 26096                           tblptrh	equ	0xFF7
 26097                           tblptrl	equ	0xFF6
 26098                           tablat	equ	0xFF5
 26099                           prodh	equ	0xFF4
 26100                           prodl	equ	0xFF3
 26101                           intcon	equ	0xFF2
 26102                           intcon2	equ	0xFF1
 26103                           intcon3	equ	0xFF0
 26104                           indf0	equ	0xFEF
 26105                           postinc0	equ	0xFEE
 26106                           fsr0h	equ	0xFEA
 26107                           fsr0l	equ	0xFE9
 26108                           wreg	equ	0xFE8
 26109                           postinc1	equ	0xFE6
 26110                           postdec1	equ	0xFE5
 26111                           plusw1	equ	0xFE3
 26112                           fsr1h	equ	0xFE2
 26113                           fsr1l	equ	0xFE1
 26114                           indf2	equ	0xFDF
 26115                           postinc2	equ	0xFDE
 26116                           postdec2	equ	0xFDD
 26117                           plusw2	equ	0xFDB
 26118                           fsr2h	equ	0xFDA
 26119                           fsr2l	equ	0xFD9
 26120                           status	equ	0xFD8
 26121                           
 26122 ;; *************** function _RxData *****************
 26123 ;; Defined at:
 26124 ;;		line 85 in file "main.c"
 26125 ;; Parameters:    Size  Location     Type
 26126 ;;  pData           2    0[BANK0 ] PTR unsigned char 
 26127 ;;		 -> radioBuffer(271), LORAWAN_RxDone@hdr(2), NULL(0), 
 26128 ;;  dataLength      1    2[BANK0 ] unsigned char 
 26129 ;;  status          1    3[BANK0 ] enum E7378
 26130 ;; Auto vars:     Size  Location     Type
 26131 ;;		None
 26132 ;; Return value:  Size  Location     Type
 26133 ;;                  1    wreg      void 
 26134 ;; Registers used:
 26135 ;;		None
 26136 ;; Tracked objects:
 26137 ;;		On entry : 0/0
 26138 ;;		On exit  : 0/0
 26139 ;;		Unchanged: 0/0
 26140 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26141 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26142 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26143 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26144 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26145 ;;Total ram usage:        4 bytes
 26146 ;; Hardware stack levels used:    1
 26147 ;; Hardware stack levels required when called:    7
 26148 ;; This function calls:
 26149 ;;		Nothing
 26150 ;; This function is called by:
 26151 ;;		_main
 26152 ;;		_LORAWAN_EnterContinuousReceive
 26153 ;;		_LORAWAN_ReceiveWindow2Callback
 26154 ;;		_SetReceptionNotOkState
 26155 ;;		_LORAWAN_RxDone
 26156 ;;		_LORAWAN_RxTimeout
 26157 ;;		_LORAWAN_TxDone
 26158 ;;		_AckRetransmissionCallback
 26159 ;;		_UnconfirmedTransmissionCallback
 26160 ;; This function uses a non-reentrant model
 26161 ;;
 26162                           
 26163                           	psect	text119
 26164  0095A4                     __ptext119:
 26165                           	opt stack 0
 26166  0095A4                     _RxData:
 26167                           	opt stack 20
 26168                           
 26169                           ;incstack = 0
 26170  0095A4  0012               	return		;funcret
 26171  0095A6                     __end_of_RxData:
 26172                           	opt stack 0
 26173                           tosu	equ	0xFFF
 26174                           tosh	equ	0xFFE
 26175                           tosl	equ	0xFFD
 26176                           pclath	equ	0xFFA
 26177                           tblptru	equ	0xFF8
 26178                           tblptrh	equ	0xFF7
 26179                           tblptrl	equ	0xFF6
 26180                           tablat	equ	0xFF5
 26181                           prodh	equ	0xFF4
 26182                           prodl	equ	0xFF3
 26183                           intcon	equ	0xFF2
 26184                           intcon2	equ	0xFF1
 26185                           intcon3	equ	0xFF0
 26186                           indf0	equ	0xFEF
 26187                           postinc0	equ	0xFEE
 26188                           fsr0h	equ	0xFEA
 26189                           fsr0l	equ	0xFE9
 26190                           wreg	equ	0xFE8
 26191                           postinc1	equ	0xFE6
 26192                           postdec1	equ	0xFE5
 26193                           plusw1	equ	0xFE3
 26194                           fsr1h	equ	0xFE2
 26195                           fsr1l	equ	0xFE1
 26196                           indf2	equ	0xFDF
 26197                           postinc2	equ	0xFDE
 26198                           postdec2	equ	0xFDD
 26199                           plusw2	equ	0xFDB
 26200                           fsr2h	equ	0xFDA
 26201                           fsr2l	equ	0xFD9
 26202                           status	equ	0xFD8
 26203                           
 26204 ;; *************** function _ResetParametersForUnconfirmedTransmission *****************
 26205 ;; Defined at:
 26206 ;;		line 1097 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 26207 ;; Parameters:    Size  Location     Type
 26208 ;;		None
 26209 ;; Auto vars:     Size  Location     Type
 26210 ;;		None
 26211 ;; Return value:  Size  Location     Type
 26212 ;;                  1    wreg      void 
 26213 ;; Registers used:
 26214 ;;		wreg, status,2
 26215 ;; Tracked objects:
 26216 ;;		On entry : 0/0
 26217 ;;		On exit  : 0/0
 26218 ;;		Unchanged: 0/0
 26219 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26220 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26221 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26222 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26223 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26224 ;;Total ram usage:        0 bytes
 26225 ;; Hardware stack levels used:    1
 26226 ;; Hardware stack levels required when called:    7
 26227 ;; This function calls:
 26228 ;;		Nothing
 26229 ;; This function is called by:
 26230 ;;		_LORAWAN_ReceiveWindow2Callback
 26231 ;;		_LORAWAN_EnterContinuousReceive
 26232 ;;		_UnconfirmedTransmissionCallback
 26233 ;;		_LORAWAN_RxTimeout
 26234 ;; This function uses a non-reentrant model
 26235 ;;
 26236                           
 26237                           	psect	text120
 26238  009360                     __ptext120:
 26239                           	opt stack 0
 26240  009360                     _ResetParametersForUnconfirmedTransmission:
 26241                           	opt stack 20
 26242                           
 26243                           ;lorawan.c: 1099: loRa.macStatus.macState = IDLE;
 26244                           
 26245                           ;incstack = 0
 26246  009360  0102               	movlb	2	; () banked
 26247  009362  910C               	bcf	(_loRa+2)& (0+255),0,b
 26248  009364  930C               	bcf	(_loRa+2)& (0+255),1,b
 26249  009366  950C               	bcf	(_loRa+2)& (0+255),2,b
 26250  009368  970C               	bcf	(_loRa+2)& (0+255),3,b
 26251                           
 26252                           ; BSR set to: 2
 26253                           ;lorawan.c: 1100: loRa.counterRepetitionsUnconfirmedUplink = 1;
 26254  00936A  0E01               	movlw	1
 26255  00936C  6FE2               	movwf	(_loRa+216)& (0+255),b
 26256                           
 26257                           ;lorawan.c: 1101: loRa.crtMacCmdIndex = 0;
 26258  00936E  0E00               	movlw	0
 26259  009370  6FB1               	movwf	(_loRa+167)& (0+255),b
 26260                           
 26261                           ; BSR set to: 2
 26262  009372  0012               	return		;funcret
 26263  009374                     __end_of_ResetParametersForUnconfirmedTransmission:
 26264                           	opt stack 0
 26265                           tosu	equ	0xFFF
 26266                           tosh	equ	0xFFE
 26267                           tosl	equ	0xFFD
 26268                           pclath	equ	0xFFA
 26269                           tblptru	equ	0xFF8
 26270                           tblptrh	equ	0xFF7
 26271                           tblptrl	equ	0xFF6
 26272                           tablat	equ	0xFF5
 26273                           prodh	equ	0xFF4
 26274                           prodl	equ	0xFF3
 26275                           intcon	equ	0xFF2
 26276                           intcon2	equ	0xFF1
 26277                           intcon3	equ	0xFF0
 26278                           indf0	equ	0xFEF
 26279                           postinc0	equ	0xFEE
 26280                           fsr0h	equ	0xFEA
 26281                           fsr0l	equ	0xFE9
 26282                           wreg	equ	0xFE8
 26283                           postinc1	equ	0xFE6
 26284                           postdec1	equ	0xFE5
 26285                           plusw1	equ	0xFE3
 26286                           fsr1h	equ	0xFE2
 26287                           fsr1l	equ	0xFE1
 26288                           indf2	equ	0xFDF
 26289                           postinc2	equ	0xFDE
 26290                           postdec2	equ	0xFDD
 26291                           plusw2	equ	0xFDB
 26292                           fsr2h	equ	0xFDA
 26293                           fsr2l	equ	0xFD9
 26294                           status	equ	0xFD8
 26295                           
 26296 ;; *************** function _ResetParametersForConfirmedTransmission *****************
 26297 ;; Defined at:
 26298 ;;		line 1090 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 26299 ;; Parameters:    Size  Location     Type
 26300 ;;		None
 26301 ;; Auto vars:     Size  Location     Type
 26302 ;;		None
 26303 ;; Return value:  Size  Location     Type
 26304 ;;                  1    wreg      void 
 26305 ;; Registers used:
 26306 ;;		wreg, status,2
 26307 ;; Tracked objects:
 26308 ;;		On entry : 0/0
 26309 ;;		On exit  : 0/0
 26310 ;;		Unchanged: 0/0
 26311 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26312 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26313 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26314 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26315 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26316 ;;Total ram usage:        0 bytes
 26317 ;; Hardware stack levels used:    1
 26318 ;; Hardware stack levels required when called:    7
 26319 ;; This function calls:
 26320 ;;		Nothing
 26321 ;; This function is called by:
 26322 ;;		_LORAWAN_ReceiveWindow2Callback
 26323 ;;		_LORAWAN_EnterContinuousReceive
 26324 ;;		_AckRetransmissionCallback
 26325 ;;		_LORAWAN_RxTimeout
 26326 ;; This function uses a non-reentrant model
 26327 ;;
 26328                           
 26329                           	psect	text121
 26330  0093AE                     __ptext121:
 26331                           	opt stack 0
 26332  0093AE                     _ResetParametersForConfirmedTransmission:
 26333                           	opt stack 18
 26334                           
 26335                           ;lorawan.c: 1092: loRa.macStatus.macState = IDLE;
 26336                           
 26337                           ; BSR set to: 2
 26338                           ;incstack = 0
 26339  0093AE  0102               	movlb	2	; () banked
 26340  0093B0  910C               	bcf	(_loRa+2)& (0+255),0,b
 26341  0093B2  930C               	bcf	(_loRa+2)& (0+255),1,b
 26342  0093B4  950C               	bcf	(_loRa+2)& (0+255),2,b
 26343  0093B6  970C               	bcf	(_loRa+2)& (0+255),3,b
 26344                           
 26345                           ; BSR set to: 2
 26346                           ;lorawan.c: 1093: loRa.counterRepetitionsConfirmedUplink = 1;
 26347  0093B8  0E01               	movlw	1
 26348  0093BA  6FE3               	movwf	(_loRa+217)& (0+255),b
 26349                           
 26350                           ; BSR set to: 2
 26351                           ;lorawan.c: 1094: loRa.lorawanMacStatus.ackRequiredFromNextDownlinkMessage = 0;
 26352  0093BC  910A               	bcf	_loRa& (0+255),0,b
 26353                           
 26354                           ; BSR set to: 2
 26355  0093BE  0012               	return		;funcret
 26356  0093C0                     __end_of_ResetParametersForConfirmedTransmission:
 26357                           	opt stack 0
 26358                           tosu	equ	0xFFF
 26359                           tosh	equ	0xFFE
 26360                           tosl	equ	0xFFD
 26361                           pclath	equ	0xFFA
 26362                           tblptru	equ	0xFF8
 26363                           tblptrh	equ	0xFF7
 26364                           tblptrl	equ	0xFF6
 26365                           tablat	equ	0xFF5
 26366                           prodh	equ	0xFF4
 26367                           prodl	equ	0xFF3
 26368                           intcon	equ	0xFF2
 26369                           intcon2	equ	0xFF1
 26370                           intcon3	equ	0xFF0
 26371                           indf0	equ	0xFEF
 26372                           postinc0	equ	0xFEE
 26373                           fsr0h	equ	0xFEA
 26374                           fsr0l	equ	0xFE9
 26375                           wreg	equ	0xFE8
 26376                           postinc1	equ	0xFE6
 26377                           postdec1	equ	0xFE5
 26378                           plusw1	equ	0xFE3
 26379                           fsr1h	equ	0xFE2
 26380                           fsr1l	equ	0xFE1
 26381                           indf2	equ	0xFDF
 26382                           postinc2	equ	0xFDE
 26383                           postdec2	equ	0xFDD
 26384                           plusw2	equ	0xFDB
 26385                           fsr2h	equ	0xFDA
 26386                           fsr2l	equ	0xFD9
 26387                           status	equ	0xFD8
 26388                           
 26389 ;; *************** function _RADIO_ReleaseData *****************
 26390 ;; Defined at:
 26391 ;;		line 1134 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 26392 ;; Parameters:    Size  Location     Type
 26393 ;;		None
 26394 ;; Auto vars:     Size  Location     Type
 26395 ;;		None
 26396 ;; Return value:  Size  Location     Type
 26397 ;;                  1    wreg      void 
 26398 ;; Registers used:
 26399 ;;		status,2, status,0
 26400 ;; Tracked objects:
 26401 ;;		On entry : 0/0
 26402 ;;		On exit  : 0/0
 26403 ;;		Unchanged: 0/0
 26404 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26405 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26406 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26407 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26408 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26409 ;;Total ram usage:        0 bytes
 26410 ;; Hardware stack levels used:    1
 26411 ;; Hardware stack levels required when called:    7
 26412 ;; This function calls:
 26413 ;;		Nothing
 26414 ;; This function is called by:
 26415 ;;		_LORAWAN_ReceiveWindow1Callback
 26416 ;;		_LORAWAN_ReceiveWindow2Callback
 26417 ;;		_LORAWAN_EnterContinuousReceive
 26418 ;;		_LORAWAN_RxDone
 26419 ;; This function uses a non-reentrant model
 26420 ;;
 26421                           
 26422                           	psect	text122
 26423  009560                     __ptext122:
 26424                           	opt stack 0
 26425  009560                     _RADIO_ReleaseData:
 26426                           	opt stack 18
 26427                           
 26428                           ;radio_driver_SX1276.c: 1136: RadioConfiguration.flags &= ~(1 << (2));
 26429                           
 26430                           ; BSR set to: 2
 26431                           ;incstack = 0
 26432  009560  0101               	movlb	1	; () banked
 26433  009562  9578               	bcf	(_RadioConfiguration+35)& (0+255),2,b
 26434                           
 26435                           ; BSR set to: 1
 26436  009564  0012               	return		;funcret
 26437  009566                     __end_of_RADIO_ReleaseData:
 26438                           	opt stack 0
 26439                           tosu	equ	0xFFF
 26440                           tosh	equ	0xFFE
 26441                           tosl	equ	0xFFD
 26442                           pclath	equ	0xFFA
 26443                           tblptru	equ	0xFF8
 26444                           tblptrh	equ	0xFF7
 26445                           tblptrl	equ	0xFF6
 26446                           tablat	equ	0xFF5
 26447                           prodh	equ	0xFF4
 26448                           prodl	equ	0xFF3
 26449                           intcon	equ	0xFF2
 26450                           intcon2	equ	0xFF1
 26451                           intcon3	equ	0xFF0
 26452                           indf0	equ	0xFEF
 26453                           postinc0	equ	0xFEE
 26454                           fsr0h	equ	0xFEA
 26455                           fsr0l	equ	0xFE9
 26456                           wreg	equ	0xFE8
 26457                           postinc1	equ	0xFE6
 26458                           postdec1	equ	0xFE5
 26459                           plusw1	equ	0xFE3
 26460                           fsr1h	equ	0xFE2
 26461                           fsr1l	equ	0xFE1
 26462                           indf2	equ	0xFDF
 26463                           postinc2	equ	0xFDE
 26464                           postdec2	equ	0xFDD
 26465                           plusw2	equ	0xFDB
 26466                           fsr2h	equ	0xFDA
 26467                           fsr2l	equ	0xFD9
 26468                           status	equ	0xFD8
 26469                           
 26470 ;; *************** function _RADIO_ReceiveStop *****************
 26471 ;; Defined at:
 26472 ;;		line 951 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 26473 ;; Parameters:    Size  Location     Type
 26474 ;;		None
 26475 ;; Auto vars:     Size  Location     Type
 26476 ;;		None
 26477 ;; Return value:  Size  Location     Type
 26478 ;;                  1    wreg      void 
 26479 ;; Registers used:
 26480 ;;		wreg, status,2, status,0, cstack
 26481 ;; Tracked objects:
 26482 ;;		On entry : 0/0
 26483 ;;		On exit  : 0/0
 26484 ;;		Unchanged: 0/0
 26485 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26486 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26487 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26488 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26489 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26490 ;;Total ram usage:        0 bytes
 26491 ;; Hardware stack levels used:    1
 26492 ;; Hardware stack levels required when called:   11
 26493 ;; This function calls:
 26494 ;;		_RADIO_WriteMode
 26495 ;; This function is called by:
 26496 ;;		_LORAWAN_Send
 26497 ;;		_LORAWAN_ReceiveWindow1Callback
 26498 ;;		_LORAWAN_ReceiveWindow2Callback
 26499 ;;		_LORAWAN_EnterContinuousReceive
 26500 ;;		_LORAWAN_SetClass
 26501 ;; This function uses a non-reentrant model
 26502 ;;
 26503                           
 26504                           	psect	text123
 26505  00915C                     __ptext123:
 26506                           	opt stack 0
 26507  00915C                     _RADIO_ReceiveStop:
 26508                           	opt stack 18
 26509                           
 26510                           ;radio_driver_SX1276.c: 953: if ((1 << (1)) == RadioConfiguration.flags)
 26511                           
 26512                           ; BSR set to: 1
 26513                           ;incstack = 0
 26514  00915C  0E02               	movlw	2
 26515  00915E  0101               	movlb	1	; () banked
 26516  009160  1978               	xorwf	(_RadioConfiguration+35)& (0+255),w,b
 26517  009162  A4D8               	btfss	status,2,c
 26518  009164  0012               	return	
 26519                           
 26520                           ; BSR set to: 1
 26521                           ;radio_driver_SX1276.c: 954: {
 26522                           ;radio_driver_SX1276.c: 955: RADIO_WriteMode(MODE_SLEEP, RadioConfiguration.modulation, 
      +                          0);
 26523  009166  C16D  F065         	movff	_RadioConfiguration+24,RADIO_WriteMode@newModulation
 26524  00916A  0E00               	movlw	0
 26525  00916C  0100               	movlb	0	; () banked
 26526  00916E  6F66               	movwf	RADIO_WriteMode@blocking& (0+255),b
 26527  009170  0E00               	movlw	0
 26528  009172  ECDA  F031         	call	_RADIO_WriteMode
 26529                           
 26530                           ;radio_driver_SX1276.c: 956: RadioConfiguration.flags &= ~(1 << (1));
 26531  009176  0101               	movlb	1	; () banked
 26532  009178  9378               	bcf	(_RadioConfiguration+35)& (0+255),1,b
 26533  00917A  0012               	return	
 26534  00917C                     __end_of_RADIO_ReceiveStop:
 26535                           	opt stack 0
 26536                           tosu	equ	0xFFF
 26537                           tosh	equ	0xFFE
 26538                           tosl	equ	0xFFD
 26539                           pclath	equ	0xFFA
 26540                           tblptru	equ	0xFF8
 26541                           tblptrh	equ	0xFF7
 26542                           tblptrl	equ	0xFF6
 26543                           tablat	equ	0xFF5
 26544                           prodh	equ	0xFF4
 26545                           prodl	equ	0xFF3
 26546                           intcon	equ	0xFF2
 26547                           intcon2	equ	0xFF1
 26548                           intcon3	equ	0xFF0
 26549                           indf0	equ	0xFEF
 26550                           postinc0	equ	0xFEE
 26551                           fsr0h	equ	0xFEA
 26552                           fsr0l	equ	0xFE9
 26553                           wreg	equ	0xFE8
 26554                           postinc1	equ	0xFE6
 26555                           postdec1	equ	0xFE5
 26556                           plusw1	equ	0xFE3
 26557                           fsr1h	equ	0xFE2
 26558                           fsr1l	equ	0xFE1
 26559                           indf2	equ	0xFDF
 26560                           postinc2	equ	0xFDE
 26561                           postdec2	equ	0xFDD
 26562                           plusw2	equ	0xFDB
 26563                           fsr2h	equ	0xFDA
 26564                           fsr2l	equ	0xFD9
 26565                           status	equ	0xFD8
 26566                           
 26567 ;; *************** function _RADIO_ReceiveStart *****************
 26568 ;; Defined at:
 26569 ;;		line 875 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 26570 ;; Parameters:    Size  Location     Type
 26571 ;;  rxWindowSize    2   81[BANK0 ] unsigned int 
 26572 ;; Auto vars:     Size  Location     Type
 26573 ;;		None
 26574 ;; Return value:  Size  Location     Type
 26575 ;;                  2   81[BANK0 ] enum E7038
 26576 ;; Registers used:
 26577 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 26578 ;; Tracked objects:
 26579 ;;		On entry : 0/0
 26580 ;;		On exit  : 0/0
 26581 ;;		Unchanged: 0/0
 26582 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26583 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26584 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26585 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26586 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26587 ;;Total ram usage:       10 bytes
 26588 ;; Hardware stack levels used:    1
 26589 ;; Hardware stack levels required when called:   12
 26590 ;; This function calls:
 26591 ;;		_RADIO_RegisterWrite
 26592 ;;		_RADIO_WriteConfiguration
 26593 ;;		_RADIO_WriteMode
 26594 ;;		_SwTimerSetTimeout
 26595 ;;		_SwTimerStart
 26596 ;;		___lldiv
 26597 ;; This function is called by:
 26598 ;;		_LORAWAN_ReceiveWindow1Callback
 26599 ;;		_LORAWAN_ReceiveWindow2Callback
 26600 ;;		_LORAWAN_EnterContinuousReceive
 26601 ;; This function uses a non-reentrant model
 26602 ;;
 26603                           
 26604                           	psect	text124
 26605  004226                     __ptext124:
 26606                           	opt stack 0
 26607  004226                     _RADIO_ReceiveStart:
 26608                           	opt stack 13
 26609                           
 26610                           ;radio_driver_SX1276.c: 877: if ((RadioConfiguration.flags & (1 << (2))) != 0)
 26611                           
 26612                           ; BSR set to: 1
 26613                           ;incstack = 0
 26614  004226  0101               	movlb	1	; () banked
 26615  004228  A578               	btfss	(_RadioConfiguration+35)& (0+255),2,b
 26616  00422A  D006               	goto	l293
 26617                           
 26618                           ; BSR set to: 1
 26619                           ;radio_driver_SX1276.c: 878: {
 26620                           ;radio_driver_SX1276.c: 879: return ERR_BUFFER_LOCKED;
 26621  00422C  0E80               	movlw	128
 26622  00422E  0100               	movlb	0	; () banked
 26623  004230  6FB2               	movwf	(?_RADIO_ReceiveStart+1)& (0+255),b
 26624  004232  0E03               	movlw	3
 26625  004234  6FB1               	movwf	?_RADIO_ReceiveStart& (0+255),b
 26626                           
 26627                           ; BSR set to: 0
 26628  004236  0012               	return	
 26629  004238                     l293:
 26630                           
 26631                           ;radio_driver_SX1276.c: 880: }
 26632                           ;radio_driver_SX1276.c: 882: if ((RadioConfiguration.flags & ((1 << (0)) | (1 << (1)))) 
      +                          != 0)
 26633                           
 26634                           ; BSR set to: 0
 26635  004238  C178  F0B3         	movff	_RadioConfiguration+35,??_RADIO_ReceiveStart
 26636  00423C  0E03               	movlw	3
 26637  00423E  0100               	movlb	0	; () banked
 26638  004240  17B3               	andwf	??_RADIO_ReceiveStart& (0+255),f,b
 26639  004242  B4D8               	btfsc	status,2,c
 26640  004244  D005               	goto	l295
 26641                           
 26642                           ; BSR set to: 0
 26643                           ;radio_driver_SX1276.c: 883: {
 26644                           ;radio_driver_SX1276.c: 884: return ERR_RADIO_BUSY;
 26645  004246  0E80               	movlw	128
 26646  004248  6FB2               	movwf	(?_RADIO_ReceiveStart+1)& (0+255),b
 26647  00424A  0E04               	movlw	4
 26648  00424C  6FB1               	movwf	?_RADIO_ReceiveStart& (0+255),b
 26649                           
 26650                           ; BSR set to: 0
 26651  00424E  0012               	return	
 26652  004250                     l295:
 26653                           
 26654                           ; BSR set to: 0
 26655                           ;radio_driver_SX1276.c: 885: }
 26656                           ;radio_driver_SX1276.c: 887: if (0 == rxWindowSize)
 26657                           
 26658                           ; BSR set to: 0
 26659  004250  51B1               	movf	RADIO_ReceiveStart@rxWindowSize& (0+255),w,b
 26660  004252  11B2               	iorwf	(RADIO_ReceiveStart@rxWindowSize+1)& (0+255),w,b
 26661  004254  A4D8               	btfss	status,2,c
 26662  004256  D007               	goto	l296
 26663                           
 26664                           ; BSR set to: 0
 26665                           ;radio_driver_SX1276.c: 888: {
 26666                           ;radio_driver_SX1276.c: 889: RADIO_WriteConfiguration(4);
 26667  004258  0E00               	movlw	0
 26668  00425A  6FA7               	movwf	(RADIO_WriteConfiguration@symbolTimeout+1)& (0+255),b
 26669  00425C  0E04               	movlw	4
 26670  00425E  6FA6               	movwf	RADIO_WriteConfiguration@symbolTimeout& (0+255),b
 26671  004260  EC96  F00A         	call	_RADIO_WriteConfiguration	;wreg free
 26672                           
 26673                           ;radio_driver_SX1276.c: 890: }
 26674  004264  D006               	goto	l297
 26675  004266                     l296:
 26676                           
 26677                           ;radio_driver_SX1276.c: 891: else
 26678                           ;radio_driver_SX1276.c: 892: {
 26679                           ;radio_driver_SX1276.c: 893: RADIO_WriteConfiguration(rxWindowSize);
 26680  004266  C0B1  F0A6         	movff	RADIO_ReceiveStart@rxWindowSize,RADIO_WriteConfiguration@symbolTimeout
 26681  00426A  C0B2  F0A7         	movff	RADIO_ReceiveStart@rxWindowSize+1,RADIO_WriteConfiguration@symbolTimeout+1
 26682  00426E  EC96  F00A         	call	_RADIO_WriteConfiguration	;wreg free
 26683  004272                     l297:
 26684                           
 26685                           ;radio_driver_SX1276.c: 894: }
 26686                           ;radio_driver_SX1276.c: 896: if (MODULATION_LORA == RadioConfiguration.modulation)
 26687  004272  0101               	movlb	1	; () banked
 26688  004274  056D               	decf	(_RadioConfiguration+24)& (0+255),w,b
 26689  004276  A4D8               	btfss	status,2,c
 26690  004278  D013               	goto	l298
 26691                           
 26692                           ; BSR set to: 1
 26693                           ;radio_driver_SX1276.c: 897: {
 26694                           ;radio_driver_SX1276.c: 900: RADIO_RegisterWrite(0x22, 0x01);
 26695  00427A  0E01               	movlw	1
 26696  00427C  0100               	movlb	0	; () banked
 26697  00427E  6F62               	movwf	RADIO_RegisterWrite@value& (0+255),b
 26698  004280  0E22               	movlw	34
 26699  004282  ECBE  F048         	call	_RADIO_RegisterWrite
 26700                           
 26701                           ;radio_driver_SX1276.c: 906: RADIO_RegisterWrite(0x40, 0x00);
 26702  004286  0E00               	movlw	0
 26703  004288  0100               	movlb	0	; () banked
 26704  00428A  6F62               	movwf	RADIO_RegisterWrite@value& (0+255),b
 26705  00428C  0E40               	movlw	64
 26706  00428E  ECBE  F048         	call	_RADIO_RegisterWrite
 26707                           
 26708                           ;radio_driver_SX1276.c: 907: RADIO_RegisterWrite(0x41, 0x00);
 26709  004292  0E00               	movlw	0
 26710  004294  0100               	movlb	0	; () banked
 26711  004296  6F62               	movwf	RADIO_RegisterWrite@value& (0+255),b
 26712  004298  0E41               	movlw	65
 26713  00429A  ECBE  F048         	call	_RADIO_RegisterWrite
 26714                           
 26715                           ;radio_driver_SX1276.c: 908: }
 26716  00429E  D016               	goto	l299
 26717  0042A0                     l298:
 26718                           
 26719                           ;radio_driver_SX1276.c: 909: else
 26720                           ;radio_driver_SX1276.c: 910: {
 26721                           ;radio_driver_SX1276.c: 911: RADIO_RegisterWrite(0x12, RadioConfiguration.rxBw);
 26722  0042A0  C189  F062         	movff	_RadioConfiguration+52,RADIO_RegisterWrite@value
 26723  0042A4  0E12               	movlw	18
 26724  0042A6  ECBE  F048         	call	_RADIO_RegisterWrite
 26725                           
 26726                           ;radio_driver_SX1276.c: 912: RADIO_RegisterWrite(0x13, RadioConfiguration.afcBw);
 26727  0042AA  C18A  F062         	movff	_RadioConfiguration+53,RADIO_RegisterWrite@value
 26728  0042AE  0E13               	movlw	19
 26729  0042B0  ECBE  F048         	call	_RADIO_RegisterWrite
 26730                           
 26731                           ;radio_driver_SX1276.c: 915: RADIO_RegisterWrite(0x40, 0x00);
 26732  0042B4  0E00               	movlw	0
 26733  0042B6  0100               	movlb	0	; () banked
 26734  0042B8  6F62               	movwf	RADIO_RegisterWrite@value& (0+255),b
 26735  0042BA  0E40               	movlw	64
 26736  0042BC  ECBE  F048         	call	_RADIO_RegisterWrite
 26737                           
 26738                           ;radio_driver_SX1276.c: 916: RADIO_RegisterWrite(0x41, 0x00);
 26739  0042C0  0E00               	movlw	0
 26740  0042C2  0100               	movlb	0	; () banked
 26741  0042C4  6F62               	movwf	RADIO_RegisterWrite@value& (0+255),b
 26742  0042C6  0E41               	movlw	65
 26743  0042C8  ECBE  F048         	call	_RADIO_RegisterWrite
 26744  0042CC                     l299:
 26745                           
 26746                           ;radio_driver_SX1276.c: 917: }
 26747                           ;radio_driver_SX1276.c: 919: RadioConfiguration.flags |= (1 << (1));
 26748  0042CC  0101               	movlb	1	; () banked
 26749  0042CE  8378               	bsf	(_RadioConfiguration+35)& (0+255),1,b
 26750                           
 26751                           ; BSR set to: 1
 26752                           ;radio_driver_SX1276.c: 920: RadioConfiguration.flags &= ~((1 << (4)) | (1 << (3)));
 26753  0042D0  0EE7               	movlw	231
 26754  0042D2  1778               	andwf	(_RadioConfiguration+35)& (0+255),f,b
 26755                           
 26756                           ; BSR set to: 1
 26757                           ;radio_driver_SX1276.c: 924: if (0 == rxWindowSize)
 26758  0042D4  0100               	movlb	0	; () banked
 26759  0042D6  51B1               	movf	RADIO_ReceiveStart@rxWindowSize& (0+255),w,b
 26760  0042D8  11B2               	iorwf	(RADIO_ReceiveStart@rxWindowSize+1)& (0+255),w,b
 26761  0042DA  A4D8               	btfss	status,2,c
 26762  0042DC  D008               	goto	l300
 26763                           
 26764                           ; BSR set to: 0
 26765                           ;radio_driver_SX1276.c: 925: {
 26766                           ;radio_driver_SX1276.c: 926: RADIO_WriteMode(MODE_RXCONT, RadioConfiguration.modulation,
      +                           0);
 26767  0042DE  C16D  F065         	movff	_RadioConfiguration+24,RADIO_WriteMode@newModulation
 26768  0042E2  0E00               	movlw	0
 26769  0042E4  6F66               	movwf	RADIO_WriteMode@blocking& (0+255),b
 26770  0042E6  0E05               	movlw	5
 26771  0042E8  ECDA  F031         	call	_RADIO_WriteMode
 26772                           
 26773                           ;radio_driver_SX1276.c: 927: }
 26774  0042EC  D046               	goto	l303
 26775  0042EE                     l300:
 26776                           
 26777                           ;radio_driver_SX1276.c: 928: else
 26778                           ;radio_driver_SX1276.c: 929: {
 26779                           ;radio_driver_SX1276.c: 930: if (MODULATION_LORA == RadioConfiguration.modulation)
 26780  0042EE  0101               	movlb	1	; () banked
 26781  0042F0  056D               	decf	(_RadioConfiguration+24)& (0+255),w,b
 26782  0042F2  A4D8               	btfss	status,2,c
 26783  0042F4  D009               	goto	l302
 26784                           
 26785                           ; BSR set to: 1
 26786                           ;radio_driver_SX1276.c: 931: {
 26787                           ;radio_driver_SX1276.c: 932: RADIO_WriteMode(MODE_RXSINGLE, MODULATION_LORA, 0);
 26788  0042F6  0E01               	movlw	1
 26789  0042F8  0100               	movlb	0	; () banked
 26790  0042FA  6F65               	movwf	RADIO_WriteMode@newModulation& (0+255),b
 26791  0042FC  0E00               	movlw	0
 26792  0042FE  6F66               	movwf	RADIO_WriteMode@blocking& (0+255),b
 26793  004300  0E06               	movlw	6
 26794  004302  ECDA  F031         	call	_RADIO_WriteMode
 26795                           
 26796                           ;radio_driver_SX1276.c: 933: }
 26797  004306  D039               	goto	l303
 26798  004308                     l302:
 26799                           
 26800                           ;radio_driver_SX1276.c: 934: else
 26801                           ;radio_driver_SX1276.c: 935: {
 26802                           ;radio_driver_SX1276.c: 936: RADIO_WriteMode(MODE_RXCONT, MODULATION_FSK, 0);
 26803  004308  0E00               	movlw	0
 26804  00430A  0100               	movlb	0	; () banked
 26805  00430C  6F65               	movwf	RADIO_WriteMode@newModulation& (0+255),b
 26806  00430E  0E00               	movlw	0
 26807  004310  6F66               	movwf	RADIO_WriteMode@blocking& (0+255),b
 26808  004312  0E05               	movlw	5
 26809  004314  ECDA  F031         	call	_RADIO_WriteMode
 26810                           
 26811                           ;radio_driver_SX1276.c: 937: SwTimerSetTimeout(RadioConfiguration.fskRxWindowTimerId, ( 
      +                          (((uint32_t)(rxWindowSize)) << (12)) / 125UL ));
 26812  004318  0100               	movlb	0	; () banked
 26813  00431A  51B1               	movf	RADIO_ReceiveStart@rxWindowSize& (0+255),w,b
 26814  00431C  6FB3               	movwf	??_RADIO_ReceiveStart& (0+255),b
 26815  00431E  51B2               	movf	(RADIO_ReceiveStart@rxWindowSize+1)& (0+255),w,b
 26816  004320  6FB4               	movwf	(??_RADIO_ReceiveStart+1)& (0+255),b
 26817  004322  6BB5               	clrf	(??_RADIO_ReceiveStart+2)& (0+255),b
 26818  004324  6BB6               	clrf	(??_RADIO_ReceiveStart+3)& (0+255),b
 26819  004326  0E0C               	movlw	12
 26820  004328                     u9175:
 26821  004328  90D8               	bcf	status,0,c
 26822  00432A  37B3               	rlcf	??_RADIO_ReceiveStart& (0+255),f,b
 26823  00432C  37B4               	rlcf	(??_RADIO_ReceiveStart+1)& (0+255),f,b
 26824  00432E  37B5               	rlcf	(??_RADIO_ReceiveStart+2)& (0+255),f,b
 26825  004330  37B6               	rlcf	(??_RADIO_ReceiveStart+3)& (0+255),f,b
 26826  004332  2EE8               	decfsz	wreg,f,c
 26827  004334  D7F9               	goto	u9175
 26828  004336  C0B3  F060         	movff	??_RADIO_ReceiveStart,___lldiv@dividend
 26829  00433A  C0B4  F061         	movff	??_RADIO_ReceiveStart+1,___lldiv@dividend+1
 26830  00433E  C0B5  F062         	movff	??_RADIO_ReceiveStart+2,___lldiv@dividend+2
 26831  004342  C0B6  F063         	movff	??_RADIO_ReceiveStart+3,___lldiv@dividend+3
 26832  004346  0E7D               	movlw	125
 26833  004348  6F64               	movwf	___lldiv@divisor& (0+255),b
 26834  00434A  0E00               	movlw	0
 26835  00434C  6F65               	movwf	(___lldiv@divisor+1)& (0+255),b
 26836  00434E  0E00               	movlw	0
 26837  004350  6F66               	movwf	(___lldiv@divisor+2)& (0+255),b
 26838  004352  0E00               	movlw	0
 26839  004354  6F67               	movwf	(___lldiv@divisor+3)& (0+255),b
 26840  004356  ECE4  F03C         	call	___lldiv	;wreg free
 26841  00435A  C060  F06D         	movff	?___lldiv,SwTimerSetTimeout@timeout
 26842  00435E  C061  F06E         	movff	?___lldiv+1,SwTimerSetTimeout@timeout+1
 26843  004362  C062  F06F         	movff	?___lldiv+2,SwTimerSetTimeout@timeout+2
 26844  004366  C063  F070         	movff	?___lldiv+3,SwTimerSetTimeout@timeout+3
 26845  00436A  0101               	movlb	1	; () banked
 26846  00436C  517D               	movf	(_RadioConfiguration+40)& (0+255),w,b
 26847  00436E  EC01  F045         	call	_SwTimerSetTimeout
 26848                           
 26849                           ;radio_driver_SX1276.c: 938: SwTimerStart(RadioConfiguration.fskRxWindowTimerId);
 26850  004372  0101               	movlb	1	; () banked
 26851  004374  517D               	movf	(_RadioConfiguration+40)& (0+255),w,b
 26852  004376  ECB4  F03A         	call	_SwTimerStart
 26853  00437A                     l303:
 26854                           
 26855                           ;radio_driver_SX1276.c: 939: }
 26856                           ;radio_driver_SX1276.c: 940: }
 26857                           ;radio_driver_SX1276.c: 942: if (0 != RadioConfiguration.watchdogTimerTimeout)
 26858  00437A  0101               	movlb	1	; () banked
 26859  00437C  517F               	movf	(_RadioConfiguration+42)& (0+255),w,b
 26860  00437E  1180               	iorwf	(_RadioConfiguration+43)& (0+255),w,b
 26861  004380  1181               	iorwf	(_RadioConfiguration+44)& (0+255),w,b
 26862  004382  1182               	iorwf	(_RadioConfiguration+45)& (0+255),w,b
 26863  004384  B4D8               	btfsc	status,2,c
 26864  004386  D061               	goto	l304
 26865                           
 26866                           ; BSR set to: 1
 26867                           ;radio_driver_SX1276.c: 943: {
 26868                           ;radio_driver_SX1276.c: 944: SwTimerSetTimeout(RadioConfiguration.watchdogTimerId, ((Rad
      +                          ioConfiguration.watchdogTimerTimeout) < 0x000FFFFFUL ? ( (((uint32_t)(RadioConfiguration
      +                          .watchdogTimerTimeout)) << (12)) / 125UL ) : ( (((uint32_t)(RadioConfiguration.watchdogT
      +                          imerTimeout)) /
 26869  004388  5182               	movf	(_RadioConfiguration+45)& (0+255),w,b
 26870  00438A  E107               	bnz	u9190
 26871  00438C  297F               	incf	(_RadioConfiguration+42)& (0+255),w,b
 26872  00438E  0EFF               	movlw	255
 26873  004390  5980               	subwfb	(_RadioConfiguration+43)& (0+255),w,b
 26874  004392  0E0F               	movlw	15
 26875  004394  5981               	subwfb	(_RadioConfiguration+44)& (0+255),w,b
 26876  004396  A0D8               	btfss	status,0,c
 26877  004398  D01D               	goto	l306
 26878  00439A                     u9190:
 26879                           
 26880                           ; BSR set to: 1
 26881  00439A  C17F  F060         	movff	_RadioConfiguration+42,___lldiv@dividend
 26882  00439E  C180  F061         	movff	_RadioConfiguration+43,___lldiv@dividend+1
 26883  0043A2  C181  F062         	movff	_RadioConfiguration+44,___lldiv@dividend+2
 26884  0043A6  C182  F063         	movff	_RadioConfiguration+45,___lldiv@dividend+3
 26885  0043AA  0E7D               	movlw	125
 26886  0043AC  0100               	movlb	0	; () banked
 26887  0043AE  6F64               	movwf	___lldiv@divisor& (0+255),b
 26888  0043B0  0E00               	movlw	0
 26889  0043B2  6F65               	movwf	(___lldiv@divisor+1)& (0+255),b
 26890  0043B4  0E00               	movlw	0
 26891  0043B6  6F66               	movwf	(___lldiv@divisor+2)& (0+255),b
 26892  0043B8  0E00               	movlw	0
 26893  0043BA  6F67               	movwf	(___lldiv@divisor+3)& (0+255),b
 26894  0043BC  ECE4  F03C         	call	___lldiv	;wreg free
 26895  0043C0  0E0C               	movlw	12
 26896  0043C2                     u9205:
 26897  0043C2  90D8               	bcf	status,0,c
 26898  0043C4  0100               	movlb	0	; () banked
 26899  0043C6  3760               	rlcf	?___lldiv& (0+255),f,b
 26900  0043C8  3761               	rlcf	(?___lldiv+1)& (0+255),f,b
 26901  0043CA  3762               	rlcf	(?___lldiv+2)& (0+255),f,b
 26902  0043CC  3763               	rlcf	(?___lldiv+3)& (0+255),f,b
 26903  0043CE  2EE8               	decfsz	wreg,f,c
 26904  0043D0  D7F8               	goto	u9205
 26905  0043D2  D023               	goto	L18
 26906  0043D4                     l306:
 26907                           
 26908                           ; BSR set to: 0
 26909  0043D4  C17F  F0B3         	movff	_RadioConfiguration+42,??_RADIO_ReceiveStart
 26910  0043D8  C180  F0B4         	movff	_RadioConfiguration+43,??_RADIO_ReceiveStart+1
 26911  0043DC  C181  F0B5         	movff	_RadioConfiguration+44,??_RADIO_ReceiveStart+2
 26912  0043E0  C182  F0B6         	movff	_RadioConfiguration+45,??_RADIO_ReceiveStart+3
 26913  0043E4  0E0C               	movlw	12
 26914  0043E6                     u9215:
 26915  0043E6  90D8               	bcf	status,0,c
 26916  0043E8  0100               	movlb	0	; () banked
 26917  0043EA  37B3               	rlcf	??_RADIO_ReceiveStart& (0+255),f,b
 26918  0043EC  37B4               	rlcf	(??_RADIO_ReceiveStart+1)& (0+255),f,b
 26919  0043EE  37B5               	rlcf	(??_RADIO_ReceiveStart+2)& (0+255),f,b
 26920  0043F0  37B6               	rlcf	(??_RADIO_ReceiveStart+3)& (0+255),f,b
 26921  0043F2  2EE8               	decfsz	wreg,f,c
 26922  0043F4  D7F8               	goto	u9215
 26923  0043F6  C0B3  F060         	movff	??_RADIO_ReceiveStart,___lldiv@dividend
 26924  0043FA  C0B4  F061         	movff	??_RADIO_ReceiveStart+1,___lldiv@dividend+1
 26925  0043FE  C0B5  F062         	movff	??_RADIO_ReceiveStart+2,___lldiv@dividend+2
 26926  004402  C0B6  F063         	movff	??_RADIO_ReceiveStart+3,___lldiv@dividend+3
 26927  004406  0E7D               	movlw	125
 26928  004408  6F64               	movwf	___lldiv@divisor& (0+255),b
 26929  00440A  0E00               	movlw	0
 26930  00440C  6F65               	movwf	(___lldiv@divisor+1)& (0+255),b
 26931  00440E  0E00               	movlw	0
 26932  004410  6F66               	movwf	(___lldiv@divisor+2)& (0+255),b
 26933  004412  0E00               	movlw	0
 26934  004414  6F67               	movwf	(___lldiv@divisor+3)& (0+255),b
 26935  004416  ECE4  F03C         	call	___lldiv	;wreg free
 26936  00441A                     L18:
 26937  00441A  C060  F0B7         	movff	?___lldiv,_RADIO_ReceiveStart$521
 26938  00441E  C061  F0B8         	movff	?___lldiv+1,_RADIO_ReceiveStart$521+1
 26939  004422  C062  F0B9         	movff	?___lldiv+2,_RADIO_ReceiveStart$521+2
 26940  004426  C063  F0BA         	movff	?___lldiv+3,_RADIO_ReceiveStart$521+3
 26941  00442A  C0B7  F06D         	movff	_RADIO_ReceiveStart$521,SwTimerSetTimeout@timeout
 26942  00442E  C0B8  F06E         	movff	_RADIO_ReceiveStart$521+1,SwTimerSetTimeout@timeout+1
 26943  004432  C0B9  F06F         	movff	_RADIO_ReceiveStart$521+2,SwTimerSetTimeout@timeout+2
 26944  004436  C0BA  F070         	movff	_RADIO_ReceiveStart$521+3,SwTimerSetTimeout@timeout+3
 26945  00443A  0101               	movlb	1	; () banked
 26946  00443C  517E               	movf	(_RadioConfiguration+41)& (0+255),w,b
 26947  00443E  EC01  F045         	call	_SwTimerSetTimeout
 26948                           
 26949                           ;radio_driver_SX1276.c: 945: SwTimerStart(RadioConfiguration.watchdogTimerId);
 26950  004442  0101               	movlb	1	; () banked
 26951  004444  517E               	movf	(_RadioConfiguration+41)& (0+255),w,b
 26952  004446  ECB4  F03A         	call	_SwTimerStart
 26953  00444A                     l304:
 26954                           
 26955                           ;radio_driver_SX1276.c: 946: }
 26956                           ;radio_driver_SX1276.c: 947: return ERR_NONE;
 26957  00444A  0E00               	movlw	0
 26958  00444C  0100               	movlb	0	; () banked
 26959  00444E  6FB2               	movwf	(?_RADIO_ReceiveStart+1)& (0+255),b
 26960  004450  0E00               	movlw	0
 26961  004452  6FB1               	movwf	?_RADIO_ReceiveStart& (0+255),b
 26962  004454  0012               	return	
 26963  004456                     __end_of_RADIO_ReceiveStart:
 26964                           	opt stack 0
 26965                           tosu	equ	0xFFF
 26966                           tosh	equ	0xFFE
 26967                           tosl	equ	0xFFD
 26968                           pclath	equ	0xFFA
 26969                           tblptru	equ	0xFF8
 26970                           tblptrh	equ	0xFF7
 26971                           tblptrl	equ	0xFF6
 26972                           tablat	equ	0xFF5
 26973                           prodh	equ	0xFF4
 26974                           prodl	equ	0xFF3
 26975                           intcon	equ	0xFF2
 26976                           intcon2	equ	0xFF1
 26977                           intcon3	equ	0xFF0
 26978                           indf0	equ	0xFEF
 26979                           postinc0	equ	0xFEE
 26980                           fsr0h	equ	0xFEA
 26981                           fsr0l	equ	0xFE9
 26982                           wreg	equ	0xFE8
 26983                           postinc1	equ	0xFE6
 26984                           postdec1	equ	0xFE5
 26985                           plusw1	equ	0xFE3
 26986                           fsr1h	equ	0xFE2
 26987                           fsr1l	equ	0xFE1
 26988                           indf2	equ	0xFDF
 26989                           postinc2	equ	0xFDE
 26990                           postdec2	equ	0xFDD
 26991                           plusw2	equ	0xFDB
 26992                           fsr2h	equ	0xFDA
 26993                           fsr2l	equ	0xFD9
 26994                           status	equ	0xFD8
 26995                           
 26996 ;; *************** function _ConfigureRadioRx *****************
 26997 ;; Defined at:
 26998 ;;		line 2019 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 26999 ;; Parameters:    Size  Location     Type
 27000 ;;  dataRate        1    wreg     unsigned char 
 27001 ;;  freq            4   19[BANK0 ] unsigned long 
 27002 ;; Auto vars:     Size  Location     Type
 27003 ;;  dataRate        1   23[BANK0 ] unsigned char 
 27004 ;; Return value:  Size  Location     Type
 27005 ;;                  1    wreg      void 
 27006 ;; Registers used:
 27007 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 27008 ;; Tracked objects:
 27009 ;;		On entry : 0/0
 27010 ;;		On exit  : 0/0
 27011 ;;		Unchanged: 0/0
 27012 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27013 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27014 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27015 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27016 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27017 ;;Total ram usage:        5 bytes
 27018 ;; Hardware stack levels used:    1
 27019 ;; Hardware stack levels required when called:   10
 27020 ;; This function calls:
 27021 ;;		_ConfigureRadio
 27022 ;;		_RADIO_SetCRC
 27023 ;;		_RADIO_SetIQInverted
 27024 ;; This function is called by:
 27025 ;;		_LORAWAN_ReceiveWindow1Callback
 27026 ;;		_LORAWAN_ReceiveWindow2Callback
 27027 ;;		_LORAWAN_EnterContinuousReceive
 27028 ;; This function uses a non-reentrant model
 27029 ;;
 27030                           
 27031                           	psect	text125
 27032  008F2C                     __ptext125:
 27033                           	opt stack 0
 27034  008F2C                     _ConfigureRadioRx:
 27035                           	opt stack 15
 27036                           
 27037                           ; BSR set to: 0
 27038                           ;incstack = 0
 27039                           ;ConfigureRadioRx@dataRate stored from wreg
 27040  008F2C  0100               	movlb	0	; () banked
 27041  008F2E  6F77               	movwf	ConfigureRadioRx@dataRate& (0+255),b
 27042                           
 27043                           ;lorawan.c: 2021: ConfigureRadio(dataRate, freq);
 27044  008F30  C073  F06E         	movff	ConfigureRadioRx@freq,ConfigureRadio@freq
 27045  008F34  C074  F06F         	movff	ConfigureRadioRx@freq+1,ConfigureRadio@freq+1
 27046  008F38  C075  F070         	movff	ConfigureRadioRx@freq+2,ConfigureRadio@freq+2
 27047  008F3C  C076  F071         	movff	ConfigureRadioRx@freq+3,ConfigureRadio@freq+3
 27048  008F40  0100               	movlb	0	; () banked
 27049  008F42  5177               	movf	ConfigureRadioRx@dataRate& (0+255),w,b
 27050  008F44  EC6E  F039         	call	_ConfigureRadio
 27051                           
 27052                           ;lorawan.c: 2022: RADIO_SetCRC(0);
 27053  008F48  0E00               	movlw	0
 27054  008F4A  EC78  F04A         	call	_RADIO_SetCRC
 27055                           
 27056                           ;lorawan.c: 2023: RADIO_SetIQInverted(1);
 27057  008F4E  0E01               	movlw	1
 27058  008F50  EC73  F04A         	call	_RADIO_SetIQInverted
 27059  008F54  0012               	return		;funcret
 27060  008F56                     __end_of_ConfigureRadioRx:
 27061                           	opt stack 0
 27062                           tosu	equ	0xFFF
 27063                           tosh	equ	0xFFE
 27064                           tosl	equ	0xFFD
 27065                           pclath	equ	0xFFA
 27066                           tblptru	equ	0xFF8
 27067                           tblptrh	equ	0xFF7
 27068                           tblptrl	equ	0xFF6
 27069                           tablat	equ	0xFF5
 27070                           prodh	equ	0xFF4
 27071                           prodl	equ	0xFF3
 27072                           intcon	equ	0xFF2
 27073                           intcon2	equ	0xFF1
 27074                           intcon3	equ	0xFF0
 27075                           indf0	equ	0xFEF
 27076                           postinc0	equ	0xFEE
 27077                           fsr0h	equ	0xFEA
 27078                           fsr0l	equ	0xFE9
 27079                           wreg	equ	0xFE8
 27080                           postinc1	equ	0xFE6
 27081                           postdec1	equ	0xFE5
 27082                           plusw1	equ	0xFE3
 27083                           fsr1h	equ	0xFE2
 27084                           fsr1l	equ	0xFE1
 27085                           indf2	equ	0xFDF
 27086                           postinc2	equ	0xFDE
 27087                           postdec2	equ	0xFDD
 27088                           plusw2	equ	0xFDB
 27089                           fsr2h	equ	0xFDA
 27090                           fsr2l	equ	0xFD9
 27091                           status	equ	0xFD8
 27092                           
 27093 ;; *************** function _INTERRUPT_GetDioStatus *****************
 27094 ;; Defined at:
 27095 ;;		line 48 in file "mcc_generated_files/LoRaWAN/interrupt_manager_lora_addons.c"
 27096 ;; Parameters:    Size  Location     Type
 27097 ;;		None
 27098 ;; Auto vars:     Size  Location     Type
 27099 ;;  a               1    0[BANK0 ] unsigned char 
 27100 ;; Return value:  Size  Location     Type
 27101 ;;                  1    wreg      unsigned char 
 27102 ;; Registers used:
 27103 ;;		wreg, status,2
 27104 ;; Tracked objects:
 27105 ;;		On entry : 0/0
 27106 ;;		On exit  : 0/0
 27107 ;;		Unchanged: 0/0
 27108 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27109 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27110 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27111 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27112 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27113 ;;Total ram usage:        1 bytes
 27114 ;; Hardware stack levels used:    1
 27115 ;; Hardware stack levels required when called:    7
 27116 ;; This function calls:
 27117 ;;		Nothing
 27118 ;; This function is called by:
 27119 ;;		_LORAWAN_Mainloop
 27120 ;; This function uses a non-reentrant model
 27121 ;;
 27122                           
 27123                           	psect	text126
 27124  009374                     __ptext126:
 27125                           	opt stack 0
 27126  009374                     _INTERRUPT_GetDioStatus:
 27127                           	opt stack 22
 27128                           
 27129                           ;interrupt_manager_lora_addons.c: 50: uint8_t a;
 27130                           ;interrupt_manager_lora_addons.c: 51: (INTCONbits.GIE = 0);
 27131                           
 27132                           ;incstack = 0
 27133  009374  9EF2               	bcf	intcon,7,c	;volatile
 27134                           
 27135                           ;interrupt_manager_lora_addons.c: 52: a = dioStatus;
 27136  009376  C154  F060         	movff	_dioStatus,INTERRUPT_GetDioStatus@a	;volatile
 27137                           
 27138                           ;interrupt_manager_lora_addons.c: 53: dioStatus = 0;
 27139  00937A  0E00               	movlw	0
 27140  00937C  0101               	movlb	1	; () banked
 27141  00937E  6F54               	movwf	_dioStatus& (0+255),b	;volatile
 27142                           
 27143                           ; BSR set to: 1
 27144                           ;interrupt_manager_lora_addons.c: 54: (INTCONbits.GIE = 1);
 27145  009380  8EF2               	bsf	intcon,7,c	;volatile
 27146                           
 27147                           ;interrupt_manager_lora_addons.c: 55: return a;
 27148  009382  0100               	movlb	0	; () banked
 27149  009384  5160               	movf	INTERRUPT_GetDioStatus@a& (0+255),w,b
 27150  009386  0012               	return	
 27151  009388                     __end_of_INTERRUPT_GetDioStatus:
 27152                           	opt stack 0
 27153                           tosu	equ	0xFFF
 27154                           tosh	equ	0xFFE
 27155                           tosl	equ	0xFFD
 27156                           pclath	equ	0xFFA
 27157                           tblptru	equ	0xFF8
 27158                           tblptrh	equ	0xFF7
 27159                           tblptrl	equ	0xFF6
 27160                           tablat	equ	0xFF5
 27161                           prodh	equ	0xFF4
 27162                           prodl	equ	0xFF3
 27163                           intcon	equ	0xFF2
 27164                           intcon2	equ	0xFF1
 27165                           intcon3	equ	0xFF0
 27166                           indf0	equ	0xFEF
 27167                           postinc0	equ	0xFEE
 27168                           fsr0h	equ	0xFEA
 27169                           fsr0l	equ	0xFE9
 27170                           wreg	equ	0xFE8
 27171                           postinc1	equ	0xFE6
 27172                           postdec1	equ	0xFE5
 27173                           plusw1	equ	0xFE3
 27174                           fsr1h	equ	0xFE2
 27175                           fsr1l	equ	0xFE1
 27176                           indf2	equ	0xFDF
 27177                           postinc2	equ	0xFDE
 27178                           postdec2	equ	0xFDD
 27179                           plusw2	equ	0xFDB
 27180                           fsr2h	equ	0xFDA
 27181                           fsr2l	equ	0xFD9
 27182                           status	equ	0xFD8
 27183                           
 27184 ;; *************** function _LORAWAN_Join *****************
 27185 ;; Defined at:
 27186 ;;		line 115 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 27187 ;; Parameters:    Size  Location     Type
 27188 ;;  activationTy    1    wreg     enum E7213
 27189 ;; Auto vars:     Size  Location     Type
 27190 ;;  activationTy    1  125[BANK0 ] enum E7213
 27191 ;;  result          1  124[BANK0 ] enum E7190
 27192 ;;  bufferIndex     1  123[BANK0 ] unsigned char 
 27193 ;; Return value:  Size  Location     Type
 27194 ;;                  1    wreg      enum E7190
 27195 ;; Registers used:
 27196 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 27197 ;; Tracked objects:
 27198 ;;		On entry : 0/0
 27199 ;;		On exit  : 0/0
 27200 ;;		Unchanged: 0/0
 27201 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27202 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27203 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27204 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27205 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27206 ;;Total ram usage:        3 bytes
 27207 ;; Hardware stack levels used:    1
 27208 ;; Hardware stack levels required when called:   14
 27209 ;; This function calls:
 27210 ;;		_PrepareJoinRequestFrame
 27211 ;;		_RADIO_Transmit
 27212 ;;		_SelectChannelForTransmission
 27213 ;;		_SwTimerSetTimeout
 27214 ;;		_SwTimerStart
 27215 ;;		_UpdateJoinInProgress
 27216 ;; This function is called by:
 27217 ;;		_main
 27218 ;; This function uses a non-reentrant model
 27219 ;;
 27220                           
 27221                           	psect	text127
 27222  007384                     __ptext127:
 27223                           	opt stack 0
 27224  007384                     _LORAWAN_Join:
 27225                           	opt stack 16
 27226                           
 27227                           ; BSR set to: 0
 27228                           ;incstack = 0
 27229                           ;LORAWAN_Join@activationTypeNew stored from wreg
 27230  007384  0100               	movlb	0	; () banked
 27231  007386  6FDD               	movwf	LORAWAN_Join@activationTypeNew& (0+255),b
 27232                           
 27233                           ;lorawan.c: 117: uint8_t bufferIndex;
 27234                           ;lorawan.c: 118: LorawanError_t result;
 27235                           ;lorawan.c: 120: if (loRa.macStatus.macPause == 1)
 27236  007388  0102               	movlb	2	; () banked
 27237  00738A  B10D               	btfsc	(_loRa+3)& (0+255),0,b
 27238  00738C  0012               	return	
 27239                           
 27240                           ; BSR set to: 2
 27241                           ;lorawan.c: 123: }
 27242                           ;lorawan.c: 125: if (loRa.macStatus.silentImmediately == 1)
 27243                           
 27244                           ; BSR set to: 2
 27245                           ;lorawan.c: 121: {
 27246                           ;lorawan.c: 122: return MAC_PAUSED;
 27247                           ;	Return value of _LORAWAN_Join is never used
 27248  00738E  BF0C               	btfsc	(_loRa+2)& (0+255),7,b
 27249  007390  0012               	return	
 27250                           
 27251                           ; BSR set to: 2
 27252                           ;lorawan.c: 128: }
 27253                           ;lorawan.c: 130: if (loRa.macStatus.macState != IDLE)
 27254                           
 27255                           ; BSR set to: 2
 27256                           
 27257                           ; BSR set to: 2
 27258                           ;lorawan.c: 126: {
 27259                           ;lorawan.c: 127: return SILENT_IMMEDIATELY_ACTIVE;
 27260                           ;	Return value of _LORAWAN_Join is never used
 27261  007392  510C               	movf	(_loRa+2)& (0+255),w,b
 27262  007394  0B0F               	andlw	15
 27263  007396  0900               	iorlw	0
 27264  007398  A4D8               	btfss	status,2,c
 27265  00739A  0012               	return	
 27266                           
 27267                           ; BSR set to: 2
 27268                           ;lorawan.c: 133: }
 27269                           ;lorawan.c: 135: loRa.activationParameters.activationType = activationTypeNew;
 27270                           
 27271                           ; BSR set to: 2
 27272                           ;lorawan.c: 131: {
 27273                           ;lorawan.c: 132: return MAC_STATE_NOT_READY_FOR_TRANSMISSION;
 27274                           ;	Return value of _LORAWAN_Join is never used
 27275  00739C  C0DD  F227         	movff	LORAWAN_Join@activationTypeNew,_loRa+29
 27276                           
 27277                           ; BSR set to: 2
 27278                           ;lorawan.c: 137: if (OTAA == activationTypeNew)
 27279  0073A0  0100               	movlb	0	; () banked
 27280  0073A2  51DD               	movf	LORAWAN_Join@activationTypeNew& (0+255),w,b
 27281  0073A4  A4D8               	btfss	status,2,c
 27282  0073A6  D024               	goto	l749
 27283                           
 27284                           ; BSR set to: 0
 27285                           ;lorawan.c: 138: {
 27286                           ;lorawan.c: 140: if ( (loRa.macKeys.deviceEui == 0) || (loRa.macKeys.applicationEui == 0
      +                          ) || (loRa.macKeys.applicationKey == 0) )
 27287  0073A8  0102               	movlb	2	; () banked
 27288  0073AA  A1AF               	btfss	(_loRa+165)& (0+255),0,b
 27289  0073AC  0012               	return	
 27290                           
 27291                           ; BSR set to: 2
 27292  0073AE  A3AF               	btfss	(_loRa+165)& (0+255),1,b
 27293  0073B0  0012               	return	
 27294                           
 27295                           ; BSR set to: 2
 27296  0073B2  A7AF               	btfss	(_loRa+165)& (0+255),3,b
 27297  0073B4  0012               	return	
 27298                           
 27299                           ; BSR set to: 2
 27300                           ;lorawan.c: 144: else
 27301                           ;lorawan.c: 145: {
 27302                           ;lorawan.c: 146: bufferIndex = PrepareJoinRequestFrame ();
 27303                           
 27304                           ; BSR set to: 2
 27305                           
 27306                           ; BSR set to: 2
 27307                           ;lorawan.c: 143: }
 27308                           
 27309                           ; BSR set to: 2
 27310                           ;lorawan.c: 141: {
 27311                           ;lorawan.c: 142: return KEYS_NOT_INITIALIZED;
 27312                           ;	Return value of _LORAWAN_Join is never used
 27313  0073B6  ECCE  F026         	call	_PrepareJoinRequestFrame	;wreg free
 27314  0073BA  0100               	movlb	0	; () banked
 27315  0073BC  6FDB               	movwf	LORAWAN_Join@bufferIndex& (0+255),b
 27316                           
 27317                           ;lorawan.c: 147: result = SelectChannelForTransmission (0);
 27318  0073BE  0E00               	movlw	0
 27319  0073C0  EC09  F03F         	call	_SelectChannelForTransmission
 27320  0073C4  0100               	movlb	0	; () banked
 27321  0073C6  6FDC               	movwf	LORAWAN_Join@result& (0+255),b
 27322                           
 27323                           ; BSR set to: 0
 27324                           ;lorawan.c: 149: if (result == OK)
 27325  0073C8  51DC               	movf	LORAWAN_Join@result& (0+255),w,b
 27326  0073CA  A4D8               	btfss	status,2,c
 27327  0073CC  0012               	return	
 27328                           
 27329                           ; BSR set to: 0
 27330                           ;lorawan.c: 150: {
 27331                           ;lorawan.c: 151: if (RADIO_Transmit(macBuffer, bufferIndex) == OK)
 27332  0073CE  0E8F               	movlw	low _macBuffer
 27333  0073D0  6FB1               	movwf	RADIO_Transmit@buffer& (0+255),b
 27334  0073D2  0E06               	movlw	high _macBuffer
 27335  0073D4  6FB2               	movwf	(RADIO_Transmit@buffer+1)& (0+255),b
 27336  0073D6  C0DB  F0B3         	movff	LORAWAN_Join@bufferIndex,RADIO_Transmit@bufferLen
 27337  0073DA  ECF7  F01F         	call	_RADIO_Transmit	;wreg free
 27338  0073DE  0100               	movlb	0	; () banked
 27339  0073E0  51B1               	movf	?_RADIO_Transmit& (0+255),w,b
 27340  0073E2  11B2               	iorwf	(?_RADIO_Transmit+1)& (0+255),w,b
 27341  0073E4  A4D8               	btfss	status,2,c
 27342  0073E6  0012               	return	
 27343                           
 27344                           ; BSR set to: 0
 27345                           ;lorawan.c: 152: {
 27346                           ;lorawan.c: 153: UpdateJoinInProgress(TRANSMISSION_OCCURRING);
 27347  0073E8  0E01               	movlw	1
 27348  0073EA  EC67  F049         	call	_UpdateJoinInProgress
 27349                           
 27350                           ;lorawan.c: 164: }
 27351                           ;lorawan.c: 165: }
 27352                           ;lorawan.c: 166: }
 27353                           
 27354                           ;lorawan.c: 161: else
 27355                           ;lorawan.c: 162: {
 27356                           ;lorawan.c: 163: return result;
 27357                           ;	Return value of _LORAWAN_Join is never used
 27358                           
 27359                           ;lorawan.c: 159: }
 27360                           ;lorawan.c: 160: }
 27361                           
 27362                           ;lorawan.c: 156: else
 27363                           ;lorawan.c: 157: {
 27364                           ;lorawan.c: 158: return MAC_STATE_NOT_READY_FOR_TRANSMISSION;
 27365                           ;	Return value of _LORAWAN_Join is never used
 27366                           
 27367                           ;lorawan.c: 155: }
 27368                           
 27369                           ;lorawan.c: 154: return OK;
 27370                           ;	Return value of _LORAWAN_Join is never used
 27371  0073EE  0012               	return	
 27372  0073F0                     l749:
 27373                           
 27374                           ; BSR set to: 0
 27375                           ;lorawan.c: 167: else
 27376                           ;lorawan.c: 168: {
 27377                           ;lorawan.c: 170: if ( (loRa.macKeys.applicationSessionKey == 0) || (loRa.macKeys.network
      +                          SessionKey == 0) || (loRa.macKeys.deviceAddress == 0) )
 27378  0073F0  0102               	movlb	2	; () banked
 27379  0073F2  ABAF               	btfss	(_loRa+165)& (0+255),5,b
 27380  0073F4  0012               	return	
 27381                           
 27382                           ; BSR set to: 2
 27383  0073F6  A9AF               	btfss	(_loRa+165)& (0+255),4,b
 27384  0073F8  0012               	return	
 27385                           
 27386                           ; BSR set to: 2
 27387  0073FA  A5AF               	btfss	(_loRa+165)& (0+255),2,b
 27388  0073FC  0012               	return	
 27389                           
 27390                           ; BSR set to: 2
 27391                           ;lorawan.c: 174: else
 27392                           ;lorawan.c: 175: {
 27393                           ;lorawan.c: 176: UpdateJoinInProgress(ABP_DELAY);
 27394                           
 27395                           ; BSR set to: 2
 27396                           
 27397                           ; BSR set to: 2
 27398                           ;lorawan.c: 173: }
 27399                           
 27400                           ; BSR set to: 2
 27401                           ;lorawan.c: 171: {
 27402                           ;lorawan.c: 172: return KEYS_NOT_INITIALIZED;
 27403                           ;	Return value of _LORAWAN_Join is never used
 27404  0073FE  0E07               	movlw	7
 27405  007400  EC67  F049         	call	_UpdateJoinInProgress
 27406                           
 27407                           ;lorawan.c: 177: SwTimerSetTimeout(loRa.abpJoinTimerId, ( (((uint32_t)(20)) << (12)) / 1
      +                          25UL ));
 27408  007404  0E8F               	movlw	143
 27409  007406  0100               	movlb	0	; () banked
 27410  007408  6F6D               	movwf	SwTimerSetTimeout@timeout& (0+255),b
 27411  00740A  0E02               	movlw	2
 27412  00740C  6F6E               	movwf	(SwTimerSetTimeout@timeout+1)& (0+255),b
 27413  00740E  0E00               	movlw	0
 27414  007410  6F6F               	movwf	(SwTimerSetTimeout@timeout+2)& (0+255),b
 27415  007412  0E00               	movlw	0
 27416  007414  6F70               	movwf	(SwTimerSetTimeout@timeout+3)& (0+255),b
 27417  007416  0102               	movlb	2	; () banked
 27418  007418  51FD               	movf	(_loRa+243)& (0+255),w,b
 27419  00741A  EC01  F045         	call	_SwTimerSetTimeout
 27420                           
 27421                           ;lorawan.c: 178: SwTimerStart(loRa.abpJoinTimerId);
 27422  00741E  0102               	movlb	2	; () banked
 27423  007420  51FD               	movf	(_loRa+243)& (0+255),w,b
 27424  007422  ECB4  F03A         	call	_SwTimerStart
 27425                           
 27426                           ;lorawan.c: 180: return OK;
 27427                           ;	Return value of _LORAWAN_Join is never used
 27428  007426  0012               	return	
 27429  007428                     __end_of_LORAWAN_Join:
 27430                           	opt stack 0
 27431                           tosu	equ	0xFFF
 27432                           tosh	equ	0xFFE
 27433                           tosl	equ	0xFFD
 27434                           pclath	equ	0xFFA
 27435                           tblptru	equ	0xFF8
 27436                           tblptrh	equ	0xFF7
 27437                           tblptrl	equ	0xFF6
 27438                           tablat	equ	0xFF5
 27439                           prodh	equ	0xFF4
 27440                           prodl	equ	0xFF3
 27441                           intcon	equ	0xFF2
 27442                           intcon2	equ	0xFF1
 27443                           intcon3	equ	0xFF0
 27444                           indf0	equ	0xFEF
 27445                           postinc0	equ	0xFEE
 27446                           fsr0h	equ	0xFEA
 27447                           fsr0l	equ	0xFE9
 27448                           wreg	equ	0xFE8
 27449                           postinc1	equ	0xFE6
 27450                           postdec1	equ	0xFE5
 27451                           plusw1	equ	0xFE3
 27452                           fsr1h	equ	0xFE2
 27453                           fsr1l	equ	0xFE1
 27454                           indf2	equ	0xFDF
 27455                           postinc2	equ	0xFDE
 27456                           postdec2	equ	0xFDD
 27457                           plusw2	equ	0xFDB
 27458                           fsr2h	equ	0xFDA
 27459                           fsr2l	equ	0xFD9
 27460                           status	equ	0xFD8
 27461                           
 27462 ;; *************** function _UpdateJoinInProgress *****************
 27463 ;; Defined at:
 27464 ;;		line 2037 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 27465 ;; Parameters:    Size  Location     Type
 27466 ;;  state           1    wreg     unsigned char 
 27467 ;; Auto vars:     Size  Location     Type
 27468 ;;  state           1    0[BANK0 ] unsigned char 
 27469 ;; Return value:  Size  Location     Type
 27470 ;;                  1    wreg      void 
 27471 ;; Registers used:
 27472 ;;		wreg, status,2, status,0
 27473 ;; Tracked objects:
 27474 ;;		On entry : 0/0
 27475 ;;		On exit  : 0/0
 27476 ;;		Unchanged: 0/0
 27477 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27478 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27479 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27480 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27481 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27482 ;;Total ram usage:        1 bytes
 27483 ;; Hardware stack levels used:    1
 27484 ;; Hardware stack levels required when called:    7
 27485 ;; This function calls:
 27486 ;;		Nothing
 27487 ;; This function is called by:
 27488 ;;		_LORAWAN_Join
 27489 ;; This function uses a non-reentrant model
 27490 ;;
 27491                           
 27492                           	psect	text128
 27493  0092CE                     __ptext128:
 27494                           	opt stack 0
 27495  0092CE                     _UpdateJoinInProgress:
 27496                           	opt stack 22
 27497                           
 27498                           ;incstack = 0
 27499                           ;UpdateJoinInProgress@state stored from wreg
 27500  0092CE  0100               	movlb	0	; () banked
 27501  0092D0  6F60               	movwf	UpdateJoinInProgress@state& (0+255),b
 27502                           
 27503                           ;lorawan.c: 2040: loRa.macStatus.networkJoined = 0;
 27504  0092D2  0102               	movlb	2	; () banked
 27505  0092D4  990C               	bcf	(_loRa+2)& (0+255),4,b
 27506                           
 27507                           ;lorawan.c: 2041: loRa.lorawanMacStatus.joining = 1;
 27508  0092D6  850A               	bsf	_loRa& (0+255),2,b
 27509                           
 27510                           ; BSR set to: 2
 27511                           ;lorawan.c: 2042: loRa.macStatus.macState = state;
 27512  0092D8  510C               	movf	(_loRa+2)& (0+255),w,b
 27513  0092DA  0100               	movlb	0	; () banked
 27514  0092DC  1960               	xorwf	UpdateJoinInProgress@state& (0+255),w,b
 27515  0092DE  0BF0               	andlw	-16
 27516  0092E0  1960               	xorwf	UpdateJoinInProgress@state& (0+255),w,b
 27517  0092E2  0102               	movlb	2	; () banked
 27518  0092E4  6F0C               	movwf	(_loRa+2)& (0+255),b
 27519                           
 27520                           ; BSR set to: 2
 27521  0092E6  0012               	return		;funcret
 27522  0092E8                     __end_of_UpdateJoinInProgress:
 27523                           	opt stack 0
 27524                           tosu	equ	0xFFF
 27525                           tosh	equ	0xFFE
 27526                           tosl	equ	0xFFD
 27527                           pclath	equ	0xFFA
 27528                           tblptru	equ	0xFF8
 27529                           tblptrh	equ	0xFF7
 27530                           tblptrl	equ	0xFF6
 27531                           tablat	equ	0xFF5
 27532                           prodh	equ	0xFF4
 27533                           prodl	equ	0xFF3
 27534                           intcon	equ	0xFF2
 27535                           intcon2	equ	0xFF1
 27536                           intcon3	equ	0xFF0
 27537                           indf0	equ	0xFEF
 27538                           postinc0	equ	0xFEE
 27539                           fsr0h	equ	0xFEA
 27540                           fsr0l	equ	0xFE9
 27541                           wreg	equ	0xFE8
 27542                           postinc1	equ	0xFE6
 27543                           postdec1	equ	0xFE5
 27544                           plusw1	equ	0xFE3
 27545                           fsr1h	equ	0xFE2
 27546                           fsr1l	equ	0xFE1
 27547                           indf2	equ	0xFDF
 27548                           postinc2	equ	0xFDE
 27549                           postdec2	equ	0xFDD
 27550                           plusw2	equ	0xFDB
 27551                           fsr2h	equ	0xFDA
 27552                           fsr2l	equ	0xFD9
 27553                           status	equ	0xFD8
 27554                           
 27555 ;; *************** function _SelectChannelForTransmission *****************
 27556 ;; Defined at:
 27557 ;;		line 919 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 27558 ;; Parameters:    Size  Location     Type
 27559 ;;  transmission    1    wreg     unsigned char 
 27560 ;; Auto vars:     Size  Location     Type
 27561 ;;  transmission    1   91[BANK0 ] unsigned char 
 27562 ;;  channelIndex    1   93[BANK0 ] unsigned char 
 27563 ;;  result          1   92[BANK0 ] enum E7249
 27564 ;; Return value:  Size  Location     Type
 27565 ;;                  1    wreg      enum E7190
 27566 ;; Registers used:
 27567 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 27568 ;; Tracked objects:
 27569 ;;		On entry : 0/0
 27570 ;;		On exit  : 0/0
 27571 ;;		Unchanged: 0/0
 27572 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27573 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27574 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27575 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27576 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27577 ;;Total ram usage:        3 bytes
 27578 ;; Hardware stack levels used:    1
 27579 ;; Hardware stack levels required when called:   11
 27580 ;; This function calls:
 27581 ;;		_ConfigureRadioTx
 27582 ;;		_SearchAvailableChannel
 27583 ;; This function is called by:
 27584 ;;		_LORAWAN_Join
 27585 ;;		_LORAWAN_Send
 27586 ;;		_AckRetransmissionCallback
 27587 ;;		_UnconfirmedTransmissionCallback
 27588 ;;		_LORAWAN_RxTimeout
 27589 ;; This function uses a non-reentrant model
 27590 ;;
 27591                           
 27592                           	psect	text129
 27593  007E12                     __ptext129:
 27594                           	opt stack 0
 27595  007E12                     _SelectChannelForTransmission:
 27596                           	opt stack 18
 27597                           
 27598                           ; BSR set to: 2
 27599                           ;incstack = 0
 27600                           ;SelectChannelForTransmission@transmissionType stored from wreg
 27601  007E12  0100               	movlb	0	; () banked
 27602  007E14  6FBB               	movwf	SelectChannelForTransmission@transmissionType& (0+255),b
 27603                           
 27604                           ;lorawan_eu.c: 921: LorawanError_t result = OK;
 27605  007E16  0E00               	movlw	0
 27606  007E18  0100               	movlb	0	; () banked
 27607  007E1A  6FBC               	movwf	SelectChannelForTransmission@result& (0+255),b
 27608                           
 27609                           ; BSR set to: 0
 27610                           ;lorawan_eu.c: 922: uint8_t channelIndex;
 27611                           ;lorawan_eu.c: 924: result = SearchAvailableChannel (16, transmissionType, &channelIndex
      +                          );
 27612  007E1C  C0BB  F0AF         	movff	SelectChannelForTransmission@transmissionType,SearchAvailableChannel@transmission
      +                          Type
 27613  007E20  0EBD               	movlw	low SelectChannelForTransmission@channelIndex
 27614  007E22  6FB0               	movwf	SearchAvailableChannel@channelIndex& (0+255),b
 27615  007E24  0E00               	movlw	high SelectChannelForTransmission@channelIndex
 27616  007E26  6FB1               	movwf	(SearchAvailableChannel@channelIndex+1)& (0+255),b
 27617  007E28  0E10               	movlw	16
 27618  007E2A  EC20  F02F         	call	_SearchAvailableChannel
 27619  007E2E  0100               	movlb	0	; () banked
 27620  007E30  6FBC               	movwf	SelectChannelForTransmission@result& (0+255),b
 27621                           
 27622                           ; BSR set to: 0
 27623                           ;lorawan_eu.c: 926: if (result == OK)
 27624  007E32  51BC               	movf	SelectChannelForTransmission@result& (0+255),w,b
 27625  007E34  A4D8               	btfss	status,2,c
 27626  007E36  D020               	goto	l2025
 27627                           
 27628                           ; BSR set to: 0
 27629                           ;lorawan_eu.c: 927: {
 27630                           ;lorawan_eu.c: 928: loRa.lastUsedChannelIndex = channelIndex;
 27631  007E38  C0BD  F2E4         	movff	SelectChannelForTransmission@channelIndex,_loRa+218
 27632                           
 27633                           ; BSR set to: 0
 27634                           ;lorawan_eu.c: 929: loRa.receiveWindow1Parameters.frequency = Channels[channelIndex].fre
      +                          quency;
 27635  007E3C  51BD               	movf	SelectChannelForTransmission@channelIndex& (0+255),w,b
 27636  007E3E  0D0E               	mullw	14
 27637  007E40  0E00               	movlw	low _Channels
 27638  007E42  24F3               	addwf	prodl,w,c
 27639  007E44  6ED9               	movwf	fsr2l,c
 27640  007E46  0E04               	movlw	high _Channels
 27641  007E48  20F4               	addwfc	prodh,w,c
 27642  007E4A  6EDA               	movwf	fsr2h,c
 27643  007E4C  CFDE F21D          	movff	postinc2,_loRa+19
 27644  007E50  CFDE F21E          	movff	postinc2,_loRa+20
 27645  007E54  CFDE F21F          	movff	postinc2,_loRa+21
 27646  007E58  CFDE F220          	movff	postinc2,_loRa+22
 27647                           
 27648                           ; BSR set to: 0
 27649                           ;lorawan_eu.c: 930: loRa.receiveWindow1Parameters.dataRate = loRa.currentDataRate;
 27650  007E5C  C2E9  F221         	movff	_loRa+223,_loRa+23
 27651                           
 27652                           ; BSR set to: 0
 27653                           ;lorawan_eu.c: 932: ConfigureRadioTx(loRa.receiveWindow1Parameters.dataRate, loRa.receiv
      +                          eWindow1Parameters.frequency);
 27654  007E60  C21D  F073         	movff	_loRa+19,ConfigureRadioTx@freq
 27655  007E64  C21E  F074         	movff	_loRa+20,ConfigureRadioTx@freq+1
 27656  007E68  C21F  F075         	movff	_loRa+21,ConfigureRadioTx@freq+2
 27657  007E6C  C220  F076         	movff	_loRa+22,ConfigureRadioTx@freq+3
 27658  007E70  0102               	movlb	2	; () banked
 27659  007E72  5121               	movf	(_loRa+23)& (0+255),w,b
 27660  007E74  EC24  F043         	call	_ConfigureRadioTx
 27661  007E78                     l2025:
 27662                           
 27663                           ;lorawan_eu.c: 933: }
 27664                           ;lorawan_eu.c: 934: return result;
 27665  007E78  0100               	movlb	0	; () banked
 27666  007E7A  51BC               	movf	SelectChannelForTransmission@result& (0+255),w,b
 27667  007E7C  0012               	return	
 27668  007E7E                     __end_of_SelectChannelForTransmission:
 27669                           	opt stack 0
 27670                           tosu	equ	0xFFF
 27671                           tosh	equ	0xFFE
 27672                           tosl	equ	0xFFD
 27673                           pclath	equ	0xFFA
 27674                           tblptru	equ	0xFF8
 27675                           tblptrh	equ	0xFF7
 27676                           tblptrl	equ	0xFF6
 27677                           tablat	equ	0xFF5
 27678                           prodh	equ	0xFF4
 27679                           prodl	equ	0xFF3
 27680                           intcon	equ	0xFF2
 27681                           intcon2	equ	0xFF1
 27682                           intcon3	equ	0xFF0
 27683                           indf0	equ	0xFEF
 27684                           postinc0	equ	0xFEE
 27685                           fsr0h	equ	0xFEA
 27686                           fsr0l	equ	0xFE9
 27687                           wreg	equ	0xFE8
 27688                           postinc1	equ	0xFE6
 27689                           postdec1	equ	0xFE5
 27690                           plusw1	equ	0xFE3
 27691                           fsr1h	equ	0xFE2
 27692                           fsr1l	equ	0xFE1
 27693                           indf2	equ	0xFDF
 27694                           postinc2	equ	0xFDE
 27695                           postdec2	equ	0xFDD
 27696                           plusw2	equ	0xFDB
 27697                           fsr2h	equ	0xFDA
 27698                           fsr2l	equ	0xFD9
 27699                           status	equ	0xFD8
 27700                           
 27701 ;; *************** function _SearchAvailableChannel *****************
 27702 ;; Defined at:
 27703 ;;		line 778 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 27704 ;; Parameters:    Size  Location     Type
 27705 ;;  maxChannels     1    wreg     unsigned char 
 27706 ;;  transmission    1   79[BANK0 ] unsigned char 
 27707 ;;  channelIndex    2   80[BANK0 ] PTR unsigned char 
 27708 ;;		 -> SelectChannelForTransmission@channelIndex(1), LORAWAN_RxDone@channelIndex(1), 
 27709 ;; Auto vars:     Size  Location     Type
 27710 ;;  maxChannels     1   88[BANK0 ] unsigned char 
 27711 ;;  i               1   90[BANK0 ] unsigned char 
 27712 ;;  randomNumber    1   89[BANK0 ] unsigned char 
 27713 ;;  result          1   87[BANK0 ] enum E7249
 27714 ;;  randomNumber    1   86[BANK0 ] unsigned char 
 27715 ;; Return value:  Size  Location     Type
 27716 ;;                  1    wreg      enum E7190
 27717 ;; Registers used:
 27718 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 27719 ;; Tracked objects:
 27720 ;;		On entry : 0/0
 27721 ;;		On exit  : 0/0
 27722 ;;		Unchanged: 0/0
 27723 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27724 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27725 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27726 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27727 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27728 ;;Total ram usage:       12 bytes
 27729 ;; Hardware stack levels used:    1
 27730 ;; Hardware stack levels required when called:   10
 27731 ;; This function calls:
 27732 ;;		_Random
 27733 ;; This function is called by:
 27734 ;;		_LORAWAN_RxDone
 27735 ;;		_SelectChannelForTransmission
 27736 ;; This function uses a non-reentrant model
 27737 ;;
 27738                           
 27739                           	psect	text130
 27740  005E40                     __ptext130:
 27741                           	opt stack 0
 27742  005E40                     _SearchAvailableChannel:
 27743                           	opt stack 18
 27744                           
 27745                           ; BSR set to: 0
 27746                           ;incstack = 0
 27747                           ;SearchAvailableChannel@maxChannels stored from wreg
 27748  005E40  0100               	movlb	0	; () banked
 27749  005E42  6FB8               	movwf	SearchAvailableChannel@maxChannels& (0+255),b
 27750                           
 27751                           ;lorawan_eu.c: 780: uint8_t randomNumberCopy, randomNumber, i;
 27752                           ;lorawan_eu.c: 781: LorawanError_t result = OK;
 27753  005E44  0E00               	movlw	0
 27754  005E46  0100               	movlb	0	; () banked
 27755  005E48  6FB7               	movwf	SearchAvailableChannel@result& (0+255),b
 27756                           
 27757                           ; BSR set to: 0
 27758                           ;lorawan_eu.c: 783: randomNumber = Random (maxChannels) + 1;
 27759  005E4A  C0B8  F0AD         	movff	SearchAvailableChannel@maxChannels,Random@max
 27760  005E4E  6BAE               	clrf	(Random@max+1)& (0+255),b
 27761  005E50  EC7C  F048         	call	_Random	;wreg free
 27762  005E54  0100               	movlb	0	; () banked
 27763  005E56  29AD               	incf	?_Random& (0+255),w,b
 27764  005E58  6FB9               	movwf	SearchAvailableChannel@randomNumber& (0+255),b
 27765                           
 27766                           ; BSR set to: 0
 27767                           ;lorawan_eu.c: 784: randomNumberCopy = randomNumber;
 27768  005E5A  C0B9  F0B6         	movff	SearchAvailableChannel@randomNumber,SearchAvailableChannel@randomNumberCopy
 27769                           
 27770                           ;lorawan_eu.c: 786: while (randomNumber)
 27771  005E5E  D074               	goto	l1989
 27772  005E60                     
 27773                           ; BSR set to: 0
 27774                           ;lorawan_eu.c: 787: {
 27775                           ;lorawan_eu.c: 788: for (i=0; (i < maxChannels) && (randomNumber != 0) ; i++)
 27776                           
 27777                           ; BSR set to: 0
 27778  005E60  0E00               	movlw	0
 27779  005E62  6FBA               	movwf	SearchAvailableChannel@i& (0+255),b
 27780  005E64  D063               	goto	l1980
 27781  005E66                     
 27782                           ; BSR set to: 0
 27783                           ;lorawan_eu.c: 789: {
 27784                           ;lorawan_eu.c: 790: if ( ( Channels[i].status == 1 ) && ( Channels[i].channelTimer == 0 
      +                          ) && ( loRa.currentDataRate >= Channels[i].dataRange.min ) && ( loRa.currentDataRate <= 
      +                          Channels[i].dataRange.max ) )
 27785                           
 27786                           ; BSR set to: 0
 27787  005E66  51BA               	movf	SearchAvailableChannel@i& (0+255),w,b
 27788  005E68  0D0E               	mullw	14
 27789  005E6A  0E04               	movlw	4
 27790  005E6C  26F3               	addwf	prodl,f,c
 27791  005E6E  0E00               	movlw	0
 27792  005E70  22F4               	addwfc	prodh,f,c
 27793  005E72  0E00               	movlw	low _Channels
 27794  005E74  24F3               	addwf	prodl,w,c
 27795  005E76  6ED9               	movwf	fsr2l,c
 27796  005E78  0E04               	movlw	high _Channels
 27797  005E7A  20F4               	addwfc	prodh,w,c
 27798  005E7C  6EDA               	movwf	fsr2h,c
 27799  005E7E  04DE               	decf	postinc2,w,c
 27800  005E80  A4D8               	btfss	status,2,c
 27801  005E82  D052               	goto	l1985
 27802                           
 27803                           ; BSR set to: 0
 27804  005E84  51BA               	movf	SearchAvailableChannel@i& (0+255),w,b
 27805  005E86  0D0E               	mullw	14
 27806  005E88  0E08               	movlw	8
 27807  005E8A  26F3               	addwf	prodl,f,c
 27808  005E8C  0E00               	movlw	0
 27809  005E8E  22F4               	addwfc	prodh,f,c
 27810  005E90  0E00               	movlw	low _Channels
 27811  005E92  24F3               	addwf	prodl,w,c
 27812  005E94  6ED9               	movwf	fsr2l,c
 27813  005E96  0E04               	movlw	high _Channels
 27814  005E98  20F4               	addwfc	prodh,w,c
 27815  005E9A  6EDA               	movwf	fsr2h,c
 27816  005E9C  50DE               	movf	postinc2,w,c
 27817  005E9E  10DE               	iorwf	postinc2,w,c
 27818  005EA0  10DE               	iorwf	postinc2,w,c
 27819  005EA2  10DE               	iorwf	postinc2,w,c
 27820  005EA4  A4D8               	btfss	status,2,c
 27821  005EA6  D040               	goto	l1985
 27822                           
 27823                           ; BSR set to: 0
 27824  005EA8  51BA               	movf	SearchAvailableChannel@i& (0+255),w,b
 27825  005EAA  0D0E               	mullw	14
 27826  005EAC  0E05               	movlw	5
 27827  005EAE  26F3               	addwf	prodl,f,c
 27828  005EB0  0E00               	movlw	0
 27829  005EB2  22F4               	addwfc	prodh,f,c
 27830  005EB4  0E00               	movlw	low _Channels
 27831  005EB6  24F3               	addwf	prodl,w,c
 27832  005EB8  6ED9               	movwf	fsr2l,c
 27833  005EBA  0E04               	movlw	high _Channels
 27834  005EBC  20F4               	addwfc	prodh,w,c
 27835  005EBE  6EDA               	movwf	fsr2h,c
 27836  005EC0  0104               	movlb	4	; () banked
 27837  005EC2  50DF               	movf	223,w,c
 27838  005EC4  0B0F               	andlw	15
 27839  005EC6  0100               	movlb	0	; () banked
 27840  005EC8  6FB2               	movwf	??_SearchAvailableChannel& (0+255),b
 27841  005ECA  51B2               	movf	??_SearchAvailableChannel& (0+255),w,b
 27842  005ECC  0102               	movlb	2	; () banked
 27843  005ECE  5DE9               	subwf	(_loRa+223)& (0+255),w,b
 27844  005ED0  A0D8               	btfss	status,0,c
 27845  005ED2  D02A               	goto	l1985
 27846                           
 27847                           ; BSR set to: 2
 27848  005ED4  0100               	movlb	0	; () banked
 27849  005ED6  51BA               	movf	SearchAvailableChannel@i& (0+255),w,b
 27850  005ED8  0D0E               	mullw	14
 27851  005EDA  0E05               	movlw	5
 27852  005EDC  26F3               	addwf	prodl,f,c
 27853  005EDE  0E00               	movlw	0
 27854  005EE0  22F4               	addwfc	prodh,f,c
 27855  005EE2  0E00               	movlw	low _Channels
 27856  005EE4  24F3               	addwf	prodl,w,c
 27857  005EE6  6ED9               	movwf	fsr2l,c
 27858  005EE8  0E04               	movlw	high _Channels
 27859  005EEA  20F4               	addwfc	prodh,w,c
 27860  005EEC  6EDA               	movwf	fsr2h,c
 27861  005EEE  0104               	movlb	4	; () banked
 27862  005EF0  38DF               	swapf	223,w,c
 27863  005EF2  0B0F               	andlw	15
 27864  005EF4  0100               	movlb	0	; () banked
 27865  005EF6  6FB2               	movwf	??_SearchAvailableChannel& (0+255),b
 27866  005EF8  0102               	movlb	2	; () banked
 27867  005EFA  51E9               	movf	(_loRa+223)& (0+255),w,b
 27868  005EFC  0100               	movlb	0	; () banked
 27869  005EFE  5DB2               	subwf	??_SearchAvailableChannel& (0+255),w,b
 27870  005F00  A0D8               	btfss	status,0,c
 27871  005F02  D012               	goto	l1985
 27872                           
 27873                           ; BSR set to: 0
 27874                           ;lorawan_eu.c: 791: {
 27875                           ;lorawan_eu.c: 792: if (transmissionType == 0)
 27876  005F04  51AF               	movf	SearchAvailableChannel@transmissionType& (0+255),w,b
 27877  005F06  A4D8               	btfss	status,2,c
 27878  005F08  D00E               	goto	l1983
 27879                           
 27880                           ; BSR set to: 0
 27881                           ;lorawan_eu.c: 793: {
 27882                           ;lorawan_eu.c: 794: if ( Channels[i].joinRequestChannel == 1 )
 27883  005F0A  51BA               	movf	SearchAvailableChannel@i& (0+255),w,b
 27884  005F0C  0D0E               	mullw	14
 27885  005F0E  0E0C               	movlw	12
 27886  005F10  26F3               	addwf	prodl,f,c
 27887  005F12  0E00               	movlw	0
 27888  005F14  22F4               	addwfc	prodh,f,c
 27889  005F16  0E00               	movlw	low _Channels
 27890  005F18  24F3               	addwf	prodl,w,c
 27891  005F1A  6ED9               	movwf	fsr2l,c
 27892  005F1C  0E04               	movlw	high _Channels
 27893  005F1E  20F4               	addwfc	prodh,w,c
 27894  005F20  6EDA               	movwf	fsr2h,c
 27895  005F22  04DE               	decf	postinc2,w,c
 27896  005F24  B4D8               	btfsc	status,2,c
 27897  005F26                     l1983:
 27898                           
 27899                           ; BSR set to: 0
 27900                           ;lorawan_eu.c: 799: else
 27901                           ;lorawan_eu.c: 800: {
 27902                           ;lorawan_eu.c: 801: randomNumber --;
 27903                           
 27904                           ; BSR set to: 0
 27905  005F26  07B9               	decf	SearchAvailableChannel@randomNumber& (0+255),f,b
 27906  005F28                     l1985:
 27907                           
 27908                           ; BSR set to: 0
 27909  005F28  0100               	movlb	0	; () banked
 27910  005F2A  2BBA               	incf	SearchAvailableChannel@i& (0+255),f,b
 27911  005F2C                     l1980:
 27912                           
 27913                           ; BSR set to: 0
 27914                           
 27915                           ; BSR set to: 0
 27916  005F2C  51B8               	movf	SearchAvailableChannel@maxChannels& (0+255),w,b
 27917  005F2E  5DBA               	subwf	SearchAvailableChannel@i& (0+255),w,b
 27918  005F30  B0D8               	btfsc	status,0,c
 27919  005F32  D003               	goto	u9490
 27920                           
 27921                           ; BSR set to: 0
 27922  005F34  51B9               	movf	SearchAvailableChannel@randomNumber& (0+255),w,b
 27923  005F36  A4D8               	btfss	status,2,c
 27924  005F38  D796               	goto	l1981
 27925  005F3A                     u9490:
 27926                           
 27927                           ; BSR set to: 0
 27928                           ;lorawan_eu.c: 802: }
 27929                           ;lorawan_eu.c: 803: }
 27930                           ;lorawan_eu.c: 804: }
 27931                           ;lorawan_eu.c: 806: if ( randomNumber == randomNumberCopy )
 27932                           
 27933                           ; BSR set to: 0
 27934                           
 27935                           ; BSR set to: 0
 27936  005F3A  51B6               	movf	SearchAvailableChannel@randomNumberCopy& (0+255),w,b
 27937  005F3C  19B9               	xorwf	SearchAvailableChannel@randomNumber& (0+255),w,b
 27938  005F3E  A4D8               	btfss	status,2,c
 27939  005F40  D003               	goto	l1989
 27940                           
 27941                           ; BSR set to: 0
 27942                           ;lorawan_eu.c: 807: {
 27943                           ;lorawan_eu.c: 808: result = NO_CHANNELS_FOUND;
 27944  005F42  0E09               	movlw	9
 27945  005F44  6FB7               	movwf	SearchAvailableChannel@result& (0+255),b
 27946                           
 27947                           ;lorawan_eu.c: 809: break;
 27948  005F46  D003               	goto	u9510
 27949  005F48                     l1989:
 27950                           
 27951                           ; BSR set to: 0
 27952                           
 27953                           ; BSR set to: 0
 27954                           
 27955                           ; BSR set to: 0
 27956  005F48  51B9               	movf	SearchAvailableChannel@randomNumber& (0+255),w,b
 27957  005F4A  A4D8               	btfss	status,2,c
 27958  005F4C  D789               	goto	l1979
 27959  005F4E                     u9510:
 27960                           
 27961                           ; BSR set to: 0
 27962                           ;lorawan_eu.c: 810: }
 27963                           ;lorawan_eu.c: 811: }
 27964                           ;lorawan_eu.c: 813: if ( i != 0)
 27965                           
 27966                           ; BSR set to: 0
 27967  005F4E  51BA               	movf	SearchAvailableChannel@i& (0+255),w,b
 27968  005F50  B4D8               	btfsc	status,2,c
 27969  005F52  D007               	goto	l1991
 27970                           
 27971                           ; BSR set to: 0
 27972                           ;lorawan_eu.c: 814: {
 27973                           ;lorawan_eu.c: 815: *channelIndex = i - 1;
 27974  005F54  05BA               	decf	SearchAvailableChannel@i& (0+255),w,b
 27975  005F56  C0B0  FFD9         	movff	SearchAvailableChannel@channelIndex,fsr2l
 27976  005F5A  C0B1  FFDA         	movff	SearchAvailableChannel@channelIndex+1,fsr2h
 27977  005F5E  6EDF               	movwf	indf2,c
 27978                           
 27979                           ;lorawan_eu.c: 816: }
 27980  005F60  D002               	goto	l1992
 27981  005F62                     l1991:
 27982                           
 27983                           ; BSR set to: 0
 27984                           ;lorawan_eu.c: 817: else
 27985                           ;lorawan_eu.c: 818: {
 27986                           ;lorawan_eu.c: 819: result = NO_CHANNELS_FOUND;
 27987                           
 27988                           ; BSR set to: 0
 27989  005F62  0E09               	movlw	9
 27990  005F64  6FB7               	movwf	SearchAvailableChannel@result& (0+255),b
 27991  005F66                     l1992:
 27992                           
 27993                           ; BSR set to: 0
 27994                           ;lorawan_eu.c: 820: }
 27995                           ;lorawan_eu.c: 821: return result;
 27996  005F66  51B7               	movf	SearchAvailableChannel@result& (0+255),w,b
 27997  005F68  0012               	return	
 27998  005F6A                     __end_of_SearchAvailableChannel:
 27999                           	opt stack 0
 28000                           tosu	equ	0xFFF
 28001                           tosh	equ	0xFFE
 28002                           tosl	equ	0xFFD
 28003                           pclath	equ	0xFFA
 28004                           tblptru	equ	0xFF8
 28005                           tblptrh	equ	0xFF7
 28006                           tblptrl	equ	0xFF6
 28007                           tablat	equ	0xFF5
 28008                           prodh	equ	0xFF4
 28009                           prodl	equ	0xFF3
 28010                           intcon	equ	0xFF2
 28011                           intcon2	equ	0xFF1
 28012                           intcon3	equ	0xFF0
 28013                           indf0	equ	0xFEF
 28014                           postinc0	equ	0xFEE
 28015                           fsr0h	equ	0xFEA
 28016                           fsr0l	equ	0xFE9
 28017                           wreg	equ	0xFE8
 28018                           postinc1	equ	0xFE6
 28019                           postdec1	equ	0xFE5
 28020                           plusw1	equ	0xFE3
 28021                           fsr1h	equ	0xFE2
 28022                           fsr1l	equ	0xFE1
 28023                           indf2	equ	0xFDF
 28024                           postinc2	equ	0xFDE
 28025                           postdec2	equ	0xFDD
 28026                           plusw2	equ	0xFDB
 28027                           fsr2h	equ	0xFDA
 28028                           fsr2l	equ	0xFD9
 28029                           status	equ	0xFD8
 28030                           
 28031 ;; *************** function _ConfigureRadioTx *****************
 28032 ;; Defined at:
 28033 ;;		line 1255 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 28034 ;; Parameters:    Size  Location     Type
 28035 ;;  dataRate        1    wreg     unsigned char 
 28036 ;;  freq            4   19[BANK0 ] unsigned long 
 28037 ;; Auto vars:     Size  Location     Type
 28038 ;;  dataRate        1   23[BANK0 ] unsigned char 
 28039 ;;  txPower         1   24[BANK0 ] char 
 28040 ;; Return value:  Size  Location     Type
 28041 ;;                  1    wreg      void 
 28042 ;; Registers used:
 28043 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 28044 ;; Tracked objects:
 28045 ;;		On entry : 0/0
 28046 ;;		On exit  : 0/0
 28047 ;;		Unchanged: 0/0
 28048 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28049 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28050 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28051 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28052 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28053 ;;Total ram usage:        6 bytes
 28054 ;; Hardware stack levels used:    1
 28055 ;; Hardware stack levels required when called:   10
 28056 ;; This function calls:
 28057 ;;		_ConfigureRadio
 28058 ;;		_RADIO_SetCRC
 28059 ;;		_RADIO_SetIQInverted
 28060 ;;		_RADIO_SetOutputPower
 28061 ;; This function is called by:
 28062 ;;		_SelectChannelForTransmission
 28063 ;; This function uses a non-reentrant model
 28064 ;;
 28065                           
 28066                           	psect	text131
 28067  008648                     __ptext131:
 28068                           	opt stack 0
 28069  008648                     _ConfigureRadioTx:
 28070                           	opt stack 18
 28071                           
 28072                           ; BSR set to: 0
 28073                           ;incstack = 0
 28074                           ;ConfigureRadioTx@dataRate stored from wreg
 28075  008648  0100               	movlb	0	; () banked
 28076  00864A  6F77               	movwf	ConfigureRadioTx@dataRate& (0+255),b
 28077                           
 28078                           ;lorawan_eu.c: 1257: int8_t txPower;
 28079                           ;lorawan_eu.c: 1259: ConfigureRadio(dataRate, freq);
 28080  00864C  C073  F06E         	movff	ConfigureRadioTx@freq,ConfigureRadio@freq
 28081  008650  C074  F06F         	movff	ConfigureRadioTx@freq+1,ConfigureRadio@freq+1
 28082  008654  C075  F070         	movff	ConfigureRadioTx@freq+2,ConfigureRadio@freq+2
 28083  008658  C076  F071         	movff	ConfigureRadioTx@freq+3,ConfigureRadio@freq+3
 28084  00865C  0100               	movlb	0	; () banked
 28085  00865E  5177               	movf	ConfigureRadioTx@dataRate& (0+255),w,b
 28086  008660  EC6E  F039         	call	_ConfigureRadio
 28087                           
 28088                           ;lorawan_eu.c: 1261: if (ISM_EU868 == loRa.ismBand)
 28089  008664  0102               	movlb	2	; () banked
 28090  008666  51AE               	movf	(_loRa+164)& (0+255),w,b
 28091                           
 28092                           ; BSR set to: 2
 28093                           ;lorawan_eu.c: 1265: else
 28094                           ;lorawan_eu.c: 1266: {
 28095                           ;lorawan_eu.c: 1267: txPower = txPower868[loRa.txPower];
 28096                           
 28097                           ; BSR set to: 2
 28098                           
 28099                           ;lorawan_eu.c: 1264: }
 28100                           
 28101                           ; BSR set to: 2
 28102                           ;lorawan_eu.c: 1262: {
 28103                           ;lorawan_eu.c: 1263: txPower = txPower868[loRa.txPower];
 28104  008668  51EB               	movf	(_loRa+225)& (0+255),w,b
 28105  00866A  0D01               	mullw	1
 28106  00866C  0EA2               	movlw	low _txPower868
 28107  00866E  24F3               	addwf	prodl,w,c
 28108  008670  6EF6               	movwf	tblptrl,c
 28109  008672  0EFF               	movlw	high _txPower868
 28110  008674  20F4               	addwfc	prodh,w,c
 28111  008676  6EF7               	movwf	tblptrh,c
 28112  008678                     	if	1	;There are 3 active tblptr bytes
 28113  008678  6AF8               	clrf	tblptru,c
 28114  00867A  0E00               	movlw	low (__mediumconst shr (0+16))
 28115  00867C  22F8               	addwfc	tblptru,f,c
 28116  00867E                     	endif
 28117  00867E  0008               	tblrd		*
 28118  008680  CFF5 F078          	movff	tablat,ConfigureRadioTx@txPower
 28119                           
 28120                           ; BSR set to: 2
 28121                           ;lorawan_eu.c: 1268: }
 28122                           ;lorawan_eu.c: 1270: RADIO_SetOutputPower (txPower);
 28123                           
 28124                           ; BSR set to: 2
 28125  008684  0100               	movlb	0	; () banked
 28126  008686  5178               	movf	ConfigureRadioTx@txPower& (0+255),w,b
 28127  008688  EC6E  F04A         	call	_RADIO_SetOutputPower
 28128                           
 28129                           ;lorawan_eu.c: 1272: RADIO_SetCRC(1);
 28130  00868C  0E01               	movlw	1
 28131  00868E  EC78  F04A         	call	_RADIO_SetCRC
 28132                           
 28133                           ;lorawan_eu.c: 1273: RADIO_SetIQInverted(0);
 28134  008692  0E00               	movlw	0
 28135  008694  EC73  F04A         	call	_RADIO_SetIQInverted
 28136  008698  0012               	return		;funcret
 28137  00869A                     __end_of_ConfigureRadioTx:
 28138                           	opt stack 0
 28139                           tosu	equ	0xFFF
 28140                           tosh	equ	0xFFE
 28141                           tosl	equ	0xFFD
 28142                           pclath	equ	0xFFA
 28143                           tblptru	equ	0xFF8
 28144                           tblptrh	equ	0xFF7
 28145                           tblptrl	equ	0xFF6
 28146                           tablat	equ	0xFF5
 28147                           prodh	equ	0xFF4
 28148                           prodl	equ	0xFF3
 28149                           intcon	equ	0xFF2
 28150                           intcon2	equ	0xFF1
 28151                           intcon3	equ	0xFF0
 28152                           indf0	equ	0xFEF
 28153                           postinc0	equ	0xFEE
 28154                           fsr0h	equ	0xFEA
 28155                           fsr0l	equ	0xFE9
 28156                           wreg	equ	0xFE8
 28157                           postinc1	equ	0xFE6
 28158                           postdec1	equ	0xFE5
 28159                           plusw1	equ	0xFE3
 28160                           fsr1h	equ	0xFE2
 28161                           fsr1l	equ	0xFE1
 28162                           indf2	equ	0xFDF
 28163                           postinc2	equ	0xFDE
 28164                           postdec2	equ	0xFDD
 28165                           plusw2	equ	0xFDB
 28166                           fsr2h	equ	0xFDA
 28167                           fsr2l	equ	0xFD9
 28168                           status	equ	0xFD8
 28169                           
 28170 ;; *************** function _RADIO_SetOutputPower *****************
 28171 ;; Defined at:
 28172 ;;		line 1464 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 28173 ;; Parameters:    Size  Location     Type
 28174 ;;  power           1    wreg     char 
 28175 ;; Auto vars:     Size  Location     Type
 28176 ;;  power           1    0[BANK0 ] char 
 28177 ;; Return value:  Size  Location     Type
 28178 ;;                  1    wreg      void 
 28179 ;; Registers used:
 28180 ;;		wreg
 28181 ;; Tracked objects:
 28182 ;;		On entry : 0/0
 28183 ;;		On exit  : 0/0
 28184 ;;		Unchanged: 0/0
 28185 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28186 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28187 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28188 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28189 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28190 ;;Total ram usage:        1 bytes
 28191 ;; Hardware stack levels used:    1
 28192 ;; Hardware stack levels required when called:    7
 28193 ;; This function calls:
 28194 ;;		Nothing
 28195 ;; This function is called by:
 28196 ;;		_ConfigureRadioTx
 28197 ;; This function uses a non-reentrant model
 28198 ;;
 28199                           
 28200                           	psect	text132
 28201  0094DC                     __ptext132:
 28202                           	opt stack 0
 28203  0094DC                     _RADIO_SetOutputPower:
 28204                           	opt stack 20
 28205                           
 28206                           ;incstack = 0
 28207                           ;RADIO_SetOutputPower@power stored from wreg
 28208  0094DC  0100               	movlb	0	; () banked
 28209  0094DE  6F60               	movwf	RADIO_SetOutputPower@power& (0+255),b
 28210                           
 28211                           ;radio_driver_SX1276.c: 1466: RadioConfiguration.outputPower = power;
 28212  0094E0  C060  F170         	movff	RADIO_SetOutputPower@power,_RadioConfiguration+27
 28213  0094E4  0012               	return		;funcret
 28214  0094E6                     __end_of_RADIO_SetOutputPower:
 28215                           	opt stack 0
 28216                           tosu	equ	0xFFF
 28217                           tosh	equ	0xFFE
 28218                           tosl	equ	0xFFD
 28219                           pclath	equ	0xFFA
 28220                           tblptru	equ	0xFF8
 28221                           tblptrh	equ	0xFF7
 28222                           tblptrl	equ	0xFF6
 28223                           tablat	equ	0xFF5
 28224                           prodh	equ	0xFF4
 28225                           prodl	equ	0xFF3
 28226                           intcon	equ	0xFF2
 28227                           intcon2	equ	0xFF1
 28228                           intcon3	equ	0xFF0
 28229                           indf0	equ	0xFEF
 28230                           postinc0	equ	0xFEE
 28231                           fsr0h	equ	0xFEA
 28232                           fsr0l	equ	0xFE9
 28233                           wreg	equ	0xFE8
 28234                           postinc1	equ	0xFE6
 28235                           postdec1	equ	0xFE5
 28236                           plusw1	equ	0xFE3
 28237                           fsr1h	equ	0xFE2
 28238                           fsr1l	equ	0xFE1
 28239                           indf2	equ	0xFDF
 28240                           postinc2	equ	0xFDE
 28241                           postdec2	equ	0xFDD
 28242                           plusw2	equ	0xFDB
 28243                           fsr2h	equ	0xFDA
 28244                           fsr2l	equ	0xFD9
 28245                           status	equ	0xFD8
 28246                           
 28247 ;; *************** function _RADIO_SetIQInverted *****************
 28248 ;; Defined at:
 28249 ;;		line 1484 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 28250 ;; Parameters:    Size  Location     Type
 28251 ;;  iqInverted      1    wreg     unsigned char 
 28252 ;; Auto vars:     Size  Location     Type
 28253 ;;  iqInverted      1    0[BANK0 ] unsigned char 
 28254 ;; Return value:  Size  Location     Type
 28255 ;;                  1    wreg      void 
 28256 ;; Registers used:
 28257 ;;		wreg
 28258 ;; Tracked objects:
 28259 ;;		On entry : 0/0
 28260 ;;		On exit  : 0/0
 28261 ;;		Unchanged: 0/0
 28262 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28263 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28264 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28265 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28266 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28267 ;;Total ram usage:        1 bytes
 28268 ;; Hardware stack levels used:    1
 28269 ;; Hardware stack levels required when called:    7
 28270 ;; This function calls:
 28271 ;;		Nothing
 28272 ;; This function is called by:
 28273 ;;		_ConfigureRadioRx
 28274 ;;		_ConfigureRadioTx
 28275 ;; This function uses a non-reentrant model
 28276 ;;
 28277                           
 28278                           	psect	text133
 28279  0094E6                     __ptext133:
 28280                           	opt stack 0
 28281  0094E6                     _RADIO_SetIQInverted:
 28282                           	opt stack 20
 28283                           
 28284                           ;incstack = 0
 28285                           ;RADIO_SetIQInverted@iqInverted stored from wreg
 28286  0094E6  0100               	movlb	0	; () banked
 28287  0094E8  6F60               	movwf	RADIO_SetIQInverted@iqInverted& (0+255),b
 28288                           
 28289                           ;radio_driver_SX1276.c: 1486: RadioConfiguration.iqInverted = iqInverted;
 28290  0094EA  C060  F175         	movff	RADIO_SetIQInverted@iqInverted,_RadioConfiguration+32
 28291  0094EE  0012               	return		;funcret
 28292  0094F0                     __end_of_RADIO_SetIQInverted:
 28293                           	opt stack 0
 28294                           tosu	equ	0xFFF
 28295                           tosh	equ	0xFFE
 28296                           tosl	equ	0xFFD
 28297                           pclath	equ	0xFFA
 28298                           tblptru	equ	0xFF8
 28299                           tblptrh	equ	0xFF7
 28300                           tblptrl	equ	0xFF6
 28301                           tablat	equ	0xFF5
 28302                           prodh	equ	0xFF4
 28303                           prodl	equ	0xFF3
 28304                           intcon	equ	0xFF2
 28305                           intcon2	equ	0xFF1
 28306                           intcon3	equ	0xFF0
 28307                           indf0	equ	0xFEF
 28308                           postinc0	equ	0xFEE
 28309                           fsr0h	equ	0xFEA
 28310                           fsr0l	equ	0xFE9
 28311                           wreg	equ	0xFE8
 28312                           postinc1	equ	0xFE6
 28313                           postdec1	equ	0xFE5
 28314                           plusw1	equ	0xFE3
 28315                           fsr1h	equ	0xFE2
 28316                           fsr1l	equ	0xFE1
 28317                           indf2	equ	0xFDF
 28318                           postinc2	equ	0xFDE
 28319                           postdec2	equ	0xFDD
 28320                           plusw2	equ	0xFDB
 28321                           fsr2h	equ	0xFDA
 28322                           fsr2l	equ	0xFD9
 28323                           status	equ	0xFD8
 28324                           
 28325 ;; *************** function _RADIO_SetCRC *****************
 28326 ;; Defined at:
 28327 ;;		line 1474 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 28328 ;; Parameters:    Size  Location     Type
 28329 ;;  crc             1    wreg     unsigned char 
 28330 ;; Auto vars:     Size  Location     Type
 28331 ;;  crc             1    0[BANK0 ] unsigned char 
 28332 ;; Return value:  Size  Location     Type
 28333 ;;                  1    wreg      void 
 28334 ;; Registers used:
 28335 ;;		wreg
 28336 ;; Tracked objects:
 28337 ;;		On entry : 0/0
 28338 ;;		On exit  : 0/0
 28339 ;;		Unchanged: 0/0
 28340 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28341 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28342 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28343 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28344 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28345 ;;Total ram usage:        1 bytes
 28346 ;; Hardware stack levels used:    1
 28347 ;; Hardware stack levels required when called:    7
 28348 ;; This function calls:
 28349 ;;		Nothing
 28350 ;; This function is called by:
 28351 ;;		_ConfigureRadioRx
 28352 ;;		_ConfigureRadioTx
 28353 ;; This function uses a non-reentrant model
 28354 ;;
 28355                           
 28356                           	psect	text134
 28357  0094F0                     __ptext134:
 28358                           	opt stack 0
 28359  0094F0                     _RADIO_SetCRC:
 28360                           	opt stack 20
 28361                           
 28362                           ;incstack = 0
 28363                           ;RADIO_SetCRC@crc stored from wreg
 28364  0094F0  0100               	movlb	0	; () banked
 28365  0094F2  6F60               	movwf	RADIO_SetCRC@crc& (0+255),b
 28366                           
 28367                           ;radio_driver_SX1276.c: 1476: RadioConfiguration.crcOn = crc;
 28368  0094F4  C060  F171         	movff	RADIO_SetCRC@crc,_RadioConfiguration+28
 28369  0094F8  0012               	return		;funcret
 28370  0094FA                     __end_of_RADIO_SetCRC:
 28371                           	opt stack 0
 28372                           tosu	equ	0xFFF
 28373                           tosh	equ	0xFFE
 28374                           tosl	equ	0xFFD
 28375                           pclath	equ	0xFFA
 28376                           tblptru	equ	0xFF8
 28377                           tblptrh	equ	0xFF7
 28378                           tblptrl	equ	0xFF6
 28379                           tablat	equ	0xFF5
 28380                           prodh	equ	0xFF4
 28381                           prodl	equ	0xFF3
 28382                           intcon	equ	0xFF2
 28383                           intcon2	equ	0xFF1
 28384                           intcon3	equ	0xFF0
 28385                           indf0	equ	0xFEF
 28386                           postinc0	equ	0xFEE
 28387                           fsr0h	equ	0xFEA
 28388                           fsr0l	equ	0xFE9
 28389                           wreg	equ	0xFE8
 28390                           postinc1	equ	0xFE6
 28391                           postdec1	equ	0xFE5
 28392                           plusw1	equ	0xFE3
 28393                           fsr1h	equ	0xFE2
 28394                           fsr1l	equ	0xFE1
 28395                           indf2	equ	0xFDF
 28396                           postinc2	equ	0xFDE
 28397                           postdec2	equ	0xFDD
 28398                           plusw2	equ	0xFDB
 28399                           fsr2h	equ	0xFDA
 28400                           fsr2l	equ	0xFD9
 28401                           status	equ	0xFD8
 28402                           
 28403 ;; *************** function _ConfigureRadio *****************
 28404 ;; Defined at:
 28405 ;;		line 863 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 28406 ;; Parameters:    Size  Location     Type
 28407 ;;  dataRate        1    wreg     unsigned char 
 28408 ;;  freq            4   14[BANK0 ] unsigned long 
 28409 ;; Auto vars:     Size  Location     Type
 28410 ;;  dataRate        1   18[BANK0 ] unsigned char 
 28411 ;; Return value:  Size  Location     Type
 28412 ;;                  1    wreg      void 
 28413 ;; Registers used:
 28414 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 28415 ;; Tracked objects:
 28416 ;;		On entry : 0/0
 28417 ;;		On exit  : 0/0
 28418 ;;		Unchanged: 0/0
 28419 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28420 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28421 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28422 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28423 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28424 ;;Total ram usage:        5 bytes
 28425 ;; Hardware stack levels used:    1
 28426 ;; Hardware stack levels required when called:    9
 28427 ;; This function calls:
 28428 ;;		_RADIO_SetBandwidth
 28429 ;;		_RADIO_SetChannelFrequency
 28430 ;;		_RADIO_SetFSKSyncWord
 28431 ;;		_RADIO_SetFrequencyHopPeriod
 28432 ;;		_RADIO_SetLoRaSyncWord
 28433 ;;		_RADIO_SetModulation
 28434 ;;		_RADIO_SetSpreadingFactor
 28435 ;; This function is called by:
 28436 ;;		_ConfigureRadioRx
 28437 ;;		_ConfigureRadioTx
 28438 ;; This function uses a non-reentrant model
 28439 ;;
 28440                           
 28441                           	psect	text135
 28442  0072DC                     __ptext135:
 28443                           	opt stack 0
 28444  0072DC                     _ConfigureRadio:
 28445                           	opt stack 18
 28446                           
 28447                           ;incstack = 0
 28448                           ;ConfigureRadio@dataRate stored from wreg
 28449  0072DC  0100               	movlb	0	; () banked
 28450  0072DE  6F72               	movwf	ConfigureRadio@dataRate& (0+255),b
 28451                           
 28452                           ;lorawan_eu.c: 865: RADIO_SetModulation (modulation[dataRate]);
 28453  0072E0  0100               	movlb	0	; () banked
 28454  0072E2  5172               	movf	ConfigureRadio@dataRate& (0+255),w,b
 28455  0072E4  0D01               	mullw	1
 28456  0072E6  0E67               	movlw	low _modulation
 28457  0072E8  24F3               	addwf	prodl,w,c
 28458  0072EA  6EF6               	movwf	tblptrl,c
 28459  0072EC  0EFF               	movlw	high _modulation
 28460  0072EE  20F4               	addwfc	prodh,w,c
 28461  0072F0  6EF7               	movwf	tblptrh,c
 28462  0072F2                     	if	1	;There are 3 active tblptr bytes
 28463  0072F2  6AF8               	clrf	tblptru,c
 28464  0072F4  0E00               	movlw	low (__mediumconst shr (0+16))
 28465  0072F6  22F8               	addwfc	tblptru,f,c
 28466  0072F8                     	endif
 28467  0072F8  0008               	tblrd		*
 28468  0072FA  50F5               	movf	tablat,w,c
 28469  0072FC  EC82  F04A         	call	_RADIO_SetModulation
 28470                           
 28471                           ;lorawan_eu.c: 866: RADIO_SetChannelFrequency (freq);
 28472  007300  C06E  F060         	movff	ConfigureRadio@freq,RADIO_SetChannelFrequency@frequency
 28473  007304  C06F  F061         	movff	ConfigureRadio@freq+1,RADIO_SetChannelFrequency@frequency+1
 28474  007308  C070  F062         	movff	ConfigureRadio@freq+2,RADIO_SetChannelFrequency@frequency+2
 28475  00730C  C071  F063         	movff	ConfigureRadio@freq+3,RADIO_SetChannelFrequency@frequency+3
 28476  007310  EC8F  F03B         	call	_RADIO_SetChannelFrequency	;wreg free
 28477                           
 28478                           ;lorawan_eu.c: 867: RADIO_SetFrequencyHopPeriod (0);
 28479  007314  0E00               	movlw	0
 28480  007316  0100               	movlb	0	; () banked
 28481  007318  6F61               	movwf	(RADIO_SetFrequencyHopPeriod@frequencyHopPeriod+1)& (0+255),b
 28482  00731A  0E00               	movlw	0
 28483  00731C  6F60               	movwf	RADIO_SetFrequencyHopPeriod@frequencyHopPeriod& (0+255),b
 28484  00731E  EC87  F04A         	call	_RADIO_SetFrequencyHopPeriod	;wreg free
 28485                           
 28486                           ;lorawan_eu.c: 869: if (dataRate <= 6)
 28487  007322  0E07               	movlw	7
 28488  007324  0100               	movlb	0	; () banked
 28489  007326  6172               	cpfslt	ConfigureRadio@dataRate& (0+255),b
 28490  007328  D024               	goto	l2005
 28491                           
 28492                           ; BSR set to: 0
 28493                           ;lorawan_eu.c: 870: {
 28494                           ;lorawan_eu.c: 872: RADIO_SetSpreadingFactor (spreadingFactor[dataRate]);
 28495  00732A  5172               	movf	ConfigureRadio@dataRate& (0+255),w,b
 28496  00732C  0D01               	mullw	1
 28497  00732E  0E8E               	movlw	low _spreadingFactor
 28498  007330  24F3               	addwf	prodl,w,c
 28499  007332  6EF6               	movwf	tblptrl,c
 28500  007334  0EFF               	movlw	high _spreadingFactor
 28501  007336  20F4               	addwfc	prodh,w,c
 28502  007338  6EF7               	movwf	tblptrh,c
 28503  00733A                     	if	1	;There are 3 active tblptr bytes
 28504  00733A  6AF8               	clrf	tblptru,c
 28505  00733C  0E00               	movlw	low (__mediumconst shr (0+16))
 28506  00733E  22F8               	addwfc	tblptru,f,c
 28507  007340                     	endif
 28508  007340  0008               	tblrd		*
 28509  007342  50F5               	movf	tablat,w,c
 28510  007344  EC7D  F04A         	call	_RADIO_SetSpreadingFactor
 28511                           
 28512                           ;lorawan_eu.c: 873: RADIO_SetBandwidth (bandwidth[dataRate]);
 28513  007348  0100               	movlb	0	; () banked
 28514  00734A  5172               	movf	ConfigureRadio@dataRate& (0+255),w,b
 28515  00734C  0D01               	mullw	1
 28516  00734E  0E87               	movlw	low _bandwidth
 28517  007350  24F3               	addwf	prodl,w,c
 28518  007352  6EF6               	movwf	tblptrl,c
 28519  007354  0EFF               	movlw	high _bandwidth
 28520  007356  20F4               	addwfc	prodh,w,c
 28521  007358  6EF7               	movwf	tblptrh,c
 28522  00735A                     	if	1	;There are 3 active tblptr bytes
 28523  00735A  6AF8               	clrf	tblptru,c
 28524  00735C  0E00               	movlw	low (__mediumconst shr (0+16))
 28525  00735E  22F8               	addwfc	tblptru,f,c
 28526  007360                     	endif
 28527  007360  0008               	tblrd		*
 28528  007362  50F5               	movf	tablat,w,c
 28529  007364  EC8C  F04A         	call	_RADIO_SetBandwidth
 28530                           
 28531                           ;lorawan_eu.c: 874: RADIO_SetLoRaSyncWord(loRa.syncWord);
 28532  007368  0102               	movlb	2	; () banked
 28533  00736A  51FE               	movf	(_loRa+244)& (0+255),w,b
 28534  00736C  EC91  F04A         	call	_RADIO_SetLoRaSyncWord
 28535                           
 28536                           ;lorawan_eu.c: 875: }
 28537  007370  0012               	return	
 28538  007372                     l2005:
 28539                           
 28540                           ;lorawan_eu.c: 876: else
 28541                           ;lorawan_eu.c: 877: {
 28542                           ;lorawan_eu.c: 879: RADIO_SetFSKSyncWord(sizeof(FskSyncWordBuff) / sizeof(FskSyncWordBuf
      +                          f[0]), (uint8_t*)FskSyncWordBuff);
 28543  007372  0EFC               	movlw	low _FskSyncWordBuff
 28544  007374  0100               	movlb	0	; () banked
 28545  007376  6F6B               	movwf	RADIO_SetFSKSyncWord@syncWord& (0+255),b
 28546  007378  0EFF               	movlw	high _FskSyncWordBuff
 28547  00737A  6F6C               	movwf	(RADIO_SetFSKSyncWord@syncWord+1)& (0+255),b
 28548  00737C  0E03               	movlw	3
 28549  00737E  EC9C  F046         	call	_RADIO_SetFSKSyncWord
 28550  007382  0012               	return	
 28551  007384                     __end_of_ConfigureRadio:
 28552                           	opt stack 0
 28553                           tosu	equ	0xFFF
 28554                           tosh	equ	0xFFE
 28555                           tosl	equ	0xFFD
 28556                           pclath	equ	0xFFA
 28557                           tblptru	equ	0xFF8
 28558                           tblptrh	equ	0xFF7
 28559                           tblptrl	equ	0xFF6
 28560                           tablat	equ	0xFF5
 28561                           prodh	equ	0xFF4
 28562                           prodl	equ	0xFF3
 28563                           intcon	equ	0xFF2
 28564                           intcon2	equ	0xFF1
 28565                           intcon3	equ	0xFF0
 28566                           indf0	equ	0xFEF
 28567                           postinc0	equ	0xFEE
 28568                           fsr0h	equ	0xFEA
 28569                           fsr0l	equ	0xFE9
 28570                           wreg	equ	0xFE8
 28571                           postinc1	equ	0xFE6
 28572                           postdec1	equ	0xFE5
 28573                           plusw1	equ	0xFE3
 28574                           fsr1h	equ	0xFE2
 28575                           fsr1l	equ	0xFE1
 28576                           indf2	equ	0xFDF
 28577                           postinc2	equ	0xFDE
 28578                           postdec2	equ	0xFDD
 28579                           plusw2	equ	0xFDB
 28580                           fsr2h	equ	0xFDA
 28581                           fsr2l	equ	0xFD9
 28582                           status	equ	0xFD8
 28583                           
 28584 ;; *************** function _RADIO_SetSpreadingFactor *****************
 28585 ;; Defined at:
 28586 ;;		line 1434 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 28587 ;; Parameters:    Size  Location     Type
 28588 ;;  spreadingFac    1    wreg     enum E6994
 28589 ;; Auto vars:     Size  Location     Type
 28590 ;;  spreadingFac    1    0[BANK0 ] enum E6994
 28591 ;; Return value:  Size  Location     Type
 28592 ;;                  1    wreg      void 
 28593 ;; Registers used:
 28594 ;;		wreg
 28595 ;; Tracked objects:
 28596 ;;		On entry : 0/0
 28597 ;;		On exit  : 0/0
 28598 ;;		Unchanged: 0/0
 28599 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28600 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28601 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28602 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28603 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28604 ;;Total ram usage:        1 bytes
 28605 ;; Hardware stack levels used:    1
 28606 ;; Hardware stack levels required when called:    7
 28607 ;; This function calls:
 28608 ;;		Nothing
 28609 ;; This function is called by:
 28610 ;;		_ConfigureRadio
 28611 ;; This function uses a non-reentrant model
 28612 ;;
 28613                           
 28614                           	psect	text136
 28615  0094FA                     __ptext136:
 28616                           	opt stack 0
 28617  0094FA                     _RADIO_SetSpreadingFactor:
 28618                           	opt stack 19
 28619                           
 28620                           ;incstack = 0
 28621                           ;RADIO_SetSpreadingFactor@spreadingFactor stored from wreg
 28622  0094FA  0100               	movlb	0	; () banked
 28623  0094FC  6F60               	movwf	RADIO_SetSpreadingFactor@spreadingFactor& (0+255),b
 28624                           
 28625                           ;radio_driver_SX1276.c: 1436: RadioConfiguration.dataRate = spreadingFactor;
 28626  0094FE  C060  F16E         	movff	RADIO_SetSpreadingFactor@spreadingFactor,_RadioConfiguration+25
 28627  009502  0012               	return		;funcret
 28628  009504                     __end_of_RADIO_SetSpreadingFactor:
 28629                           	opt stack 0
 28630                           tosu	equ	0xFFF
 28631                           tosh	equ	0xFFE
 28632                           tosl	equ	0xFFD
 28633                           pclath	equ	0xFFA
 28634                           tblptru	equ	0xFF8
 28635                           tblptrh	equ	0xFF7
 28636                           tblptrl	equ	0xFF6
 28637                           tablat	equ	0xFF5
 28638                           prodh	equ	0xFF4
 28639                           prodl	equ	0xFF3
 28640                           intcon	equ	0xFF2
 28641                           intcon2	equ	0xFF1
 28642                           intcon3	equ	0xFF0
 28643                           indf0	equ	0xFEF
 28644                           postinc0	equ	0xFEE
 28645                           fsr0h	equ	0xFEA
 28646                           fsr0l	equ	0xFE9
 28647                           wreg	equ	0xFE8
 28648                           postinc1	equ	0xFE6
 28649                           postdec1	equ	0xFE5
 28650                           plusw1	equ	0xFE3
 28651                           fsr1h	equ	0xFE2
 28652                           fsr1l	equ	0xFE1
 28653                           indf2	equ	0xFDF
 28654                           postinc2	equ	0xFDE
 28655                           postdec2	equ	0xFDD
 28656                           plusw2	equ	0xFDB
 28657                           fsr2h	equ	0xFDA
 28658                           fsr2l	equ	0xFD9
 28659                           status	equ	0xFD8
 28660                           
 28661 ;; *************** function _RADIO_SetModulation *****************
 28662 ;; Defined at:
 28663 ;;		line 1515 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 28664 ;; Parameters:    Size  Location     Type
 28665 ;;  modulation      1    wreg     enum E6984
 28666 ;; Auto vars:     Size  Location     Type
 28667 ;;  modulation      1    0[BANK0 ] enum E6984
 28668 ;; Return value:  Size  Location     Type
 28669 ;;                  1    wreg      void 
 28670 ;; Registers used:
 28671 ;;		wreg
 28672 ;; Tracked objects:
 28673 ;;		On entry : 0/0
 28674 ;;		On exit  : 0/0
 28675 ;;		Unchanged: 0/0
 28676 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28677 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28678 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28679 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28680 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28681 ;;Total ram usage:        1 bytes
 28682 ;; Hardware stack levels used:    1
 28683 ;; Hardware stack levels required when called:    7
 28684 ;; This function calls:
 28685 ;;		Nothing
 28686 ;; This function is called by:
 28687 ;;		_ConfigureRadio
 28688 ;; This function uses a non-reentrant model
 28689 ;;
 28690                           
 28691                           	psect	text137
 28692  009504                     __ptext137:
 28693                           	opt stack 0
 28694  009504                     _RADIO_SetModulation:
 28695                           	opt stack 19
 28696                           
 28697                           ;incstack = 0
 28698                           ;RADIO_SetModulation@modulation stored from wreg
 28699  009504  0100               	movlb	0	; () banked
 28700  009506  6F60               	movwf	RADIO_SetModulation@modulation& (0+255),b
 28701                           
 28702                           ;radio_driver_SX1276.c: 1517: RadioConfiguration.modulation = modulation;
 28703  009508  C060  F16D         	movff	RADIO_SetModulation@modulation,_RadioConfiguration+24
 28704  00950C  0012               	return		;funcret
 28705  00950E                     __end_of_RADIO_SetModulation:
 28706                           	opt stack 0
 28707                           tosu	equ	0xFFF
 28708                           tosh	equ	0xFFE
 28709                           tosl	equ	0xFFD
 28710                           pclath	equ	0xFFA
 28711                           tblptru	equ	0xFF8
 28712                           tblptrh	equ	0xFF7
 28713                           tblptrl	equ	0xFF6
 28714                           tablat	equ	0xFF5
 28715                           prodh	equ	0xFF4
 28716                           prodl	equ	0xFF3
 28717                           intcon	equ	0xFF2
 28718                           intcon2	equ	0xFF1
 28719                           intcon3	equ	0xFF0
 28720                           indf0	equ	0xFEF
 28721                           postinc0	equ	0xFEE
 28722                           fsr0h	equ	0xFEA
 28723                           fsr0l	equ	0xFE9
 28724                           wreg	equ	0xFE8
 28725                           postinc1	equ	0xFE6
 28726                           postdec1	equ	0xFE5
 28727                           plusw1	equ	0xFE3
 28728                           fsr1h	equ	0xFE2
 28729                           fsr1l	equ	0xFE1
 28730                           indf2	equ	0xFDF
 28731                           postinc2	equ	0xFDE
 28732                           postdec2	equ	0xFDD
 28733                           plusw2	equ	0xFDB
 28734                           fsr2h	equ	0xFDA
 28735                           fsr2l	equ	0xFD9
 28736                           status	equ	0xFD8
 28737                           
 28738 ;; *************** function _RADIO_SetFrequencyHopPeriod *****************
 28739 ;; Defined at:
 28740 ;;		line 1550 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 28741 ;; Parameters:    Size  Location     Type
 28742 ;;  frequencyHop    2    0[BANK0 ] unsigned int 
 28743 ;; Auto vars:     Size  Location     Type
 28744 ;;		None
 28745 ;; Return value:  Size  Location     Type
 28746 ;;                  1    wreg      void 
 28747 ;; Registers used:
 28748 ;;		None
 28749 ;; Tracked objects:
 28750 ;;		On entry : 0/0
 28751 ;;		On exit  : 0/0
 28752 ;;		Unchanged: 0/0
 28753 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28754 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28755 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28756 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28757 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28758 ;;Total ram usage:        2 bytes
 28759 ;; Hardware stack levels used:    1
 28760 ;; Hardware stack levels required when called:    7
 28761 ;; This function calls:
 28762 ;;		Nothing
 28763 ;; This function is called by:
 28764 ;;		_ConfigureRadio
 28765 ;; This function uses a non-reentrant model
 28766 ;;
 28767                           
 28768                           	psect	text138
 28769  00950E                     __ptext138:
 28770                           	opt stack 0
 28771  00950E                     _RADIO_SetFrequencyHopPeriod:
 28772                           	opt stack 19
 28773                           
 28774                           ;radio_driver_SX1276.c: 1552: RadioConfiguration.frequencyHopPeriod = frequencyHopPeriod
      +                          ;
 28775                           
 28776                           ;incstack = 0
 28777  00950E  C060  F173         	movff	RADIO_SetFrequencyHopPeriod@frequencyHopPeriod,_RadioConfiguration+30
 28778  009512  C061  F174         	movff	RADIO_SetFrequencyHopPeriod@frequencyHopPeriod+1,_RadioConfiguration+31
 28779  009516  0012               	return		;funcret
 28780  009518                     __end_of_RADIO_SetFrequencyHopPeriod:
 28781                           	opt stack 0
 28782                           tosu	equ	0xFFF
 28783                           tosh	equ	0xFFE
 28784                           tosl	equ	0xFFD
 28785                           pclath	equ	0xFFA
 28786                           tblptru	equ	0xFF8
 28787                           tblptrh	equ	0xFF7
 28788                           tblptrl	equ	0xFF6
 28789                           tablat	equ	0xFF5
 28790                           prodh	equ	0xFF4
 28791                           prodl	equ	0xFF3
 28792                           intcon	equ	0xFF2
 28793                           intcon2	equ	0xFF1
 28794                           intcon3	equ	0xFF0
 28795                           indf0	equ	0xFEF
 28796                           postinc0	equ	0xFEE
 28797                           fsr0h	equ	0xFEA
 28798                           fsr0l	equ	0xFE9
 28799                           wreg	equ	0xFE8
 28800                           postinc1	equ	0xFE6
 28801                           postdec1	equ	0xFE5
 28802                           plusw1	equ	0xFE3
 28803                           fsr1h	equ	0xFE2
 28804                           fsr1l	equ	0xFE1
 28805                           indf2	equ	0xFDF
 28806                           postinc2	equ	0xFDE
 28807                           postdec2	equ	0xFDD
 28808                           plusw2	equ	0xFDB
 28809                           fsr2h	equ	0xFDA
 28810                           fsr2l	equ	0xFD9
 28811                           status	equ	0xFD8
 28812                           
 28813 ;; *************** function _RADIO_SetFSKSyncWord *****************
 28814 ;; Defined at:
 28815 ;;		line 1624 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 28816 ;; Parameters:    Size  Location     Type
 28817 ;;  syncWordLen     1    wreg     unsigned char 
 28818 ;;  syncWord        2   11[BANK0 ] PTR unsigned char 
 28819 ;;		 -> FskSyncWordBuff(3), 
 28820 ;; Auto vars:     Size  Location     Type
 28821 ;;  syncWordLen     1   13[BANK0 ] unsigned char 
 28822 ;; Return value:  Size  Location     Type
 28823 ;;                  1    wreg      void 
 28824 ;; Registers used:
 28825 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 28826 ;; Tracked objects:
 28827 ;;		On entry : 0/0
 28828 ;;		On exit  : 0/0
 28829 ;;		Unchanged: 0/0
 28830 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28831 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28832 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28833 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28834 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28835 ;;Total ram usage:        3 bytes
 28836 ;; Hardware stack levels used:    1
 28837 ;; Hardware stack levels required when called:    8
 28838 ;; This function calls:
 28839 ;;		_memcpy
 28840 ;; This function is called by:
 28841 ;;		_ConfigureRadio
 28842 ;; This function uses a non-reentrant model
 28843 ;;
 28844                           
 28845                           	psect	text139
 28846  008D38                     __ptext139:
 28847                           	opt stack 0
 28848  008D38                     _RADIO_SetFSKSyncWord:
 28849                           	opt stack 18
 28850                           
 28851                           ;incstack = 0
 28852                           ;RADIO_SetFSKSyncWord@syncWordLen stored from wreg
 28853  008D38  0100               	movlb	0	; () banked
 28854  008D3A  6F6D               	movwf	RADIO_SetFSKSyncWord@syncWordLen& (0+255),b
 28855                           
 28856                           ;radio_driver_SX1276.c: 1626: if (syncWordLen > 8)
 28857  008D3C  0E08               	movlw	8
 28858  008D3E  0100               	movlb	0	; () banked
 28859  008D40  656D               	cpfsgt	RADIO_SetFSKSyncWord@syncWordLen& (0+255),b
 28860  008D42  D002               	goto	l577
 28861                           
 28862                           ; BSR set to: 0
 28863                           ;radio_driver_SX1276.c: 1627: {
 28864                           ;radio_driver_SX1276.c: 1628: syncWordLen = 8;
 28865  008D44  0E08               	movlw	8
 28866  008D46  6F6D               	movwf	RADIO_SetFSKSyncWord@syncWordLen& (0+255),b
 28867  008D48                     l577:
 28868                           
 28869                           ; BSR set to: 0
 28870                           ;radio_driver_SX1276.c: 1629: }
 28871                           ;radio_driver_SX1276.c: 1630: memcpy(RadioConfiguration.syncWord, syncWord, syncWordLen)
      +                          ;
 28872                           
 28873                           ; BSR set to: 0
 28874  008D48  0E64               	movlw	low (_RadioConfiguration+15)
 28875  008D4A  6F60               	movwf	memcpy@d1& (0+255),b
 28876  008D4C  0E01               	movlw	high (_RadioConfiguration+15)
 28877  008D4E  6F61               	movwf	(memcpy@d1+1)& (0+255),b
 28878  008D50  C06B  F062         	movff	RADIO_SetFSKSyncWord@syncWord,memcpy@s1
 28879  008D54  C06C  F063         	movff	RADIO_SetFSKSyncWord@syncWord+1,memcpy@s1+1
 28880  008D58  C06D  F064         	movff	RADIO_SetFSKSyncWord@syncWordLen,memcpy@n
 28881  008D5C  6B65               	clrf	(memcpy@n+1)& (0+255),b
 28882  008D5E  EC37  F041         	call	_memcpy	;wreg free
 28883                           
 28884                           ;radio_driver_SX1276.c: 1631: RadioConfiguration.syncWordLen = syncWordLen;
 28885  008D62  C06D  F16C         	movff	RADIO_SetFSKSyncWord@syncWordLen,_RadioConfiguration+23
 28886  008D66  0012               	return		;funcret
 28887  008D68                     __end_of_RADIO_SetFSKSyncWord:
 28888                           	opt stack 0
 28889                           tosu	equ	0xFFF
 28890                           tosh	equ	0xFFE
 28891                           tosl	equ	0xFFD
 28892                           pclath	equ	0xFFA
 28893                           tblptru	equ	0xFF8
 28894                           tblptrh	equ	0xFF7
 28895                           tblptrl	equ	0xFF6
 28896                           tablat	equ	0xFF5
 28897                           prodh	equ	0xFF4
 28898                           prodl	equ	0xFF3
 28899                           intcon	equ	0xFF2
 28900                           intcon2	equ	0xFF1
 28901                           intcon3	equ	0xFF0
 28902                           indf0	equ	0xFEF
 28903                           postinc0	equ	0xFEE
 28904                           fsr0h	equ	0xFEA
 28905                           fsr0l	equ	0xFE9
 28906                           wreg	equ	0xFE8
 28907                           postinc1	equ	0xFE6
 28908                           postdec1	equ	0xFE5
 28909                           plusw1	equ	0xFE3
 28910                           fsr1h	equ	0xFE2
 28911                           fsr1l	equ	0xFE1
 28912                           indf2	equ	0xFDF
 28913                           postinc2	equ	0xFDE
 28914                           postdec2	equ	0xFDD
 28915                           plusw2	equ	0xFDB
 28916                           fsr2h	equ	0xFDA
 28917                           fsr2l	equ	0xFD9
 28918                           status	equ	0xFD8
 28919                           
 28920 ;; *************** function _RADIO_SetChannelFrequency *****************
 28921 ;; Defined at:
 28922 ;;		line 1444 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 28923 ;; Parameters:    Size  Location     Type
 28924 ;;  frequency       4    0[BANK0 ] unsigned long 
 28925 ;; Auto vars:     Size  Location     Type
 28926 ;;		None
 28927 ;; Return value:  Size  Location     Type
 28928 ;;                  2    0[BANK0 ] enum E7038
 28929 ;; Registers used:
 28930 ;;		wreg, status,2, status,0
 28931 ;; Tracked objects:
 28932 ;;		On entry : 0/0
 28933 ;;		On exit  : 0/0
 28934 ;;		Unchanged: 0/0
 28935 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28936 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28937 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28938 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28939 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28940 ;;Total ram usage:        4 bytes
 28941 ;; Hardware stack levels used:    1
 28942 ;; Hardware stack levels required when called:    7
 28943 ;; This function calls:
 28944 ;;		Nothing
 28945 ;; This function is called by:
 28946 ;;		_ConfigureRadio
 28947 ;; This function uses a non-reentrant model
 28948 ;;
 28949                           
 28950                           	psect	text140
 28951  00771E                     __ptext140:
 28952                           	opt stack 0
 28953  00771E                     _RADIO_SetChannelFrequency:
 28954                           	opt stack 19
 28955                           
 28956                           ;radio_driver_SX1276.c: 1446: if ( (frequency >= 137000000) && (frequency <= 175000000) 
      +                          ||
 28957                           ;radio_driver_SX1276.c: 1447: (frequency >= 410000000) && (frequency <= 525000000) ||
 28958                           ;radio_driver_SX1276.c: 1448: (frequency >= 862000000) && (frequency <= 1020000000) )
 28959                           
 28960                           ;incstack = 0
 28961  00771E  0E40               	movlw	64
 28962  007720  0100               	movlb	0	; () banked
 28963  007722  5D60               	subwf	RADIO_SetChannelFrequency@frequency& (0+255),w,b
 28964  007724  0E74               	movlw	116
 28965  007726  5961               	subwfb	(RADIO_SetChannelFrequency@frequency+1)& (0+255),w,b
 28966  007728  0E2A               	movlw	42
 28967  00772A  5962               	subwfb	(RADIO_SetChannelFrequency@frequency+2)& (0+255),w,b
 28968  00772C  0E08               	movlw	8
 28969  00772E  5963               	subwfb	(RADIO_SetChannelFrequency@frequency+3)& (0+255),w,b
 28970  007730  A0D8               	btfss	status,0,c
 28971  007732  D00A               	goto	u8210
 28972                           
 28973                           ; BSR set to: 0
 28974  007734  0EC1               	movlw	193
 28975  007736  5D60               	subwf	RADIO_SetChannelFrequency@frequency& (0+255),w,b
 28976  007738  0E49               	movlw	73
 28977  00773A  5961               	subwfb	(RADIO_SetChannelFrequency@frequency+1)& (0+255),w,b
 28978  00773C  0E6E               	movlw	110
 28979  00773E  5962               	subwfb	(RADIO_SetChannelFrequency@frequency+2)& (0+255),w,b
 28980  007740  0E0A               	movlw	10
 28981  007742  5963               	subwfb	(RADIO_SetChannelFrequency@frequency+3)& (0+255),w,b
 28982  007744  A0D8               	btfss	status,0,c
 28983  007746  D027               	goto	u8250
 28984  007748                     u8210:
 28985                           
 28986                           ; BSR set to: 0
 28987                           
 28988                           ; BSR set to: 0
 28989  007748  0E80               	movlw	128
 28990  00774A  5D60               	subwf	RADIO_SetChannelFrequency@frequency& (0+255),w,b
 28991  00774C  0E1A               	movlw	26
 28992  00774E  5961               	subwfb	(RADIO_SetChannelFrequency@frequency+1)& (0+255),w,b
 28993  007750  0E70               	movlw	112
 28994  007752  5962               	subwfb	(RADIO_SetChannelFrequency@frequency+2)& (0+255),w,b
 28995  007754  0E18               	movlw	24
 28996  007756  5963               	subwfb	(RADIO_SetChannelFrequency@frequency+3)& (0+255),w,b
 28997  007758  A0D8               	btfss	status,0,c
 28998  00775A  D00A               	goto	u8230
 28999                           
 29000                           ; BSR set to: 0
 29001  00775C  0E41               	movlw	65
 29002  00775E  5D60               	subwf	RADIO_SetChannelFrequency@frequency& (0+255),w,b
 29003  007760  0EDD               	movlw	221
 29004  007762  5961               	subwfb	(RADIO_SetChannelFrequency@frequency+1)& (0+255),w,b
 29005  007764  0E4A               	movlw	74
 29006  007766  5962               	subwfb	(RADIO_SetChannelFrequency@frequency+2)& (0+255),w,b
 29007  007768  0E1F               	movlw	31
 29008  00776A  5963               	subwfb	(RADIO_SetChannelFrequency@frequency+3)& (0+255),w,b
 29009  00776C  A0D8               	btfss	status,0,c
 29010  00776E  D013               	goto	u8250
 29011  007770                     u8230:
 29012                           
 29013                           ; BSR set to: 0
 29014                           
 29015                           ; BSR set to: 0
 29016  007770  0E80               	movlw	128
 29017  007772  5D60               	subwf	RADIO_SetChannelFrequency@frequency& (0+255),w,b
 29018  007774  0E13               	movlw	19
 29019  007776  5961               	subwfb	(RADIO_SetChannelFrequency@frequency+1)& (0+255),w,b
 29020  007778  0E61               	movlw	97
 29021  00777A  5962               	subwfb	(RADIO_SetChannelFrequency@frequency+2)& (0+255),w,b
 29022  00777C  0E33               	movlw	51
 29023  00777E  5963               	subwfb	(RADIO_SetChannelFrequency@frequency+3)& (0+255),w,b
 29024  007780  A0D8               	btfss	status,0,c
 29025  007782  0012               	return	
 29026                           
 29027                           ; BSR set to: 0
 29028  007784  0560               	decf	RADIO_SetChannelFrequency@frequency& (0+255),w,b
 29029  007786  0EF7               	movlw	247
 29030  007788  5961               	subwfb	(RADIO_SetChannelFrequency@frequency+1)& (0+255),w,b
 29031  00778A  0ECB               	movlw	203
 29032  00778C  5962               	subwfb	(RADIO_SetChannelFrequency@frequency+2)& (0+255),w,b
 29033  00778E  0E3C               	movlw	60
 29034  007790  5963               	subwfb	(RADIO_SetChannelFrequency@frequency+3)& (0+255),w,b
 29035  007792  B0D8               	btfsc	status,0,c
 29036  007794  0012               	return	
 29037  007796                     u8250:
 29038                           
 29039                           ; BSR set to: 0
 29040                           ;radio_driver_SX1276.c: 1449: {
 29041                           ;radio_driver_SX1276.c: 1450: RadioConfiguration.frequency = frequency;
 29042  007796  C060  F155         	movff	RADIO_SetChannelFrequency@frequency,_RadioConfiguration
 29043  00779A  C061  F156         	movff	RADIO_SetChannelFrequency@frequency+1,_RadioConfiguration+1
 29044  00779E  C062  F157         	movff	RADIO_SetChannelFrequency@frequency+2,_RadioConfiguration+2
 29045  0077A2  C063  F158         	movff	RADIO_SetChannelFrequency@frequency+3,_RadioConfiguration+3
 29046                           
 29047                           ; BSR set to: 0
 29048                           ;radio_driver_SX1276.c: 1453: else
 29049                           ;radio_driver_SX1276.c: 1454: {
 29050                           ;radio_driver_SX1276.c: 1455: return ERR_OUT_OF_RANGE;
 29051                           ;	Return value of _RADIO_SetChannelFrequency is never used
 29052                           
 29053                           ; BSR set to: 0
 29054                           ;radio_driver_SX1276.c: 1452: }
 29055                           
 29056                           ;radio_driver_SX1276.c: 1451: return ERR_NONE;
 29057                           ;	Return value of _RADIO_SetChannelFrequency is never used
 29058  0077A6  0012               	return	
 29059  0077A8                     __end_of_RADIO_SetChannelFrequency:
 29060                           	opt stack 0
 29061                           tosu	equ	0xFFF
 29062                           tosh	equ	0xFFE
 29063                           tosl	equ	0xFFD
 29064                           pclath	equ	0xFFA
 29065                           tblptru	equ	0xFF8
 29066                           tblptrh	equ	0xFF7
 29067                           tblptrl	equ	0xFF6
 29068                           tablat	equ	0xFF5
 29069                           prodh	equ	0xFF4
 29070                           prodl	equ	0xFF3
 29071                           intcon	equ	0xFF2
 29072                           intcon2	equ	0xFF1
 29073                           intcon3	equ	0xFF0
 29074                           indf0	equ	0xFEF
 29075                           postinc0	equ	0xFEE
 29076                           fsr0h	equ	0xFEA
 29077                           fsr0l	equ	0xFE9
 29078                           wreg	equ	0xFE8
 29079                           postinc1	equ	0xFE6
 29080                           postdec1	equ	0xFE5
 29081                           plusw1	equ	0xFE3
 29082                           fsr1h	equ	0xFE2
 29083                           fsr1l	equ	0xFE1
 29084                           indf2	equ	0xFDF
 29085                           postinc2	equ	0xFDE
 29086                           postdec2	equ	0xFDD
 29087                           plusw2	equ	0xFDB
 29088                           fsr2h	equ	0xFDA
 29089                           fsr2l	equ	0xFD9
 29090                           status	equ	0xFD8
 29091                           
 29092 ;; *************** function _RADIO_SetBandwidth *****************
 29093 ;; Defined at:
 29094 ;;		line 1495 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 29095 ;; Parameters:    Size  Location     Type
 29096 ;;  bandwidth       1    wreg     enum E7002
 29097 ;; Auto vars:     Size  Location     Type
 29098 ;;  bandwidth       1    0[BANK0 ] enum E7002
 29099 ;; Return value:  Size  Location     Type
 29100 ;;                  1    wreg      void 
 29101 ;; Registers used:
 29102 ;;		wreg
 29103 ;; Tracked objects:
 29104 ;;		On entry : 0/0
 29105 ;;		On exit  : 0/0
 29106 ;;		Unchanged: 0/0
 29107 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29108 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29109 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29110 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29111 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29112 ;;Total ram usage:        1 bytes
 29113 ;; Hardware stack levels used:    1
 29114 ;; Hardware stack levels required when called:    7
 29115 ;; This function calls:
 29116 ;;		Nothing
 29117 ;; This function is called by:
 29118 ;;		_ConfigureRadio
 29119 ;; This function uses a non-reentrant model
 29120 ;;
 29121                           
 29122                           	psect	text141
 29123  009518                     __ptext141:
 29124                           	opt stack 0
 29125  009518                     _RADIO_SetBandwidth:
 29126                           	opt stack 19
 29127                           
 29128                           ; BSR set to: 0
 29129                           ;incstack = 0
 29130                           ;RADIO_SetBandwidth@bandwidth stored from wreg
 29131  009518  0100               	movlb	0	; () banked
 29132  00951A  6F60               	movwf	RADIO_SetBandwidth@bandwidth& (0+255),b
 29133                           
 29134                           ;radio_driver_SX1276.c: 1497: RadioConfiguration.bandWidth = bandwidth;
 29135  00951C  C060  F16F         	movff	RADIO_SetBandwidth@bandwidth,_RadioConfiguration+26
 29136  009520  0012               	return		;funcret
 29137  009522                     __end_of_RADIO_SetBandwidth:
 29138                           	opt stack 0
 29139                           tosu	equ	0xFFF
 29140                           tosh	equ	0xFFE
 29141                           tosl	equ	0xFFD
 29142                           pclath	equ	0xFFA
 29143                           tblptru	equ	0xFF8
 29144                           tblptrh	equ	0xFF7
 29145                           tblptrl	equ	0xFF6
 29146                           tablat	equ	0xFF5
 29147                           prodh	equ	0xFF4
 29148                           prodl	equ	0xFF3
 29149                           intcon	equ	0xFF2
 29150                           intcon2	equ	0xFF1
 29151                           intcon3	equ	0xFF0
 29152                           indf0	equ	0xFEF
 29153                           postinc0	equ	0xFEE
 29154                           fsr0h	equ	0xFEA
 29155                           fsr0l	equ	0xFE9
 29156                           wreg	equ	0xFE8
 29157                           postinc1	equ	0xFE6
 29158                           postdec1	equ	0xFE5
 29159                           plusw1	equ	0xFE3
 29160                           fsr1h	equ	0xFE2
 29161                           fsr1l	equ	0xFE1
 29162                           indf2	equ	0xFDF
 29163                           postinc2	equ	0xFDE
 29164                           postdec2	equ	0xFDD
 29165                           plusw2	equ	0xFDB
 29166                           fsr2h	equ	0xFDA
 29167                           fsr2l	equ	0xFD9
 29168                           status	equ	0xFD8
 29169                           
 29170 ;; *************** function _RADIO_Transmit *****************
 29171 ;; Defined at:
 29172 ;;		line 786 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 29173 ;; Parameters:    Size  Location     Type
 29174 ;;  buffer          2   81[BANK0 ] PTR unsigned char 
 29175 ;;		 -> macBuffer(271), 
 29176 ;;  bufferLen       1   83[BANK0 ] unsigned char 
 29177 ;; Auto vars:     Size  Location     Type
 29178 ;;  i               1   97[BANK0 ] unsigned char 
 29179 ;;  regValue        1   96[BANK0 ] unsigned char 
 29180 ;; Return value:  Size  Location     Type
 29181 ;;                  2   81[BANK0 ] enum E7038
 29182 ;; Registers used:
 29183 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 29184 ;; Tracked objects:
 29185 ;;		On entry : 0/0
 29186 ;;		On exit  : 0/0
 29187 ;;		Unchanged: 0/0
 29188 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29189 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29190 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29191 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29192 ;;      Totals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29193 ;;Total ram usage:       17 bytes
 29194 ;; Hardware stack levels used:    1
 29195 ;; Hardware stack levels required when called:   12
 29196 ;; This function calls:
 29197 ;;		_HALSPICSAssert
 29198 ;;		_HALSPICSDeassert
 29199 ;;		_HALSPISend
 29200 ;;		_RADIO_RegisterRead
 29201 ;;		_RADIO_RegisterWrite
 29202 ;;		_RADIO_WriteConfiguration
 29203 ;;		_RADIO_WriteMode
 29204 ;;		_SwTimerSetTimeout
 29205 ;;		_SwTimerStart
 29206 ;;		_SwTimerStop
 29207 ;;		___lldiv
 29208 ;; This function is called by:
 29209 ;;		_LORAWAN_Join
 29210 ;;		_LORAWAN_Send
 29211 ;;		_AckRetransmissionCallback
 29212 ;;		_UnconfirmedTransmissionCallback
 29213 ;;		_LORAWAN_RxTimeout
 29214 ;; This function uses a non-reentrant model
 29215 ;;
 29216                           
 29217                           	psect	text142
 29218  003FEE                     __ptext142:
 29219                           	opt stack 0
 29220  003FEE                     _RADIO_Transmit:
 29221                           	opt stack 17
 29222                           
 29223                           ;radio_driver_SX1276.c: 788: uint8_t regValue;
 29224                           ;radio_driver_SX1276.c: 789: uint8_t i;
 29225                           ;radio_driver_SX1276.c: 791: if ((RadioConfiguration.flags & (1 << (2))) != 0)
 29226                           
 29227                           ;incstack = 0
 29228  003FEE  0101               	movlb	1	; () banked
 29229  003FF0  A578               	btfss	(_RadioConfiguration+35)& (0+255),2,b
 29230  003FF2  D006               	goto	l272
 29231                           
 29232                           ; BSR set to: 1
 29233                           ;radio_driver_SX1276.c: 792: {
 29234                           ;radio_driver_SX1276.c: 793: return ERR_BUFFER_LOCKED;
 29235  003FF4  0E80               	movlw	128
 29236  003FF6  0100               	movlb	0	; () banked
 29237  003FF8  6FB2               	movwf	(?_RADIO_Transmit+1)& (0+255),b
 29238  003FFA  0E03               	movlw	3
 29239  003FFC  6FB1               	movwf	?_RADIO_Transmit& (0+255),b
 29240                           
 29241                           ; BSR set to: 0
 29242  003FFE  0012               	return	
 29243  004000                     l272:
 29244                           
 29245                           ;radio_driver_SX1276.c: 794: }
 29246                           ;radio_driver_SX1276.c: 796: if ((RadioConfiguration.flags & ((1 << (0)) | (1 << (1)))) 
      +                          != 0)
 29247                           
 29248                           ; BSR set to: 0
 29249  004000  C178  F0B4         	movff	_RadioConfiguration+35,??_RADIO_Transmit
 29250  004004  0E03               	movlw	3
 29251  004006  0100               	movlb	0	; () banked
 29252  004008  17B4               	andwf	??_RADIO_Transmit& (0+255),f,b
 29253  00400A  B4D8               	btfsc	status,2,c
 29254  00400C  D005               	goto	l274
 29255                           
 29256                           ; BSR set to: 0
 29257                           ;radio_driver_SX1276.c: 797: {
 29258                           ;radio_driver_SX1276.c: 798: return ERR_RADIO_BUSY;
 29259  00400E  0E80               	movlw	128
 29260  004010  6FB2               	movwf	(?_RADIO_Transmit+1)& (0+255),b
 29261  004012  0E04               	movlw	4
 29262  004014  6FB1               	movwf	?_RADIO_Transmit& (0+255),b
 29263                           
 29264                           ; BSR set to: 0
 29265  004016  0012               	return	
 29266  004018                     l274:
 29267                           
 29268                           ; BSR set to: 0
 29269                           ;radio_driver_SX1276.c: 799: }
 29270                           ;radio_driver_SX1276.c: 801: if ((MODULATION_FSK == RadioConfiguration.modulation) && (b
      +                          ufferLen > 64))
 29271                           
 29272                           ; BSR set to: 0
 29273  004018  0101               	movlb	1	; () banked
 29274  00401A  516D               	movf	(_RadioConfiguration+24)& (0+255),w,b
 29275  00401C  A4D8               	btfss	status,2,c
 29276  00401E  D009               	goto	l275
 29277                           
 29278                           ; BSR set to: 1
 29279  004020  0E40               	movlw	64
 29280  004022  0100               	movlb	0	; () banked
 29281  004024  65B3               	cpfsgt	RADIO_Transmit@bufferLen& (0+255),b
 29282  004026  D005               	goto	l275
 29283                           
 29284                           ; BSR set to: 0
 29285                           ;radio_driver_SX1276.c: 802: {
 29286                           ;radio_driver_SX1276.c: 803: return ERR_DATA_SIZE;
 29287  004028  0E80               	movlw	128
 29288  00402A  6FB2               	movwf	(?_RADIO_Transmit+1)& (0+255),b
 29289  00402C  0E02               	movlw	2
 29290  00402E  6FB1               	movwf	?_RADIO_Transmit& (0+255),b
 29291                           
 29292                           ; BSR set to: 0
 29293  004030  0012               	return	
 29294  004032                     l275:
 29295                           
 29296                           ;radio_driver_SX1276.c: 804: }
 29297                           ;radio_driver_SX1276.c: 806: SwTimerStop(RadioConfiguration.timeOnAirTimerId);
 29298                           
 29299                           ; BSR set to: 0
 29300  004032  0101               	movlb	1	; () banked
 29301  004034  517C               	movf	(_RadioConfiguration+39)& (0+255),w,b
 29302  004036  ECFB  F047         	call	_SwTimerStop
 29303                           
 29304                           ;radio_driver_SX1276.c: 810: RADIO_WriteConfiguration(4);
 29305  00403A  0E00               	movlw	0
 29306  00403C  0100               	movlb	0	; () banked
 29307  00403E  6FA7               	movwf	(RADIO_WriteConfiguration@symbolTimeout+1)& (0+255),b
 29308  004040  0E04               	movlw	4
 29309  004042  6FA6               	movwf	RADIO_WriteConfiguration@symbolTimeout& (0+255),b
 29310  004044  EC96  F00A         	call	_RADIO_WriteConfiguration	;wreg free
 29311                           
 29312                           ;radio_driver_SX1276.c: 812: if (MODULATION_LORA == RadioConfiguration.modulation)
 29313  004048  0101               	movlb	1	; () banked
 29314  00404A  056D               	decf	(_RadioConfiguration+24)& (0+255),w,b
 29315  00404C  A4D8               	btfss	status,2,c
 29316  00404E  D027               	goto	l276
 29317                           
 29318                           ; BSR set to: 1
 29319                           ;radio_driver_SX1276.c: 813: {
 29320                           ;radio_driver_SX1276.c: 814: RADIO_RegisterWrite(0x22, bufferLen);
 29321  004050  C0B3  F062         	movff	RADIO_Transmit@bufferLen,RADIO_RegisterWrite@value
 29322  004054  0E22               	movlw	34
 29323  004056  ECBE  F048         	call	_RADIO_RegisterWrite
 29324                           
 29325                           ;radio_driver_SX1276.c: 817: regValue = RADIO_RegisterRead(0x0A);
 29326  00405A  0E0A               	movlw	10
 29327  00405C  ECE7  F047         	call	_RADIO_RegisterRead
 29328  004060  0100               	movlb	0	; () banked
 29329  004062  6FC0               	movwf	RADIO_Transmit@regValue& (0+255),b
 29330                           
 29331                           ; BSR set to: 0
 29332                           ;radio_driver_SX1276.c: 818: regValue &= ~0x0F;
 29333  004064  0EF0               	movlw	240
 29334  004066  17C0               	andwf	RADIO_Transmit@regValue& (0+255),f,b
 29335                           
 29336                           ; BSR set to: 0
 29337                           ;radio_driver_SX1276.c: 819: regValue |= 0x08;
 29338  004068  87C0               	bsf	RADIO_Transmit@regValue& (0+255),3,b
 29339                           
 29340                           ; BSR set to: 0
 29341                           ;radio_driver_SX1276.c: 820: RADIO_RegisterWrite(0x0A, regValue);
 29342  00406A  C0C0  F062         	movff	RADIO_Transmit@regValue,RADIO_RegisterWrite@value
 29343  00406E  0E0A               	movlw	10
 29344  004070  ECBE  F048         	call	_RADIO_RegisterWrite
 29345                           
 29346                           ;radio_driver_SX1276.c: 824: RADIO_RegisterWrite(0x40, 0x40);
 29347  004074  0E40               	movlw	64
 29348  004076  0100               	movlb	0	; () banked
 29349  004078  6F62               	movwf	RADIO_RegisterWrite@value& (0+255),b
 29350  00407A  0E40               	movlw	64
 29351  00407C  ECBE  F048         	call	_RADIO_RegisterWrite
 29352                           
 29353                           ;radio_driver_SX1276.c: 825: RADIO_RegisterWrite(0x41, 0x00);
 29354  004080  0E00               	movlw	0
 29355  004082  0100               	movlb	0	; () banked
 29356  004084  6F62               	movwf	RADIO_RegisterWrite@value& (0+255),b
 29357  004086  0E41               	movlw	65
 29358  004088  ECBE  F048         	call	_RADIO_RegisterWrite
 29359                           
 29360                           ;radio_driver_SX1276.c: 827: RADIO_WriteMode(MODE_STANDBY, RadioConfiguration.modulation
      +                          , 1);
 29361  00408C  C16D  F065         	movff	_RadioConfiguration+24,RADIO_WriteMode@newModulation
 29362  004090  0E01               	movlw	1
 29363  004092  0100               	movlb	0	; () banked
 29364  004094  6F66               	movwf	RADIO_WriteMode@blocking& (0+255),b
 29365  004096  0E01               	movlw	1
 29366  004098  ECDA  F031         	call	_RADIO_WriteMode
 29367                           
 29368                           ;radio_driver_SX1276.c: 828: }
 29369  00409C  D00C               	goto	l277
 29370  00409E                     l276:
 29371                           
 29372                           ;radio_driver_SX1276.c: 829: else
 29373                           ;radio_driver_SX1276.c: 830: {
 29374                           ;radio_driver_SX1276.c: 832: RADIO_RegisterWrite(0x40, 0x00);
 29375  00409E  0E00               	movlw	0
 29376  0040A0  0100               	movlb	0	; () banked
 29377  0040A2  6F62               	movwf	RADIO_RegisterWrite@value& (0+255),b
 29378  0040A4  0E40               	movlw	64
 29379  0040A6  ECBE  F048         	call	_RADIO_RegisterWrite
 29380                           
 29381                           ;radio_driver_SX1276.c: 833: RADIO_RegisterWrite(0x41, 0x00);
 29382  0040AA  0E00               	movlw	0
 29383  0040AC  0100               	movlb	0	; () banked
 29384  0040AE  6F62               	movwf	RADIO_RegisterWrite@value& (0+255),b
 29385  0040B0  0E41               	movlw	65
 29386  0040B2  ECBE  F048         	call	_RADIO_RegisterWrite
 29387  0040B6                     l277:
 29388                           
 29389                           ;radio_driver_SX1276.c: 834: }
 29390                           ;radio_driver_SX1276.c: 836: if (MODULATION_FSK == RadioConfiguration.modulation)
 29391  0040B6  0101               	movlb	1	; () banked
 29392  0040B8  516D               	movf	(_RadioConfiguration+24)& (0+255),w,b
 29393  0040BA  A4D8               	btfss	status,2,c
 29394  0040BC  D005               	goto	l278
 29395                           
 29396                           ; BSR set to: 1
 29397                           ;radio_driver_SX1276.c: 837: {
 29398                           ;radio_driver_SX1276.c: 839: RADIO_RegisterWrite(0x00, bufferLen);
 29399  0040BE  C0B3  F062         	movff	RADIO_Transmit@bufferLen,RADIO_RegisterWrite@value
 29400  0040C2  0E00               	movlw	0
 29401  0040C4  ECBE  F048         	call	_RADIO_RegisterWrite
 29402  0040C8                     l278:
 29403                           
 29404                           ;radio_driver_SX1276.c: 840: }
 29405                           ;radio_driver_SX1276.c: 842: HALSPICSAssert();
 29406  0040C8  ECC8  F04A         	call	_HALSPICSAssert	;wreg free
 29407                           
 29408                           ;radio_driver_SX1276.c: 843: HALSPISend(0x80 | 0x00);
 29409  0040CC  0E80               	movlw	128
 29410  0040CE  EC1F  F04A         	call	_HALSPISend
 29411                           
 29412                           ;radio_driver_SX1276.c: 845: for (i = 0; i < bufferLen; i++)
 29413  0040D2  0E00               	movlw	0
 29414  0040D4  0100               	movlb	0	; () banked
 29415  0040D6  6FC1               	movwf	RADIO_Transmit@i& (0+255),b
 29416  0040D8  D00D               	goto	l279
 29417  0040DA                     
 29418                           ; BSR set to: 0
 29419                           ;radio_driver_SX1276.c: 846: {
 29420                           ;radio_driver_SX1276.c: 847: HALSPISend(buffer[i]);
 29421                           
 29422                           ; BSR set to: 0
 29423  0040DA  51C1               	movf	RADIO_Transmit@i& (0+255),w,b
 29424  0040DC  0D01               	mullw	1
 29425  0040DE  50F3               	movf	prodl,w,c
 29426  0040E0  25B1               	addwf	RADIO_Transmit@buffer& (0+255),w,b
 29427  0040E2  6ED9               	movwf	fsr2l,c
 29428  0040E4  50F4               	movf	prodh,w,c
 29429  0040E6  21B2               	addwfc	(RADIO_Transmit@buffer+1)& (0+255),w,b
 29430  0040E8  6EDA               	movwf	fsr2h,c
 29431  0040EA  50DF               	movf	indf2,w,c
 29432  0040EC  EC1F  F04A         	call	_HALSPISend
 29433  0040F0  0100               	movlb	0	; () banked
 29434  0040F2  2BC1               	incf	RADIO_Transmit@i& (0+255),f,b
 29435  0040F4                     l279:
 29436                           
 29437                           ; BSR set to: 0
 29438                           
 29439                           ; BSR set to: 0
 29440  0040F4  51B3               	movf	RADIO_Transmit@bufferLen& (0+255),w,b
 29441  0040F6  5DC1               	subwf	RADIO_Transmit@i& (0+255),w,b
 29442  0040F8  A0D8               	btfss	status,0,c
 29443  0040FA  D7EF               	goto	l280
 29444                           
 29445                           ; BSR set to: 0
 29446                           ;radio_driver_SX1276.c: 848: }
 29447                           ;radio_driver_SX1276.c: 849: HALSPICSDeassert();
 29448                           
 29449                           ; BSR set to: 0
 29450  0040FC  ECC6  F04A         	call	_HALSPICSDeassert	;wreg free
 29451                           
 29452                           ;radio_driver_SX1276.c: 851: RadioConfiguration.flags |= (1 << (0));
 29453  004100  0101               	movlb	1	; () banked
 29454  004102  8178               	bsf	(_RadioConfiguration+35)& (0+255),0,b
 29455                           
 29456                           ; BSR set to: 1
 29457                           ;radio_driver_SX1276.c: 852: RadioConfiguration.flags &= ~((1 << (4)) | (1 << (3)));
 29458  004104  0EE7               	movlw	231
 29459  004106  1778               	andwf	(_RadioConfiguration+35)& (0+255),f,b
 29460                           
 29461                           ; BSR set to: 1
 29462                           ;radio_driver_SX1276.c: 857: RADIO_WriteMode(MODE_TX, RadioConfiguration.modulation, 0);
 29463  004108  C16D  F065         	movff	_RadioConfiguration+24,RADIO_WriteMode@newModulation
 29464  00410C  0E00               	movlw	0
 29465  00410E  0100               	movlb	0	; () banked
 29466  004110  6F66               	movwf	RADIO_WriteMode@blocking& (0+255),b
 29467  004112  0E03               	movlw	3
 29468  004114  ECDA  F031         	call	_RADIO_WriteMode
 29469                           
 29470                           ; BSR set to: 0
 29471                           
 29472                           ;radio_driver_SX1276.c: 862: SwTimerSetTimeout(RadioConfiguration.timeOnAirTimerId, ((((
      +                          uint32_t)20000)) < 0x000FFFFFUL ? ( (((uint32_t)(((uint32_t)20000))) << (12)) / 125UL ) 
      +                          : ( (((uint32_t)(((uint32_t)20000))) / 125UL) << (12) ) ));
 29473  004118  0E00               	movlw	0
 29474  00411A  0100               	movlb	0	; () banked
 29475  00411C  6FB8               	movwf	_RADIO_Transmit$517& (0+255),b
 29476  00411E  0E00               	movlw	0
 29477  004120  6FB9               	movwf	(_RADIO_Transmit$517+1)& (0+255),b
 29478  004122  0E0A               	movlw	10
 29479  004124  6FBA               	movwf	(_RADIO_Transmit$517+2)& (0+255),b
 29480  004126  0E00               	movlw	0
 29481  004128  6FBB               	movwf	(_RADIO_Transmit$517+3)& (0+255),b
 29482                           
 29483                           ; BSR set to: 0
 29484                           
 29485                           ; BSR set to: 0
 29486  00412A  C0B8  F06D         	movff	_RADIO_Transmit$517,SwTimerSetTimeout@timeout
 29487  00412E  C0B9  F06E         	movff	_RADIO_Transmit$517+1,SwTimerSetTimeout@timeout+1
 29488  004132  C0BA  F06F         	movff	_RADIO_Transmit$517+2,SwTimerSetTimeout@timeout+2
 29489  004136  C0BB  F070         	movff	_RADIO_Transmit$517+3,SwTimerSetTimeout@timeout+3
 29490  00413A  0101               	movlb	1	; () banked
 29491  00413C  517C               	movf	(_RadioConfiguration+39)& (0+255),w,b
 29492  00413E  EC01  F045         	call	_SwTimerSetTimeout
 29493                           
 29494                           ;radio_driver_SX1276.c: 863: SwTimerStart(RadioConfiguration.timeOnAirTimerId);
 29495  004142  0101               	movlb	1	; () banked
 29496  004144  517C               	movf	(_RadioConfiguration+39)& (0+255),w,b
 29497  004146  ECB4  F03A         	call	_SwTimerStart
 29498                           
 29499                           ;radio_driver_SX1276.c: 865: if (0 != RadioConfiguration.watchdogTimerTimeout)
 29500  00414A  0101               	movlb	1	; () banked
 29501  00414C  517F               	movf	(_RadioConfiguration+42)& (0+255),w,b
 29502  00414E  1180               	iorwf	(_RadioConfiguration+43)& (0+255),w,b
 29503  004150  1181               	iorwf	(_RadioConfiguration+44)& (0+255),w,b
 29504  004152  1182               	iorwf	(_RadioConfiguration+45)& (0+255),w,b
 29505  004154  B4D8               	btfsc	status,2,c
 29506  004156  D061               	goto	l286
 29507                           
 29508                           ; BSR set to: 1
 29509                           ;radio_driver_SX1276.c: 866: {
 29510                           ;radio_driver_SX1276.c: 867: SwTimerSetTimeout(RadioConfiguration.watchdogTimerId, ((Rad
      +                          ioConfiguration.watchdogTimerTimeout) < 0x000FFFFFUL ? ( (((uint32_t)(RadioConfiguration
      +                          .watchdogTimerTimeout)) << (12)) / 125UL ) : ( (((uint32_t)(RadioConfiguration.watchdogT
      +                          imerTimeout)) /
 29511  004158  5182               	movf	(_RadioConfiguration+45)& (0+255),w,b
 29512  00415A  E107               	bnz	u10040
 29513  00415C  297F               	incf	(_RadioConfiguration+42)& (0+255),w,b
 29514  00415E  0EFF               	movlw	255
 29515  004160  5980               	subwfb	(_RadioConfiguration+43)& (0+255),w,b
 29516  004162  0E0F               	movlw	15
 29517  004164  5981               	subwfb	(_RadioConfiguration+44)& (0+255),w,b
 29518  004166  A0D8               	btfss	status,0,c
 29519  004168  D01D               	goto	l288
 29520  00416A                     u10040:
 29521                           
 29522                           ; BSR set to: 1
 29523  00416A  C17F  F060         	movff	_RadioConfiguration+42,___lldiv@dividend
 29524  00416E  C180  F061         	movff	_RadioConfiguration+43,___lldiv@dividend+1
 29525  004172  C181  F062         	movff	_RadioConfiguration+44,___lldiv@dividend+2
 29526  004176  C182  F063         	movff	_RadioConfiguration+45,___lldiv@dividend+3
 29527  00417A  0E7D               	movlw	125
 29528  00417C  0100               	movlb	0	; () banked
 29529  00417E  6F64               	movwf	___lldiv@divisor& (0+255),b
 29530  004180  0E00               	movlw	0
 29531  004182  6F65               	movwf	(___lldiv@divisor+1)& (0+255),b
 29532  004184  0E00               	movlw	0
 29533  004186  6F66               	movwf	(___lldiv@divisor+2)& (0+255),b
 29534  004188  0E00               	movlw	0
 29535  00418A  6F67               	movwf	(___lldiv@divisor+3)& (0+255),b
 29536  00418C  ECE4  F03C         	call	___lldiv	;wreg free
 29537  004190  0E0C               	movlw	12
 29538  004192                     u10055:
 29539  004192  90D8               	bcf	status,0,c
 29540  004194  0100               	movlb	0	; () banked
 29541  004196  3760               	rlcf	?___lldiv& (0+255),f,b
 29542  004198  3761               	rlcf	(?___lldiv+1)& (0+255),f,b
 29543  00419A  3762               	rlcf	(?___lldiv+2)& (0+255),f,b
 29544  00419C  3763               	rlcf	(?___lldiv+3)& (0+255),f,b
 29545  00419E  2EE8               	decfsz	wreg,f,c
 29546  0041A0  D7F8               	goto	u10055
 29547  0041A2  D023               	goto	L19
 29548  0041A4                     l288:
 29549                           
 29550                           ; BSR set to: 0
 29551  0041A4  C17F  F0B4         	movff	_RadioConfiguration+42,??_RADIO_Transmit
 29552  0041A8  C180  F0B5         	movff	_RadioConfiguration+43,??_RADIO_Transmit+1
 29553  0041AC  C181  F0B6         	movff	_RadioConfiguration+44,??_RADIO_Transmit+2
 29554  0041B0  C182  F0B7         	movff	_RadioConfiguration+45,??_RADIO_Transmit+3
 29555  0041B4  0E0C               	movlw	12
 29556  0041B6                     u10065:
 29557  0041B6  90D8               	bcf	status,0,c
 29558  0041B8  0100               	movlb	0	; () banked
 29559  0041BA  37B4               	rlcf	??_RADIO_Transmit& (0+255),f,b
 29560  0041BC  37B5               	rlcf	(??_RADIO_Transmit+1)& (0+255),f,b
 29561  0041BE  37B6               	rlcf	(??_RADIO_Transmit+2)& (0+255),f,b
 29562  0041C0  37B7               	rlcf	(??_RADIO_Transmit+3)& (0+255),f,b
 29563  0041C2  2EE8               	decfsz	wreg,f,c
 29564  0041C4  D7F8               	goto	u10065
 29565  0041C6  C0B4  F060         	movff	??_RADIO_Transmit,___lldiv@dividend
 29566  0041CA  C0B5  F061         	movff	??_RADIO_Transmit+1,___lldiv@dividend+1
 29567  0041CE  C0B6  F062         	movff	??_RADIO_Transmit+2,___lldiv@dividend+2
 29568  0041D2  C0B7  F063         	movff	??_RADIO_Transmit+3,___lldiv@dividend+3
 29569  0041D6  0E7D               	movlw	125
 29570  0041D8  6F64               	movwf	___lldiv@divisor& (0+255),b
 29571  0041DA  0E00               	movlw	0
 29572  0041DC  6F65               	movwf	(___lldiv@divisor+1)& (0+255),b
 29573  0041DE  0E00               	movlw	0
 29574  0041E0  6F66               	movwf	(___lldiv@divisor+2)& (0+255),b
 29575  0041E2  0E00               	movlw	0
 29576  0041E4  6F67               	movwf	(___lldiv@divisor+3)& (0+255),b
 29577  0041E6  ECE4  F03C         	call	___lldiv	;wreg free
 29578  0041EA                     L19:
 29579  0041EA  C060  F0BC         	movff	?___lldiv,_RADIO_Transmit$518
 29580  0041EE  C061  F0BD         	movff	?___lldiv+1,_RADIO_Transmit$518+1
 29581  0041F2  C062  F0BE         	movff	?___lldiv+2,_RADIO_Transmit$518+2
 29582  0041F6  C063  F0BF         	movff	?___lldiv+3,_RADIO_Transmit$518+3
 29583  0041FA  C0BC  F06D         	movff	_RADIO_Transmit$518,SwTimerSetTimeout@timeout
 29584  0041FE  C0BD  F06E         	movff	_RADIO_Transmit$518+1,SwTimerSetTimeout@timeout+1
 29585  004202  C0BE  F06F         	movff	_RADIO_Transmit$518+2,SwTimerSetTimeout@timeout+2
 29586  004206  C0BF  F070         	movff	_RADIO_Transmit$518+3,SwTimerSetTimeout@timeout+3
 29587  00420A  0101               	movlb	1	; () banked
 29588  00420C  517E               	movf	(_RadioConfiguration+41)& (0+255),w,b
 29589  00420E  EC01  F045         	call	_SwTimerSetTimeout
 29590                           
 29591                           ;radio_driver_SX1276.c: 868: SwTimerStart(RadioConfiguration.watchdogTimerId);
 29592  004212  0101               	movlb	1	; () banked
 29593  004214  517E               	movf	(_RadioConfiguration+41)& (0+255),w,b
 29594  004216  ECB4  F03A         	call	_SwTimerStart
 29595  00421A                     l286:
 29596                           
 29597                           ;radio_driver_SX1276.c: 869: }
 29598                           ;radio_driver_SX1276.c: 871: return ERR_NONE;
 29599  00421A  0E00               	movlw	0
 29600  00421C  0100               	movlb	0	; () banked
 29601  00421E  6FB2               	movwf	(?_RADIO_Transmit+1)& (0+255),b
 29602  004220  0E00               	movlw	0
 29603  004222  6FB1               	movwf	?_RADIO_Transmit& (0+255),b
 29604  004224  0012               	return	
 29605  004226                     __end_of_RADIO_Transmit:
 29606                           	opt stack 0
 29607                           tosu	equ	0xFFF
 29608                           tosh	equ	0xFFE
 29609                           tosl	equ	0xFFD
 29610                           pclath	equ	0xFFA
 29611                           tblptru	equ	0xFF8
 29612                           tblptrh	equ	0xFF7
 29613                           tblptrl	equ	0xFF6
 29614                           tablat	equ	0xFF5
 29615                           prodh	equ	0xFF4
 29616                           prodl	equ	0xFF3
 29617                           intcon	equ	0xFF2
 29618                           intcon2	equ	0xFF1
 29619                           intcon3	equ	0xFF0
 29620                           indf0	equ	0xFEF
 29621                           postinc0	equ	0xFEE
 29622                           fsr0h	equ	0xFEA
 29623                           fsr0l	equ	0xFE9
 29624                           wreg	equ	0xFE8
 29625                           postinc1	equ	0xFE6
 29626                           postdec1	equ	0xFE5
 29627                           plusw1	equ	0xFE3
 29628                           fsr1h	equ	0xFE2
 29629                           fsr1l	equ	0xFE1
 29630                           indf2	equ	0xFDF
 29631                           postinc2	equ	0xFDE
 29632                           postdec2	equ	0xFDD
 29633                           plusw2	equ	0xFDB
 29634                           fsr2h	equ	0xFDA
 29635                           fsr2l	equ	0xFD9
 29636                           status	equ	0xFD8
 29637                           
 29638 ;; *************** function _RADIO_WriteConfiguration *****************
 29639 ;; Defined at:
 29640 ;;		line 533 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 29641 ;; Parameters:    Size  Location     Type
 29642 ;;  symbolTimeou    2   70[BANK0 ] unsigned int 
 29643 ;; Auto vars:     Size  Location     Type
 29644 ;;  tempValue       4   76[BANK0 ] unsigned long 
 29645 ;;  regValue        1   80[BANK0 ] unsigned char 
 29646 ;;  i               1   75[BANK0 ] unsigned char 
 29647 ;; Return value:  Size  Location     Type
 29648 ;;                  1    wreg      void 
 29649 ;; Registers used:
 29650 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 29651 ;; Tracked objects:
 29652 ;;		On entry : 0/0
 29653 ;;		On exit  : 0/0
 29654 ;;		Unchanged: 0/0
 29655 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29656 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29657 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29658 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29659 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29660 ;;Total ram usage:       11 bytes
 29661 ;; Hardware stack levels used:    1
 29662 ;; Hardware stack levels required when called:   11
 29663 ;; This function calls:
 29664 ;;		_RADIO_RegisterRead
 29665 ;;		_RADIO_RegisterWrite
 29666 ;;		_RADIO_WriteFSKBitRate
 29667 ;;		_RADIO_WriteFSKFrequencyDeviation
 29668 ;;		_RADIO_WriteFrequency
 29669 ;;		_RADIO_WriteMode
 29670 ;;		_RADIO_WritePower
 29671 ;;		___lmul
 29672 ;; This function is called by:
 29673 ;;		_RADIO_Transmit
 29674 ;;		_RADIO_ReceiveStart
 29675 ;;		_RADIO_TransmitCW
 29676 ;; This function uses a non-reentrant model
 29677 ;;
 29678                           
 29679                           	psect	text143
 29680  00152C                     __ptext143:
 29681                           	opt stack 0
 29682  00152C                     _RADIO_WriteConfiguration:
 29683                           	opt stack 17
 29684                           
 29685                           ;radio_driver_SX1276.c: 535: uint32_t tempValue;
 29686                           ;radio_driver_SX1276.c: 536: uint8_t regValue;
 29687                           ;radio_driver_SX1276.c: 537: uint8_t i;
 29688                           ;radio_driver_SX1276.c: 540: RADIO_WriteMode(MODE_SLEEP, RadioConfiguration.modulation, 
      +                          0);
 29689                           
 29690                           ; BSR set to: 0
 29691                           ;incstack = 0
 29692  00152C  C16D  F065         	movff	_RadioConfiguration+24,RADIO_WriteMode@newModulation
 29693  001530  0E00               	movlw	0
 29694  001532  0100               	movlb	0	; () banked
 29695  001534  6F66               	movwf	RADIO_WriteMode@blocking& (0+255),b
 29696  001536  0E00               	movlw	0
 29697  001538  ECDA  F031         	call	_RADIO_WriteMode
 29698                           
 29699                           ;radio_driver_SX1276.c: 541: RADIO_WriteFrequency(RadioConfiguration.frequency);
 29700  00153C  C155  F06D         	movff	_RadioConfiguration,RADIO_WriteFrequency@frequency
 29701  001540  C156  F06E         	movff	_RadioConfiguration+1,RADIO_WriteFrequency@frequency+1
 29702  001544  C157  F06F         	movff	_RadioConfiguration+2,RADIO_WriteFrequency@frequency+2
 29703  001548  C158  F070         	movff	_RadioConfiguration+3,RADIO_WriteFrequency@frequency+3
 29704  00154C  ECC8  F033         	call	_RADIO_WriteFrequency	;wreg free
 29705                           
 29706                           ;radio_driver_SX1276.c: 542: RADIO_WritePower(RadioConfiguration.outputPower);
 29707  001550  0101               	movlb	1	; () banked
 29708  001552  5170               	movf	(_RadioConfiguration+27)& (0+255),w,b
 29709  001554  EC50  F033         	call	_RADIO_WritePower
 29710                           
 29711                           ;radio_driver_SX1276.c: 544: if (MODULATION_LORA == RadioConfiguration.modulation)
 29712  001558  0101               	movlb	1	; () banked
 29713  00155A  056D               	decf	(_RadioConfiguration+24)& (0+255),w,b
 29714  00155C  A4D8               	btfss	status,2,c
 29715  00155E  D1ED               	goto	l228
 29716                           
 29717                           ; BSR set to: 1
 29718                           ;radio_driver_SX1276.c: 545: {
 29719                           ;radio_driver_SX1276.c: 546: RADIO_RegisterWrite(0x39, RadioConfiguration.syncWordLoRa);
 29720  001560  C163  F062         	movff	_RadioConfiguration+14,RADIO_RegisterWrite@value
 29721  001564  0E39               	movlw	57
 29722  001566  ECBE  F048         	call	_RADIO_RegisterWrite
 29723                           
 29724                           ;radio_driver_SX1276.c: 548: RADIO_RegisterWrite(0x1D,
 29725                           ;radio_driver_SX1276.c: 549: (RadioConfiguration.bandWidth << (4)) |
 29726                           ;radio_driver_SX1276.c: 550: (RadioConfiguration.errorCodingRate << (1)) |
 29727                           ;radio_driver_SX1276.c: 551: (RadioConfiguration.implicitHeaderMode & 0x01));
 29728  00156A  C177  F0A8         	movff	_RadioConfiguration+34,??_RADIO_WriteConfiguration
 29729  00156E  0E01               	movlw	1
 29730  001570  0100               	movlb	0	; () banked
 29731  001572  17A8               	andwf	??_RADIO_WriteConfiguration& (0+255),f,b
 29732  001574  0101               	movlb	1	; () banked
 29733  001576  90D8               	bcf	status,0,c
 29734  001578  3576               	rlcf	(_RadioConfiguration+33)& (0+255),w,b
 29735  00157A  0100               	movlb	0	; () banked
 29736  00157C  6FA9               	movwf	(??_RADIO_WriteConfiguration+1)& (0+255),b
 29737  00157E  0101               	movlb	1	; () banked
 29738  001580  396F               	swapf	(_RadioConfiguration+26)& (0+255),w,b
 29739  001582  0BF0               	andlw	240
 29740  001584  0100               	movlb	0	; () banked
 29741  001586  11A9               	iorwf	(??_RADIO_WriteConfiguration+1)& (0+255),w,b
 29742  001588  11A8               	iorwf	??_RADIO_WriteConfiguration& (0+255),w,b
 29743  00158A  6F62               	movwf	RADIO_RegisterWrite@value& (0+255),b
 29744  00158C  0E1D               	movlw	29
 29745  00158E  ECBE  F048         	call	_RADIO_RegisterWrite
 29746                           
 29747                           ;radio_driver_SX1276.c: 553: RADIO_RegisterWrite(0x1E,
 29748                           ;radio_driver_SX1276.c: 554: (RadioConfiguration.dataRate << (4)) |
 29749                           ;radio_driver_SX1276.c: 555: ((RadioConfiguration.crcOn & 0x01) << (2)) |
 29750                           ;radio_driver_SX1276.c: 556: ((symbolTimeout & 0x0300) >> (8)));
 29751  001592  C0A6  F0A8         	movff	RADIO_WriteConfiguration@symbolTimeout,??_RADIO_WriteConfiguration
 29752  001596  C0A7  F0A9         	movff	RADIO_WriteConfiguration@symbolTimeout+1,??_RADIO_WriteConfiguration+1
 29753  00159A  C0A9  F0A8         	movff	??_RADIO_WriteConfiguration+1,??_RADIO_WriteConfiguration
 29754  00159E  0100               	movlb	0	; () banked
 29755  0015A0  6BA9               	clrf	(??_RADIO_WriteConfiguration+1)& (0+255),b
 29756  0015A2  0E03               	movlw	3
 29757  0015A4  17A8               	andwf	??_RADIO_WriteConfiguration& (0+255),f,b
 29758  0015A6  C171  F0AA         	movff	_RadioConfiguration+28,??_RADIO_WriteConfiguration+2
 29759  0015AA  0E01               	movlw	1
 29760  0015AC  17AA               	andwf	(??_RADIO_WriteConfiguration+2)& (0+255),f,b
 29761  0015AE  90D8               	bcf	status,0,c
 29762  0015B0  37AA               	rlcf	(??_RADIO_WriteConfiguration+2)& (0+255),f,b
 29763  0015B2  90D8               	bcf	status,0,c
 29764  0015B4  37AA               	rlcf	(??_RADIO_WriteConfiguration+2)& (0+255),f,b
 29765  0015B6  0101               	movlb	1	; () banked
 29766  0015B8  396E               	swapf	(_RadioConfiguration+25)& (0+255),w,b
 29767  0015BA  0BF0               	andlw	240
 29768  0015BC  0100               	movlb	0	; () banked
 29769  0015BE  11AA               	iorwf	(??_RADIO_WriteConfiguration+2)& (0+255),w,b
 29770  0015C0  11A8               	iorwf	??_RADIO_WriteConfiguration& (0+255),w,b
 29771  0015C2  6F62               	movwf	RADIO_RegisterWrite@value& (0+255),b
 29772  0015C4  0E1E               	movlw	30
 29773  0015C6  ECBE  F048         	call	_RADIO_RegisterWrite
 29774                           
 29775                           ;radio_driver_SX1276.c: 560: if (0 != RadioConfiguration.frequencyHopPeriod)
 29776  0015CA  0101               	movlb	1	; () banked
 29777  0015CC  5173               	movf	(_RadioConfiguration+30)& (0+255),w,b
 29778  0015CE  1174               	iorwf	(_RadioConfiguration+31)& (0+255),w,b
 29779  0015D0  B4D8               	btfsc	status,2,c
 29780  0015D2  D06F               	goto	l229
 29781                           
 29782                           ; BSR set to: 1
 29783                           ;radio_driver_SX1276.c: 561: {
 29784                           ;radio_driver_SX1276.c: 562: tempValue = RadioConfiguration.frequencyHopPeriod;
 29785  0015D4  C173  F0AC         	movff	_RadioConfiguration+30,RADIO_WriteConfiguration@tempValue
 29786  0015D8  C174  F0AD         	movff	_RadioConfiguration+31,RADIO_WriteConfiguration@tempValue+1
 29787  0015DC  0100               	movlb	0	; () banked
 29788  0015DE  6BAE               	clrf	(RADIO_WriteConfiguration@tempValue+2)& (0+255),b
 29789  0015E0  6BAF               	clrf	(RADIO_WriteConfiguration@tempValue+3)& (0+255),b
 29790                           
 29791                           ;radio_driver_SX1276.c: 564: switch (RadioConfiguration.bandWidth)
 29792  0015E2  D04E               	goto	l230
 29793  0015E4                     
 29794                           ;radio_driver_SX1276.c: 567: tempValue *= 125;
 29795                           
 29796                           ; BSR set to: 0
 29797  0015E4  C0AC  F09A         	movff	RADIO_WriteConfiguration@tempValue,___lmul@multiplier
 29798  0015E8  C0AD  F09B         	movff	RADIO_WriteConfiguration@tempValue+1,___lmul@multiplier+1
 29799  0015EC  C0AE  F09C         	movff	RADIO_WriteConfiguration@tempValue+2,___lmul@multiplier+2
 29800  0015F0  C0AF  F09D         	movff	RADIO_WriteConfiguration@tempValue+3,___lmul@multiplier+3
 29801  0015F4  0E7D               	movlw	125
 29802  0015F6  0100               	movlb	0	; () banked
 29803  0015F8  6F9E               	movwf	___lmul@multiplicand& (0+255),b
 29804  0015FA  0E00               	movlw	0
 29805  0015FC  6F9F               	movwf	(___lmul@multiplicand+1)& (0+255),b
 29806  0015FE  0E00               	movlw	0
 29807  001600  6FA0               	movwf	(___lmul@multiplicand+2)& (0+255),b
 29808  001602  0E00               	movlw	0
 29809  001604  6FA1               	movwf	(___lmul@multiplicand+3)& (0+255),b
 29810  001606  EC4D  F042         	call	___lmul	;wreg free
 29811  00160A  D027               	goto	L21
 29812  00160C                     
 29813                           ;radio_driver_SX1276.c: 570: tempValue *= 250;
 29814  00160C  C0AC  F09A         	movff	RADIO_WriteConfiguration@tempValue,___lmul@multiplier
 29815  001610  C0AD  F09B         	movff	RADIO_WriteConfiguration@tempValue+1,___lmul@multiplier+1
 29816  001614  C0AE  F09C         	movff	RADIO_WriteConfiguration@tempValue+2,___lmul@multiplier+2
 29817  001618  C0AF  F09D         	movff	RADIO_WriteConfiguration@tempValue+3,___lmul@multiplier+3
 29818  00161C  0EFA               	movlw	250
 29819  00161E  0100               	movlb	0	; () banked
 29820  001620  6F9E               	movwf	___lmul@multiplicand& (0+255),b
 29821  001622  0E00               	movlw	0
 29822  001624  6F9F               	movwf	(___lmul@multiplicand+1)& (0+255),b
 29823  001626  0E00               	movlw	0
 29824  001628  6FA0               	movwf	(___lmul@multiplicand+2)& (0+255),b
 29825  00162A  0E00               	movlw	0
 29826  00162C  6FA1               	movwf	(___lmul@multiplicand+3)& (0+255),b
 29827  00162E  EC4D  F042         	call	___lmul	;wreg free
 29828  001632  D013               	goto	L21
 29829  001634                     
 29830                           ;radio_driver_SX1276.c: 573: tempValue *= 500;
 29831  001634  C0AC  F09A         	movff	RADIO_WriteConfiguration@tempValue,___lmul@multiplier
 29832  001638  C0AD  F09B         	movff	RADIO_WriteConfiguration@tempValue+1,___lmul@multiplier+1
 29833  00163C  C0AE  F09C         	movff	RADIO_WriteConfiguration@tempValue+2,___lmul@multiplier+2
 29834  001640  C0AF  F09D         	movff	RADIO_WriteConfiguration@tempValue+3,___lmul@multiplier+3
 29835  001644  0EF4               	movlw	244
 29836  001646  0100               	movlb	0	; () banked
 29837  001648  6F9E               	movwf	___lmul@multiplicand& (0+255),b
 29838  00164A  0E01               	movlw	1
 29839  00164C  6F9F               	movwf	(___lmul@multiplicand+1)& (0+255),b
 29840  00164E  0E00               	movlw	0
 29841  001650  6FA0               	movwf	(___lmul@multiplicand+2)& (0+255),b
 29842  001652  0E00               	movlw	0
 29843  001654  6FA1               	movwf	(___lmul@multiplicand+3)& (0+255),b
 29844  001656  EC4D  F042         	call	___lmul	;wreg free
 29845  00165A                     L21:
 29846  00165A  C09A  F0AC         	movff	?___lmul,RADIO_WriteConfiguration@tempValue
 29847  00165E  C09B  F0AD         	movff	?___lmul+1,RADIO_WriteConfiguration@tempValue+1
 29848  001662  C09C  F0AE         	movff	?___lmul+2,RADIO_WriteConfiguration@tempValue+2
 29849  001666  C09D  F0AF         	movff	?___lmul+3,RADIO_WriteConfiguration@tempValue+3
 29850                           
 29851                           ;radio_driver_SX1276.c: 574: break;
 29852  00166A  D016               	goto	l232
 29853  00166C                     
 29854                           ;radio_driver_SX1276.c: 577: tempValue = 0;
 29855  00166C  0E00               	movlw	0
 29856  00166E  0100               	movlb	0	; () banked
 29857  001670  6FAC               	movwf	RADIO_WriteConfiguration@tempValue& (0+255),b
 29858  001672  0E00               	movlw	0
 29859  001674  6FAD               	movwf	(RADIO_WriteConfiguration@tempValue+1)& (0+255),b
 29860  001676  0E00               	movlw	0
 29861  001678  6FAE               	movwf	(RADIO_WriteConfiguration@tempValue+2)& (0+255),b
 29862  00167A  0E00               	movlw	0
 29863  00167C  6FAF               	movwf	(RADIO_WriteConfiguration@tempValue+3)& (0+255),b
 29864                           
 29865                           ; BSR set to: 0
 29866                           ;radio_driver_SX1276.c: 579: }
 29867                           
 29868                           ;radio_driver_SX1276.c: 578: break;
 29869  00167E  D00C               	goto	l232
 29870  001680                     l230:
 29871                           
 29872                           ; BSR set to: 0
 29873                           
 29874                           ; BSR set to: 0
 29875  001680  0101               	movlb	1	; () banked
 29876  001682  516F               	movf	(_RadioConfiguration+26)& (0+255),w,b
 29877                           
 29878                           ; Switch size 1, requested type "space"
 29879                           ; Number of cases is 3, Range of values is 7 to 9
 29880                           ; switch strategies available:
 29881                           ; Name         Instructions Cycles
 29882                           ; simple_byte           10     6 (average)
 29883                           ;	Chosen strategy is simple_byte
 29884  001684  0A07               	xorlw	7	; case 7
 29885  001686  B4D8               	btfsc	status,2,c
 29886  001688  D7AD               	goto	l231
 29887  00168A  0A0F               	xorlw	15	; case 8
 29888  00168C  B4D8               	btfsc	status,2,c
 29889  00168E  D7BE               	goto	l233
 29890  001690  0A01               	xorlw	1	; case 9
 29891  001692  B4D8               	btfsc	status,2,c
 29892  001694  D7CF               	goto	l234
 29893  001696  D7EA               	goto	l235
 29894  001698                     l232:
 29895                           
 29896                           ;radio_driver_SX1276.c: 581: tempValue >>= RadioConfiguration.dataRate;
 29897                           
 29898                           ; BSR set to: 1
 29899  001698  0101               	movlb	1	; () banked
 29900  00169A  296E               	incf	(_RadioConfiguration+25)& (0+255),w,b
 29901  00169C  0100               	movlb	0	; () banked
 29902  00169E  6FA8               	movwf	??_RADIO_WriteConfiguration& (0+255),b
 29903  0016A0  D005               	goto	u8530
 29904  0016A2                     u8535:
 29905  0016A2  90D8               	bcf	status,0,c
 29906  0016A4  33AF               	rrcf	(RADIO_WriteConfiguration@tempValue+3)& (0+255),f,b
 29907  0016A6  33AE               	rrcf	(RADIO_WriteConfiguration@tempValue+2)& (0+255),f,b
 29908  0016A8  33AD               	rrcf	(RADIO_WriteConfiguration@tempValue+1)& (0+255),f,b
 29909  0016AA  33AC               	rrcf	RADIO_WriteConfiguration@tempValue& (0+255),f,b
 29910  0016AC                     u8530:
 29911  0016AC  2FA8               	decfsz	??_RADIO_WriteConfiguration& (0+255),f,b
 29912  0016AE  D7F9               	goto	u8535
 29913                           
 29914                           ;radio_driver_SX1276.c: 582: }
 29915  0016B0  D009               	goto	l236
 29916  0016B2                     l229:
 29917                           
 29918                           ;radio_driver_SX1276.c: 583: else
 29919                           ;radio_driver_SX1276.c: 584: {
 29920                           ;radio_driver_SX1276.c: 585: tempValue = 0;
 29921  0016B2  0E00               	movlw	0
 29922  0016B4  0100               	movlb	0	; () banked
 29923  0016B6  6FAC               	movwf	RADIO_WriteConfiguration@tempValue& (0+255),b
 29924  0016B8  0E00               	movlw	0
 29925  0016BA  6FAD               	movwf	(RADIO_WriteConfiguration@tempValue+1)& (0+255),b
 29926  0016BC  0E00               	movlw	0
 29927  0016BE  6FAE               	movwf	(RADIO_WriteConfiguration@tempValue+2)& (0+255),b
 29928  0016C0  0E00               	movlw	0
 29929  0016C2  6FAF               	movwf	(RADIO_WriteConfiguration@tempValue+3)& (0+255),b
 29930  0016C4                     l236:
 29931                           
 29932                           ;radio_driver_SX1276.c: 586: }
 29933                           ;radio_driver_SX1276.c: 587: RADIO_RegisterWrite(0x24, (uint8_t)tempValue);
 29934                           
 29935                           ; BSR set to: 0
 29936  0016C4  C0AC  F062         	movff	RADIO_WriteConfiguration@tempValue,RADIO_RegisterWrite@value
 29937  0016C8  0E24               	movlw	36
 29938  0016CA  ECBE  F048         	call	_RADIO_RegisterWrite
 29939                           
 29940                           ;radio_driver_SX1276.c: 589: RADIO_RegisterWrite(0x1F, (symbolTimeout & 0xFF));
 29941  0016CE  C0A6  F062         	movff	RADIO_WriteConfiguration@symbolTimeout,RADIO_RegisterWrite@value
 29942  0016D2  0E1F               	movlw	31
 29943  0016D4  ECBE  F048         	call	_RADIO_RegisterWrite
 29944                           
 29945                           ;radio_driver_SX1276.c: 595: regValue = RADIO_RegisterRead(0x26);
 29946  0016D8  0E26               	movlw	38
 29947  0016DA  ECE7  F047         	call	_RADIO_RegisterRead
 29948  0016DE  0100               	movlb	0	; () banked
 29949  0016E0  6FB0               	movwf	RADIO_WriteConfiguration@regValue& (0+255),b
 29950                           
 29951                           ; BSR set to: 0
 29952                           ;radio_driver_SX1276.c: 596: if (
 29953                           ;radio_driver_SX1276.c: 597: (
 29954                           ;radio_driver_SX1276.c: 598: (SF_12 == RadioConfiguration.dataRate) &&
 29955                           ;radio_driver_SX1276.c: 599: ((BW_125KHZ == RadioConfiguration.bandWidth) || (BW_250KHZ 
      +                          == RadioConfiguration.bandWidth))
 29956                           ;radio_driver_SX1276.c: 600: ) ||
 29957                           ;radio_driver_SX1276.c: 601: (
 29958                           ;radio_driver_SX1276.c: 602: (SF_11 == RadioConfiguration.dataRate) &&
 29959                           ;radio_driver_SX1276.c: 603: (BW_125KHZ == RadioConfiguration.bandWidth)
 29960                           ;radio_driver_SX1276.c: 604: )
 29961                           ;radio_driver_SX1276.c: 605: )
 29962  0016E2  0E0C               	movlw	12
 29963  0016E4  0101               	movlb	1	; () banked
 29964  0016E6  196E               	xorwf	(_RadioConfiguration+25)& (0+255),w,b
 29965  0016E8  A4D8               	btfss	status,2,c
 29966  0016EA  D008               	goto	u8560
 29967                           
 29968                           ; BSR set to: 1
 29969  0016EC  0E07               	movlw	7
 29970  0016EE  196F               	xorwf	(_RadioConfiguration+26)& (0+255),w,b
 29971  0016F0  B4D8               	btfsc	status,2,c
 29972  0016F2  D00C               	goto	u8580
 29973                           
 29974                           ; BSR set to: 1
 29975  0016F4  0E08               	movlw	8
 29976  0016F6  196F               	xorwf	(_RadioConfiguration+26)& (0+255),w,b
 29977  0016F8  B4D8               	btfsc	status,2,c
 29978  0016FA  D008               	goto	u8580
 29979  0016FC                     u8560:
 29980                           
 29981                           ; BSR set to: 1
 29982                           
 29983                           ; BSR set to: 1
 29984  0016FC  0E0B               	movlw	11
 29985  0016FE  196E               	xorwf	(_RadioConfiguration+25)& (0+255),w,b
 29986  001700  A4D8               	btfss	status,2,c
 29987  001702  D007               	goto	l237
 29988                           
 29989                           ; BSR set to: 1
 29990  001704  0E07               	movlw	7
 29991  001706  196F               	xorwf	(_RadioConfiguration+26)& (0+255),w,b
 29992  001708  A4D8               	btfss	status,2,c
 29993  00170A  D003               	goto	l237
 29994  00170C                     u8580:
 29995                           
 29996                           ; BSR set to: 1
 29997                           ;radio_driver_SX1276.c: 606: {
 29998                           ;radio_driver_SX1276.c: 607: regValue |= 1 << (3);
 29999                           
 30000                           ; BSR set to: 1
 30001  00170C  0100               	movlb	0	; () banked
 30002  00170E  87B0               	bsf	RADIO_WriteConfiguration@regValue& (0+255),3,b
 30003                           
 30004                           ;radio_driver_SX1276.c: 608: }
 30005  001710  D002               	goto	l242
 30006  001712                     l237:
 30007                           
 30008                           ;radio_driver_SX1276.c: 609: else
 30009                           ;radio_driver_SX1276.c: 610: {
 30010                           ;radio_driver_SX1276.c: 611: regValue &= ~(1 << (3));
 30011                           
 30012                           ; BSR set to: 0
 30013  001712  0100               	movlb	0	; () banked
 30014  001714  97B0               	bcf	RADIO_WriteConfiguration@regValue& (0+255),3,b
 30015  001716                     l242:
 30016                           
 30017                           ; BSR set to: 0
 30018                           ;radio_driver_SX1276.c: 612: }
 30019                           ;radio_driver_SX1276.c: 613: regValue |= 1 << (2);
 30020  001716  85B0               	bsf	RADIO_WriteConfiguration@regValue& (0+255),2,b
 30021                           
 30022                           ; BSR set to: 0
 30023                           ;radio_driver_SX1276.c: 614: RADIO_RegisterWrite(0x26, regValue);
 30024  001718  C0B0  F062         	movff	RADIO_WriteConfiguration@regValue,RADIO_RegisterWrite@value
 30025  00171C  0E26               	movlw	38
 30026  00171E  ECBE  F048         	call	_RADIO_RegisterWrite
 30027                           
 30028                           ;radio_driver_SX1276.c: 616: regValue = RADIO_RegisterRead(0x31);
 30029  001722  0E31               	movlw	49
 30030  001724  ECE7  F047         	call	_RADIO_RegisterRead
 30031  001728  0100               	movlb	0	; () banked
 30032  00172A  6FB0               	movwf	RADIO_WriteConfiguration@regValue& (0+255),b
 30033                           
 30034                           ; BSR set to: 0
 30035                           ;radio_driver_SX1276.c: 617: regValue &= ~(0x07);
 30036  00172C  0EF8               	movlw	248
 30037  00172E  17B0               	andwf	RADIO_WriteConfiguration@regValue& (0+255),f,b
 30038                           
 30039                           ; BSR set to: 0
 30040                           ;radio_driver_SX1276.c: 618: regValue |= 0x03;
 30041  001730  0E03               	movlw	3
 30042  001732  13B0               	iorwf	RADIO_WriteConfiguration@regValue& (0+255),f,b
 30043                           
 30044                           ; BSR set to: 0
 30045                           ;radio_driver_SX1276.c: 619: RADIO_RegisterWrite(0x31, regValue);
 30046  001734  C0B0  F062         	movff	RADIO_WriteConfiguration@regValue,RADIO_RegisterWrite@value
 30047  001738  0E31               	movlw	49
 30048  00173A  ECBE  F048         	call	_RADIO_RegisterWrite
 30049                           
 30050                           ;radio_driver_SX1276.c: 622: RADIO_RegisterWrite(0x37, 0x0A);
 30051  00173E  0E0A               	movlw	10
 30052  001740  0100               	movlb	0	; () banked
 30053  001742  6F62               	movwf	RADIO_RegisterWrite@value& (0+255),b
 30054  001744  0E37               	movlw	55
 30055  001746  ECBE  F048         	call	_RADIO_RegisterWrite
 30056                           
 30057                           ;radio_driver_SX1276.c: 625: if (0x12 == RadioConfiguration.regVersion)
 30058  00174A  0E12               	movlw	18
 30059  00174C  0101               	movlb	1	; () banked
 30060  00174E  1986               	xorwf	(_RadioConfiguration+49)& (0+255),w,b
 30061  001750  A4D8               	btfss	status,2,c
 30062  001752  D02F               	goto	l247
 30063                           
 30064                           ; BSR set to: 1
 30065                           ;radio_driver_SX1276.c: 626: {
 30066                           ;radio_driver_SX1276.c: 629: if ( (BW_125KHZ == RadioConfiguration.bandWidth) ||
 30067                           ;radio_driver_SX1276.c: 630: (BW_250KHZ == RadioConfiguration.bandWidth) )
 30068  001754  0E07               	movlw	7
 30069  001756  196F               	xorwf	(_RadioConfiguration+26)& (0+255),w,b
 30070  001758  B4D8               	btfsc	status,2,c
 30071  00175A  D004               	goto	u8610
 30072                           
 30073                           ; BSR set to: 1
 30074  00175C  0E08               	movlw	8
 30075  00175E  196F               	xorwf	(_RadioConfiguration+26)& (0+255),w,b
 30076  001760  A4D8               	btfss	status,2,c
 30077  001762  D017               	goto	l244
 30078  001764                     u8610:
 30079                           
 30080                           ; BSR set to: 1
 30081                           ;radio_driver_SX1276.c: 631: {
 30082                           ;radio_driver_SX1276.c: 632: regValue = RADIO_RegisterRead(0x31);
 30083                           
 30084                           ; BSR set to: 1
 30085  001764  0E31               	movlw	49
 30086  001766  ECE7  F047         	call	_RADIO_RegisterRead
 30087  00176A  0100               	movlb	0	; () banked
 30088  00176C  6FB0               	movwf	RADIO_WriteConfiguration@regValue& (0+255),b
 30089                           
 30090                           ; BSR set to: 0
 30091                           ;radio_driver_SX1276.c: 633: regValue &= ~0x80;
 30092  00176E  9FB0               	bcf	RADIO_WriteConfiguration@regValue& (0+255),7,b
 30093                           
 30094                           ; BSR set to: 0
 30095                           ;radio_driver_SX1276.c: 634: RADIO_RegisterWrite(0x31, regValue);
 30096  001770  C0B0  F062         	movff	RADIO_WriteConfiguration@regValue,RADIO_RegisterWrite@value
 30097  001774  0E31               	movlw	49
 30098  001776  ECBE  F048         	call	_RADIO_RegisterWrite
 30099                           
 30100                           ;radio_driver_SX1276.c: 635: RADIO_RegisterWrite(0x2F, 0x40);
 30101  00177A  0E40               	movlw	64
 30102  00177C  0100               	movlb	0	; () banked
 30103  00177E  6F62               	movwf	RADIO_RegisterWrite@value& (0+255),b
 30104  001780  0E2F               	movlw	47
 30105  001782  ECBE  F048         	call	_RADIO_RegisterWrite
 30106                           
 30107                           ;radio_driver_SX1276.c: 636: RADIO_RegisterWrite(0x30, 0x00);
 30108  001786  0E00               	movlw	0
 30109  001788  0100               	movlb	0	; () banked
 30110  00178A  6F62               	movwf	RADIO_RegisterWrite@value& (0+255),b
 30111  00178C  0E30               	movlw	48
 30112  00178E  ECBE  F048         	call	_RADIO_RegisterWrite
 30113  001792                     l244:
 30114                           
 30115                           ;radio_driver_SX1276.c: 637: }
 30116                           ;radio_driver_SX1276.c: 639: if (BW_500KHZ == RadioConfiguration.bandWidth)
 30117  001792  0E09               	movlw	9
 30118  001794  0101               	movlb	1	; () banked
 30119  001796  196F               	xorwf	(_RadioConfiguration+26)& (0+255),w,b
 30120  001798  A4D8               	btfss	status,2,c
 30121  00179A  D00B               	goto	l247
 30122                           
 30123                           ; BSR set to: 1
 30124                           ;radio_driver_SX1276.c: 640: {
 30125                           ;radio_driver_SX1276.c: 641: regValue = RADIO_RegisterRead(0x31);
 30126  00179C  0E31               	movlw	49
 30127  00179E  ECE7  F047         	call	_RADIO_RegisterRead
 30128  0017A2  0100               	movlb	0	; () banked
 30129  0017A4  6FB0               	movwf	RADIO_WriteConfiguration@regValue& (0+255),b
 30130                           
 30131                           ; BSR set to: 0
 30132                           ;radio_driver_SX1276.c: 642: regValue |= 0x80;
 30133  0017A6  8FB0               	bsf	RADIO_WriteConfiguration@regValue& (0+255),7,b
 30134                           
 30135                           ; BSR set to: 0
 30136                           ;radio_driver_SX1276.c: 643: RADIO_RegisterWrite(0x31, regValue);
 30137  0017A8  C0B0  F062         	movff	RADIO_WriteConfiguration@regValue,RADIO_RegisterWrite@value
 30138  0017AC  0E31               	movlw	49
 30139  0017AE  ECBE  F048         	call	_RADIO_RegisterWrite
 30140  0017B2                     l247:
 30141                           
 30142                           ;radio_driver_SX1276.c: 644: }
 30143                           ;radio_driver_SX1276.c: 645: }
 30144                           ;radio_driver_SX1276.c: 647: regValue = RADIO_RegisterRead(0x33);
 30145  0017B2  0E33               	movlw	51
 30146  0017B4  ECE7  F047         	call	_RADIO_RegisterRead
 30147  0017B8  0100               	movlb	0	; () banked
 30148  0017BA  6FB0               	movwf	RADIO_WriteConfiguration@regValue& (0+255),b
 30149                           
 30150                           ; BSR set to: 0
 30151                           ;radio_driver_SX1276.c: 648: regValue &= ~(1 << (6));
 30152  0017BC  9DB0               	bcf	RADIO_WriteConfiguration@regValue& (0+255),6,b
 30153                           
 30154                           ; BSR set to: 0
 30155                           ;radio_driver_SX1276.c: 649: regValue |= (1 << (0));
 30156  0017BE  81B0               	bsf	RADIO_WriteConfiguration@regValue& (0+255),0,b
 30157                           
 30158                           ; BSR set to: 0
 30159                           ;radio_driver_SX1276.c: 650: regValue |= (RadioConfiguration.iqInverted & 0x01) << (6);
 30160  0017C0  C175  F0A8         	movff	_RadioConfiguration+32,??_RADIO_WriteConfiguration
 30161  0017C4  0E01               	movlw	1
 30162  0017C6  17A8               	andwf	??_RADIO_WriteConfiguration& (0+255),f,b
 30163  0017C8  0E06               	movlw	6
 30164  0017CA  6FA9               	movwf	(??_RADIO_WriteConfiguration+1)& (0+255),b
 30165  0017CC                     u8635:
 30166  0017CC  90D8               	bcf	status,0,c
 30167  0017CE  37A8               	rlcf	??_RADIO_WriteConfiguration& (0+255),f,b
 30168  0017D0  2FA9               	decfsz	(??_RADIO_WriteConfiguration+1)& (0+255),f,b
 30169  0017D2  D7FC               	goto	u8635
 30170  0017D4  51A8               	movf	??_RADIO_WriteConfiguration& (0+255),w,b
 30171  0017D6  13B0               	iorwf	RADIO_WriteConfiguration@regValue& (0+255),f,b
 30172                           
 30173                           ; BSR set to: 0
 30174                           ;radio_driver_SX1276.c: 651: RADIO_RegisterWrite(0x33, regValue);
 30175  0017D8  C0B0  F062         	movff	RADIO_WriteConfiguration@regValue,RADIO_RegisterWrite@value
 30176  0017DC  0E33               	movlw	51
 30177  0017DE  ECBE  F048         	call	_RADIO_RegisterWrite
 30178                           
 30179                           ;radio_driver_SX1276.c: 653: regValue = 0x1D & (~((RadioConfiguration.iqInverted & 0x01)
      +                           << (2)));
 30180  0017E2  C175  F0A8         	movff	_RadioConfiguration+32,??_RADIO_WriteConfiguration
 30181  0017E6  0E01               	movlw	1
 30182  0017E8  0100               	movlb	0	; () banked
 30183  0017EA  17A8               	andwf	??_RADIO_WriteConfiguration& (0+255),f,b
 30184  0017EC  90D8               	bcf	status,0,c
 30185  0017EE  37A8               	rlcf	??_RADIO_WriteConfiguration& (0+255),f,b
 30186  0017F0  90D8               	bcf	status,0,c
 30187  0017F2  35A8               	rlcf	??_RADIO_WriteConfiguration& (0+255),w,b
 30188  0017F4  0AFF               	xorlw	255
 30189  0017F6  0B1D               	andlw	29
 30190  0017F8  6FB0               	movwf	RADIO_WriteConfiguration@regValue& (0+255),b
 30191                           
 30192                           ; BSR set to: 0
 30193                           ;radio_driver_SX1276.c: 654: RADIO_RegisterWrite(0x3B, regValue);
 30194  0017FA  C0B0  F062         	movff	RADIO_WriteConfiguration@regValue,RADIO_RegisterWrite@value
 30195  0017FE  0E3B               	movlw	59
 30196  001800  ECBE  F048         	call	_RADIO_RegisterWrite
 30197                           
 30198                           ;radio_driver_SX1276.c: 656: RADIO_RegisterWrite(0x20, RadioConfiguration.preambleLen >>
      +                           (8));
 30199  001804  0101               	movlb	1	; () banked
 30200  001806  5162               	movf	(_RadioConfiguration+13)& (0+255),w,b
 30201  001808  0100               	movlb	0	; () banked
 30202  00180A  6F62               	movwf	RADIO_RegisterWrite@value& (0+255),b
 30203  00180C  0E20               	movlw	32
 30204  00180E  ECBE  F048         	call	_RADIO_RegisterWrite
 30205                           
 30206                           ;radio_driver_SX1276.c: 657: RADIO_RegisterWrite(0x21, RadioConfiguration.preambleLen & 
      +                          0xFF);
 30207  001812  C161  F062         	movff	_RadioConfiguration+12,RADIO_RegisterWrite@value
 30208  001816  0E21               	movlw	33
 30209  001818  ECBE  F048         	call	_RADIO_RegisterWrite
 30210                           
 30211                           ;radio_driver_SX1276.c: 659: RADIO_RegisterWrite(0x0D, 0x00);
 30212  00181C  0E00               	movlw	0
 30213  00181E  0100               	movlb	0	; () banked
 30214  001820  6F62               	movwf	RADIO_RegisterWrite@value& (0+255),b
 30215  001822  0E0D               	movlw	13
 30216  001824  ECBE  F048         	call	_RADIO_RegisterWrite
 30217                           
 30218                           ;radio_driver_SX1276.c: 660: RADIO_RegisterWrite(0x0E, 0x00);
 30219  001828  0E00               	movlw	0
 30220  00182A  0100               	movlb	0	; () banked
 30221  00182C  6F62               	movwf	RADIO_RegisterWrite@value& (0+255),b
 30222  00182E  0E0E               	movlw	14
 30223  001830  ECBE  F048         	call	_RADIO_RegisterWrite
 30224                           
 30225                           ;radio_driver_SX1276.c: 661: RADIO_RegisterWrite(0x0F, 0x00);
 30226  001834  0E00               	movlw	0
 30227  001836  0100               	movlb	0	; () banked
 30228  001838  6F62               	movwf	RADIO_RegisterWrite@value& (0+255),b
 30229  00183A  0E0F               	movlw	15
 30230  00183C  ECBE  F048         	call	_RADIO_RegisterWrite
 30231                           
 30232                           ;radio_driver_SX1276.c: 664: if (0x12 == RadioConfiguration.regVersion)
 30233  001840  0E12               	movlw	18
 30234  001842  0101               	movlb	1	; () banked
 30235  001844  1986               	xorwf	(_RadioConfiguration+49)& (0+255),w,b
 30236  001846  A4D8               	btfss	status,2,c
 30237  001848  D071               	goto	l254
 30238                           
 30239                           ; BSR set to: 1
 30240                           ;radio_driver_SX1276.c: 665: {
 30241                           ;radio_driver_SX1276.c: 666: if ( (BW_500KHZ == RadioConfiguration.bandWidth) &&
 30242                           ;radio_driver_SX1276.c: 667: (RadioConfiguration.frequency >= 862000000) &&
 30243                           ;radio_driver_SX1276.c: 668: (RadioConfiguration.frequency <= 1020000000)
 30244                           ;radio_driver_SX1276.c: 669: )
 30245  00184A  0E09               	movlw	9
 30246  00184C  196F               	xorwf	(_RadioConfiguration+26)& (0+255),w,b
 30247  00184E  A4D8               	btfss	status,2,c
 30248  001850  D020               	goto	l249
 30249                           
 30250                           ; BSR set to: 1
 30251  001852  0E80               	movlw	128
 30252  001854  5D55               	subwf	_RadioConfiguration& (0+255),w,b
 30253  001856  0E13               	movlw	19
 30254  001858  5956               	subwfb	(_RadioConfiguration+1)& (0+255),w,b
 30255  00185A  0E61               	movlw	97
 30256  00185C  5957               	subwfb	(_RadioConfiguration+2)& (0+255),w,b
 30257  00185E  0E33               	movlw	51
 30258  001860  5958               	subwfb	(_RadioConfiguration+3)& (0+255),w,b
 30259  001862  A0D8               	btfss	status,0,c
 30260  001864  D016               	goto	l249
 30261                           
 30262                           ; BSR set to: 1
 30263  001866  0555               	decf	_RadioConfiguration& (0+255),w,b
 30264  001868  0EF7               	movlw	247
 30265  00186A  5956               	subwfb	(_RadioConfiguration+1)& (0+255),w,b
 30266  00186C  0ECB               	movlw	203
 30267  00186E  5957               	subwfb	(_RadioConfiguration+2)& (0+255),w,b
 30268  001870  0E3C               	movlw	60
 30269  001872  5958               	subwfb	(_RadioConfiguration+3)& (0+255),w,b
 30270  001874  B0D8               	btfsc	status,0,c
 30271  001876  D00D               	goto	l249
 30272                           
 30273                           ; BSR set to: 1
 30274                           ;radio_driver_SX1276.c: 670: {
 30275                           ;radio_driver_SX1276.c: 671: RADIO_RegisterWrite(0x36, 0x02);
 30276  001878  0E02               	movlw	2
 30277  00187A  0100               	movlb	0	; () banked
 30278  00187C  6F62               	movwf	RADIO_RegisterWrite@value& (0+255),b
 30279  00187E  0E36               	movlw	54
 30280  001880  ECBE  F048         	call	_RADIO_RegisterWrite
 30281                           
 30282                           ;radio_driver_SX1276.c: 672: RADIO_RegisterWrite(0x3a, 0x64);
 30283  001884  0E64               	movlw	100
 30284  001886  0100               	movlb	0	; () banked
 30285  001888  6F62               	movwf	RADIO_RegisterWrite@value& (0+255),b
 30286  00188A  0E3A               	movlw	58
 30287  00188C  ECBE  F048         	call	_RADIO_RegisterWrite
 30288                           
 30289                           ;radio_driver_SX1276.c: 673: }
 30290  001890  D02C               	goto	l252
 30291  001892                     l249:
 30292                           
 30293                           ;radio_driver_SX1276.c: 674: else if ( (BW_500KHZ == RadioConfiguration.bandWidth) &&
 30294                           ;radio_driver_SX1276.c: 675: (RadioConfiguration.frequency >= 410000000) &&
 30295                           ;radio_driver_SX1276.c: 676: (RadioConfiguration.frequency <= 525000000)
 30296                           ;radio_driver_SX1276.c: 677: )
 30297  001892  0E09               	movlw	9
 30298  001894  0101               	movlb	1	; () banked
 30299  001896  196F               	xorwf	(_RadioConfiguration+26)& (0+255),w,b
 30300  001898  A4D8               	btfss	status,2,c
 30301  00189A  D021               	goto	l251
 30302                           
 30303                           ; BSR set to: 1
 30304  00189C  0E80               	movlw	128
 30305  00189E  5D55               	subwf	_RadioConfiguration& (0+255),w,b
 30306  0018A0  0E1A               	movlw	26
 30307  0018A2  5956               	subwfb	(_RadioConfiguration+1)& (0+255),w,b
 30308  0018A4  0E70               	movlw	112
 30309  0018A6  5957               	subwfb	(_RadioConfiguration+2)& (0+255),w,b
 30310  0018A8  0E18               	movlw	24
 30311  0018AA  5958               	subwfb	(_RadioConfiguration+3)& (0+255),w,b
 30312  0018AC  A0D8               	btfss	status,0,c
 30313  0018AE  D017               	goto	l251
 30314                           
 30315                           ; BSR set to: 1
 30316  0018B0  0E41               	movlw	65
 30317  0018B2  5D55               	subwf	_RadioConfiguration& (0+255),w,b
 30318  0018B4  0EDD               	movlw	221
 30319  0018B6  5956               	subwfb	(_RadioConfiguration+1)& (0+255),w,b
 30320  0018B8  0E4A               	movlw	74
 30321  0018BA  5957               	subwfb	(_RadioConfiguration+2)& (0+255),w,b
 30322  0018BC  0E1F               	movlw	31
 30323  0018BE  5958               	subwfb	(_RadioConfiguration+3)& (0+255),w,b
 30324  0018C0  B0D8               	btfsc	status,0,c
 30325  0018C2  D00D               	goto	l251
 30326                           
 30327                           ; BSR set to: 1
 30328                           ;radio_driver_SX1276.c: 678: {
 30329                           ;radio_driver_SX1276.c: 679: RADIO_RegisterWrite(0x36, 0x02);
 30330  0018C4  0E02               	movlw	2
 30331  0018C6  0100               	movlb	0	; () banked
 30332  0018C8  6F62               	movwf	RADIO_RegisterWrite@value& (0+255),b
 30333  0018CA  0E36               	movlw	54
 30334  0018CC  ECBE  F048         	call	_RADIO_RegisterWrite
 30335                           
 30336                           ;radio_driver_SX1276.c: 680: RADIO_RegisterWrite(0x3a, 0x7F);
 30337  0018D0  0E7F               	movlw	127
 30338  0018D2  0100               	movlb	0	; () banked
 30339  0018D4  6F62               	movwf	RADIO_RegisterWrite@value& (0+255),b
 30340  0018D6  0E3A               	movlw	58
 30341  0018D8  ECBE  F048         	call	_RADIO_RegisterWrite
 30342                           
 30343                           ;radio_driver_SX1276.c: 681: }
 30344  0018DC  D006               	goto	l252
 30345  0018DE                     l251:
 30346                           
 30347                           ;radio_driver_SX1276.c: 682: else
 30348                           ;radio_driver_SX1276.c: 683: {
 30349                           ;radio_driver_SX1276.c: 684: RADIO_RegisterWrite(0x36, 0x03);
 30350  0018DE  0E03               	movlw	3
 30351  0018E0  0100               	movlb	0	; () banked
 30352  0018E2  6F62               	movwf	RADIO_RegisterWrite@value& (0+255),b
 30353  0018E4  0E36               	movlw	54
 30354  0018E6  ECBE  F048         	call	_RADIO_RegisterWrite
 30355  0018EA                     l252:
 30356                           
 30357                           ;radio_driver_SX1276.c: 685: }
 30358                           ;radio_driver_SX1276.c: 688: if ((BW_500KHZ == RadioConfiguration.bandWidth) && (1 == Ra
      +                          dioConfiguration.iqInverted))
 30359  0018EA  0E09               	movlw	9
 30360  0018EC  0101               	movlb	1	; () banked
 30361  0018EE  196F               	xorwf	(_RadioConfiguration+26)& (0+255),w,b
 30362  0018F0  A4D8               	btfss	status,2,c
 30363  0018F2  D010               	goto	l253
 30364                           
 30365                           ; BSR set to: 1
 30366  0018F4  0575               	decf	(_RadioConfiguration+32)& (0+255),w,b
 30367  0018F6  A4D8               	btfss	status,2,c
 30368  0018F8  D00D               	goto	l253
 30369                           
 30370                           ; BSR set to: 1
 30371                           ;radio_driver_SX1276.c: 689: {
 30372                           ;radio_driver_SX1276.c: 690: RADIO_RegisterWrite(0x3A, 0x65);
 30373  0018FA  0E65               	movlw	101
 30374  0018FC  0100               	movlb	0	; () banked
 30375  0018FE  6F62               	movwf	RADIO_RegisterWrite@value& (0+255),b
 30376  001900  0E3A               	movlw	58
 30377  001902  ECBE  F048         	call	_RADIO_RegisterWrite
 30378                           
 30379                           ;radio_driver_SX1276.c: 691: RADIO_RegisterWrite(0x3B, 25);
 30380  001906  0E19               	movlw	25
 30381  001908  0100               	movlb	0	; () banked
 30382  00190A  6F62               	movwf	RADIO_RegisterWrite@value& (0+255),b
 30383  00190C  0E3B               	movlw	59
 30384  00190E  ECBE  F048         	call	_RADIO_RegisterWrite
 30385                           
 30386                           ;radio_driver_SX1276.c: 692: }
 30387  001912  D00C               	goto	l254
 30388  001914                     l253:
 30389                           
 30390                           ;radio_driver_SX1276.c: 693: else
 30391                           ;radio_driver_SX1276.c: 694: {
 30392                           ;radio_driver_SX1276.c: 695: RADIO_RegisterWrite(0x3A, 0x65);
 30393  001914  0E65               	movlw	101
 30394  001916  0100               	movlb	0	; () banked
 30395  001918  6F62               	movwf	RADIO_RegisterWrite@value& (0+255),b
 30396  00191A  0E3A               	movlw	58
 30397  00191C  ECBE  F048         	call	_RADIO_RegisterWrite
 30398                           
 30399                           ;radio_driver_SX1276.c: 696: RADIO_RegisterWrite(0x3B, 29);
 30400  001920  0E1D               	movlw	29
 30401  001922  0100               	movlb	0	; () banked
 30402  001924  6F62               	movwf	RADIO_RegisterWrite@value& (0+255),b
 30403  001926  0E3B               	movlw	59
 30404  001928  ECBE  F048         	call	_RADIO_RegisterWrite
 30405  00192C                     l254:
 30406                           
 30407                           ;radio_driver_SX1276.c: 697: }
 30408                           ;radio_driver_SX1276.c: 698: }
 30409                           ;radio_driver_SX1276.c: 701: RADIO_RegisterWrite(0x12, 0xFF);
 30410  00192C  0EFF               	movlw	255
 30411  00192E  0100               	movlb	0	; () banked
 30412  001930  6F62               	movwf	RADIO_RegisterWrite@value& (0+255),b
 30413  001932  0E12               	movlw	18
 30414  001934  ECBE  F048         	call	_RADIO_RegisterWrite
 30415                           
 30416                           ;radio_driver_SX1276.c: 702: }
 30417  001938  0012               	return	
 30418  00193A                     l228:
 30419                           
 30420                           ;radio_driver_SX1276.c: 703: else
 30421                           ;radio_driver_SX1276.c: 704: {
 30422                           ;radio_driver_SX1276.c: 706: RADIO_WriteFSKFrequencyDeviation(RadioConfiguration.frequen
      +                          cyDeviation);
 30423  00193A  C159  F06D         	movff	_RadioConfiguration+4,RADIO_WriteFSKFrequencyDeviation@frequencyDeviation
 30424  00193E  C15A  F06E         	movff	_RadioConfiguration+5,RADIO_WriteFSKFrequencyDeviation@frequencyDeviation+1
 30425  001942  C15B  F06F         	movff	_RadioConfiguration+6,RADIO_WriteFSKFrequencyDeviation@frequencyDeviation+2
 30426  001946  C15C  F070         	movff	_RadioConfiguration+7,RADIO_WriteFSKFrequencyDeviation@frequencyDeviation+3
 30427  00194A  EC3F  F03F         	call	_RADIO_WriteFSKFrequencyDeviation	;wreg free
 30428                           
 30429                           ;radio_driver_SX1276.c: 707: RADIO_WriteFSKBitRate(RadioConfiguration.bitRate);
 30430  00194E  C15D  F06D         	movff	_RadioConfiguration+8,RADIO_WriteFSKBitRate@bitRate
 30431  001952  C15E  F06E         	movff	_RadioConfiguration+9,RADIO_WriteFSKBitRate@bitRate+1
 30432  001956  C15F  F06F         	movff	_RadioConfiguration+10,RADIO_WriteFSKBitRate@bitRate+2
 30433  00195A  C160  F070         	movff	_RadioConfiguration+11,RADIO_WriteFSKBitRate@bitRate+3
 30434  00195E  EC74  F03F         	call	_RADIO_WriteFSKBitRate	;wreg free
 30435                           
 30436                           ;radio_driver_SX1276.c: 709: RADIO_RegisterWrite(0x25, RadioConfiguration.preambleLen >>
      +                           (8));
 30437  001962  0101               	movlb	1	; () banked
 30438  001964  5162               	movf	(_RadioConfiguration+13)& (0+255),w,b
 30439  001966  0100               	movlb	0	; () banked
 30440  001968  6F62               	movwf	RADIO_RegisterWrite@value& (0+255),b
 30441  00196A  0E25               	movlw	37
 30442  00196C  ECBE  F048         	call	_RADIO_RegisterWrite
 30443                           
 30444                           ;radio_driver_SX1276.c: 710: RADIO_RegisterWrite(0x26, RadioConfiguration.preambleLen & 
      +                          0xFF);
 30445  001970  C161  F062         	movff	_RadioConfiguration+12,RADIO_RegisterWrite@value
 30446  001974  0E26               	movlw	38
 30447  001976  ECBE  F048         	call	_RADIO_RegisterWrite
 30448                           
 30449                           ;radio_driver_SX1276.c: 713: regValue = RADIO_RegisterRead(0x0A);
 30450  00197A  0E0A               	movlw	10
 30451  00197C  ECE7  F047         	call	_RADIO_RegisterRead
 30452  001980  0100               	movlb	0	; () banked
 30453  001982  6FB0               	movwf	RADIO_WriteConfiguration@regValue& (0+255),b
 30454                           
 30455                           ; BSR set to: 0
 30456                           ;radio_driver_SX1276.c: 714: regValue &= ~0x60;
 30457  001984  0E9F               	movlw	159
 30458  001986  17B0               	andwf	RADIO_WriteConfiguration@regValue& (0+255),f,b
 30459                           
 30460                           ; BSR set to: 0
 30461                           ;radio_driver_SX1276.c: 715: regValue |= RadioConfiguration.fskDataShaping << (5);
 30462  001988  0101               	movlb	1	; () banked
 30463  00198A  3988               	swapf	(_RadioConfiguration+51)& (0+255),w,b
 30464  00198C  46E8               	rlncf	wreg,f,c
 30465  00198E  0BE0               	andlw	224
 30466  001990  0100               	movlb	0	; () banked
 30467  001992  13B0               	iorwf	RADIO_WriteConfiguration@regValue& (0+255),f,b
 30468                           
 30469                           ;radio_driver_SX1276.c: 716: RADIO_RegisterWrite(0x0A, regValue);
 30470  001994  C0B0  F062         	movff	RADIO_WriteConfiguration@regValue,RADIO_RegisterWrite@value
 30471  001998  0E0A               	movlw	10
 30472  00199A  ECBE  F048         	call	_RADIO_RegisterWrite
 30473                           
 30474                           ;radio_driver_SX1276.c: 720: regValue = 0xC8;
 30475  00199E  0EC8               	movlw	200
 30476  0019A0  0100               	movlb	0	; () banked
 30477  0019A2  6FB0               	movwf	RADIO_WriteConfiguration@regValue& (0+255),b
 30478                           
 30479                           ; BSR set to: 0
 30480                           ;radio_driver_SX1276.c: 721: if (RadioConfiguration.crcOn)
 30481  0019A4  0101               	movlb	1	; () banked
 30482  0019A6  5171               	movf	(_RadioConfiguration+28)& (0+255),w,b
 30483  0019A8  B4D8               	btfsc	status,2,c
 30484  0019AA  D002               	goto	l256
 30485                           
 30486                           ; BSR set to: 1
 30487                           ;radio_driver_SX1276.c: 722: {
 30488                           ;radio_driver_SX1276.c: 723: regValue |= 0x10;
 30489  0019AC  0100               	movlb	0	; () banked
 30490  0019AE  89B0               	bsf	RADIO_WriteConfiguration@regValue& (0+255),4,b
 30491  0019B0                     l256:
 30492                           
 30493                           ;radio_driver_SX1276.c: 724: }
 30494                           ;radio_driver_SX1276.c: 725: RADIO_RegisterWrite(0x30, regValue);
 30495                           
 30496                           ; BSR set to: 0
 30497  0019B0  C0B0  F062         	movff	RADIO_WriteConfiguration@regValue,RADIO_RegisterWrite@value
 30498  0019B4  0E30               	movlw	48
 30499  0019B6  ECBE  F048         	call	_RADIO_RegisterWrite
 30500                           
 30501                           ;radio_driver_SX1276.c: 728: for (i = 0; i < RadioConfiguration.syncWordLen; i++)
 30502  0019BA  0E00               	movlw	0
 30503  0019BC  0100               	movlb	0	; () banked
 30504  0019BE  6FAB               	movwf	RADIO_WriteConfiguration@i& (0+255),b
 30505  0019C0  D010               	goto	l257
 30506  0019C2                     
 30507                           ; BSR set to: 0
 30508                           ;radio_driver_SX1276.c: 729: {
 30509                           ;radio_driver_SX1276.c: 732: RADIO_RegisterWrite(0x28 + i, RadioConfiguration.syncWord[i
      +                          ]);
 30510                           
 30511                           ; BSR set to: 0
 30512  0019C2  51AB               	movf	RADIO_WriteConfiguration@i& (0+255),w,b
 30513  0019C4  0D01               	mullw	1
 30514  0019C6  0E64               	movlw	low (_RadioConfiguration+15)
 30515  0019C8  24F3               	addwf	prodl,w,c
 30516  0019CA  6ED9               	movwf	fsr2l,c
 30517  0019CC  0E01               	movlw	high (_RadioConfiguration+15)
 30518  0019CE  20F4               	addwfc	prodh,w,c
 30519  0019D0  6EDA               	movwf	fsr2h,c
 30520  0019D2  50DF               	movf	indf2,w,c
 30521  0019D4  6F62               	movwf	RADIO_RegisterWrite@value& (0+255),b
 30522  0019D6  51AB               	movf	RADIO_WriteConfiguration@i& (0+255),w,b
 30523  0019D8  0F28               	addlw	40
 30524  0019DA  ECBE  F048         	call	_RADIO_RegisterWrite
 30525  0019DE  0100               	movlb	0	; () banked
 30526  0019E0  2BAB               	incf	RADIO_WriteConfiguration@i& (0+255),f,b
 30527  0019E2                     l257:
 30528                           
 30529                           ; BSR set to: 0
 30530                           
 30531                           ; BSR set to: 0
 30532  0019E2  0101               	movlb	1	; () banked
 30533  0019E4  516C               	movf	(_RadioConfiguration+23)& (0+255),w,b
 30534  0019E6  0100               	movlb	0	; () banked
 30535  0019E8  5DAB               	subwf	RADIO_WriteConfiguration@i& (0+255),w,b
 30536  0019EA  A0D8               	btfss	status,0,c
 30537  0019EC  D7EA               	goto	l258
 30538                           
 30539                           ; BSR set to: 0
 30540                           ;radio_driver_SX1276.c: 733: }
 30541                           ;radio_driver_SX1276.c: 736: if (RadioConfiguration.syncWordLen != 0)
 30542                           
 30543                           ; BSR set to: 0
 30544  0019EE  0101               	movlb	1	; () banked
 30545  0019F0  516C               	movf	(_RadioConfiguration+23)& (0+255),w,b
 30546  0019F2  B4D8               	btfsc	status,2,c
 30547  0019F4  D008               	goto	l260
 30548                           
 30549                           ; BSR set to: 1
 30550                           ;radio_driver_SX1276.c: 737: {
 30551                           ;radio_driver_SX1276.c: 738: RADIO_RegisterWrite(0x27, 0x10 | (RadioConfiguration.syncWo
      +                          rdLen - 1));
 30552  0019F6  056C               	decf	(_RadioConfiguration+23)& (0+255),w,b
 30553  0019F8  0910               	iorlw	16
 30554  0019FA  0100               	movlb	0	; () banked
 30555  0019FC  6F62               	movwf	RADIO_RegisterWrite@value& (0+255),b
 30556  0019FE  0E27               	movlw	39
 30557  001A00  ECBE  F048         	call	_RADIO_RegisterWrite
 30558                           
 30559                           ;radio_driver_SX1276.c: 739: }
 30560  001A04  D006               	goto	l261
 30561  001A06                     l260:
 30562                           
 30563                           ;radio_driver_SX1276.c: 740: else
 30564                           ;radio_driver_SX1276.c: 741: {
 30565                           ;radio_driver_SX1276.c: 742: RADIO_RegisterWrite(0x27, 0x00);
 30566  001A06  0E00               	movlw	0
 30567  001A08  0100               	movlb	0	; () banked
 30568  001A0A  6F62               	movwf	RADIO_RegisterWrite@value& (0+255),b
 30569  001A0C  0E27               	movlw	39
 30570  001A0E  ECBE  F048         	call	_RADIO_RegisterWrite
 30571  001A12                     l261:
 30572                           
 30573                           ;radio_driver_SX1276.c: 743: }
 30574                           ;radio_driver_SX1276.c: 746: RADIO_RegisterWrite(0x3E, 0xFF);
 30575  001A12  0EFF               	movlw	255
 30576  001A14  0100               	movlb	0	; () banked
 30577  001A16  6F62               	movwf	RADIO_RegisterWrite@value& (0+255),b
 30578  001A18  0E3E               	movlw	62
 30579  001A1A  ECBE  F048         	call	_RADIO_RegisterWrite
 30580                           
 30581                           ;radio_driver_SX1276.c: 747: RADIO_RegisterWrite(0x3F, 0xFF);
 30582  001A1E  0EFF               	movlw	255
 30583  001A20  0100               	movlb	0	; () banked
 30584  001A22  6F62               	movwf	RADIO_RegisterWrite@value& (0+255),b
 30585  001A24  0E3F               	movlw	63
 30586  001A26  ECBE  F048         	call	_RADIO_RegisterWrite
 30587  001A2A  0012               	return	
 30588  001A2C                     __end_of_RADIO_WriteConfiguration:
 30589                           	opt stack 0
 30590                           tosu	equ	0xFFF
 30591                           tosh	equ	0xFFE
 30592                           tosl	equ	0xFFD
 30593                           pclath	equ	0xFFA
 30594                           tblptru	equ	0xFF8
 30595                           tblptrh	equ	0xFF7
 30596                           tblptrl	equ	0xFF6
 30597                           tablat	equ	0xFF5
 30598                           prodh	equ	0xFF4
 30599                           prodl	equ	0xFF3
 30600                           intcon	equ	0xFF2
 30601                           intcon2	equ	0xFF1
 30602                           intcon3	equ	0xFF0
 30603                           indf0	equ	0xFEF
 30604                           postinc0	equ	0xFEE
 30605                           fsr0h	equ	0xFEA
 30606                           fsr0l	equ	0xFE9
 30607                           wreg	equ	0xFE8
 30608                           postinc1	equ	0xFE6
 30609                           postdec1	equ	0xFE5
 30610                           plusw1	equ	0xFE3
 30611                           fsr1h	equ	0xFE2
 30612                           fsr1l	equ	0xFE1
 30613                           indf2	equ	0xFDF
 30614                           postinc2	equ	0xFDE
 30615                           postdec2	equ	0xFDD
 30616                           plusw2	equ	0xFDB
 30617                           fsr2h	equ	0xFDA
 30618                           fsr2l	equ	0xFD9
 30619                           status	equ	0xFD8
 30620                           
 30621 ;; *************** function _RADIO_WritePower *****************
 30622 ;; Defined at:
 30623 ;;		line 342 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 30624 ;; Parameters:    Size  Location     Type
 30625 ;;  power           1    wreg     char 
 30626 ;; Auto vars:     Size  Location     Type
 30627 ;;  power           1    6[BANK0 ] char 
 30628 ;;  paDac           1    5[BANK0 ] unsigned char 
 30629 ;;  ocp             1    4[BANK0 ] unsigned char 
 30630 ;; Return value:  Size  Location     Type
 30631 ;;                  1    wreg      void 
 30632 ;; Registers used:
 30633 ;;		wreg, status,2, status,0, cstack
 30634 ;; Tracked objects:
 30635 ;;		On entry : 0/0
 30636 ;;		On exit  : 0/0
 30637 ;;		Unchanged: 0/0
 30638 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30639 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30640 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30641 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30642 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30643 ;;Total ram usage:        3 bytes
 30644 ;; Hardware stack levels used:    1
 30645 ;; Hardware stack levels required when called:   10
 30646 ;; This function calls:
 30647 ;;		_RADIO_RegisterRead
 30648 ;;		_RADIO_RegisterWrite
 30649 ;; This function is called by:
 30650 ;;		_RADIO_WriteConfiguration
 30651 ;; This function uses a non-reentrant model
 30652 ;;
 30653                           
 30654                           	psect	text144
 30655  0066A0                     __ptext144:
 30656                           	opt stack 0
 30657  0066A0                     _RADIO_WritePower:
 30658                           	opt stack 17
 30659                           
 30660                           ;incstack = 0
 30661                           ;RADIO_WritePower@power stored from wreg
 30662  0066A0  0100               	movlb	0	; () banked
 30663  0066A2  6F66               	movwf	RADIO_WritePower@power& (0+255),b
 30664                           
 30665                           ;radio_driver_SX1276.c: 344: uint8_t paDac;
 30666                           ;radio_driver_SX1276.c: 345: uint8_t ocp;
 30667                           ;radio_driver_SX1276.c: 347: if (RadioConfiguration.paBoost == 0)
 30668  0066A4  0101               	movlb	1	; () banked
 30669  0066A6  5172               	movf	(_RadioConfiguration+29)& (0+255),w,b
 30670  0066A8  A4D8               	btfss	status,2,c
 30671  0066AA  D030               	goto	l199
 30672                           
 30673                           ; BSR set to: 1
 30674                           ;radio_driver_SX1276.c: 348: {
 30675                           ;radio_driver_SX1276.c: 350: if (power < -3)
 30676  0066AC  0100               	movlb	0	; () banked
 30677  0066AE  5166               	movf	RADIO_WritePower@power& (0+255),w,b
 30678  0066B0  0A80               	xorlw	128
 30679  0066B2  0F83               	addlw	131
 30680  0066B4  B0D8               	btfsc	status,0,c
 30681  0066B6  D002               	goto	l200
 30682                           
 30683                           ; BSR set to: 0
 30684                           ;radio_driver_SX1276.c: 351: {
 30685                           ;radio_driver_SX1276.c: 352: power = -3;
 30686  0066B8  0EFD               	movlw	253
 30687  0066BA  6F66               	movwf	RADIO_WritePower@power& (0+255),b
 30688  0066BC                     l200:
 30689                           
 30690                           ; BSR set to: 0
 30691                           ;radio_driver_SX1276.c: 353: }
 30692                           ;radio_driver_SX1276.c: 354: if (power > 15)
 30693                           
 30694                           ; BSR set to: 0
 30695  0066BC  5166               	movf	RADIO_WritePower@power& (0+255),w,b
 30696  0066BE  0A80               	xorlw	128
 30697  0066C0  0F70               	addlw	-144
 30698  0066C2  A0D8               	btfss	status,0,c
 30699  0066C4  D002               	goto	l201
 30700                           
 30701                           ; BSR set to: 0
 30702                           ;radio_driver_SX1276.c: 355: {
 30703                           ;radio_driver_SX1276.c: 356: power = 15;
 30704  0066C6  0E0F               	movlw	15
 30705  0066C8  6F66               	movwf	RADIO_WritePower@power& (0+255),b
 30706  0066CA                     l201:
 30707                           
 30708                           ; BSR set to: 0
 30709                           ;radio_driver_SX1276.c: 357: }
 30710                           ;radio_driver_SX1276.c: 359: paDac = RADIO_RegisterRead(0x4D);
 30711                           
 30712                           ; BSR set to: 0
 30713  0066CA  0E4D               	movlw	77
 30714  0066CC  ECE7  F047         	call	_RADIO_RegisterRead
 30715  0066D0  0100               	movlb	0	; () banked
 30716  0066D2  6F65               	movwf	RADIO_WritePower@paDac& (0+255),b
 30717                           
 30718                           ; BSR set to: 0
 30719                           ;radio_driver_SX1276.c: 360: paDac &= ~(0x07);
 30720  0066D4  0EF8               	movlw	248
 30721  0066D6  1765               	andwf	RADIO_WritePower@paDac& (0+255),f,b
 30722                           
 30723                           ; BSR set to: 0
 30724                           ;radio_driver_SX1276.c: 361: paDac |= 0x04;
 30725  0066D8  8565               	bsf	RADIO_WritePower@paDac& (0+255),2,b
 30726                           
 30727                           ; BSR set to: 0
 30728                           ;radio_driver_SX1276.c: 362: RADIO_RegisterWrite(0x4D, paDac);
 30729  0066DA  C065  F062         	movff	RADIO_WritePower@paDac,RADIO_RegisterWrite@value
 30730  0066DE  0E4D               	movlw	77
 30731  0066E0  ECBE  F048         	call	_RADIO_RegisterWrite
 30732                           
 30733                           ;radio_driver_SX1276.c: 364: if (power < 0)
 30734  0066E4  0100               	movlb	0	; () banked
 30735  0066E6  AF66               	btfss	RADIO_WritePower@power& (0+255),7,b
 30736  0066E8  D009               	goto	l202
 30737                           
 30738                           ; BSR set to: 0
 30739                           ;radio_driver_SX1276.c: 365: {
 30740                           ;radio_driver_SX1276.c: 369: power += 3;
 30741  0066EA  0E03               	movlw	3
 30742  0066EC  2766               	addwf	RADIO_WritePower@power& (0+255),f,b
 30743                           
 30744                           ; BSR set to: 0
 30745                           ;radio_driver_SX1276.c: 370: RADIO_RegisterWrite(0x09, 0x20 | power);
 30746  0066EE  5166               	movf	RADIO_WritePower@power& (0+255),w,b
 30747  0066F0  0920               	iorlw	32
 30748  0066F2  6F62               	movwf	RADIO_RegisterWrite@value& (0+255),b
 30749  0066F4  0E09               	movlw	9
 30750  0066F6  ECBE  F048         	call	_RADIO_RegisterWrite
 30751                           
 30752                           ;radio_driver_SX1276.c: 371: }
 30753  0066FA  0012               	return	
 30754  0066FC                     l202:
 30755                           
 30756                           ;radio_driver_SX1276.c: 372: else
 30757                           ;radio_driver_SX1276.c: 373: {
 30758                           ;radio_driver_SX1276.c: 377: RADIO_RegisterWrite(0x09, 0x70 | power);
 30759  0066FC  0100               	movlb	0	; () banked
 30760  0066FE  5166               	movf	RADIO_WritePower@power& (0+255),w,b
 30761  006700  0970               	iorlw	112
 30762  006702  6F62               	movwf	RADIO_RegisterWrite@value& (0+255),b
 30763  006704  0E09               	movlw	9
 30764  006706  ECBE  F048         	call	_RADIO_RegisterWrite
 30765                           
 30766                           ;radio_driver_SX1276.c: 378: }
 30767                           ;radio_driver_SX1276.c: 379: }
 30768  00670A  0012               	return	
 30769  00670C                     l199:
 30770                           
 30771                           ;radio_driver_SX1276.c: 380: else
 30772                           ;radio_driver_SX1276.c: 381: {
 30773                           ;radio_driver_SX1276.c: 385: if (power < 2)
 30774  00670C  0100               	movlb	0	; () banked
 30775  00670E  5166               	movf	RADIO_WritePower@power& (0+255),w,b
 30776  006710  0A80               	xorlw	128
 30777  006712  0F7E               	addlw	-130
 30778  006714  B0D8               	btfsc	status,0,c
 30779  006716  D002               	goto	l205
 30780                           
 30781                           ; BSR set to: 0
 30782                           ;radio_driver_SX1276.c: 386: {
 30783                           ;radio_driver_SX1276.c: 387: power = 2;
 30784  006718  0E02               	movlw	2
 30785  00671A  6F66               	movwf	RADIO_WritePower@power& (0+255),b
 30786  00671C                     l205:
 30787                           
 30788                           ; BSR set to: 0
 30789                           ;radio_driver_SX1276.c: 388: }
 30790                           ;radio_driver_SX1276.c: 391: if (power >= 20)
 30791                           
 30792                           ; BSR set to: 0
 30793  00671C  5166               	movf	RADIO_WritePower@power& (0+255),w,b
 30794  00671E  0A80               	xorlw	128
 30795  006720  0F6C               	addlw	-148
 30796  006722  A0D8               	btfss	status,0,c
 30797  006724  D002               	goto	l206
 30798                           
 30799                           ; BSR set to: 0
 30800                           ;radio_driver_SX1276.c: 392: {
 30801                           ;radio_driver_SX1276.c: 393: power = 20;
 30802  006726  0E14               	movlw	20
 30803  006728  D006               	goto	L22
 30804  00672A                     l206:
 30805                           
 30806                           ; BSR set to: 0
 30807                           ;radio_driver_SX1276.c: 395: else if (power > 17)
 30808                           
 30809                           ; BSR set to: 0
 30810  00672A  5166               	movf	RADIO_WritePower@power& (0+255),w,b
 30811  00672C  0A80               	xorlw	128
 30812  00672E  0F6E               	addlw	-146
 30813  006730  A0D8               	btfss	status,0,c
 30814  006732  D002               	goto	l208
 30815                           
 30816                           ; BSR set to: 0
 30817                           ;radio_driver_SX1276.c: 396: {
 30818                           ;radio_driver_SX1276.c: 397: power = 17;
 30819  006734  0E11               	movlw	17
 30820  006736                     L22:
 30821  006736  6F66               	movwf	RADIO_WritePower@power& (0+255),b
 30822  006738                     l208:
 30823                           
 30824                           ; BSR set to: 0
 30825                           ;radio_driver_SX1276.c: 398: }
 30826                           ;radio_driver_SX1276.c: 400: ocp = RADIO_RegisterRead(0x0B);
 30827                           
 30828                           ; BSR set to: 0
 30829                           
 30830                           ; BSR set to: 0
 30831  006738  0E0B               	movlw	11
 30832  00673A  ECE7  F047         	call	_RADIO_RegisterRead
 30833  00673E  0100               	movlb	0	; () banked
 30834  006740  6F64               	movwf	RADIO_WritePower@ocp& (0+255),b
 30835                           
 30836                           ; BSR set to: 0
 30837                           ;radio_driver_SX1276.c: 401: paDac = RADIO_RegisterRead(0x4D);
 30838  006742  0E4D               	movlw	77
 30839  006744  ECE7  F047         	call	_RADIO_RegisterRead
 30840  006748  0100               	movlb	0	; () banked
 30841  00674A  6F65               	movwf	RADIO_WritePower@paDac& (0+255),b
 30842                           
 30843                           ; BSR set to: 0
 30844                           ;radio_driver_SX1276.c: 402: paDac &= ~(0x07);
 30845  00674C  0EF8               	movlw	248
 30846  00674E  1765               	andwf	RADIO_WritePower@paDac& (0+255),f,b
 30847                           
 30848                           ; BSR set to: 0
 30849                           ;radio_driver_SX1276.c: 403: if (power == 20)
 30850  006750  0E14               	movlw	20
 30851  006752  1966               	xorwf	RADIO_WritePower@power& (0+255),w,b
 30852  006754  A4D8               	btfss	status,2,c
 30853  006756  D006               	goto	l209
 30854                           
 30855                           ; BSR set to: 0
 30856                           ;radio_driver_SX1276.c: 404: {
 30857                           ;radio_driver_SX1276.c: 405: paDac |= 0x07;
 30858  006758  0E07               	movlw	7
 30859  00675A  1365               	iorwf	RADIO_WritePower@paDac& (0+255),f,b
 30860                           
 30861                           ; BSR set to: 0
 30862                           ;radio_driver_SX1276.c: 406: power = 15;
 30863  00675C  0E0F               	movlw	15
 30864  00675E  6F66               	movwf	RADIO_WritePower@power& (0+255),b
 30865                           
 30866                           ; BSR set to: 0
 30867                           ;radio_driver_SX1276.c: 407: ocp &= ~(0x20);
 30868  006760  9B64               	bcf	RADIO_WritePower@ocp& (0+255),5,b
 30869                           
 30870                           ;radio_driver_SX1276.c: 408: }
 30871  006762  D004               	goto	l210
 30872  006764                     l209:
 30873                           
 30874                           ; BSR set to: 0
 30875                           ;radio_driver_SX1276.c: 409: else
 30876                           ;radio_driver_SX1276.c: 410: {
 30877                           ;radio_driver_SX1276.c: 411: paDac |= 0x04;
 30878                           
 30879                           ; BSR set to: 0
 30880  006764  8565               	bsf	RADIO_WritePower@paDac& (0+255),2,b
 30881                           
 30882                           ; BSR set to: 0
 30883                           ;radio_driver_SX1276.c: 412: power -= 2;
 30884  006766  0EFE               	movlw	254
 30885  006768  2766               	addwf	RADIO_WritePower@power& (0+255),f,b
 30886                           
 30887                           ; BSR set to: 0
 30888                           ;radio_driver_SX1276.c: 413: ocp |= 0x20;
 30889  00676A  8B64               	bsf	RADIO_WritePower@ocp& (0+255),5,b
 30890  00676C                     l210:
 30891                           
 30892                           ; BSR set to: 0
 30893                           ;radio_driver_SX1276.c: 414: }
 30894                           ;radio_driver_SX1276.c: 416: RADIO_RegisterWrite(0x4D, paDac);
 30895                           
 30896                           ; BSR set to: 0
 30897  00676C  C065  F062         	movff	RADIO_WritePower@paDac,RADIO_RegisterWrite@value
 30898  006770  0E4D               	movlw	77
 30899  006772  ECBE  F048         	call	_RADIO_RegisterWrite
 30900                           
 30901                           ;radio_driver_SX1276.c: 417: RADIO_RegisterWrite(0x09, 0x80 | power);
 30902  006776  0100               	movlb	0	; () banked
 30903  006778  5166               	movf	RADIO_WritePower@power& (0+255),w,b
 30904  00677A  0980               	iorlw	128
 30905  00677C  6F62               	movwf	RADIO_RegisterWrite@value& (0+255),b
 30906  00677E  0E09               	movlw	9
 30907  006780  ECBE  F048         	call	_RADIO_RegisterWrite
 30908                           
 30909                           ;radio_driver_SX1276.c: 418: RADIO_RegisterWrite(0x0B, ocp);
 30910  006784  C064  F062         	movff	RADIO_WritePower@ocp,RADIO_RegisterWrite@value
 30911  006788  0E0B               	movlw	11
 30912  00678A  ECBE  F048         	call	_RADIO_RegisterWrite
 30913  00678E  0012               	return	
 30914  006790                     __end_of_RADIO_WritePower:
 30915                           	opt stack 0
 30916                           tosu	equ	0xFFF
 30917                           tosh	equ	0xFFE
 30918                           tosl	equ	0xFFD
 30919                           pclath	equ	0xFFA
 30920                           tblptru	equ	0xFF8
 30921                           tblptrh	equ	0xFF7
 30922                           tblptrl	equ	0xFF6
 30923                           tablat	equ	0xFF5
 30924                           prodh	equ	0xFF4
 30925                           prodl	equ	0xFF3
 30926                           intcon	equ	0xFF2
 30927                           intcon2	equ	0xFF1
 30928                           intcon3	equ	0xFF0
 30929                           indf0	equ	0xFEF
 30930                           postinc0	equ	0xFEE
 30931                           fsr0h	equ	0xFEA
 30932                           fsr0l	equ	0xFE9
 30933                           wreg	equ	0xFE8
 30934                           postinc1	equ	0xFE6
 30935                           postdec1	equ	0xFE5
 30936                           plusw1	equ	0xFE3
 30937                           fsr1h	equ	0xFE2
 30938                           fsr1l	equ	0xFE1
 30939                           indf2	equ	0xFDF
 30940                           postinc2	equ	0xFDE
 30941                           postdec2	equ	0xFDD
 30942                           plusw2	equ	0xFDB
 30943                           fsr2h	equ	0xFDA
 30944                           fsr2l	equ	0xFD9
 30945                           status	equ	0xFD8
 30946                           
 30947 ;; *************** function _RADIO_WriteFSKFrequencyDeviation *****************
 30948 ;; Defined at:
 30949 ;;		line 294 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 30950 ;; Parameters:    Size  Location     Type
 30951 ;;  frequencyDev    4   13[BANK0 ] unsigned long 
 30952 ;; Auto vars:     Size  Location     Type
 30953 ;;  num             4   17[BANK0 ] unsigned long 
 30954 ;; Return value:  Size  Location     Type
 30955 ;;                  1    wreg      void 
 30956 ;; Registers used:
 30957 ;;		wreg, status,2, status,0, cstack
 30958 ;; Tracked objects:
 30959 ;;		On entry : 0/0
 30960 ;;		On exit  : 0/0
 30961 ;;		Unchanged: 0/0
 30962 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30963 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30964 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30965 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30966 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30967 ;;Total ram usage:        8 bytes
 30968 ;; Hardware stack levels used:    1
 30969 ;; Hardware stack levels required when called:   10
 30970 ;; This function calls:
 30971 ;;		_RADIO_RegisterWrite
 30972 ;;		___lldiv
 30973 ;; This function is called by:
 30974 ;;		_RADIO_WriteConfiguration
 30975 ;; This function uses a non-reentrant model
 30976 ;;
 30977                           
 30978                           	psect	text145
 30979  007E7E                     __ptext145:
 30980                           	opt stack 0
 30981  007E7E                     _RADIO_WriteFSKFrequencyDeviation:
 30982                           	opt stack 17
 30983                           
 30984                           ;radio_driver_SX1276.c: 296: uint32_t num;
 30985                           ;radio_driver_SX1276.c: 303: num = frequencyDeviation;
 30986                           
 30987                           ;incstack = 0
 30988  007E7E  C06D  F071         	movff	RADIO_WriteFSKFrequencyDeviation@frequencyDeviation,RADIO_WriteFSKFrequencyDeviat
      +                          ion@num
 30989  007E82  C06E  F072         	movff	RADIO_WriteFSKFrequencyDeviation@frequencyDeviation+1,RADIO_WriteFSKFrequencyDevi
      +                          ation@num+1
 30990  007E86  C06F  F073         	movff	RADIO_WriteFSKFrequencyDeviation@frequencyDeviation+2,RADIO_WriteFSKFrequencyDevi
      +                          ation@num+2
 30991  007E8A  C070  F074         	movff	RADIO_WriteFSKFrequencyDeviation@frequencyDeviation+3,RADIO_WriteFSKFrequencyDevi
      +                          ation@num+3
 30992                           
 30993                           ;radio_driver_SX1276.c: 304: num <<= (8);
 30994  007E8E  C073  F074         	movff	RADIO_WriteFSKFrequencyDeviation@num+2,RADIO_WriteFSKFrequencyDeviation@num+3
 30995  007E92  C072  F073         	movff	RADIO_WriteFSKFrequencyDeviation@num+1,RADIO_WriteFSKFrequencyDeviation@num+2
 30996  007E96  C071  F072         	movff	RADIO_WriteFSKFrequencyDeviation@num,RADIO_WriteFSKFrequencyDeviation@num+1
 30997  007E9A  0100               	movlb	0	; () banked
 30998  007E9C  6B71               	clrf	RADIO_WriteFSKFrequencyDeviation@num& (0+255),b
 30999                           
 31000                           ; BSR set to: 0
 31001                           ;radio_driver_SX1276.c: 305: num /= 15625;
 31002  007E9E  C071  F060         	movff	RADIO_WriteFSKFrequencyDeviation@num,___lldiv@dividend
 31003  007EA2  C072  F061         	movff	RADIO_WriteFSKFrequencyDeviation@num+1,___lldiv@dividend+1
 31004  007EA6  C073  F062         	movff	RADIO_WriteFSKFrequencyDeviation@num+2,___lldiv@dividend+2
 31005  007EAA  C074  F063         	movff	RADIO_WriteFSKFrequencyDeviation@num+3,___lldiv@dividend+3
 31006  007EAE  0E09               	movlw	9
 31007  007EB0  6F64               	movwf	___lldiv@divisor& (0+255),b
 31008  007EB2  0E3D               	movlw	61
 31009  007EB4  6F65               	movwf	(___lldiv@divisor+1)& (0+255),b
 31010  007EB6  0E00               	movlw	0
 31011  007EB8  6F66               	movwf	(___lldiv@divisor+2)& (0+255),b
 31012  007EBA  0E00               	movlw	0
 31013  007EBC  6F67               	movwf	(___lldiv@divisor+3)& (0+255),b
 31014  007EBE  ECE4  F03C         	call	___lldiv	;wreg free
 31015  007EC2  C060  F071         	movff	?___lldiv,RADIO_WriteFSKFrequencyDeviation@num
 31016  007EC6  C061  F072         	movff	?___lldiv+1,RADIO_WriteFSKFrequencyDeviation@num+1
 31017  007ECA  C062  F073         	movff	?___lldiv+2,RADIO_WriteFSKFrequencyDeviation@num+2
 31018  007ECE  C063  F074         	movff	?___lldiv+3,RADIO_WriteFSKFrequencyDeviation@num+3
 31019                           
 31020                           ;radio_driver_SX1276.c: 309: RADIO_RegisterWrite(0x04, (num >> (8)) & 0xFF);
 31021  007ED2  C072  F062         	movff	RADIO_WriteFSKFrequencyDeviation@num+1,RADIO_RegisterWrite@value
 31022  007ED6  0E04               	movlw	4
 31023  007ED8  ECBE  F048         	call	_RADIO_RegisterWrite
 31024                           
 31025                           ;radio_driver_SX1276.c: 310: RADIO_RegisterWrite(0x05, num & 0xFF);
 31026  007EDC  C071  F062         	movff	RADIO_WriteFSKFrequencyDeviation@num,RADIO_RegisterWrite@value
 31027  007EE0  0E05               	movlw	5
 31028  007EE2  ECBE  F048         	call	_RADIO_RegisterWrite
 31029  007EE6  0012               	return		;funcret
 31030  007EE8                     __end_of_RADIO_WriteFSKFrequencyDeviation:
 31031                           	opt stack 0
 31032                           tosu	equ	0xFFF
 31033                           tosh	equ	0xFFE
 31034                           tosl	equ	0xFFD
 31035                           pclath	equ	0xFFA
 31036                           tblptru	equ	0xFF8
 31037                           tblptrh	equ	0xFF7
 31038                           tblptrl	equ	0xFF6
 31039                           tablat	equ	0xFF5
 31040                           prodh	equ	0xFF4
 31041                           prodl	equ	0xFF3
 31042                           intcon	equ	0xFF2
 31043                           intcon2	equ	0xFF1
 31044                           intcon3	equ	0xFF0
 31045                           indf0	equ	0xFEF
 31046                           postinc0	equ	0xFEE
 31047                           fsr0h	equ	0xFEA
 31048                           fsr0l	equ	0xFE9
 31049                           wreg	equ	0xFE8
 31050                           postinc1	equ	0xFE6
 31051                           postdec1	equ	0xFE5
 31052                           plusw1	equ	0xFE3
 31053                           fsr1h	equ	0xFE2
 31054                           fsr1l	equ	0xFE1
 31055                           indf2	equ	0xFDF
 31056                           postinc2	equ	0xFDE
 31057                           postdec2	equ	0xFDD
 31058                           plusw2	equ	0xFDB
 31059                           fsr2h	equ	0xFDA
 31060                           fsr2l	equ	0xFD9
 31061                           status	equ	0xFD8
 31062                           
 31063 ;; *************** function _RADIO_WriteFSKBitRate *****************
 31064 ;; Defined at:
 31065 ;;		line 316 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 31066 ;; Parameters:    Size  Location     Type
 31067 ;;  bitRate         4   13[BANK0 ] unsigned long 
 31068 ;; Auto vars:     Size  Location     Type
 31069 ;;  num             4   17[BANK0 ] unsigned long 
 31070 ;; Return value:  Size  Location     Type
 31071 ;;                  1    wreg      void 
 31072 ;; Registers used:
 31073 ;;		wreg, status,2, status,0, cstack
 31074 ;; Tracked objects:
 31075 ;;		On entry : 0/0
 31076 ;;		On exit  : 0/0
 31077 ;;		Unchanged: 0/0
 31078 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 31079 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31080 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31081 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31082 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31083 ;;Total ram usage:        8 bytes
 31084 ;; Hardware stack levels used:    1
 31085 ;; Hardware stack levels required when called:   10
 31086 ;; This function calls:
 31087 ;;		_RADIO_RegisterWrite
 31088 ;;		___lldiv
 31089 ;; This function is called by:
 31090 ;;		_RADIO_WriteConfiguration
 31091 ;; This function uses a non-reentrant model
 31092 ;;
 31093                           
 31094                           	psect	text146
 31095  007EE8                     __ptext146:
 31096                           	opt stack 0
 31097  007EE8                     _RADIO_WriteFSKBitRate:
 31098                           	opt stack 17
 31099                           
 31100                           ;radio_driver_SX1276.c: 318: uint32_t num;
 31101                           ;radio_driver_SX1276.c: 320: num = 32000000;
 31102                           
 31103                           ;incstack = 0
 31104  007EE8  0E00               	movlw	0
 31105  007EEA  0100               	movlb	0	; () banked
 31106  007EEC  6F71               	movwf	RADIO_WriteFSKBitRate@num& (0+255),b
 31107  007EEE  0E48               	movlw	72
 31108  007EF0  6F72               	movwf	(RADIO_WriteFSKBitRate@num+1)& (0+255),b
 31109  007EF2  0EE8               	movlw	232
 31110  007EF4  6F73               	movwf	(RADIO_WriteFSKBitRate@num+2)& (0+255),b
 31111  007EF6  0E01               	movlw	1
 31112  007EF8  6F74               	movwf	(RADIO_WriteFSKBitRate@num+3)& (0+255),b
 31113                           
 31114                           ; BSR set to: 0
 31115                           ;radio_driver_SX1276.c: 321: num /= bitRate;
 31116  007EFA  C071  F060         	movff	RADIO_WriteFSKBitRate@num,___lldiv@dividend
 31117  007EFE  C072  F061         	movff	RADIO_WriteFSKBitRate@num+1,___lldiv@dividend+1
 31118  007F02  C073  F062         	movff	RADIO_WriteFSKBitRate@num+2,___lldiv@dividend+2
 31119  007F06  C074  F063         	movff	RADIO_WriteFSKBitRate@num+3,___lldiv@dividend+3
 31120  007F0A  C06D  F064         	movff	RADIO_WriteFSKBitRate@bitRate,___lldiv@divisor
 31121  007F0E  C06E  F065         	movff	RADIO_WriteFSKBitRate@bitRate+1,___lldiv@divisor+1
 31122  007F12  C06F  F066         	movff	RADIO_WriteFSKBitRate@bitRate+2,___lldiv@divisor+2
 31123  007F16  C070  F067         	movff	RADIO_WriteFSKBitRate@bitRate+3,___lldiv@divisor+3
 31124  007F1A  ECE4  F03C         	call	___lldiv	;wreg free
 31125  007F1E  C060  F071         	movff	?___lldiv,RADIO_WriteFSKBitRate@num
 31126  007F22  C061  F072         	movff	?___lldiv+1,RADIO_WriteFSKBitRate@num+1
 31127  007F26  C062  F073         	movff	?___lldiv+2,RADIO_WriteFSKBitRate@num+2
 31128  007F2A  C063  F074         	movff	?___lldiv+3,RADIO_WriteFSKBitRate@num+3
 31129                           
 31130                           ;radio_driver_SX1276.c: 325: RADIO_RegisterWrite(0x02, (num >> (8)) & 0xFF);
 31131  007F2E  C072  F062         	movff	RADIO_WriteFSKBitRate@num+1,RADIO_RegisterWrite@value
 31132  007F32  0E02               	movlw	2
 31133  007F34  ECBE  F048         	call	_RADIO_RegisterWrite
 31134                           
 31135                           ;radio_driver_SX1276.c: 326: RADIO_RegisterWrite(0x03, num & 0xFF);
 31136  007F38  C071  F062         	movff	RADIO_WriteFSKBitRate@num,RADIO_RegisterWrite@value
 31137  007F3C  0E03               	movlw	3
 31138  007F3E  ECBE  F048         	call	_RADIO_RegisterWrite
 31139                           
 31140                           ;radio_driver_SX1276.c: 327: RADIO_RegisterWrite(0x5D, 0x00);
 31141  007F42  0E00               	movlw	0
 31142  007F44  0100               	movlb	0	; () banked
 31143  007F46  6F62               	movwf	RADIO_RegisterWrite@value& (0+255),b
 31144  007F48  0E5D               	movlw	93
 31145  007F4A  ECBE  F048         	call	_RADIO_RegisterWrite
 31146  007F4E  0012               	return		;funcret
 31147  007F50                     __end_of_RADIO_WriteFSKBitRate:
 31148                           	opt stack 0
 31149                           tosu	equ	0xFFF
 31150                           tosh	equ	0xFFE
 31151                           tosl	equ	0xFFD
 31152                           pclath	equ	0xFFA
 31153                           tblptru	equ	0xFF8
 31154                           tblptrh	equ	0xFF7
 31155                           tblptrl	equ	0xFF6
 31156                           tablat	equ	0xFF5
 31157                           prodh	equ	0xFF4
 31158                           prodl	equ	0xFF3
 31159                           intcon	equ	0xFF2
 31160                           intcon2	equ	0xFF1
 31161                           intcon3	equ	0xFF0
 31162                           indf0	equ	0xFEF
 31163                           postinc0	equ	0xFEE
 31164                           fsr0h	equ	0xFEA
 31165                           fsr0l	equ	0xFE9
 31166                           wreg	equ	0xFE8
 31167                           postinc1	equ	0xFE6
 31168                           postdec1	equ	0xFE5
 31169                           plusw1	equ	0xFE3
 31170                           fsr1h	equ	0xFE2
 31171                           fsr1l	equ	0xFE1
 31172                           indf2	equ	0xFDF
 31173                           postinc2	equ	0xFDE
 31174                           postdec2	equ	0xFDD
 31175                           plusw2	equ	0xFDB
 31176                           fsr2h	equ	0xFDA
 31177                           fsr2l	equ	0xFD9
 31178                           status	equ	0xFD8
 31179                           
 31180 ;; *************** function _PrepareJoinRequestFrame *****************
 31181 ;; Defined at:
 31182 ;;		line 1806 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 31183 ;; Parameters:    Size  Location     Type
 31184 ;;		None
 31185 ;; Auto vars:     Size  Location     Type
 31186 ;;  mic             4  116[BANK0 ] unsigned long 
 31187 ;;  bufferIndex     1  122[BANK0 ] unsigned char 
 31188 ;;  iCtr            1  121[BANK0 ] unsigned char 
 31189 ;;  mhdr            1  120[BANK0 ] struct .
 31190 ;; Return value:  Size  Location     Type
 31191 ;;                  1    wreg      unsigned char 
 31192 ;; Registers used:
 31193 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 31194 ;; Tracked objects:
 31195 ;;		On entry : 0/0
 31196 ;;		On exit  : 0/0
 31197 ;;		Unchanged: 0/0
 31198 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 31199 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31200 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31201 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31202 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31203 ;;Total ram usage:       11 bytes
 31204 ;; Hardware stack levels used:    1
 31205 ;; Hardware stack levels required when called:   13
 31206 ;; This function calls:
 31207 ;;		_ComputeMic
 31208 ;;		_Random
 31209 ;;		_memcpy
 31210 ;;		_memset
 31211 ;; This function is called by:
 31212 ;;		_LORAWAN_Join
 31213 ;; This function uses a non-reentrant model
 31214 ;;
 31215                           
 31216                           	psect	text147
 31217  004D9C                     __ptext147:
 31218                           	opt stack 0
 31219  004D9C                     _PrepareJoinRequestFrame:
 31220                           	opt stack 16
 31221                           
 31222                           ;lorawan.c: 1808: uint8_t bufferIndex = 0, iCtr;
 31223                           
 31224                           ;incstack = 0
 31225  004D9C  0E00               	movlw	0
 31226  004D9E  0100               	movlb	0	; () banked
 31227  004DA0  6FDA               	movwf	PrepareJoinRequestFrame@bufferIndex& (0+255),b
 31228                           
 31229                           ; BSR set to: 0
 31230                           ;lorawan.c: 1809: Mhdr_t mhdr;
 31231                           ;lorawan.c: 1810: uint32_t mic;
 31232                           ;lorawan.c: 1812: memset (macBuffer, 0, sizeof(macBuffer) );
 31233  004DA2  0E8F               	movlw	low _macBuffer
 31234  004DA4  6F60               	movwf	memset@p1& (0+255),b
 31235  004DA6  0E06               	movlw	high _macBuffer
 31236  004DA8  6F61               	movwf	(memset@p1+1)& (0+255),b
 31237  004DAA  0E00               	movlw	0
 31238  004DAC  6F63               	movwf	(memset@c+1)& (0+255),b
 31239  004DAE  0E00               	movlw	0
 31240  004DB0  6F62               	movwf	memset@c& (0+255),b
 31241  004DB2  0E01               	movlw	1
 31242  004DB4  6F65               	movwf	(memset@n+1)& (0+255),b
 31243  004DB6  0E0F               	movlw	15
 31244  004DB8  6F64               	movwf	memset@n& (0+255),b
 31245  004DBA  ECCC  F046         	call	_memset	;wreg free
 31246                           
 31247                           ;lorawan.c: 1814: mhdr.bits.mType = FRAME_TYPE_JOIN_REQ;
 31248  004DBE  0100               	movlb	0	; () banked
 31249  004DC0  9BD8               	bcf	PrepareJoinRequestFrame@mhdr& (0+255),5,b
 31250  004DC2  9DD8               	bcf	PrepareJoinRequestFrame@mhdr& (0+255),6,b
 31251  004DC4  9FD8               	bcf	PrepareJoinRequestFrame@mhdr& (0+255),7,b
 31252                           
 31253                           ; BSR set to: 0
 31254                           ;lorawan.c: 1815: mhdr.bits.major = 0;
 31255  004DC6  0EFC               	movlw	-4
 31256  004DC8  17D8               	andwf	PrepareJoinRequestFrame@mhdr& (0+255),f,b
 31257                           
 31258                           ; BSR set to: 0
 31259                           ;lorawan.c: 1816: mhdr.bits.rfu = 0;
 31260  004DCA  95D8               	bcf	PrepareJoinRequestFrame@mhdr& (0+255),2,b
 31261  004DCC  97D8               	bcf	PrepareJoinRequestFrame@mhdr& (0+255),3,b
 31262  004DCE  99D8               	bcf	PrepareJoinRequestFrame@mhdr& (0+255),4,b
 31263                           
 31264                           ; BSR set to: 0
 31265                           ;lorawan.c: 1818: macBuffer[bufferIndex++] = mhdr.value;
 31266  004DD0  51DA               	movf	PrepareJoinRequestFrame@bufferIndex& (0+255),w,b
 31267  004DD2  0D01               	mullw	1
 31268  004DD4  0E8F               	movlw	low _macBuffer
 31269  004DD6  24F3               	addwf	prodl,w,c
 31270  004DD8  6ED9               	movwf	fsr2l,c
 31271  004DDA  0E06               	movlw	high _macBuffer
 31272  004DDC  20F4               	addwfc	prodh,w,c
 31273  004DDE  6EDA               	movwf	fsr2h,c
 31274  004DE0  C0D8  FFDF         	movff	PrepareJoinRequestFrame@mhdr,indf2
 31275                           
 31276                           ; BSR set to: 0
 31277  004DE4  2BDA               	incf	PrepareJoinRequestFrame@bufferIndex& (0+255),f,b
 31278                           
 31279                           ; BSR set to: 0
 31280                           ;lorawan.c: 1820: for(iCtr = 0; iCtr < 8; iCtr ++)
 31281  004DE6  0E00               	movlw	0
 31282  004DE8  6FD9               	movwf	PrepareJoinRequestFrame@iCtr& (0+255),b
 31283  004DEA                     l12411:
 31284                           
 31285                           ; BSR set to: 0
 31286  004DEA  0E07               	movlw	7
 31287  004DEC  65D9               	cpfsgt	PrepareJoinRequestFrame@iCtr& (0+255),b
 31288  004DEE  D001               	goto	l1284
 31289  004DF0  D022               	goto	u13620
 31290  004DF2                     l1284:
 31291                           
 31292                           ; BSR set to: 0
 31293                           ;lorawan.c: 1821: {
 31294                           ;lorawan.c: 1822: macBuffer[bufferIndex + iCtr] = loRa.activationParameters.applicationE
      +                          ui.buffer[7 - iCtr];
 31295                           
 31296                           ; BSR set to: 0
 31297  004DF2  51D9               	movf	PrepareJoinRequestFrame@iCtr& (0+255),w,b
 31298  004DF4  6FD0               	movwf	??_PrepareJoinRequestFrame& (0+255),b
 31299  004DF6  6BD1               	clrf	(??_PrepareJoinRequestFrame+1)& (0+255),b
 31300  004DF8  1FD0               	comf	??_PrepareJoinRequestFrame& (0+255),f,b
 31301  004DFA  1FD1               	comf	(??_PrepareJoinRequestFrame+1)& (0+255),f,b
 31302  004DFC  4BD0               	infsnz	??_PrepareJoinRequestFrame& (0+255),f,b
 31303  004DFE  2BD1               	incf	(??_PrepareJoinRequestFrame+1)& (0+255),f,b
 31304  004E00  0E07               	movlw	7
 31305  004E02  27D0               	addwf	??_PrepareJoinRequestFrame& (0+255),f,b
 31306  004E04  0E00               	movlw	0
 31307  004E06  23D1               	addwfc	(??_PrepareJoinRequestFrame+1)& (0+255),f,b
 31308  004E08  0E5C               	movlw	low (_loRa+82)
 31309  004E0A  25D0               	addwf	??_PrepareJoinRequestFrame& (0+255),w,b
 31310  004E0C  6ED9               	movwf	fsr2l,c
 31311  004E0E  0E02               	movlw	high (_loRa+82)
 31312  004E10  21D1               	addwfc	(??_PrepareJoinRequestFrame+1)& (0+255),w,b
 31313  004E12  6EDA               	movwf	fsr2h,c
 31314  004E14  51D9               	movf	PrepareJoinRequestFrame@iCtr& (0+255),w,b
 31315  004E16  C0DA  F0D2         	movff	PrepareJoinRequestFrame@bufferIndex,??_PrepareJoinRequestFrame+2
 31316  004E1A  6BD3               	clrf	(??_PrepareJoinRequestFrame+3)& (0+255),b
 31317  004E1C  27D2               	addwf	(??_PrepareJoinRequestFrame+2)& (0+255),f,b
 31318  004E1E  0E00               	movlw	0
 31319  004E20  23D3               	addwfc	(??_PrepareJoinRequestFrame+3)& (0+255),f,b
 31320  004E22  0E8F               	movlw	low _macBuffer
 31321  004E24  25D2               	addwf	(??_PrepareJoinRequestFrame+2)& (0+255),w,b
 31322  004E26  6EE9               	movwf	fsr0l,c
 31323  004E28  0E06               	movlw	high _macBuffer
 31324  004E2A  21D3               	addwfc	(??_PrepareJoinRequestFrame+3)& (0+255),w,b
 31325  004E2C  6EEA               	movwf	fsr0h,c
 31326  004E2E  CFDF FFEF          	movff	indf2,indf0
 31327                           
 31328                           ; BSR set to: 0
 31329  004E32  2BD9               	incf	PrepareJoinRequestFrame@iCtr& (0+255),f,b
 31330  004E34  D7DA               	goto	l12411
 31331  004E36                     u13620:
 31332                           
 31333                           ; BSR set to: 0
 31334                           ;lorawan.c: 1823: }
 31335                           ;lorawan.c: 1824: bufferIndex = bufferIndex + sizeof(loRa.activationParameters.applicati
      +                          onEui);
 31336                           
 31337                           ; BSR set to: 0
 31338  004E36  51DA               	movf	PrepareJoinRequestFrame@bufferIndex& (0+255),w,b
 31339  004E38  0F08               	addlw	8
 31340  004E3A  6FDA               	movwf	PrepareJoinRequestFrame@bufferIndex& (0+255),b
 31341                           
 31342                           ; BSR set to: 0
 31343                           ;lorawan.c: 1827: for (iCtr = 0; iCtr < 8; iCtr ++)
 31344  004E3C  0E00               	movlw	0
 31345  004E3E  6FD9               	movwf	PrepareJoinRequestFrame@iCtr& (0+255),b
 31346  004E40                     l12425:
 31347                           
 31348                           ; BSR set to: 0
 31349  004E40  0E07               	movlw	7
 31350  004E42  65D9               	cpfsgt	PrepareJoinRequestFrame@iCtr& (0+255),b
 31351  004E44  D001               	goto	l1286
 31352  004E46  D022               	goto	u13640
 31353  004E48                     l1286:
 31354                           
 31355                           ; BSR set to: 0
 31356                           ;lorawan.c: 1828: {
 31357                           ;lorawan.c: 1829: macBuffer[bufferIndex + iCtr] = loRa.activationParameters.deviceEui.bu
      +                          ffer[7 - iCtr];
 31358                           
 31359                           ; BSR set to: 0
 31360  004E48  51D9               	movf	PrepareJoinRequestFrame@iCtr& (0+255),w,b
 31361  004E4A  6FD0               	movwf	??_PrepareJoinRequestFrame& (0+255),b
 31362  004E4C  6BD1               	clrf	(??_PrepareJoinRequestFrame+1)& (0+255),b
 31363  004E4E  1FD0               	comf	??_PrepareJoinRequestFrame& (0+255),f,b
 31364  004E50  1FD1               	comf	(??_PrepareJoinRequestFrame+1)& (0+255),f,b
 31365  004E52  4BD0               	infsnz	??_PrepareJoinRequestFrame& (0+255),f,b
 31366  004E54  2BD1               	incf	(??_PrepareJoinRequestFrame+1)& (0+255),f,b
 31367  004E56  0E07               	movlw	7
 31368  004E58  27D0               	addwf	??_PrepareJoinRequestFrame& (0+255),f,b
 31369  004E5A  0E00               	movlw	0
 31370  004E5C  23D1               	addwfc	(??_PrepareJoinRequestFrame+1)& (0+255),f,b
 31371  004E5E  0E64               	movlw	low (_loRa+90)
 31372  004E60  25D0               	addwf	??_PrepareJoinRequestFrame& (0+255),w,b
 31373  004E62  6ED9               	movwf	fsr2l,c
 31374  004E64  0E02               	movlw	high (_loRa+90)
 31375  004E66  21D1               	addwfc	(??_PrepareJoinRequestFrame+1)& (0+255),w,b
 31376  004E68  6EDA               	movwf	fsr2h,c
 31377  004E6A  51D9               	movf	PrepareJoinRequestFrame@iCtr& (0+255),w,b
 31378  004E6C  C0DA  F0D2         	movff	PrepareJoinRequestFrame@bufferIndex,??_PrepareJoinRequestFrame+2
 31379  004E70  6BD3               	clrf	(??_PrepareJoinRequestFrame+3)& (0+255),b
 31380  004E72  27D2               	addwf	(??_PrepareJoinRequestFrame+2)& (0+255),f,b
 31381  004E74  0E00               	movlw	0
 31382  004E76  23D3               	addwfc	(??_PrepareJoinRequestFrame+3)& (0+255),f,b
 31383  004E78  0E8F               	movlw	low _macBuffer
 31384  004E7A  25D2               	addwf	(??_PrepareJoinRequestFrame+2)& (0+255),w,b
 31385  004E7C  6EE9               	movwf	fsr0l,c
 31386  004E7E  0E06               	movlw	high _macBuffer
 31387  004E80  21D3               	addwfc	(??_PrepareJoinRequestFrame+3)& (0+255),w,b
 31388  004E82  6EEA               	movwf	fsr0h,c
 31389  004E84  CFDF FFEF          	movff	indf2,indf0
 31390                           
 31391                           ; BSR set to: 0
 31392  004E88  2BD9               	incf	PrepareJoinRequestFrame@iCtr& (0+255),f,b
 31393  004E8A  D7DA               	goto	l12425
 31394  004E8C                     u13640:
 31395                           
 31396                           ; BSR set to: 0
 31397                           ;lorawan.c: 1830: }
 31398                           ;lorawan.c: 1831: bufferIndex = bufferIndex + sizeof( loRa.activationParameters.deviceEu
      +                          i );
 31399                           
 31400                           ; BSR set to: 0
 31401  004E8C  51DA               	movf	PrepareJoinRequestFrame@bufferIndex& (0+255),w,b
 31402  004E8E  0F08               	addlw	8
 31403  004E90  6FDA               	movwf	PrepareJoinRequestFrame@bufferIndex& (0+255),b
 31404                           
 31405                           ; BSR set to: 0
 31406                           ;lorawan.c: 1833: loRa.devNonce = Random ((65535U));
 31407  004E92  0EFF               	movlw	255
 31408  004E94  6FAE               	movwf	(Random@max+1)& (0+255),b
 31409  004E96  69AD               	setf	Random@max& (0+255),b
 31410  004E98  EC7C  F048         	call	_Random	;wreg free
 31411  004E9C  C0AD  F2DC         	movff	?_Random,_loRa+210
 31412  004EA0  C0AE  F2DD         	movff	?_Random+1,_loRa+211
 31413                           
 31414                           ;lorawan.c: 1834: memcpy (&macBuffer[bufferIndex], &loRa.devNonce, sizeof (loRa.devNonce
      +                          ) );
 31415  004EA4  0100               	movlb	0	; () banked
 31416  004EA6  51DA               	movf	PrepareJoinRequestFrame@bufferIndex& (0+255),w,b
 31417  004EA8  0D01               	mullw	1
 31418  004EAA  0E8F               	movlw	low _macBuffer
 31419  004EAC  24F3               	addwf	prodl,w,c
 31420  004EAE  6F60               	movwf	memcpy@d1& (0+255),b
 31421  004EB0  0E06               	movlw	high _macBuffer
 31422  004EB2  20F4               	addwfc	prodh,w,c
 31423  004EB4  6F61               	movwf	(memcpy@d1+1)& (0+255),b
 31424  004EB6  0EDC               	movlw	low (_loRa+210)
 31425  004EB8  6F62               	movwf	memcpy@s1& (0+255),b
 31426  004EBA  0E02               	movlw	high (_loRa+210)
 31427  004EBC  6F63               	movwf	(memcpy@s1+1)& (0+255),b
 31428  004EBE  0E00               	movlw	0
 31429  004EC0  6F65               	movwf	(memcpy@n+1)& (0+255),b
 31430  004EC2  0E02               	movlw	2
 31431  004EC4  6F64               	movwf	memcpy@n& (0+255),b
 31432  004EC6  EC37  F041         	call	_memcpy	;wreg free
 31433                           
 31434                           ;lorawan.c: 1835: bufferIndex = bufferIndex + sizeof( loRa.devNonce );
 31435  004ECA  0100               	movlb	0	; () banked
 31436  004ECC  51DA               	movf	PrepareJoinRequestFrame@bufferIndex& (0+255),w,b
 31437  004ECE  0F02               	addlw	2
 31438  004ED0  6FDA               	movwf	PrepareJoinRequestFrame@bufferIndex& (0+255),b
 31439                           
 31440                           ; BSR set to: 0
 31441                           ;lorawan.c: 1837: mic = ComputeMic (loRa.activationParameters.applicationKey, macBuffer,
      +                           bufferIndex);
 31442  004ED2  0E4C               	movlw	low (_loRa+66)
 31443  004ED4  6FC7               	movwf	ComputeMic@key& (0+255),b
 31444  004ED6  0E02               	movlw	high (_loRa+66)
 31445  004ED8  6FC8               	movwf	(ComputeMic@key+1)& (0+255),b
 31446  004EDA  0E8F               	movlw	low _macBuffer
 31447  004EDC  6FC9               	movwf	ComputeMic@buffer& (0+255),b
 31448  004EDE  0E06               	movlw	high _macBuffer
 31449  004EE0  6FCA               	movwf	(ComputeMic@buffer+1)& (0+255),b
 31450  004EE2  C0DA  F0CB         	movff	PrepareJoinRequestFrame@bufferIndex,ComputeMic@bufferLength
 31451  004EE6  EC74  F040         	call	_ComputeMic	;wreg free
 31452  004EEA  C0C7  F0D4         	movff	?_ComputeMic,PrepareJoinRequestFrame@mic
 31453  004EEE  C0C8  F0D5         	movff	?_ComputeMic+1,PrepareJoinRequestFrame@mic+1
 31454  004EF2  C0C9  F0D6         	movff	?_ComputeMic+2,PrepareJoinRequestFrame@mic+2
 31455  004EF6  C0CA  F0D7         	movff	?_ComputeMic+3,PrepareJoinRequestFrame@mic+3
 31456                           
 31457                           ;lorawan.c: 1839: memcpy ( &macBuffer[bufferIndex], &mic, sizeof (mic));
 31458  004EFA  0100               	movlb	0	; () banked
 31459  004EFC  51DA               	movf	PrepareJoinRequestFrame@bufferIndex& (0+255),w,b
 31460  004EFE  0D01               	mullw	1
 31461  004F00  0E8F               	movlw	low _macBuffer
 31462  004F02  24F3               	addwf	prodl,w,c
 31463  004F04  6F60               	movwf	memcpy@d1& (0+255),b
 31464  004F06  0E06               	movlw	high _macBuffer
 31465  004F08  20F4               	addwfc	prodh,w,c
 31466  004F0A  6F61               	movwf	(memcpy@d1+1)& (0+255),b
 31467  004F0C  0ED4               	movlw	low PrepareJoinRequestFrame@mic
 31468  004F0E  6F62               	movwf	memcpy@s1& (0+255),b
 31469  004F10  0E00               	movlw	high PrepareJoinRequestFrame@mic
 31470  004F12  6F63               	movwf	(memcpy@s1+1)& (0+255),b
 31471  004F14  0E00               	movlw	0
 31472  004F16  6F65               	movwf	(memcpy@n+1)& (0+255),b
 31473  004F18  0E04               	movlw	4
 31474  004F1A  6F64               	movwf	memcpy@n& (0+255),b
 31475  004F1C  EC37  F041         	call	_memcpy	;wreg free
 31476                           
 31477                           ;lorawan.c: 1840: bufferIndex = bufferIndex + sizeof(mic);
 31478  004F20  0100               	movlb	0	; () banked
 31479  004F22  51DA               	movf	PrepareJoinRequestFrame@bufferIndex& (0+255),w,b
 31480  004F24  0F04               	addlw	4
 31481  004F26  6FDA               	movwf	PrepareJoinRequestFrame@bufferIndex& (0+255),b
 31482                           
 31483                           ; BSR set to: 0
 31484                           ;lorawan.c: 1842: return bufferIndex;
 31485  004F28  51DA               	movf	PrepareJoinRequestFrame@bufferIndex& (0+255),w,b
 31486  004F2A  0012               	return	
 31487  004F2C                     __end_of_PrepareJoinRequestFrame:
 31488                           	opt stack 0
 31489                           tosu	equ	0xFFF
 31490                           tosh	equ	0xFFE
 31491                           tosl	equ	0xFFD
 31492                           pclath	equ	0xFFA
 31493                           tblptru	equ	0xFF8
 31494                           tblptrh	equ	0xFF7
 31495                           tblptrl	equ	0xFF6
 31496                           tablat	equ	0xFF5
 31497                           prodh	equ	0xFF4
 31498                           prodl	equ	0xFF3
 31499                           intcon	equ	0xFF2
 31500                           intcon2	equ	0xFF1
 31501                           intcon3	equ	0xFF0
 31502                           indf0	equ	0xFEF
 31503                           postinc0	equ	0xFEE
 31504                           fsr0h	equ	0xFEA
 31505                           fsr0l	equ	0xFE9
 31506                           wreg	equ	0xFE8
 31507                           postinc1	equ	0xFE6
 31508                           postdec1	equ	0xFE5
 31509                           plusw1	equ	0xFE3
 31510                           fsr1h	equ	0xFE2
 31511                           fsr1l	equ	0xFE1
 31512                           indf2	equ	0xFDF
 31513                           postinc2	equ	0xFDE
 31514                           postdec2	equ	0xFDD
 31515                           plusw2	equ	0xFDB
 31516                           fsr2h	equ	0xFDA
 31517                           fsr2l	equ	0xFD9
 31518                           status	equ	0xFD8
 31519                           
 31520 ;; *************** function _Random *****************
 31521 ;; Defined at:
 31522 ;;		line 1116 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 31523 ;; Parameters:    Size  Location     Type
 31524 ;;  max             2   77[BANK0 ] unsigned int 
 31525 ;; Auto vars:     Size  Location     Type
 31526 ;;		None
 31527 ;; Return value:  Size  Location     Type
 31528 ;;                  2   77[BANK0 ] unsigned int 
 31529 ;; Registers used:
 31530 ;;		wreg, status,2, status,0, cstack
 31531 ;; Tracked objects:
 31532 ;;		On entry : 0/0
 31533 ;;		On exit  : 0/0
 31534 ;;		Unchanged: 0/0
 31535 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 31536 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31537 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31538 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31539 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31540 ;;Total ram usage:        2 bytes
 31541 ;; Hardware stack levels used:    1
 31542 ;; Hardware stack levels required when called:    9
 31543 ;; This function calls:
 31544 ;;		___lwmod
 31545 ;;		_rand
 31546 ;; This function is called by:
 31547 ;;		_PrepareJoinRequestFrame
 31548 ;;		_SearchAvailableChannel
 31549 ;; This function uses a non-reentrant model
 31550 ;;
 31551                           
 31552                           	psect	text148
 31553  0090F8                     __ptext148:
 31554                           	opt stack 0
 31555  0090F8                     _Random:
 31556                           	opt stack 18
 31557                           
 31558                           ;lorawan.c: 1118: return (rand () % max);
 31559                           
 31560                           ; BSR set to: 0
 31561                           ;incstack = 0
 31562  0090F8  ECC5  F041         	call	_rand	;wreg free
 31563  0090FC  C0A6  F0A8         	movff	?_rand,___lwmod@dividend
 31564  009100  C0A7  F0A9         	movff	?_rand+1,___lwmod@dividend+1
 31565  009104  C0AD  F0AA         	movff	Random@max,___lwmod@divisor
 31566  009108  C0AE  F0AB         	movff	Random@max+1,___lwmod@divisor+1
 31567  00910C  ECBD  F044         	call	___lwmod	;wreg free
 31568  009110  C0A8  F0AD         	movff	?___lwmod,?_Random
 31569  009114  C0A9  F0AE         	movff	?___lwmod+1,?_Random+1
 31570  009118  0012               	return	
 31571  00911A                     __end_of_Random:
 31572                           	opt stack 0
 31573                           tosu	equ	0xFFF
 31574                           tosh	equ	0xFFE
 31575                           tosl	equ	0xFFD
 31576                           pclath	equ	0xFFA
 31577                           tblptru	equ	0xFF8
 31578                           tblptrh	equ	0xFF7
 31579                           tblptrl	equ	0xFF6
 31580                           tablat	equ	0xFF5
 31581                           prodh	equ	0xFF4
 31582                           prodl	equ	0xFF3
 31583                           intcon	equ	0xFF2
 31584                           intcon2	equ	0xFF1
 31585                           intcon3	equ	0xFF0
 31586                           indf0	equ	0xFEF
 31587                           postinc0	equ	0xFEE
 31588                           fsr0h	equ	0xFEA
 31589                           fsr0l	equ	0xFE9
 31590                           wreg	equ	0xFE8
 31591                           postinc1	equ	0xFE6
 31592                           postdec1	equ	0xFE5
 31593                           plusw1	equ	0xFE3
 31594                           fsr1h	equ	0xFE2
 31595                           fsr1l	equ	0xFE1
 31596                           indf2	equ	0xFDF
 31597                           postinc2	equ	0xFDE
 31598                           postdec2	equ	0xFDD
 31599                           plusw2	equ	0xFDB
 31600                           fsr2h	equ	0xFDA
 31601                           fsr2l	equ	0xFD9
 31602                           status	equ	0xFD8
 31603                           
 31604 ;; *************** function _rand *****************
 31605 ;; Defined at:
 31606 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\rand.c"
 31607 ;; Parameters:    Size  Location     Type
 31608 ;;		None
 31609 ;; Auto vars:     Size  Location     Type
 31610 ;;		None
 31611 ;; Return value:  Size  Location     Type
 31612 ;;                  2   70[BANK0 ] int 
 31613 ;; Registers used:
 31614 ;;		wreg, status,2, status,0, cstack
 31615 ;; Tracked objects:
 31616 ;;		On entry : 0/0
 31617 ;;		On exit  : 0/0
 31618 ;;		Unchanged: 0/0
 31619 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 31620 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31621 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31622 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31623 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31624 ;;Total ram usage:        2 bytes
 31625 ;; Hardware stack levels used:    1
 31626 ;; Hardware stack levels required when called:    8
 31627 ;; This function calls:
 31628 ;;		___lmul
 31629 ;; This function is called by:
 31630 ;;		_Random
 31631 ;; This function uses a non-reentrant model
 31632 ;;
 31633                           
 31634                           	psect	text149
 31635  00838A                     __ptext149:
 31636                           	opt stack 0
 31637  00838A                     _rand:
 31638                           	opt stack 18
 31639                           
 31640                           ;incstack = 0
 31641  00838A  C1F6  F09A         	movff	_randx,___lmul@multiplier
 31642  00838E  C1F7  F09B         	movff	_randx+1,___lmul@multiplier+1
 31643  008392  C1F8  F09C         	movff	_randx+2,___lmul@multiplier+2
 31644  008396  C1F9  F09D         	movff	_randx+3,___lmul@multiplier+3
 31645  00839A  0E6D               	movlw	109
 31646  00839C  0100               	movlb	0	; () banked
 31647  00839E  6F9E               	movwf	___lmul@multiplicand& (0+255),b
 31648  0083A0  0E4E               	movlw	78
 31649  0083A2  6F9F               	movwf	(___lmul@multiplicand+1)& (0+255),b
 31650  0083A4  0EC6               	movlw	198
 31651  0083A6  6FA0               	movwf	(___lmul@multiplicand+2)& (0+255),b
 31652  0083A8  0E41               	movlw	65
 31653  0083AA  6FA1               	movwf	(___lmul@multiplicand+3)& (0+255),b
 31654  0083AC  EC4D  F042         	call	___lmul	;wreg free
 31655  0083B0  C09A  F1F6         	movff	?___lmul,_randx
 31656  0083B4  C09B  F1F7         	movff	?___lmul+1,_randx+1
 31657  0083B8  C09C  F1F8         	movff	?___lmul+2,_randx+2
 31658  0083BC  C09D  F1F9         	movff	?___lmul+3,_randx+3
 31659  0083C0  0E39               	movlw	57
 31660  0083C2  0101               	movlb	1	; () banked
 31661  0083C4  27F6               	addwf	_randx& (0+255),f,b
 31662  0083C6  0E30               	movlw	48
 31663  0083C8  23F7               	addwfc	(_randx+1)& (0+255),f,b
 31664  0083CA  0E00               	movlw	0
 31665  0083CC  23F8               	addwfc	(_randx+2)& (0+255),f,b
 31666  0083CE  0E00               	movlw	0
 31667  0083D0  23F9               	addwfc	(_randx+3)& (0+255),f,b
 31668                           
 31669                           ; BSR set to: 1
 31670  0083D2  0EFF               	movlw	255
 31671  0083D4  15F8               	andwf	(_randx+2)& (0+255),w,b
 31672  0083D6  0100               	movlb	0	; () banked
 31673  0083D8  6FA6               	movwf	?_rand& (0+255),b
 31674  0083DA  0E7F               	movlw	127
 31675  0083DC  0101               	movlb	1	; () banked
 31676  0083DE  15F9               	andwf	(_randx+3)& (0+255),w,b
 31677  0083E0  0100               	movlb	0	; () banked
 31678  0083E2  6FA7               	movwf	(?_rand+1)& (0+255),b
 31679  0083E4  0012               	return	
 31680  0083E6                     __end_of_rand:
 31681                           	opt stack 0
 31682                           tosu	equ	0xFFF
 31683                           tosh	equ	0xFFE
 31684                           tosl	equ	0xFFD
 31685                           pclath	equ	0xFFA
 31686                           tblptru	equ	0xFF8
 31687                           tblptrh	equ	0xFF7
 31688                           tblptrl	equ	0xFF6
 31689                           tablat	equ	0xFF5
 31690                           prodh	equ	0xFF4
 31691                           prodl	equ	0xFF3
 31692                           intcon	equ	0xFF2
 31693                           intcon2	equ	0xFF1
 31694                           intcon3	equ	0xFF0
 31695                           indf0	equ	0xFEF
 31696                           postinc0	equ	0xFEE
 31697                           fsr0h	equ	0xFEA
 31698                           fsr0l	equ	0xFE9
 31699                           wreg	equ	0xFE8
 31700                           postinc1	equ	0xFE6
 31701                           postdec1	equ	0xFE5
 31702                           plusw1	equ	0xFE3
 31703                           fsr1h	equ	0xFE2
 31704                           fsr1l	equ	0xFE1
 31705                           indf2	equ	0xFDF
 31706                           postinc2	equ	0xFDE
 31707                           postdec2	equ	0xFDD
 31708                           plusw2	equ	0xFDB
 31709                           fsr2h	equ	0xFDA
 31710                           fsr2l	equ	0xFD9
 31711                           status	equ	0xFD8
 31712                           
 31713 ;; *************** function ___lwmod *****************
 31714 ;; Defined at:
 31715 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
 31716 ;; Parameters:    Size  Location     Type
 31717 ;;  dividend        2   72[BANK0 ] unsigned int 
 31718 ;;  divisor         2   74[BANK0 ] unsigned int 
 31719 ;; Auto vars:     Size  Location     Type
 31720 ;;  counter         1   76[BANK0 ] unsigned char 
 31721 ;; Return value:  Size  Location     Type
 31722 ;;                  2   72[BANK0 ] unsigned int 
 31723 ;; Registers used:
 31724 ;;		wreg, status,2, status,0
 31725 ;; Tracked objects:
 31726 ;;		On entry : 0/0
 31727 ;;		On exit  : 0/0
 31728 ;;		Unchanged: 0/0
 31729 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 31730 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31731 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31732 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31733 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31734 ;;Total ram usage:        5 bytes
 31735 ;; Hardware stack levels used:    1
 31736 ;; Hardware stack levels required when called:    7
 31737 ;; This function calls:
 31738 ;;		Nothing
 31739 ;; This function is called by:
 31740 ;;		_Random
 31741 ;; This function uses a non-reentrant model
 31742 ;;
 31743                           
 31744                           	psect	text150
 31745  00897A                     __ptext150:
 31746                           	opt stack 0
 31747  00897A                     ___lwmod:
 31748                           	opt stack 19
 31749                           
 31750                           ; BSR set to: 0
 31751                           ;incstack = 0
 31752  00897A  0100               	movlb	0	; () banked
 31753  00897C  51AA               	movf	___lwmod@divisor& (0+255),w,b
 31754  00897E  11AB               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
 31755  008980  B4D8               	btfsc	status,2,c
 31756  008982  D018               	goto	l3248
 31757                           
 31758                           ; BSR set to: 0
 31759  008984  0E01               	movlw	1
 31760  008986  6FAC               	movwf	___lwmod@counter& (0+255),b
 31761  008988  D004               	goto	l3243
 31762  00898A                     
 31763                           ; BSR set to: 0
 31764                           
 31765                           ; BSR set to: 0
 31766  00898A  90D8               	bcf	status,0,c
 31767  00898C  37AA               	rlcf	___lwmod@divisor& (0+255),f,b
 31768  00898E  37AB               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
 31769  008990  2BAC               	incf	___lwmod@counter& (0+255),f,b
 31770  008992                     l3243:
 31771                           
 31772                           ; BSR set to: 0
 31773                           
 31774                           ; BSR set to: 0
 31775  008992  AFAB               	btfss	(___lwmod@divisor+1)& (0+255),7,b
 31776  008994  D7FA               	goto	l3244
 31777  008996                     u8420:
 31778                           
 31779                           ; BSR set to: 0
 31780                           
 31781                           ; BSR set to: 0
 31782                           
 31783                           ; BSR set to: 0
 31784  008996  51AA               	movf	___lwmod@divisor& (0+255),w,b
 31785  008998  5DA8               	subwf	___lwmod@dividend& (0+255),w,b
 31786  00899A  51AB               	movf	(___lwmod@divisor+1)& (0+255),w,b
 31787  00899C  59A9               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
 31788  00899E  A0D8               	btfss	status,0,c
 31789  0089A0  D004               	goto	l3247
 31790                           
 31791                           ; BSR set to: 0
 31792  0089A2  51AA               	movf	___lwmod@divisor& (0+255),w,b
 31793  0089A4  5FA8               	subwf	___lwmod@dividend& (0+255),f,b
 31794  0089A6  51AB               	movf	(___lwmod@divisor+1)& (0+255),w,b
 31795  0089A8  5BA9               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
 31796  0089AA                     l3247:
 31797                           
 31798                           ; BSR set to: 0
 31799                           
 31800                           ; BSR set to: 0
 31801  0089AA  90D8               	bcf	status,0,c
 31802  0089AC  33AB               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
 31803  0089AE  33AA               	rrcf	___lwmod@divisor& (0+255),f,b
 31804                           
 31805                           ; BSR set to: 0
 31806  0089B0  2FAC               	decfsz	___lwmod@counter& (0+255),f,b
 31807  0089B2  D7F1               	goto	u8420
 31808  0089B4                     l3248:
 31809                           
 31810                           ; BSR set to: 0
 31811                           
 31812                           ; BSR set to: 0
 31813  0089B4  C0A8  F0A8         	movff	___lwmod@dividend,?___lwmod
 31814  0089B8  C0A9  F0A9         	movff	___lwmod@dividend+1,?___lwmod+1
 31815                           
 31816                           ; BSR set to: 0
 31817  0089BC  0012               	return		;funcret
 31818  0089BE                     __end_of___lwmod:
 31819                           	opt stack 0
 31820                           tosu	equ	0xFFF
 31821                           tosh	equ	0xFFE
 31822                           tosl	equ	0xFFD
 31823                           pclath	equ	0xFFA
 31824                           tblptru	equ	0xFF8
 31825                           tblptrh	equ	0xFF7
 31826                           tblptrl	equ	0xFF6
 31827                           tablat	equ	0xFF5
 31828                           prodh	equ	0xFF4
 31829                           prodl	equ	0xFF3
 31830                           intcon	equ	0xFF2
 31831                           intcon2	equ	0xFF1
 31832                           intcon3	equ	0xFF0
 31833                           indf0	equ	0xFEF
 31834                           postinc0	equ	0xFEE
 31835                           fsr0h	equ	0xFEA
 31836                           fsr0l	equ	0xFE9
 31837                           wreg	equ	0xFE8
 31838                           postinc1	equ	0xFE6
 31839                           postdec1	equ	0xFE5
 31840                           plusw1	equ	0xFE3
 31841                           fsr1h	equ	0xFE2
 31842                           fsr1l	equ	0xFE1
 31843                           indf2	equ	0xFDF
 31844                           postinc2	equ	0xFDE
 31845                           postdec2	equ	0xFDD
 31846                           plusw2	equ	0xFDB
 31847                           fsr2h	equ	0xFDA
 31848                           fsr2l	equ	0xFD9
 31849                           status	equ	0xFD8
 31850                           
 31851 ;; *************** function _ComputeMic *****************
 31852 ;; Defined at:
 31853 ;;		line 2194 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 31854 ;; Parameters:    Size  Location     Type
 31855 ;;  key             2  103[BANK0 ] PTR unsigned char 
 31856 ;;		 -> loRa.activationParameters(105), loRa(245), 
 31857 ;;  buffer          2  105[BANK0 ] PTR unsigned char 
 31858 ;;		 -> radioBuffer(271), LORAWAN_RxDone@hdr(2), macBuffer(271), 
 31859 ;;  bufferLength    1  107[BANK0 ] unsigned char 
 31860 ;; Auto vars:     Size  Location     Type
 31861 ;;  mic             4  108[BANK0 ] unsigned long 
 31862 ;; Return value:  Size  Location     Type
 31863 ;;                  4  103[BANK0 ] unsigned long 
 31864 ;; Registers used:
 31865 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 31866 ;; Tracked objects:
 31867 ;;		On entry : 0/0
 31868 ;;		On exit  : 0/0
 31869 ;;		Unchanged: 0/0
 31870 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 31871 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31872 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31873 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31874 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31875 ;;Total ram usage:        9 bytes
 31876 ;; Hardware stack levels used:    1
 31877 ;; Hardware stack levels required when called:   12
 31878 ;; This function calls:
 31879 ;;		_AESCmac
 31880 ;;		_memcpy
 31881 ;; This function is called by:
 31882 ;;		_LORAWAN_RxDone
 31883 ;;		_PrepareJoinRequestFrame
 31884 ;; This function uses a non-reentrant model
 31885 ;;
 31886                           
 31887                           	psect	text151
 31888  0080E8                     __ptext151:
 31889                           	opt stack 0
 31890  0080E8                     _ComputeMic:
 31891                           	opt stack 14
 31892                           
 31893                           ;lorawan.c: 2196: uint32_t mic = 0;
 31894                           
 31895                           ; BSR set to: 0
 31896                           ;incstack = 0
 31897  0080E8  0E00               	movlw	0
 31898  0080EA  0100               	movlb	0	; () banked
 31899  0080EC  6FCC               	movwf	ComputeMic@mic& (0+255),b
 31900  0080EE  0E00               	movlw	0
 31901  0080F0  6FCD               	movwf	(ComputeMic@mic+1)& (0+255),b
 31902  0080F2  0E00               	movlw	0
 31903  0080F4  6FCE               	movwf	(ComputeMic@mic+2)& (0+255),b
 31904  0080F6  0E00               	movlw	0
 31905  0080F8  6FCF               	movwf	(ComputeMic@mic+3)& (0+255),b
 31906                           
 31907                           ; BSR set to: 0
 31908                           ;lorawan.c: 2198: AESCmac(key, aesBuffer, buffer, bufferLength);
 31909  0080FA  C0C7  F0B9         	movff	ComputeMic@key,AESCmac@key
 31910  0080FE  C0C8  F0BA         	movff	ComputeMic@key+1,AESCmac@key+1
 31911  008102  0EA0               	movlw	low _aesBuffer
 31912  008104  6FBB               	movwf	AESCmac@output& (0+255),b
 31913  008106  0E03               	movlw	high _aesBuffer
 31914  008108  6FBC               	movwf	(AESCmac@output+1)& (0+255),b
 31915  00810A  C0C9  F0BD         	movff	ComputeMic@buffer,AESCmac@input
 31916  00810E  C0CA  F0BE         	movff	ComputeMic@buffer+1,AESCmac@input+1
 31917  008112  C0CB  F0BF         	movff	ComputeMic@bufferLength,AESCmac@size
 31918  008116  EC1F  F011         	call	_AESCmac	;wreg free
 31919                           
 31920                           ;lorawan.c: 2200: memcpy(&mic, aesBuffer, sizeof( mic ));
 31921  00811A  0ECC               	movlw	low ComputeMic@mic
 31922  00811C  0100               	movlb	0	; () banked
 31923  00811E  6F60               	movwf	memcpy@d1& (0+255),b
 31924  008120  0E00               	movlw	high ComputeMic@mic
 31925  008122  6F61               	movwf	(memcpy@d1+1)& (0+255),b
 31926  008124  0EA0               	movlw	low _aesBuffer
 31927  008126  6F62               	movwf	memcpy@s1& (0+255),b
 31928  008128  0E03               	movlw	high _aesBuffer
 31929  00812A  6F63               	movwf	(memcpy@s1+1)& (0+255),b
 31930  00812C  0E00               	movlw	0
 31931  00812E  6F65               	movwf	(memcpy@n+1)& (0+255),b
 31932  008130  0E04               	movlw	4
 31933  008132  6F64               	movwf	memcpy@n& (0+255),b
 31934  008134  EC37  F041         	call	_memcpy	;wreg free
 31935                           
 31936                           ;lorawan.c: 2202: return mic;
 31937  008138  C0CC  F0C7         	movff	ComputeMic@mic,?_ComputeMic
 31938  00813C  C0CD  F0C8         	movff	ComputeMic@mic+1,?_ComputeMic+1
 31939  008140  C0CE  F0C9         	movff	ComputeMic@mic+2,?_ComputeMic+2
 31940  008144  C0CF  F0CA         	movff	ComputeMic@mic+3,?_ComputeMic+3
 31941  008148  0012               	return	
 31942  00814A                     __end_of_ComputeMic:
 31943                           	opt stack 0
 31944                           tosu	equ	0xFFF
 31945                           tosh	equ	0xFFE
 31946                           tosl	equ	0xFFD
 31947                           pclath	equ	0xFFA
 31948                           tblptru	equ	0xFF8
 31949                           tblptrh	equ	0xFF7
 31950                           tblptrl	equ	0xFF6
 31951                           tablat	equ	0xFF5
 31952                           prodh	equ	0xFF4
 31953                           prodl	equ	0xFF3
 31954                           intcon	equ	0xFF2
 31955                           intcon2	equ	0xFF1
 31956                           intcon3	equ	0xFF0
 31957                           indf0	equ	0xFEF
 31958                           postinc0	equ	0xFEE
 31959                           fsr0h	equ	0xFEA
 31960                           fsr0l	equ	0xFE9
 31961                           wreg	equ	0xFE8
 31962                           postinc1	equ	0xFE6
 31963                           postdec1	equ	0xFE5
 31964                           plusw1	equ	0xFE3
 31965                           fsr1h	equ	0xFE2
 31966                           fsr1l	equ	0xFE1
 31967                           indf2	equ	0xFDF
 31968                           postinc2	equ	0xFDE
 31969                           postdec2	equ	0xFDD
 31970                           plusw2	equ	0xFDB
 31971                           fsr2h	equ	0xFDA
 31972                           fsr2l	equ	0xFD9
 31973                           status	equ	0xFD8
 31974                           
 31975 ;; *************** function _AESCmac *****************
 31976 ;; Defined at:
 31977 ;;		line 41 in file "mcc_generated_files/LoRaWAN/lorawan_aes_cmac.c"
 31978 ;; Parameters:    Size  Location     Type
 31979 ;;  key             2   89[BANK0 ] PTR unsigned char 
 31980 ;;		 -> loRa.activationParameters(105), loRa(245), 
 31981 ;;  output          2   91[BANK0 ] PTR unsigned char 
 31982 ;;		 -> aesBuffer(16), 
 31983 ;;  input           2   93[BANK0 ] PTR unsigned char 
 31984 ;;		 -> radioBuffer(271), LORAWAN_RxDone@hdr(2), macBuffer(271), 
 31985 ;;  size            1   95[BANK0 ] unsigned char 
 31986 ;; Auto vars:     Size  Location     Type
 31987 ;;  x              16   80[BANK1 ] unsigned char [16]
 31988 ;;  y              16   64[BANK1 ] unsigned char [16]
 31989 ;;  padded         16   48[BANK1 ] unsigned char [16]
 31990 ;;  mLast          16   32[BANK1 ] unsigned char [16]
 31991 ;;  k1             16   16[BANK1 ] unsigned char [16]
 31992 ;;  k2             16    0[BANK1 ] unsigned char [16]
 31993 ;;  ptr             2   96[BANK1 ] PTR unsigned char 
 31994 ;;		 -> radioBuffer(271), LORAWAN_RxDone@hdr(2), macBuffer(271), NULL(0), 
 31995 ;;  i               1  101[BANK1 ] unsigned char 
 31996 ;;  j               1  100[BANK1 ] unsigned char 
 31997 ;;  n               1   99[BANK1 ] unsigned char 
 31998 ;;  flag            1   98[BANK1 ] unsigned char 
 31999 ;; Return value:  Size  Location     Type
 32000 ;;                  1    wreg      void 
 32001 ;; Registers used:
 32002 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 32003 ;; Tracked objects:
 32004 ;;		On entry : 0/0
 32005 ;;		On exit  : 0/0
 32006 ;;		Unchanged: 0/0
 32007 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 32008 ;;      Params:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 32009 ;;      Locals:         0       0     102       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 32010 ;;      Temps:          0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 32011 ;;      Totals:         0      14     102       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 32012 ;;Total ram usage:      116 bytes
 32013 ;; Hardware stack levels used:    1
 32014 ;; Hardware stack levels required when called:   11
 32015 ;; This function calls:
 32016 ;;		_AESEncodeLoRa
 32017 ;;		_GenerateSubkey
 32018 ;;		_memcpy
 32019 ;;		_memset
 32020 ;; This function is called by:
 32021 ;;		_LORAWAN_RxDone
 32022 ;;		_AssemblePacket
 32023 ;;		_ComputeMic
 32024 ;; This function uses a non-reentrant model
 32025 ;;
 32026                           
 32027                           	psect	text152
 32028  00223E                     __ptext152:
 32029                           	opt stack 0
 32030  00223E                     _AESCmac:
 32031                           	opt stack 17
 32032                           
 32033                           ;lorawan_aes_cmac.c: 43: uint8_t n = 0, i = 0, j =0;
 32034                           
 32035                           ;incstack = 0
 32036  00223E  0E00               	movlw	0
 32037  002240  0101               	movlb	1	; () banked
 32038  002242  6FF0               	movwf	AESCmac@n& (0+255),b
 32039  002244  0E00               	movlw	0
 32040  002246  6FF2               	movwf	AESCmac@i& (0+255),b
 32041  002248  0E00               	movlw	0
 32042  00224A  6FF1               	movwf	AESCmac@j& (0+255),b
 32043                           
 32044                           ;lorawan_aes_cmac.c: 44: bool flag = 0;
 32045  00224C  0E00               	movlw	0
 32046  00224E  6FEF               	movwf	AESCmac@flag& (0+255),b
 32047                           
 32048                           ; BSR set to: 1
 32049                           ;lorawan_aes_cmac.c: 45: uint8_t k1[16], k2[16];
 32050                           ;lorawan_aes_cmac.c: 46: uint8_t x[16], y[16], mLast[16], padded[16];
 32051                           ;lorawan_aes_cmac.c: 47: uint8_t *ptr = (0);
 32052  002250  0E00               	movlw	0
 32053  002252  6FED               	movwf	AESCmac@ptr& (0+255),b
 32054  002254  0E00               	movlw	0
 32055  002256  6FEE               	movwf	(AESCmac@ptr+1)& (0+255),b
 32056                           
 32057                           ; BSR set to: 1
 32058                           ;lorawan_aes_cmac.c: 49: GenerateSubkey(key, k1, k2);
 32059  002258  C0B9  F091         	movff	AESCmac@key,GenerateSubkey@key
 32060  00225C  C0BA  F092         	movff	AESCmac@key+1,GenerateSubkey@key+1
 32061  002260  0E9D               	movlw	low AESCmac@k1
 32062  002262  0100               	movlb	0	; () banked
 32063  002264  6F93               	movwf	GenerateSubkey@k1& (0+255),b
 32064  002266  0E01               	movlw	high AESCmac@k1
 32065  002268  6F94               	movwf	(GenerateSubkey@k1+1)& (0+255),b
 32066  00226A  0E8D               	movlw	low AESCmac@k2
 32067  00226C  6F95               	movwf	GenerateSubkey@k2& (0+255),b
 32068  00226E  0E01               	movlw	high AESCmac@k2
 32069  002270  6F96               	movwf	(GenerateSubkey@k2+1)& (0+255),b
 32070  002272  EC44  F02D         	call	_GenerateSubkey	;wreg free
 32071                           
 32072                           ;lorawan_aes_cmac.c: 51: n = (size + 15) >> (4);
 32073  002276  0100               	movlb	0	; () banked
 32074  002278  51BF               	movf	AESCmac@size& (0+255),w,b
 32075  00227A  6FC0               	movwf	??_AESCmac& (0+255),b
 32076  00227C  6BC1               	clrf	(??_AESCmac+1)& (0+255),b
 32077  00227E  0E0F               	movlw	15
 32078  002280  27C0               	addwf	??_AESCmac& (0+255),f,b
 32079  002282  0E00               	movlw	0
 32080  002284  23C1               	addwfc	(??_AESCmac+1)& (0+255),f,b
 32081  002286  0E04               	movlw	4
 32082  002288  6FC2               	movwf	(??_AESCmac+2)& (0+255),b
 32083  00228A                     u8945:
 32084  00228A  35C1               	rlcf	(??_AESCmac+1)& (0+255),w,b
 32085  00228C  33C1               	rrcf	(??_AESCmac+1)& (0+255),f,b
 32086  00228E  33C0               	rrcf	??_AESCmac& (0+255),f,b
 32087  002290  2FC2               	decfsz	(??_AESCmac+2)& (0+255),f,b
 32088  002292  D7FB               	goto	u8945
 32089  002294  51C0               	movf	??_AESCmac& (0+255),w,b
 32090  002296  0101               	movlb	1	; () banked
 32091  002298  6FF0               	movwf	AESCmac@n& (0+255),b
 32092                           
 32093                           ; BSR set to: 1
 32094                           ;lorawan_aes_cmac.c: 52: if (n == 0)
 32095  00229A  51F0               	movf	AESCmac@n& (0+255),w,b
 32096  00229C  A4D8               	btfss	status,2,c
 32097  00229E  D004               	goto	l13
 32098                           
 32099                           ; BSR set to: 1
 32100                           ;lorawan_aes_cmac.c: 53: {
 32101                           ;lorawan_aes_cmac.c: 54: n = 1;
 32102  0022A0  0E01               	movlw	1
 32103  0022A2  6FF0               	movwf	AESCmac@n& (0+255),b
 32104                           
 32105                           ;lorawan_aes_cmac.c: 55: flag = 0;
 32106  0022A4  0E00               	movlw	0
 32107  0022A6  D00B               	goto	L23
 32108  0022A8                     l13:
 32109                           
 32110                           ; BSR set to: 1
 32111                           ;lorawan_aes_cmac.c: 57: else
 32112                           ;lorawan_aes_cmac.c: 58: {
 32113                           ;lorawan_aes_cmac.c: 59: flag = !(size % 16);
 32114                           
 32115                           ; BSR set to: 1
 32116  0022A8  C0BF  F0C0         	movff	AESCmac@size,??_AESCmac
 32117  0022AC  0E0F               	movlw	15
 32118  0022AE  0100               	movlb	0	; () banked
 32119  0022B0  17C0               	andwf	??_AESCmac& (0+255),f,b
 32120  0022B2  A4D8               	btfss	status,2,c
 32121  0022B4  D002               	goto	u8960
 32122  0022B6  0E01               	movlw	1
 32123  0022B8  D001               	goto	u8970
 32124  0022BA                     u8960:
 32125  0022BA  0E00               	movlw	0
 32126  0022BC                     u8970:
 32127  0022BC  0101               	movlb	1	; () banked
 32128  0022BE                     L23:
 32129  0022BE  6FEF               	movwf	AESCmac@flag& (0+255),b
 32130                           
 32131                           ; BSR set to: 1
 32132                           ;lorawan_aes_cmac.c: 60: }
 32133                           ;lorawan_aes_cmac.c: 62: if ( flag == 1 )
 32134  0022C0  05EF               	decf	AESCmac@flag& (0+255),w,b
 32135  0022C2  A4D8               	btfss	status,2,c
 32136  0022C4  D048               	goto	l15
 32137                           
 32138                           ; BSR set to: 1
 32139                           ;lorawan_aes_cmac.c: 63: {
 32140                           ;lorawan_aes_cmac.c: 64: j = 0;
 32141  0022C6  0E00               	movlw	0
 32142  0022C8  6FF1               	movwf	AESCmac@j& (0+255),b
 32143                           
 32144                           ; BSR set to: 1
 32145                           ;lorawan_aes_cmac.c: 65: for (i=((n-1) << (4)); i<(n << (4)); i++)
 32146  0022CA  39F0               	swapf	AESCmac@n& (0+255),w,b
 32147  0022CC  0BF0               	andlw	240
 32148  0022CE  0FF0               	addlw	240
 32149  0022D0  6FF2               	movwf	AESCmac@i& (0+255),b
 32150  0022D2  D024               	goto	l16
 32151  0022D4                     
 32152                           ;lorawan_aes_cmac.c: 66: {
 32153                           ;lorawan_aes_cmac.c: 67: mLast[j] = input[i] ^ k1[j];
 32154                           
 32155                           ; BSR set to: 1
 32156  0022D4  0101               	movlb	1	; () banked
 32157  0022D6  51F1               	movf	AESCmac@j& (0+255),w,b
 32158  0022D8  0D01               	mullw	1
 32159  0022DA  0EAD               	movlw	low AESCmac@mLast
 32160  0022DC  24F3               	addwf	prodl,w,c
 32161  0022DE  6ED9               	movwf	fsr2l,c
 32162  0022E0  0E01               	movlw	high AESCmac@mLast
 32163  0022E2  20F4               	addwfc	prodh,w,c
 32164  0022E4  6EDA               	movwf	fsr2h,c
 32165  0022E6  51F1               	movf	AESCmac@j& (0+255),w,b
 32166  0022E8  0D01               	mullw	1
 32167  0022EA  0E9D               	movlw	low AESCmac@k1
 32168  0022EC  24F3               	addwf	prodl,w,c
 32169  0022EE  6EE9               	movwf	fsr0l,c
 32170  0022F0  0E01               	movlw	high AESCmac@k1
 32171  0022F2  20F4               	addwfc	prodh,w,c
 32172  0022F4  6EEA               	movwf	fsr0h,c
 32173  0022F6  50EF               	movf	indf0,w,c
 32174  0022F8  0100               	movlb	0	; () banked
 32175  0022FA  6FC0               	movwf	??_AESCmac& (0+255),b
 32176  0022FC  0101               	movlb	1	; () banked
 32177  0022FE  51F2               	movf	AESCmac@i& (0+255),w,b
 32178  002300  0D01               	mullw	1
 32179  002302  50F3               	movf	prodl,w,c
 32180  002304  0100               	movlb	0	; () banked
 32181  002306  25BD               	addwf	AESCmac@input& (0+255),w,b
 32182  002308  6EE9               	movwf	fsr0l,c
 32183  00230A  50F4               	movf	prodh,w,c
 32184  00230C  21BE               	addwfc	(AESCmac@input+1)& (0+255),w,b
 32185  00230E  6EEA               	movwf	fsr0h,c
 32186  002310  50EF               	movf	indf0,w,c
 32187  002312  19C0               	xorwf	??_AESCmac& (0+255),w,b
 32188  002314  6EDF               	movwf	indf2,c
 32189                           
 32190                           ; BSR set to: 0
 32191                           ;lorawan_aes_cmac.c: 68: j++;
 32192  002316  0101               	movlb	1	; () banked
 32193  002318  2BF1               	incf	AESCmac@j& (0+255),f,b
 32194                           
 32195                           ; BSR set to: 1
 32196  00231A  2BF2               	incf	AESCmac@i& (0+255),f,b
 32197  00231C                     l16:
 32198                           
 32199                           ; BSR set to: 1
 32200                           
 32201                           ; BSR set to: 1
 32202  00231C  51F0               	movf	AESCmac@n& (0+255),w,b
 32203  00231E  0100               	movlb	0	; () banked
 32204  002320  6FC0               	movwf	??_AESCmac& (0+255),b
 32205  002322  6BC1               	clrf	(??_AESCmac+1)& (0+255),b
 32206  002324  3BC0               	swapf	??_AESCmac& (0+255),f,b
 32207  002326  3BC1               	swapf	(??_AESCmac+1)& (0+255),f,b
 32208  002328  0EF0               	movlw	240
 32209  00232A  17C1               	andwf	(??_AESCmac+1)& (0+255),f,b
 32210  00232C  51C0               	movf	??_AESCmac& (0+255),w,b
 32211  00232E  0B0F               	andlw	15
 32212  002330  13C1               	iorwf	(??_AESCmac+1)& (0+255),f,b
 32213  002332  0EF0               	movlw	240
 32214  002334  17C0               	andwf	??_AESCmac& (0+255),f,b
 32215  002336  0101               	movlb	1	; () banked
 32216  002338  51F2               	movf	AESCmac@i& (0+255),w,b
 32217  00233A  0100               	movlb	0	; () banked
 32218  00233C  6FC2               	movwf	(??_AESCmac+2)& (0+255),b
 32219  00233E  6BC3               	clrf	(??_AESCmac+3)& (0+255),b
 32220  002340  51C0               	movf	??_AESCmac& (0+255),w,b
 32221  002342  5DC2               	subwf	(??_AESCmac+2)& (0+255),w,b
 32222  002344  51C3               	movf	(??_AESCmac+3)& (0+255),w,b
 32223  002346  0A80               	xorlw	128
 32224  002348  6FC4               	movwf	(??_AESCmac+4)& (0+255),b
 32225  00234A  51C1               	movf	(??_AESCmac+1)& (0+255),w,b
 32226  00234C  0A80               	xorlw	128
 32227  00234E  59C4               	subwfb	(??_AESCmac+4)& (0+255),w,b
 32228  002350  B0D8               	btfsc	status,0,c
 32229  002352  D07F               	goto	u9050
 32230  002354  D7BF               	goto	l17
 32231  002356                     l15:
 32232                           
 32233                           ;lorawan_aes_cmac.c: 71: else
 32234                           ;lorawan_aes_cmac.c: 72: {
 32235                           ;lorawan_aes_cmac.c: 74: ptr = &input[size - (size%16)];
 32236                           
 32237                           ; BSR set to: 0
 32238  002356  0100               	movlb	0	; () banked
 32239  002358  51BF               	movf	AESCmac@size& (0+255),w,b
 32240  00235A  0B0F               	andlw	15
 32241  00235C  6FC0               	movwf	??_AESCmac& (0+255),b
 32242  00235E  6BC1               	clrf	(??_AESCmac+1)& (0+255),b
 32243  002360  1FC0               	comf	??_AESCmac& (0+255),f,b
 32244  002362  1FC1               	comf	(??_AESCmac+1)& (0+255),f,b
 32245  002364  4BC0               	infsnz	??_AESCmac& (0+255),f,b
 32246  002366  2BC1               	incf	(??_AESCmac+1)& (0+255),f,b
 32247  002368  51BF               	movf	AESCmac@size& (0+255),w,b
 32248  00236A  6FC2               	movwf	(??_AESCmac+2)& (0+255),b
 32249  00236C  6BC3               	clrf	(??_AESCmac+3)& (0+255),b
 32250  00236E  51C0               	movf	??_AESCmac& (0+255),w,b
 32251  002370  27C2               	addwf	(??_AESCmac+2)& (0+255),f,b
 32252  002372  51C1               	movf	(??_AESCmac+1)& (0+255),w,b
 32253  002374  23C3               	addwfc	(??_AESCmac+3)& (0+255),f,b
 32254  002376  51C2               	movf	(??_AESCmac+2)& (0+255),w,b
 32255  002378  25BD               	addwf	AESCmac@input& (0+255),w,b
 32256  00237A  0101               	movlb	1	; () banked
 32257  00237C  6FED               	movwf	AESCmac@ptr& (0+255),b
 32258  00237E  0100               	movlb	0	; () banked
 32259  002380  51C3               	movf	(??_AESCmac+3)& (0+255),w,b
 32260  002382  21BE               	addwfc	(AESCmac@input+1)& (0+255),w,b
 32261  002384  0101               	movlb	1	; () banked
 32262  002386  6FEE               	movwf	(AESCmac@ptr+1)& (0+255),b
 32263                           
 32264                           ; BSR set to: 1
 32265                           ;lorawan_aes_cmac.c: 75: for (i=0; i<16; i++)
 32266  002388  0E00               	movlw	0
 32267  00238A  6FF2               	movwf	AESCmac@i& (0+255),b
 32268  00238C                     l9653:
 32269                           
 32270                           ; BSR set to: 1
 32271  00238C  0E0F               	movlw	15
 32272  00238E  65F2               	cpfsgt	AESCmac@i& (0+255),b
 32273  002390  D001               	goto	l20
 32274  002392  D036               	goto	u9030
 32275  002394                     l20:
 32276                           
 32277                           ; BSR set to: 1
 32278                           ;lorawan_aes_cmac.c: 76: {
 32279                           ;lorawan_aes_cmac.c: 77: if ( i < (size%16) )
 32280                           
 32281                           ; BSR set to: 1
 32282  002394  0100               	movlb	0	; () banked
 32283  002396  51BF               	movf	AESCmac@size& (0+255),w,b
 32284  002398  0B0F               	andlw	15
 32285  00239A  0101               	movlb	1	; () banked
 32286  00239C  61F2               	cpfslt	AESCmac@i& (0+255),b
 32287  00239E  D013               	goto	l22
 32288                           
 32289                           ; BSR set to: 1
 32290                           ;lorawan_aes_cmac.c: 78: {
 32291                           ;lorawan_aes_cmac.c: 79: padded[i] = ptr[i];
 32292  0023A0  51F2               	movf	AESCmac@i& (0+255),w,b
 32293  0023A2  0D01               	mullw	1
 32294  0023A4  50F3               	movf	prodl,w,c
 32295  0023A6  25ED               	addwf	AESCmac@ptr& (0+255),w,b
 32296  0023A8  6ED9               	movwf	fsr2l,c
 32297  0023AA  50F4               	movf	prodh,w,c
 32298  0023AC  21EE               	addwfc	(AESCmac@ptr+1)& (0+255),w,b
 32299  0023AE  6EDA               	movwf	fsr2h,c
 32300  0023B0  51F2               	movf	AESCmac@i& (0+255),w,b
 32301  0023B2  0D01               	mullw	1
 32302  0023B4  0EBD               	movlw	low AESCmac@padded
 32303  0023B6  24F3               	addwf	prodl,w,c
 32304  0023B8  6EE9               	movwf	fsr0l,c
 32305  0023BA  0E01               	movlw	high AESCmac@padded
 32306  0023BC  20F4               	addwfc	prodh,w,c
 32307  0023BE  6EEA               	movwf	fsr0h,c
 32308  0023C0  CFDF FFEF          	movff	indf2,indf0
 32309                           
 32310                           ;lorawan_aes_cmac.c: 80: }
 32311  0023C4  D01B               	goto	l25
 32312  0023C6                     l22:
 32313                           
 32314                           ; BSR set to: 1
 32315                           ;lorawan_aes_cmac.c: 81: else
 32316                           ;lorawan_aes_cmac.c: 82: {
 32317                           ;lorawan_aes_cmac.c: 83: if ( i == (size%16) )
 32318                           
 32319                           ; BSR set to: 1
 32320  0023C6  0100               	movlb	0	; () banked
 32321  0023C8  51BF               	movf	AESCmac@size& (0+255),w,b
 32322  0023CA  0B0F               	andlw	15
 32323  0023CC  0101               	movlb	1	; () banked
 32324  0023CE  19F2               	xorwf	AESCmac@i& (0+255),w,b
 32325  0023D0  A4D8               	btfss	status,2,c
 32326  0023D2  D00A               	goto	l24
 32327                           
 32328                           ; BSR set to: 1
 32329                           ;lorawan_aes_cmac.c: 84: {
 32330                           ;lorawan_aes_cmac.c: 85: padded[i] = 0x80;
 32331  0023D4  51F2               	movf	AESCmac@i& (0+255),w,b
 32332  0023D6  0D01               	mullw	1
 32333  0023D8  0EBD               	movlw	low AESCmac@padded
 32334  0023DA  24F3               	addwf	prodl,w,c
 32335  0023DC  6ED9               	movwf	fsr2l,c
 32336  0023DE  0E01               	movlw	high AESCmac@padded
 32337  0023E0  20F4               	addwfc	prodh,w,c
 32338  0023E2  6EDA               	movwf	fsr2h,c
 32339  0023E4  0E80               	movlw	128
 32340  0023E6  D009               	goto	L24
 32341  0023E8                     l24:
 32342                           
 32343                           ; BSR set to: 1
 32344                           ;lorawan_aes_cmac.c: 87: else
 32345                           ;lorawan_aes_cmac.c: 88: {
 32346                           ;lorawan_aes_cmac.c: 89: padded[i] = 0x00;
 32347                           
 32348                           ; BSR set to: 1
 32349  0023E8  51F2               	movf	AESCmac@i& (0+255),w,b
 32350  0023EA  0D01               	mullw	1
 32351  0023EC  0EBD               	movlw	low AESCmac@padded
 32352  0023EE  24F3               	addwf	prodl,w,c
 32353  0023F0  6ED9               	movwf	fsr2l,c
 32354  0023F2  0E01               	movlw	high AESCmac@padded
 32355  0023F4  20F4               	addwfc	prodh,w,c
 32356  0023F6  6EDA               	movwf	fsr2h,c
 32357  0023F8  0E00               	movlw	0
 32358  0023FA                     L24:
 32359  0023FA  6EDF               	movwf	indf2,c
 32360  0023FC                     l25:
 32361                           
 32362                           ; BSR set to: 1
 32363                           
 32364                           ; BSR set to: 1
 32365                           
 32366                           ; BSR set to: 1
 32367  0023FC  2BF2               	incf	AESCmac@i& (0+255),f,b
 32368  0023FE  D7C6               	goto	l9653
 32369  002400                     u9030:
 32370                           
 32371                           ; BSR set to: 1
 32372                           ;lorawan_aes_cmac.c: 90: }
 32373                           ;lorawan_aes_cmac.c: 91: }
 32374                           ;lorawan_aes_cmac.c: 92: }
 32375                           ;lorawan_aes_cmac.c: 95: for (i=0; i<sizeof(mLast); i++)
 32376                           
 32377                           ; BSR set to: 1
 32378  002400  0E00               	movlw	0
 32379  002402  6FF2               	movwf	AESCmac@i& (0+255),b
 32380  002404                     l9673:
 32381                           
 32382                           ; BSR set to: 1
 32383  002404  0E0F               	movlw	15
 32384  002406  65F2               	cpfsgt	AESCmac@i& (0+255),b
 32385  002408  D001               	goto	l26
 32386  00240A  D023               	goto	u9050
 32387  00240C                     l26:
 32388                           
 32389                           ; BSR set to: 1
 32390                           ;lorawan_aes_cmac.c: 96: {
 32391                           ;lorawan_aes_cmac.c: 97: mLast[i] = padded[i] ^ k2[i];
 32392                           
 32393                           ; BSR set to: 1
 32394  00240C  51F2               	movf	AESCmac@i& (0+255),w,b
 32395  00240E  0D01               	mullw	1
 32396  002410  0EAD               	movlw	low AESCmac@mLast
 32397  002412  24F3               	addwf	prodl,w,c
 32398  002414  6ED9               	movwf	fsr2l,c
 32399  002416  0E01               	movlw	high AESCmac@mLast
 32400  002418  20F4               	addwfc	prodh,w,c
 32401  00241A  6EDA               	movwf	fsr2h,c
 32402  00241C  51F2               	movf	AESCmac@i& (0+255),w,b
 32403  00241E  0D01               	mullw	1
 32404  002420  0E8D               	movlw	low AESCmac@k2
 32405  002422  24F3               	addwf	prodl,w,c
 32406  002424  6EE9               	movwf	fsr0l,c
 32407  002426  0E01               	movlw	high AESCmac@k2
 32408  002428  20F4               	addwfc	prodh,w,c
 32409  00242A  6EEA               	movwf	fsr0h,c
 32410  00242C  50EF               	movf	indf0,w,c
 32411  00242E  0100               	movlb	0	; () banked
 32412  002430  6FC0               	movwf	??_AESCmac& (0+255),b
 32413  002432  0101               	movlb	1	; () banked
 32414  002434  51F2               	movf	AESCmac@i& (0+255),w,b
 32415  002436  0D01               	mullw	1
 32416  002438  0EBD               	movlw	low AESCmac@padded
 32417  00243A  24F3               	addwf	prodl,w,c
 32418  00243C  6EE9               	movwf	fsr0l,c
 32419  00243E  0E01               	movlw	high AESCmac@padded
 32420  002440  20F4               	addwfc	prodh,w,c
 32421  002442  6EEA               	movwf	fsr0h,c
 32422  002444  50EF               	movf	indf0,w,c
 32423  002446  0100               	movlb	0	; () banked
 32424  002448  19C0               	xorwf	??_AESCmac& (0+255),w,b
 32425  00244A  6EDF               	movwf	indf2,c
 32426                           
 32427                           ; BSR set to: 0
 32428  00244C  0101               	movlb	1	; () banked
 32429  00244E  2BF2               	incf	AESCmac@i& (0+255),f,b
 32430  002450  D7D9               	goto	l9673
 32431  002452                     u9050:
 32432                           
 32433                           ;lorawan_aes_cmac.c: 98: }
 32434                           ;lorawan_aes_cmac.c: 99: }
 32435                           ;lorawan_aes_cmac.c: 101: memset(x, 0, sizeof(x));
 32436                           
 32437                           ; BSR set to: 1
 32438                           
 32439                           ; BSR set to: 1
 32440  002452  0EDD               	movlw	low AESCmac@x
 32441  002454  0100               	movlb	0	; () banked
 32442  002456  6F60               	movwf	memset@p1& (0+255),b
 32443  002458  0E01               	movlw	high AESCmac@x
 32444  00245A  6F61               	movwf	(memset@p1+1)& (0+255),b
 32445  00245C  0E00               	movlw	0
 32446  00245E  6F63               	movwf	(memset@c+1)& (0+255),b
 32447  002460  0E00               	movlw	0
 32448  002462  6F62               	movwf	memset@c& (0+255),b
 32449  002464  0E00               	movlw	0
 32450  002466  6F65               	movwf	(memset@n+1)& (0+255),b
 32451  002468  0E10               	movlw	16
 32452  00246A  6F64               	movwf	memset@n& (0+255),b
 32453  00246C  ECCC  F046         	call	_memset	;wreg free
 32454                           
 32455                           ;lorawan_aes_cmac.c: 103: for (i=0; i<(n-1); i++)
 32456  002470  0E00               	movlw	0
 32457  002472  0101               	movlb	1	; () banked
 32458  002474  6FF2               	movwf	AESCmac@i& (0+255),b
 32459  002476  D056               	goto	l28
 32460  002478                     
 32461                           ;lorawan_aes_cmac.c: 104: {
 32462                           ;lorawan_aes_cmac.c: 105: for (j=0; j<16; j++)
 32463                           
 32464                           ; BSR set to: 1
 32465  002478  0E00               	movlw	0
 32466  00247A  0101               	movlb	1	; () banked
 32467  00247C  6FF1               	movwf	AESCmac@j& (0+255),b
 32468  00247E                     l9689:
 32469                           
 32470                           ; BSR set to: 1
 32471  00247E  0E0F               	movlw	15
 32472  002480  65F1               	cpfsgt	AESCmac@j& (0+255),b
 32473  002482  D001               	goto	l30
 32474  002484  D033               	goto	u9070
 32475  002486                     l30:
 32476                           
 32477                           ; BSR set to: 1
 32478                           ;lorawan_aes_cmac.c: 106: {
 32479                           ;lorawan_aes_cmac.c: 107: y[j] = x[j] ^ input[(i << (4))+j];
 32480                           
 32481                           ; BSR set to: 1
 32482  002486  51F1               	movf	AESCmac@j& (0+255),w,b
 32483  002488  0D01               	mullw	1
 32484  00248A  0ECD               	movlw	low AESCmac@y
 32485  00248C  24F3               	addwf	prodl,w,c
 32486  00248E  6ED9               	movwf	fsr2l,c
 32487  002490  0E01               	movlw	high AESCmac@y
 32488  002492  20F4               	addwfc	prodh,w,c
 32489  002494  6EDA               	movwf	fsr2h,c
 32490  002496  51F2               	movf	AESCmac@i& (0+255),w,b
 32491  002498  0100               	movlb	0	; () banked
 32492  00249A  6FC0               	movwf	??_AESCmac& (0+255),b
 32493  00249C  6BC1               	clrf	(??_AESCmac+1)& (0+255),b
 32494  00249E  3BC0               	swapf	??_AESCmac& (0+255),f,b
 32495  0024A0  3BC1               	swapf	(??_AESCmac+1)& (0+255),f,b
 32496  0024A2  0EF0               	movlw	240
 32497  0024A4  17C1               	andwf	(??_AESCmac+1)& (0+255),f,b
 32498  0024A6  51C0               	movf	??_AESCmac& (0+255),w,b
 32499  0024A8  0B0F               	andlw	15
 32500  0024AA  13C1               	iorwf	(??_AESCmac+1)& (0+255),f,b
 32501  0024AC  0EF0               	movlw	240
 32502  0024AE  17C0               	andwf	??_AESCmac& (0+255),f,b
 32503  0024B0  0101               	movlb	1	; () banked
 32504  0024B2  51F1               	movf	AESCmac@j& (0+255),w,b
 32505  0024B4  0100               	movlb	0	; () banked
 32506  0024B6  27C0               	addwf	??_AESCmac& (0+255),f,b
 32507  0024B8  0E00               	movlw	0
 32508  0024BA  23C1               	addwfc	(??_AESCmac+1)& (0+255),f,b
 32509  0024BC  51C0               	movf	??_AESCmac& (0+255),w,b
 32510  0024BE  25BD               	addwf	AESCmac@input& (0+255),w,b
 32511  0024C0  6EE9               	movwf	fsr0l,c
 32512  0024C2  51C1               	movf	(??_AESCmac+1)& (0+255),w,b
 32513  0024C4  21BE               	addwfc	(AESCmac@input+1)& (0+255),w,b
 32514  0024C6  6EEA               	movwf	fsr0h,c
 32515  0024C8  50EF               	movf	indf0,w,c
 32516  0024CA  6FC2               	movwf	(??_AESCmac+2)& (0+255),b
 32517  0024CC  0101               	movlb	1	; () banked
 32518  0024CE  51F1               	movf	AESCmac@j& (0+255),w,b
 32519  0024D0  0D01               	mullw	1
 32520  0024D2  0EDD               	movlw	low AESCmac@x
 32521  0024D4  24F3               	addwf	prodl,w,c
 32522  0024D6  6EE9               	movwf	fsr0l,c
 32523  0024D8  0E01               	movlw	high AESCmac@x
 32524  0024DA  20F4               	addwfc	prodh,w,c
 32525  0024DC  6EEA               	movwf	fsr0h,c
 32526  0024DE  50EF               	movf	indf0,w,c
 32527  0024E0  0100               	movlb	0	; () banked
 32528  0024E2  19C2               	xorwf	(??_AESCmac+2)& (0+255),w,b
 32529  0024E4  6EDF               	movwf	indf2,c
 32530                           
 32531                           ; BSR set to: 0
 32532  0024E6  0101               	movlb	1	; () banked
 32533  0024E8  2BF1               	incf	AESCmac@j& (0+255),f,b
 32534  0024EA  D7C9               	goto	l9689
 32535  0024EC                     u9070:
 32536                           
 32537                           ; BSR set to: 1
 32538                           ;lorawan_aes_cmac.c: 108: }
 32539                           ;lorawan_aes_cmac.c: 109: memcpy(x, y, sizeof(y));
 32540                           
 32541                           ; BSR set to: 1
 32542  0024EC  0EDD               	movlw	low AESCmac@x
 32543  0024EE  0100               	movlb	0	; () banked
 32544  0024F0  6F60               	movwf	memcpy@d1& (0+255),b
 32545  0024F2  0E01               	movlw	high AESCmac@x
 32546  0024F4  6F61               	movwf	(memcpy@d1+1)& (0+255),b
 32547  0024F6  0ECD               	movlw	low AESCmac@y
 32548  0024F8  6F62               	movwf	memcpy@s1& (0+255),b
 32549  0024FA  0E01               	movlw	high AESCmac@y
 32550  0024FC  6F63               	movwf	(memcpy@s1+1)& (0+255),b
 32551  0024FE  0E00               	movlw	0
 32552  002500  6F65               	movwf	(memcpy@n+1)& (0+255),b
 32553  002502  0E10               	movlw	16
 32554  002504  6F64               	movwf	memcpy@n& (0+255),b
 32555  002506  EC37  F041         	call	_memcpy	;wreg free
 32556                           
 32557                           ;lorawan_aes_cmac.c: 110: AESEncodeLoRa(x,key);
 32558  00250A  0EDD               	movlw	low AESCmac@x
 32559  00250C  0100               	movlb	0	; () banked
 32560  00250E  6F7D               	movwf	AESEncodeLoRa@block& (0+255),b
 32561  002510  0E01               	movlw	high AESCmac@x
 32562  002512  6F7E               	movwf	(AESEncodeLoRa@block+1)& (0+255),b
 32563  002514  C0B9  F07F         	movff	AESCmac@key,AESEncodeLoRa@key
 32564  002518  C0BA  F080         	movff	AESCmac@key+1,AESEncodeLoRa@key+1
 32565  00251C  EC1E  F046         	call	_AESEncodeLoRa	;wreg free
 32566  002520  0101               	movlb	1	; () banked
 32567  002522  2BF2               	incf	AESCmac@i& (0+255),f,b
 32568  002524                     l28:
 32569                           
 32570                           ; BSR set to: 1
 32571                           
 32572                           ; BSR set to: 1
 32573  002524  0EFF               	movlw	255
 32574  002526  0100               	movlb	0	; () banked
 32575  002528  6FC0               	movwf	??_AESCmac& (0+255),b
 32576  00252A  0EFF               	movlw	255
 32577  00252C  6FC1               	movwf	(??_AESCmac+1)& (0+255),b
 32578  00252E  0101               	movlb	1	; () banked
 32579  002530  51F0               	movf	AESCmac@n& (0+255),w,b
 32580  002532  0100               	movlb	0	; () banked
 32581  002534  6FC2               	movwf	(??_AESCmac+2)& (0+255),b
 32582  002536  6BC3               	clrf	(??_AESCmac+3)& (0+255),b
 32583  002538  51C0               	movf	??_AESCmac& (0+255),w,b
 32584  00253A  27C2               	addwf	(??_AESCmac+2)& (0+255),f,b
 32585  00253C  51C1               	movf	(??_AESCmac+1)& (0+255),w,b
 32586  00253E  23C3               	addwfc	(??_AESCmac+3)& (0+255),f,b
 32587  002540  0101               	movlb	1	; () banked
 32588  002542  51F2               	movf	AESCmac@i& (0+255),w,b
 32589  002544  0100               	movlb	0	; () banked
 32590  002546  6FC4               	movwf	(??_AESCmac+4)& (0+255),b
 32591  002548  6BC5               	clrf	(??_AESCmac+5)& (0+255),b
 32592  00254A  51C2               	movf	(??_AESCmac+2)& (0+255),w,b
 32593  00254C  5DC4               	subwf	(??_AESCmac+4)& (0+255),w,b
 32594  00254E  51C5               	movf	(??_AESCmac+5)& (0+255),w,b
 32595  002550  0A80               	xorlw	128
 32596  002552  6FC6               	movwf	(??_AESCmac+6)& (0+255),b
 32597  002554  51C3               	movf	(??_AESCmac+3)& (0+255),w,b
 32598  002556  0A80               	xorlw	128
 32599  002558  59C6               	subwfb	(??_AESCmac+6)& (0+255),w,b
 32600  00255A  A0D8               	btfss	status,0,c
 32601  00255C  D78D               	goto	l29
 32602                           
 32603                           ; BSR set to: 0
 32604                           ;lorawan_aes_cmac.c: 111: }
 32605                           ;lorawan_aes_cmac.c: 113: for (i=0; i<sizeof(x); i++)
 32606                           
 32607                           ; BSR set to: 0
 32608  00255E  0E00               	movlw	0
 32609  002560  0101               	movlb	1	; () banked
 32610  002562  6FF2               	movwf	AESCmac@i& (0+255),b
 32611  002564                     l9709:
 32612                           
 32613                           ; BSR set to: 1
 32614  002564  0E0F               	movlw	15
 32615  002566  65F2               	cpfsgt	AESCmac@i& (0+255),b
 32616  002568  D001               	goto	l33
 32617  00256A  D023               	goto	u9100
 32618  00256C                     l33:
 32619                           
 32620                           ; BSR set to: 1
 32621                           ;lorawan_aes_cmac.c: 114: {
 32622                           ;lorawan_aes_cmac.c: 115: y[i] = x[i] ^ mLast[i];
 32623                           
 32624                           ; BSR set to: 1
 32625  00256C  51F2               	movf	AESCmac@i& (0+255),w,b
 32626  00256E  0D01               	mullw	1
 32627  002570  0ECD               	movlw	low AESCmac@y
 32628  002572  24F3               	addwf	prodl,w,c
 32629  002574  6ED9               	movwf	fsr2l,c
 32630  002576  0E01               	movlw	high AESCmac@y
 32631  002578  20F4               	addwfc	prodh,w,c
 32632  00257A  6EDA               	movwf	fsr2h,c
 32633  00257C  51F2               	movf	AESCmac@i& (0+255),w,b
 32634  00257E  0D01               	mullw	1
 32635  002580  0EAD               	movlw	low AESCmac@mLast
 32636  002582  24F3               	addwf	prodl,w,c
 32637  002584  6EE9               	movwf	fsr0l,c
 32638  002586  0E01               	movlw	high AESCmac@mLast
 32639  002588  20F4               	addwfc	prodh,w,c
 32640  00258A  6EEA               	movwf	fsr0h,c
 32641  00258C  50EF               	movf	indf0,w,c
 32642  00258E  0100               	movlb	0	; () banked
 32643  002590  6FC0               	movwf	??_AESCmac& (0+255),b
 32644  002592  0101               	movlb	1	; () banked
 32645  002594  51F2               	movf	AESCmac@i& (0+255),w,b
 32646  002596  0D01               	mullw	1
 32647  002598  0EDD               	movlw	low AESCmac@x
 32648  00259A  24F3               	addwf	prodl,w,c
 32649  00259C  6EE9               	movwf	fsr0l,c
 32650  00259E  0E01               	movlw	high AESCmac@x
 32651  0025A0  20F4               	addwfc	prodh,w,c
 32652  0025A2  6EEA               	movwf	fsr0h,c
 32653  0025A4  50EF               	movf	indf0,w,c
 32654  0025A6  0100               	movlb	0	; () banked
 32655  0025A8  19C0               	xorwf	??_AESCmac& (0+255),w,b
 32656  0025AA  6EDF               	movwf	indf2,c
 32657                           
 32658                           ; BSR set to: 0
 32659  0025AC  0101               	movlb	1	; () banked
 32660  0025AE  2BF2               	incf	AESCmac@i& (0+255),f,b
 32661  0025B0  D7D9               	goto	l9709
 32662  0025B2                     u9100:
 32663                           
 32664                           ; BSR set to: 1
 32665                           ;lorawan_aes_cmac.c: 116: }
 32666                           ;lorawan_aes_cmac.c: 118: AESEncodeLoRa(y, key);
 32667                           
 32668                           ; BSR set to: 1
 32669  0025B2  0ECD               	movlw	low AESCmac@y
 32670  0025B4  0100               	movlb	0	; () banked
 32671  0025B6  6F7D               	movwf	AESEncodeLoRa@block& (0+255),b
 32672  0025B8  0E01               	movlw	high AESCmac@y
 32673  0025BA  6F7E               	movwf	(AESEncodeLoRa@block+1)& (0+255),b
 32674  0025BC  C0B9  F07F         	movff	AESCmac@key,AESEncodeLoRa@key
 32675  0025C0  C0BA  F080         	movff	AESCmac@key+1,AESEncodeLoRa@key+1
 32676  0025C4  EC1E  F046         	call	_AESEncodeLoRa	;wreg free
 32677                           
 32678                           ;lorawan_aes_cmac.c: 120: memcpy(output, y, sizeof(y));
 32679  0025C8  C0BB  F060         	movff	AESCmac@output,memcpy@d1
 32680  0025CC  C0BC  F061         	movff	AESCmac@output+1,memcpy@d1+1
 32681  0025D0  0ECD               	movlw	low AESCmac@y
 32682  0025D2  0100               	movlb	0	; () banked
 32683  0025D4  6F62               	movwf	memcpy@s1& (0+255),b
 32684  0025D6  0E01               	movlw	high AESCmac@y
 32685  0025D8  6F63               	movwf	(memcpy@s1+1)& (0+255),b
 32686  0025DA  0E00               	movlw	0
 32687  0025DC  6F65               	movwf	(memcpy@n+1)& (0+255),b
 32688  0025DE  0E10               	movlw	16
 32689  0025E0  6F64               	movwf	memcpy@n& (0+255),b
 32690  0025E2  EC37  F041         	call	_memcpy	;wreg free
 32691  0025E6  0012               	return		;funcret
 32692  0025E8                     __end_of_AESCmac:
 32693                           	opt stack 0
 32694                           tosu	equ	0xFFF
 32695                           tosh	equ	0xFFE
 32696                           tosl	equ	0xFFD
 32697                           pclath	equ	0xFFA
 32698                           tblptru	equ	0xFF8
 32699                           tblptrh	equ	0xFF7
 32700                           tblptrl	equ	0xFF6
 32701                           tablat	equ	0xFF5
 32702                           prodh	equ	0xFF4
 32703                           prodl	equ	0xFF3
 32704                           intcon	equ	0xFF2
 32705                           intcon2	equ	0xFF1
 32706                           intcon3	equ	0xFF0
 32707                           indf0	equ	0xFEF
 32708                           postinc0	equ	0xFEE
 32709                           fsr0h	equ	0xFEA
 32710                           fsr0l	equ	0xFE9
 32711                           wreg	equ	0xFE8
 32712                           postinc1	equ	0xFE6
 32713                           postdec1	equ	0xFE5
 32714                           plusw1	equ	0xFE3
 32715                           fsr1h	equ	0xFE2
 32716                           fsr1l	equ	0xFE1
 32717                           indf2	equ	0xFDF
 32718                           postinc2	equ	0xFDE
 32719                           postdec2	equ	0xFDD
 32720                           plusw2	equ	0xFDB
 32721                           fsr2h	equ	0xFDA
 32722                           fsr2l	equ	0xFD9
 32723                           status	equ	0xFD8
 32724                           
 32725 ;; *************** function _GenerateSubkey *****************
 32726 ;; Defined at:
 32727 ;;		line 124 in file "mcc_generated_files/LoRaWAN/lorawan_aes_cmac.c"
 32728 ;; Parameters:    Size  Location     Type
 32729 ;;  key             2   49[BANK0 ] PTR unsigned char 
 32730 ;;		 -> loRa.activationParameters(105), loRa(245), 
 32731 ;;  k1              2   51[BANK0 ] PTR unsigned char 
 32732 ;;		 -> AESCmac@k1(16), 
 32733 ;;  k2              2   53[BANK0 ] PTR unsigned char 
 32734 ;;		 -> AESCmac@k2(16), 
 32735 ;; Auto vars:     Size  Location     Type
 32736 ;;  l              16   72[BANK0 ] unsigned char [16]
 32737 ;;  const_Rb       16   56[BANK0 ] unsigned char [16]
 32738 ;;  i               1   88[BANK0 ] unsigned char 
 32739 ;; Return value:  Size  Location     Type
 32740 ;;                  1    wreg      void 
 32741 ;; Registers used:
 32742 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 32743 ;; Tracked objects:
 32744 ;;		On entry : 0/0
 32745 ;;		On exit  : 0/0
 32746 ;;		Unchanged: 0/0
 32747 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 32748 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 32749 ;;      Locals:         0      33       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 32750 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 32751 ;;      Totals:         0      40       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 32752 ;;Total ram usage:       40 bytes
 32753 ;; Hardware stack levels used:    1
 32754 ;; Hardware stack levels required when called:   10
 32755 ;; This function calls:
 32756 ;;		_AESEncodeLoRa
 32757 ;;		_FillSubKey
 32758 ;;		_memset
 32759 ;; This function is called by:
 32760 ;;		_AESCmac
 32761 ;; This function uses a non-reentrant model
 32762 ;;
 32763                           
 32764                           	psect	text153
 32765  005A88                     __ptext153:
 32766                           	opt stack 0
 32767  005A88                     _GenerateSubkey:
 32768                           	opt stack 17
 32769                           
 32770                           ;lorawan_aes_cmac.c: 126: uint8_t i = 0;
 32771                           
 32772                           ;incstack = 0
 32773  005A88  0E00               	movlw	0
 32774  005A8A  0100               	movlb	0	; () banked
 32775  005A8C  6FB8               	movwf	GenerateSubkey@i& (0+255),b
 32776                           
 32777                           ; BSR set to: 0
 32778                           ;lorawan_aes_cmac.c: 127: uint8_t l[16];
 32779                           ;lorawan_aes_cmac.c: 128: uint8_t const_Rb[16] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x
      +                          00, 0x00,
 32780                           ;lorawan_aes_cmac.c: 129: 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x87};
 32781  005A8E  EE23  F0B0         	lfsr	2,GenerateSubkey@F7103
 32782  005A92  EE00  F098         	lfsr	0,GenerateSubkey@const_Rb
 32783  005A96  0E0F               	movlw	15
 32784  005A98                     u8441:
 32785  005A98  CFDB FFEB          	movff	plusw2,plusw0
 32786  005A9C  06E8               	decf	wreg,f,c
 32787  005A9E  E2FC               	bc	u8441
 32788                           
 32789                           ; BSR set to: 0
 32790                           ;lorawan_aes_cmac.c: 132: memset(l, 0, sizeof(l));
 32791  005AA0  0EA8               	movlw	low GenerateSubkey@l
 32792  005AA2  6F60               	movwf	memset@p1& (0+255),b
 32793  005AA4  0E00               	movlw	high GenerateSubkey@l
 32794  005AA6  6F61               	movwf	(memset@p1+1)& (0+255),b
 32795  005AA8  0E00               	movlw	0
 32796  005AAA  6F63               	movwf	(memset@c+1)& (0+255),b
 32797  005AAC  0E00               	movlw	0
 32798  005AAE  6F62               	movwf	memset@c& (0+255),b
 32799  005AB0  0E00               	movlw	0
 32800  005AB2  6F65               	movwf	(memset@n+1)& (0+255),b
 32801  005AB4  0E10               	movlw	16
 32802  005AB6  6F64               	movwf	memset@n& (0+255),b
 32803  005AB8  ECCC  F046         	call	_memset	;wreg free
 32804                           
 32805                           ;lorawan_aes_cmac.c: 134: AESEncodeLoRa(l, key);
 32806  005ABC  0EA8               	movlw	low GenerateSubkey@l
 32807  005ABE  0100               	movlb	0	; () banked
 32808  005AC0  6F7D               	movwf	AESEncodeLoRa@block& (0+255),b
 32809  005AC2  0E00               	movlw	high GenerateSubkey@l
 32810  005AC4  6F7E               	movwf	(AESEncodeLoRa@block+1)& (0+255),b
 32811  005AC6  C091  F07F         	movff	GenerateSubkey@key,AESEncodeLoRa@key
 32812  005ACA  C092  F080         	movff	GenerateSubkey@key+1,AESEncodeLoRa@key+1
 32813  005ACE  EC1E  F046         	call	_AESEncodeLoRa	;wreg free
 32814                           
 32815                           ;lorawan_aes_cmac.c: 137: if ( (l[0] & 0x80) == 0x00 )
 32816  005AD2  0100               	movlb	0	; () banked
 32817  005AD4  BFA8               	btfsc	GenerateSubkey@l& (0+255),7,b
 32818  005AD6  D00D               	goto	l40
 32819                           
 32820                           ; BSR set to: 0
 32821                           ;lorawan_aes_cmac.c: 138: {
 32822                           ;lorawan_aes_cmac.c: 139: FillSubKey( l, k1, (sizeof(l) ) );
 32823  005AD8  0EA8               	movlw	low GenerateSubkey@l
 32824  005ADA  6F60               	movwf	FillSubKey@source& (0+255),b
 32825  005ADC  0E00               	movlw	high GenerateSubkey@l
 32826  005ADE  6F61               	movwf	(FillSubKey@source+1)& (0+255),b
 32827  005AE0  C093  F062         	movff	GenerateSubkey@k1,FillSubKey@key
 32828  005AE4  C094  F063         	movff	GenerateSubkey@k1+1,FillSubKey@key+1
 32829  005AE8  0E10               	movlw	16
 32830  005AEA  6F64               	movwf	FillSubKey@size& (0+255),b
 32831  005AEC  ECA5  F040         	call	_FillSubKey	;wreg free
 32832                           
 32833                           ;lorawan_aes_cmac.c: 140: }
 32834  005AF0  D02A               	goto	u8470
 32835  005AF2                     l40:
 32836                           
 32837                           ;lorawan_aes_cmac.c: 141: else
 32838                           ;lorawan_aes_cmac.c: 142: {
 32839                           ;lorawan_aes_cmac.c: 143: FillSubKey( l, k1, (sizeof(l) ) );
 32840  005AF2  0EA8               	movlw	low GenerateSubkey@l
 32841  005AF4  0100               	movlb	0	; () banked
 32842  005AF6  6F60               	movwf	FillSubKey@source& (0+255),b
 32843  005AF8  0E00               	movlw	high GenerateSubkey@l
 32844  005AFA  6F61               	movwf	(FillSubKey@source+1)& (0+255),b
 32845  005AFC  C093  F062         	movff	GenerateSubkey@k1,FillSubKey@key
 32846  005B00  C094  F063         	movff	GenerateSubkey@k1+1,FillSubKey@key+1
 32847  005B04  0E10               	movlw	16
 32848  005B06  6F64               	movwf	FillSubKey@size& (0+255),b
 32849  005B08  ECA5  F040         	call	_FillSubKey	;wreg free
 32850                           
 32851                           ;lorawan_aes_cmac.c: 145: for (i=0; i<sizeof(l); i++)
 32852  005B0C  0E00               	movlw	0
 32853  005B0E  0100               	movlb	0	; () banked
 32854  005B10  6FB8               	movwf	GenerateSubkey@i& (0+255),b
 32855  005B12                     l9263:
 32856                           
 32857                           ; BSR set to: 0
 32858  005B12  0E0F               	movlw	15
 32859  005B14  65B8               	cpfsgt	GenerateSubkey@i& (0+255),b
 32860  005B16  D001               	goto	l42
 32861  005B18  D016               	goto	u8470
 32862  005B1A                     l42:
 32863                           
 32864                           ; BSR set to: 0
 32865                           ;lorawan_aes_cmac.c: 146: {
 32866                           ;lorawan_aes_cmac.c: 147: k1[i] ^= const_Rb[i];
 32867                           
 32868                           ; BSR set to: 0
 32869  005B1A  51B8               	movf	GenerateSubkey@i& (0+255),w,b
 32870  005B1C  0D01               	mullw	1
 32871  005B1E  0E98               	movlw	low GenerateSubkey@const_Rb
 32872  005B20  24F3               	addwf	prodl,w,c
 32873  005B22  6ED9               	movwf	fsr2l,c
 32874  005B24  0E00               	movlw	high GenerateSubkey@const_Rb
 32875  005B26  20F4               	addwfc	prodh,w,c
 32876  005B28  6EDA               	movwf	fsr2h,c
 32877  005B2A  50DF               	movf	indf2,w,c
 32878  005B2C  6F97               	movwf	??_GenerateSubkey& (0+255),b
 32879  005B2E  51B8               	movf	GenerateSubkey@i& (0+255),w,b
 32880  005B30  0D01               	mullw	1
 32881  005B32  50F3               	movf	prodl,w,c
 32882  005B34  2593               	addwf	GenerateSubkey@k1& (0+255),w,b
 32883  005B36  6ED9               	movwf	fsr2l,c
 32884  005B38  50F4               	movf	prodh,w,c
 32885  005B3A  2194               	addwfc	(GenerateSubkey@k1+1)& (0+255),w,b
 32886  005B3C  6EDA               	movwf	fsr2h,c
 32887  005B3E  5197               	movf	??_GenerateSubkey& (0+255),w,b
 32888  005B40  1ADF               	xorwf	indf2,f,c
 32889                           
 32890                           ; BSR set to: 0
 32891  005B42  2BB8               	incf	GenerateSubkey@i& (0+255),f,b
 32892  005B44  D7E6               	goto	l9263
 32893  005B46                     u8470:
 32894                           
 32895                           ;lorawan_aes_cmac.c: 148: }
 32896                           ;lorawan_aes_cmac.c: 149: }
 32897                           ;lorawan_aes_cmac.c: 152: if ( (k1[0] & 0x80) == 0x00 )
 32898                           
 32899                           ; BSR set to: 0
 32900                           
 32901                           ; BSR set to: 0
 32902  005B46  C093  FFD9         	movff	GenerateSubkey@k1,fsr2l
 32903  005B4A  C094  FFDA         	movff	GenerateSubkey@k1+1,fsr2h
 32904  005B4E  0100               	movlb	0	; () banked
 32905  005B50  BEDF               	btfsc	indf2,7,c
 32906  005B52  D00D               	goto	l44
 32907                           
 32908                           ; BSR set to: 0
 32909                           ;lorawan_aes_cmac.c: 153: {
 32910                           ;lorawan_aes_cmac.c: 154: FillSubKey( k1, k2, (sizeof(l)) );
 32911  005B54  C093  F060         	movff	GenerateSubkey@k1,FillSubKey@source
 32912  005B58  C094  F061         	movff	GenerateSubkey@k1+1,FillSubKey@source+1
 32913  005B5C  C095  F062         	movff	GenerateSubkey@k2,FillSubKey@key
 32914  005B60  C096  F063         	movff	GenerateSubkey@k2+1,FillSubKey@key+1
 32915  005B64  0E10               	movlw	16
 32916  005B66  6F64               	movwf	FillSubKey@size& (0+255),b
 32917  005B68  ECA5  F040         	call	_FillSubKey	;wreg free
 32918                           
 32919                           ;lorawan_aes_cmac.c: 155: }
 32920  005B6C  0012               	return	
 32921  005B6E                     l44:
 32922                           
 32923                           ;lorawan_aes_cmac.c: 156: else
 32924                           ;lorawan_aes_cmac.c: 157: {
 32925                           ;lorawan_aes_cmac.c: 158: FillSubKey( k1, k2, (sizeof(l) ) );
 32926  005B6E  C093  F060         	movff	GenerateSubkey@k1,FillSubKey@source
 32927  005B72  C094  F061         	movff	GenerateSubkey@k1+1,FillSubKey@source+1
 32928  005B76  C095  F062         	movff	GenerateSubkey@k2,FillSubKey@key
 32929  005B7A  C096  F063         	movff	GenerateSubkey@k2+1,FillSubKey@key+1
 32930  005B7E  0E10               	movlw	16
 32931  005B80  0100               	movlb	0	; () banked
 32932  005B82  6F64               	movwf	FillSubKey@size& (0+255),b
 32933  005B84  ECA5  F040         	call	_FillSubKey	;wreg free
 32934                           
 32935                           ;lorawan_aes_cmac.c: 160: for (i=0; i<sizeof(l); i++)
 32936  005B88  0E00               	movlw	0
 32937  005B8A  0100               	movlb	0	; () banked
 32938  005B8C  6FB8               	movwf	GenerateSubkey@i& (0+255),b
 32939  005B8E                     l9281:
 32940                           
 32941                           ; BSR set to: 0
 32942  005B8E  0E0F               	movlw	15
 32943  005B90  65B8               	cpfsgt	GenerateSubkey@i& (0+255),b
 32944  005B92  D001               	goto	l46
 32945  005B94  0012               	return	
 32946  005B96                     l46:
 32947                           
 32948                           ; BSR set to: 0
 32949                           ;lorawan_aes_cmac.c: 161: {
 32950                           ;lorawan_aes_cmac.c: 162: k2[i] = k2[i] ^ const_Rb[i];
 32951                           
 32952                           ; BSR set to: 0
 32953  005B96  51B8               	movf	GenerateSubkey@i& (0+255),w,b
 32954  005B98  0D01               	mullw	1
 32955  005B9A  50F3               	movf	prodl,w,c
 32956  005B9C  2595               	addwf	GenerateSubkey@k2& (0+255),w,b
 32957  005B9E  6ED9               	movwf	fsr2l,c
 32958  005BA0  50F4               	movf	prodh,w,c
 32959  005BA2  2196               	addwfc	(GenerateSubkey@k2+1)& (0+255),w,b
 32960  005BA4  6EDA               	movwf	fsr2h,c
 32961  005BA6  51B8               	movf	GenerateSubkey@i& (0+255),w,b
 32962  005BA8  0D01               	mullw	1
 32963  005BAA  0E98               	movlw	low GenerateSubkey@const_Rb
 32964  005BAC  24F3               	addwf	prodl,w,c
 32965  005BAE  6EE9               	movwf	fsr0l,c
 32966  005BB0  0E00               	movlw	high GenerateSubkey@const_Rb
 32967  005BB2  20F4               	addwfc	prodh,w,c
 32968  005BB4  6EEA               	movwf	fsr0h,c
 32969  005BB6  50EF               	movf	indf0,w,c
 32970  005BB8  6F97               	movwf	??_GenerateSubkey& (0+255),b
 32971  005BBA  51B8               	movf	GenerateSubkey@i& (0+255),w,b
 32972  005BBC  0D01               	mullw	1
 32973  005BBE  50F3               	movf	prodl,w,c
 32974  005BC0  2595               	addwf	GenerateSubkey@k2& (0+255),w,b
 32975  005BC2  6EE9               	movwf	fsr0l,c
 32976  005BC4  50F4               	movf	prodh,w,c
 32977  005BC6  2196               	addwfc	(GenerateSubkey@k2+1)& (0+255),w,b
 32978  005BC8  6EEA               	movwf	fsr0h,c
 32979  005BCA  50EF               	movf	indf0,w,c
 32980  005BCC  1997               	xorwf	??_GenerateSubkey& (0+255),w,b
 32981  005BCE  6EDF               	movwf	indf2,c
 32982                           
 32983                           ; BSR set to: 0
 32984  005BD0  2BB8               	incf	GenerateSubkey@i& (0+255),f,b
 32985  005BD2  D7DD               	goto	l9281
 32986  005BD4                     __end_of_GenerateSubkey:
 32987                           	opt stack 0
 32988                           tosu	equ	0xFFF
 32989                           tosh	equ	0xFFE
 32990                           tosl	equ	0xFFD
 32991                           pclath	equ	0xFFA
 32992                           tblptru	equ	0xFF8
 32993                           tblptrh	equ	0xFF7
 32994                           tblptrl	equ	0xFF6
 32995                           tablat	equ	0xFF5
 32996                           prodh	equ	0xFF4
 32997                           prodl	equ	0xFF3
 32998                           intcon	equ	0xFF2
 32999                           intcon2	equ	0xFF1
 33000                           intcon3	equ	0xFF0
 33001                           indf0	equ	0xFEF
 33002                           postinc0	equ	0xFEE
 33003                           plusw0	equ	0xFEB
 33004                           fsr0h	equ	0xFEA
 33005                           fsr0l	equ	0xFE9
 33006                           wreg	equ	0xFE8
 33007                           postinc1	equ	0xFE6
 33008                           postdec1	equ	0xFE5
 33009                           plusw1	equ	0xFE3
 33010                           fsr1h	equ	0xFE2
 33011                           fsr1l	equ	0xFE1
 33012                           indf2	equ	0xFDF
 33013                           postinc2	equ	0xFDE
 33014                           postdec2	equ	0xFDD
 33015                           plusw2	equ	0xFDB
 33016                           fsr2h	equ	0xFDA
 33017                           fsr2l	equ	0xFD9
 33018                           status	equ	0xFD8
 33019                           
 33020 ;; *************** function _FillSubKey *****************
 33021 ;; Defined at:
 33022 ;;		line 167 in file "mcc_generated_files/LoRaWAN/lorawan_aes_cmac.c"
 33023 ;; Parameters:    Size  Location     Type
 33024 ;;  source          2    0[BANK0 ] PTR unsigned char 
 33025 ;;		 -> GenerateSubkey@l(16), AESCmac@k1(16), 
 33026 ;;  key             2    2[BANK0 ] PTR unsigned char 
 33027 ;;		 -> AESCmac@k2(16), AESCmac@k1(16), 
 33028 ;;  size            1    4[BANK0 ] unsigned char 
 33029 ;; Auto vars:     Size  Location     Type
 33030 ;;  i               1    7[BANK0 ] unsigned char 
 33031 ;;  carry           1    6[BANK0 ] unsigned char 
 33032 ;; Return value:  Size  Location     Type
 33033 ;;                  1    wreg      void 
 33034 ;; Registers used:
 33035 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 33036 ;; Tracked objects:
 33037 ;;		On entry : 0/0
 33038 ;;		On exit  : 0/0
 33039 ;;		Unchanged: 0/0
 33040 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 33041 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33042 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33043 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33044 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33045 ;;Total ram usage:        8 bytes
 33046 ;; Hardware stack levels used:    1
 33047 ;; Hardware stack levels required when called:    7
 33048 ;; This function calls:
 33049 ;;		Nothing
 33050 ;; This function is called by:
 33051 ;;		_GenerateSubkey
 33052 ;; This function uses a non-reentrant model
 33053 ;;
 33054                           
 33055                           	psect	text154
 33056  00814A                     __ptext154:
 33057                           	opt stack 0
 33058  00814A                     _FillSubKey:
 33059                           	opt stack 19
 33060                           
 33061                           ;lorawan_aes_cmac.c: 169: uint8_t i = 0;
 33062                           
 33063                           ;incstack = 0
 33064  00814A  0E00               	movlw	0
 33065  00814C  0100               	movlb	0	; () banked
 33066  00814E  6F67               	movwf	FillSubKey@i& (0+255),b
 33067                           
 33068                           ;lorawan_aes_cmac.c: 170: uint8_t carry = 0;
 33069  008150  0E00               	movlw	0
 33070  008152  6F66               	movwf	FillSubKey@carry& (0+255),b
 33071                           
 33072                           ; BSR set to: 0
 33073                           ;lorawan_aes_cmac.c: 172: i=size;
 33074  008154  C064  F067         	movff	FillSubKey@size,FillSubKey@i
 33075                           
 33076                           ;lorawan_aes_cmac.c: 174: while(i--)
 33077  008158  D024               	goto	l51
 33078  00815A                     
 33079                           ; BSR set to: 0
 33080                           ;lorawan_aes_cmac.c: 175: {
 33081                           ;lorawan_aes_cmac.c: 176: key[i] = (source[i] << (1)) | carry;
 33082                           
 33083                           ; BSR set to: 0
 33084  00815A  5167               	movf	FillSubKey@i& (0+255),w,b
 33085  00815C  0D01               	mullw	1
 33086  00815E  50F3               	movf	prodl,w,c
 33087  008160  2562               	addwf	FillSubKey@key& (0+255),w,b
 33088  008162  6ED9               	movwf	fsr2l,c
 33089  008164  50F4               	movf	prodh,w,c
 33090  008166  2163               	addwfc	(FillSubKey@key+1)& (0+255),w,b
 33091  008168  6EDA               	movwf	fsr2h,c
 33092  00816A  5167               	movf	FillSubKey@i& (0+255),w,b
 33093  00816C  0D01               	mullw	1
 33094  00816E  50F3               	movf	prodl,w,c
 33095  008170  2560               	addwf	FillSubKey@source& (0+255),w,b
 33096  008172  6EE9               	movwf	fsr0l,c
 33097  008174  50F4               	movf	prodh,w,c
 33098  008176  2161               	addwfc	(FillSubKey@source+1)& (0+255),w,b
 33099  008178  6EEA               	movwf	fsr0h,c
 33100  00817A  50EF               	movf	indf0,w,c
 33101  00817C  6F65               	movwf	??_FillSubKey& (0+255),b
 33102  00817E  90D8               	bcf	status,0,c
 33103  008180  3565               	rlcf	??_FillSubKey& (0+255),w,b
 33104  008182  1166               	iorwf	FillSubKey@carry& (0+255),w,b
 33105  008184  6EDF               	movwf	indf2,c
 33106                           
 33107                           ; BSR set to: 0
 33108                           ;lorawan_aes_cmac.c: 177: carry = !!(source[i] & 0x80);
 33109  008186  5167               	movf	FillSubKey@i& (0+255),w,b
 33110  008188  0D01               	mullw	1
 33111  00818A  50F3               	movf	prodl,w,c
 33112  00818C  2560               	addwf	FillSubKey@source& (0+255),w,b
 33113  00818E  6ED9               	movwf	fsr2l,c
 33114  008190  50F4               	movf	prodh,w,c
 33115  008192  2161               	addwfc	(FillSubKey@source+1)& (0+255),w,b
 33116  008194  6EDA               	movwf	fsr2h,c
 33117  008196  AEDF               	btfss	indf2,7,c
 33118  008198  D002               	goto	u7950
 33119  00819A  0E01               	movlw	1
 33120  00819C  D001               	goto	u7960
 33121  00819E                     u7950:
 33122  00819E  0E00               	movlw	0
 33123  0081A0                     u7960:
 33124  0081A0  6F66               	movwf	FillSubKey@carry& (0+255),b
 33125  0081A2                     l51:
 33126                           
 33127                           ; BSR set to: 0
 33128                           
 33129                           ; BSR set to: 0
 33130  0081A2  0767               	decf	FillSubKey@i& (0+255),f,b
 33131  0081A4  2967               	incf	FillSubKey@i& (0+255),w,b
 33132  0081A6  B4D8               	btfsc	status,2,c
 33133  0081A8  0012               	return	
 33134  0081AA  D7D7               	goto	l52
 33135  0081AC                     __end_of_FillSubKey:
 33136                           	opt stack 0
 33137                           tosu	equ	0xFFF
 33138                           tosh	equ	0xFFE
 33139                           tosl	equ	0xFFD
 33140                           pclath	equ	0xFFA
 33141                           tblptru	equ	0xFF8
 33142                           tblptrh	equ	0xFF7
 33143                           tblptrl	equ	0xFF6
 33144                           tablat	equ	0xFF5
 33145                           prodh	equ	0xFF4
 33146                           prodl	equ	0xFF3
 33147                           intcon	equ	0xFF2
 33148                           intcon2	equ	0xFF1
 33149                           intcon3	equ	0xFF0
 33150                           indf0	equ	0xFEF
 33151                           postinc0	equ	0xFEE
 33152                           plusw0	equ	0xFEB
 33153                           fsr0h	equ	0xFEA
 33154                           fsr0l	equ	0xFE9
 33155                           wreg	equ	0xFE8
 33156                           postinc1	equ	0xFE6
 33157                           postdec1	equ	0xFE5
 33158                           plusw1	equ	0xFE3
 33159                           fsr1h	equ	0xFE2
 33160                           fsr1l	equ	0xFE1
 33161                           indf2	equ	0xFDF
 33162                           postinc2	equ	0xFDE
 33163                           postdec2	equ	0xFDD
 33164                           plusw2	equ	0xFDB
 33165                           fsr2h	equ	0xFDA
 33166                           fsr2l	equ	0xFD9
 33167                           status	equ	0xFD8
 33168                           
 33169 ;; *************** function _AESEncodeLoRa *****************
 33170 ;; Defined at:
 33171 ;;		line 34 in file "mcc_generated_files/LoRaWAN/lorawan_aes.c"
 33172 ;; Parameters:    Size  Location     Type
 33173 ;;  block           2   29[BANK0 ] PTR unsigned char 
 33174 ;;		 -> aesBuffer(16), radioBuffer(271), LORAWAN_RxDone@hdr(2), loRa.activationParameters(105), 
 33175 ;;		 -> loRa(245), GenerateSubkey@l(16), AESCmac@y(16), AESCmac@x(16), 
 33176 ;;  key             2   31[BANK0 ] PTR unsigned char 
 33177 ;;		 -> loRa.activationParameters(105), loRa(245), 
 33178 ;; Auto vars:     Size  Location     Type
 33179 ;;  useKey         16   33[BANK0 ] unsigned char [16]
 33180 ;; Return value:  Size  Location     Type
 33181 ;;                  1    wreg      void 
 33182 ;; Registers used:
 33183 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 33184 ;; Tracked objects:
 33185 ;;		On entry : 0/0
 33186 ;;		On exit  : 0/0
 33187 ;;		Unchanged: 0/0
 33188 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 33189 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33190 ;;      Locals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33191 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33192 ;;      Totals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33193 ;;Total ram usage:       20 bytes
 33194 ;; Hardware stack levels used:    1
 33195 ;; Hardware stack levels required when called:    9
 33196 ;; This function calls:
 33197 ;;		_AESEncode
 33198 ;;		_memcpy
 33199 ;; This function is called by:
 33200 ;;		_AESCmac
 33201 ;;		_GenerateSubkey
 33202 ;;		_LORAWAN_RxDone
 33203 ;;		_ComputeSessionKeys
 33204 ;;		_EncryptFRMPayload
 33205 ;; This function uses a non-reentrant model
 33206 ;;
 33207                           
 33208                           	psect	text155
 33209  008C3C                     __ptext155:
 33210                           	opt stack 0
 33211  008C3C                     _AESEncodeLoRa:
 33212                           	opt stack 18
 33213                           
 33214                           ;lorawan_aes.c: 36: uint8_t useKey[16];
 33215                           ;lorawan_aes.c: 37: memcpy(useKey, key, sizeof(useKey));
 33216                           
 33217                           ; BSR set to: 0
 33218                           ;incstack = 0
 33219  008C3C  0E81               	movlw	low AESEncodeLoRa@useKey
 33220  008C3E  0100               	movlb	0	; () banked
 33221  008C40  6F60               	movwf	memcpy@d1& (0+255),b
 33222  008C42  0E00               	movlw	high AESEncodeLoRa@useKey
 33223  008C44  6F61               	movwf	(memcpy@d1+1)& (0+255),b
 33224  008C46  C07F  F062         	movff	AESEncodeLoRa@key,memcpy@s1
 33225  008C4A  C080  F063         	movff	AESEncodeLoRa@key+1,memcpy@s1+1
 33226  008C4E  0E00               	movlw	0
 33227  008C50  6F65               	movwf	(memcpy@n+1)& (0+255),b
 33228  008C52  0E10               	movlw	16
 33229  008C54  6F64               	movwf	memcpy@n& (0+255),b
 33230  008C56  EC37  F041         	call	_memcpy	;wreg free
 33231                           
 33232                           ;lorawan_aes.c: 38: AESEncode(block, useKey);
 33233  008C5A  C07D  F066         	movff	AESEncodeLoRa@block,AESEncode@block
 33234  008C5E  C07E  F067         	movff	AESEncodeLoRa@block+1,AESEncode@block+1
 33235  008C62  0E81               	movlw	low AESEncodeLoRa@useKey
 33236  008C64  0100               	movlb	0	; () banked
 33237  008C66  6F68               	movwf	AESEncode@key& (0+255),b
 33238  008C68  0E00               	movlw	high AESEncodeLoRa@useKey
 33239  008C6A  6F69               	movwf	(AESEncode@key+1)& (0+255),b
 33240  008C6C  ECA6  F014         	call	_AESEncode	;wreg free
 33241  008C70  0012               	return		;funcret
 33242  008C72                     __end_of_AESEncodeLoRa:
 33243                           	opt stack 0
 33244                           tosu	equ	0xFFF
 33245                           tosh	equ	0xFFE
 33246                           tosl	equ	0xFFD
 33247                           pclath	equ	0xFFA
 33248                           tblptru	equ	0xFF8
 33249                           tblptrh	equ	0xFF7
 33250                           tblptrl	equ	0xFF6
 33251                           tablat	equ	0xFF5
 33252                           prodh	equ	0xFF4
 33253                           prodl	equ	0xFF3
 33254                           intcon	equ	0xFF2
 33255                           intcon2	equ	0xFF1
 33256                           intcon3	equ	0xFF0
 33257                           indf0	equ	0xFEF
 33258                           postinc0	equ	0xFEE
 33259                           plusw0	equ	0xFEB
 33260                           fsr0h	equ	0xFEA
 33261                           fsr0l	equ	0xFE9
 33262                           wreg	equ	0xFE8
 33263                           postinc1	equ	0xFE6
 33264                           postdec1	equ	0xFE5
 33265                           plusw1	equ	0xFE3
 33266                           fsr1h	equ	0xFE2
 33267                           fsr1l	equ	0xFE1
 33268                           indf2	equ	0xFDF
 33269                           postinc2	equ	0xFDE
 33270                           postdec2	equ	0xFDD
 33271                           plusw2	equ	0xFDB
 33272                           fsr2h	equ	0xFDA
 33273                           fsr2l	equ	0xFD9
 33274                           status	equ	0xFD8
 33275                           
 33276 ;; *************** function _AESEncode *****************
 33277 ;; Defined at:
 33278 ;;		line 248 in file "mcc_generated_files/LoRaWAN/AES.c"
 33279 ;; Parameters:    Size  Location     Type
 33280 ;;  block           2    6[BANK0 ] PTR unsigned char 
 33281 ;;		 -> aesBuffer(16), radioBuffer(271), LORAWAN_RxDone@hdr(2), loRa.activationParameters(105), 
 33282 ;;		 -> loRa(245), GenerateSubkey@l(16), AESCmac@y(16), AESCmac@x(16), 
 33283 ;;  key             2    8[BANK0 ] PTR unsigned char 
 33284 ;;		 -> AESEncodeLoRa@useKey(16), 
 33285 ;; Auto vars:     Size  Location     Type
 33286 ;;  aux3            1   27[BANK0 ] unsigned char 
 33287 ;;  aux1            1   26[BANK0 ] unsigned char 
 33288 ;;  aux2            1   25[BANK0 ] unsigned char 
 33289 ;;  aux             1   24[BANK0 ] unsigned char 
 33290 ;;  i               1   28[BANK0 ] unsigned char 
 33291 ;;  temp            1    0        unsigned char 
 33292 ;; Return value:  Size  Location     Type
 33293 ;;                  1    wreg      void 
 33294 ;; Registers used:
 33295 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 33296 ;; Tracked objects:
 33297 ;;		On entry : 0/0
 33298 ;;		On exit  : 0/0
 33299 ;;		Unchanged: 0/0
 33300 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 33301 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33302 ;;      Locals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33303 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33304 ;;      Totals:         0      23       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33305 ;;Total ram usage:       23 bytes
 33306 ;; Hardware stack levels used:    1
 33307 ;; Hardware stack levels required when called:    8
 33308 ;; This function calls:
 33309 ;;		_EncKeySchedule
 33310 ;;		_EncodeShiftRow
 33311 ;; This function is called by:
 33312 ;;		_AESEncodeLoRa
 33313 ;; This function uses a non-reentrant model
 33314 ;;
 33315                           
 33316                           	psect	text156
 33317  00294C                     __ptext156:
 33318                           	opt stack 0
 33319  00294C                     _AESEncode:
 33320                           	opt stack 18
 33321                           
 33322                           ;AES.c: 250: unsigned char i;
 33323                           ;AES.c: 251: unsigned char temp;
 33324                           ;AES.c: 254: _roundCounter = 10;
 33325                           
 33326                           ;incstack = 0
 33327  00294C  0E0A               	movlw	10
 33328  00294E  0101               	movlb	1	; () banked
 33329  002950  6F51               	movwf	__roundCounter& (0+255),b
 33330                           
 33331                           ;AES.c: 256: _rcon = 0x01;
 33332  002952  0E01               	movlw	1
 33333  002954  6E52               	movwf	__rcon,c
 33334                           
 33335                           ;AES.c: 259: for(i=0;i<16;i++)
 33336  002956  0E00               	movlw	0
 33337  002958  0100               	movlb	0	; () banked
 33338  00295A  6F7C               	movwf	AESEncode@i& (0+255),b
 33339  00295C                     l8785:
 33340                           
 33341                           ; BSR set to: 0
 33342  00295C  0E0F               	movlw	15
 33343  00295E  657C               	cpfsgt	AESEncode@i& (0+255),b
 33344  002960  D001               	goto	l1612
 33345  002962  D016               	goto	u7720
 33346  002964                     l1612:
 33347                           
 33348                           ; BSR set to: 0
 33349                           ;AES.c: 260: {
 33350                           ;AES.c: 261: block[i] ^= key[i];
 33351                           
 33352                           ; BSR set to: 0
 33353  002964  517C               	movf	AESEncode@i& (0+255),w,b
 33354  002966  0D01               	mullw	1
 33355  002968  50F3               	movf	prodl,w,c
 33356  00296A  2568               	addwf	AESEncode@key& (0+255),w,b
 33357  00296C  6ED9               	movwf	fsr2l,c
 33358  00296E  50F4               	movf	prodh,w,c
 33359  002970  2169               	addwfc	(AESEncode@key+1)& (0+255),w,b
 33360  002972  6EDA               	movwf	fsr2h,c
 33361  002974  50DF               	movf	indf2,w,c
 33362  002976  6F6A               	movwf	??_AESEncode& (0+255),b
 33363  002978  517C               	movf	AESEncode@i& (0+255),w,b
 33364  00297A  0D01               	mullw	1
 33365  00297C  50F3               	movf	prodl,w,c
 33366  00297E  2566               	addwf	AESEncode@block& (0+255),w,b
 33367  002980  6ED9               	movwf	fsr2l,c
 33368  002982  50F4               	movf	prodh,w,c
 33369  002984  2167               	addwfc	(AESEncode@block+1)& (0+255),w,b
 33370  002986  6EDA               	movwf	fsr2h,c
 33371  002988  516A               	movf	??_AESEncode& (0+255),w,b
 33372  00298A  1ADF               	xorwf	indf2,f,c
 33373                           
 33374                           ; BSR set to: 0
 33375  00298C  2B7C               	incf	AESEncode@i& (0+255),f,b
 33376  00298E  D7E6               	goto	l8785
 33377  002990                     u7720:
 33378                           
 33379                           ;AES.c: 265: {
 33380                           ;AES.c: 268: for(i=0;i<16;i++)
 33381                           
 33382                           ; BSR set to: 0
 33383                           
 33384                           ;AES.c: 262: }
 33385                           ;AES.c: 264: do
 33386                           
 33387                           ; BSR set to: 0
 33388  002990  0E00               	movlw	0
 33389  002992  0100               	movlb	0	; () banked
 33390  002994  6F7C               	movwf	AESEncode@i& (0+255),b
 33391  002996                     l8797:
 33392                           
 33393                           ; BSR set to: 0
 33394  002996  0E0F               	movlw	15
 33395  002998  657C               	cpfsgt	AESEncode@i& (0+255),b
 33396  00299A  D001               	goto	l1615
 33397  00299C  D022               	goto	u7740
 33398  00299E                     l1615:
 33399                           
 33400                           ; BSR set to: 0
 33401                           ;AES.c: 269: {
 33402                           ;AES.c: 270: block[i]=STable[block[i]];
 33403                           
 33404                           ; BSR set to: 0
 33405  00299E  517C               	movf	AESEncode@i& (0+255),w,b
 33406  0029A0  0D01               	mullw	1
 33407  0029A2  50F3               	movf	prodl,w,c
 33408  0029A4  2566               	addwf	AESEncode@block& (0+255),w,b
 33409  0029A6  6ED9               	movwf	fsr2l,c
 33410  0029A8  50F4               	movf	prodh,w,c
 33411  0029AA  2167               	addwfc	(AESEncode@block+1)& (0+255),w,b
 33412  0029AC  6EDA               	movwf	fsr2h,c
 33413  0029AE  50DF               	movf	indf2,w,c
 33414  0029B0  6F6A               	movwf	??_AESEncode& (0+255),b
 33415  0029B2  516A               	movf	??_AESEncode& (0+255),w,b
 33416  0029B4  0D01               	mullw	1
 33417  0029B6  0E67               	movlw	low _STable
 33418  0029B8  24F3               	addwf	prodl,w,c
 33419  0029BA  6EF6               	movwf	tblptrl,c
 33420  0029BC  0EFE               	movlw	high _STable
 33421  0029BE  20F4               	addwfc	prodh,w,c
 33422  0029C0  6EF7               	movwf	tblptrh,c
 33423  0029C2                     	if	1	;There are 3 active tblptr bytes
 33424  0029C2  6AF8               	clrf	tblptru,c
 33425  0029C4  0E00               	movlw	low (__mediumconst shr (0+16))
 33426  0029C6  22F8               	addwfc	tblptru,f,c
 33427  0029C8                     	endif
 33428  0029C8  517C               	movf	AESEncode@i& (0+255),w,b
 33429  0029CA  0D01               	mullw	1
 33430  0029CC  50F3               	movf	prodl,w,c
 33431  0029CE  2566               	addwf	AESEncode@block& (0+255),w,b
 33432  0029D0  6ED9               	movwf	fsr2l,c
 33433  0029D2  50F4               	movf	prodh,w,c
 33434  0029D4  2167               	addwfc	(AESEncode@block+1)& (0+255),w,b
 33435  0029D6  6EDA               	movwf	fsr2h,c
 33436  0029D8  0008               	tblrd		*
 33437  0029DA  CFF5 FFDF          	movff	tablat,indf2
 33438                           
 33439                           ; BSR set to: 0
 33440  0029DE  2B7C               	incf	AESEncode@i& (0+255),f,b
 33441  0029E0  D7DA               	goto	l8797
 33442  0029E2                     u7740:
 33443                           
 33444                           ; BSR set to: 0
 33445                           ;AES.c: 271: }
 33446                           ;AES.c: 274: EncodeShiftRow(block);
 33447                           
 33448                           ; BSR set to: 0
 33449  0029E2  C066  F060         	movff	AESEncode@block,EncodeShiftRow@stateTable
 33450  0029E6  C067  F061         	movff	AESEncode@block+1,EncodeShiftRow@stateTable+1
 33451  0029EA  EC3C  F02B         	call	_EncodeShiftRow	;wreg free
 33452                           
 33453                           ;AES.c: 277: if(_roundCounter != 1)
 33454  0029EE  0101               	movlb	1	; () banked
 33455  0029F0  0551               	decf	__roundCounter& (0+255),w,b
 33456  0029F2  B4D8               	btfsc	status,2,c
 33457  0029F4  D127               	goto	u7800
 33458                           
 33459                           ; BSR set to: 1
 33460                           ;AES.c: 278: {
 33461                           ;AES.c: 279: unsigned char aux,aux1,aux2,aux3;
 33462                           ;AES.c: 281: for(i=0;i<16;i+=4)
 33463  0029F6  0E00               	movlw	0
 33464  0029F8  0100               	movlb	0	; () banked
 33465  0029FA  6F7C               	movwf	AESEncode@i& (0+255),b
 33466  0029FC                     l8813:
 33467                           
 33468                           ; BSR set to: 0
 33469  0029FC  0E0F               	movlw	15
 33470  0029FE  657C               	cpfsgt	AESEncode@i& (0+255),b
 33471  002A00  D001               	goto	l1618
 33472  002A02  D120               	goto	u7800
 33473  002A04                     l1618:
 33474                           
 33475                           ; BSR set to: 0
 33476                           ;AES.c: 282: {
 33477                           ;AES.c: 283: aux1= block[i+0] ^ block[i+1];
 33478                           
 33479                           ; BSR set to: 0
 33480  002A04  517C               	movf	AESEncode@i& (0+255),w,b
 33481  002A06  6F6A               	movwf	??_AESEncode& (0+255),b
 33482  002A08  6B6B               	clrf	(??_AESEncode+1)& (0+255),b
 33483  002A0A  0E01               	movlw	1
 33484  002A0C  276A               	addwf	??_AESEncode& (0+255),f,b
 33485  002A0E  0E00               	movlw	0
 33486  002A10  236B               	addwfc	(??_AESEncode+1)& (0+255),f,b
 33487  002A12  516A               	movf	??_AESEncode& (0+255),w,b
 33488  002A14  2566               	addwf	AESEncode@block& (0+255),w,b
 33489  002A16  6ED9               	movwf	fsr2l,c
 33490  002A18  516B               	movf	(??_AESEncode+1)& (0+255),w,b
 33491  002A1A  2167               	addwfc	(AESEncode@block+1)& (0+255),w,b
 33492  002A1C  6EDA               	movwf	fsr2h,c
 33493  002A1E  50DF               	movf	indf2,w,c
 33494  002A20  6F6C               	movwf	(??_AESEncode+2)& (0+255),b
 33495  002A22  517C               	movf	AESEncode@i& (0+255),w,b
 33496  002A24  2566               	addwf	AESEncode@block& (0+255),w,b
 33497  002A26  6ED9               	movwf	fsr2l,c
 33498  002A28  0E00               	movlw	0
 33499  002A2A  2167               	addwfc	(AESEncode@block+1)& (0+255),w,b
 33500  002A2C  6EDA               	movwf	fsr2h,c
 33501  002A2E  50DF               	movf	indf2,w,c
 33502  002A30  196C               	xorwf	(??_AESEncode+2)& (0+255),w,b
 33503  002A32  6F7A               	movwf	AESEncode@aux1& (0+255),b
 33504                           
 33505                           ;AES.c: 284: aux3= block[i+2]^block[i+3];
 33506  002A34  517C               	movf	AESEncode@i& (0+255),w,b
 33507  002A36  6F6A               	movwf	??_AESEncode& (0+255),b
 33508  002A38  6B6B               	clrf	(??_AESEncode+1)& (0+255),b
 33509  002A3A  0E03               	movlw	3
 33510  002A3C  276A               	addwf	??_AESEncode& (0+255),f,b
 33511  002A3E  0E00               	movlw	0
 33512  002A40  236B               	addwfc	(??_AESEncode+1)& (0+255),f,b
 33513  002A42  516A               	movf	??_AESEncode& (0+255),w,b
 33514  002A44  2566               	addwf	AESEncode@block& (0+255),w,b
 33515  002A46  6ED9               	movwf	fsr2l,c
 33516  002A48  516B               	movf	(??_AESEncode+1)& (0+255),w,b
 33517  002A4A  2167               	addwfc	(AESEncode@block+1)& (0+255),w,b
 33518  002A4C  6EDA               	movwf	fsr2h,c
 33519  002A4E  50DF               	movf	indf2,w,c
 33520  002A50  6F6C               	movwf	(??_AESEncode+2)& (0+255),b
 33521  002A52  517C               	movf	AESEncode@i& (0+255),w,b
 33522  002A54  6F6D               	movwf	(??_AESEncode+3)& (0+255),b
 33523  002A56  6B6E               	clrf	(??_AESEncode+4)& (0+255),b
 33524  002A58  0E02               	movlw	2
 33525  002A5A  276D               	addwf	(??_AESEncode+3)& (0+255),f,b
 33526  002A5C  0E00               	movlw	0
 33527  002A5E  236E               	addwfc	(??_AESEncode+4)& (0+255),f,b
 33528  002A60  516D               	movf	(??_AESEncode+3)& (0+255),w,b
 33529  002A62  2566               	addwf	AESEncode@block& (0+255),w,b
 33530  002A64  6ED9               	movwf	fsr2l,c
 33531  002A66  516E               	movf	(??_AESEncode+4)& (0+255),w,b
 33532  002A68  2167               	addwfc	(AESEncode@block+1)& (0+255),w,b
 33533  002A6A  6EDA               	movwf	fsr2h,c
 33534  002A6C  50DF               	movf	indf2,w,c
 33535  002A6E  196C               	xorwf	(??_AESEncode+2)& (0+255),w,b
 33536  002A70  6F7B               	movwf	AESEncode@aux3& (0+255),b
 33537                           
 33538                           ; BSR set to: 0
 33539                           ;AES.c: 285: aux = aux1 ^ aux3;
 33540  002A72  517A               	movf	AESEncode@aux1& (0+255),w,b
 33541  002A74  197B               	xorwf	AESEncode@aux3& (0+255),w,b
 33542  002A76  6F78               	movwf	AESEncode@aux& (0+255),b
 33543                           
 33544                           ; BSR set to: 0
 33545                           ;AES.c: 286: aux2= block[i+2]^block[i+1];
 33546  002A78  517C               	movf	AESEncode@i& (0+255),w,b
 33547  002A7A  6F6A               	movwf	??_AESEncode& (0+255),b
 33548  002A7C  6B6B               	clrf	(??_AESEncode+1)& (0+255),b
 33549  002A7E  0E01               	movlw	1
 33550  002A80  276A               	addwf	??_AESEncode& (0+255),f,b
 33551  002A82  0E00               	movlw	0
 33552  002A84  236B               	addwfc	(??_AESEncode+1)& (0+255),f,b
 33553  002A86  516A               	movf	??_AESEncode& (0+255),w,b
 33554  002A88  2566               	addwf	AESEncode@block& (0+255),w,b
 33555  002A8A  6ED9               	movwf	fsr2l,c
 33556  002A8C  516B               	movf	(??_AESEncode+1)& (0+255),w,b
 33557  002A8E  2167               	addwfc	(AESEncode@block+1)& (0+255),w,b
 33558  002A90  6EDA               	movwf	fsr2h,c
 33559  002A92  50DF               	movf	indf2,w,c
 33560  002A94  6F6C               	movwf	(??_AESEncode+2)& (0+255),b
 33561  002A96  517C               	movf	AESEncode@i& (0+255),w,b
 33562  002A98  6F6D               	movwf	(??_AESEncode+3)& (0+255),b
 33563  002A9A  6B6E               	clrf	(??_AESEncode+4)& (0+255),b
 33564  002A9C  0E02               	movlw	2
 33565  002A9E  276D               	addwf	(??_AESEncode+3)& (0+255),f,b
 33566  002AA0  0E00               	movlw	0
 33567  002AA2  236E               	addwfc	(??_AESEncode+4)& (0+255),f,b
 33568  002AA4  516D               	movf	(??_AESEncode+3)& (0+255),w,b
 33569  002AA6  2566               	addwf	AESEncode@block& (0+255),w,b
 33570  002AA8  6ED9               	movwf	fsr2l,c
 33571  002AAA  516E               	movf	(??_AESEncode+4)& (0+255),w,b
 33572  002AAC  2167               	addwfc	(AESEncode@block+1)& (0+255),w,b
 33573  002AAE  6EDA               	movwf	fsr2h,c
 33574  002AB0  50DF               	movf	indf2,w,c
 33575  002AB2  196C               	xorwf	(??_AESEncode+2)& (0+255),w,b
 33576  002AB4  6F79               	movwf	AESEncode@aux2& (0+255),b
 33577                           
 33578                           ;AES.c: 288: aux1 = (((aux1)<0x80)?(aux1)<<1:(((aux1)<<1)^0x1b) );
 33579  002AB6  0E7F               	movlw	127
 33580  002AB8  657A               	cpfsgt	AESEncode@aux1& (0+255),b
 33581  002ABA  D00C               	goto	l1621
 33582                           
 33583                           ; BSR set to: 0
 33584  002ABC  0E1B               	movlw	27
 33585  002ABE  C07A  F06A         	movff	AESEncode@aux1,??_AESEncode
 33586  002AC2  6B6B               	clrf	(??_AESEncode+1)& (0+255),b
 33587  002AC4  90D8               	bcf	status,0,c
 33588  002AC6  376A               	rlcf	??_AESEncode& (0+255),f,b
 33589  002AC8  376B               	rlcf	(??_AESEncode+1)& (0+255),f,b
 33590  002ACA  196A               	xorwf	??_AESEncode& (0+255),w,b
 33591  002ACC  6F72               	movwf	_AESEncode$2127& (0+255),b
 33592  002ACE  516B               	movf	(??_AESEncode+1)& (0+255),w,b
 33593  002AD0  6F73               	movwf	(_AESEncode$2127+1)& (0+255),b
 33594  002AD2  D005               	goto	l1623
 33595  002AD4                     l1621:
 33596                           
 33597                           ; BSR set to: 0
 33598                           
 33599                           ; BSR set to: 0
 33600  002AD4  90D8               	bcf	status,0,c
 33601  002AD6  357A               	rlcf	AESEncode@aux1& (0+255),w,b
 33602  002AD8  6F72               	movwf	_AESEncode$2127& (0+255),b
 33603  002ADA  6B73               	clrf	(_AESEncode$2127+1)& (0+255),b
 33604  002ADC  3773               	rlcf	(_AESEncode$2127+1)& (0+255),f,b
 33605  002ADE                     l1623:
 33606                           
 33607                           ; BSR set to: 0
 33608                           
 33609                           ; BSR set to: 0
 33610  002ADE  C072  F07A         	movff	_AESEncode$2127,AESEncode@aux1
 33611                           
 33612                           ;AES.c: 289: aux2 = (((aux2)<0x80)?(aux2)<<1:(((aux2)<<1)^0x1b) );
 33613  002AE2  0E7F               	movlw	127
 33614  002AE4  6579               	cpfsgt	AESEncode@aux2& (0+255),b
 33615  002AE6  D00C               	goto	l1625
 33616                           
 33617                           ; BSR set to: 0
 33618  002AE8  0E1B               	movlw	27
 33619  002AEA  C079  F06A         	movff	AESEncode@aux2,??_AESEncode
 33620  002AEE  6B6B               	clrf	(??_AESEncode+1)& (0+255),b
 33621  002AF0  90D8               	bcf	status,0,c
 33622  002AF2  376A               	rlcf	??_AESEncode& (0+255),f,b
 33623  002AF4  376B               	rlcf	(??_AESEncode+1)& (0+255),f,b
 33624  002AF6  196A               	xorwf	??_AESEncode& (0+255),w,b
 33625  002AF8  6F74               	movwf	_AESEncode$2128& (0+255),b
 33626  002AFA  516B               	movf	(??_AESEncode+1)& (0+255),w,b
 33627  002AFC  6F75               	movwf	(_AESEncode$2128+1)& (0+255),b
 33628  002AFE  D005               	goto	l1627
 33629  002B00                     l1625:
 33630                           
 33631                           ; BSR set to: 0
 33632                           
 33633                           ; BSR set to: 0
 33634  002B00  90D8               	bcf	status,0,c
 33635  002B02  3579               	rlcf	AESEncode@aux2& (0+255),w,b
 33636  002B04  6F74               	movwf	_AESEncode$2128& (0+255),b
 33637  002B06  6B75               	clrf	(_AESEncode$2128+1)& (0+255),b
 33638  002B08  3775               	rlcf	(_AESEncode$2128+1)& (0+255),f,b
 33639  002B0A                     l1627:
 33640                           
 33641                           ; BSR set to: 0
 33642                           
 33643                           ; BSR set to: 0
 33644  002B0A  C074  F079         	movff	_AESEncode$2128,AESEncode@aux2
 33645                           
 33646                           ;AES.c: 290: aux3 = (((aux3)<0x80)?(aux3)<<1:(((aux3)<<1)^0x1b) );
 33647  002B0E  0E7F               	movlw	127
 33648  002B10  657B               	cpfsgt	AESEncode@aux3& (0+255),b
 33649  002B12  D00C               	goto	l1629
 33650                           
 33651                           ; BSR set to: 0
 33652  002B14  0E1B               	movlw	27
 33653  002B16  C07B  F06A         	movff	AESEncode@aux3,??_AESEncode
 33654  002B1A  6B6B               	clrf	(??_AESEncode+1)& (0+255),b
 33655  002B1C  90D8               	bcf	status,0,c
 33656  002B1E  376A               	rlcf	??_AESEncode& (0+255),f,b
 33657  002B20  376B               	rlcf	(??_AESEncode+1)& (0+255),f,b
 33658  002B22  196A               	xorwf	??_AESEncode& (0+255),w,b
 33659  002B24  6F76               	movwf	_AESEncode$2129& (0+255),b
 33660  002B26  516B               	movf	(??_AESEncode+1)& (0+255),w,b
 33661  002B28  6F77               	movwf	(_AESEncode$2129+1)& (0+255),b
 33662  002B2A  D005               	goto	l1631
 33663  002B2C                     l1629:
 33664                           
 33665                           ; BSR set to: 0
 33666                           
 33667                           ; BSR set to: 0
 33668  002B2C  90D8               	bcf	status,0,c
 33669  002B2E  357B               	rlcf	AESEncode@aux3& (0+255),w,b
 33670  002B30  6F76               	movwf	_AESEncode$2129& (0+255),b
 33671  002B32  6B77               	clrf	(_AESEncode$2129+1)& (0+255),b
 33672  002B34  3777               	rlcf	(_AESEncode$2129+1)& (0+255),f,b
 33673  002B36                     l1631:
 33674                           
 33675                           ; BSR set to: 0
 33676                           
 33677                           ; BSR set to: 0
 33678  002B36  C076  F07B         	movff	_AESEncode$2129,AESEncode@aux3
 33679                           
 33680                           ; BSR set to: 0
 33681                           ;AES.c: 292: block[i+0]= aux^aux1^block[i+0];
 33682  002B3A  517C               	movf	AESEncode@i& (0+255),w,b
 33683  002B3C  2566               	addwf	AESEncode@block& (0+255),w,b
 33684  002B3E  6ED9               	movwf	fsr2l,c
 33685  002B40  0E00               	movlw	0
 33686  002B42  2167               	addwfc	(AESEncode@block+1)& (0+255),w,b
 33687  002B44  6EDA               	movwf	fsr2h,c
 33688  002B46  517C               	movf	AESEncode@i& (0+255),w,b
 33689  002B48  2566               	addwf	AESEncode@block& (0+255),w,b
 33690  002B4A  6EE9               	movwf	fsr0l,c
 33691  002B4C  0E00               	movlw	0
 33692  002B4E  2167               	addwfc	(AESEncode@block+1)& (0+255),w,b
 33693  002B50  6EEA               	movwf	fsr0h,c
 33694  002B52  50EF               	movf	indf0,w,c
 33695  002B54  1978               	xorwf	AESEncode@aux& (0+255),w,b
 33696  002B56  197A               	xorwf	AESEncode@aux1& (0+255),w,b
 33697  002B58  6EDF               	movwf	indf2,c
 33698                           
 33699                           ; BSR set to: 0
 33700                           ;AES.c: 293: block[i+1]= aux^aux2^block[i+1];
 33701  002B5A  517C               	movf	AESEncode@i& (0+255),w,b
 33702  002B5C  6F6A               	movwf	??_AESEncode& (0+255),b
 33703  002B5E  6B6B               	clrf	(??_AESEncode+1)& (0+255),b
 33704  002B60  0E01               	movlw	1
 33705  002B62  276A               	addwf	??_AESEncode& (0+255),f,b
 33706  002B64  0E00               	movlw	0
 33707  002B66  236B               	addwfc	(??_AESEncode+1)& (0+255),f,b
 33708  002B68  516A               	movf	??_AESEncode& (0+255),w,b
 33709  002B6A  2566               	addwf	AESEncode@block& (0+255),w,b
 33710  002B6C  6ED9               	movwf	fsr2l,c
 33711  002B6E  516B               	movf	(??_AESEncode+1)& (0+255),w,b
 33712  002B70  2167               	addwfc	(AESEncode@block+1)& (0+255),w,b
 33713  002B72  6EDA               	movwf	fsr2h,c
 33714  002B74  517C               	movf	AESEncode@i& (0+255),w,b
 33715  002B76  6F6C               	movwf	(??_AESEncode+2)& (0+255),b
 33716  002B78  6B6D               	clrf	(??_AESEncode+3)& (0+255),b
 33717  002B7A  0E01               	movlw	1
 33718  002B7C  276C               	addwf	(??_AESEncode+2)& (0+255),f,b
 33719  002B7E  0E00               	movlw	0
 33720  002B80  236D               	addwfc	(??_AESEncode+3)& (0+255),f,b
 33721  002B82  516C               	movf	(??_AESEncode+2)& (0+255),w,b
 33722  002B84  2566               	addwf	AESEncode@block& (0+255),w,b
 33723  002B86  6EE9               	movwf	fsr0l,c
 33724  002B88  516D               	movf	(??_AESEncode+3)& (0+255),w,b
 33725  002B8A  2167               	addwfc	(AESEncode@block+1)& (0+255),w,b
 33726  002B8C  6EEA               	movwf	fsr0h,c
 33727  002B8E  50EF               	movf	indf0,w,c
 33728  002B90  1978               	xorwf	AESEncode@aux& (0+255),w,b
 33729  002B92  1979               	xorwf	AESEncode@aux2& (0+255),w,b
 33730  002B94  6EDF               	movwf	indf2,c
 33731                           
 33732                           ; BSR set to: 0
 33733                           ;AES.c: 294: block[i+2]= aux^aux3^block[i+2];
 33734  002B96  517C               	movf	AESEncode@i& (0+255),w,b
 33735  002B98  6F6A               	movwf	??_AESEncode& (0+255),b
 33736  002B9A  6B6B               	clrf	(??_AESEncode+1)& (0+255),b
 33737  002B9C  0E02               	movlw	2
 33738  002B9E  276A               	addwf	??_AESEncode& (0+255),f,b
 33739  002BA0  0E00               	movlw	0
 33740  002BA2  236B               	addwfc	(??_AESEncode+1)& (0+255),f,b
 33741  002BA4  516A               	movf	??_AESEncode& (0+255),w,b
 33742  002BA6  2566               	addwf	AESEncode@block& (0+255),w,b
 33743  002BA8  6ED9               	movwf	fsr2l,c
 33744  002BAA  516B               	movf	(??_AESEncode+1)& (0+255),w,b
 33745  002BAC  2167               	addwfc	(AESEncode@block+1)& (0+255),w,b
 33746  002BAE  6EDA               	movwf	fsr2h,c
 33747  002BB0  517C               	movf	AESEncode@i& (0+255),w,b
 33748  002BB2  6F6C               	movwf	(??_AESEncode+2)& (0+255),b
 33749  002BB4  6B6D               	clrf	(??_AESEncode+3)& (0+255),b
 33750  002BB6  0E02               	movlw	2
 33751  002BB8  276C               	addwf	(??_AESEncode+2)& (0+255),f,b
 33752  002BBA  0E00               	movlw	0
 33753  002BBC  236D               	addwfc	(??_AESEncode+3)& (0+255),f,b
 33754  002BBE  516C               	movf	(??_AESEncode+2)& (0+255),w,b
 33755  002BC0  2566               	addwf	AESEncode@block& (0+255),w,b
 33756  002BC2  6EE9               	movwf	fsr0l,c
 33757  002BC4  516D               	movf	(??_AESEncode+3)& (0+255),w,b
 33758  002BC6  2167               	addwfc	(AESEncode@block+1)& (0+255),w,b
 33759  002BC8  6EEA               	movwf	fsr0h,c
 33760  002BCA  50EF               	movf	indf0,w,c
 33761  002BCC  1978               	xorwf	AESEncode@aux& (0+255),w,b
 33762  002BCE  197B               	xorwf	AESEncode@aux3& (0+255),w,b
 33763  002BD0  6EDF               	movwf	indf2,c
 33764                           
 33765                           ; BSR set to: 0
 33766                           ;AES.c: 295: block[i+3]= block[i+0]^block[i+1]^block[i+2]^aux;
 33767  002BD2  517C               	movf	AESEncode@i& (0+255),w,b
 33768  002BD4  6F6A               	movwf	??_AESEncode& (0+255),b
 33769  002BD6  6B6B               	clrf	(??_AESEncode+1)& (0+255),b
 33770  002BD8  0E03               	movlw	3
 33771  002BDA  276A               	addwf	??_AESEncode& (0+255),f,b
 33772  002BDC  0E00               	movlw	0
 33773  002BDE  236B               	addwfc	(??_AESEncode+1)& (0+255),f,b
 33774  002BE0  516A               	movf	??_AESEncode& (0+255),w,b
 33775  002BE2  2566               	addwf	AESEncode@block& (0+255),w,b
 33776  002BE4  6ED9               	movwf	fsr2l,c
 33777  002BE6  516B               	movf	(??_AESEncode+1)& (0+255),w,b
 33778  002BE8  2167               	addwfc	(AESEncode@block+1)& (0+255),w,b
 33779  002BEA  6EDA               	movwf	fsr2h,c
 33780  002BEC  517C               	movf	AESEncode@i& (0+255),w,b
 33781  002BEE  6F6C               	movwf	(??_AESEncode+2)& (0+255),b
 33782  002BF0  6B6D               	clrf	(??_AESEncode+3)& (0+255),b
 33783  002BF2  0E02               	movlw	2
 33784  002BF4  276C               	addwf	(??_AESEncode+2)& (0+255),f,b
 33785  002BF6  0E00               	movlw	0
 33786  002BF8  236D               	addwfc	(??_AESEncode+3)& (0+255),f,b
 33787  002BFA  516C               	movf	(??_AESEncode+2)& (0+255),w,b
 33788  002BFC  2566               	addwf	AESEncode@block& (0+255),w,b
 33789  002BFE  6EE9               	movwf	fsr0l,c
 33790  002C00  516D               	movf	(??_AESEncode+3)& (0+255),w,b
 33791  002C02  2167               	addwfc	(AESEncode@block+1)& (0+255),w,b
 33792  002C04  6EEA               	movwf	fsr0h,c
 33793  002C06  50EF               	movf	indf0,w,c
 33794  002C08  6F6E               	movwf	(??_AESEncode+4)& (0+255),b
 33795  002C0A  517C               	movf	AESEncode@i& (0+255),w,b
 33796  002C0C  6F6F               	movwf	(??_AESEncode+5)& (0+255),b
 33797  002C0E  6B70               	clrf	(??_AESEncode+6)& (0+255),b
 33798  002C10  0E01               	movlw	1
 33799  002C12  276F               	addwf	(??_AESEncode+5)& (0+255),f,b
 33800  002C14  0E00               	movlw	0
 33801  002C16  2370               	addwfc	(??_AESEncode+6)& (0+255),f,b
 33802  002C18  516F               	movf	(??_AESEncode+5)& (0+255),w,b
 33803  002C1A  2566               	addwf	AESEncode@block& (0+255),w,b
 33804  002C1C  6EE9               	movwf	fsr0l,c
 33805  002C1E  5170               	movf	(??_AESEncode+6)& (0+255),w,b
 33806  002C20  2167               	addwfc	(AESEncode@block+1)& (0+255),w,b
 33807  002C22  6EEA               	movwf	fsr0h,c
 33808  002C24  50EF               	movf	indf0,w,c
 33809  002C26  6F71               	movwf	(??_AESEncode+7)& (0+255),b
 33810  002C28  517C               	movf	AESEncode@i& (0+255),w,b
 33811  002C2A  2566               	addwf	AESEncode@block& (0+255),w,b
 33812  002C2C  6EE9               	movwf	fsr0l,c
 33813  002C2E  0E00               	movlw	0
 33814  002C30  2167               	addwfc	(AESEncode@block+1)& (0+255),w,b
 33815  002C32  6EEA               	movwf	fsr0h,c
 33816  002C34  50EF               	movf	indf0,w,c
 33817  002C36  1971               	xorwf	(??_AESEncode+7)& (0+255),w,b
 33818  002C38  196E               	xorwf	(??_AESEncode+4)& (0+255),w,b
 33819  002C3A  1978               	xorwf	AESEncode@aux& (0+255),w,b
 33820  002C3C  6EDF               	movwf	indf2,c
 33821  002C3E  0E04               	movlw	4
 33822  002C40  277C               	addwf	AESEncode@i& (0+255),f,b
 33823  002C42  D6DC               	goto	l8813
 33824  002C44                     u7800:
 33825                           
 33826                           ;AES.c: 296: }
 33827                           ;AES.c: 297: }
 33828                           ;AES.c: 299: EncKeySchedule(key);
 33829                           
 33830                           ; BSR set to: 0
 33831                           
 33832                           ; BSR set to: 0
 33833  002C44  C068  F060         	movff	AESEncode@key,EncKeySchedule@key
 33834  002C48  C069  F061         	movff	AESEncode@key+1,EncKeySchedule@key+1
 33835  002C4C  EC3A  F01C         	call	_EncKeySchedule	;wreg free
 33836                           
 33837                           ;AES.c: 302: for(i=0;i<16;i++)
 33838  002C50  0E00               	movlw	0
 33839  002C52  0100               	movlb	0	; () banked
 33840  002C54  6F7C               	movwf	AESEncode@i& (0+255),b
 33841  002C56                     l8853:
 33842                           
 33843                           ; BSR set to: 0
 33844  002C56  0E0F               	movlw	15
 33845  002C58  657C               	cpfsgt	AESEncode@i& (0+255),b
 33846  002C5A  D001               	goto	l1632
 33847  002C5C  D016               	goto	u7820
 33848  002C5E                     l1632:
 33849                           
 33850                           ; BSR set to: 0
 33851                           ;AES.c: 303: {
 33852                           ;AES.c: 304: block[i] ^= key[i];
 33853                           
 33854                           ; BSR set to: 0
 33855  002C5E  517C               	movf	AESEncode@i& (0+255),w,b
 33856  002C60  0D01               	mullw	1
 33857  002C62  50F3               	movf	prodl,w,c
 33858  002C64  2568               	addwf	AESEncode@key& (0+255),w,b
 33859  002C66  6ED9               	movwf	fsr2l,c
 33860  002C68  50F4               	movf	prodh,w,c
 33861  002C6A  2169               	addwfc	(AESEncode@key+1)& (0+255),w,b
 33862  002C6C  6EDA               	movwf	fsr2h,c
 33863  002C6E  50DF               	movf	indf2,w,c
 33864  002C70  6F6A               	movwf	??_AESEncode& (0+255),b
 33865  002C72  517C               	movf	AESEncode@i& (0+255),w,b
 33866  002C74  0D01               	mullw	1
 33867  002C76  50F3               	movf	prodl,w,c
 33868  002C78  2566               	addwf	AESEncode@block& (0+255),w,b
 33869  002C7A  6ED9               	movwf	fsr2l,c
 33870  002C7C  50F4               	movf	prodh,w,c
 33871  002C7E  2167               	addwfc	(AESEncode@block+1)& (0+255),w,b
 33872  002C80  6EDA               	movwf	fsr2h,c
 33873  002C82  516A               	movf	??_AESEncode& (0+255),w,b
 33874  002C84  1ADF               	xorwf	indf2,f,c
 33875                           
 33876                           ; BSR set to: 0
 33877  002C86  2B7C               	incf	AESEncode@i& (0+255),f,b
 33878  002C88  D7E6               	goto	l8853
 33879  002C8A                     u7820:
 33880                           
 33881                           ; BSR set to: 0
 33882                           ;AES.c: 305: }
 33883                           ;AES.c: 307: _roundCounter--;
 33884                           
 33885                           ; BSR set to: 0
 33886  002C8A  0101               	movlb	1	; () banked
 33887  002C8C  0751               	decf	__roundCounter& (0+255),f,b
 33888                           
 33889                           ; BSR set to: 1
 33890                           ;AES.c: 308: }
 33891                           ;AES.c: 309: while(_roundCounter !=0);
 33892  002C8E  5151               	movf	__roundCounter& (0+255),w,b
 33893  002C90  B4D8               	btfsc	status,2,c
 33894  002C92  0012               	return	
 33895  002C94  D67D               	goto	u7720
 33896  002C96                     __end_of_AESEncode:
 33897                           	opt stack 0
 33898                           tosu	equ	0xFFF
 33899                           tosh	equ	0xFFE
 33900                           tosl	equ	0xFFD
 33901                           pclath	equ	0xFFA
 33902                           tblptru	equ	0xFF8
 33903                           tblptrh	equ	0xFF7
 33904                           tblptrl	equ	0xFF6
 33905                           tablat	equ	0xFF5
 33906                           prodh	equ	0xFF4
 33907                           prodl	equ	0xFF3
 33908                           intcon	equ	0xFF2
 33909                           intcon2	equ	0xFF1
 33910                           intcon3	equ	0xFF0
 33911                           indf0	equ	0xFEF
 33912                           postinc0	equ	0xFEE
 33913                           plusw0	equ	0xFEB
 33914                           fsr0h	equ	0xFEA
 33915                           fsr0l	equ	0xFE9
 33916                           wreg	equ	0xFE8
 33917                           postinc1	equ	0xFE6
 33918                           postdec1	equ	0xFE5
 33919                           plusw1	equ	0xFE3
 33920                           fsr1h	equ	0xFE2
 33921                           fsr1l	equ	0xFE1
 33922                           indf2	equ	0xFDF
 33923                           postinc2	equ	0xFDE
 33924                           postdec2	equ	0xFDD
 33925                           plusw2	equ	0xFDB
 33926                           fsr2h	equ	0xFDA
 33927                           fsr2l	equ	0xFD9
 33928                           status	equ	0xFD8
 33929                           
 33930 ;; *************** function _EncodeShiftRow *****************
 33931 ;; Defined at:
 33932 ;;		line 385 in file "mcc_generated_files/LoRaWAN/AES.c"
 33933 ;; Parameters:    Size  Location     Type
 33934 ;;  stateTable      2    0[BANK0 ] PTR unsigned char 
 33935 ;;		 -> aesBuffer(16), radioBuffer(271), LORAWAN_RxDone@hdr(2), loRa.activationParameters(105), 
 33936 ;;		 -> loRa(245), GenerateSubkey@l(16), AESCmac@y(16), AESCmac@x(16), 
 33937 ;; Auto vars:     Size  Location     Type
 33938 ;;  temp            1    2[BANK0 ] unsigned char 
 33939 ;; Return value:  Size  Location     Type
 33940 ;;                  1    wreg      void 
 33941 ;; Registers used:
 33942 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0
 33943 ;; Tracked objects:
 33944 ;;		On entry : 0/0
 33945 ;;		On exit  : 0/0
 33946 ;;		Unchanged: 0/0
 33947 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 33948 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33949 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33950 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33951 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33952 ;;Total ram usage:        3 bytes
 33953 ;; Hardware stack levels used:    1
 33954 ;; Hardware stack levels required when called:    7
 33955 ;; This function calls:
 33956 ;;		Nothing
 33957 ;; This function is called by:
 33958 ;;		_AESEncode
 33959 ;; This function uses a non-reentrant model
 33960 ;;
 33961                           
 33962                           	psect	text157
 33963  005678                     __ptext157:
 33964                           	opt stack 0
 33965  005678                     _EncodeShiftRow:
 33966                           	opt stack 18
 33967                           
 33968                           ;AES.c: 387: unsigned char temp;
 33969                           ;AES.c: 392: temp=stateTable[1];
 33970                           
 33971                           ; BSR set to: 1
 33972                           ;incstack = 0
 33973  005678  0100               	movlb	0	; () banked
 33974  00567A  EE20 F001          	lfsr	2,1
 33975  00567E  5160               	movf	EncodeShiftRow@stateTable& (0+255),w,b
 33976  005680  26D9               	addwf	fsr2l,f,c
 33977  005682  5161               	movf	(EncodeShiftRow@stateTable+1)& (0+255),w,b
 33978  005684  22DA               	addwfc	fsr2h,f,c
 33979  005686  50DF               	movf	indf2,w,c
 33980  005688  6F62               	movwf	EncodeShiftRow@temp& (0+255),b
 33981                           
 33982                           ; BSR set to: 0
 33983                           ;AES.c: 393: stateTable[1]=stateTable[5];
 33984  00568A  EE20 F005          	lfsr	2,5
 33985  00568E  5160               	movf	EncodeShiftRow@stateTable& (0+255),w,b
 33986  005690  26D9               	addwf	fsr2l,f,c
 33987  005692  5161               	movf	(EncodeShiftRow@stateTable+1)& (0+255),w,b
 33988  005694  22DA               	addwfc	fsr2h,f,c
 33989  005696  EE00 F001          	lfsr	0,1
 33990  00569A  5160               	movf	EncodeShiftRow@stateTable& (0+255),w,b
 33991  00569C  26E9               	addwf	fsr0l,f,c
 33992  00569E  5161               	movf	(EncodeShiftRow@stateTable+1)& (0+255),w,b
 33993  0056A0  22EA               	addwfc	fsr0h,f,c
 33994  0056A2  CFDF FFEF          	movff	indf2,indf0
 33995                           
 33996                           ; BSR set to: 0
 33997                           ;AES.c: 394: stateTable[5]=stateTable[9];
 33998  0056A6  EE20 F009          	lfsr	2,9
 33999  0056AA  5160               	movf	EncodeShiftRow@stateTable& (0+255),w,b
 34000  0056AC  26D9               	addwf	fsr2l,f,c
 34001  0056AE  5161               	movf	(EncodeShiftRow@stateTable+1)& (0+255),w,b
 34002  0056B0  22DA               	addwfc	fsr2h,f,c
 34003  0056B2  EE00 F005          	lfsr	0,5
 34004  0056B6  5160               	movf	EncodeShiftRow@stateTable& (0+255),w,b
 34005  0056B8  26E9               	addwf	fsr0l,f,c
 34006  0056BA  5161               	movf	(EncodeShiftRow@stateTable+1)& (0+255),w,b
 34007  0056BC  22EA               	addwfc	fsr0h,f,c
 34008  0056BE  CFDF FFEF          	movff	indf2,indf0
 34009                           
 34010                           ; BSR set to: 0
 34011                           ;AES.c: 395: stateTable[9]=stateTable[13];
 34012  0056C2  EE20 F00D          	lfsr	2,13
 34013  0056C6  5160               	movf	EncodeShiftRow@stateTable& (0+255),w,b
 34014  0056C8  26D9               	addwf	fsr2l,f,c
 34015  0056CA  5161               	movf	(EncodeShiftRow@stateTable+1)& (0+255),w,b
 34016  0056CC  22DA               	addwfc	fsr2h,f,c
 34017  0056CE  EE00 F009          	lfsr	0,9
 34018  0056D2  5160               	movf	EncodeShiftRow@stateTable& (0+255),w,b
 34019  0056D4  26E9               	addwf	fsr0l,f,c
 34020  0056D6  5161               	movf	(EncodeShiftRow@stateTable+1)& (0+255),w,b
 34021  0056D8  22EA               	addwfc	fsr0h,f,c
 34022  0056DA  CFDF FFEF          	movff	indf2,indf0
 34023                           
 34024                           ; BSR set to: 0
 34025                           ;AES.c: 396: stateTable[13]=temp;
 34026  0056DE  EE20 F00D          	lfsr	2,13
 34027  0056E2  5160               	movf	EncodeShiftRow@stateTable& (0+255),w,b
 34028  0056E4  26D9               	addwf	fsr2l,f,c
 34029  0056E6  5161               	movf	(EncodeShiftRow@stateTable+1)& (0+255),w,b
 34030  0056E8  22DA               	addwfc	fsr2h,f,c
 34031  0056EA  C062  FFDF         	movff	EncodeShiftRow@temp,indf2
 34032                           
 34033                           ; BSR set to: 0
 34034                           ;AES.c: 399: temp=stateTable[2];
 34035  0056EE  EE20 F002          	lfsr	2,2
 34036  0056F2  5160               	movf	EncodeShiftRow@stateTable& (0+255),w,b
 34037  0056F4  26D9               	addwf	fsr2l,f,c
 34038  0056F6  5161               	movf	(EncodeShiftRow@stateTable+1)& (0+255),w,b
 34039  0056F8  22DA               	addwfc	fsr2h,f,c
 34040  0056FA  50DF               	movf	indf2,w,c
 34041  0056FC  6F62               	movwf	EncodeShiftRow@temp& (0+255),b
 34042                           
 34043                           ; BSR set to: 0
 34044                           ;AES.c: 400: stateTable[2]=stateTable[10];
 34045  0056FE  EE20 F00A          	lfsr	2,10
 34046  005702  5160               	movf	EncodeShiftRow@stateTable& (0+255),w,b
 34047  005704  26D9               	addwf	fsr2l,f,c
 34048  005706  5161               	movf	(EncodeShiftRow@stateTable+1)& (0+255),w,b
 34049  005708  22DA               	addwfc	fsr2h,f,c
 34050  00570A  EE00 F002          	lfsr	0,2
 34051  00570E  5160               	movf	EncodeShiftRow@stateTable& (0+255),w,b
 34052  005710  26E9               	addwf	fsr0l,f,c
 34053  005712  5161               	movf	(EncodeShiftRow@stateTable+1)& (0+255),w,b
 34054  005714  22EA               	addwfc	fsr0h,f,c
 34055  005716  CFDF FFEF          	movff	indf2,indf0
 34056                           
 34057                           ;AES.c: 401: stateTable[10]=temp;
 34058  00571A  EE20 F00A          	lfsr	2,10
 34059  00571E  5160               	movf	EncodeShiftRow@stateTable& (0+255),w,b
 34060  005720  26D9               	addwf	fsr2l,f,c
 34061  005722  5161               	movf	(EncodeShiftRow@stateTable+1)& (0+255),w,b
 34062  005724  22DA               	addwfc	fsr2h,f,c
 34063  005726  C062  FFDF         	movff	EncodeShiftRow@temp,indf2
 34064                           
 34065                           ;AES.c: 402: temp=stateTable[14];
 34066  00572A  EE20 F00E          	lfsr	2,14
 34067  00572E  5160               	movf	EncodeShiftRow@stateTable& (0+255),w,b
 34068  005730  26D9               	addwf	fsr2l,f,c
 34069  005732  5161               	movf	(EncodeShiftRow@stateTable+1)& (0+255),w,b
 34070  005734  22DA               	addwfc	fsr2h,f,c
 34071  005736  50DF               	movf	indf2,w,c
 34072  005738  6F62               	movwf	EncodeShiftRow@temp& (0+255),b
 34073                           
 34074                           ; BSR set to: 0
 34075                           ;AES.c: 403: stateTable[14]=stateTable[6];
 34076  00573A  EE20 F006          	lfsr	2,6
 34077  00573E  5160               	movf	EncodeShiftRow@stateTable& (0+255),w,b
 34078  005740  26D9               	addwf	fsr2l,f,c
 34079  005742  5161               	movf	(EncodeShiftRow@stateTable+1)& (0+255),w,b
 34080  005744  22DA               	addwfc	fsr2h,f,c
 34081  005746  EE00 F00E          	lfsr	0,14
 34082  00574A  5160               	movf	EncodeShiftRow@stateTable& (0+255),w,b
 34083  00574C  26E9               	addwf	fsr0l,f,c
 34084  00574E  5161               	movf	(EncodeShiftRow@stateTable+1)& (0+255),w,b
 34085  005750  22EA               	addwfc	fsr0h,f,c
 34086  005752  CFDF FFEF          	movff	indf2,indf0
 34087                           
 34088                           ; BSR set to: 0
 34089                           ;AES.c: 404: stateTable[6]=temp;
 34090  005756  EE20 F006          	lfsr	2,6
 34091  00575A  5160               	movf	EncodeShiftRow@stateTable& (0+255),w,b
 34092  00575C  26D9               	addwf	fsr2l,f,c
 34093  00575E  5161               	movf	(EncodeShiftRow@stateTable+1)& (0+255),w,b
 34094  005760  22DA               	addwfc	fsr2h,f,c
 34095  005762  C062  FFDF         	movff	EncodeShiftRow@temp,indf2
 34096                           
 34097                           ; BSR set to: 0
 34098                           ;AES.c: 407: temp=stateTable[3];
 34099  005766  EE20 F003          	lfsr	2,3
 34100  00576A  5160               	movf	EncodeShiftRow@stateTable& (0+255),w,b
 34101  00576C  26D9               	addwf	fsr2l,f,c
 34102  00576E  5161               	movf	(EncodeShiftRow@stateTable+1)& (0+255),w,b
 34103  005770  22DA               	addwfc	fsr2h,f,c
 34104  005772  50DF               	movf	indf2,w,c
 34105  005774  6F62               	movwf	EncodeShiftRow@temp& (0+255),b
 34106                           
 34107                           ; BSR set to: 0
 34108                           ;AES.c: 408: stateTable[3]=stateTable[15];
 34109  005776  EE20 F00F          	lfsr	2,15
 34110  00577A  5160               	movf	EncodeShiftRow@stateTable& (0+255),w,b
 34111  00577C  26D9               	addwf	fsr2l,f,c
 34112  00577E  5161               	movf	(EncodeShiftRow@stateTable+1)& (0+255),w,b
 34113  005780  22DA               	addwfc	fsr2h,f,c
 34114  005782  EE00 F003          	lfsr	0,3
 34115  005786  5160               	movf	EncodeShiftRow@stateTable& (0+255),w,b
 34116  005788  26E9               	addwf	fsr0l,f,c
 34117  00578A  5161               	movf	(EncodeShiftRow@stateTable+1)& (0+255),w,b
 34118  00578C  22EA               	addwfc	fsr0h,f,c
 34119  00578E  CFDF FFEF          	movff	indf2,indf0
 34120                           
 34121                           ; BSR set to: 0
 34122                           ;AES.c: 409: stateTable[15]=stateTable[11];
 34123  005792  EE20 F00B          	lfsr	2,11
 34124  005796  5160               	movf	EncodeShiftRow@stateTable& (0+255),w,b
 34125  005798  26D9               	addwf	fsr2l,f,c
 34126  00579A  5161               	movf	(EncodeShiftRow@stateTable+1)& (0+255),w,b
 34127  00579C  22DA               	addwfc	fsr2h,f,c
 34128  00579E  EE00 F00F          	lfsr	0,15
 34129  0057A2  5160               	movf	EncodeShiftRow@stateTable& (0+255),w,b
 34130  0057A4  26E9               	addwf	fsr0l,f,c
 34131  0057A6  5161               	movf	(EncodeShiftRow@stateTable+1)& (0+255),w,b
 34132  0057A8  22EA               	addwfc	fsr0h,f,c
 34133  0057AA  CFDF FFEF          	movff	indf2,indf0
 34134                           
 34135                           ; BSR set to: 0
 34136                           ;AES.c: 410: stateTable[11]=stateTable[7];
 34137  0057AE  EE20 F007          	lfsr	2,7
 34138  0057B2  5160               	movf	EncodeShiftRow@stateTable& (0+255),w,b
 34139  0057B4  26D9               	addwf	fsr2l,f,c
 34140  0057B6  5161               	movf	(EncodeShiftRow@stateTable+1)& (0+255),w,b
 34141  0057B8  22DA               	addwfc	fsr2h,f,c
 34142  0057BA  EE00 F00B          	lfsr	0,11
 34143  0057BE  5160               	movf	EncodeShiftRow@stateTable& (0+255),w,b
 34144  0057C0  26E9               	addwf	fsr0l,f,c
 34145  0057C2  5161               	movf	(EncodeShiftRow@stateTable+1)& (0+255),w,b
 34146  0057C4  22EA               	addwfc	fsr0h,f,c
 34147  0057C6  CFDF FFEF          	movff	indf2,indf0
 34148                           
 34149                           ;AES.c: 411: stateTable[7]=temp;
 34150  0057CA  EE20 F007          	lfsr	2,7
 34151  0057CE  5160               	movf	EncodeShiftRow@stateTable& (0+255),w,b
 34152  0057D0  26D9               	addwf	fsr2l,f,c
 34153  0057D2  5161               	movf	(EncodeShiftRow@stateTable+1)& (0+255),w,b
 34154  0057D4  22DA               	addwfc	fsr2h,f,c
 34155  0057D6  C062  FFDF         	movff	EncodeShiftRow@temp,indf2
 34156                           
 34157                           ; BSR set to: 0
 34158  0057DA  0012               	return		;funcret
 34159  0057DC                     __end_of_EncodeShiftRow:
 34160                           	opt stack 0
 34161                           tosu	equ	0xFFF
 34162                           tosh	equ	0xFFE
 34163                           tosl	equ	0xFFD
 34164                           pclath	equ	0xFFA
 34165                           tblptru	equ	0xFF8
 34166                           tblptrh	equ	0xFF7
 34167                           tblptrl	equ	0xFF6
 34168                           tablat	equ	0xFF5
 34169                           prodh	equ	0xFF4
 34170                           prodl	equ	0xFF3
 34171                           intcon	equ	0xFF2
 34172                           intcon2	equ	0xFF1
 34173                           intcon3	equ	0xFF0
 34174                           indf0	equ	0xFEF
 34175                           postinc0	equ	0xFEE
 34176                           plusw0	equ	0xFEB
 34177                           fsr0h	equ	0xFEA
 34178                           fsr0l	equ	0xFE9
 34179                           wreg	equ	0xFE8
 34180                           postinc1	equ	0xFE6
 34181                           postdec1	equ	0xFE5
 34182                           plusw1	equ	0xFE3
 34183                           fsr1h	equ	0xFE2
 34184                           fsr1l	equ	0xFE1
 34185                           indf2	equ	0xFDF
 34186                           postinc2	equ	0xFDE
 34187                           postdec2	equ	0xFDD
 34188                           plusw2	equ	0xFDB
 34189                           fsr2h	equ	0xFDA
 34190                           fsr2l	equ	0xFD9
 34191                           status	equ	0xFD8
 34192                           
 34193 ;; *************** function _EncKeySchedule *****************
 34194 ;; Defined at:
 34195 ;;		line 337 in file "mcc_generated_files/LoRaWAN/AES.c"
 34196 ;; Parameters:    Size  Location     Type
 34197 ;;  key             2    0[BANK0 ] PTR unsigned char 
 34198 ;;		 -> AESEncodeLoRa@useKey(16), 
 34199 ;; Auto vars:     Size  Location     Type
 34200 ;;		None
 34201 ;; Return value:  Size  Location     Type
 34202 ;;                  1    wreg      void 
 34203 ;; Registers used:
 34204 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 34205 ;; Tracked objects:
 34206 ;;		On entry : 0/0
 34207 ;;		On exit  : 0/0
 34208 ;;		Unchanged: 0/0
 34209 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 34210 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34211 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34212 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34213 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34214 ;;Total ram usage:        6 bytes
 34215 ;; Hardware stack levels used:    1
 34216 ;; Hardware stack levels required when called:    7
 34217 ;; This function calls:
 34218 ;;		Nothing
 34219 ;; This function is called by:
 34220 ;;		_AESEncode
 34221 ;; This function uses a non-reentrant model
 34222 ;;
 34223                           
 34224                           	psect	text158
 34225  003874                     __ptext158:
 34226                           	opt stack 0
 34227  003874                     _EncKeySchedule:
 34228                           	opt stack 18
 34229                           
 34230                           ;AES.c: 340: key[0]^=STable[key[13]];
 34231                           
 34232                           ; BSR set to: 0
 34233                           ;incstack = 0
 34234  003874  0100               	movlb	0	; () banked
 34235  003876  EE20 F00D          	lfsr	2,13
 34236  00387A  5160               	movf	EncKeySchedule@key& (0+255),w,b
 34237  00387C  26D9               	addwf	fsr2l,f,c
 34238  00387E  5161               	movf	(EncKeySchedule@key+1)& (0+255),w,b
 34239  003880  22DA               	addwfc	fsr2h,f,c
 34240  003882  50DF               	movf	indf2,w,c
 34241  003884  6F62               	movwf	??_EncKeySchedule& (0+255),b
 34242  003886  5162               	movf	??_EncKeySchedule& (0+255),w,b
 34243  003888  0D01               	mullw	1
 34244  00388A  0E67               	movlw	low _STable
 34245  00388C  24F3               	addwf	prodl,w,c
 34246  00388E  6EF6               	movwf	tblptrl,c
 34247  003890  0EFE               	movlw	high _STable
 34248  003892  20F4               	addwfc	prodh,w,c
 34249  003894  6EF7               	movwf	tblptrh,c
 34250  003896                     	if	1	;There are 3 active tblptr bytes
 34251  003896  6AF8               	clrf	tblptru,c
 34252  003898  0E00               	movlw	low (__mediumconst shr (0+16))
 34253  00389A  22F8               	addwfc	tblptru,f,c
 34254  00389C                     	endif
 34255  00389C  0008               	tblrd		*
 34256  00389E  CFF5 F063          	movff	tablat,??_EncKeySchedule+1
 34257  0038A2  C060  FFD9         	movff	EncKeySchedule@key,fsr2l
 34258  0038A6  C061  FFDA         	movff	EncKeySchedule@key+1,fsr2h
 34259  0038AA  5163               	movf	(??_EncKeySchedule+1)& (0+255),w,b
 34260  0038AC  1ADF               	xorwf	indf2,f,c
 34261                           
 34262                           ;AES.c: 341: key[1]^=STable[key[14]];
 34263  0038AE  EE20 F00E          	lfsr	2,14
 34264  0038B2  5160               	movf	EncKeySchedule@key& (0+255),w,b
 34265  0038B4  26D9               	addwf	fsr2l,f,c
 34266  0038B6  5161               	movf	(EncKeySchedule@key+1)& (0+255),w,b
 34267  0038B8  22DA               	addwfc	fsr2h,f,c
 34268  0038BA  50DF               	movf	indf2,w,c
 34269  0038BC  6F62               	movwf	??_EncKeySchedule& (0+255),b
 34270  0038BE  5162               	movf	??_EncKeySchedule& (0+255),w,b
 34271  0038C0  0D01               	mullw	1
 34272  0038C2  0E67               	movlw	low _STable
 34273  0038C4  24F3               	addwf	prodl,w,c
 34274  0038C6  6EF6               	movwf	tblptrl,c
 34275  0038C8  0EFE               	movlw	high _STable
 34276  0038CA  20F4               	addwfc	prodh,w,c
 34277  0038CC  6EF7               	movwf	tblptrh,c
 34278  0038CE                     	if	1	;There are 3 active tblptr bytes
 34279  0038CE  6AF8               	clrf	tblptru,c
 34280  0038D0  0E00               	movlw	low (__mediumconst shr (0+16))
 34281  0038D2  22F8               	addwfc	tblptru,f,c
 34282  0038D4                     	endif
 34283  0038D4  0008               	tblrd		*
 34284  0038D6  CFF5 F063          	movff	tablat,??_EncKeySchedule+1
 34285  0038DA  EE20 F001          	lfsr	2,1
 34286  0038DE  5160               	movf	EncKeySchedule@key& (0+255),w,b
 34287  0038E0  26D9               	addwf	fsr2l,f,c
 34288  0038E2  5161               	movf	(EncKeySchedule@key+1)& (0+255),w,b
 34289  0038E4  22DA               	addwfc	fsr2h,f,c
 34290  0038E6  5163               	movf	(??_EncKeySchedule+1)& (0+255),w,b
 34291  0038E8  1ADF               	xorwf	indf2,f,c
 34292                           
 34293                           ;AES.c: 342: key[2]^=STable[key[15]];
 34294  0038EA  EE20 F00F          	lfsr	2,15
 34295  0038EE  5160               	movf	EncKeySchedule@key& (0+255),w,b
 34296  0038F0  26D9               	addwf	fsr2l,f,c
 34297  0038F2  5161               	movf	(EncKeySchedule@key+1)& (0+255),w,b
 34298  0038F4  22DA               	addwfc	fsr2h,f,c
 34299  0038F6  50DF               	movf	indf2,w,c
 34300  0038F8  6F62               	movwf	??_EncKeySchedule& (0+255),b
 34301  0038FA  5162               	movf	??_EncKeySchedule& (0+255),w,b
 34302  0038FC  0D01               	mullw	1
 34303  0038FE  0E67               	movlw	low _STable
 34304  003900  24F3               	addwf	prodl,w,c
 34305  003902  6EF6               	movwf	tblptrl,c
 34306  003904  0EFE               	movlw	high _STable
 34307  003906  20F4               	addwfc	prodh,w,c
 34308  003908  6EF7               	movwf	tblptrh,c
 34309  00390A                     	if	1	;There are 3 active tblptr bytes
 34310  00390A  6AF8               	clrf	tblptru,c
 34311  00390C  0E00               	movlw	low (__mediumconst shr (0+16))
 34312  00390E  22F8               	addwfc	tblptru,f,c
 34313  003910                     	endif
 34314  003910  0008               	tblrd		*
 34315  003912  CFF5 F063          	movff	tablat,??_EncKeySchedule+1
 34316  003916  EE20 F002          	lfsr	2,2
 34317  00391A  5160               	movf	EncKeySchedule@key& (0+255),w,b
 34318  00391C  26D9               	addwf	fsr2l,f,c
 34319  00391E  5161               	movf	(EncKeySchedule@key+1)& (0+255),w,b
 34320  003920  22DA               	addwfc	fsr2h,f,c
 34321  003922  5163               	movf	(??_EncKeySchedule+1)& (0+255),w,b
 34322  003924  1ADF               	xorwf	indf2,f,c
 34323                           
 34324                           ;AES.c: 343: key[3]^=STable[key[12]];
 34325  003926  EE20 F00C          	lfsr	2,12
 34326  00392A  5160               	movf	EncKeySchedule@key& (0+255),w,b
 34327  00392C  26D9               	addwf	fsr2l,f,c
 34328  00392E  5161               	movf	(EncKeySchedule@key+1)& (0+255),w,b
 34329  003930  22DA               	addwfc	fsr2h,f,c
 34330  003932  50DF               	movf	indf2,w,c
 34331  003934  6F62               	movwf	??_EncKeySchedule& (0+255),b
 34332  003936  5162               	movf	??_EncKeySchedule& (0+255),w,b
 34333  003938  0D01               	mullw	1
 34334  00393A  0E67               	movlw	low _STable
 34335  00393C  24F3               	addwf	prodl,w,c
 34336  00393E  6EF6               	movwf	tblptrl,c
 34337  003940  0EFE               	movlw	high _STable
 34338  003942  20F4               	addwfc	prodh,w,c
 34339  003944  6EF7               	movwf	tblptrh,c
 34340  003946                     	if	1	;There are 3 active tblptr bytes
 34341  003946  6AF8               	clrf	tblptru,c
 34342  003948  0E00               	movlw	low (__mediumconst shr (0+16))
 34343  00394A  22F8               	addwfc	tblptru,f,c
 34344  00394C                     	endif
 34345  00394C  0008               	tblrd		*
 34346  00394E  CFF5 F063          	movff	tablat,??_EncKeySchedule+1
 34347  003952  EE20 F003          	lfsr	2,3
 34348  003956  5160               	movf	EncKeySchedule@key& (0+255),w,b
 34349  003958  26D9               	addwf	fsr2l,f,c
 34350  00395A  5161               	movf	(EncKeySchedule@key+1)& (0+255),w,b
 34351  00395C  22DA               	addwfc	fsr2h,f,c
 34352  00395E  5163               	movf	(??_EncKeySchedule+1)& (0+255),w,b
 34353  003960  1ADF               	xorwf	indf2,f,c
 34354                           
 34355                           ; BSR set to: 0
 34356                           ;AES.c: 345: key[0]^=_rcon;
 34357  003962  C060  FFD9         	movff	EncKeySchedule@key,fsr2l
 34358  003966  C061  FFDA         	movff	EncKeySchedule@key+1,fsr2h
 34359  00396A  5052               	movf	__rcon,w,c
 34360  00396C  1ADF               	xorwf	indf2,f,c
 34361                           
 34362                           ; BSR set to: 0
 34363                           ;AES.c: 346: _rcon = (((_rcon)<0x80)?(_rcon)<<1:(((_rcon)<<1)^0x1b) );
 34364  00396E  0E7F               	movlw	127
 34365  003970  6452               	cpfsgt	__rcon,c
 34366  003972  D00C               	goto	l1639
 34367                           
 34368                           ; BSR set to: 0
 34369  003974  0E1B               	movlw	27
 34370  003976  C052  F062         	movff	__rcon,??_EncKeySchedule
 34371  00397A  6B63               	clrf	(??_EncKeySchedule+1)& (0+255),b
 34372  00397C  90D8               	bcf	status,0,c
 34373  00397E  3762               	rlcf	??_EncKeySchedule& (0+255),f,b
 34374  003980  3763               	rlcf	(??_EncKeySchedule+1)& (0+255),f,b
 34375  003982  1962               	xorwf	??_EncKeySchedule& (0+255),w,b
 34376  003984  6F64               	movwf	_EncKeySchedule$2132& (0+255),b
 34377  003986  5163               	movf	(??_EncKeySchedule+1)& (0+255),w,b
 34378  003988  6F65               	movwf	(_EncKeySchedule$2132+1)& (0+255),b
 34379  00398A  D005               	goto	l1641
 34380  00398C                     l1639:
 34381                           
 34382                           ; BSR set to: 0
 34383                           
 34384                           ; BSR set to: 0
 34385  00398C  90D8               	bcf	status,0,c
 34386  00398E  3452               	rlcf	__rcon,w,c
 34387  003990  6F64               	movwf	_EncKeySchedule$2132& (0+255),b
 34388  003992  6B65               	clrf	(_EncKeySchedule$2132+1)& (0+255),b
 34389  003994  3765               	rlcf	(_EncKeySchedule$2132+1)& (0+255),f,b
 34390  003996                     l1641:
 34391                           
 34392                           ; BSR set to: 0
 34393                           
 34394                           ; BSR set to: 0
 34395  003996  C064  F052         	movff	_EncKeySchedule$2132,__rcon
 34396                           
 34397                           ; BSR set to: 0
 34398                           ;AES.c: 349: key[4]^=key[0];
 34399  00399A  C060  FFD9         	movff	EncKeySchedule@key,fsr2l
 34400  00399E  C061  FFDA         	movff	EncKeySchedule@key+1,fsr2h
 34401  0039A2  50DF               	movf	indf2,w,c
 34402  0039A4  6F62               	movwf	??_EncKeySchedule& (0+255),b
 34403  0039A6  EE20 F004          	lfsr	2,4
 34404  0039AA  5160               	movf	EncKeySchedule@key& (0+255),w,b
 34405  0039AC  26D9               	addwf	fsr2l,f,c
 34406  0039AE  5161               	movf	(EncKeySchedule@key+1)& (0+255),w,b
 34407  0039B0  22DA               	addwfc	fsr2h,f,c
 34408  0039B2  5162               	movf	??_EncKeySchedule& (0+255),w,b
 34409  0039B4  1ADF               	xorwf	indf2,f,c
 34410                           
 34411                           ; BSR set to: 0
 34412                           ;AES.c: 350: key[5]^=key[1];
 34413  0039B6  EE20 F001          	lfsr	2,1
 34414  0039BA  5160               	movf	EncKeySchedule@key& (0+255),w,b
 34415  0039BC  26D9               	addwf	fsr2l,f,c
 34416  0039BE  5161               	movf	(EncKeySchedule@key+1)& (0+255),w,b
 34417  0039C0  22DA               	addwfc	fsr2h,f,c
 34418  0039C2  50DF               	movf	indf2,w,c
 34419  0039C4  6F62               	movwf	??_EncKeySchedule& (0+255),b
 34420  0039C6  EE20 F005          	lfsr	2,5
 34421  0039CA  5160               	movf	EncKeySchedule@key& (0+255),w,b
 34422  0039CC  26D9               	addwf	fsr2l,f,c
 34423  0039CE  5161               	movf	(EncKeySchedule@key+1)& (0+255),w,b
 34424  0039D0  22DA               	addwfc	fsr2h,f,c
 34425  0039D2  5162               	movf	??_EncKeySchedule& (0+255),w,b
 34426  0039D4  1ADF               	xorwf	indf2,f,c
 34427                           
 34428                           ; BSR set to: 0
 34429                           ;AES.c: 351: key[6]^=key[2];
 34430  0039D6  EE20 F002          	lfsr	2,2
 34431  0039DA  5160               	movf	EncKeySchedule@key& (0+255),w,b
 34432  0039DC  26D9               	addwf	fsr2l,f,c
 34433  0039DE  5161               	movf	(EncKeySchedule@key+1)& (0+255),w,b
 34434  0039E0  22DA               	addwfc	fsr2h,f,c
 34435  0039E2  50DF               	movf	indf2,w,c
 34436  0039E4  6F62               	movwf	??_EncKeySchedule& (0+255),b
 34437  0039E6  EE20 F006          	lfsr	2,6
 34438  0039EA  5160               	movf	EncKeySchedule@key& (0+255),w,b
 34439  0039EC  26D9               	addwf	fsr2l,f,c
 34440  0039EE  5161               	movf	(EncKeySchedule@key+1)& (0+255),w,b
 34441  0039F0  22DA               	addwfc	fsr2h,f,c
 34442  0039F2  5162               	movf	??_EncKeySchedule& (0+255),w,b
 34443  0039F4  1ADF               	xorwf	indf2,f,c
 34444                           
 34445                           ; BSR set to: 0
 34446                           ;AES.c: 352: key[7]^=key[3];
 34447  0039F6  EE20 F003          	lfsr	2,3
 34448  0039FA  5160               	movf	EncKeySchedule@key& (0+255),w,b
 34449  0039FC  26D9               	addwf	fsr2l,f,c
 34450  0039FE  5161               	movf	(EncKeySchedule@key+1)& (0+255),w,b
 34451  003A00  22DA               	addwfc	fsr2h,f,c
 34452  003A02  50DF               	movf	indf2,w,c
 34453  003A04  6F62               	movwf	??_EncKeySchedule& (0+255),b
 34454  003A06  EE20 F007          	lfsr	2,7
 34455  003A0A  5160               	movf	EncKeySchedule@key& (0+255),w,b
 34456  003A0C  26D9               	addwf	fsr2l,f,c
 34457  003A0E  5161               	movf	(EncKeySchedule@key+1)& (0+255),w,b
 34458  003A10  22DA               	addwfc	fsr2h,f,c
 34459  003A12  5162               	movf	??_EncKeySchedule& (0+255),w,b
 34460  003A14  1ADF               	xorwf	indf2,f,c
 34461                           
 34462                           ; BSR set to: 0
 34463                           ;AES.c: 355: key[8]^=key[4];
 34464  003A16  EE20 F004          	lfsr	2,4
 34465  003A1A  5160               	movf	EncKeySchedule@key& (0+255),w,b
 34466  003A1C  26D9               	addwf	fsr2l,f,c
 34467  003A1E  5161               	movf	(EncKeySchedule@key+1)& (0+255),w,b
 34468  003A20  22DA               	addwfc	fsr2h,f,c
 34469  003A22  50DF               	movf	indf2,w,c
 34470  003A24  6F62               	movwf	??_EncKeySchedule& (0+255),b
 34471  003A26  EE20 F008          	lfsr	2,8
 34472  003A2A  5160               	movf	EncKeySchedule@key& (0+255),w,b
 34473  003A2C  26D9               	addwf	fsr2l,f,c
 34474  003A2E  5161               	movf	(EncKeySchedule@key+1)& (0+255),w,b
 34475  003A30  22DA               	addwfc	fsr2h,f,c
 34476  003A32  5162               	movf	??_EncKeySchedule& (0+255),w,b
 34477  003A34  1ADF               	xorwf	indf2,f,c
 34478                           
 34479                           ; BSR set to: 0
 34480                           ;AES.c: 356: key[9]^=key[5];
 34481  003A36  EE20 F005          	lfsr	2,5
 34482  003A3A  5160               	movf	EncKeySchedule@key& (0+255),w,b
 34483  003A3C  26D9               	addwf	fsr2l,f,c
 34484  003A3E  5161               	movf	(EncKeySchedule@key+1)& (0+255),w,b
 34485  003A40  22DA               	addwfc	fsr2h,f,c
 34486  003A42  50DF               	movf	indf2,w,c
 34487  003A44  6F62               	movwf	??_EncKeySchedule& (0+255),b
 34488  003A46  EE20 F009          	lfsr	2,9
 34489  003A4A  5160               	movf	EncKeySchedule@key& (0+255),w,b
 34490  003A4C  26D9               	addwf	fsr2l,f,c
 34491  003A4E  5161               	movf	(EncKeySchedule@key+1)& (0+255),w,b
 34492  003A50  22DA               	addwfc	fsr2h,f,c
 34493  003A52  5162               	movf	??_EncKeySchedule& (0+255),w,b
 34494  003A54  1ADF               	xorwf	indf2,f,c
 34495                           
 34496                           ; BSR set to: 0
 34497                           ;AES.c: 357: key[10]^=key[6];
 34498  003A56  EE20 F006          	lfsr	2,6
 34499  003A5A  5160               	movf	EncKeySchedule@key& (0+255),w,b
 34500  003A5C  26D9               	addwf	fsr2l,f,c
 34501  003A5E  5161               	movf	(EncKeySchedule@key+1)& (0+255),w,b
 34502  003A60  22DA               	addwfc	fsr2h,f,c
 34503  003A62  50DF               	movf	indf2,w,c
 34504  003A64  6F62               	movwf	??_EncKeySchedule& (0+255),b
 34505  003A66  EE20 F00A          	lfsr	2,10
 34506  003A6A  5160               	movf	EncKeySchedule@key& (0+255),w,b
 34507  003A6C  26D9               	addwf	fsr2l,f,c
 34508  003A6E  5161               	movf	(EncKeySchedule@key+1)& (0+255),w,b
 34509  003A70  22DA               	addwfc	fsr2h,f,c
 34510  003A72  5162               	movf	??_EncKeySchedule& (0+255),w,b
 34511  003A74  1ADF               	xorwf	indf2,f,c
 34512                           
 34513                           ; BSR set to: 0
 34514                           ;AES.c: 358: key[11]^=key[7];
 34515  003A76  EE20 F007          	lfsr	2,7
 34516  003A7A  5160               	movf	EncKeySchedule@key& (0+255),w,b
 34517  003A7C  26D9               	addwf	fsr2l,f,c
 34518  003A7E  5161               	movf	(EncKeySchedule@key+1)& (0+255),w,b
 34519  003A80  22DA               	addwfc	fsr2h,f,c
 34520  003A82  50DF               	movf	indf2,w,c
 34521  003A84  6F62               	movwf	??_EncKeySchedule& (0+255),b
 34522  003A86  EE20 F00B          	lfsr	2,11
 34523  003A8A  5160               	movf	EncKeySchedule@key& (0+255),w,b
 34524  003A8C  26D9               	addwf	fsr2l,f,c
 34525  003A8E  5161               	movf	(EncKeySchedule@key+1)& (0+255),w,b
 34526  003A90  22DA               	addwfc	fsr2h,f,c
 34527  003A92  5162               	movf	??_EncKeySchedule& (0+255),w,b
 34528  003A94  1ADF               	xorwf	indf2,f,c
 34529                           
 34530                           ; BSR set to: 0
 34531                           ;AES.c: 361: key[12]^=key[8];
 34532  003A96  EE20 F008          	lfsr	2,8
 34533  003A9A  5160               	movf	EncKeySchedule@key& (0+255),w,b
 34534  003A9C  26D9               	addwf	fsr2l,f,c
 34535  003A9E  5161               	movf	(EncKeySchedule@key+1)& (0+255),w,b
 34536  003AA0  22DA               	addwfc	fsr2h,f,c
 34537  003AA2  50DF               	movf	indf2,w,c
 34538  003AA4  6F62               	movwf	??_EncKeySchedule& (0+255),b
 34539  003AA6  EE20 F00C          	lfsr	2,12
 34540  003AAA  5160               	movf	EncKeySchedule@key& (0+255),w,b
 34541  003AAC  26D9               	addwf	fsr2l,f,c
 34542  003AAE  5161               	movf	(EncKeySchedule@key+1)& (0+255),w,b
 34543  003AB0  22DA               	addwfc	fsr2h,f,c
 34544  003AB2  5162               	movf	??_EncKeySchedule& (0+255),w,b
 34545  003AB4  1ADF               	xorwf	indf2,f,c
 34546                           
 34547                           ; BSR set to: 0
 34548                           ;AES.c: 362: key[13]^=key[9];
 34549  003AB6  EE20 F009          	lfsr	2,9
 34550  003ABA  5160               	movf	EncKeySchedule@key& (0+255),w,b
 34551  003ABC  26D9               	addwf	fsr2l,f,c
 34552  003ABE  5161               	movf	(EncKeySchedule@key+1)& (0+255),w,b
 34553  003AC0  22DA               	addwfc	fsr2h,f,c
 34554  003AC2  50DF               	movf	indf2,w,c
 34555  003AC4  6F62               	movwf	??_EncKeySchedule& (0+255),b
 34556  003AC6  EE20 F00D          	lfsr	2,13
 34557  003ACA  5160               	movf	EncKeySchedule@key& (0+255),w,b
 34558  003ACC  26D9               	addwf	fsr2l,f,c
 34559  003ACE  5161               	movf	(EncKeySchedule@key+1)& (0+255),w,b
 34560  003AD0  22DA               	addwfc	fsr2h,f,c
 34561  003AD2  5162               	movf	??_EncKeySchedule& (0+255),w,b
 34562  003AD4  1ADF               	xorwf	indf2,f,c
 34563                           
 34564                           ; BSR set to: 0
 34565                           ;AES.c: 363: key[14]^=key[10];
 34566  003AD6  EE20 F00A          	lfsr	2,10
 34567  003ADA  5160               	movf	EncKeySchedule@key& (0+255),w,b
 34568  003ADC  26D9               	addwf	fsr2l,f,c
 34569  003ADE  5161               	movf	(EncKeySchedule@key+1)& (0+255),w,b
 34570  003AE0  22DA               	addwfc	fsr2h,f,c
 34571  003AE2  50DF               	movf	indf2,w,c
 34572  003AE4  6F62               	movwf	??_EncKeySchedule& (0+255),b
 34573  003AE6  EE20 F00E          	lfsr	2,14
 34574  003AEA  5160               	movf	EncKeySchedule@key& (0+255),w,b
 34575  003AEC  26D9               	addwf	fsr2l,f,c
 34576  003AEE  5161               	movf	(EncKeySchedule@key+1)& (0+255),w,b
 34577  003AF0  22DA               	addwfc	fsr2h,f,c
 34578  003AF2  5162               	movf	??_EncKeySchedule& (0+255),w,b
 34579  003AF4  1ADF               	xorwf	indf2,f,c
 34580                           
 34581                           ; BSR set to: 0
 34582                           ;AES.c: 364: key[15]^=key[11];
 34583  003AF6  EE20 F00B          	lfsr	2,11
 34584  003AFA  5160               	movf	EncKeySchedule@key& (0+255),w,b
 34585  003AFC  26D9               	addwf	fsr2l,f,c
 34586  003AFE  5161               	movf	(EncKeySchedule@key+1)& (0+255),w,b
 34587  003B00  22DA               	addwfc	fsr2h,f,c
 34588  003B02  50DF               	movf	indf2,w,c
 34589  003B04  6F62               	movwf	??_EncKeySchedule& (0+255),b
 34590  003B06  EE20 F00F          	lfsr	2,15
 34591  003B0A  5160               	movf	EncKeySchedule@key& (0+255),w,b
 34592  003B0C  26D9               	addwf	fsr2l,f,c
 34593  003B0E  5161               	movf	(EncKeySchedule@key+1)& (0+255),w,b
 34594  003B10  22DA               	addwfc	fsr2h,f,c
 34595  003B12  5162               	movf	??_EncKeySchedule& (0+255),w,b
 34596  003B14  1ADF               	xorwf	indf2,f,c
 34597                           
 34598                           ; BSR set to: 0
 34599  003B16  0012               	return		;funcret
 34600  003B18                     __end_of_EncKeySchedule:
 34601                           	opt stack 0
 34602                           tosu	equ	0xFFF
 34603                           tosh	equ	0xFFE
 34604                           tosl	equ	0xFFD
 34605                           pclath	equ	0xFFA
 34606                           tblptru	equ	0xFF8
 34607                           tblptrh	equ	0xFF7
 34608                           tblptrl	equ	0xFF6
 34609                           tablat	equ	0xFF5
 34610                           prodh	equ	0xFF4
 34611                           prodl	equ	0xFF3
 34612                           intcon	equ	0xFF2
 34613                           intcon2	equ	0xFF1
 34614                           intcon3	equ	0xFF0
 34615                           indf0	equ	0xFEF
 34616                           postinc0	equ	0xFEE
 34617                           plusw0	equ	0xFEB
 34618                           fsr0h	equ	0xFEA
 34619                           fsr0l	equ	0xFE9
 34620                           wreg	equ	0xFE8
 34621                           postinc1	equ	0xFE6
 34622                           postdec1	equ	0xFE5
 34623                           plusw1	equ	0xFE3
 34624                           fsr1h	equ	0xFE2
 34625                           fsr1l	equ	0xFE1
 34626                           indf2	equ	0xFDF
 34627                           postinc2	equ	0xFDE
 34628                           postdec2	equ	0xFDD
 34629                           plusw2	equ	0xFDB
 34630                           fsr2h	equ	0xFDA
 34631                           fsr2l	equ	0xFD9
 34632                           status	equ	0xFD8
 34633                           
 34634 ;; *************** function _LORAWAN_Init *****************
 34635 ;; Defined at:
 34636 ;;		line 123 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 34637 ;; Parameters:    Size  Location     Type
 34638 ;;  RxPayload       2   82[BANK0 ] PTR FTN(PTR unsigned cha
 34639 ;;		 -> RxData(1), 
 34640 ;;  RxJoinRespon    2   84[BANK0 ] PTR FTN(unsigned char ,)
 34641 ;;		 -> RxJoinResponse(1), 
 34642 ;; Auto vars:     Size  Location     Type
 34643 ;;		None
 34644 ;; Return value:  Size  Location     Type
 34645 ;;                  1    wreg      void 
 34646 ;; Registers used:
 34647 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 34648 ;; Tracked objects:
 34649 ;;		On entry : 0/0
 34650 ;;		On exit  : 0/0
 34651 ;;		Unchanged: 0/0
 34652 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 34653 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34654 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34655 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34656 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34657 ;;Total ram usage:        4 bytes
 34658 ;; Hardware stack levels used:    1
 34659 ;; Hardware stack levels required when called:   13
 34660 ;; This function calls:
 34661 ;;		_CreateAllSoftwareTimers
 34662 ;;		_LORAWAN_Reset
 34663 ;;		_RADIO_Init
 34664 ;;		_RADIO_ReadRandom
 34665 ;;		_SetCallbackSoftwareTimers
 34666 ;;		_StopAllSoftwareTimers
 34667 ;;		_srand
 34668 ;; This function is called by:
 34669 ;;		_main
 34670 ;; This function uses a non-reentrant model
 34671 ;;
 34672                           
 34673                           	psect	text159
 34674  0081AC                     __ptext159:
 34675                           	opt stack 0
 34676  0081AC                     _LORAWAN_Init:
 34677                           	opt stack 17
 34678                           
 34679                           ;lorawan_eu.c: 126: if (loRa.macInitialized == 0)
 34680                           
 34681                           ; BSR set to: 0
 34682                           ;incstack = 0
 34683  0081AC  0102               	movlb	2	; () banked
 34684  0081AE  51FA               	movf	(_loRa+240)& (0+255),w,b
 34685  0081B0  A4D8               	btfss	status,2,c
 34686  0081B2  D008               	goto	l1806
 34687                           
 34688                           ; BSR set to: 2
 34689                           ;lorawan_eu.c: 127: {
 34690                           ;lorawan_eu.c: 128: CreateAllSoftwareTimers ();
 34691  0081B4  EC76  F043         	call	_CreateAllSoftwareTimers	;wreg free
 34692                           
 34693                           ;lorawan_eu.c: 129: SetCallbackSoftwareTimers ();
 34694  0081B8  EC96  F035         	call	_SetCallbackSoftwareTimers	;wreg free
 34695                           
 34696                           ;lorawan_eu.c: 130: loRa.macInitialized = 1;
 34697  0081BC  0E01               	movlw	1
 34698  0081BE  0102               	movlb	2	; () banked
 34699  0081C0  6FFA               	movwf	(_loRa+240)& (0+255),b
 34700                           
 34701                           ;lorawan_eu.c: 131: }
 34702  0081C2  D002               	goto	l1807
 34703  0081C4                     l1806:
 34704                           
 34705                           ; BSR set to: 2
 34706                           ;lorawan_eu.c: 132: else
 34707                           ;lorawan_eu.c: 133: {
 34708                           ;lorawan_eu.c: 134: StopAllSoftwareTimers ();
 34709                           
 34710                           ; BSR set to: 2
 34711  0081C4  EC4D  F043         	call	_StopAllSoftwareTimers	;wreg free
 34712  0081C8                     l1807:
 34713                           
 34714                           ;lorawan_eu.c: 135: }
 34715                           ;lorawan_eu.c: 137: rxPayload.RxAppData = RxPayload;
 34716  0081C8  C0B2  F10C         	movff	LORAWAN_Init@RxPayload,_rxPayload
 34717  0081CC  C0B3  F10D         	movff	LORAWAN_Init@RxPayload+1,_rxPayload+1
 34718                           
 34719                           ;lorawan_eu.c: 138: rxPayload.RxJoinResponse = RxJoinResponse;
 34720  0081D0  C0B4  F10E         	movff	LORAWAN_Init@RxJoinResponse,_rxPayload+2
 34721  0081D4  C0B5  F10F         	movff	LORAWAN_Init@RxJoinResponse+1,_rxPayload+3
 34722                           
 34723                           ;lorawan_eu.c: 140: RADIO_Init(&radioBuffer[16], (868100000));
 34724  0081D8  0E90               	movlw	low (_radioBuffer+16)
 34725  0081DA  0100               	movlb	0	; () banked
 34726  0081DC  6F79               	movwf	RADIO_Init@radioBuffer& (0+255),b
 34727  0081DE  0E05               	movlw	high (_radioBuffer+16)
 34728  0081E0  6F7A               	movwf	(RADIO_Init@radioBuffer+1)& (0+255),b
 34729  0081E2  0EA0               	movlw	160
 34730  0081E4  6F7B               	movwf	RADIO_Init@frequency& (0+255),b
 34731  0081E6  0E27               	movlw	39
 34732  0081E8  6F7C               	movwf	(RADIO_Init@frequency+1)& (0+255),b
 34733  0081EA  0EBE               	movlw	190
 34734  0081EC  6F7D               	movwf	(RADIO_Init@frequency+2)& (0+255),b
 34735  0081EE  0E33               	movlw	51
 34736  0081F0  6F7E               	movwf	(RADIO_Init@frequency+3)& (0+255),b
 34737  0081F2  EC13  F025         	call	_RADIO_Init	;wreg free
 34738                           
 34739                           ;lorawan_eu.c: 142: srand (RADIO_ReadRandom ());
 34740  0081F6  EC14  F03A         	call	_RADIO_ReadRandom	;wreg free
 34741  0081FA  C06C  F072         	movff	?_RADIO_ReadRandom,srand@x
 34742  0081FE  C06D  F073         	movff	?_RADIO_ReadRandom+1,srand@x+1
 34743  008202  EC09  F04A         	call	_srand	;wreg free
 34744                           
 34745                           ;lorawan_eu.c: 144: LORAWAN_Reset (ISM_EU868);
 34746  008206  0E00               	movlw	0
 34747  008208  EC2C  F024         	call	_LORAWAN_Reset
 34748  00820C  0012               	return		;funcret
 34749  00820E                     __end_of_LORAWAN_Init:
 34750                           	opt stack 0
 34751                           tosu	equ	0xFFF
 34752                           tosh	equ	0xFFE
 34753                           tosl	equ	0xFFD
 34754                           pclath	equ	0xFFA
 34755                           tblptru	equ	0xFF8
 34756                           tblptrh	equ	0xFF7
 34757                           tblptrl	equ	0xFF6
 34758                           tablat	equ	0xFF5
 34759                           prodh	equ	0xFF4
 34760                           prodl	equ	0xFF3
 34761                           intcon	equ	0xFF2
 34762                           intcon2	equ	0xFF1
 34763                           intcon3	equ	0xFF0
 34764                           indf0	equ	0xFEF
 34765                           postinc0	equ	0xFEE
 34766                           plusw0	equ	0xFEB
 34767                           fsr0h	equ	0xFEA
 34768                           fsr0l	equ	0xFE9
 34769                           wreg	equ	0xFE8
 34770                           postinc1	equ	0xFE6
 34771                           postdec1	equ	0xFE5
 34772                           plusw1	equ	0xFE3
 34773                           fsr1h	equ	0xFE2
 34774                           fsr1l	equ	0xFE1
 34775                           indf2	equ	0xFDF
 34776                           postinc2	equ	0xFDE
 34777                           postdec2	equ	0xFDD
 34778                           plusw2	equ	0xFDB
 34779                           fsr2h	equ	0xFDA
 34780                           fsr2l	equ	0xFD9
 34781                           status	equ	0xFD8
 34782                           
 34783 ;; *************** function _srand *****************
 34784 ;; Defined at:
 34785 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\rand.c"
 34786 ;; Parameters:    Size  Location     Type
 34787 ;;  x               2   18[BANK0 ] unsigned int 
 34788 ;; Auto vars:     Size  Location     Type
 34789 ;;		None
 34790 ;; Return value:  Size  Location     Type
 34791 ;;                  1    wreg      void 
 34792 ;; Registers used:
 34793 ;;		status,2
 34794 ;; Tracked objects:
 34795 ;;		On entry : 0/0
 34796 ;;		On exit  : 0/0
 34797 ;;		Unchanged: 0/0
 34798 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 34799 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34800 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34801 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34802 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34803 ;;Total ram usage:        2 bytes
 34804 ;; Hardware stack levels used:    1
 34805 ;; Hardware stack levels required when called:    7
 34806 ;; This function calls:
 34807 ;;		Nothing
 34808 ;; This function is called by:
 34809 ;;		_LORAWAN_Init
 34810 ;; This function uses a non-reentrant model
 34811 ;;
 34812                           
 34813                           	psect	text160
 34814  009412                     __ptext160:
 34815                           	opt stack 0
 34816  009412                     _srand:
 34817                           	opt stack 22
 34818                           
 34819                           ;incstack = 0
 34820  009412  C072  F1F6         	movff	srand@x,_randx
 34821  009416  C073  F1F7         	movff	srand@x+1,_randx+1
 34822  00941A  0101               	movlb	1	; () banked
 34823  00941C  6BF8               	clrf	(_randx+2)& (0+255),b
 34824  00941E  6BF9               	clrf	(_randx+3)& (0+255),b
 34825                           
 34826                           ; BSR set to: 1
 34827  009420  0012               	return		;funcret
 34828  009422                     __end_of_srand:
 34829                           	opt stack 0
 34830                           tosu	equ	0xFFF
 34831                           tosh	equ	0xFFE
 34832                           tosl	equ	0xFFD
 34833                           pclath	equ	0xFFA
 34834                           tblptru	equ	0xFF8
 34835                           tblptrh	equ	0xFF7
 34836                           tblptrl	equ	0xFF6
 34837                           tablat	equ	0xFF5
 34838                           prodh	equ	0xFF4
 34839                           prodl	equ	0xFF3
 34840                           intcon	equ	0xFF2
 34841                           intcon2	equ	0xFF1
 34842                           intcon3	equ	0xFF0
 34843                           indf0	equ	0xFEF
 34844                           postinc0	equ	0xFEE
 34845                           plusw0	equ	0xFEB
 34846                           fsr0h	equ	0xFEA
 34847                           fsr0l	equ	0xFE9
 34848                           wreg	equ	0xFE8
 34849                           postinc1	equ	0xFE6
 34850                           postdec1	equ	0xFE5
 34851                           plusw1	equ	0xFE3
 34852                           fsr1h	equ	0xFE2
 34853                           fsr1l	equ	0xFE1
 34854                           indf2	equ	0xFDF
 34855                           postinc2	equ	0xFDE
 34856                           postdec2	equ	0xFDD
 34857                           plusw2	equ	0xFDB
 34858                           fsr2h	equ	0xFDA
 34859                           fsr2l	equ	0xFD9
 34860                           status	equ	0xFD8
 34861                           
 34862 ;; *************** function _SetCallbackSoftwareTimers *****************
 34863 ;; Defined at:
 34864 ;;		line 951 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 34865 ;; Parameters:    Size  Location     Type
 34866 ;;		None
 34867 ;; Auto vars:     Size  Location     Type
 34868 ;;		None
 34869 ;; Return value:  Size  Location     Type
 34870 ;;                  1    wreg      void 
 34871 ;; Registers used:
 34872 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 34873 ;; Tracked objects:
 34874 ;;		On entry : 0/0
 34875 ;;		On exit  : 0/0
 34876 ;;		Unchanged: 0/0
 34877 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 34878 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34879 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34880 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34881 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34882 ;;Total ram usage:        0 bytes
 34883 ;; Hardware stack levels used:    1
 34884 ;; Hardware stack levels required when called:    8
 34885 ;; This function calls:
 34886 ;;		_SwTimerSetCallback
 34887 ;; This function is called by:
 34888 ;;		_LORAWAN_Init
 34889 ;; This function uses a non-reentrant model
 34890 ;;
 34891                           
 34892                           	psect	text161
 34893  006B2C                     __ptext161:
 34894                           	opt stack 0
 34895  006B2C                     _SetCallbackSoftwareTimers:
 34896                           	opt stack 21
 34897                           
 34898                           ;lorawan_eu.c: 953: SwTimerSetCallback(loRa.joinAccept1TimerId, LORAWAN_ReceiveWindow1Ca
      +                          llback, 0);
 34899                           
 34900                           ; BSR set to: 1
 34901                           ;incstack = 0
 34902  006B2C  0E16               	movlw	low _LORAWAN_ReceiveWindow1Callback
 34903  006B2E  0100               	movlb	0	; () banked
 34904  006B30  6F60               	movwf	SwTimerSetCallback@callback& (0+255),b
 34905  006B32  0E70               	movlw	high _LORAWAN_ReceiveWindow1Callback
 34906  006B34  6F61               	movwf	(SwTimerSetCallback@callback+1)& (0+255),b
 34907  006B36  0E00               	movlw	0
 34908  006B38  6F62               	movwf	SwTimerSetCallback@callbackParameter& (0+255),b
 34909  006B3A  0102               	movlb	2	; () banked
 34910  006B3C  51EC               	movf	(_loRa+226)& (0+255),w,b
 34911  006B3E  ECDF  F044         	call	_SwTimerSetCallback
 34912                           
 34913                           ;lorawan_eu.c: 954: SwTimerSetCallback(loRa.joinAccept2TimerId, LORAWAN_ReceiveWindow2Ca
      +                          llback, 0);
 34914  006B42  0E0A               	movlw	low _LORAWAN_ReceiveWindow2Callback
 34915  006B44  0100               	movlb	0	; () banked
 34916  006B46  6F60               	movwf	SwTimerSetCallback@callback& (0+255),b
 34917  006B48  0E6C               	movlw	high _LORAWAN_ReceiveWindow2Callback
 34918  006B4A  6F61               	movwf	(SwTimerSetCallback@callback+1)& (0+255),b
 34919  006B4C  0E00               	movlw	0
 34920  006B4E  6F62               	movwf	SwTimerSetCallback@callbackParameter& (0+255),b
 34921  006B50  0102               	movlb	2	; () banked
 34922  006B52  51ED               	movf	(_loRa+227)& (0+255),w,b
 34923  006B54  ECDF  F044         	call	_SwTimerSetCallback
 34924                           
 34925                           ;lorawan_eu.c: 955: SwTimerSetCallback(loRa.linkCheckTimerId, LORAWAN_LinkCheckCallback,
      +                           0);
 34926  006B58  0E3A               	movlw	low _LORAWAN_LinkCheckCallback
 34927  006B5A  0100               	movlb	0	; () banked
 34928  006B5C  6F60               	movwf	SwTimerSetCallback@callback& (0+255),b
 34929  006B5E  0E52               	movlw	high _LORAWAN_LinkCheckCallback
 34930  006B60  6F61               	movwf	(SwTimerSetCallback@callback+1)& (0+255),b
 34931  006B62  0E00               	movlw	0
 34932  006B64  6F62               	movwf	SwTimerSetCallback@callbackParameter& (0+255),b
 34933  006B66  0102               	movlb	2	; () banked
 34934  006B68  51F1               	movf	(_loRa+231)& (0+255),w,b
 34935  006B6A  ECDF  F044         	call	_SwTimerSetCallback
 34936                           
 34937                           ;lorawan_eu.c: 956: SwTimerSetCallback(loRa.receiveWindow1TimerId, LORAWAN_ReceiveWindow
      +                          1Callback, 0);
 34938  006B6E  0E16               	movlw	low _LORAWAN_ReceiveWindow1Callback
 34939  006B70  0100               	movlb	0	; () banked
 34940  006B72  6F60               	movwf	SwTimerSetCallback@callback& (0+255),b
 34941  006B74  0E70               	movlw	high _LORAWAN_ReceiveWindow1Callback
 34942  006B76  6F61               	movwf	(SwTimerSetCallback@callback+1)& (0+255),b
 34943  006B78  0E00               	movlw	0
 34944  006B7A  6F62               	movwf	SwTimerSetCallback@callbackParameter& (0+255),b
 34945  006B7C  0102               	movlb	2	; () banked
 34946  006B7E  51EE               	movf	(_loRa+228)& (0+255),w,b
 34947  006B80  ECDF  F044         	call	_SwTimerSetCallback
 34948                           
 34949                           ;lorawan_eu.c: 957: SwTimerSetCallback(loRa.receiveWindow2TimerId, LORAWAN_ReceiveWindow
      +                          2Callback, 0);
 34950  006B84  0E0A               	movlw	low _LORAWAN_ReceiveWindow2Callback
 34951  006B86  0100               	movlb	0	; () banked
 34952  006B88  6F60               	movwf	SwTimerSetCallback@callback& (0+255),b
 34953  006B8A  0E6C               	movlw	high _LORAWAN_ReceiveWindow2Callback
 34954  006B8C  6F61               	movwf	(SwTimerSetCallback@callback+1)& (0+255),b
 34955  006B8E  0E00               	movlw	0
 34956  006B90  6F62               	movwf	SwTimerSetCallback@callbackParameter& (0+255),b
 34957  006B92  0102               	movlb	2	; () banked
 34958  006B94  51EF               	movf	(_loRa+229)& (0+255),w,b
 34959  006B96  ECDF  F044         	call	_SwTimerSetCallback
 34960                           
 34961                           ;lorawan_eu.c: 958: SwTimerSetCallback(loRa.ackTimeoutTimerId, AckRetransmissionCallback
      +                          , 0);
 34962  006B9A  0E90               	movlw	low _AckRetransmissionCallback
 34963  006B9C  0100               	movlb	0	; () banked
 34964  006B9E  6F60               	movwf	SwTimerSetCallback@callback& (0+255),b
 34965  006BA0  0E60               	movlw	high _AckRetransmissionCallback
 34966  006BA2  6F61               	movwf	(SwTimerSetCallback@callback+1)& (0+255),b
 34967  006BA4  0E00               	movlw	0
 34968  006BA6  6F62               	movwf	SwTimerSetCallback@callbackParameter& (0+255),b
 34969  006BA8  0102               	movlb	2	; () banked
 34970  006BAA  51F2               	movf	(_loRa+232)& (0+255),w,b
 34971  006BAC  ECDF  F044         	call	_SwTimerSetCallback
 34972                           
 34973                           ;lorawan_eu.c: 959: SwTimerSetCallback(loRa.automaticReplyTimerId, AutomaticReplyCallbac
      +                          k, 0);
 34974  006BB0  0E44               	movlw	low _AutomaticReplyCallback
 34975  006BB2  0100               	movlb	0	; () banked
 34976  006BB4  6F60               	movwf	SwTimerSetCallback@callback& (0+255),b
 34977  006BB6  0E90               	movlw	high _AutomaticReplyCallback
 34978  006BB8  6F61               	movwf	(SwTimerSetCallback@callback+1)& (0+255),b
 34979  006BBA  0E00               	movlw	0
 34980  006BBC  6F62               	movwf	SwTimerSetCallback@callbackParameter& (0+255),b
 34981  006BBE  0102               	movlb	2	; () banked
 34982  006BC0  51F0               	movf	(_loRa+230)& (0+255),w,b
 34983  006BC2  ECDF  F044         	call	_SwTimerSetCallback
 34984                           
 34985                           ;lorawan_eu.c: 960: SwTimerSetCallback(loRa.unconfirmedRetransmisionTimerId, Unconfirmed
      +                          TransmissionCallback, 0);
 34986  006BC6  0E4A               	movlw	low _UnconfirmedTransmissionCallback
 34987  006BC8  0100               	movlb	0	; () banked
 34988  006BCA  6F60               	movwf	SwTimerSetCallback@callback& (0+255),b
 34989  006BCC  0E7C               	movlw	high _UnconfirmedTransmissionCallback
 34990  006BCE  6F61               	movwf	(SwTimerSetCallback@callback+1)& (0+255),b
 34991  006BD0  0E00               	movlw	0
 34992  006BD2  6F62               	movwf	SwTimerSetCallback@callbackParameter& (0+255),b
 34993  006BD4  0102               	movlb	2	; () banked
 34994  006BD6  51F4               	movf	(_loRa+234)& (0+255),w,b
 34995  006BD8  ECDF  F044         	call	_SwTimerSetCallback
 34996                           
 34997                           ;lorawan_eu.c: 961: SwTimerSetCallback(loRa.abpJoinTimerId, UpdateJoinSuccessState, 0);
 34998  006BDC  0ED4               	movlw	low _UpdateJoinSuccessState
 34999  006BDE  0100               	movlb	0	; () banked
 35000  006BE0  6F60               	movwf	SwTimerSetCallback@callback& (0+255),b
 35001  006BE2  0E5B               	movlw	high _UpdateJoinSuccessState
 35002  006BE4  6F61               	movwf	(SwTimerSetCallback@callback+1)& (0+255),b
 35003  006BE6  0E00               	movlw	0
 35004  006BE8  6F62               	movwf	SwTimerSetCallback@callbackParameter& (0+255),b
 35005  006BEA  0102               	movlb	2	; () banked
 35006  006BEC  51FD               	movf	(_loRa+243)& (0+255),w,b
 35007  006BEE  ECDF  F044         	call	_SwTimerSetCallback
 35008                           
 35009                           ;lorawan_eu.c: 962: SwTimerSetCallback (loRa.dutyCycleTimerId, DutyCycleCallback, 0);
 35010  006BF2  0EB0               	movlw	low _DutyCycleCallback
 35011  006BF4  0100               	movlb	0	; () banked
 35012  006BF6  6F60               	movwf	SwTimerSetCallback@callback& (0+255),b
 35013  006BF8  0E2F               	movlw	high _DutyCycleCallback
 35014  006BFA  6F61               	movwf	(SwTimerSetCallback@callback+1)& (0+255),b
 35015  006BFC  0E00               	movlw	0
 35016  006BFE  6F62               	movwf	SwTimerSetCallback@callbackParameter& (0+255),b
 35017  006C00  0102               	movlb	2	; () banked
 35018  006C02  51F3               	movf	(_loRa+233)& (0+255),w,b
 35019  006C04  ECDF  F044         	call	_SwTimerSetCallback
 35020  006C08  0012               	return		;funcret
 35021  006C0A                     __end_of_SetCallbackSoftwareTimers:
 35022                           	opt stack 0
 35023                           tosu	equ	0xFFF
 35024                           tosh	equ	0xFFE
 35025                           tosl	equ	0xFFD
 35026                           pclath	equ	0xFFA
 35027                           tblptru	equ	0xFF8
 35028                           tblptrh	equ	0xFF7
 35029                           tblptrl	equ	0xFF6
 35030                           tablat	equ	0xFF5
 35031                           prodh	equ	0xFF4
 35032                           prodl	equ	0xFF3
 35033                           intcon	equ	0xFF2
 35034                           intcon2	equ	0xFF1
 35035                           intcon3	equ	0xFF0
 35036                           indf0	equ	0xFEF
 35037                           postinc0	equ	0xFEE
 35038                           plusw0	equ	0xFEB
 35039                           fsr0h	equ	0xFEA
 35040                           fsr0l	equ	0xFE9
 35041                           wreg	equ	0xFE8
 35042                           postinc1	equ	0xFE6
 35043                           postdec1	equ	0xFE5
 35044                           plusw1	equ	0xFE3
 35045                           fsr1h	equ	0xFE2
 35046                           fsr1l	equ	0xFE1
 35047                           indf2	equ	0xFDF
 35048                           postinc2	equ	0xFDE
 35049                           postdec2	equ	0xFDD
 35050                           plusw2	equ	0xFDB
 35051                           fsr2h	equ	0xFDA
 35052                           fsr2l	equ	0xFD9
 35053                           status	equ	0xFD8
 35054                           
 35055 ;; *************** function _RADIO_ReadRandom *****************
 35056 ;; Defined at:
 35057 ;;		line 1367 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 35058 ;; Parameters:    Size  Location     Type
 35059 ;;		None
 35060 ;; Auto vars:     Size  Location     Type
 35061 ;;  retVal          2   15[BANK0 ] unsigned int 
 35062 ;;  i               1   17[BANK0 ] unsigned char 
 35063 ;; Return value:  Size  Location     Type
 35064 ;;                  2   12[BANK0 ] unsigned int 
 35065 ;; Registers used:
 35066 ;;		wreg, status,2, status,0, cstack
 35067 ;; Tracked objects:
 35068 ;;		On entry : 0/0
 35069 ;;		On exit  : 0/0
 35070 ;;		Unchanged: 0/0
 35071 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 35072 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35073 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35074 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35075 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35076 ;;Total ram usage:        6 bytes
 35077 ;; Hardware stack levels used:    1
 35078 ;; Hardware stack levels required when called:   11
 35079 ;; This function calls:
 35080 ;;		_RADIO_RegisterRead
 35081 ;;		_RADIO_RegisterWrite
 35082 ;;		_RADIO_WriteMode
 35083 ;;		_SystemBlockingWaitMs
 35084 ;; This function is called by:
 35085 ;;		_LORAWAN_Init
 35086 ;; This function uses a non-reentrant model
 35087 ;;
 35088                           
 35089                           	psect	text162
 35090  007428                     __ptext162:
 35091                           	opt stack 0
 35092  007428                     _RADIO_ReadRandom:
 35093                           	opt stack 18
 35094                           
 35095                           ;radio_driver_SX1276.c: 1369: uint8_t i;
 35096                           ;radio_driver_SX1276.c: 1370: uint16_t retVal;
 35097                           ;radio_driver_SX1276.c: 1371: retVal = 0;
 35098                           
 35099                           ;incstack = 0
 35100  007428  0E00               	movlw	0
 35101  00742A  0100               	movlb	0	; () banked
 35102  00742C  6F70               	movwf	(RADIO_ReadRandom@retVal+1)& (0+255),b
 35103  00742E  0E00               	movlw	0
 35104  007430  6F6F               	movwf	RADIO_ReadRandom@retVal& (0+255),b
 35105                           
 35106                           ; BSR set to: 0
 35107                           ;radio_driver_SX1276.c: 1373: RADIO_WriteMode(MODE_SLEEP, MODULATION_LORA, 1);
 35108  007432  0E01               	movlw	1
 35109  007434  6F65               	movwf	RADIO_WriteMode@newModulation& (0+255),b
 35110  007436  0E01               	movlw	1
 35111  007438  6F66               	movwf	RADIO_WriteMode@blocking& (0+255),b
 35112  00743A  0E00               	movlw	0
 35113  00743C  ECDA  F031         	call	_RADIO_WriteMode
 35114                           
 35115                           ;radio_driver_SX1276.c: 1374: RADIO_RegisterWrite(0x11, 0xFF);
 35116  007440  0EFF               	movlw	255
 35117  007442  0100               	movlb	0	; () banked
 35118  007444  6F62               	movwf	RADIO_RegisterWrite@value& (0+255),b
 35119  007446  0E11               	movlw	17
 35120  007448  ECBE  F048         	call	_RADIO_RegisterWrite
 35121                           
 35122                           ;radio_driver_SX1276.c: 1375: RADIO_WriteMode(MODE_RXCONT, MODULATION_LORA, 1);
 35123  00744C  0E01               	movlw	1
 35124  00744E  0100               	movlb	0	; () banked
 35125  007450  6F65               	movwf	RADIO_WriteMode@newModulation& (0+255),b
 35126  007452  0E01               	movlw	1
 35127  007454  6F66               	movwf	RADIO_WriteMode@blocking& (0+255),b
 35128  007456  0E05               	movlw	5
 35129  007458  ECDA  F031         	call	_RADIO_WriteMode
 35130                           
 35131                           ;radio_driver_SX1276.c: 1376: for (i = 0; i < 16; i++)
 35132  00745C  0E00               	movlw	0
 35133  00745E  0100               	movlb	0	; () banked
 35134  007460  6F71               	movwf	RADIO_ReadRandom@i& (0+255),b
 35135  007462                     l12377:
 35136                           
 35137                           ; BSR set to: 0
 35138  007462  0E0F               	movlw	15
 35139  007464  6571               	cpfsgt	RADIO_ReadRandom@i& (0+255),b
 35140  007466  D001               	goto	l446
 35141  007468  D019               	goto	u13600
 35142  00746A                     l446:
 35143                           
 35144                           ; BSR set to: 0
 35145                           ;radio_driver_SX1276.c: 1377: {
 35146                           ;radio_driver_SX1276.c: 1378: SystemBlockingWaitMs(1);
 35147                           
 35148                           ; BSR set to: 0
 35149  00746A  0E01               	movlw	1
 35150  00746C  6F60               	movwf	SystemBlockingWaitMs@ms& (0+255),b
 35151  00746E  0E00               	movlw	0
 35152  007470  6F61               	movwf	(SystemBlockingWaitMs@ms+1)& (0+255),b
 35153  007472  0E00               	movlw	0
 35154  007474  6F62               	movwf	(SystemBlockingWaitMs@ms+2)& (0+255),b
 35155  007476  0E00               	movlw	0
 35156  007478  6F63               	movwf	(SystemBlockingWaitMs@ms+3)& (0+255),b
 35157  00747A  ECB4  F046         	call	_SystemBlockingWaitMs	;wreg free
 35158                           
 35159                           ;radio_driver_SX1276.c: 1379: retVal <<= (1);
 35160  00747E  0100               	movlb	0	; () banked
 35161  007480  90D8               	bcf	status,0,c
 35162  007482  376F               	rlcf	RADIO_ReadRandom@retVal& (0+255),f,b
 35163  007484  3770               	rlcf	(RADIO_ReadRandom@retVal+1)& (0+255),f,b
 35164                           
 35165                           ; BSR set to: 0
 35166                           ;radio_driver_SX1276.c: 1380: retVal |= RADIO_RegisterRead(0x2C) & 0x01;
 35167  007486  0E2C               	movlw	44
 35168  007488  ECE7  F047         	call	_RADIO_RegisterRead
 35169  00748C  0100               	movlb	0	; () banked
 35170  00748E  6F6E               	movwf	??_RADIO_ReadRandom& (0+255),b
 35171  007490  0E01               	movlw	1
 35172  007492  176E               	andwf	??_RADIO_ReadRandom& (0+255),f,b
 35173  007494  516E               	movf	??_RADIO_ReadRandom& (0+255),w,b
 35174  007496  136F               	iorwf	RADIO_ReadRandom@retVal& (0+255),f,b
 35175  007498  2B71               	incf	RADIO_ReadRandom@i& (0+255),f,b
 35176  00749A  D7E3               	goto	l12377
 35177  00749C                     u13600:
 35178                           
 35179                           ; BSR set to: 0
 35180                           ;radio_driver_SX1276.c: 1381: }
 35181                           ;radio_driver_SX1276.c: 1384: RADIO_WriteMode(MODE_SLEEP, MODULATION_LORA, 1);
 35182                           
 35183                           ; BSR set to: 0
 35184  00749C  0E01               	movlw	1
 35185  00749E  6F65               	movwf	RADIO_WriteMode@newModulation& (0+255),b
 35186  0074A0  0E01               	movlw	1
 35187  0074A2  6F66               	movwf	RADIO_WriteMode@blocking& (0+255),b
 35188  0074A4  0E00               	movlw	0
 35189  0074A6  ECDA  F031         	call	_RADIO_WriteMode
 35190                           
 35191                           ;radio_driver_SX1276.c: 1386: RADIO_RegisterWrite(0x12, 0xFF);
 35192  0074AA  0EFF               	movlw	255
 35193  0074AC  0100               	movlb	0	; () banked
 35194  0074AE  6F62               	movwf	RADIO_RegisterWrite@value& (0+255),b
 35195  0074B0  0E12               	movlw	18
 35196  0074B2  ECBE  F048         	call	_RADIO_RegisterWrite
 35197                           
 35198                           ;radio_driver_SX1276.c: 1388: RADIO_RegisterWrite(0x11, 0x00);
 35199  0074B6  0E00               	movlw	0
 35200  0074B8  0100               	movlb	0	; () banked
 35201  0074BA  6F62               	movwf	RADIO_RegisterWrite@value& (0+255),b
 35202  0074BC  0E11               	movlw	17
 35203  0074BE  ECBE  F048         	call	_RADIO_RegisterWrite
 35204                           
 35205                           ;radio_driver_SX1276.c: 1389: return retVal;
 35206  0074C2  C06F  F06C         	movff	RADIO_ReadRandom@retVal,?_RADIO_ReadRandom
 35207  0074C6  C070  F06D         	movff	RADIO_ReadRandom@retVal+1,?_RADIO_ReadRandom+1
 35208  0074CA  0012               	return	
 35209  0074CC                     __end_of_RADIO_ReadRandom:
 35210                           	opt stack 0
 35211                           tosu	equ	0xFFF
 35212                           tosh	equ	0xFFE
 35213                           tosl	equ	0xFFD
 35214                           pclath	equ	0xFFA
 35215                           tblptru	equ	0xFF8
 35216                           tblptrh	equ	0xFF7
 35217                           tblptrl	equ	0xFF6
 35218                           tablat	equ	0xFF5
 35219                           prodh	equ	0xFF4
 35220                           prodl	equ	0xFF3
 35221                           intcon	equ	0xFF2
 35222                           intcon2	equ	0xFF1
 35223                           intcon3	equ	0xFF0
 35224                           indf0	equ	0xFEF
 35225                           postinc0	equ	0xFEE
 35226                           plusw0	equ	0xFEB
 35227                           fsr0h	equ	0xFEA
 35228                           fsr0l	equ	0xFE9
 35229                           wreg	equ	0xFE8
 35230                           postinc1	equ	0xFE6
 35231                           postdec1	equ	0xFE5
 35232                           plusw1	equ	0xFE3
 35233                           fsr1h	equ	0xFE2
 35234                           fsr1l	equ	0xFE1
 35235                           indf2	equ	0xFDF
 35236                           postinc2	equ	0xFDE
 35237                           postdec2	equ	0xFDD
 35238                           plusw2	equ	0xFDB
 35239                           fsr2h	equ	0xFDA
 35240                           fsr2l	equ	0xFD9
 35241                           status	equ	0xFD8
 35242                           
 35243 ;; *************** function _LORAWAN_Reset *****************
 35244 ;; Defined at:
 35245 ;;		line 148 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 35246 ;; Parameters:    Size  Location     Type
 35247 ;;  ismBandNew      1    wreg     enum E7280
 35248 ;; Auto vars:     Size  Location     Type
 35249 ;;  ismBandNew      1   81[BANK0 ] enum E7280
 35250 ;; Return value:  Size  Location     Type
 35251 ;;                  1    wreg      void 
 35252 ;; Registers used:
 35253 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 35254 ;; Tracked objects:
 35255 ;;		On entry : 0/0
 35256 ;;		On exit  : 0/0
 35257 ;;		Unchanged: 0/0
 35258 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 35259 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35260 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35261 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35262 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35263 ;;Total ram usage:        1 bytes
 35264 ;; Hardware stack levels used:    1
 35265 ;; Hardware stack levels required when called:   12
 35266 ;; This function calls:
 35267 ;;		_InitDefault433Channels
 35268 ;;		_InitDefault868Channels
 35269 ;;		_LORAWAN_LinkCheckConfigure
 35270 ;;		_RADIO_Init
 35271 ;;		_RADIO_SetLoRaSyncWord
 35272 ;;		_StopAllSoftwareTimers
 35273 ;;		_UpdateMinMaxChDataRate
 35274 ;;		_memset
 35275 ;; This function is called by:
 35276 ;;		_LORAWAN_Init
 35277 ;; This function uses a non-reentrant model
 35278 ;;
 35279                           
 35280                           	psect	text163
 35281  004858                     __ptext163:
 35282                           	opt stack 0
 35283  004858                     _LORAWAN_Reset:
 35284                           	opt stack 17
 35285                           
 35286                           ;incstack = 0
 35287                           ;LORAWAN_Reset@ismBandNew stored from wreg
 35288  004858  0100               	movlb	0	; () banked
 35289  00485A  6FB1               	movwf	LORAWAN_Reset@ismBandNew& (0+255),b
 35290                           
 35291                           ;lorawan_eu.c: 150: if (loRa.macInitialized == 1)
 35292  00485C  0102               	movlb	2	; () banked
 35293  00485E  05FA               	decf	(_loRa+240)& (0+255),w,b
 35294  004860  B4D8               	btfsc	status,2,c
 35295                           
 35296                           ; BSR set to: 2
 35297                           ;lorawan_eu.c: 151: {
 35298                           ;lorawan_eu.c: 152: StopAllSoftwareTimers ();
 35299  004862  EC4D  F043         	call	_StopAllSoftwareTimers	;wreg free
 35300                           
 35301                           ;lorawan_eu.c: 153: }
 35302                           ;lorawan_eu.c: 155: loRa.syncWord = 0x34;
 35303  004866  0E34               	movlw	52
 35304  004868  0102               	movlb	2	; () banked
 35305  00486A  6FFE               	movwf	(_loRa+244)& (0+255),b
 35306                           
 35307                           ; BSR set to: 2
 35308                           ;lorawan_eu.c: 156: RADIO_SetLoRaSyncWord(loRa.syncWord);
 35309  00486C  51FE               	movf	(_loRa+244)& (0+255),w,b
 35310  00486E  EC91  F04A         	call	_RADIO_SetLoRaSyncWord
 35311                           
 35312                           ;lorawan_eu.c: 158: loRa.macStatus.value = 0;
 35313  004872  0E00               	movlw	0
 35314  004874  0102               	movlb	2	; () banked
 35315  004876  6F0C               	movwf	(_loRa+2)& (0+255),b
 35316  004878  0E00               	movlw	0
 35317  00487A  6F0D               	movwf	(_loRa+3)& (0+255),b
 35318  00487C  0E00               	movlw	0
 35319  00487E  6F0E               	movwf	(_loRa+4)& (0+255),b
 35320  004880  0E00               	movlw	0
 35321  004882  6F0F               	movwf	(_loRa+5)& (0+255),b
 35322                           
 35323                           ; BSR set to: 2
 35324                           ;lorawan_eu.c: 159: loRa.linkCheckMargin = 255;
 35325  004884  69E7               	setf	(_loRa+221)& (0+255),b
 35326                           
 35327                           ; BSR set to: 2
 35328                           ;lorawan_eu.c: 160: loRa.linkCheckGwCnt = 0;
 35329  004886  0E00               	movlw	0
 35330  004888  6FE8               	movwf	(_loRa+222)& (0+255),b
 35331                           
 35332                           ; BSR set to: 2
 35333                           ;lorawan_eu.c: 161: loRa.lastTimerValue = 0;
 35334  00488A  0E00               	movlw	0
 35335  00488C  6FD2               	movwf	(_loRa+200)& (0+255),b
 35336  00488E  0E00               	movlw	0
 35337  004890  6FD3               	movwf	(_loRa+201)& (0+255),b
 35338  004892  0E00               	movlw	0
 35339  004894  6FD4               	movwf	(_loRa+202)& (0+255),b
 35340  004896  0E00               	movlw	0
 35341  004898  6FD5               	movwf	(_loRa+203)& (0+255),b
 35342                           
 35343                           ; BSR set to: 2
 35344                           ;lorawan_eu.c: 162: loRa.lastPacketLength = 0;
 35345  00489A  0E00               	movlw	0
 35346  00489C  6FDF               	movwf	(_loRa+213)& (0+255),b
 35347  00489E  0E00               	movlw	0
 35348  0048A0  6FDE               	movwf	(_loRa+212)& (0+255),b
 35349                           
 35350                           ; BSR set to: 2
 35351                           ;lorawan_eu.c: 163: loRa.fCntDown.value = 0;
 35352  0048A2  0E00               	movlw	0
 35353  0048A4  6F14               	movwf	(_loRa+10)& (0+255),b
 35354  0048A6  0E00               	movlw	0
 35355  0048A8  6F15               	movwf	(_loRa+11)& (0+255),b
 35356  0048AA  0E00               	movlw	0
 35357  0048AC  6F16               	movwf	(_loRa+12)& (0+255),b
 35358  0048AE  0E00               	movlw	0
 35359  0048B0  6F17               	movwf	(_loRa+13)& (0+255),b
 35360                           
 35361                           ; BSR set to: 2
 35362                           ;lorawan_eu.c: 164: loRa.fCntUp.value = 0;
 35363  0048B2  0E00               	movlw	0
 35364  0048B4  6F10               	movwf	(_loRa+6)& (0+255),b
 35365  0048B6  0E00               	movlw	0
 35366  0048B8  6F11               	movwf	(_loRa+7)& (0+255),b
 35367  0048BA  0E00               	movlw	0
 35368  0048BC  6F12               	movwf	(_loRa+8)& (0+255),b
 35369  0048BE  0E00               	movlw	0
 35370  0048C0  6F13               	movwf	(_loRa+9)& (0+255),b
 35371                           
 35372                           ; BSR set to: 2
 35373                           ;lorawan_eu.c: 165: loRa.devNonce = 0;
 35374  0048C2  0E00               	movlw	0
 35375  0048C4  6FDD               	movwf	(_loRa+211)& (0+255),b
 35376  0048C6  0E00               	movlw	0
 35377  0048C8  6FDC               	movwf	(_loRa+210)& (0+255),b
 35378                           
 35379                           ; BSR set to: 2
 35380                           ;lorawan_eu.c: 166: loRa.prescaler = 1;
 35381  0048CA  0E00               	movlw	0
 35382  0048CC  6FE6               	movwf	(_loRa+220)& (0+255),b
 35383  0048CE  0E01               	movlw	1
 35384  0048D0  6FE5               	movwf	(_loRa+219)& (0+255),b
 35385                           
 35386                           ; BSR set to: 2
 35387                           ;lorawan_eu.c: 167: loRa.adrAckCnt = 0;
 35388  0048D2  0E00               	movlw	0
 35389  0048D4  6FDB               	movwf	(_loRa+209)& (0+255),b
 35390  0048D6  0E00               	movlw	0
 35391  0048D8  6FDA               	movwf	(_loRa+208)& (0+255),b
 35392                           
 35393                           ; BSR set to: 2
 35394                           ;lorawan_eu.c: 168: loRa.counterAdrAckDelay = 0;
 35395  0048DA  0E00               	movlw	0
 35396  0048DC  6FF8               	movwf	(_loRa+238)& (0+255),b
 35397                           
 35398                           ; BSR set to: 2
 35399                           ;lorawan_eu.c: 169: loRa.offset = 0;
 35400  0048DE  0E00               	movlw	0
 35401  0048E0  6FF9               	movwf	(_loRa+239)& (0+255),b
 35402                           
 35403                           ; BSR set to: 2
 35404                           ;lorawan_eu.c: 170: loRa.lastTimerValue = 0;
 35405  0048E2  0E00               	movlw	0
 35406  0048E4  6FD2               	movwf	(_loRa+200)& (0+255),b
 35407  0048E6  0E00               	movlw	0
 35408  0048E8  6FD3               	movwf	(_loRa+201)& (0+255),b
 35409  0048EA  0E00               	movlw	0
 35410  0048EC  6FD4               	movwf	(_loRa+202)& (0+255),b
 35411  0048EE  0E00               	movlw	0
 35412  0048F0  6FD5               	movwf	(_loRa+203)& (0+255),b
 35413                           
 35414                           ; BSR set to: 2
 35415                           ;lorawan_eu.c: 173: loRa.macStatus.linkCheck = 0;
 35416  0048F2  950D               	bcf	(_loRa+3)& (0+255),2,b
 35417                           
 35418                           ; BSR set to: 2
 35419                           ;lorawan_eu.c: 176: loRa.macStatus.value = 0;
 35420  0048F4  0E00               	movlw	0
 35421  0048F6  6F0C               	movwf	(_loRa+2)& (0+255),b
 35422  0048F8  0E00               	movlw	0
 35423  0048FA  6F0D               	movwf	(_loRa+3)& (0+255),b
 35424  0048FC  0E00               	movlw	0
 35425  0048FE  6F0E               	movwf	(_loRa+4)& (0+255),b
 35426  004900  0E00               	movlw	0
 35427  004902  6F0F               	movwf	(_loRa+5)& (0+255),b
 35428                           
 35429                           ; BSR set to: 2
 35430                           ;lorawan_eu.c: 177: loRa.lorawanMacStatus.value = 0;
 35431  004904  0E00               	movlw	0
 35432  004906  6F0B               	movwf	(_loRa+1)& (0+255),b
 35433  004908  0E00               	movlw	0
 35434  00490A  6F0A               	movwf	_loRa& (0+255),b
 35435                           
 35436                           ; BSR set to: 2
 35437                           ;lorawan_eu.c: 179: loRa.maxRepetitionsConfirmedUplink = 7;
 35438  00490C  0E07               	movlw	7
 35439  00490E  6FE1               	movwf	(_loRa+215)& (0+255),b
 35440                           
 35441                           ; BSR set to: 2
 35442                           ;lorawan_eu.c: 180: loRa.maxRepetitionsUnconfirmedUplink = 0;
 35443  004910  0E00               	movlw	0
 35444  004912  6FE0               	movwf	(_loRa+214)& (0+255),b
 35445                           
 35446                           ; BSR set to: 2
 35447                           ;lorawan_eu.c: 181: loRa.counterRepetitionsConfirmedUplink = 1;
 35448  004914  0E01               	movlw	1
 35449  004916  6FE3               	movwf	(_loRa+217)& (0+255),b
 35450                           
 35451                           ; BSR set to: 2
 35452                           ;lorawan_eu.c: 182: loRa.counterRepetitionsUnconfirmedUplink = 1;
 35453  004918  0E01               	movlw	1
 35454  00491A  6FE2               	movwf	(_loRa+216)& (0+255),b
 35455                           
 35456                           ; BSR set to: 2
 35457                           ;lorawan_eu.c: 184: loRa.batteryLevel = (0xFF);
 35458  00491C  69EA               	setf	(_loRa+224)& (0+255),b
 35459                           
 35460                           ; BSR set to: 2
 35461                           ;lorawan_eu.c: 186: loRa.ismBand = ismBandNew;
 35462  00491E  C0B1  F2AE         	movff	LORAWAN_Reset@ismBandNew,_loRa+164
 35463                           
 35464                           ; BSR set to: 2
 35465                           ;lorawan_eu.c: 188: loRa.deviceClass = CLASS_A;
 35466  004922  0E00               	movlw	0
 35467  004924  6F1C               	movwf	(_loRa+18)& (0+255),b
 35468                           
 35469                           ; BSR set to: 2
 35470                           ;lorawan_eu.c: 191: loRa.maxChannels = 16;
 35471  004926  0E10               	movlw	16
 35472  004928  6FF7               	movwf	(_loRa+237)& (0+255),b
 35473                           
 35474                           ; BSR set to: 2
 35475                           ;lorawan_eu.c: 192: if(ISM_EU868 == ismBandNew)
 35476  00492A  0100               	movlb	0	; () banked
 35477  00492C  51B1               	movf	LORAWAN_Reset@ismBandNew& (0+255),w,b
 35478  00492E  A4D8               	btfss	status,2,c
 35479  004930  D01B               	goto	l1812
 35480                           
 35481                           ; BSR set to: 0
 35482                           ;lorawan_eu.c: 193: {
 35483                           ;lorawan_eu.c: 194: RADIO_Init(&radioBuffer[16], (868100000));
 35484  004932  0E90               	movlw	low (_radioBuffer+16)
 35485  004934  6F79               	movwf	RADIO_Init@radioBuffer& (0+255),b
 35486  004936  0E05               	movlw	high (_radioBuffer+16)
 35487  004938  6F7A               	movwf	(RADIO_Init@radioBuffer+1)& (0+255),b
 35488  00493A  0EA0               	movlw	160
 35489  00493C  6F7B               	movwf	RADIO_Init@frequency& (0+255),b
 35490  00493E  0E27               	movlw	39
 35491  004940  6F7C               	movwf	(RADIO_Init@frequency+1)& (0+255),b
 35492  004942  0EBE               	movlw	190
 35493  004944  6F7D               	movwf	(RADIO_Init@frequency+2)& (0+255),b
 35494  004946  0E33               	movlw	51
 35495  004948  6F7E               	movwf	(RADIO_Init@frequency+3)& (0+255),b
 35496  00494A  EC13  F025         	call	_RADIO_Init	;wreg free
 35497                           
 35498                           ;lorawan_eu.c: 196: InitDefault868Channels ();
 35499  00494E  ECD4  F03B         	call	_InitDefault868Channels	;wreg free
 35500                           
 35501                           ;lorawan_eu.c: 198: loRa.receiveWindow2Parameters.dataRate = (0);
 35502  004952  0E00               	movlw	0
 35503  004954  0102               	movlb	2	; () banked
 35504  004956  6F26               	movwf	(_loRa+28)& (0+255),b
 35505                           
 35506                           ; BSR set to: 2
 35507                           ;lorawan_eu.c: 199: loRa.receiveWindow2Parameters.frequency = (869525000);
 35508  004958  0E08               	movlw	8
 35509  00495A  6F22               	movwf	(_loRa+24)& (0+255),b
 35510  00495C  0EE6               	movlw	230
 35511  00495E  6F23               	movwf	(_loRa+25)& (0+255),b
 35512  004960  0ED3               	movlw	211
 35513  004962  6F24               	movwf	(_loRa+26)& (0+255),b
 35514  004964  0E33               	movlw	51
 35515  004966  D01B               	goto	L25
 35516  004968                     l1812:
 35517                           
 35518                           ;lorawan_eu.c: 201: else
 35519                           ;lorawan_eu.c: 202: {
 35520                           ;lorawan_eu.c: 203: RADIO_Init(&radioBuffer[16], (433300000));
 35521                           
 35522                           ; BSR set to: 2
 35523  004968  0E90               	movlw	low (_radioBuffer+16)
 35524  00496A  0100               	movlb	0	; () banked
 35525  00496C  6F79               	movwf	RADIO_Init@radioBuffer& (0+255),b
 35526  00496E  0E05               	movlw	high (_radioBuffer+16)
 35527  004970  6F7A               	movwf	(RADIO_Init@radioBuffer+1)& (0+255),b
 35528  004972  0E20               	movlw	32
 35529  004974  6F7B               	movwf	RADIO_Init@frequency& (0+255),b
 35530  004976  0EA2               	movlw	162
 35531  004978  6F7C               	movwf	(RADIO_Init@frequency+1)& (0+255),b
 35532  00497A  0ED3               	movlw	211
 35533  00497C  6F7D               	movwf	(RADIO_Init@frequency+2)& (0+255),b
 35534  00497E  0E19               	movlw	25
 35535  004980  6F7E               	movwf	(RADIO_Init@frequency+3)& (0+255),b
 35536  004982  EC13  F025         	call	_RADIO_Init	;wreg free
 35537                           
 35538                           ;lorawan_eu.c: 205: InitDefault433Channels ();
 35539  004986  EC19  F03C         	call	_InitDefault433Channels	;wreg free
 35540                           
 35541                           ;lorawan_eu.c: 207: loRa.receiveWindow2Parameters.dataRate = (0);
 35542  00498A  0E00               	movlw	0
 35543  00498C  0102               	movlb	2	; () banked
 35544  00498E  6F26               	movwf	(_loRa+28)& (0+255),b
 35545                           
 35546                           ; BSR set to: 2
 35547                           ;lorawan_eu.c: 208: loRa.receiveWindow2Parameters.frequency = (434665000);
 35548  004990  0E28               	movlw	40
 35549  004992  6F22               	movwf	(_loRa+24)& (0+255),b
 35550  004994  0E76               	movlw	118
 35551  004996  6F23               	movwf	(_loRa+25)& (0+255),b
 35552  004998  0EE8               	movlw	232
 35553  00499A  6F24               	movwf	(_loRa+26)& (0+255),b
 35554  00499C  0E19               	movlw	25
 35555  00499E                     L25:
 35556  00499E  6F25               	movwf	(_loRa+27)& (0+255),b
 35557                           
 35558                           ; BSR set to: 2
 35559                           ;lorawan_eu.c: 209: }
 35560                           ;lorawan_eu.c: 211: loRa.txPower = 1;
 35561                           
 35562                           ; BSR set to: 2
 35563  0049A0  0E01               	movlw	1
 35564  0049A2  6FEB               	movwf	(_loRa+225)& (0+255),b
 35565                           
 35566                           ; BSR set to: 2
 35567                           ;lorawan_eu.c: 213: loRa.currentDataRate = 0;
 35568  0049A4  0E00               	movlw	0
 35569  0049A6  6FE9               	movwf	(_loRa+223)& (0+255),b
 35570                           
 35571                           ; BSR set to: 2
 35572                           ;lorawan_eu.c: 215: UpdateMinMaxChDataRate ();
 35573  0049A8  EC59  F032         	call	_UpdateMinMaxChDataRate	;wreg free
 35574                           
 35575                           ;lorawan_eu.c: 218: loRa.macKeys.value = 0;
 35576  0049AC  0E00               	movlw	0
 35577  0049AE  0102               	movlb	2	; () banked
 35578  0049B0  6FB0               	movwf	(_loRa+166)& (0+255),b
 35579  0049B2  0E00               	movlw	0
 35580  0049B4  6FAF               	movwf	(_loRa+165)& (0+255),b
 35581                           
 35582                           ; BSR set to: 2
 35583                           ;lorawan_eu.c: 219: memset (&loRa.activationParameters, 0, sizeof(loRa.activationParamet
      +                          ers));
 35584  0049B6  0E27               	movlw	low (_loRa+29)
 35585  0049B8  0100               	movlb	0	; () banked
 35586  0049BA  6F60               	movwf	memset@p1& (0+255),b
 35587  0049BC  0E02               	movlw	high (_loRa+29)
 35588  0049BE  6F61               	movwf	(memset@p1+1)& (0+255),b
 35589  0049C0  0E00               	movlw	0
 35590  0049C2  6F63               	movwf	(memset@c+1)& (0+255),b
 35591  0049C4  0E00               	movlw	0
 35592  0049C6  6F62               	movwf	memset@c& (0+255),b
 35593  0049C8  0E00               	movlw	0
 35594  0049CA  6F65               	movwf	(memset@n+1)& (0+255),b
 35595  0049CC  0E69               	movlw	105
 35596  0049CE  6F64               	movwf	memset@n& (0+255),b
 35597  0049D0  ECCC  F046         	call	_memset	;wreg free
 35598                           
 35599                           ;lorawan_eu.c: 222: loRa.protocolParameters.receiveDelay1 = 1000UL;
 35600  0049D4  0E03               	movlw	3
 35601  0049D6  0102               	movlb	2	; () banked
 35602  0049D8  6F9F               	movwf	(_loRa+149)& (0+255),b
 35603  0049DA  0EE8               	movlw	232
 35604  0049DC  6F9E               	movwf	(_loRa+148)& (0+255),b
 35605                           
 35606                           ; BSR set to: 2
 35607                           ;lorawan_eu.c: 223: loRa.protocolParameters.receiveDelay2 = 2000UL;
 35608  0049DE  0E07               	movlw	7
 35609  0049E0  6FA1               	movwf	(_loRa+151)& (0+255),b
 35610  0049E2  0ED0               	movlw	208
 35611  0049E4  6FA0               	movwf	(_loRa+150)& (0+255),b
 35612                           
 35613                           ; BSR set to: 2
 35614                           ;lorawan_eu.c: 224: loRa.protocolParameters.joinAcceptDelay1 = 5000UL;
 35615  0049E6  0E13               	movlw	19
 35616  0049E8  6FA3               	movwf	(_loRa+153)& (0+255),b
 35617  0049EA  0E88               	movlw	136
 35618  0049EC  6FA2               	movwf	(_loRa+152)& (0+255),b
 35619                           
 35620                           ; BSR set to: 2
 35621                           ;lorawan_eu.c: 225: loRa.protocolParameters.joinAcceptDelay2 = 6000UL;
 35622  0049EE  0E17               	movlw	23
 35623  0049F0  6FA5               	movwf	(_loRa+155)& (0+255),b
 35624  0049F2  0E70               	movlw	112
 35625  0049F4  6FA4               	movwf	(_loRa+154)& (0+255),b
 35626                           
 35627                           ; BSR set to: 2
 35628                           ;lorawan_eu.c: 226: loRa.protocolParameters.ackTimeout = 2000;
 35629  0049F6  0E07               	movlw	7
 35630  0049F8  6FAB               	movwf	(_loRa+161)& (0+255),b
 35631  0049FA  0ED0               	movlw	208
 35632  0049FC  6FAA               	movwf	(_loRa+160)& (0+255),b
 35633                           
 35634                           ; BSR set to: 2
 35635                           ;lorawan_eu.c: 227: loRa.protocolParameters.adrAckDelay = 32;
 35636  0049FE  0E20               	movlw	32
 35637  004A00  6FAD               	movwf	(_loRa+163)& (0+255),b
 35638                           
 35639                           ; BSR set to: 2
 35640                           ;lorawan_eu.c: 228: loRa.protocolParameters.adrAckLimit = 64;
 35641  004A02  0E40               	movlw	64
 35642  004A04  6FAC               	movwf	(_loRa+162)& (0+255),b
 35643                           
 35644                           ; BSR set to: 2
 35645                           ;lorawan_eu.c: 229: loRa.protocolParameters.maxFcntGap = 16384;
 35646  004A06  0E40               	movlw	64
 35647  004A08  6FA7               	movwf	(_loRa+157)& (0+255),b
 35648  004A0A  0E00               	movlw	0
 35649  004A0C  6FA6               	movwf	(_loRa+156)& (0+255),b
 35650                           
 35651                           ; BSR set to: 2
 35652                           ;lorawan_eu.c: 230: loRa.protocolParameters.maxMultiFcntGap = 16384;
 35653  004A0E  0E40               	movlw	64
 35654  004A10  6FA9               	movwf	(_loRa+159)& (0+255),b
 35655  004A12  0E00               	movlw	0
 35656  004A14  6FA8               	movwf	(_loRa+158)& (0+255),b
 35657                           
 35658                           ; BSR set to: 2
 35659                           ;lorawan_eu.c: 232: LORAWAN_LinkCheckConfigure (0);
 35660  004A16  0E00               	movlw	0
 35661  004A18  0100               	movlb	0	; () banked
 35662  004A1A  6FA7               	movwf	(LORAWAN_LinkCheckConfigure@period+1)& (0+255),b
 35663  004A1C  0E00               	movlw	0
 35664  004A1E  6FA6               	movwf	LORAWAN_LinkCheckConfigure@period& (0+255),b
 35665  004A20  ECEE  F02B         	call	_LORAWAN_LinkCheckConfigure	;wreg free
 35666  004A24  0012               	return		;funcret
 35667  004A26                     __end_of_LORAWAN_Reset:
 35668                           	opt stack 0
 35669                           tosu	equ	0xFFF
 35670                           tosh	equ	0xFFE
 35671                           tosl	equ	0xFFD
 35672                           pclath	equ	0xFFA
 35673                           tblptru	equ	0xFF8
 35674                           tblptrh	equ	0xFF7
 35675                           tblptrl	equ	0xFF6
 35676                           tablat	equ	0xFF5
 35677                           prodh	equ	0xFF4
 35678                           prodl	equ	0xFF3
 35679                           intcon	equ	0xFF2
 35680                           intcon2	equ	0xFF1
 35681                           intcon3	equ	0xFF0
 35682                           indf0	equ	0xFEF
 35683                           postinc0	equ	0xFEE
 35684                           plusw0	equ	0xFEB
 35685                           fsr0h	equ	0xFEA
 35686                           fsr0l	equ	0xFE9
 35687                           wreg	equ	0xFE8
 35688                           postinc1	equ	0xFE6
 35689                           postdec1	equ	0xFE5
 35690                           plusw1	equ	0xFE3
 35691                           fsr1h	equ	0xFE2
 35692                           fsr1l	equ	0xFE1
 35693                           indf2	equ	0xFDF
 35694                           postinc2	equ	0xFDE
 35695                           postdec2	equ	0xFDD
 35696                           plusw2	equ	0xFDB
 35697                           fsr2h	equ	0xFDA
 35698                           fsr2l	equ	0xFD9
 35699                           status	equ	0xFD8
 35700                           
 35701 ;; *************** function _UpdateMinMaxChDataRate *****************
 35702 ;; Defined at:
 35703 ;;		line 1063 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 35704 ;; Parameters:    Size  Location     Type
 35705 ;;		None
 35706 ;; Auto vars:     Size  Location     Type
 35707 ;;  i               1    1[BANK0 ] unsigned char 
 35708 ;; Return value:  Size  Location     Type
 35709 ;;                  1    wreg      void 
 35710 ;; Registers used:
 35711 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 35712 ;; Tracked objects:
 35713 ;;		On entry : 0/0
 35714 ;;		On exit  : 0/0
 35715 ;;		Unchanged: 0/0
 35716 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 35717 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35718 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35719 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35720 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35721 ;;Total ram usage:        2 bytes
 35722 ;; Hardware stack levels used:    1
 35723 ;; Hardware stack levels required when called:    7
 35724 ;; This function calls:
 35725 ;;		Nothing
 35726 ;; This function is called by:
 35727 ;;		_LORAWAN_Reset
 35728 ;; This function uses a non-reentrant model
 35729 ;;
 35730                           
 35731                           	psect	text164
 35732  0064B2                     __ptext164:
 35733                           	opt stack 0
 35734  0064B2                     _UpdateMinMaxChDataRate:
 35735                           	opt stack 21
 35736                           
 35737                           ;lorawan.c: 1065: uint8_t i;
 35738                           ;lorawan.c: 1068: loRa.minDataRate = 7;
 35739                           
 35740                           ;incstack = 0
 35741  0064B2  0E07               	movlw	7
 35742  0064B4  0102               	movlb	2	; () banked
 35743  0064B6  6FF5               	movwf	(_loRa+235)& (0+255),b
 35744                           
 35745                           ;lorawan.c: 1069: loRa.maxDataRate = 0;
 35746  0064B8  0E00               	movlw	0
 35747  0064BA  6FF6               	movwf	(_loRa+236)& (0+255),b
 35748                           
 35749                           ;lorawan.c: 1071: for (i = 0; i < loRa.maxChannels; i++)
 35750  0064BC  0E00               	movlw	0
 35751  0064BE  0100               	movlb	0	; () banked
 35752  0064C0  6F61               	movwf	UpdateMinMaxChDataRate@i& (0+255),b
 35753  0064C2  D06D               	goto	l1124
 35754  0064C4                     
 35755                           ; BSR set to: 0
 35756                           ;lorawan.c: 1072: {
 35757                           ;lorawan.c: 1073: if ( (Channels[i].dataRange.min < loRa.minDataRate) && (Channels[i].st
      +                          atus == 1) )
 35758                           
 35759                           ; BSR set to: 0
 35760  0064C4  5161               	movf	UpdateMinMaxChDataRate@i& (0+255),w,b
 35761  0064C6  0D0E               	mullw	14
 35762  0064C8  0E05               	movlw	5
 35763  0064CA  26F3               	addwf	prodl,f,c
 35764  0064CC  0E00               	movlw	0
 35765  0064CE  22F4               	addwfc	prodh,f,c
 35766  0064D0  0E00               	movlw	low _Channels
 35767  0064D2  24F3               	addwf	prodl,w,c
 35768  0064D4  6ED9               	movwf	fsr2l,c
 35769  0064D6  0E04               	movlw	high _Channels
 35770  0064D8  20F4               	addwfc	prodh,w,c
 35771  0064DA  6EDA               	movwf	fsr2h,c
 35772  0064DC  0104               	movlb	4	; () banked
 35773  0064DE  50DF               	movf	223,w,c
 35774  0064E0  0B0F               	andlw	15
 35775  0064E2  0100               	movlb	0	; () banked
 35776  0064E4  6F60               	movwf	??_UpdateMinMaxChDataRate& (0+255),b
 35777  0064E6  0102               	movlb	2	; () banked
 35778  0064E8  51F5               	movf	(_loRa+235)& (0+255),w,b
 35779  0064EA  0100               	movlb	0	; () banked
 35780  0064EC  5D60               	subwf	??_UpdateMinMaxChDataRate& (0+255),w,b
 35781  0064EE  B0D8               	btfsc	status,0,c
 35782  0064F0  D020               	goto	l1126
 35783                           
 35784                           ; BSR set to: 0
 35785  0064F2  5161               	movf	UpdateMinMaxChDataRate@i& (0+255),w,b
 35786  0064F4  0D0E               	mullw	14
 35787  0064F6  0E04               	movlw	4
 35788  0064F8  26F3               	addwf	prodl,f,c
 35789  0064FA  0E00               	movlw	0
 35790  0064FC  22F4               	addwfc	prodh,f,c
 35791  0064FE  0E00               	movlw	low _Channels
 35792  006500  24F3               	addwf	prodl,w,c
 35793  006502  6ED9               	movwf	fsr2l,c
 35794  006504  0E04               	movlw	high _Channels
 35795  006506  20F4               	addwfc	prodh,w,c
 35796  006508  6EDA               	movwf	fsr2h,c
 35797  00650A  04DE               	decf	postinc2,w,c
 35798  00650C  A4D8               	btfss	status,2,c
 35799  00650E  D011               	goto	l1126
 35800                           
 35801                           ; BSR set to: 0
 35802                           ;lorawan.c: 1074: {
 35803                           ;lorawan.c: 1075: loRa.minDataRate = Channels[i].dataRange.min;
 35804  006510  5161               	movf	UpdateMinMaxChDataRate@i& (0+255),w,b
 35805  006512  0D0E               	mullw	14
 35806  006514  0E05               	movlw	5
 35807  006516  26F3               	addwf	prodl,f,c
 35808  006518  0E00               	movlw	0
 35809  00651A  22F4               	addwfc	prodh,f,c
 35810  00651C  0E00               	movlw	low _Channels
 35811  00651E  24F3               	addwf	prodl,w,c
 35812  006520  6ED9               	movwf	fsr2l,c
 35813  006522  0E04               	movlw	high _Channels
 35814  006524  20F4               	addwfc	prodh,w,c
 35815  006526  6EDA               	movwf	fsr2h,c
 35816  006528  0104               	movlb	4	; () banked
 35817  00652A  50DF               	movf	223,w,c
 35818  00652C  0B0F               	andlw	15
 35819  00652E  0102               	movlb	2	; () banked
 35820  006530  6FF5               	movwf	(_loRa+235)& (0+255),b
 35821  006532                     l1126:
 35822                           
 35823                           ;lorawan.c: 1076: }
 35824                           ;lorawan.c: 1077: if ( (Channels[i].dataRange.max > loRa.maxDataRate) && (Channels[i].st
      +                          atus == 1) )
 35825  006532  0100               	movlb	0	; () banked
 35826  006534  5161               	movf	UpdateMinMaxChDataRate@i& (0+255),w,b
 35827  006536  0D0E               	mullw	14
 35828  006538  0E05               	movlw	5
 35829  00653A  26F3               	addwf	prodl,f,c
 35830  00653C  0E00               	movlw	0
 35831  00653E  22F4               	addwfc	prodh,f,c
 35832  006540  0E00               	movlw	low _Channels
 35833  006542  24F3               	addwf	prodl,w,c
 35834  006544  6ED9               	movwf	fsr2l,c
 35835  006546  0E04               	movlw	high _Channels
 35836  006548  20F4               	addwfc	prodh,w,c
 35837  00654A  6EDA               	movwf	fsr2h,c
 35838  00654C  0104               	movlb	4	; () banked
 35839  00654E  38DF               	swapf	223,w,c
 35840  006550  0B0F               	andlw	15
 35841  006552  0102               	movlb	2	; () banked
 35842  006554  61F6               	cpfslt	(_loRa+236)& (0+255),b
 35843  006556  D021               	goto	l1127
 35844                           
 35845                           ; BSR set to: 2
 35846  006558  0100               	movlb	0	; () banked
 35847  00655A  5161               	movf	UpdateMinMaxChDataRate@i& (0+255),w,b
 35848  00655C  0D0E               	mullw	14
 35849  00655E  0E04               	movlw	4
 35850  006560  26F3               	addwf	prodl,f,c
 35851  006562  0E00               	movlw	0
 35852  006564  22F4               	addwfc	prodh,f,c
 35853  006566  0E00               	movlw	low _Channels
 35854  006568  24F3               	addwf	prodl,w,c
 35855  00656A  6ED9               	movwf	fsr2l,c
 35856  00656C  0E04               	movlw	high _Channels
 35857  00656E  20F4               	addwfc	prodh,w,c
 35858  006570  6EDA               	movwf	fsr2h,c
 35859  006572  04DE               	decf	postinc2,w,c
 35860  006574  A4D8               	btfss	status,2,c
 35861  006576  D011               	goto	l1127
 35862                           
 35863                           ; BSR set to: 0
 35864                           ;lorawan.c: 1078: {
 35865                           ;lorawan.c: 1079: loRa.maxDataRate = Channels[i].dataRange.max;
 35866  006578  5161               	movf	UpdateMinMaxChDataRate@i& (0+255),w,b
 35867  00657A  0D0E               	mullw	14
 35868  00657C  0E05               	movlw	5
 35869  00657E  26F3               	addwf	prodl,f,c
 35870  006580  0E00               	movlw	0
 35871  006582  22F4               	addwfc	prodh,f,c
 35872  006584  0E00               	movlw	low _Channels
 35873  006586  24F3               	addwf	prodl,w,c
 35874  006588  6ED9               	movwf	fsr2l,c
 35875  00658A  0E04               	movlw	high _Channels
 35876  00658C  20F4               	addwfc	prodh,w,c
 35877  00658E  6EDA               	movwf	fsr2h,c
 35878  006590  0104               	movlb	4	; () banked
 35879  006592  38DF               	swapf	223,w,c
 35880  006594  0B0F               	andlw	15
 35881  006596  0102               	movlb	2	; () banked
 35882  006598  6FF6               	movwf	(_loRa+236)& (0+255),b
 35883  00659A                     l1127:
 35884                           
 35885                           ; BSR set to: 2
 35886  00659A  0100               	movlb	0	; () banked
 35887  00659C  2B61               	incf	UpdateMinMaxChDataRate@i& (0+255),f,b
 35888  00659E                     l1124:
 35889                           
 35890                           ; BSR set to: 0
 35891                           
 35892                           ; BSR set to: 0
 35893  00659E  0102               	movlb	2	; () banked
 35894  0065A0  51F7               	movf	(_loRa+237)& (0+255),w,b
 35895  0065A2  0100               	movlb	0	; () banked
 35896  0065A4  5D61               	subwf	UpdateMinMaxChDataRate@i& (0+255),w,b
 35897  0065A6  B0D8               	btfsc	status,0,c
 35898  0065A8  0012               	return	
 35899  0065AA  D78C               	goto	l1125
 35900  0065AC                     __end_of_UpdateMinMaxChDataRate:
 35901                           	opt stack 0
 35902                           tosu	equ	0xFFF
 35903                           tosh	equ	0xFFE
 35904                           tosl	equ	0xFFD
 35905                           pclath	equ	0xFFA
 35906                           tblptru	equ	0xFF8
 35907                           tblptrh	equ	0xFF7
 35908                           tblptrl	equ	0xFF6
 35909                           tablat	equ	0xFF5
 35910                           prodh	equ	0xFF4
 35911                           prodl	equ	0xFF3
 35912                           intcon	equ	0xFF2
 35913                           intcon2	equ	0xFF1
 35914                           intcon3	equ	0xFF0
 35915                           indf0	equ	0xFEF
 35916                           postinc0	equ	0xFEE
 35917                           plusw0	equ	0xFEB
 35918                           fsr0h	equ	0xFEA
 35919                           fsr0l	equ	0xFE9
 35920                           wreg	equ	0xFE8
 35921                           postinc1	equ	0xFE6
 35922                           postdec1	equ	0xFE5
 35923                           plusw1	equ	0xFE3
 35924                           fsr1h	equ	0xFE2
 35925                           fsr1l	equ	0xFE1
 35926                           indf2	equ	0xFDF
 35927                           postinc2	equ	0xFDE
 35928                           postdec2	equ	0xFDD
 35929                           plusw2	equ	0xFDB
 35930                           fsr2h	equ	0xFDA
 35931                           fsr2l	equ	0xFD9
 35932                           status	equ	0xFD8
 35933                           
 35934 ;; *************** function _StopAllSoftwareTimers *****************
 35935 ;; Defined at:
 35936 ;;		line 965 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 35937 ;; Parameters:    Size  Location     Type
 35938 ;;		None
 35939 ;; Auto vars:     Size  Location     Type
 35940 ;;		None
 35941 ;; Return value:  Size  Location     Type
 35942 ;;                  1    wreg      void 
 35943 ;; Registers used:
 35944 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 35945 ;; Tracked objects:
 35946 ;;		On entry : 0/0
 35947 ;;		On exit  : 0/0
 35948 ;;		Unchanged: 0/0
 35949 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 35950 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35951 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35952 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35953 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35954 ;;Total ram usage:        0 bytes
 35955 ;; Hardware stack levels used:    1
 35956 ;; Hardware stack levels required when called:    8
 35957 ;; This function calls:
 35958 ;;		_SwTimerStop
 35959 ;; This function is called by:
 35960 ;;		_LORAWAN_Init
 35961 ;;		_LORAWAN_Reset
 35962 ;; This function uses a non-reentrant model
 35963 ;;
 35964                           
 35965                           	psect	text165
 35966  00869A                     __ptext165:
 35967                           	opt stack 0
 35968  00869A                     _StopAllSoftwareTimers:
 35969                           	opt stack 21
 35970                           
 35971                           ;lorawan_eu.c: 967: SwTimerStop(loRa.joinAccept1TimerId);
 35972                           
 35973                           ; BSR set to: 0
 35974                           ;incstack = 0
 35975  00869A  0102               	movlb	2	; () banked
 35976  00869C  51EC               	movf	(_loRa+226)& (0+255),w,b
 35977  00869E  ECFB  F047         	call	_SwTimerStop
 35978                           
 35979                           ;lorawan_eu.c: 968: SwTimerStop(loRa.joinAccept2TimerId);
 35980  0086A2  0102               	movlb	2	; () banked
 35981  0086A4  51ED               	movf	(_loRa+227)& (0+255),w,b
 35982  0086A6  ECFB  F047         	call	_SwTimerStop
 35983                           
 35984                           ;lorawan_eu.c: 969: SwTimerStop(loRa.linkCheckTimerId);
 35985  0086AA  0102               	movlb	2	; () banked
 35986  0086AC  51F1               	movf	(_loRa+231)& (0+255),w,b
 35987  0086AE  ECFB  F047         	call	_SwTimerStop
 35988                           
 35989                           ;lorawan_eu.c: 970: SwTimerStop(loRa.receiveWindow1TimerId);
 35990  0086B2  0102               	movlb	2	; () banked
 35991  0086B4  51EE               	movf	(_loRa+228)& (0+255),w,b
 35992  0086B6  ECFB  F047         	call	_SwTimerStop
 35993                           
 35994                           ;lorawan_eu.c: 971: SwTimerStop(loRa.receiveWindow2TimerId);
 35995  0086BA  0102               	movlb	2	; () banked
 35996  0086BC  51EF               	movf	(_loRa+229)& (0+255),w,b
 35997  0086BE  ECFB  F047         	call	_SwTimerStop
 35998                           
 35999                           ;lorawan_eu.c: 972: SwTimerStop(loRa.ackTimeoutTimerId);
 36000  0086C2  0102               	movlb	2	; () banked
 36001  0086C4  51F2               	movf	(_loRa+232)& (0+255),w,b
 36002  0086C6  ECFB  F047         	call	_SwTimerStop
 36003                           
 36004                           ;lorawan_eu.c: 973: SwTimerStop(loRa.automaticReplyTimerId);
 36005  0086CA  0102               	movlb	2	; () banked
 36006  0086CC  51F0               	movf	(_loRa+230)& (0+255),w,b
 36007  0086CE  ECFB  F047         	call	_SwTimerStop
 36008                           
 36009                           ;lorawan_eu.c: 974: SwTimerStop(loRa.unconfirmedRetransmisionTimerId);
 36010  0086D2  0102               	movlb	2	; () banked
 36011  0086D4  51F4               	movf	(_loRa+234)& (0+255),w,b
 36012  0086D6  ECFB  F047         	call	_SwTimerStop
 36013                           
 36014                           ;lorawan_eu.c: 975: SwTimerStop(loRa.abpJoinTimerId);
 36015  0086DA  0102               	movlb	2	; () banked
 36016  0086DC  51FD               	movf	(_loRa+243)& (0+255),w,b
 36017  0086DE  ECFB  F047         	call	_SwTimerStop
 36018                           
 36019                           ;lorawan_eu.c: 976: SwTimerStop(loRa.dutyCycleTimerId);
 36020  0086E2  0102               	movlb	2	; () banked
 36021  0086E4  51F3               	movf	(_loRa+233)& (0+255),w,b
 36022  0086E6  ECFB  F047         	call	_SwTimerStop
 36023  0086EA  0012               	return		;funcret
 36024  0086EC                     __end_of_StopAllSoftwareTimers:
 36025                           	opt stack 0
 36026                           tosu	equ	0xFFF
 36027                           tosh	equ	0xFFE
 36028                           tosl	equ	0xFFD
 36029                           pclath	equ	0xFFA
 36030                           tblptru	equ	0xFF8
 36031                           tblptrh	equ	0xFF7
 36032                           tblptrl	equ	0xFF6
 36033                           tablat	equ	0xFF5
 36034                           prodh	equ	0xFF4
 36035                           prodl	equ	0xFF3
 36036                           intcon	equ	0xFF2
 36037                           intcon2	equ	0xFF1
 36038                           intcon3	equ	0xFF0
 36039                           indf0	equ	0xFEF
 36040                           postinc0	equ	0xFEE
 36041                           plusw0	equ	0xFEB
 36042                           fsr0h	equ	0xFEA
 36043                           fsr0l	equ	0xFE9
 36044                           wreg	equ	0xFE8
 36045                           postinc1	equ	0xFE6
 36046                           postdec1	equ	0xFE5
 36047                           plusw1	equ	0xFE3
 36048                           fsr1h	equ	0xFE2
 36049                           fsr1l	equ	0xFE1
 36050                           indf2	equ	0xFDF
 36051                           postinc2	equ	0xFDE
 36052                           postdec2	equ	0xFDD
 36053                           plusw2	equ	0xFDB
 36054                           fsr2h	equ	0xFDA
 36055                           fsr2l	equ	0xFD9
 36056                           status	equ	0xFD8
 36057                           
 36058 ;; *************** function _RADIO_SetLoRaSyncWord *****************
 36059 ;; Defined at:
 36060 ;;		line 522 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 36061 ;; Parameters:    Size  Location     Type
 36062 ;;  syncWord        1    wreg     unsigned char 
 36063 ;; Auto vars:     Size  Location     Type
 36064 ;;  syncWord        1    0[BANK0 ] unsigned char 
 36065 ;; Return value:  Size  Location     Type
 36066 ;;                  1    wreg      void 
 36067 ;; Registers used:
 36068 ;;		wreg
 36069 ;; Tracked objects:
 36070 ;;		On entry : 0/0
 36071 ;;		On exit  : 0/0
 36072 ;;		Unchanged: 0/0
 36073 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 36074 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 36075 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 36076 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 36077 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 36078 ;;Total ram usage:        1 bytes
 36079 ;; Hardware stack levels used:    1
 36080 ;; Hardware stack levels required when called:    7
 36081 ;; This function calls:
 36082 ;;		Nothing
 36083 ;; This function is called by:
 36084 ;;		_LORAWAN_Reset
 36085 ;;		_ConfigureRadio
 36086 ;; This function uses a non-reentrant model
 36087 ;;
 36088                           
 36089                           	psect	text166
 36090  009522                     __ptext166:
 36091                           	opt stack 0
 36092  009522                     _RADIO_SetLoRaSyncWord:
 36093                           	opt stack 19
 36094                           
 36095                           ;incstack = 0
 36096                           ;RADIO_SetLoRaSyncWord@syncWord stored from wreg
 36097  009522  0100               	movlb	0	; () banked
 36098  009524  6F60               	movwf	RADIO_SetLoRaSyncWord@syncWord& (0+255),b
 36099                           
 36100                           ;radio_driver_SX1276.c: 525: RadioConfiguration.syncWordLoRa = syncWord;
 36101  009526  C060  F163         	movff	RADIO_SetLoRaSyncWord@syncWord,_RadioConfiguration+14
 36102  00952A  0012               	return		;funcret
 36103  00952C                     __end_of_RADIO_SetLoRaSyncWord:
 36104                           	opt stack 0
 36105                           tosu	equ	0xFFF
 36106                           tosh	equ	0xFFE
 36107                           tosl	equ	0xFFD
 36108                           pclath	equ	0xFFA
 36109                           tblptru	equ	0xFF8
 36110                           tblptrh	equ	0xFF7
 36111                           tblptrl	equ	0xFF6
 36112                           tablat	equ	0xFF5
 36113                           prodh	equ	0xFF4
 36114                           prodl	equ	0xFF3
 36115                           intcon	equ	0xFF2
 36116                           intcon2	equ	0xFF1
 36117                           intcon3	equ	0xFF0
 36118                           indf0	equ	0xFEF
 36119                           postinc0	equ	0xFEE
 36120                           plusw0	equ	0xFEB
 36121                           fsr0h	equ	0xFEA
 36122                           fsr0l	equ	0xFE9
 36123                           wreg	equ	0xFE8
 36124                           postinc1	equ	0xFE6
 36125                           postdec1	equ	0xFE5
 36126                           plusw1	equ	0xFE3
 36127                           fsr1h	equ	0xFE2
 36128                           fsr1l	equ	0xFE1
 36129                           indf2	equ	0xFDF
 36130                           postinc2	equ	0xFDE
 36131                           postdec2	equ	0xFDD
 36132                           plusw2	equ	0xFDB
 36133                           fsr2h	equ	0xFDA
 36134                           fsr2l	equ	0xFD9
 36135                           status	equ	0xFD8
 36136                           
 36137 ;; *************** function _RADIO_Init *****************
 36138 ;; Defined at:
 36139 ;;		line 422 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 36140 ;; Parameters:    Size  Location     Type
 36141 ;;  radioBuffer     2   25[BANK0 ] PTR unsigned char 
 36142 ;;		 -> radioBuffer(271), 
 36143 ;;  frequency       4   27[BANK0 ] unsigned long 
 36144 ;; Auto vars:     Size  Location     Type
 36145 ;;		None
 36146 ;; Return value:  Size  Location     Type
 36147 ;;                  1    wreg      void 
 36148 ;; Registers used:
 36149 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 36150 ;; Tracked objects:
 36151 ;;		On entry : 0/0
 36152 ;;		On exit  : 0/0
 36153 ;;		Unchanged: 0/0
 36154 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 36155 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 36156 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 36157 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 36158 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 36159 ;;Total ram usage:        7 bytes
 36160 ;; Hardware stack levels used:    1
 36161 ;; Hardware stack levels required when called:   11
 36162 ;; This function calls:
 36163 ;;		_RADIO_RegisterRead
 36164 ;;		_RADIO_RegisterWrite
 36165 ;;		_RADIO_Reset
 36166 ;;		_RADIO_WriteFrequency
 36167 ;;		_RADIO_WriteMode
 36168 ;;		_SwTimerCreate
 36169 ;;		_SwTimerSetCallback
 36170 ;;		_SwTimerStop
 36171 ;; This function is called by:
 36172 ;;		_LORAWAN_Init
 36173 ;;		_LORAWAN_Reset
 36174 ;; This function uses a non-reentrant model
 36175 ;;
 36176                           
 36177                           	psect	text167
 36178  004A26                     __ptext167:
 36179                           	opt stack 0
 36180  004A26                     _RADIO_Init:
 36181                           	opt stack 18
 36182                           
 36183                           ;radio_driver_SX1276.c: 424: RadioConfiguration.frequency = frequency;
 36184                           
 36185                           ;incstack = 0
 36186  004A26  C07B  F155         	movff	RADIO_Init@frequency,_RadioConfiguration
 36187  004A2A  C07C  F156         	movff	RADIO_Init@frequency+1,_RadioConfiguration+1
 36188  004A2E  C07D  F157         	movff	RADIO_Init@frequency+2,_RadioConfiguration+2
 36189  004A32  C07E  F158         	movff	RADIO_Init@frequency+3,_RadioConfiguration+3
 36190                           
 36191                           ;radio_driver_SX1276.c: 425: RadioConfiguration.frequencyDeviation = 25000;
 36192  004A36  0EA8               	movlw	168
 36193  004A38  0101               	movlb	1	; () banked
 36194  004A3A  6F59               	movwf	(_RadioConfiguration+4)& (0+255),b
 36195  004A3C  0E61               	movlw	97
 36196  004A3E  6F5A               	movwf	(_RadioConfiguration+5)& (0+255),b
 36197  004A40  0E00               	movlw	0
 36198  004A42  6F5B               	movwf	(_RadioConfiguration+6)& (0+255),b
 36199  004A44  0E00               	movlw	0
 36200  004A46  6F5C               	movwf	(_RadioConfiguration+7)& (0+255),b
 36201                           
 36202                           ;radio_driver_SX1276.c: 426: RadioConfiguration.bitRate = 50000;
 36203  004A48  0E50               	movlw	80
 36204  004A4A  6F5D               	movwf	(_RadioConfiguration+8)& (0+255),b
 36205  004A4C  0EC3               	movlw	195
 36206  004A4E  6F5E               	movwf	(_RadioConfiguration+9)& (0+255),b
 36207  004A50  0E00               	movlw	0
 36208  004A52  6F5F               	movwf	(_RadioConfiguration+10)& (0+255),b
 36209  004A54  0E00               	movlw	0
 36210  004A56  6F60               	movwf	(_RadioConfiguration+11)& (0+255),b
 36211                           
 36212                           ;radio_driver_SX1276.c: 427: RadioConfiguration.modulation = MODULATION_LORA;
 36213  004A58  0E01               	movlw	1
 36214  004A5A  6F6D               	movwf	(_RadioConfiguration+24)& (0+255),b
 36215                           
 36216                           ;radio_driver_SX1276.c: 428: RadioConfiguration.bandWidth = BW_125KHZ;
 36217  004A5C  0E07               	movlw	7
 36218  004A5E  6F6F               	movwf	(_RadioConfiguration+26)& (0+255),b
 36219                           
 36220                           ;radio_driver_SX1276.c: 429: RadioConfiguration.outputPower = 1;
 36221  004A60  0E01               	movlw	1
 36222  004A62  6F70               	movwf	(_RadioConfiguration+27)& (0+255),b
 36223                           
 36224                           ;radio_driver_SX1276.c: 430: RadioConfiguration.errorCodingRate = CR_4_5;
 36225  004A64  0E01               	movlw	1
 36226  004A66  6F76               	movwf	(_RadioConfiguration+33)& (0+255),b
 36227                           
 36228                           ;radio_driver_SX1276.c: 431: RadioConfiguration.implicitHeaderMode = 0;
 36229  004A68  0E00               	movlw	0
 36230  004A6A  6F77               	movwf	(_RadioConfiguration+34)& (0+255),b
 36231                           
 36232                           ;radio_driver_SX1276.c: 432: RadioConfiguration.preambleLen = 8;
 36233  004A6C  0E00               	movlw	0
 36234  004A6E  6F62               	movwf	(_RadioConfiguration+13)& (0+255),b
 36235  004A70  0E08               	movlw	8
 36236  004A72  6F61               	movwf	(_RadioConfiguration+12)& (0+255),b
 36237                           
 36238                           ;radio_driver_SX1276.c: 433: RadioConfiguration.dataRate = SF_12;
 36239  004A74  0E0C               	movlw	12
 36240  004A76  6F6E               	movwf	(_RadioConfiguration+25)& (0+255),b
 36241                           
 36242                           ;radio_driver_SX1276.c: 434: RadioConfiguration.crcOn = 1;
 36243  004A78  0E01               	movlw	1
 36244  004A7A  6F71               	movwf	(_RadioConfiguration+28)& (0+255),b
 36245                           
 36246                           ;radio_driver_SX1276.c: 435: RadioConfiguration.paBoost = 0;
 36247  004A7C  0E00               	movlw	0
 36248  004A7E  6F72               	movwf	(_RadioConfiguration+29)& (0+255),b
 36249                           
 36250                           ;radio_driver_SX1276.c: 436: RadioConfiguration.iqInverted = 0;
 36251  004A80  0E00               	movlw	0
 36252  004A82  6F75               	movwf	(_RadioConfiguration+32)& (0+255),b
 36253                           
 36254                           ;radio_driver_SX1276.c: 437: RadioConfiguration.syncWord[0] = 0xC1;
 36255  004A84  0EC1               	movlw	193
 36256  004A86  6F64               	movwf	(_RadioConfiguration+15)& (0+255),b
 36257                           
 36258                           ;radio_driver_SX1276.c: 438: RadioConfiguration.syncWord[1] = 0x94;
 36259  004A88  0E94               	movlw	148
 36260  004A8A  6F65               	movwf	(_RadioConfiguration+16)& (0+255),b
 36261                           
 36262                           ;radio_driver_SX1276.c: 439: RadioConfiguration.syncWord[2] = 0xC1;
 36263  004A8C  0EC1               	movlw	193
 36264  004A8E  6F66               	movwf	(_RadioConfiguration+17)& (0+255),b
 36265                           
 36266                           ;radio_driver_SX1276.c: 440: RadioConfiguration.syncWordLen = 3;
 36267  004A90  0E03               	movlw	3
 36268  004A92  6F6C               	movwf	(_RadioConfiguration+23)& (0+255),b
 36269                           
 36270                           ;radio_driver_SX1276.c: 441: RadioConfiguration.syncWordLoRa = 0x34;
 36271  004A94  0E34               	movlw	52
 36272  004A96  6F63               	movwf	(_RadioConfiguration+14)& (0+255),b
 36273                           
 36274                           ;radio_driver_SX1276.c: 442: RadioConfiguration.flags = 0;
 36275  004A98  0E00               	movlw	0
 36276  004A9A  6F78               	movwf	(_RadioConfiguration+35)& (0+255),b
 36277                           
 36278                           ;radio_driver_SX1276.c: 443: RadioConfiguration.dataBufferLen = 0;
 36279  004A9C  0E00               	movlw	0
 36280  004A9E  6F79               	movwf	(_RadioConfiguration+36)& (0+255),b
 36281                           
 36282                           ; BSR set to: 1
 36283                           ;radio_driver_SX1276.c: 444: RadioConfiguration.dataBuffer = radioBuffer;
 36284  004AA0  C079  F17A         	movff	RADIO_Init@radioBuffer,_RadioConfiguration+37
 36285  004AA4  C07A  F17B         	movff	RADIO_Init@radioBuffer+1,_RadioConfiguration+38
 36286                           
 36287                           ; BSR set to: 1
 36288                           ;radio_driver_SX1276.c: 445: RadioConfiguration.frequencyHopPeriod = 0;
 36289  004AA8  0E00               	movlw	0
 36290  004AAA  6F74               	movwf	(_RadioConfiguration+31)& (0+255),b
 36291  004AAC  0E00               	movlw	0
 36292  004AAE  6F73               	movwf	(_RadioConfiguration+30)& (0+255),b
 36293                           
 36294                           ; BSR set to: 1
 36295                           ;radio_driver_SX1276.c: 446: RadioConfiguration.packetSNR = -128;
 36296  004AB0  0E80               	movlw	128
 36297  004AB2  6F87               	movwf	(_RadioConfiguration+50)& (0+255),b
 36298                           
 36299                           ; BSR set to: 1
 36300                           ;radio_driver_SX1276.c: 447: RadioConfiguration.watchdogTimerTimeout = ((uint32_t)15000)
      +                          ;
 36301  004AB4  0E98               	movlw	152
 36302  004AB6  6F7F               	movwf	(_RadioConfiguration+42)& (0+255),b
 36303  004AB8  0E3A               	movlw	58
 36304  004ABA  6F80               	movwf	(_RadioConfiguration+43)& (0+255),b
 36305  004ABC  0E00               	movlw	0
 36306  004ABE  6F81               	movwf	(_RadioConfiguration+44)& (0+255),b
 36307  004AC0  0E00               	movlw	0
 36308  004AC2  6F82               	movwf	(_RadioConfiguration+45)& (0+255),b
 36309                           
 36310                           ; BSR set to: 1
 36311                           ;radio_driver_SX1276.c: 448: RadioConfiguration.fskDataShaping = FSK_SHAPING_GAUSS_BT_0_
      +                          5;
 36312  004AC4  0E02               	movlw	2
 36313  004AC6  6F88               	movwf	(_RadioConfiguration+51)& (0+255),b
 36314                           
 36315                           ; BSR set to: 1
 36316                           ;radio_driver_SX1276.c: 449: RadioConfiguration.rxBw = FSKBW_50_0KHZ;
 36317  004AC8  0E0B               	movlw	11
 36318  004ACA  6F89               	movwf	(_RadioConfiguration+52)& (0+255),b
 36319                           
 36320                           ; BSR set to: 1
 36321                           ;radio_driver_SX1276.c: 450: RadioConfiguration.afcBw = FSKBW_83_3KHZ;
 36322  004ACC  0E12               	movlw	18
 36323  004ACE  6F8A               	movwf	(_RadioConfiguration+53)& (0+255),b
 36324                           
 36325                           ; BSR set to: 1
 36326                           ;radio_driver_SX1276.c: 451: RadioConfiguration.fhssNextFrequency = (0);
 36327  004AD0  0E00               	movlw	0
 36328  004AD2  6F84               	movwf	(_RadioConfiguration+47)& (0+255),b
 36329  004AD4  0E00               	movlw	0
 36330  004AD6  6F85               	movwf	(_RadioConfiguration+48)& (0+255),b
 36331                           
 36332                           ;radio_driver_SX1276.c: 456: if (0 == RadioConfiguration.initialized)
 36333  004AD8  5183               	movf	(_RadioConfiguration+46)& (0+255),w,b
 36334  004ADA  A4D8               	btfss	status,2,c
 36335  004ADC  D026               	goto	l214
 36336                           
 36337                           ; BSR set to: 1
 36338                           ;radio_driver_SX1276.c: 457: {
 36339                           ;radio_driver_SX1276.c: 460: RadioConfiguration.timeOnAirTimerId = SwTimerCreate();
 36340  004ADE  EC47  F03B         	call	_SwTimerCreate	;wreg free
 36341  004AE2  0101               	movlb	1	; () banked
 36342  004AE4  6F7C               	movwf	(_RadioConfiguration+39)& (0+255),b
 36343                           
 36344                           ;radio_driver_SX1276.c: 461: RadioConfiguration.fskRxWindowTimerId = SwTimerCreate();
 36345  004AE6  EC47  F03B         	call	_SwTimerCreate	;wreg free
 36346  004AEA  0101               	movlb	1	; () banked
 36347  004AEC  6F7D               	movwf	(_RadioConfiguration+40)& (0+255),b
 36348                           
 36349                           ;radio_driver_SX1276.c: 462: RadioConfiguration.watchdogTimerId = SwTimerCreate();
 36350  004AEE  EC47  F03B         	call	_SwTimerCreate	;wreg free
 36351  004AF2  0101               	movlb	1	; () banked
 36352  004AF4  6F7E               	movwf	(_RadioConfiguration+41)& (0+255),b
 36353                           
 36354                           ;radio_driver_SX1276.c: 463: SwTimerSetCallback(RadioConfiguration.fskRxWindowTimerId, R
      +                          ADIO_RxFSKTimeout, 0);
 36355  004AF6  0EC8               	movlw	low _RADIO_RxFSKTimeout
 36356  004AF8  0100               	movlb	0	; () banked
 36357  004AFA  6F60               	movwf	SwTimerSetCallback@callback& (0+255),b
 36358  004AFC  0E8B               	movlw	high _RADIO_RxFSKTimeout
 36359  004AFE  6F61               	movwf	(SwTimerSetCallback@callback+1)& (0+255),b
 36360  004B00  0E00               	movlw	0
 36361  004B02  6F62               	movwf	SwTimerSetCallback@callbackParameter& (0+255),b
 36362  004B04  0101               	movlb	1	; () banked
 36363  004B06  517D               	movf	(_RadioConfiguration+40)& (0+255),w,b
 36364  004B08  ECDF  F044         	call	_SwTimerSetCallback
 36365                           
 36366                           ;radio_driver_SX1276.c: 464: SwTimerSetCallback(RadioConfiguration.watchdogTimerId, RADI
      +                          O_WatchdogTimeout, 0);
 36367  004B0C  0E20               	movlw	low _RADIO_WatchdogTimeout
 36368  004B0E  0100               	movlb	0	; () banked
 36369  004B10  6F60               	movwf	SwTimerSetCallback@callback& (0+255),b
 36370  004B12  0E88               	movlw	high _RADIO_WatchdogTimeout
 36371  004B14  6F61               	movwf	(SwTimerSetCallback@callback+1)& (0+255),b
 36372  004B16  0E00               	movlw	0
 36373  004B18  6F62               	movwf	SwTimerSetCallback@callbackParameter& (0+255),b
 36374  004B1A  0101               	movlb	1	; () banked
 36375  004B1C  517E               	movf	(_RadioConfiguration+41)& (0+255),w,b
 36376  004B1E  ECDF  F044         	call	_SwTimerSetCallback
 36377                           
 36378                           ;radio_driver_SX1276.c: 465: RadioConfiguration.initialized = 1;
 36379  004B22  0E01               	movlw	1
 36380  004B24  0101               	movlb	1	; () banked
 36381  004B26  6F83               	movwf	(_RadioConfiguration+46)& (0+255),b
 36382                           
 36383                           ;radio_driver_SX1276.c: 466: }
 36384  004B28  D00B               	goto	l215
 36385  004B2A                     l214:
 36386                           
 36387                           ; BSR set to: 1
 36388                           ;radio_driver_SX1276.c: 467: else
 36389                           ;radio_driver_SX1276.c: 468: {
 36390                           ;radio_driver_SX1276.c: 469: SwTimerStop(RadioConfiguration.timeOnAirTimerId);
 36391                           
 36392                           ; BSR set to: 1
 36393  004B2A  517C               	movf	(_RadioConfiguration+39)& (0+255),w,b
 36394  004B2C  ECFB  F047         	call	_SwTimerStop
 36395                           
 36396                           ;radio_driver_SX1276.c: 470: SwTimerStop(RadioConfiguration.fskRxWindowTimerId);
 36397  004B30  0101               	movlb	1	; () banked
 36398  004B32  517D               	movf	(_RadioConfiguration+40)& (0+255),w,b
 36399  004B34  ECFB  F047         	call	_SwTimerStop
 36400                           
 36401                           ;radio_driver_SX1276.c: 471: SwTimerStop(RadioConfiguration.watchdogTimerId);
 36402  004B38  0101               	movlb	1	; () banked
 36403  004B3A  517E               	movf	(_RadioConfiguration+41)& (0+255),w,b
 36404  004B3C  ECFB  F047         	call	_SwTimerStop
 36405  004B40                     l215:
 36406                           
 36407                           ;radio_driver_SX1276.c: 472: }
 36408                           ;radio_driver_SX1276.c: 474: RADIO_Reset();
 36409  004B40  EC56  F044         	call	_RADIO_Reset	;wreg free
 36410                           
 36411                           ;radio_driver_SX1276.c: 479: RADIO_WriteMode(MODE_STANDBY, MODULATION_FSK, 1);
 36412  004B44  0E00               	movlw	0
 36413  004B46  0100               	movlb	0	; () banked
 36414  004B48  6F65               	movwf	RADIO_WriteMode@newModulation& (0+255),b
 36415  004B4A  0E01               	movlw	1
 36416  004B4C  6F66               	movwf	RADIO_WriteMode@blocking& (0+255),b
 36417  004B4E  0E01               	movlw	1
 36418  004B50  ECDA  F031         	call	_RADIO_WriteMode
 36419                           
 36420                           ;radio_driver_SX1276.c: 482: RADIO_WriteFrequency(RadioConfiguration.frequency);
 36421  004B54  C155  F06D         	movff	_RadioConfiguration,RADIO_WriteFrequency@frequency
 36422  004B58  C156  F06E         	movff	_RadioConfiguration+1,RADIO_WriteFrequency@frequency+1
 36423  004B5C  C157  F06F         	movff	_RadioConfiguration+2,RADIO_WriteFrequency@frequency+2
 36424  004B60  C158  F070         	movff	_RadioConfiguration+3,RADIO_WriteFrequency@frequency+3
 36425  004B64  ECC8  F033         	call	_RADIO_WriteFrequency	;wreg free
 36426                           
 36427                           ;radio_driver_SX1276.c: 486: RADIO_RegisterWrite(0x3B, 0x42);
 36428  004B68  0E42               	movlw	66
 36429  004B6A  0100               	movlb	0	; () banked
 36430  004B6C  6F62               	movwf	RADIO_RegisterWrite@value& (0+255),b
 36431  004B6E  0E3B               	movlw	59
 36432  004B70  ECBE  F048         	call	_RADIO_RegisterWrite
 36433  004B74                     
 36434                           ;radio_driver_SX1276.c: 490: ;
 36435  004B74  0E3B               	movlw	59
 36436  004B76  ECE7  F047         	call	_RADIO_RegisterRead
 36437  004B7A  0100               	movlb	0	; () banked
 36438  004B7C  6F7F               	movwf	??_RADIO_Init& (0+255),b
 36439  004B7E  BB7F               	btfsc	??_RADIO_Init& (0+255),5,b
 36440  004B80  D7F9               	goto	l217
 36441                           
 36442                           ; BSR set to: 0
 36443                           ;radio_driver_SX1276.c: 493: RADIO_RegisterWrite(0x0C, 0x23);
 36444                           
 36445                           ; BSR set to: 0
 36446  004B82  0E23               	movlw	35
 36447  004B84  6F62               	movwf	RADIO_RegisterWrite@value& (0+255),b
 36448  004B86  0E0C               	movlw	12
 36449  004B88  ECBE  F048         	call	_RADIO_RegisterWrite
 36450                           
 36451                           ;radio_driver_SX1276.c: 496: RADIO_RegisterWrite(0x0D, 0x1E);
 36452  004B8C  0E1E               	movlw	30
 36453  004B8E  0100               	movlb	0	; () banked
 36454  004B90  6F62               	movwf	RADIO_RegisterWrite@value& (0+255),b
 36455  004B92  0E0D               	movlw	13
 36456  004B94  ECBE  F048         	call	_RADIO_RegisterWrite
 36457                           
 36458                           ;radio_driver_SX1276.c: 500: RADIO_RegisterWrite(0x1F, 0xAA);
 36459  004B98  0EAA               	movlw	170
 36460  004B9A  0100               	movlb	0	; () banked
 36461  004B9C  6F62               	movwf	RADIO_RegisterWrite@value& (0+255),b
 36462  004B9E  0E1F               	movlw	31
 36463  004BA0  ECBE  F048         	call	_RADIO_RegisterWrite
 36464                           
 36465                           ;radio_driver_SX1276.c: 504: RADIO_RegisterWrite(0x35, 0x8F);
 36466  004BA4  0E8F               	movlw	143
 36467  004BA6  0100               	movlb	0	; () banked
 36468  004BA8  6F62               	movwf	RADIO_RegisterWrite@value& (0+255),b
 36469  004BAA  0E35               	movlw	53
 36470  004BAC  ECBE  F048         	call	_RADIO_RegisterWrite
 36471                           
 36472                           ;radio_driver_SX1276.c: 507: RADIO_RegisterWrite(0x32, 0xFF);
 36473  004BB0  0EFF               	movlw	255
 36474  004BB2  0100               	movlb	0	; () banked
 36475  004BB4  6F62               	movwf	RADIO_RegisterWrite@value& (0+255),b
 36476  004BB6  0E32               	movlw	50
 36477  004BB8  ECBE  F048         	call	_RADIO_RegisterWrite
 36478                           
 36479                           ;radio_driver_SX1276.c: 510: RADIO_RegisterWrite(0x31, 1 << (6));
 36480  004BBC  0E40               	movlw	64
 36481  004BBE  0100               	movlb	0	; () banked
 36482  004BC0  6F62               	movwf	RADIO_RegisterWrite@value& (0+255),b
 36483  004BC2  0E31               	movlw	49
 36484  004BC4  ECBE  F048         	call	_RADIO_RegisterWrite
 36485                           
 36486                           ;radio_driver_SX1276.c: 513: RADIO_WriteMode(MODE_SLEEP, MODULATION_LORA, 1);
 36487  004BC8  0E01               	movlw	1
 36488  004BCA  0100               	movlb	0	; () banked
 36489  004BCC  6F65               	movwf	RADIO_WriteMode@newModulation& (0+255),b
 36490  004BCE  0E01               	movlw	1
 36491  004BD0  6F66               	movwf	RADIO_WriteMode@blocking& (0+255),b
 36492  004BD2  0E00               	movlw	0
 36493  004BD4  ECDA  F031         	call	_RADIO_WriteMode
 36494                           
 36495                           ;radio_driver_SX1276.c: 517: RADIO_RegisterWrite(0x23, 0xFF);
 36496  004BD8  0EFF               	movlw	255
 36497  004BDA  0100               	movlb	0	; () banked
 36498  004BDC  6F62               	movwf	RADIO_RegisterWrite@value& (0+255),b
 36499  004BDE  0E23               	movlw	35
 36500  004BE0  ECBE  F048         	call	_RADIO_RegisterWrite
 36501                           
 36502                           ;radio_driver_SX1276.c: 519: RadioConfiguration.regVersion = RADIO_RegisterRead(0x42);
 36503  004BE4  0E42               	movlw	66
 36504  004BE6  ECE7  F047         	call	_RADIO_RegisterRead
 36505  004BEA  0101               	movlb	1	; () banked
 36506  004BEC  6F86               	movwf	(_RadioConfiguration+49)& (0+255),b
 36507                           
 36508                           ; BSR set to: 1
 36509  004BEE  0012               	return		;funcret
 36510  004BF0                     __end_of_RADIO_Init:
 36511                           	opt stack 0
 36512                           tosu	equ	0xFFF
 36513                           tosh	equ	0xFFE
 36514                           tosl	equ	0xFFD
 36515                           pclath	equ	0xFFA
 36516                           tblptru	equ	0xFF8
 36517                           tblptrh	equ	0xFF7
 36518                           tblptrl	equ	0xFF6
 36519                           tablat	equ	0xFF5
 36520                           prodh	equ	0xFF4
 36521                           prodl	equ	0xFF3
 36522                           intcon	equ	0xFF2
 36523                           intcon2	equ	0xFF1
 36524                           intcon3	equ	0xFF0
 36525                           indf0	equ	0xFEF
 36526                           postinc0	equ	0xFEE
 36527                           plusw0	equ	0xFEB
 36528                           fsr0h	equ	0xFEA
 36529                           fsr0l	equ	0xFE9
 36530                           wreg	equ	0xFE8
 36531                           postinc1	equ	0xFE6
 36532                           postdec1	equ	0xFE5
 36533                           plusw1	equ	0xFE3
 36534                           fsr1h	equ	0xFE2
 36535                           fsr1l	equ	0xFE1
 36536                           indf2	equ	0xFDF
 36537                           postinc2	equ	0xFDE
 36538                           postdec2	equ	0xFDD
 36539                           plusw2	equ	0xFDB
 36540                           fsr2h	equ	0xFDA
 36541                           fsr2l	equ	0xFD9
 36542                           status	equ	0xFD8
 36543                           
 36544 ;; *************** function _SwTimerSetCallback *****************
 36545 ;; Defined at:
 36546 ;;		line 180 in file "mcc_generated_files/LoRaWAN/sw_timer.c"
 36547 ;; Parameters:    Size  Location     Type
 36548 ;;  timerId         1    wreg     unsigned char 
 36549 ;;  callback        2    0[BANK0 ] PTR FTN(unsigned char ,)
 36550 ;;		 -> DutyCycleCallback(1), UpdateJoinSuccessState(1), AutomaticReplyCallback(1), UnconfirmedTransmissionCallback(1), 
 36551 ;;		 -> AckRetransmissionCallback(1), LORAWAN_LinkCheckCallback(1), LORAWAN_ReceiveWindow2Callback(1), LORAWAN_ReceiveWi
      +ndow1Callback(1), 
 36552 ;;		 -> RADIO_WatchdogTimeout(1), RADIO_RxFSKTimeout(1), 
 36553 ;;  callbackPara    1    2[BANK0 ] unsigned char 
 36554 ;; Auto vars:     Size  Location     Type
 36555 ;;  timerId         1    3[BANK0 ] unsigned char 
 36556 ;; Return value:  Size  Location     Type
 36557 ;;                  1    wreg      void 
 36558 ;; Registers used:
 36559 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 36560 ;; Tracked objects:
 36561 ;;		On entry : 0/0
 36562 ;;		On exit  : 0/0
 36563 ;;		Unchanged: 0/0
 36564 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 36565 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 36566 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 36567 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 36568 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 36569 ;;Total ram usage:        4 bytes
 36570 ;; Hardware stack levels used:    1
 36571 ;; Hardware stack levels required when called:    7
 36572 ;; This function calls:
 36573 ;;		Nothing
 36574 ;; This function is called by:
 36575 ;;		_RADIO_Init
 36576 ;;		_SetCallbackSoftwareTimers
 36577 ;; This function uses a non-reentrant model
 36578 ;;
 36579                           
 36580                           	psect	text168
 36581  0089BE                     __ptext168:
 36582                           	opt stack 0
 36583  0089BE                     _SwTimerSetCallback:
 36584                           	opt stack 21
 36585                           
 36586                           ; BSR set to: 1
 36587                           ;incstack = 0
 36588                           ;SwTimerSetCallback@timerId stored from wreg
 36589  0089BE  0100               	movlb	0	; () banked
 36590  0089C0  6F63               	movwf	SwTimerSetCallback@timerId& (0+255),b
 36591                           
 36592                           ;sw_timer.c: 182: swTimers[timerId].callback = callback;
 36593  0089C2  0100               	movlb	0	; () banked
 36594  0089C4  5163               	movf	SwTimerSetCallback@timerId& (0+255),w,b
 36595  0089C6  0D08               	mullw	8
 36596  0089C8  0E06               	movlw	6
 36597  0089CA  26F3               	addwf	prodl,f,c
 36598  0089CC  0E00               	movlw	0
 36599  0089CE  22F4               	addwfc	prodh,f,c
 36600  0089D0  0E00               	movlw	low _swTimers
 36601  0089D2  24F3               	addwf	prodl,w,c
 36602  0089D4  6ED9               	movwf	fsr2l,c
 36603  0089D6  0E03               	movlw	high _swTimers
 36604  0089D8  20F4               	addwfc	prodh,w,c
 36605  0089DA  6EDA               	movwf	fsr2h,c
 36606  0089DC  C060  FFDE         	movff	SwTimerSetCallback@callback,postinc2	;volatile
 36607  0089E0  C061  FFDD         	movff	SwTimerSetCallback@callback+1,postdec2	;volatile
 36608                           
 36609                           ;sw_timer.c: 183: swTimers[timerId].callbackParameter = callbackParameter;
 36610  0089E4  5163               	movf	SwTimerSetCallback@timerId& (0+255),w,b
 36611  0089E6  0D08               	mullw	8
 36612  0089E8  0E05               	movlw	5
 36613  0089EA  26F3               	addwf	prodl,f,c
 36614  0089EC  0E00               	movlw	0
 36615  0089EE  22F4               	addwfc	prodh,f,c
 36616  0089F0  0E00               	movlw	low _swTimers
 36617  0089F2  24F3               	addwf	prodl,w,c
 36618  0089F4  6ED9               	movwf	fsr2l,c
 36619  0089F6  0E03               	movlw	high _swTimers
 36620  0089F8  20F4               	addwfc	prodh,w,c
 36621  0089FA  6EDA               	movwf	fsr2h,c
 36622  0089FC  C062  FFDF         	movff	SwTimerSetCallback@callbackParameter,indf2
 36623                           
 36624                           ; BSR set to: 0
 36625  008A00  0012               	return		;funcret
 36626  008A02                     __end_of_SwTimerSetCallback:
 36627                           	opt stack 0
 36628                           tosu	equ	0xFFF
 36629                           tosh	equ	0xFFE
 36630                           tosl	equ	0xFFD
 36631                           pclath	equ	0xFFA
 36632                           tblptru	equ	0xFF8
 36633                           tblptrh	equ	0xFF7
 36634                           tblptrl	equ	0xFF6
 36635                           tablat	equ	0xFF5
 36636                           prodh	equ	0xFF4
 36637                           prodl	equ	0xFF3
 36638                           intcon	equ	0xFF2
 36639                           intcon2	equ	0xFF1
 36640                           intcon3	equ	0xFF0
 36641                           indf0	equ	0xFEF
 36642                           postinc0	equ	0xFEE
 36643                           plusw0	equ	0xFEB
 36644                           fsr0h	equ	0xFEA
 36645                           fsr0l	equ	0xFE9
 36646                           wreg	equ	0xFE8
 36647                           postinc1	equ	0xFE6
 36648                           postdec1	equ	0xFE5
 36649                           plusw1	equ	0xFE3
 36650                           fsr1h	equ	0xFE2
 36651                           fsr1l	equ	0xFE1
 36652                           indf2	equ	0xFDF
 36653                           postinc2	equ	0xFDE
 36654                           postdec2	equ	0xFDD
 36655                           plusw2	equ	0xFDB
 36656                           fsr2h	equ	0xFDA
 36657                           fsr2l	equ	0xFD9
 36658                           status	equ	0xFD8
 36659                           
 36660 ;; *************** function _RADIO_WriteMode *****************
 36661 ;; Defined at:
 36662 ;;		line 147 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 36663 ;; Parameters:    Size  Location     Type
 36664 ;;  newMode         1    wreg     enum E7718
 36665 ;;  newModulatio    1    5[BANK0 ] enum E6984
 36666 ;;  blocking        1    6[BANK0 ] unsigned char 
 36667 ;; Auto vars:     Size  Location     Type
 36668 ;;  newMode         1   10[BANK0 ] enum E7718
 36669 ;;  opMode          1   11[BANK0 ] unsigned char 
 36670 ;;  currentMode     1    9[BANK0 ] enum E7718
 36671 ;;  dioMapping      1    8[BANK0 ] unsigned char 
 36672 ;;  currentModul    1    7[BANK0 ] enum E6984
 36673 ;; Return value:  Size  Location     Type
 36674 ;;                  1    wreg      void 
 36675 ;; Registers used:
 36676 ;;		wreg, status,2, status,0, cstack
 36677 ;; Tracked objects:
 36678 ;;		On entry : 0/0
 36679 ;;		On exit  : 0/0
 36680 ;;		Unchanged: 0/0
 36681 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 36682 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 36683 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 36684 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 36685 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 36686 ;;Total ram usage:        7 bytes
 36687 ;; Hardware stack levels used:    1
 36688 ;; Hardware stack levels required when called:   10
 36689 ;; This function calls:
 36690 ;;		_HALDIO5PinValue
 36691 ;;		_RADIO_RegisterRead
 36692 ;;		_RADIO_RegisterWrite
 36693 ;;		_SystemBlockingWaitMs
 36694 ;; This function is called by:
 36695 ;;		_RADIO_Init
 36696 ;;		_RADIO_WriteConfiguration
 36697 ;;		_RADIO_Transmit
 36698 ;;		_RADIO_ReceiveStart
 36699 ;;		_RADIO_ReceiveStop
 36700 ;;		_RADIO_RxDone
 36701 ;;		_RADIO_FSKPayloadReady
 36702 ;;		_RADIO_RxTimeout
 36703 ;;		_RADIO_TxDone
 36704 ;;		_RADIO_FSKPacketSent
 36705 ;;		_RADIO_ReadRandom
 36706 ;;		_RADIO_RxFSKTimeout
 36707 ;;		_RADIO_WatchdogTimeout
 36708 ;;		_RADIO_StopCW
 36709 ;; This function uses a non-reentrant model
 36710 ;;
 36711                           
 36712                           	psect	text169
 36713  0063B4                     __ptext169:
 36714                           	opt stack 0
 36715  0063B4                     _RADIO_WriteMode:
 36716                           	opt stack 18
 36717                           
 36718                           ; BSR set to: 0
 36719                           ;incstack = 0
 36720                           ;RADIO_WriteMode@newMode stored from wreg
 36721  0063B4  0100               	movlb	0	; () banked
 36722  0063B6  6F6A               	movwf	RADIO_WriteMode@newMode& (0+255),b
 36723                           
 36724                           ;radio_driver_SX1276.c: 149: uint8_t opMode;
 36725                           ;radio_driver_SX1276.c: 150: uint8_t dioMapping;
 36726                           ;radio_driver_SX1276.c: 151: RadioModulation_t currentModulation;
 36727                           ;radio_driver_SX1276.c: 152: RadioMode_t currentMode;
 36728                           ;radio_driver_SX1276.c: 154: if ((MODULATION_FSK == newModulation) &&
 36729                           ;radio_driver_SX1276.c: 155: ((MODE_RXSINGLE == newMode) || (MODE_CAD == newMode)))
 36730  0063B8  0100               	movlb	0	; () banked
 36731  0063BA  5165               	movf	RADIO_WriteMode@newModulation& (0+255),w,b
 36732  0063BC  A4D8               	btfss	status,2,c
 36733  0063BE  D008               	goto	l160
 36734                           
 36735                           ; BSR set to: 0
 36736  0063C0  0E06               	movlw	6
 36737  0063C2  196A               	xorwf	RADIO_WriteMode@newMode& (0+255),w,b
 36738  0063C4  B4D8               	btfsc	status,2,c
 36739  0063C6  0012               	return	
 36740                           
 36741                           ; BSR set to: 0
 36742  0063C8  0E07               	movlw	7
 36743  0063CA  196A               	xorwf	RADIO_WriteMode@newMode& (0+255),w,b
 36744  0063CC  B4D8               	btfsc	status,2,c
 36745  0063CE  0012               	return	
 36746  0063D0                     l160:
 36747                           
 36748                           ; BSR set to: 0
 36749                           ;radio_driver_SX1276.c: 159: }
 36750                           ;radio_driver_SX1276.c: 162: newMode &= 0x07;
 36751                           
 36752                           ; BSR set to: 0
 36753  0063D0  0E07               	movlw	7
 36754  0063D2  176A               	andwf	RADIO_WriteMode@newMode& (0+255),f,b
 36755                           
 36756                           ;radio_driver_SX1276.c: 163: newModulation &= 0x01;
 36757  0063D4  0E01               	movlw	1
 36758  0063D6  1765               	andwf	RADIO_WriteMode@newModulation& (0+255),f,b
 36759                           
 36760                           ; BSR set to: 0
 36761                           ;radio_driver_SX1276.c: 165: opMode = RADIO_RegisterRead(0x01);
 36762  0063D8  0E01               	movlw	1
 36763  0063DA  ECE7  F047         	call	_RADIO_RegisterRead
 36764  0063DE  0100               	movlb	0	; () banked
 36765  0063E0  6F6B               	movwf	RADIO_WriteMode@opMode& (0+255),b
 36766                           
 36767                           ; BSR set to: 0
 36768                           ;radio_driver_SX1276.c: 167: if ((opMode & 0x80) != 0)
 36769  0063E2  AF6B               	btfss	RADIO_WriteMode@opMode& (0+255),7,b
 36770  0063E4  D002               	goto	l164
 36771                           
 36772                           ; BSR set to: 0
 36773                           ;radio_driver_SX1276.c: 168: {
 36774                           ;radio_driver_SX1276.c: 169: currentModulation = MODULATION_LORA;
 36775  0063E6  0E01               	movlw	1
 36776  0063E8  D001               	goto	L26
 36777  0063EA                     l164:
 36778                           
 36779                           ; BSR set to: 0
 36780                           ;radio_driver_SX1276.c: 171: else
 36781                           ;radio_driver_SX1276.c: 172: {
 36782                           ;radio_driver_SX1276.c: 173: currentModulation = MODULATION_FSK;
 36783                           
 36784                           ; BSR set to: 0
 36785  0063EA  0E00               	movlw	0
 36786  0063EC                     L26:
 36787  0063EC  6F67               	movwf	RADIO_WriteMode@currentModulation& (0+255),b
 36788                           
 36789                           ; BSR set to: 0
 36790                           ;radio_driver_SX1276.c: 174: }
 36791                           ;radio_driver_SX1276.c: 176: currentMode = opMode & 0x07;
 36792                           
 36793                           ; BSR set to: 0
 36794  0063EE  516B               	movf	RADIO_WriteMode@opMode& (0+255),w,b
 36795  0063F0  0B07               	andlw	7
 36796  0063F2  6F69               	movwf	RADIO_WriteMode@currentMode& (0+255),b
 36797                           
 36798                           ; BSR set to: 0
 36799                           ;radio_driver_SX1276.c: 180: if (newModulation != currentModulation)
 36800  0063F4  5167               	movf	RADIO_WriteMode@currentModulation& (0+255),w,b
 36801  0063F6  1965               	xorwf	RADIO_WriteMode@newModulation& (0+255),w,b
 36802  0063F8  B4D8               	btfsc	status,2,c
 36803  0063FA  D01B               	goto	l166
 36804                           
 36805                           ; BSR set to: 0
 36806                           ;radio_driver_SX1276.c: 181: {
 36807                           ;radio_driver_SX1276.c: 183: if (MODE_SLEEP != currentMode)
 36808  0063FC  5169               	movf	RADIO_WriteMode@currentMode& (0+255),w,b
 36809  0063FE  B4D8               	btfsc	status,2,c
 36810  006400  D009               	goto	l167
 36811                           
 36812                           ; BSR set to: 0
 36813                           ;radio_driver_SX1276.c: 184: {
 36814                           ;radio_driver_SX1276.c: 186: RADIO_RegisterWrite(0x01, opMode & (~0x07));
 36815  006402  516B               	movf	RADIO_WriteMode@opMode& (0+255),w,b
 36816  006404  0BF8               	andlw	248
 36817  006406  6F62               	movwf	RADIO_RegisterWrite@value& (0+255),b
 36818  006408  0E01               	movlw	1
 36819  00640A  ECBE  F048         	call	_RADIO_RegisterWrite
 36820                           
 36821                           ;radio_driver_SX1276.c: 187: currentMode = MODE_SLEEP;
 36822  00640E  0E00               	movlw	0
 36823  006410  0100               	movlb	0	; () banked
 36824  006412  6F69               	movwf	RADIO_WriteMode@currentMode& (0+255),b
 36825  006414                     l167:
 36826                           
 36827                           ; BSR set to: 0
 36828                           ;radio_driver_SX1276.c: 188: }
 36829                           ;radio_driver_SX1276.c: 190: if (MODULATION_FSK == newModulation)
 36830                           
 36831                           ; BSR set to: 0
 36832  006414  5165               	movf	RADIO_WriteMode@newModulation& (0+255),w,b
 36833  006416  A4D8               	btfss	status,2,c
 36834  006418  D003               	goto	l168
 36835                           
 36836                           ; BSR set to: 0
 36837                           ;radio_driver_SX1276.c: 191: {
 36838                           ;radio_driver_SX1276.c: 193: opMode = opMode & (~0x87);
 36839  00641A  516B               	movf	RADIO_WriteMode@opMode& (0+255),w,b
 36840  00641C  0B78               	andlw	120
 36841  00641E  D003               	goto	L27
 36842  006420                     l168:
 36843                           
 36844                           ; BSR set to: 0
 36845                           ;radio_driver_SX1276.c: 195: else
 36846                           ;radio_driver_SX1276.c: 196: {
 36847                           ;radio_driver_SX1276.c: 198: opMode = 0x80 | (opMode & (~0x87));
 36848                           
 36849                           ; BSR set to: 0
 36850  006420  516B               	movf	RADIO_WriteMode@opMode& (0+255),w,b
 36851  006422  0B78               	andlw	120
 36852  006424  0980               	iorlw	128
 36853  006426                     L27:
 36854  006426  6F6B               	movwf	RADIO_WriteMode@opMode& (0+255),b
 36855                           
 36856                           ; BSR set to: 0
 36857                           ;radio_driver_SX1276.c: 199: }
 36858                           ;radio_driver_SX1276.c: 200: RADIO_RegisterWrite(0x01, opMode);
 36859                           
 36860                           ; BSR set to: 0
 36861  006428  C06B  F062         	movff	RADIO_WriteMode@opMode,RADIO_RegisterWrite@value
 36862  00642C  0E01               	movlw	1
 36863  00642E  ECBE  F048         	call	_RADIO_RegisterWrite
 36864  006432                     l166:
 36865                           
 36866                           ;radio_driver_SX1276.c: 201: }
 36867                           ;radio_driver_SX1276.c: 207: if (newMode != currentMode)
 36868  006432  0100               	movlb	0	; () banked
 36869  006434  5169               	movf	RADIO_WriteMode@currentMode& (0+255),w,b
 36870  006436  196A               	xorwf	RADIO_WriteMode@newMode& (0+255),w,b
 36871  006438  B4D8               	btfsc	status,2,c
 36872  00643A  0012               	return	
 36873                           
 36874                           ; BSR set to: 0
 36875                           ;radio_driver_SX1276.c: 208: {
 36876                           ;radio_driver_SX1276.c: 211: if ((MODE_SLEEP != newMode) && (1 == blocking))
 36877  00643C  516A               	movf	RADIO_WriteMode@newMode& (0+255),w,b
 36878  00643E  B4D8               	btfsc	status,2,c
 36879  006440  D015               	goto	l171
 36880                           
 36881                           ; BSR set to: 0
 36882  006442  0566               	decf	RADIO_WriteMode@blocking& (0+255),w,b
 36883  006444  A4D8               	btfss	status,2,c
 36884  006446  D012               	goto	l171
 36885                           
 36886                           ; BSR set to: 0
 36887                           ;radio_driver_SX1276.c: 212: {
 36888                           ;radio_driver_SX1276.c: 213: dioMapping = RADIO_RegisterRead(0x41);
 36889  006448  0E41               	movlw	65
 36890  00644A  ECE7  F047         	call	_RADIO_RegisterRead
 36891  00644E  0100               	movlb	0	; () banked
 36892  006450  6F68               	movwf	RADIO_WriteMode@dioMapping& (0+255),b
 36893                           
 36894                           ; BSR set to: 0
 36895                           ;radio_driver_SX1276.c: 214: if (MODULATION_FSK == newModulation)
 36896  006452  5165               	movf	RADIO_WriteMode@newModulation& (0+255),w,b
 36897  006454  A4D8               	btfss	status,2,c
 36898  006456  D003               	goto	l172
 36899                           
 36900                           ; BSR set to: 0
 36901                           ;radio_driver_SX1276.c: 215: {
 36902                           ;radio_driver_SX1276.c: 217: dioMapping |= 0x30;
 36903  006458  0E30               	movlw	48
 36904  00645A  1368               	iorwf	RADIO_WriteMode@dioMapping& (0+255),f,b
 36905                           
 36906                           ;radio_driver_SX1276.c: 218: }
 36907  00645C  D002               	goto	l173
 36908  00645E                     l172:
 36909                           
 36910                           ; BSR set to: 0
 36911                           ;radio_driver_SX1276.c: 219: else
 36912                           ;radio_driver_SX1276.c: 220: {
 36913                           ;radio_driver_SX1276.c: 222: dioMapping &= ~0x30;
 36914                           
 36915                           ; BSR set to: 0
 36916  00645E  0ECF               	movlw	207
 36917  006460  1768               	andwf	RADIO_WriteMode@dioMapping& (0+255),f,b
 36918  006462                     l173:
 36919                           
 36920                           ; BSR set to: 0
 36921                           ;radio_driver_SX1276.c: 223: }
 36922                           ;radio_driver_SX1276.c: 224: RADIO_RegisterWrite(0x41, dioMapping);
 36923                           
 36924                           ; BSR set to: 0
 36925  006462  C068  F062         	movff	RADIO_WriteMode@dioMapping,RADIO_RegisterWrite@value
 36926  006466  0E41               	movlw	65
 36927  006468  ECBE  F048         	call	_RADIO_RegisterWrite
 36928  00646C                     l171:
 36929                           
 36930                           ;radio_driver_SX1276.c: 225: }
 36931                           ;radio_driver_SX1276.c: 228: opMode &= ~0x07;
 36932  00646C  0EF8               	movlw	248
 36933  00646E  0100               	movlb	0	; () banked
 36934  006470  176B               	andwf	RADIO_WriteMode@opMode& (0+255),f,b
 36935                           
 36936                           ; BSR set to: 0
 36937                           ;radio_driver_SX1276.c: 229: opMode |= newMode;
 36938  006472  516A               	movf	RADIO_WriteMode@newMode& (0+255),w,b
 36939  006474  136B               	iorwf	RADIO_WriteMode@opMode& (0+255),f,b
 36940                           
 36941                           ; BSR set to: 0
 36942                           ;radio_driver_SX1276.c: 230: RADIO_RegisterWrite(0x01, opMode);
 36943  006476  C06B  F062         	movff	RADIO_WriteMode@opMode,RADIO_RegisterWrite@value
 36944  00647A  0E01               	movlw	1
 36945  00647C  ECBE  F048         	call	_RADIO_RegisterWrite
 36946                           
 36947                           ;radio_driver_SX1276.c: 233: if (1 == blocking)
 36948  006480  0100               	movlb	0	; () banked
 36949  006482  0566               	decf	RADIO_WriteMode@blocking& (0+255),w,b
 36950  006484  A4D8               	btfss	status,2,c
 36951  006486  0012               	return	
 36952                           
 36953                           ; BSR set to: 0
 36954                           ;radio_driver_SX1276.c: 234: {
 36955                           ;radio_driver_SX1276.c: 235: if (MODE_SLEEP != newMode)
 36956  006488  516A               	movf	RADIO_WriteMode@newMode& (0+255),w,b
 36957  00648A  B4D8               	btfsc	status,2,c
 36958  00648C  D006               	goto	l175
 36959  00648E                     u8100:
 36960                           
 36961                           ; BSR set to: 0
 36962                           
 36963                           ;radio_driver_SX1276.c: 238: ;
 36964                           
 36965                           ; BSR set to: 0
 36966                           
 36967                           ; BSR set to: 0
 36968                           ;radio_driver_SX1276.c: 236: {
 36969                           ;radio_driver_SX1276.c: 237: while (HALDIO5PinValue() == 0)
 36970  00648E  EC2C  F04A         	call	_HALDIO5PinValue	;wreg free
 36971  006492  0900               	iorlw	0
 36972  006494  A4D8               	btfss	status,2,c
 36973  006496  0012               	return	
 36974  006498  D7FA               	goto	u8100
 36975  00649A                     l175:
 36976                           
 36977                           ;radio_driver_SX1276.c: 240: else
 36978                           ;radio_driver_SX1276.c: 241: {
 36979                           ;radio_driver_SX1276.c: 242: SystemBlockingWaitMs(1);
 36980  00649A  0E01               	movlw	1
 36981  00649C  0100               	movlb	0	; () banked
 36982  00649E  6F60               	movwf	SystemBlockingWaitMs@ms& (0+255),b
 36983  0064A0  0E00               	movlw	0
 36984  0064A2  6F61               	movwf	(SystemBlockingWaitMs@ms+1)& (0+255),b
 36985  0064A4  0E00               	movlw	0
 36986  0064A6  6F62               	movwf	(SystemBlockingWaitMs@ms+2)& (0+255),b
 36987  0064A8  0E00               	movlw	0
 36988  0064AA  6F63               	movwf	(SystemBlockingWaitMs@ms+3)& (0+255),b
 36989  0064AC  ECB4  F046         	call	_SystemBlockingWaitMs	;wreg free
 36990  0064B0  0012               	return	
 36991  0064B2                     __end_of_RADIO_WriteMode:
 36992                           	opt stack 0
 36993                           tosu	equ	0xFFF
 36994                           tosh	equ	0xFFE
 36995                           tosl	equ	0xFFD
 36996                           pclath	equ	0xFFA
 36997                           tblptru	equ	0xFF8
 36998                           tblptrh	equ	0xFF7
 36999                           tblptrl	equ	0xFF6
 37000                           tablat	equ	0xFF5
 37001                           prodh	equ	0xFF4
 37002                           prodl	equ	0xFF3
 37003                           intcon	equ	0xFF2
 37004                           intcon2	equ	0xFF1
 37005                           intcon3	equ	0xFF0
 37006                           indf0	equ	0xFEF
 37007                           postinc0	equ	0xFEE
 37008                           plusw0	equ	0xFEB
 37009                           fsr0h	equ	0xFEA
 37010                           fsr0l	equ	0xFE9
 37011                           wreg	equ	0xFE8
 37012                           postinc1	equ	0xFE6
 37013                           postdec1	equ	0xFE5
 37014                           plusw1	equ	0xFE3
 37015                           fsr1h	equ	0xFE2
 37016                           fsr1l	equ	0xFE1
 37017                           indf2	equ	0xFDF
 37018                           postinc2	equ	0xFDE
 37019                           postdec2	equ	0xFDD
 37020                           plusw2	equ	0xFDB
 37021                           fsr2h	equ	0xFDA
 37022                           fsr2l	equ	0xFD9
 37023                           status	equ	0xFD8
 37024                           
 37025 ;; *************** function _RADIO_RegisterRead *****************
 37026 ;; Defined at:
 37027 ;;		line 134 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 37028 ;; Parameters:    Size  Location     Type
 37029 ;;  reg             1    wreg     unsigned char 
 37030 ;; Auto vars:     Size  Location     Type
 37031 ;;  reg             1    2[BANK0 ] unsigned char 
 37032 ;;  readValue       1    3[BANK0 ] unsigned char 
 37033 ;; Return value:  Size  Location     Type
 37034 ;;                  1    wreg      unsigned char 
 37035 ;; Registers used:
 37036 ;;		wreg, status,2, status,0, cstack
 37037 ;; Tracked objects:
 37038 ;;		On entry : 0/0
 37039 ;;		On exit  : 0/0
 37040 ;;		Unchanged: 0/0
 37041 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 37042 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 37043 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 37044 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 37045 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 37046 ;;Total ram usage:        2 bytes
 37047 ;; Hardware stack levels used:    1
 37048 ;; Hardware stack levels required when called:    9
 37049 ;; This function calls:
 37050 ;;		_HALSPICSAssert
 37051 ;;		_HALSPICSDeassert
 37052 ;;		_HALSPISend
 37053 ;; This function is called by:
 37054 ;;		_RADIO_WriteMode
 37055 ;;		_RADIO_WritePower
 37056 ;;		_RADIO_Init
 37057 ;;		_RADIO_WriteConfiguration
 37058 ;;		_RADIO_Transmit
 37059 ;;		_RADIO_RxDone
 37060 ;;		_RADIO_FSKPayloadReady
 37061 ;;		_RADIO_FSKPacketSent
 37062 ;;		_RADIO_FHSSChangeChannel
 37063 ;;		_RADIO_DIO0
 37064 ;;		_RADIO_DIO1
 37065 ;;		_RADIO_DIO2
 37066 ;;		_RADIO_DIO3
 37067 ;;		_RADIO_DIO4
 37068 ;;		_RADIO_DIO5
 37069 ;;		_RADIO_ReadRandom
 37070 ;;		_RADIO_RxFSKTimeout
 37071 ;; This function uses a non-reentrant model
 37072 ;;
 37073                           
 37074                           	psect	text170
 37075  008FCE                     __ptext170:
 37076                           	opt stack 0
 37077  008FCE                     _RADIO_RegisterRead:
 37078                           	opt stack 18
 37079                           
 37080                           ;incstack = 0
 37081                           ;RADIO_RegisterRead@reg stored from wreg
 37082  008FCE  0100               	movlb	0	; () banked
 37083  008FD0  6F62               	movwf	RADIO_RegisterRead@reg& (0+255),b
 37084                           
 37085                           ;radio_driver_SX1276.c: 136: uint8_t readValue;
 37086                           ;radio_driver_SX1276.c: 137: reg &= 0x7F;
 37087  008FD2  0100               	movlb	0	; () banked
 37088  008FD4  9F62               	bcf	RADIO_RegisterRead@reg& (0+255),7,b
 37089                           
 37090                           ; BSR set to: 0
 37091                           ;radio_driver_SX1276.c: 138: HALSPICSAssert();
 37092  008FD6  ECC8  F04A         	call	_HALSPICSAssert	;wreg free
 37093                           
 37094                           ;radio_driver_SX1276.c: 139: HALSPISend(reg);
 37095  008FDA  0100               	movlb	0	; () banked
 37096  008FDC  5162               	movf	RADIO_RegisterRead@reg& (0+255),w,b
 37097  008FDE  EC1F  F04A         	call	_HALSPISend
 37098                           
 37099                           ;radio_driver_SX1276.c: 140: readValue = HALSPISend(0xFF);
 37100  008FE2  0EFF               	movlw	255
 37101  008FE4  EC1F  F04A         	call	_HALSPISend
 37102  008FE8  0100               	movlb	0	; () banked
 37103  008FEA  6F63               	movwf	RADIO_RegisterRead@readValue& (0+255),b
 37104                           
 37105                           ; BSR set to: 0
 37106                           ;radio_driver_SX1276.c: 141: HALSPICSDeassert();
 37107  008FEC  ECC6  F04A         	call	_HALSPICSDeassert	;wreg free
 37108                           
 37109                           ;radio_driver_SX1276.c: 142: return readValue;
 37110  008FF0  0100               	movlb	0	; () banked
 37111  008FF2  5163               	movf	RADIO_RegisterRead@readValue& (0+255),w,b
 37112  008FF4  0012               	return	
 37113  008FF6                     __end_of_RADIO_RegisterRead:
 37114                           	opt stack 0
 37115                           tosu	equ	0xFFF
 37116                           tosh	equ	0xFFE
 37117                           tosl	equ	0xFFD
 37118                           pclath	equ	0xFFA
 37119                           tblptru	equ	0xFF8
 37120                           tblptrh	equ	0xFF7
 37121                           tblptrl	equ	0xFF6
 37122                           tablat	equ	0xFF5
 37123                           prodh	equ	0xFF4
 37124                           prodl	equ	0xFF3
 37125                           intcon	equ	0xFF2
 37126                           intcon2	equ	0xFF1
 37127                           intcon3	equ	0xFF0
 37128                           indf0	equ	0xFEF
 37129                           postinc0	equ	0xFEE
 37130                           plusw0	equ	0xFEB
 37131                           fsr0h	equ	0xFEA
 37132                           fsr0l	equ	0xFE9
 37133                           wreg	equ	0xFE8
 37134                           postinc1	equ	0xFE6
 37135                           postdec1	equ	0xFE5
 37136                           plusw1	equ	0xFE3
 37137                           fsr1h	equ	0xFE2
 37138                           fsr1l	equ	0xFE1
 37139                           indf2	equ	0xFDF
 37140                           postinc2	equ	0xFDE
 37141                           postdec2	equ	0xFDD
 37142                           plusw2	equ	0xFDB
 37143                           fsr2h	equ	0xFDA
 37144                           fsr2l	equ	0xFD9
 37145                           status	equ	0xFD8
 37146                           
 37147 ;; *************** function _HALDIO5PinValue *****************
 37148 ;; Defined at:
 37149 ;;		line 95 in file "mcc_generated_files/LoRaWAN/radio_driver_hal.c"
 37150 ;; Parameters:    Size  Location     Type
 37151 ;;		None
 37152 ;; Auto vars:     Size  Location     Type
 37153 ;;		None
 37154 ;; Return value:  Size  Location     Type
 37155 ;;                  1    wreg      unsigned char 
 37156 ;; Registers used:
 37157 ;;		wreg
 37158 ;; Tracked objects:
 37159 ;;		On entry : 0/0
 37160 ;;		On exit  : 0/0
 37161 ;;		Unchanged: 0/0
 37162 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 37163 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 37164 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 37165 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 37166 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 37167 ;;Total ram usage:        0 bytes
 37168 ;; Hardware stack levels used:    1
 37169 ;; Hardware stack levels required when called:    7
 37170 ;; This function calls:
 37171 ;;		Nothing
 37172 ;; This function is called by:
 37173 ;;		_RADIO_WriteMode
 37174 ;; This function uses a non-reentrant model
 37175 ;;
 37176                           
 37177                           	psect	text171
 37178  009458                     __ptext171:
 37179                           	opt stack 0
 37180  009458                     _HALDIO5PinValue:
 37181                           	opt stack 20
 37182                           
 37183                           ;radio_driver_hal.c: 97: return PORTBbits.RB0;
 37184                           
 37185                           ; BSR set to: 0
 37186                           ;incstack = 0
 37187  009458  A081               	btfss	3969,0,c	;volatile
 37188  00945A  D002               	goto	u7690
 37189  00945C  0E01               	movlw	1
 37190  00945E  0012               	return	
 37191  009460                     u7690:
 37192  009460  0E00               	movlw	0
 37193  009462  0012               	return	
 37194  009464                     __end_of_HALDIO5PinValue:
 37195                           	opt stack 0
 37196                           tosu	equ	0xFFF
 37197                           tosh	equ	0xFFE
 37198                           tosl	equ	0xFFD
 37199                           pclath	equ	0xFFA
 37200                           tblptru	equ	0xFF8
 37201                           tblptrh	equ	0xFF7
 37202                           tblptrl	equ	0xFF6
 37203                           tablat	equ	0xFF5
 37204                           prodh	equ	0xFF4
 37205                           prodl	equ	0xFF3
 37206                           intcon	equ	0xFF2
 37207                           intcon2	equ	0xFF1
 37208                           intcon3	equ	0xFF0
 37209                           indf0	equ	0xFEF
 37210                           postinc0	equ	0xFEE
 37211                           plusw0	equ	0xFEB
 37212                           fsr0h	equ	0xFEA
 37213                           fsr0l	equ	0xFE9
 37214                           wreg	equ	0xFE8
 37215                           postinc1	equ	0xFE6
 37216                           postdec1	equ	0xFE5
 37217                           plusw1	equ	0xFE3
 37218                           fsr1h	equ	0xFE2
 37219                           fsr1l	equ	0xFE1
 37220                           indf2	equ	0xFDF
 37221                           postinc2	equ	0xFDE
 37222                           postdec2	equ	0xFDD
 37223                           plusw2	equ	0xFDB
 37224                           fsr2h	equ	0xFDA
 37225                           fsr2l	equ	0xFD9
 37226                           status	equ	0xFD8
 37227                           
 37228 ;; *************** function _RADIO_WriteFrequency *****************
 37229 ;; Defined at:
 37230 ;;		line 262 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 37231 ;; Parameters:    Size  Location     Type
 37232 ;;  frequency       4   13[BANK0 ] unsigned long 
 37233 ;; Auto vars:     Size  Location     Type
 37234 ;;  num             4   21[BANK0 ] unsigned long 
 37235 ;;  num_mod         4   17[BANK0 ] unsigned long 
 37236 ;; Return value:  Size  Location     Type
 37237 ;;                  1    wreg      void 
 37238 ;; Registers used:
 37239 ;;		wreg, status,2, status,0, cstack
 37240 ;; Tracked objects:
 37241 ;;		On entry : 0/0
 37242 ;;		On exit  : 0/0
 37243 ;;		Unchanged: 0/0
 37244 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 37245 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 37246 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 37247 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 37248 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 37249 ;;Total ram usage:       12 bytes
 37250 ;; Hardware stack levels used:    1
 37251 ;; Hardware stack levels required when called:   10
 37252 ;; This function calls:
 37253 ;;		_RADIO_RegisterWrite
 37254 ;;		___lldiv
 37255 ;;		___llmod
 37256 ;; This function is called by:
 37257 ;;		_RADIO_Init
 37258 ;;		_RADIO_WriteConfiguration
 37259 ;;		_RADIO_FHSSChangeChannel
 37260 ;; This function uses a non-reentrant model
 37261 ;;
 37262                           
 37263                           	psect	text172
 37264  006790                     __ptext172:
 37265                           	opt stack 0
 37266  006790                     _RADIO_WriteFrequency:
 37267                           	opt stack 17
 37268                           
 37269                           ;radio_driver_SX1276.c: 264: uint32_t num, num_mod;
 37270                           ;radio_driver_SX1276.c: 272: num = frequency / 15625;
 37271                           
 37272                           ;incstack = 0
 37273  006790  C06D  F060         	movff	RADIO_WriteFrequency@frequency,___lldiv@dividend
 37274  006794  C06E  F061         	movff	RADIO_WriteFrequency@frequency+1,___lldiv@dividend+1
 37275  006798  C06F  F062         	movff	RADIO_WriteFrequency@frequency+2,___lldiv@dividend+2
 37276  00679C  C070  F063         	movff	RADIO_WriteFrequency@frequency+3,___lldiv@dividend+3
 37277  0067A0  0E09               	movlw	9
 37278  0067A2  0100               	movlb	0	; () banked
 37279  0067A4  6F64               	movwf	___lldiv@divisor& (0+255),b
 37280  0067A6  0E3D               	movlw	61
 37281  0067A8  6F65               	movwf	(___lldiv@divisor+1)& (0+255),b
 37282  0067AA  0E00               	movlw	0
 37283  0067AC  6F66               	movwf	(___lldiv@divisor+2)& (0+255),b
 37284  0067AE  0E00               	movlw	0
 37285  0067B0  6F67               	movwf	(___lldiv@divisor+3)& (0+255),b
 37286  0067B2  ECE4  F03C         	call	___lldiv	;wreg free
 37287  0067B6  C060  F075         	movff	?___lldiv,RADIO_WriteFrequency@num
 37288  0067BA  C061  F076         	movff	?___lldiv+1,RADIO_WriteFrequency@num+1
 37289  0067BE  C062  F077         	movff	?___lldiv+2,RADIO_WriteFrequency@num+2
 37290  0067C2  C063  F078         	movff	?___lldiv+3,RADIO_WriteFrequency@num+3
 37291                           
 37292                           ;radio_driver_SX1276.c: 273: num_mod = frequency % 15625;
 37293  0067C6  C06D  F060         	movff	RADIO_WriteFrequency@frequency,___llmod@dividend
 37294  0067CA  C06E  F061         	movff	RADIO_WriteFrequency@frequency+1,___llmod@dividend+1
 37295  0067CE  C06F  F062         	movff	RADIO_WriteFrequency@frequency+2,___llmod@dividend+2
 37296  0067D2  C070  F063         	movff	RADIO_WriteFrequency@frequency+3,___llmod@dividend+3
 37297  0067D6  0E09               	movlw	9
 37298  0067D8  0100               	movlb	0	; () banked
 37299  0067DA  6F64               	movwf	___llmod@divisor& (0+255),b
 37300  0067DC  0E3D               	movlw	61
 37301  0067DE  6F65               	movwf	(___llmod@divisor+1)& (0+255),b
 37302  0067E0  0E00               	movlw	0
 37303  0067E2  6F66               	movwf	(___llmod@divisor+2)& (0+255),b
 37304  0067E4  0E00               	movlw	0
 37305  0067E6  6F67               	movwf	(___llmod@divisor+3)& (0+255),b
 37306  0067E8  ECA8  F03F         	call	___llmod	;wreg free
 37307  0067EC  C060  F071         	movff	?___llmod,RADIO_WriteFrequency@num_mod
 37308  0067F0  C061  F072         	movff	?___llmod+1,RADIO_WriteFrequency@num_mod+1
 37309  0067F4  C062  F073         	movff	?___llmod+2,RADIO_WriteFrequency@num_mod+2
 37310  0067F8  C063  F074         	movff	?___llmod+3,RADIO_WriteFrequency@num_mod+3
 37311                           
 37312                           ;radio_driver_SX1276.c: 277: num <<= (8);
 37313  0067FC  C077  F078         	movff	RADIO_WriteFrequency@num+2,RADIO_WriteFrequency@num+3
 37314  006800  C076  F077         	movff	RADIO_WriteFrequency@num+1,RADIO_WriteFrequency@num+2
 37315  006804  C075  F076         	movff	RADIO_WriteFrequency@num,RADIO_WriteFrequency@num+1
 37316  006808  0100               	movlb	0	; () banked
 37317  00680A  6B75               	clrf	RADIO_WriteFrequency@num& (0+255),b
 37318                           
 37319                           ; BSR set to: 0
 37320                           ;radio_driver_SX1276.c: 278: num_mod <<= (8);
 37321  00680C  C073  F074         	movff	RADIO_WriteFrequency@num_mod+2,RADIO_WriteFrequency@num_mod+3
 37322  006810  C072  F073         	movff	RADIO_WriteFrequency@num_mod+1,RADIO_WriteFrequency@num_mod+2
 37323  006814  C071  F072         	movff	RADIO_WriteFrequency@num_mod,RADIO_WriteFrequency@num_mod+1
 37324  006818  6B71               	clrf	RADIO_WriteFrequency@num_mod& (0+255),b
 37325                           
 37326                           ;radio_driver_SX1276.c: 282: num_mod = num_mod / 15625;
 37327  00681A  C071  F060         	movff	RADIO_WriteFrequency@num_mod,___lldiv@dividend
 37328  00681E  C072  F061         	movff	RADIO_WriteFrequency@num_mod+1,___lldiv@dividend+1
 37329  006822  C073  F062         	movff	RADIO_WriteFrequency@num_mod+2,___lldiv@dividend+2
 37330  006826  C074  F063         	movff	RADIO_WriteFrequency@num_mod+3,___lldiv@dividend+3
 37331  00682A  0E09               	movlw	9
 37332  00682C  6F64               	movwf	___lldiv@divisor& (0+255),b
 37333  00682E  0E3D               	movlw	61
 37334  006830  6F65               	movwf	(___lldiv@divisor+1)& (0+255),b
 37335  006832  0E00               	movlw	0
 37336  006834  6F66               	movwf	(___lldiv@divisor+2)& (0+255),b
 37337  006836  0E00               	movlw	0
 37338  006838  6F67               	movwf	(___lldiv@divisor+3)& (0+255),b
 37339  00683A  ECE4  F03C         	call	___lldiv	;wreg free
 37340  00683E  C060  F071         	movff	?___lldiv,RADIO_WriteFrequency@num_mod
 37341  006842  C061  F072         	movff	?___lldiv+1,RADIO_WriteFrequency@num_mod+1
 37342  006846  C062  F073         	movff	?___lldiv+2,RADIO_WriteFrequency@num_mod+2
 37343  00684A  C063  F074         	movff	?___lldiv+3,RADIO_WriteFrequency@num_mod+3
 37344                           
 37345                           ;radio_driver_SX1276.c: 283: num += num_mod;
 37346  00684E  0100               	movlb	0	; () banked
 37347  006850  5171               	movf	RADIO_WriteFrequency@num_mod& (0+255),w,b
 37348  006852  2775               	addwf	RADIO_WriteFrequency@num& (0+255),f,b
 37349  006854  5172               	movf	(RADIO_WriteFrequency@num_mod+1)& (0+255),w,b
 37350  006856  2376               	addwfc	(RADIO_WriteFrequency@num+1)& (0+255),f,b
 37351  006858  5173               	movf	(RADIO_WriteFrequency@num_mod+2)& (0+255),w,b
 37352  00685A  2377               	addwfc	(RADIO_WriteFrequency@num+2)& (0+255),f,b
 37353  00685C  5174               	movf	(RADIO_WriteFrequency@num_mod+3)& (0+255),w,b
 37354  00685E  2378               	addwfc	(RADIO_WriteFrequency@num+3)& (0+255),f,b
 37355                           
 37356                           ; BSR set to: 0
 37357                           ;radio_driver_SX1276.c: 287: RADIO_RegisterWrite(0x06, (num >> (16)) & 0xFF);
 37358  006860  C077  F062         	movff	RADIO_WriteFrequency@num+2,RADIO_RegisterWrite@value
 37359  006864  0E06               	movlw	6
 37360  006866  ECBE  F048         	call	_RADIO_RegisterWrite
 37361                           
 37362                           ;radio_driver_SX1276.c: 288: RADIO_RegisterWrite(0x07, (num >> (8)) & 0xFF);
 37363  00686A  C076  F062         	movff	RADIO_WriteFrequency@num+1,RADIO_RegisterWrite@value
 37364  00686E  0E07               	movlw	7
 37365  006870  ECBE  F048         	call	_RADIO_RegisterWrite
 37366                           
 37367                           ;radio_driver_SX1276.c: 289: RADIO_RegisterWrite(0x08, num & 0xFF);
 37368  006874  C075  F062         	movff	RADIO_WriteFrequency@num,RADIO_RegisterWrite@value
 37369  006878  0E08               	movlw	8
 37370  00687A  ECBE  F048         	call	_RADIO_RegisterWrite
 37371  00687E  0012               	return		;funcret
 37372  006880                     __end_of_RADIO_WriteFrequency:
 37373                           	opt stack 0
 37374                           tosu	equ	0xFFF
 37375                           tosh	equ	0xFFE
 37376                           tosl	equ	0xFFD
 37377                           pclath	equ	0xFFA
 37378                           tblptru	equ	0xFF8
 37379                           tblptrh	equ	0xFF7
 37380                           tblptrl	equ	0xFF6
 37381                           tablat	equ	0xFF5
 37382                           prodh	equ	0xFF4
 37383                           prodl	equ	0xFF3
 37384                           intcon	equ	0xFF2
 37385                           intcon2	equ	0xFF1
 37386                           intcon3	equ	0xFF0
 37387                           indf0	equ	0xFEF
 37388                           postinc0	equ	0xFEE
 37389                           plusw0	equ	0xFEB
 37390                           fsr0h	equ	0xFEA
 37391                           fsr0l	equ	0xFE9
 37392                           wreg	equ	0xFE8
 37393                           postinc1	equ	0xFE6
 37394                           postdec1	equ	0xFE5
 37395                           plusw1	equ	0xFE3
 37396                           fsr1h	equ	0xFE2
 37397                           fsr1l	equ	0xFE1
 37398                           indf2	equ	0xFDF
 37399                           postinc2	equ	0xFDE
 37400                           postdec2	equ	0xFDD
 37401                           plusw2	equ	0xFDB
 37402                           fsr2h	equ	0xFDA
 37403                           fsr2l	equ	0xFD9
 37404                           status	equ	0xFD8
 37405                           
 37406 ;; *************** function ___llmod *****************
 37407 ;; Defined at:
 37408 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\llmod.c"
 37409 ;; Parameters:    Size  Location     Type
 37410 ;;  dividend        4    0[BANK0 ] unsigned long 
 37411 ;;  divisor         4    4[BANK0 ] unsigned long 
 37412 ;; Auto vars:     Size  Location     Type
 37413 ;;  counter         1    8[BANK0 ] unsigned char 
 37414 ;; Return value:  Size  Location     Type
 37415 ;;                  4    0[BANK0 ] unsigned long 
 37416 ;; Registers used:
 37417 ;;		wreg, status,2, status,0
 37418 ;; Tracked objects:
 37419 ;;		On entry : 0/0
 37420 ;;		On exit  : 0/0
 37421 ;;		Unchanged: 0/0
 37422 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 37423 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 37424 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 37425 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 37426 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 37427 ;;Total ram usage:        9 bytes
 37428 ;; Hardware stack levels used:    1
 37429 ;; Hardware stack levels required when called:    7
 37430 ;; This function calls:
 37431 ;;		Nothing
 37432 ;; This function is called by:
 37433 ;;		_RADIO_WriteFrequency
 37434 ;; This function uses a non-reentrant model
 37435 ;;
 37436                           
 37437                           	psect	text173
 37438  007F50                     __ptext173:
 37439                           	opt stack 0
 37440  007F50                     ___llmod:
 37441                           	opt stack 19
 37442                           
 37443                           ;incstack = 0
 37444  007F50  0100               	movlb	0	; () banked
 37445  007F52  5164               	movf	___llmod@divisor& (0+255),w,b
 37446  007F54  1165               	iorwf	(___llmod@divisor+1)& (0+255),w,b
 37447  007F56  1166               	iorwf	(___llmod@divisor+2)& (0+255),w,b
 37448  007F58  1167               	iorwf	(___llmod@divisor+3)& (0+255),w,b
 37449  007F5A  B4D8               	btfsc	status,2,c
 37450  007F5C  D024               	goto	l3195
 37451                           
 37452                           ; BSR set to: 0
 37453  007F5E  0E01               	movlw	1
 37454  007F60  6F68               	movwf	___llmod@counter& (0+255),b
 37455  007F62  D006               	goto	l3190
 37456  007F64                     
 37457                           ; BSR set to: 0
 37458                           
 37459                           ; BSR set to: 0
 37460  007F64  90D8               	bcf	status,0,c
 37461  007F66  3764               	rlcf	___llmod@divisor& (0+255),f,b
 37462  007F68  3765               	rlcf	(___llmod@divisor+1)& (0+255),f,b
 37463  007F6A  3766               	rlcf	(___llmod@divisor+2)& (0+255),f,b
 37464  007F6C  3767               	rlcf	(___llmod@divisor+3)& (0+255),f,b
 37465  007F6E  2B68               	incf	___llmod@counter& (0+255),f,b
 37466  007F70                     l3190:
 37467                           
 37468                           ; BSR set to: 0
 37469                           
 37470                           ; BSR set to: 0
 37471  007F70  AF67               	btfss	(___llmod@divisor+3)& (0+255),7,b
 37472  007F72  D7F8               	goto	l3191
 37473  007F74                     u7920:
 37474                           
 37475                           ; BSR set to: 0
 37476                           
 37477                           ; BSR set to: 0
 37478                           
 37479                           ; BSR set to: 0
 37480  007F74  5164               	movf	___llmod@divisor& (0+255),w,b
 37481  007F76  5D60               	subwf	___llmod@dividend& (0+255),w,b
 37482  007F78  5165               	movf	(___llmod@divisor+1)& (0+255),w,b
 37483  007F7A  5961               	subwfb	(___llmod@dividend+1)& (0+255),w,b
 37484  007F7C  5166               	movf	(___llmod@divisor+2)& (0+255),w,b
 37485  007F7E  5962               	subwfb	(___llmod@dividend+2)& (0+255),w,b
 37486  007F80  5167               	movf	(___llmod@divisor+3)& (0+255),w,b
 37487  007F82  5963               	subwfb	(___llmod@dividend+3)& (0+255),w,b
 37488  007F84  A0D8               	btfss	status,0,c
 37489  007F86  D008               	goto	l3194
 37490                           
 37491                           ; BSR set to: 0
 37492  007F88  5164               	movf	___llmod@divisor& (0+255),w,b
 37493  007F8A  5F60               	subwf	___llmod@dividend& (0+255),f,b
 37494  007F8C  5165               	movf	(___llmod@divisor+1)& (0+255),w,b
 37495  007F8E  5B61               	subwfb	(___llmod@dividend+1)& (0+255),f,b
 37496  007F90  5166               	movf	(___llmod@divisor+2)& (0+255),w,b
 37497  007F92  5B62               	subwfb	(___llmod@dividend+2)& (0+255),f,b
 37498  007F94  5167               	movf	(___llmod@divisor+3)& (0+255),w,b
 37499  007F96  5B63               	subwfb	(___llmod@dividend+3)& (0+255),f,b
 37500  007F98                     l3194:
 37501                           
 37502                           ; BSR set to: 0
 37503                           
 37504                           ; BSR set to: 0
 37505  007F98  90D8               	bcf	status,0,c
 37506  007F9A  3367               	rrcf	(___llmod@divisor+3)& (0+255),f,b
 37507  007F9C  3366               	rrcf	(___llmod@divisor+2)& (0+255),f,b
 37508  007F9E  3365               	rrcf	(___llmod@divisor+1)& (0+255),f,b
 37509  007FA0  3364               	rrcf	___llmod@divisor& (0+255),f,b
 37510                           
 37511                           ; BSR set to: 0
 37512  007FA2  2F68               	decfsz	___llmod@counter& (0+255),f,b
 37513  007FA4  D7E7               	goto	u7920
 37514  007FA6                     l3195:
 37515                           
 37516                           ; BSR set to: 0
 37517                           
 37518                           ; BSR set to: 0
 37519  007FA6  C060  F060         	movff	___llmod@dividend,?___llmod
 37520  007FAA  C061  F061         	movff	___llmod@dividend+1,?___llmod+1
 37521  007FAE  C062  F062         	movff	___llmod@dividend+2,?___llmod+2
 37522  007FB2  C063  F063         	movff	___llmod@dividend+3,?___llmod+3
 37523                           
 37524                           ; BSR set to: 0
 37525  007FB6  0012               	return		;funcret
 37526  007FB8                     __end_of___llmod:
 37527                           	opt stack 0
 37528                           tosu	equ	0xFFF
 37529                           tosh	equ	0xFFE
 37530                           tosl	equ	0xFFD
 37531                           pclath	equ	0xFFA
 37532                           tblptru	equ	0xFF8
 37533                           tblptrh	equ	0xFF7
 37534                           tblptrl	equ	0xFF6
 37535                           tablat	equ	0xFF5
 37536                           prodh	equ	0xFF4
 37537                           prodl	equ	0xFF3
 37538                           intcon	equ	0xFF2
 37539                           intcon2	equ	0xFF1
 37540                           intcon3	equ	0xFF0
 37541                           indf0	equ	0xFEF
 37542                           postinc0	equ	0xFEE
 37543                           plusw0	equ	0xFEB
 37544                           fsr0h	equ	0xFEA
 37545                           fsr0l	equ	0xFE9
 37546                           wreg	equ	0xFE8
 37547                           postinc1	equ	0xFE6
 37548                           postdec1	equ	0xFE5
 37549                           plusw1	equ	0xFE3
 37550                           fsr1h	equ	0xFE2
 37551                           fsr1l	equ	0xFE1
 37552                           indf2	equ	0xFDF
 37553                           postinc2	equ	0xFDE
 37554                           postdec2	equ	0xFDD
 37555                           plusw2	equ	0xFDB
 37556                           fsr2h	equ	0xFDA
 37557                           fsr2l	equ	0xFD9
 37558                           status	equ	0xFD8
 37559                           
 37560 ;; *************** function _RADIO_RegisterWrite *****************
 37561 ;; Defined at:
 37562 ;;		line 126 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 37563 ;; Parameters:    Size  Location     Type
 37564 ;;  reg             1    wreg     unsigned char 
 37565 ;;  value           1    2[BANK0 ] unsigned char 
 37566 ;; Auto vars:     Size  Location     Type
 37567 ;;  reg             1    3[BANK0 ] unsigned char 
 37568 ;; Return value:  Size  Location     Type
 37569 ;;                  1    wreg      void 
 37570 ;; Registers used:
 37571 ;;		wreg, status,2, status,0, cstack
 37572 ;; Tracked objects:
 37573 ;;		On entry : 0/0
 37574 ;;		On exit  : 0/0
 37575 ;;		Unchanged: 0/0
 37576 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 37577 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 37578 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 37579 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 37580 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 37581 ;;Total ram usage:        2 bytes
 37582 ;; Hardware stack levels used:    1
 37583 ;; Hardware stack levels required when called:    9
 37584 ;; This function calls:
 37585 ;;		_HALSPICSAssert
 37586 ;;		_HALSPICSDeassert
 37587 ;;		_HALSPISend
 37588 ;; This function is called by:
 37589 ;;		_RADIO_WriteMode
 37590 ;;		_RADIO_WriteFrequency
 37591 ;;		_RADIO_WriteFSKFrequencyDeviation
 37592 ;;		_RADIO_WriteFSKBitRate
 37593 ;;		_RADIO_WritePower
 37594 ;;		_RADIO_Init
 37595 ;;		_RADIO_WriteConfiguration
 37596 ;;		_RADIO_Transmit
 37597 ;;		_RADIO_ReceiveStart
 37598 ;;		_RADIO_RxDone
 37599 ;;		_RADIO_RxTimeout
 37600 ;;		_RADIO_TxDone
 37601 ;;		_RADIO_UnhandledInterrupt
 37602 ;;		_RADIO_FHSSChangeChannel
 37603 ;;		_RADIO_ReadRandom
 37604 ;;		_RADIO_TransmitCW
 37605 ;; This function uses a non-reentrant model
 37606 ;;
 37607                           
 37608                           	psect	text174
 37609  00917C                     __ptext174:
 37610                           	opt stack 0
 37611  00917C                     _RADIO_RegisterWrite:
 37612                           	opt stack 18
 37613                           
 37614                           ; BSR set to: 0
 37615                           ;incstack = 0
 37616                           ;RADIO_RegisterWrite@reg stored from wreg
 37617  00917C  0100               	movlb	0	; () banked
 37618  00917E  6F63               	movwf	RADIO_RegisterWrite@reg& (0+255),b
 37619                           
 37620                           ;radio_driver_SX1276.c: 128: HALSPICSAssert();
 37621  009180  ECC8  F04A         	call	_HALSPICSAssert	;wreg free
 37622                           
 37623                           ;radio_driver_SX1276.c: 129: HALSPISend(0x80 | reg);
 37624  009184  0100               	movlb	0	; () banked
 37625  009186  5163               	movf	RADIO_RegisterWrite@reg& (0+255),w,b
 37626  009188  0980               	iorlw	128
 37627  00918A  EC1F  F04A         	call	_HALSPISend
 37628                           
 37629                           ;radio_driver_SX1276.c: 130: HALSPISend(value);
 37630  00918E  0100               	movlb	0	; () banked
 37631  009190  5162               	movf	RADIO_RegisterWrite@value& (0+255),w,b
 37632  009192  EC1F  F04A         	call	_HALSPISend
 37633                           
 37634                           ;radio_driver_SX1276.c: 131: HALSPICSDeassert();
 37635  009196  ECC6  F04A         	call	_HALSPICSDeassert	;wreg free
 37636  00919A  0012               	return		;funcret
 37637  00919C                     __end_of_RADIO_RegisterWrite:
 37638                           	opt stack 0
 37639                           tosu	equ	0xFFF
 37640                           tosh	equ	0xFFE
 37641                           tosl	equ	0xFFD
 37642                           pclath	equ	0xFFA
 37643                           tblptru	equ	0xFF8
 37644                           tblptrh	equ	0xFF7
 37645                           tblptrl	equ	0xFF6
 37646                           tablat	equ	0xFF5
 37647                           prodh	equ	0xFF4
 37648                           prodl	equ	0xFF3
 37649                           intcon	equ	0xFF2
 37650                           intcon2	equ	0xFF1
 37651                           intcon3	equ	0xFF0
 37652                           indf0	equ	0xFEF
 37653                           postinc0	equ	0xFEE
 37654                           plusw0	equ	0xFEB
 37655                           fsr0h	equ	0xFEA
 37656                           fsr0l	equ	0xFE9
 37657                           wreg	equ	0xFE8
 37658                           postinc1	equ	0xFE6
 37659                           postdec1	equ	0xFE5
 37660                           plusw1	equ	0xFE3
 37661                           fsr1h	equ	0xFE2
 37662                           fsr1l	equ	0xFE1
 37663                           indf2	equ	0xFDF
 37664                           postinc2	equ	0xFDE
 37665                           postdec2	equ	0xFDD
 37666                           plusw2	equ	0xFDB
 37667                           fsr2h	equ	0xFDA
 37668                           fsr2l	equ	0xFD9
 37669                           status	equ	0xFD8
 37670                           
 37671 ;; *************** function _HALSPISend *****************
 37672 ;; Defined at:
 37673 ;;		line 73 in file "mcc_generated_files/LoRaWAN/radio_driver_hal.c"
 37674 ;; Parameters:    Size  Location     Type
 37675 ;;  data            1    wreg     unsigned char 
 37676 ;; Auto vars:     Size  Location     Type
 37677 ;;  data            1    1[BANK0 ] unsigned char 
 37678 ;; Return value:  Size  Location     Type
 37679 ;;                  1    wreg      unsigned char 
 37680 ;; Registers used:
 37681 ;;		wreg, status,2, cstack
 37682 ;; Tracked objects:
 37683 ;;		On entry : 0/0
 37684 ;;		On exit  : 0/0
 37685 ;;		Unchanged: 0/0
 37686 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 37687 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 37688 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 37689 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 37690 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 37691 ;;Total ram usage:        1 bytes
 37692 ;; Hardware stack levels used:    1
 37693 ;; Hardware stack levels required when called:    8
 37694 ;; This function calls:
 37695 ;;		_SPI2_Exchange8bit
 37696 ;; This function is called by:
 37697 ;;		_RADIO_RegisterWrite
 37698 ;;		_RADIO_RegisterRead
 37699 ;;		_RADIO_Transmit
 37700 ;;		_RADIO_RxDone
 37701 ;;		_RADIO_FSKPayloadReady
 37702 ;; This function uses a non-reentrant model
 37703 ;;
 37704                           
 37705                           	psect	text175
 37706  00943E                     __ptext175:
 37707                           	opt stack 0
 37708  00943E                     _HALSPISend:
 37709                           	opt stack 18
 37710                           
 37711                           ;incstack = 0
 37712                           ;HALSPISend@data stored from wreg
 37713  00943E  0100               	movlb	0	; () banked
 37714  009440  6F61               	movwf	HALSPISend@data& (0+255),b
 37715                           
 37716                           ;radio_driver_hal.c: 75: return SPI2_Exchange8bit(data);
 37717  009442  0100               	movlb	0	; () banked
 37718  009444  5161               	movf	HALSPISend@data& (0+255),w,b
 37719  009446  ECE0  F049         	call	_SPI2_Exchange8bit
 37720  00944A  0012               	return	
 37721  00944C                     __end_of_HALSPISend:
 37722                           	opt stack 0
 37723                           tosu	equ	0xFFF
 37724                           tosh	equ	0xFFE
 37725                           tosl	equ	0xFFD
 37726                           pclath	equ	0xFFA
 37727                           tblptru	equ	0xFF8
 37728                           tblptrh	equ	0xFF7
 37729                           tblptrl	equ	0xFF6
 37730                           tablat	equ	0xFF5
 37731                           prodh	equ	0xFF4
 37732                           prodl	equ	0xFF3
 37733                           intcon	equ	0xFF2
 37734                           intcon2	equ	0xFF1
 37735                           intcon3	equ	0xFF0
 37736                           indf0	equ	0xFEF
 37737                           postinc0	equ	0xFEE
 37738                           plusw0	equ	0xFEB
 37739                           fsr0h	equ	0xFEA
 37740                           fsr0l	equ	0xFE9
 37741                           wreg	equ	0xFE8
 37742                           postinc1	equ	0xFE6
 37743                           postdec1	equ	0xFE5
 37744                           plusw1	equ	0xFE3
 37745                           fsr1h	equ	0xFE2
 37746                           fsr1l	equ	0xFE1
 37747                           indf2	equ	0xFDF
 37748                           postinc2	equ	0xFDE
 37749                           postdec2	equ	0xFDD
 37750                           plusw2	equ	0xFDB
 37751                           fsr2h	equ	0xFDA
 37752                           fsr2l	equ	0xFD9
 37753                           status	equ	0xFD8
 37754                           
 37755 ;; *************** function _SPI2_Exchange8bit *****************
 37756 ;; Defined at:
 37757 ;;		line 79 in file "mcc_generated_files/spi2.c"
 37758 ;; Parameters:    Size  Location     Type
 37759 ;;  data            1    wreg     unsigned char 
 37760 ;; Auto vars:     Size  Location     Type
 37761 ;;  data            1    0[BANK0 ] unsigned char 
 37762 ;; Return value:  Size  Location     Type
 37763 ;;                  1    wreg      unsigned char 
 37764 ;; Registers used:
 37765 ;;		wreg, status,2
 37766 ;; Tracked objects:
 37767 ;;		On entry : 0/0
 37768 ;;		On exit  : 0/0
 37769 ;;		Unchanged: 0/0
 37770 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 37771 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 37772 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 37773 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 37774 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 37775 ;;Total ram usage:        1 bytes
 37776 ;; Hardware stack levels used:    1
 37777 ;; Hardware stack levels required when called:    7
 37778 ;; This function calls:
 37779 ;;		Nothing
 37780 ;; This function is called by:
 37781 ;;		_HALSPISend
 37782 ;;		_SPI2_Exchange8bitBuffer
 37783 ;; This function uses a non-reentrant model
 37784 ;;
 37785                           
 37786                           	psect	text176
 37787  0093C0                     __ptext176:
 37788                           	opt stack 0
 37789  0093C0                     _SPI2_Exchange8bit:
 37790                           	opt stack 18
 37791                           
 37792                           ;incstack = 0
 37793                           ;SPI2_Exchange8bit@data stored from wreg
 37794  0093C0  0100               	movlb	0	; () banked
 37795  0093C2  6F60               	movwf	SPI2_Exchange8bit@data& (0+255),b
 37796                           
 37797                           ;spi2.c: 82: SSP2CON1bits.WCOL = 0;
 37798  0093C4  9E6C               	bcf	3948,7,c	;volatile
 37799                           
 37800                           ;spi2.c: 84: SSP2BUF = data;
 37801  0093C6  C060  FF6F         	movff	SPI2_Exchange8bit@data,3951	;volatile
 37802  0093CA                     
 37803                           ;spi2.c: 87: {
 37804  0093CA  A06D               	btfss	3949,0,c	;volatile
 37805  0093CC  D7FE               	goto	l2370
 37806                           
 37807                           ;spi2.c: 88: }
 37808                           ;spi2.c: 90: return (SSP2BUF);
 37809  0093CE  506F               	movf	3951,w,c	;volatile
 37810  0093D0  0012               	return		;funcret
 37811  0093D2                     __end_of_SPI2_Exchange8bit:
 37812                           	opt stack 0
 37813                           tosu	equ	0xFFF
 37814                           tosh	equ	0xFFE
 37815                           tosl	equ	0xFFD
 37816                           pclath	equ	0xFFA
 37817                           tblptru	equ	0xFF8
 37818                           tblptrh	equ	0xFF7
 37819                           tblptrl	equ	0xFF6
 37820                           tablat	equ	0xFF5
 37821                           prodh	equ	0xFF4
 37822                           prodl	equ	0xFF3
 37823                           intcon	equ	0xFF2
 37824                           intcon2	equ	0xFF1
 37825                           intcon3	equ	0xFF0
 37826                           indf0	equ	0xFEF
 37827                           postinc0	equ	0xFEE
 37828                           plusw0	equ	0xFEB
 37829                           fsr0h	equ	0xFEA
 37830                           fsr0l	equ	0xFE9
 37831                           wreg	equ	0xFE8
 37832                           postinc1	equ	0xFE6
 37833                           postdec1	equ	0xFE5
 37834                           plusw1	equ	0xFE3
 37835                           fsr1h	equ	0xFE2
 37836                           fsr1l	equ	0xFE1
 37837                           indf2	equ	0xFDF
 37838                           postinc2	equ	0xFDE
 37839                           postdec2	equ	0xFDD
 37840                           plusw2	equ	0xFDB
 37841                           fsr2h	equ	0xFDA
 37842                           fsr2l	equ	0xFD9
 37843                           status	equ	0xFD8
 37844                           
 37845 ;; *************** function _HALSPICSDeassert *****************
 37846 ;; Defined at:
 37847 ;;		line 68 in file "mcc_generated_files/LoRaWAN/radio_driver_hal.c"
 37848 ;; Parameters:    Size  Location     Type
 37849 ;;		None
 37850 ;; Auto vars:     Size  Location     Type
 37851 ;;		None
 37852 ;; Return value:  Size  Location     Type
 37853 ;;                  1    wreg      void 
 37854 ;; Registers used:
 37855 ;;		None
 37856 ;; Tracked objects:
 37857 ;;		On entry : 0/0
 37858 ;;		On exit  : 0/0
 37859 ;;		Unchanged: 0/0
 37860 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 37861 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 37862 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 37863 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 37864 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 37865 ;;Total ram usage:        0 bytes
 37866 ;; Hardware stack levels used:    1
 37867 ;; Hardware stack levels required when called:    7
 37868 ;; This function calls:
 37869 ;;		Nothing
 37870 ;; This function is called by:
 37871 ;;		_RADIO_RegisterWrite
 37872 ;;		_RADIO_RegisterRead
 37873 ;;		_RADIO_Transmit
 37874 ;;		_RADIO_RxDone
 37875 ;;		_RADIO_FSKPayloadReady
 37876 ;; This function uses a non-reentrant model
 37877 ;;
 37878                           
 37879                           	psect	text177
 37880  00958C                     __ptext177:
 37881                           	opt stack 0
 37882  00958C                     _HALSPICSDeassert:
 37883                           	opt stack 19
 37884                           
 37885                           ;incstack = 0
 37886                           ;radio_driver_hal.c: 70: do { LATD3 = 1; } while(0);
 37887  00958C  868C               	bsf	3980,3,c	;volatile
 37888  00958E  0012               	return	
 37889  009590                     __end_of_HALSPICSDeassert:
 37890                           	opt stack 0
 37891                           tosu	equ	0xFFF
 37892                           tosh	equ	0xFFE
 37893                           tosl	equ	0xFFD
 37894                           pclath	equ	0xFFA
 37895                           tblptru	equ	0xFF8
 37896                           tblptrh	equ	0xFF7
 37897                           tblptrl	equ	0xFF6
 37898                           tablat	equ	0xFF5
 37899                           prodh	equ	0xFF4
 37900                           prodl	equ	0xFF3
 37901                           intcon	equ	0xFF2
 37902                           intcon2	equ	0xFF1
 37903                           intcon3	equ	0xFF0
 37904                           indf0	equ	0xFEF
 37905                           postinc0	equ	0xFEE
 37906                           plusw0	equ	0xFEB
 37907                           fsr0h	equ	0xFEA
 37908                           fsr0l	equ	0xFE9
 37909                           wreg	equ	0xFE8
 37910                           postinc1	equ	0xFE6
 37911                           postdec1	equ	0xFE5
 37912                           plusw1	equ	0xFE3
 37913                           fsr1h	equ	0xFE2
 37914                           fsr1l	equ	0xFE1
 37915                           indf2	equ	0xFDF
 37916                           postinc2	equ	0xFDE
 37917                           postdec2	equ	0xFDD
 37918                           plusw2	equ	0xFDB
 37919                           fsr2h	equ	0xFDA
 37920                           fsr2l	equ	0xFD9
 37921                           status	equ	0xFD8
 37922                           
 37923 ;; *************** function _HALSPICSAssert *****************
 37924 ;; Defined at:
 37925 ;;		line 63 in file "mcc_generated_files/LoRaWAN/radio_driver_hal.c"
 37926 ;; Parameters:    Size  Location     Type
 37927 ;;		None
 37928 ;; Auto vars:     Size  Location     Type
 37929 ;;		None
 37930 ;; Return value:  Size  Location     Type
 37931 ;;                  1    wreg      void 
 37932 ;; Registers used:
 37933 ;;		None
 37934 ;; Tracked objects:
 37935 ;;		On entry : 0/0
 37936 ;;		On exit  : 0/0
 37937 ;;		Unchanged: 0/0
 37938 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 37939 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 37940 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 37941 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 37942 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 37943 ;;Total ram usage:        0 bytes
 37944 ;; Hardware stack levels used:    1
 37945 ;; Hardware stack levels required when called:    7
 37946 ;; This function calls:
 37947 ;;		Nothing
 37948 ;; This function is called by:
 37949 ;;		_RADIO_RegisterWrite
 37950 ;;		_RADIO_RegisterRead
 37951 ;;		_RADIO_Transmit
 37952 ;;		_RADIO_RxDone
 37953 ;;		_RADIO_FSKPayloadReady
 37954 ;; This function uses a non-reentrant model
 37955 ;;
 37956                           
 37957                           	psect	text178
 37958  009590                     __ptext178:
 37959                           	opt stack 0
 37960  009590                     _HALSPICSAssert:
 37961                           	opt stack 19
 37962                           
 37963                           ;incstack = 0
 37964                           ;radio_driver_hal.c: 65: do { LATD3 = 0; } while(0);
 37965  009590  968C               	bcf	3980,3,c	;volatile
 37966  009592  0012               	return	
 37967  009594                     __end_of_HALSPICSAssert:
 37968                           	opt stack 0
 37969                           tosu	equ	0xFFF
 37970                           tosh	equ	0xFFE
 37971                           tosl	equ	0xFFD
 37972                           pclath	equ	0xFFA
 37973                           tblptru	equ	0xFF8
 37974                           tblptrh	equ	0xFF7
 37975                           tblptrl	equ	0xFF6
 37976                           tablat	equ	0xFF5
 37977                           prodh	equ	0xFF4
 37978                           prodl	equ	0xFF3
 37979                           intcon	equ	0xFF2
 37980                           intcon2	equ	0xFF1
 37981                           intcon3	equ	0xFF0
 37982                           indf0	equ	0xFEF
 37983                           postinc0	equ	0xFEE
 37984                           plusw0	equ	0xFEB
 37985                           fsr0h	equ	0xFEA
 37986                           fsr0l	equ	0xFE9
 37987                           wreg	equ	0xFE8
 37988                           postinc1	equ	0xFE6
 37989                           postdec1	equ	0xFE5
 37990                           plusw1	equ	0xFE3
 37991                           fsr1h	equ	0xFE2
 37992                           fsr1l	equ	0xFE1
 37993                           indf2	equ	0xFDF
 37994                           postinc2	equ	0xFDE
 37995                           postdec2	equ	0xFDD
 37996                           plusw2	equ	0xFDB
 37997                           fsr2h	equ	0xFDA
 37998                           fsr2l	equ	0xFD9
 37999                           status	equ	0xFD8
 38000                           
 38001 ;; *************** function _RADIO_Reset *****************
 38002 ;; Defined at:
 38003 ;;		line 249 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 38004 ;; Parameters:    Size  Location     Type
 38005 ;;		None
 38006 ;; Auto vars:     Size  Location     Type
 38007 ;;		None
 38008 ;; Return value:  Size  Location     Type
 38009 ;;                  1    wreg      void 
 38010 ;; Registers used:
 38011 ;;		wreg, status,2, status,0, cstack
 38012 ;; Tracked objects:
 38013 ;;		On entry : 0/0
 38014 ;;		On exit  : 0/0
 38015 ;;		Unchanged: 0/0
 38016 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 38017 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 38018 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 38019 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 38020 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 38021 ;;Total ram usage:        0 bytes
 38022 ;; Hardware stack levels used:    1
 38023 ;; Hardware stack levels required when called:    8
 38024 ;; This function calls:
 38025 ;;		_HALResetPinMakeInput
 38026 ;;		_HALResetPinMakeOutput
 38027 ;;		_HALResetPinOutputValue
 38028 ;;		_SystemBlockingWaitMs
 38029 ;; This function is called by:
 38030 ;;		_RADIO_Init
 38031 ;; This function uses a non-reentrant model
 38032 ;;
 38033                           
 38034                           	psect	text179
 38035  0088AC                     __ptext179:
 38036                           	opt stack 0
 38037  0088AC                     _RADIO_Reset:
 38038                           	opt stack 20
 38039                           
 38040                           ;radio_driver_SX1276.c: 251: HALResetPinMakeOutput();
 38041                           
 38042                           ;incstack = 0
 38043  0088AC  ECCA  F04A         	call	_HALResetPinMakeOutput	;wreg free
 38044                           
 38045                           ;radio_driver_SX1276.c: 252: HALResetPinOutputValue(0);
 38046  0088B0  0E00               	movlw	0
 38047  0088B2  EC74  F049         	call	_HALResetPinOutputValue
 38048                           
 38049                           ;radio_driver_SX1276.c: 253: SystemBlockingWaitMs(1);
 38050  0088B6  0E01               	movlw	1
 38051  0088B8  0100               	movlb	0	; () banked
 38052  0088BA  6F60               	movwf	SystemBlockingWaitMs@ms& (0+255),b
 38053  0088BC  0E00               	movlw	0
 38054  0088BE  6F61               	movwf	(SystemBlockingWaitMs@ms+1)& (0+255),b
 38055  0088C0  0E00               	movlw	0
 38056  0088C2  6F62               	movwf	(SystemBlockingWaitMs@ms+2)& (0+255),b
 38057  0088C4  0E00               	movlw	0
 38058  0088C6  6F63               	movwf	(SystemBlockingWaitMs@ms+3)& (0+255),b
 38059  0088C8  ECB4  F046         	call	_SystemBlockingWaitMs	;wreg free
 38060                           
 38061                           ;radio_driver_SX1276.c: 254: HALResetPinMakeInput();
 38062  0088CC  ECCC  F04A         	call	_HALResetPinMakeInput	;wreg free
 38063                           
 38064                           ;radio_driver_SX1276.c: 255: SystemBlockingWaitMs(10);
 38065  0088D0  0E0A               	movlw	10
 38066  0088D2  0100               	movlb	0	; () banked
 38067  0088D4  6F60               	movwf	SystemBlockingWaitMs@ms& (0+255),b
 38068  0088D6  0E00               	movlw	0
 38069  0088D8  6F61               	movwf	(SystemBlockingWaitMs@ms+1)& (0+255),b
 38070  0088DA  0E00               	movlw	0
 38071  0088DC  6F62               	movwf	(SystemBlockingWaitMs@ms+2)& (0+255),b
 38072  0088DE  0E00               	movlw	0
 38073  0088E0  6F63               	movwf	(SystemBlockingWaitMs@ms+3)& (0+255),b
 38074  0088E2  ECB4  F046         	call	_SystemBlockingWaitMs	;wreg free
 38075                           
 38076                           ;radio_driver_SX1276.c: 257: HALResetPinOutputValue(1);
 38077  0088E6  0E01               	movlw	1
 38078  0088E8  EC74  F049         	call	_HALResetPinOutputValue
 38079                           
 38080                           ;radio_driver_SX1276.c: 258: HALResetPinMakeOutput();
 38081  0088EC  ECCA  F04A         	call	_HALResetPinMakeOutput	;wreg free
 38082  0088F0  0012               	return		;funcret
 38083  0088F2                     __end_of_RADIO_Reset:
 38084                           	opt stack 0
 38085                           tosu	equ	0xFFF
 38086                           tosh	equ	0xFFE
 38087                           tosl	equ	0xFFD
 38088                           pclath	equ	0xFFA
 38089                           tblptru	equ	0xFF8
 38090                           tblptrh	equ	0xFF7
 38091                           tblptrl	equ	0xFF6
 38092                           tablat	equ	0xFF5
 38093                           prodh	equ	0xFF4
 38094                           prodl	equ	0xFF3
 38095                           intcon	equ	0xFF2
 38096                           intcon2	equ	0xFF1
 38097                           intcon3	equ	0xFF0
 38098                           indf0	equ	0xFEF
 38099                           postinc0	equ	0xFEE
 38100                           plusw0	equ	0xFEB
 38101                           fsr0h	equ	0xFEA
 38102                           fsr0l	equ	0xFE9
 38103                           wreg	equ	0xFE8
 38104                           postinc1	equ	0xFE6
 38105                           postdec1	equ	0xFE5
 38106                           plusw1	equ	0xFE3
 38107                           fsr1h	equ	0xFE2
 38108                           fsr1l	equ	0xFE1
 38109                           indf2	equ	0xFDF
 38110                           postinc2	equ	0xFDE
 38111                           postdec2	equ	0xFDD
 38112                           plusw2	equ	0xFDB
 38113                           fsr2h	equ	0xFDA
 38114                           fsr2l	equ	0xFD9
 38115                           status	equ	0xFD8
 38116                           
 38117 ;; *************** function _SystemBlockingWaitMs *****************
 38118 ;; Defined at:
 38119 ;;		line 145 in file "mcc_generated_files/LoRaWAN/sw_timer.c"
 38120 ;; Parameters:    Size  Location     Type
 38121 ;;  ms              4    0[BANK0 ] unsigned long 
 38122 ;; Auto vars:     Size  Location     Type
 38123 ;;		None
 38124 ;; Return value:  Size  Location     Type
 38125 ;;                  1    wreg      void 
 38126 ;; Registers used:
 38127 ;;		wreg, status,2, status,0
 38128 ;; Tracked objects:
 38129 ;;		On entry : 0/0
 38130 ;;		On exit  : 0/0
 38131 ;;		Unchanged: 0/0
 38132 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 38133 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 38134 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 38135 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 38136 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 38137 ;;Total ram usage:        5 bytes
 38138 ;; Hardware stack levels used:    1
 38139 ;; Hardware stack levels required when called:    7
 38140 ;; This function calls:
 38141 ;;		Nothing
 38142 ;; This function is called by:
 38143 ;;		_RADIO_WriteMode
 38144 ;;		_RADIO_Reset
 38145 ;;		_RADIO_ReadRandom
 38146 ;;		_RADIO_StopCW
 38147 ;; This function uses a non-reentrant model
 38148 ;;
 38149                           
 38150                           	psect	text180
 38151  008D68                     __ptext180:
 38152                           	opt stack 0
 38153  008D68                     _SystemBlockingWaitMs:
 38154                           	opt stack 20
 38155                           
 38156                           ;sw_timer.c: 147: while (ms > 0)
 38157                           
 38158                           ;incstack = 0
 38159  008D68  D00F               	goto	l1543
 38160  008D6A                     
 38161                           ;sw_timer.c: 148: {
 38162                           ;sw_timer.c: 149: _delay((unsigned long)((1)*(16000000/4000.0)));
 38163  008D6A  0E06               	movlw	6
 38164  008D6C  0100               	movlb	0	; () banked
 38165  008D6E  6F64               	movwf	??_SystemBlockingWaitMs& (0+255),b
 38166  008D70  0E30               	movlw	48
 38167  008D72                     u17187:
 38168  008D72  2EE8               	decfsz	wreg,f,c
 38169  008D74  D7FE               	bra	u17187
 38170  008D76  2F64               	decfsz	??_SystemBlockingWaitMs& (0+255),f,b
 38171  008D78  D7FC               	bra	u17187
 38172  008D7A  F000               	nop	
 38173                           
 38174                           ;sw_timer.c: 150: ms--;
 38175  008D7C  0100               	movlb	0	; () banked
 38176  008D7E  0760               	decf	SystemBlockingWaitMs@ms& (0+255),f,b
 38177  008D80  0E00               	movlw	0
 38178  008D82  5B61               	subwfb	(SystemBlockingWaitMs@ms+1)& (0+255),f,b
 38179  008D84  5B62               	subwfb	(SystemBlockingWaitMs@ms+2)& (0+255),f,b
 38180  008D86  5B63               	subwfb	(SystemBlockingWaitMs@ms+3)& (0+255),f,b
 38181  008D88                     l1543:
 38182                           
 38183                           ; BSR set to: 0
 38184  008D88  0100               	movlb	0	; () banked
 38185  008D8A  5160               	movf	SystemBlockingWaitMs@ms& (0+255),w,b
 38186  008D8C  1161               	iorwf	(SystemBlockingWaitMs@ms+1)& (0+255),w,b
 38187  008D8E  1162               	iorwf	(SystemBlockingWaitMs@ms+2)& (0+255),w,b
 38188  008D90  1163               	iorwf	(SystemBlockingWaitMs@ms+3)& (0+255),w,b
 38189  008D92  B4D8               	btfsc	status,2,c
 38190  008D94  0012               	return	
 38191  008D96  D7E9               	goto	l1544
 38192  008D98                     __end_of_SystemBlockingWaitMs:
 38193                           	opt stack 0
 38194                           tosu	equ	0xFFF
 38195                           tosh	equ	0xFFE
 38196                           tosl	equ	0xFFD
 38197                           pclath	equ	0xFFA
 38198                           tblptru	equ	0xFF8
 38199                           tblptrh	equ	0xFF7
 38200                           tblptrl	equ	0xFF6
 38201                           tablat	equ	0xFF5
 38202                           prodh	equ	0xFF4
 38203                           prodl	equ	0xFF3
 38204                           intcon	equ	0xFF2
 38205                           intcon2	equ	0xFF1
 38206                           intcon3	equ	0xFF0
 38207                           indf0	equ	0xFEF
 38208                           postinc0	equ	0xFEE
 38209                           plusw0	equ	0xFEB
 38210                           fsr0h	equ	0xFEA
 38211                           fsr0l	equ	0xFE9
 38212                           wreg	equ	0xFE8
 38213                           postinc1	equ	0xFE6
 38214                           postdec1	equ	0xFE5
 38215                           plusw1	equ	0xFE3
 38216                           fsr1h	equ	0xFE2
 38217                           fsr1l	equ	0xFE1
 38218                           indf2	equ	0xFDF
 38219                           postinc2	equ	0xFDE
 38220                           postdec2	equ	0xFDD
 38221                           plusw2	equ	0xFDB
 38222                           fsr2h	equ	0xFDA
 38223                           fsr2l	equ	0xFD9
 38224                           status	equ	0xFD8
 38225                           
 38226 ;; *************** function _HALResetPinOutputValue *****************
 38227 ;; Defined at:
 38228 ;;		line 55 in file "mcc_generated_files/LoRaWAN/radio_driver_hal.c"
 38229 ;; Parameters:    Size  Location     Type
 38230 ;;  value           1    wreg     unsigned char 
 38231 ;; Auto vars:     Size  Location     Type
 38232 ;;  value           1    0[BANK0 ] unsigned char 
 38233 ;; Return value:  Size  Location     Type
 38234 ;;                  1    wreg      void 
 38235 ;; Registers used:
 38236 ;;		wreg, status,2, status,0
 38237 ;; Tracked objects:
 38238 ;;		On entry : 0/0
 38239 ;;		On exit  : 0/0
 38240 ;;		Unchanged: 0/0
 38241 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 38242 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 38243 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 38244 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 38245 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 38246 ;;Total ram usage:        1 bytes
 38247 ;; Hardware stack levels used:    1
 38248 ;; Hardware stack levels required when called:    7
 38249 ;; This function calls:
 38250 ;;		Nothing
 38251 ;; This function is called by:
 38252 ;;		_RADIO_Reset
 38253 ;; This function uses a non-reentrant model
 38254 ;;
 38255                           
 38256                           	psect	text181
 38257  0092E8                     __ptext181:
 38258                           	opt stack 0
 38259  0092E8                     _HALResetPinOutputValue:
 38260                           	opt stack 20
 38261                           
 38262                           ; BSR set to: 0
 38263                           ;incstack = 0
 38264                           ;HALResetPinOutputValue@value stored from wreg
 38265  0092E8  0100               	movlb	0	; () banked
 38266  0092EA  6F60               	movwf	HALResetPinOutputValue@value& (0+255),b
 38267                           
 38268                           ;radio_driver_hal.c: 57: if (value == 0)
 38269  0092EC  0100               	movlb	0	; () banked
 38270  0092EE  5160               	movf	HALResetPinOutputValue@value& (0+255),w,b
 38271  0092F0  A4D8               	btfss	status,2,c
 38272  0092F2  D002               	goto	l77
 38273                           
 38274                           ; BSR set to: 0
 38275                           
 38276                           ;radio_driver_hal.c: 58: do { LATC2 = 0; } while(0);
 38277  0092F4  948B               	bcf	3979,2,c	;volatile
 38278                           
 38279                           ; BSR set to: 0
 38280  0092F6  0012               	return	
 38281  0092F8                     l77:
 38282                           
 38283                           ; BSR set to: 0
 38284                           ;radio_driver_hal.c: 59: else if (value == 1)
 38285                           
 38286                           ; BSR set to: 0
 38287  0092F8  0560               	decf	HALResetPinOutputValue@value& (0+255),w,b
 38288  0092FA  A4D8               	btfss	status,2,c
 38289  0092FC  0012               	return	
 38290                           
 38291                           ; BSR set to: 0
 38292                           
 38293                           ;radio_driver_hal.c: 60: do { LATC2 = 1; } while(0);
 38294  0092FE  848B               	bsf	3979,2,c	;volatile
 38295                           
 38296                           ; BSR set to: 0
 38297                           
 38298                           ; BSR set to: 0
 38299  009300  0012               	return	
 38300  009302                     __end_of_HALResetPinOutputValue:
 38301                           	opt stack 0
 38302                           tosu	equ	0xFFF
 38303                           tosh	equ	0xFFE
 38304                           tosl	equ	0xFFD
 38305                           pclath	equ	0xFFA
 38306                           tblptru	equ	0xFF8
 38307                           tblptrh	equ	0xFF7
 38308                           tblptrl	equ	0xFF6
 38309                           tablat	equ	0xFF5
 38310                           prodh	equ	0xFF4
 38311                           prodl	equ	0xFF3
 38312                           intcon	equ	0xFF2
 38313                           intcon2	equ	0xFF1
 38314                           intcon3	equ	0xFF0
 38315                           indf0	equ	0xFEF
 38316                           postinc0	equ	0xFEE
 38317                           plusw0	equ	0xFEB
 38318                           fsr0h	equ	0xFEA
 38319                           fsr0l	equ	0xFE9
 38320                           wreg	equ	0xFE8
 38321                           postinc1	equ	0xFE6
 38322                           postdec1	equ	0xFE5
 38323                           plusw1	equ	0xFE3
 38324                           fsr1h	equ	0xFE2
 38325                           fsr1l	equ	0xFE1
 38326                           indf2	equ	0xFDF
 38327                           postinc2	equ	0xFDE
 38328                           postdec2	equ	0xFDD
 38329                           plusw2	equ	0xFDB
 38330                           fsr2h	equ	0xFDA
 38331                           fsr2l	equ	0xFD9
 38332                           status	equ	0xFD8
 38333                           
 38334 ;; *************** function _HALResetPinMakeOutput *****************
 38335 ;; Defined at:
 38336 ;;		line 45 in file "mcc_generated_files/LoRaWAN/radio_driver_hal.c"
 38337 ;; Parameters:    Size  Location     Type
 38338 ;;		None
 38339 ;; Auto vars:     Size  Location     Type
 38340 ;;		None
 38341 ;; Return value:  Size  Location     Type
 38342 ;;                  1    wreg      void 
 38343 ;; Registers used:
 38344 ;;		None
 38345 ;; Tracked objects:
 38346 ;;		On entry : 0/0
 38347 ;;		On exit  : 0/0
 38348 ;;		Unchanged: 0/0
 38349 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 38350 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 38351 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 38352 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 38353 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 38354 ;;Total ram usage:        0 bytes
 38355 ;; Hardware stack levels used:    1
 38356 ;; Hardware stack levels required when called:    7
 38357 ;; This function calls:
 38358 ;;		Nothing
 38359 ;; This function is called by:
 38360 ;;		_RADIO_Reset
 38361 ;; This function uses a non-reentrant model
 38362 ;;
 38363                           
 38364                           	psect	text182
 38365  009594                     __ptext182:
 38366                           	opt stack 0
 38367  009594                     _HALResetPinMakeOutput:
 38368                           	opt stack 20
 38369                           
 38370                           ; BSR set to: 0
 38371                           ;incstack = 0
 38372                           ;radio_driver_hal.c: 47: do { TRISC2 = 0; } while(0);
 38373  009594  9494               	bcf	3988,2,c	;volatile
 38374  009596  0012               	return	
 38375  009598                     __end_of_HALResetPinMakeOutput:
 38376                           	opt stack 0
 38377                           tosu	equ	0xFFF
 38378                           tosh	equ	0xFFE
 38379                           tosl	equ	0xFFD
 38380                           pclath	equ	0xFFA
 38381                           tblptru	equ	0xFF8
 38382                           tblptrh	equ	0xFF7
 38383                           tblptrl	equ	0xFF6
 38384                           tablat	equ	0xFF5
 38385                           prodh	equ	0xFF4
 38386                           prodl	equ	0xFF3
 38387                           intcon	equ	0xFF2
 38388                           intcon2	equ	0xFF1
 38389                           intcon3	equ	0xFF0
 38390                           indf0	equ	0xFEF
 38391                           postinc0	equ	0xFEE
 38392                           plusw0	equ	0xFEB
 38393                           fsr0h	equ	0xFEA
 38394                           fsr0l	equ	0xFE9
 38395                           wreg	equ	0xFE8
 38396                           postinc1	equ	0xFE6
 38397                           postdec1	equ	0xFE5
 38398                           plusw1	equ	0xFE3
 38399                           fsr1h	equ	0xFE2
 38400                           fsr1l	equ	0xFE1
 38401                           indf2	equ	0xFDF
 38402                           postinc2	equ	0xFDE
 38403                           postdec2	equ	0xFDD
 38404                           plusw2	equ	0xFDB
 38405                           fsr2h	equ	0xFDA
 38406                           fsr2l	equ	0xFD9
 38407                           status	equ	0xFD8
 38408                           
 38409 ;; *************** function _HALResetPinMakeInput *****************
 38410 ;; Defined at:
 38411 ;;		line 50 in file "mcc_generated_files/LoRaWAN/radio_driver_hal.c"
 38412 ;; Parameters:    Size  Location     Type
 38413 ;;		None
 38414 ;; Auto vars:     Size  Location     Type
 38415 ;;		None
 38416 ;; Return value:  Size  Location     Type
 38417 ;;                  1    wreg      void 
 38418 ;; Registers used:
 38419 ;;		None
 38420 ;; Tracked objects:
 38421 ;;		On entry : 0/0
 38422 ;;		On exit  : 0/0
 38423 ;;		Unchanged: 0/0
 38424 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 38425 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 38426 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 38427 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 38428 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 38429 ;;Total ram usage:        0 bytes
 38430 ;; Hardware stack levels used:    1
 38431 ;; Hardware stack levels required when called:    7
 38432 ;; This function calls:
 38433 ;;		Nothing
 38434 ;; This function is called by:
 38435 ;;		_RADIO_Reset
 38436 ;; This function uses a non-reentrant model
 38437 ;;
 38438                           
 38439                           	psect	text183
 38440  009598                     __ptext183:
 38441                           	opt stack 0
 38442  009598                     _HALResetPinMakeInput:
 38443                           	opt stack 20
 38444                           
 38445                           ;incstack = 0
 38446                           ;radio_driver_hal.c: 52: do { TRISC2 = 1; } while(0);
 38447  009598  8494               	bsf	3988,2,c	;volatile
 38448  00959A  0012               	return	
 38449  00959C                     __end_of_HALResetPinMakeInput:
 38450                           	opt stack 0
 38451                           tosu	equ	0xFFF
 38452                           tosh	equ	0xFFE
 38453                           tosl	equ	0xFFD
 38454                           pclath	equ	0xFFA
 38455                           tblptru	equ	0xFF8
 38456                           tblptrh	equ	0xFF7
 38457                           tblptrl	equ	0xFF6
 38458                           tablat	equ	0xFF5
 38459                           prodh	equ	0xFF4
 38460                           prodl	equ	0xFF3
 38461                           intcon	equ	0xFF2
 38462                           intcon2	equ	0xFF1
 38463                           intcon3	equ	0xFF0
 38464                           indf0	equ	0xFEF
 38465                           postinc0	equ	0xFEE
 38466                           plusw0	equ	0xFEB
 38467                           fsr0h	equ	0xFEA
 38468                           fsr0l	equ	0xFE9
 38469                           wreg	equ	0xFE8
 38470                           postinc1	equ	0xFE6
 38471                           postdec1	equ	0xFE5
 38472                           plusw1	equ	0xFE3
 38473                           fsr1h	equ	0xFE2
 38474                           fsr1l	equ	0xFE1
 38475                           indf2	equ	0xFDF
 38476                           postinc2	equ	0xFDE
 38477                           postdec2	equ	0xFDD
 38478                           plusw2	equ	0xFDB
 38479                           fsr2h	equ	0xFDA
 38480                           fsr2l	equ	0xFD9
 38481                           status	equ	0xFD8
 38482                           
 38483 ;; *************** function _LORAWAN_LinkCheckConfigure *****************
 38484 ;; Defined at:
 38485 ;;		line 755 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 38486 ;; Parameters:    Size  Location     Type
 38487 ;;  period          2   70[BANK0 ] unsigned int 
 38488 ;; Auto vars:     Size  Location     Type
 38489 ;;  iCtr            1   80[BANK0 ] unsigned char 
 38490 ;; Return value:  Size  Location     Type
 38491 ;;                  1    wreg      void 
 38492 ;; Registers used:
 38493 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 38494 ;; Tracked objects:
 38495 ;;		On entry : 0/0
 38496 ;;		On exit  : 0/0
 38497 ;;		Unchanged: 0/0
 38498 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 38499 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 38500 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 38501 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 38502 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 38503 ;;Total ram usage:       11 bytes
 38504 ;; Hardware stack levels used:    1
 38505 ;; Hardware stack levels required when called:   11
 38506 ;; This function calls:
 38507 ;;		_SwTimerSetTimeout
 38508 ;;		_SwTimerStart
 38509 ;;		_SwTimerStop
 38510 ;;		___lldiv
 38511 ;;		___lmul
 38512 ;; This function is called by:
 38513 ;;		_LORAWAN_Reset
 38514 ;; This function uses a non-reentrant model
 38515 ;;
 38516                           
 38517                           	psect	text184
 38518  0057DC                     __ptext184:
 38519                           	opt stack 0
 38520  0057DC                     _LORAWAN_LinkCheckConfigure:
 38521                           	opt stack 17
 38522                           
 38523                           ;lorawan.c: 757: uint8_t iCtr;
 38524                           ;lorawan.c: 759: loRa.periodForLinkCheck = period * 1000UL;
 38525                           
 38526                           ;incstack = 0
 38527  0057DC  C0A6  F09A         	movff	LORAWAN_LinkCheckConfigure@period,___lmul@multiplier
 38528  0057E0  C0A7  F09B         	movff	LORAWAN_LinkCheckConfigure@period+1,___lmul@multiplier+1
 38529  0057E4  0100               	movlb	0	; () banked
 38530  0057E6  6B9C               	clrf	(___lmul@multiplier+2)& (0+255),b
 38531  0057E8  6B9D               	clrf	(___lmul@multiplier+3)& (0+255),b
 38532  0057EA  0EE8               	movlw	232
 38533  0057EC  6F9E               	movwf	___lmul@multiplicand& (0+255),b
 38534  0057EE  0E03               	movlw	3
 38535  0057F0  6F9F               	movwf	(___lmul@multiplicand+1)& (0+255),b
 38536  0057F2  0E00               	movlw	0
 38537  0057F4  6FA0               	movwf	(___lmul@multiplicand+2)& (0+255),b
 38538  0057F6  0E00               	movlw	0
 38539  0057F8  6FA1               	movwf	(___lmul@multiplicand+3)& (0+255),b
 38540  0057FA  EC4D  F042         	call	___lmul	;wreg free
 38541  0057FE  C09A  F2D6         	movff	?___lmul,_loRa+204
 38542  005802  C09B  F2D7         	movff	?___lmul+1,_loRa+205
 38543  005806  C09C  F2D8         	movff	?___lmul+2,_loRa+206
 38544  00580A  C09D  F2D9         	movff	?___lmul+3,_loRa+207
 38545                           
 38546                           ;lorawan.c: 761: if (period == 0)
 38547  00580E  0100               	movlb	0	; () banked
 38548  005810  51A6               	movf	LORAWAN_LinkCheckConfigure@period& (0+255),w,b
 38549  005812  11A7               	iorwf	(LORAWAN_LinkCheckConfigure@period+1)& (0+255),w,b
 38550  005814  A4D8               	btfss	status,2,c
 38551  005816  D02B               	goto	l1024
 38552                           
 38553                           ; BSR set to: 0
 38554                           ;lorawan.c: 762: {
 38555                           ;lorawan.c: 763: SwTimerStop(loRa.linkCheckTimerId);
 38556  005818  0102               	movlb	2	; () banked
 38557  00581A  51F1               	movf	(_loRa+231)& (0+255),w,b
 38558  00581C  ECFB  F047         	call	_SwTimerStop
 38559                           
 38560                           ;lorawan.c: 764: loRa.macStatus.linkCheck = 0;
 38561  005820  0102               	movlb	2	; () banked
 38562  005822  950D               	bcf	(_loRa+3)& (0+255),2,b
 38563                           
 38564                           ; BSR set to: 2
 38565                           ;lorawan.c: 765: for(iCtr = 0; iCtr < loRa.crtMacCmdIndex; iCtr ++)
 38566  005824  0E00               	movlw	0
 38567  005826  0100               	movlb	0	; () banked
 38568  005828  6FB0               	movwf	LORAWAN_LinkCheckConfigure@iCtr& (0+255),b
 38569  00582A  D01A               	goto	l1025
 38570  00582C                     
 38571                           ; BSR set to: 0
 38572                           ;lorawan.c: 766: {
 38573                           ;lorawan.c: 767: if(loRa.macCommands[iCtr].receivedCid == LINK_CHECK_CID)
 38574                           
 38575                           ; BSR set to: 0
 38576  00582C  51B0               	movf	LORAWAN_LinkCheckConfigure@iCtr& (0+255),w,b
 38577  00582E  0D02               	mullw	2
 38578  005830  0EB2               	movlw	low (_loRa+168)
 38579  005832  24F3               	addwf	prodl,w,c
 38580  005834  6ED9               	movwf	fsr2l,c
 38581  005836  0E02               	movlw	high (_loRa+168)
 38582  005838  20F4               	addwfc	prodh,w,c
 38583  00583A  6EDA               	movwf	fsr2h,c
 38584  00583C  0E02               	movlw	2
 38585  00583E  18DE               	xorwf	postinc2,w,c
 38586  005840  A4D8               	btfss	status,2,c
 38587  005842  D00C               	goto	l1027
 38588                           
 38589                           ; BSR set to: 0
 38590                           ;lorawan.c: 768: {
 38591                           ;lorawan.c: 771: loRa.macCommands[iCtr].receivedCid = 0xFF;
 38592  005844  51B0               	movf	LORAWAN_LinkCheckConfigure@iCtr& (0+255),w,b
 38593  005846  0D02               	mullw	2
 38594  005848  0EB2               	movlw	low (_loRa+168)
 38595  00584A  24F3               	addwf	prodl,w,c
 38596  00584C  6ED9               	movwf	fsr2l,c
 38597  00584E  0E02               	movlw	high (_loRa+168)
 38598  005850  20F4               	addwfc	prodh,w,c
 38599  005852  6EDA               	movwf	fsr2h,c
 38600  005854  0EFF               	movlw	255
 38601  005856  6EDF               	movwf	indf2,c
 38602                           
 38603                           ; BSR set to: 0
 38604                           ;lorawan.c: 772: loRa.crtMacCmdIndex --;
 38605  005858  0102               	movlb	2	; () banked
 38606  00585A  07B1               	decf	(_loRa+167)& (0+255),f,b
 38607  00585C                     l1027:
 38608                           
 38609                           ; BSR set to: 2
 38610  00585C  0100               	movlb	0	; () banked
 38611  00585E  2BB0               	incf	LORAWAN_LinkCheckConfigure@iCtr& (0+255),f,b
 38612  005860                     l1025:
 38613                           
 38614                           ; BSR set to: 0
 38615                           
 38616                           ; BSR set to: 0
 38617  005860  0102               	movlb	2	; () banked
 38618  005862  51B1               	movf	(_loRa+167)& (0+255),w,b
 38619  005864  0100               	movlb	0	; () banked
 38620  005866  5DB0               	subwf	LORAWAN_LinkCheckConfigure@iCtr& (0+255),w,b
 38621  005868  B0D8               	btfsc	status,0,c
 38622  00586A  0012               	return	
 38623  00586C  D7DF               	goto	l1026
 38624  00586E                     l1024:
 38625                           
 38626                           ; BSR set to: 0
 38627                           ;lorawan.c: 776: else
 38628                           ;lorawan.c: 777: {
 38629                           ;lorawan.c: 778: loRa.macStatus.linkCheck = 1;
 38630  00586E  0102               	movlb	2	; () banked
 38631  005870  850D               	bsf	(_loRa+3)& (0+255),2,b
 38632                           
 38633                           ;lorawan.c: 781: if (loRa.macStatus.networkJoined == 1)
 38634  005872  A90C               	btfss	(_loRa+2)& (0+255),4,b
 38635  005874  0012               	return	
 38636                           
 38637                           ; BSR set to: 2
 38638                           ;lorawan.c: 782: {
 38639                           ;lorawan.c: 783: SwTimerSetTimeout(loRa.linkCheckTimerId, ((loRa.periodForLinkCheck) < 0
      +                          x000FFFFFUL ? ( (((uint32_t)(loRa.periodForLinkCheck)) << (12)) / 125UL ) : ( (((uint32_
      +                          t)(loRa.periodForLinkCheck)) / 125UL) << (12) ) ));
 38640  005876  51D9               	movf	(_loRa+207)& (0+255),w,b
 38641  005878  E107               	bnz	u12940
 38642  00587A  29D6               	incf	(_loRa+204)& (0+255),w,b
 38643  00587C  0EFF               	movlw	255
 38644  00587E  59D7               	subwfb	(_loRa+205)& (0+255),w,b
 38645  005880  0E0F               	movlw	15
 38646  005882  59D8               	subwfb	(_loRa+206)& (0+255),w,b
 38647  005884  A0D8               	btfss	status,0,c
 38648  005886  D01D               	goto	l1032
 38649  005888                     u12940:
 38650                           
 38651                           ; BSR set to: 2
 38652  005888  C2D6  F060         	movff	_loRa+204,___lldiv@dividend
 38653  00588C  C2D7  F061         	movff	_loRa+205,___lldiv@dividend+1
 38654  005890  C2D8  F062         	movff	_loRa+206,___lldiv@dividend+2
 38655  005894  C2D9  F063         	movff	_loRa+207,___lldiv@dividend+3
 38656  005898  0E7D               	movlw	125
 38657  00589A  0100               	movlb	0	; () banked
 38658  00589C  6F64               	movwf	___lldiv@divisor& (0+255),b
 38659  00589E  0E00               	movlw	0
 38660  0058A0  6F65               	movwf	(___lldiv@divisor+1)& (0+255),b
 38661  0058A2  0E00               	movlw	0
 38662  0058A4  6F66               	movwf	(___lldiv@divisor+2)& (0+255),b
 38663  0058A6  0E00               	movlw	0
 38664  0058A8  6F67               	movwf	(___lldiv@divisor+3)& (0+255),b
 38665  0058AA  ECE4  F03C         	call	___lldiv	;wreg free
 38666  0058AE  0E0C               	movlw	12
 38667  0058B0                     u12955:
 38668  0058B0  90D8               	bcf	status,0,c
 38669  0058B2  0100               	movlb	0	; () banked
 38670  0058B4  3760               	rlcf	?___lldiv& (0+255),f,b
 38671  0058B6  3761               	rlcf	(?___lldiv+1)& (0+255),f,b
 38672  0058B8  3762               	rlcf	(?___lldiv+2)& (0+255),f,b
 38673  0058BA  3763               	rlcf	(?___lldiv+3)& (0+255),f,b
 38674  0058BC  2EE8               	decfsz	wreg,f,c
 38675  0058BE  D7F8               	goto	u12955
 38676  0058C0  D023               	goto	L28
 38677  0058C2                     l1032:
 38678                           
 38679                           ; BSR set to: 0
 38680  0058C2  C2D6  F0A8         	movff	_loRa+204,??_LORAWAN_LinkCheckConfigure
 38681  0058C6  C2D7  F0A9         	movff	_loRa+205,??_LORAWAN_LinkCheckConfigure+1
 38682  0058CA  C2D8  F0AA         	movff	_loRa+206,??_LORAWAN_LinkCheckConfigure+2
 38683  0058CE  C2D9  F0AB         	movff	_loRa+207,??_LORAWAN_LinkCheckConfigure+3
 38684  0058D2  0E0C               	movlw	12
 38685  0058D4                     u12965:
 38686  0058D4  90D8               	bcf	status,0,c
 38687  0058D6  0100               	movlb	0	; () banked
 38688  0058D8  37A8               	rlcf	??_LORAWAN_LinkCheckConfigure& (0+255),f,b
 38689  0058DA  37A9               	rlcf	(??_LORAWAN_LinkCheckConfigure+1)& (0+255),f,b
 38690  0058DC  37AA               	rlcf	(??_LORAWAN_LinkCheckConfigure+2)& (0+255),f,b
 38691  0058DE  37AB               	rlcf	(??_LORAWAN_LinkCheckConfigure+3)& (0+255),f,b
 38692  0058E0  2EE8               	decfsz	wreg,f,c
 38693  0058E2  D7F8               	goto	u12965
 38694  0058E4  C0A8  F060         	movff	??_LORAWAN_LinkCheckConfigure,___lldiv@dividend
 38695  0058E8  C0A9  F061         	movff	??_LORAWAN_LinkCheckConfigure+1,___lldiv@dividend+1
 38696  0058EC  C0AA  F062         	movff	??_LORAWAN_LinkCheckConfigure+2,___lldiv@dividend+2
 38697  0058F0  C0AB  F063         	movff	??_LORAWAN_LinkCheckConfigure+3,___lldiv@dividend+3
 38698  0058F4  0E7D               	movlw	125
 38699  0058F6  6F64               	movwf	___lldiv@divisor& (0+255),b
 38700  0058F8  0E00               	movlw	0
 38701  0058FA  6F65               	movwf	(___lldiv@divisor+1)& (0+255),b
 38702  0058FC  0E00               	movlw	0
 38703  0058FE  6F66               	movwf	(___lldiv@divisor+2)& (0+255),b
 38704  005900  0E00               	movlw	0
 38705  005902  6F67               	movwf	(___lldiv@divisor+3)& (0+255),b
 38706  005904  ECE4  F03C         	call	___lldiv	;wreg free
 38707  005908                     L28:
 38708  005908  C060  F0AC         	movff	?___lldiv,_LORAWAN_LinkCheckConfigure$1514
 38709  00590C  C061  F0AD         	movff	?___lldiv+1,_LORAWAN_LinkCheckConfigure$1514+1
 38710  005910  C062  F0AE         	movff	?___lldiv+2,_LORAWAN_LinkCheckConfigure$1514+2
 38711  005914  C063  F0AF         	movff	?___lldiv+3,_LORAWAN_LinkCheckConfigure$1514+3
 38712  005918  C0AC  F06D         	movff	_LORAWAN_LinkCheckConfigure$1514,SwTimerSetTimeout@timeout
 38713  00591C  C0AD  F06E         	movff	_LORAWAN_LinkCheckConfigure$1514+1,SwTimerSetTimeout@timeout+1
 38714  005920  C0AE  F06F         	movff	_LORAWAN_LinkCheckConfigure$1514+2,SwTimerSetTimeout@timeout+2
 38715  005924  C0AF  F070         	movff	_LORAWAN_LinkCheckConfigure$1514+3,SwTimerSetTimeout@timeout+3
 38716  005928  0102               	movlb	2	; () banked
 38717  00592A  51F1               	movf	(_loRa+231)& (0+255),w,b
 38718  00592C  EC01  F045         	call	_SwTimerSetTimeout
 38719                           
 38720                           ;lorawan.c: 784: SwTimerStart(loRa.linkCheckTimerId);
 38721  005930  0102               	movlb	2	; () banked
 38722  005932  51F1               	movf	(_loRa+231)& (0+255),w,b
 38723  005934  ECB4  F03A         	call	_SwTimerStart
 38724  005938  0012               	return	
 38725  00593A                     __end_of_LORAWAN_LinkCheckConfigure:
 38726                           	opt stack 0
 38727                           tosu	equ	0xFFF
 38728                           tosh	equ	0xFFE
 38729                           tosl	equ	0xFFD
 38730                           pclath	equ	0xFFA
 38731                           tblptru	equ	0xFF8
 38732                           tblptrh	equ	0xFF7
 38733                           tblptrl	equ	0xFF6
 38734                           tablat	equ	0xFF5
 38735                           prodh	equ	0xFF4
 38736                           prodl	equ	0xFF3
 38737                           intcon	equ	0xFF2
 38738                           intcon2	equ	0xFF1
 38739                           intcon3	equ	0xFF0
 38740                           indf0	equ	0xFEF
 38741                           postinc0	equ	0xFEE
 38742                           plusw0	equ	0xFEB
 38743                           fsr0h	equ	0xFEA
 38744                           fsr0l	equ	0xFE9
 38745                           wreg	equ	0xFE8
 38746                           postinc1	equ	0xFE6
 38747                           postdec1	equ	0xFE5
 38748                           plusw1	equ	0xFE3
 38749                           fsr1h	equ	0xFE2
 38750                           fsr1l	equ	0xFE1
 38751                           indf2	equ	0xFDF
 38752                           postinc2	equ	0xFDE
 38753                           postdec2	equ	0xFDD
 38754                           plusw2	equ	0xFDB
 38755                           fsr2h	equ	0xFDA
 38756                           fsr2l	equ	0xFD9
 38757                           status	equ	0xFD8
 38758                           
 38759 ;; *************** function ___lmul *****************
 38760 ;; Defined at:
 38761 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul32.c"
 38762 ;; Parameters:    Size  Location     Type
 38763 ;;  multiplier      4   58[BANK0 ] unsigned long 
 38764 ;;  multiplicand    4   62[BANK0 ] unsigned long 
 38765 ;; Auto vars:     Size  Location     Type
 38766 ;;  product         4   66[BANK0 ] unsigned long 
 38767 ;; Return value:  Size  Location     Type
 38768 ;;                  4   58[BANK0 ] unsigned long 
 38769 ;; Registers used:
 38770 ;;		wreg, status,2, status,0
 38771 ;; Tracked objects:
 38772 ;;		On entry : 0/0
 38773 ;;		On exit  : 0/0
 38774 ;;		Unchanged: 0/0
 38775 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 38776 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 38777 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 38778 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 38779 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 38780 ;;Total ram usage:       12 bytes
 38781 ;; Hardware stack levels used:    1
 38782 ;; Hardware stack levels required when called:    7
 38783 ;; This function calls:
 38784 ;;		Nothing
 38785 ;; This function is called by:
 38786 ;;		_RADIO_WriteConfiguration
 38787 ;;		_RADIO_TxDone
 38788 ;;		_RADIO_FSKPacketSent
 38789 ;;		_LORAWAN_LinkCheckConfigure
 38790 ;;		_LORAWAN_TxDone
 38791 ;;		_ExecuteNewChannel
 38792 ;;		_ExecuteRxParamSetupReq
 38793 ;;		_UpdateCfList
 38794 ;;		_rand
 38795 ;;		_LORAWAN_Pause
 38796 ;; This function uses a non-reentrant model
 38797 ;;
 38798                           
 38799                           	psect	text185
 38800  00849A                     __ptext185:
 38801                           	opt stack 0
 38802  00849A                     ___lmul:
 38803                           	opt stack 18
 38804                           
 38805                           ;incstack = 0
 38806  00849A  0E00               	movlw	0
 38807  00849C  0100               	movlb	0	; () banked
 38808  00849E  6FA2               	movwf	___lmul@product& (0+255),b
 38809  0084A0  0E00               	movlw	0
 38810  0084A2  6FA3               	movwf	(___lmul@product+1)& (0+255),b
 38811  0084A4  0E00               	movlw	0
 38812  0084A6  6FA4               	movwf	(___lmul@product+2)& (0+255),b
 38813  0084A8  0E00               	movlw	0
 38814  0084AA  6FA5               	movwf	(___lmul@product+3)& (0+255),b
 38815  0084AC                     
 38816                           ; BSR set to: 0
 38817                           
 38818                           ; BSR set to: 0
 38819  0084AC  A19A               	btfss	___lmul@multiplier& (0+255),0,b
 38820  0084AE  D008               	goto	l2842
 38821                           
 38822                           ; BSR set to: 0
 38823  0084B0  519E               	movf	___lmul@multiplicand& (0+255),w,b
 38824  0084B2  27A2               	addwf	___lmul@product& (0+255),f,b
 38825  0084B4  519F               	movf	(___lmul@multiplicand+1)& (0+255),w,b
 38826  0084B6  23A3               	addwfc	(___lmul@product+1)& (0+255),f,b
 38827  0084B8  51A0               	movf	(___lmul@multiplicand+2)& (0+255),w,b
 38828  0084BA  23A4               	addwfc	(___lmul@product+2)& (0+255),f,b
 38829  0084BC  51A1               	movf	(___lmul@multiplicand+3)& (0+255),w,b
 38830  0084BE  23A5               	addwfc	(___lmul@product+3)& (0+255),f,b
 38831  0084C0                     l2842:
 38832                           
 38833                           ; BSR set to: 0
 38834                           
 38835                           ; BSR set to: 0
 38836  0084C0  90D8               	bcf	status,0,c
 38837  0084C2  379E               	rlcf	___lmul@multiplicand& (0+255),f,b
 38838  0084C4  379F               	rlcf	(___lmul@multiplicand+1)& (0+255),f,b
 38839  0084C6  37A0               	rlcf	(___lmul@multiplicand+2)& (0+255),f,b
 38840  0084C8  37A1               	rlcf	(___lmul@multiplicand+3)& (0+255),f,b
 38841                           
 38842                           ; BSR set to: 0
 38843  0084CA  90D8               	bcf	status,0,c
 38844  0084CC  339D               	rrcf	(___lmul@multiplier+3)& (0+255),f,b
 38845  0084CE  339C               	rrcf	(___lmul@multiplier+2)& (0+255),f,b
 38846  0084D0  339B               	rrcf	(___lmul@multiplier+1)& (0+255),f,b
 38847  0084D2  339A               	rrcf	___lmul@multiplier& (0+255),f,b
 38848  0084D4  519A               	movf	___lmul@multiplier& (0+255),w,b
 38849  0084D6  119B               	iorwf	(___lmul@multiplier+1)& (0+255),w,b
 38850  0084D8  119C               	iorwf	(___lmul@multiplier+2)& (0+255),w,b
 38851  0084DA  119D               	iorwf	(___lmul@multiplier+3)& (0+255),w,b
 38852  0084DC  A4D8               	btfss	status,2,c
 38853  0084DE  D7E6               	goto	l2841
 38854                           
 38855                           ; BSR set to: 0
 38856  0084E0  C0A2  F09A         	movff	___lmul@product,?___lmul
 38857  0084E4  C0A3  F09B         	movff	___lmul@product+1,?___lmul+1
 38858  0084E8  C0A4  F09C         	movff	___lmul@product+2,?___lmul+2
 38859  0084EC  C0A5  F09D         	movff	___lmul@product+3,?___lmul+3
 38860                           
 38861                           ; BSR set to: 0
 38862  0084F0  0012               	return		;funcret
 38863  0084F2                     __end_of___lmul:
 38864                           	opt stack 0
 38865                           tosu	equ	0xFFF
 38866                           tosh	equ	0xFFE
 38867                           tosl	equ	0xFFD
 38868                           pclath	equ	0xFFA
 38869                           tblptru	equ	0xFF8
 38870                           tblptrh	equ	0xFF7
 38871                           tblptrl	equ	0xFF6
 38872                           tablat	equ	0xFF5
 38873                           prodh	equ	0xFF4
 38874                           prodl	equ	0xFF3
 38875                           intcon	equ	0xFF2
 38876                           intcon2	equ	0xFF1
 38877                           intcon3	equ	0xFF0
 38878                           indf0	equ	0xFEF
 38879                           postinc0	equ	0xFEE
 38880                           plusw0	equ	0xFEB
 38881                           fsr0h	equ	0xFEA
 38882                           fsr0l	equ	0xFE9
 38883                           wreg	equ	0xFE8
 38884                           postinc1	equ	0xFE6
 38885                           postdec1	equ	0xFE5
 38886                           plusw1	equ	0xFE3
 38887                           fsr1h	equ	0xFE2
 38888                           fsr1l	equ	0xFE1
 38889                           indf2	equ	0xFDF
 38890                           postinc2	equ	0xFDE
 38891                           postdec2	equ	0xFDD
 38892                           plusw2	equ	0xFDB
 38893                           fsr2h	equ	0xFDA
 38894                           fsr2l	equ	0xFD9
 38895                           status	equ	0xFD8
 38896                           
 38897 ;; *************** function ___lldiv *****************
 38898 ;; Defined at:
 38899 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lldiv.c"
 38900 ;; Parameters:    Size  Location     Type
 38901 ;;  dividend        4    0[BANK0 ] unsigned long 
 38902 ;;  divisor         4    4[BANK0 ] unsigned long 
 38903 ;; Auto vars:     Size  Location     Type
 38904 ;;  quotient        4    8[BANK0 ] unsigned long 
 38905 ;;  counter         1   12[BANK0 ] unsigned char 
 38906 ;; Return value:  Size  Location     Type
 38907 ;;                  4    0[BANK0 ] unsigned long 
 38908 ;; Registers used:
 38909 ;;		wreg, status,2, status,0
 38910 ;; Tracked objects:
 38911 ;;		On entry : 0/0
 38912 ;;		On exit  : 0/0
 38913 ;;		Unchanged: 0/0
 38914 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 38915 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 38916 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 38917 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 38918 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 38919 ;;Total ram usage:       13 bytes
 38920 ;; Hardware stack levels used:    1
 38921 ;; Hardware stack levels required when called:    7
 38922 ;; This function calls:
 38923 ;;		Nothing
 38924 ;; This function is called by:
 38925 ;;		_RADIO_WriteFrequency
 38926 ;;		_RADIO_WriteFSKFrequencyDeviation
 38927 ;;		_RADIO_WriteFSKBitRate
 38928 ;;		_RADIO_Transmit
 38929 ;;		_RADIO_ReceiveStart
 38930 ;;		_LORAWAN_LinkCheckConfigure
 38931 ;;		_LORAWAN_LinkCheckCallback
 38932 ;;		_UpdateRetransmissionAckTimeoutState
 38933 ;;		_UpdateJoinSuccessState
 38934 ;;		_LORAWAN_TxDone
 38935 ;;		_LORAWAN_RxTimeout
 38936 ;;		_StartReTxTimer
 38937 ;;		_DutyCycleCallback
 38938 ;; This function uses a non-reentrant model
 38939 ;;
 38940                           
 38941                           	psect	text186
 38942  0079C8                     __ptext186:
 38943                           	opt stack 0
 38944  0079C8                     ___lldiv:
 38945                           	opt stack 21
 38946                           
 38947                           ; BSR set to: 0
 38948                           ;incstack = 0
 38949  0079C8  0E00               	movlw	0
 38950  0079CA  0100               	movlb	0	; () banked
 38951  0079CC  6F68               	movwf	___lldiv@quotient& (0+255),b
 38952  0079CE  0E00               	movlw	0
 38953  0079D0  6F69               	movwf	(___lldiv@quotient+1)& (0+255),b
 38954  0079D2  0E00               	movlw	0
 38955  0079D4  6F6A               	movwf	(___lldiv@quotient+2)& (0+255),b
 38956  0079D6  0E00               	movlw	0
 38957  0079D8  6F6B               	movwf	(___lldiv@quotient+3)& (0+255),b
 38958                           
 38959                           ; BSR set to: 0
 38960  0079DA  5164               	movf	___lldiv@divisor& (0+255),w,b
 38961  0079DC  1165               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
 38962  0079DE  1166               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
 38963  0079E0  1167               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
 38964  0079E2  B4D8               	btfsc	status,2,c
 38965  0079E4  D02A               	goto	l3185
 38966                           
 38967                           ; BSR set to: 0
 38968  0079E6  0E01               	movlw	1
 38969  0079E8  6F6C               	movwf	___lldiv@counter& (0+255),b
 38970  0079EA  D006               	goto	l3180
 38971  0079EC                     
 38972                           ; BSR set to: 0
 38973                           
 38974                           ; BSR set to: 0
 38975  0079EC  90D8               	bcf	status,0,c
 38976  0079EE  3764               	rlcf	___lldiv@divisor& (0+255),f,b
 38977  0079F0  3765               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
 38978  0079F2  3766               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
 38979  0079F4  3767               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
 38980  0079F6  2B6C               	incf	___lldiv@counter& (0+255),f,b
 38981  0079F8                     l3180:
 38982                           
 38983                           ; BSR set to: 0
 38984                           
 38985                           ; BSR set to: 0
 38986  0079F8  AF67               	btfss	(___lldiv@divisor+3)& (0+255),7,b
 38987  0079FA  D7F8               	goto	l3181
 38988  0079FC                     u7890:
 38989                           
 38990                           ; BSR set to: 0
 38991                           
 38992                           ; BSR set to: 0
 38993                           
 38994                           ; BSR set to: 0
 38995  0079FC  90D8               	bcf	status,0,c
 38996  0079FE  3768               	rlcf	___lldiv@quotient& (0+255),f,b
 38997  007A00  3769               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
 38998  007A02  376A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
 38999  007A04  376B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
 39000                           
 39001                           ; BSR set to: 0
 39002  007A06  5164               	movf	___lldiv@divisor& (0+255),w,b
 39003  007A08  5D60               	subwf	___lldiv@dividend& (0+255),w,b
 39004  007A0A  5165               	movf	(___lldiv@divisor+1)& (0+255),w,b
 39005  007A0C  5961               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
 39006  007A0E  5166               	movf	(___lldiv@divisor+2)& (0+255),w,b
 39007  007A10  5962               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
 39008  007A12  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
 39009  007A14  5963               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
 39010  007A16  A0D8               	btfss	status,0,c
 39011  007A18  D009               	goto	l3184
 39012                           
 39013                           ; BSR set to: 0
 39014  007A1A  5164               	movf	___lldiv@divisor& (0+255),w,b
 39015  007A1C  5F60               	subwf	___lldiv@dividend& (0+255),f,b
 39016  007A1E  5165               	movf	(___lldiv@divisor+1)& (0+255),w,b
 39017  007A20  5B61               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
 39018  007A22  5166               	movf	(___lldiv@divisor+2)& (0+255),w,b
 39019  007A24  5B62               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
 39020  007A26  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
 39021  007A28  5B63               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
 39022                           
 39023                           ; BSR set to: 0
 39024  007A2A  8168               	bsf	___lldiv@quotient& (0+255),0,b
 39025  007A2C                     l3184:
 39026                           
 39027                           ; BSR set to: 0
 39028                           
 39029                           ; BSR set to: 0
 39030  007A2C  90D8               	bcf	status,0,c
 39031  007A2E  3367               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
 39032  007A30  3366               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
 39033  007A32  3365               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
 39034  007A34  3364               	rrcf	___lldiv@divisor& (0+255),f,b
 39035                           
 39036                           ; BSR set to: 0
 39037  007A36  2F6C               	decfsz	___lldiv@counter& (0+255),f,b
 39038  007A38  D7E1               	goto	u7890
 39039  007A3A                     l3185:
 39040                           
 39041                           ; BSR set to: 0
 39042                           
 39043                           ; BSR set to: 0
 39044  007A3A  C068  F060         	movff	___lldiv@quotient,?___lldiv
 39045  007A3E  C069  F061         	movff	___lldiv@quotient+1,?___lldiv+1
 39046  007A42  C06A  F062         	movff	___lldiv@quotient+2,?___lldiv+2
 39047  007A46  C06B  F063         	movff	___lldiv@quotient+3,?___lldiv+3
 39048                           
 39049                           ; BSR set to: 0
 39050  007A4A  0012               	return		;funcret
 39051  007A4C                     __end_of___lldiv:
 39052                           	opt stack 0
 39053                           tosu	equ	0xFFF
 39054                           tosh	equ	0xFFE
 39055                           tosl	equ	0xFFD
 39056                           pclath	equ	0xFFA
 39057                           tblptru	equ	0xFF8
 39058                           tblptrh	equ	0xFF7
 39059                           tblptrl	equ	0xFF6
 39060                           tablat	equ	0xFF5
 39061                           prodh	equ	0xFF4
 39062                           prodl	equ	0xFF3
 39063                           intcon	equ	0xFF2
 39064                           intcon2	equ	0xFF1
 39065                           intcon3	equ	0xFF0
 39066                           indf0	equ	0xFEF
 39067                           postinc0	equ	0xFEE
 39068                           plusw0	equ	0xFEB
 39069                           fsr0h	equ	0xFEA
 39070                           fsr0l	equ	0xFE9
 39071                           wreg	equ	0xFE8
 39072                           postinc1	equ	0xFE6
 39073                           postdec1	equ	0xFE5
 39074                           plusw1	equ	0xFE3
 39075                           fsr1h	equ	0xFE2
 39076                           fsr1l	equ	0xFE1
 39077                           indf2	equ	0xFDF
 39078                           postinc2	equ	0xFDE
 39079                           postdec2	equ	0xFDD
 39080                           plusw2	equ	0xFDB
 39081                           fsr2h	equ	0xFDA
 39082                           fsr2l	equ	0xFD9
 39083                           status	equ	0xFD8
 39084                           
 39085 ;; *************** function _SwTimerStop *****************
 39086 ;; Defined at:
 39087 ;;		line 233 in file "mcc_generated_files/LoRaWAN/sw_timer.c"
 39088 ;; Parameters:    Size  Location     Type
 39089 ;;  timerId         1    wreg     unsigned char 
 39090 ;; Auto vars:     Size  Location     Type
 39091 ;;  timerId         1    0[BANK0 ] unsigned char 
 39092 ;; Return value:  Size  Location     Type
 39093 ;;                  1    wreg      void 
 39094 ;; Registers used:
 39095 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 39096 ;; Tracked objects:
 39097 ;;		On entry : 0/0
 39098 ;;		On exit  : 0/0
 39099 ;;		Unchanged: 0/0
 39100 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 39101 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 39102 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 39103 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 39104 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 39105 ;;Total ram usage:        1 bytes
 39106 ;; Hardware stack levels used:    1
 39107 ;; Hardware stack levels required when called:    7
 39108 ;; This function calls:
 39109 ;;		Nothing
 39110 ;; This function is called by:
 39111 ;;		_RADIO_Init
 39112 ;;		_RADIO_Transmit
 39113 ;;		_RADIO_RxDone
 39114 ;;		_RADIO_FSKPayloadReady
 39115 ;;		_RADIO_RxTimeout
 39116 ;;		_RADIO_TxDone
 39117 ;;		_RADIO_FSKPacketSent
 39118 ;;		_RADIO_RxFSKTimeout
 39119 ;;		_LORAWAN_LinkCheckConfigure
 39120 ;;		_LORAWAN_RxDone
 39121 ;;		_LORAWAN_TxDone
 39122 ;;		_StopAllSoftwareTimers
 39123 ;; This function uses a non-reentrant model
 39124 ;;
 39125                           
 39126                           	psect	text187
 39127  008FF6                     __ptext187:
 39128                           	opt stack 0
 39129  008FF6                     _SwTimerStop:
 39130                           	opt stack 21
 39131                           
 39132                           ; BSR set to: 0
 39133                           ;incstack = 0
 39134                           ;SwTimerStop@timerId stored from wreg
 39135  008FF6  0100               	movlb	0	; () banked
 39136  008FF8  6F60               	movwf	SwTimerStop@timerId& (0+255),b
 39137                           
 39138                           ;sw_timer.c: 235: (INTCONbits.GIE = 0);
 39139  008FFA  9EF2               	bcf	intcon,7,c	;volatile
 39140                           
 39141                           ;sw_timer.c: 236: swTimers[timerId].running = 0;
 39142  008FFC  0100               	movlb	0	; () banked
 39143  008FFE  5160               	movf	SwTimerStop@timerId& (0+255),w,b
 39144  009000  0D08               	mullw	8
 39145  009002  0E04               	movlw	4
 39146  009004  26F3               	addwf	prodl,f,c
 39147  009006  0E00               	movlw	0
 39148  009008  22F4               	addwfc	prodh,f,c
 39149  00900A  0E00               	movlw	low _swTimers
 39150  00900C  24F3               	addwf	prodl,w,c
 39151  00900E  6ED9               	movwf	fsr2l,c
 39152  009010  0E03               	movlw	high _swTimers
 39153  009012  20F4               	addwfc	prodh,w,c
 39154  009014  6EDA               	movwf	fsr2h,c
 39155  009016  0E00               	movlw	0
 39156  009018  6EDF               	movwf	indf2,c
 39157                           
 39158                           ; BSR set to: 0
 39159                           ;sw_timer.c: 237: (INTCONbits.GIE = 1);
 39160  00901A  8EF2               	bsf	intcon,7,c	;volatile
 39161                           
 39162                           ; BSR set to: 0
 39163  00901C  0012               	return		;funcret
 39164  00901E                     __end_of_SwTimerStop:
 39165                           	opt stack 0
 39166                           tosu	equ	0xFFF
 39167                           tosh	equ	0xFFE
 39168                           tosl	equ	0xFFD
 39169                           pclath	equ	0xFFA
 39170                           tblptru	equ	0xFF8
 39171                           tblptrh	equ	0xFF7
 39172                           tblptrl	equ	0xFF6
 39173                           tablat	equ	0xFF5
 39174                           prodh	equ	0xFF4
 39175                           prodl	equ	0xFF3
 39176                           intcon	equ	0xFF2
 39177                           intcon2	equ	0xFF1
 39178                           intcon3	equ	0xFF0
 39179                           indf0	equ	0xFEF
 39180                           postinc0	equ	0xFEE
 39181                           plusw0	equ	0xFEB
 39182                           fsr0h	equ	0xFEA
 39183                           fsr0l	equ	0xFE9
 39184                           wreg	equ	0xFE8
 39185                           postinc1	equ	0xFE6
 39186                           postdec1	equ	0xFE5
 39187                           plusw1	equ	0xFE3
 39188                           fsr1h	equ	0xFE2
 39189                           fsr1l	equ	0xFE1
 39190                           indf2	equ	0xFDF
 39191                           postinc2	equ	0xFDE
 39192                           postdec2	equ	0xFDD
 39193                           plusw2	equ	0xFDB
 39194                           fsr2h	equ	0xFDA
 39195                           fsr2l	equ	0xFD9
 39196                           status	equ	0xFD8
 39197                           
 39198 ;; *************** function _SwTimerStart *****************
 39199 ;; Defined at:
 39200 ;;		line 218 in file "mcc_generated_files/LoRaWAN/sw_timer.c"
 39201 ;; Parameters:    Size  Location     Type
 39202 ;;  timerId         1    wreg     unsigned char 
 39203 ;; Auto vars:     Size  Location     Type
 39204 ;;  timerId         1   57[BANK0 ] unsigned char 
 39205 ;;  ticksRemaini    4   53[BANK0 ] unsigned long 
 39206 ;; Return value:  Size  Location     Type
 39207 ;;                  1    wreg      void 
 39208 ;; Registers used:
 39209 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 39210 ;; Tracked objects:
 39211 ;;		On entry : 0/0
 39212 ;;		On exit  : 0/0
 39213 ;;		Unchanged: 0/0
 39214 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 39215 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 39216 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 39217 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 39218 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 39219 ;;Total ram usage:        9 bytes
 39220 ;; Hardware stack levels used:    1
 39221 ;; Hardware stack levels required when called:   10
 39222 ;; This function calls:
 39223 ;;		_SwTimersInterrupt
 39224 ;;		_TMR_OverrideRemaining
 39225 ;; This function is called by:
 39226 ;;		_RADIO_Transmit
 39227 ;;		_RADIO_ReceiveStart
 39228 ;;		_LORAWAN_Join
 39229 ;;		_LORAWAN_LinkCheckConfigure
 39230 ;;		_LORAWAN_LinkCheckCallback
 39231 ;;		_UpdateRetransmissionAckTimeoutState
 39232 ;;		_UpdateJoinSuccessState
 39233 ;;		_LORAWAN_TxDone
 39234 ;;		_LORAWAN_RxTimeout
 39235 ;;		_StartReTxTimer
 39236 ;;		_DutyCycleCallback
 39237 ;; This function uses a non-reentrant model
 39238 ;;
 39239                           
 39240                           	psect	text188
 39241  007568                     __ptext188:
 39242                           	opt stack 0
 39243  007568                     _SwTimerStart:
 39244                           	opt stack 18
 39245                           
 39246                           ; BSR set to: 0
 39247                           ;incstack = 0
 39248                           ;SwTimerStart@timerId stored from wreg
 39249  007568  0100               	movlb	0	; () banked
 39250  00756A  6F99               	movwf	SwTimerStart@timerId& (0+255),b
 39251                           
 39252                           ;sw_timer.c: 220: uint32_t ticksRemaining;
 39253                           ;sw_timer.c: 222: (INTCONbits.GIE = 0);
 39254  00756C  9EF2               	bcf	intcon,7,c	;volatile
 39255                           
 39256                           ;sw_timer.c: 223: ticksRemaining = SwTimersInterrupt();
 39257  00756E  ECD7  F030         	call	_SwTimersInterrupt	;wreg free
 39258  007572  C080  F095         	movff	?_SwTimersInterrupt,SwTimerStart@ticksRemaining
 39259  007576  C081  F096         	movff	?_SwTimersInterrupt+1,SwTimerStart@ticksRemaining+1
 39260  00757A  C082  F097         	movff	?_SwTimersInterrupt+2,SwTimerStart@ticksRemaining+2
 39261  00757E  C083  F098         	movff	?_SwTimersInterrupt+3,SwTimerStart@ticksRemaining+3
 39262                           
 39263                           ;sw_timer.c: 224: if (swTimers[timerId].ticksRemaining < ticksRemaining)
 39264  007582  0100               	movlb	0	; () banked
 39265  007584  5199               	movf	SwTimerStart@timerId& (0+255),w,b
 39266  007586  0D08               	mullw	8
 39267  007588  0E00               	movlw	low _swTimers
 39268  00758A  24F3               	addwf	prodl,w,c
 39269  00758C  6ED9               	movwf	fsr2l,c
 39270  00758E  0E03               	movlw	high _swTimers
 39271  007590  20F4               	addwfc	prodh,w,c
 39272  007592  6EDA               	movwf	fsr2h,c
 39273  007594  5195               	movf	SwTimerStart@ticksRemaining& (0+255),w,b
 39274  007596  5CDE               	subwf	postinc2,w,c
 39275  007598  5196               	movf	(SwTimerStart@ticksRemaining+1)& (0+255),w,b
 39276  00759A  58DE               	subwfb	postinc2,w,c
 39277  00759C  5197               	movf	(SwTimerStart@ticksRemaining+2)& (0+255),w,b
 39278  00759E  58DE               	subwfb	postinc2,w,c
 39279  0075A0  5198               	movf	(SwTimerStart@ticksRemaining+3)& (0+255),w,b
 39280  0075A2  58DE               	subwfb	postinc2,w,c
 39281  0075A4  B0D8               	btfsc	status,0,c
 39282  0075A6  D010               	goto	l1569
 39283                           
 39284                           ; BSR set to: 0
 39285                           ;sw_timer.c: 225: {
 39286                           ;sw_timer.c: 226: ticksRemaining = swTimers[timerId].ticksRemaining;
 39287  0075A8  5199               	movf	SwTimerStart@timerId& (0+255),w,b
 39288  0075AA  0D08               	mullw	8
 39289  0075AC  0E00               	movlw	low _swTimers
 39290  0075AE  24F3               	addwf	prodl,w,c
 39291  0075B0  6ED9               	movwf	fsr2l,c
 39292  0075B2  0E03               	movlw	high _swTimers
 39293  0075B4  20F4               	addwfc	prodh,w,c
 39294  0075B6  6EDA               	movwf	fsr2h,c
 39295  0075B8  CFDE F095          	movff	postinc2,SwTimerStart@ticksRemaining
 39296  0075BC  CFDE F096          	movff	postinc2,SwTimerStart@ticksRemaining+1
 39297  0075C0  CFDE F097          	movff	postinc2,SwTimerStart@ticksRemaining+2
 39298  0075C4  CFDE F098          	movff	postinc2,SwTimerStart@ticksRemaining+3
 39299  0075C8                     l1569:
 39300                           
 39301                           ; BSR set to: 0
 39302                           ;sw_timer.c: 227: }
 39303                           ;sw_timer.c: 228: TMR_OverrideRemaining(ticksRemaining);
 39304                           
 39305                           ; BSR set to: 0
 39306  0075C8  C095  F06A         	movff	SwTimerStart@ticksRemaining,TMR_OverrideRemaining@ticksRemaining
 39307  0075CC  C096  F06B         	movff	SwTimerStart@ticksRemaining+1,TMR_OverrideRemaining@ticksRemaining+1
 39308  0075D0  C097  F06C         	movff	SwTimerStart@ticksRemaining+2,TMR_OverrideRemaining@ticksRemaining+2
 39309  0075D4  C098  F06D         	movff	SwTimerStart@ticksRemaining+3,TMR_OverrideRemaining@ticksRemaining+3
 39310  0075D8  EC66  F03A         	call	_TMR_OverrideRemaining	;wreg free
 39311                           
 39312                           ;sw_timer.c: 229: swTimers[timerId].running = 1;
 39313  0075DC  0100               	movlb	0	; () banked
 39314  0075DE  5199               	movf	SwTimerStart@timerId& (0+255),w,b
 39315  0075E0  0D08               	mullw	8
 39316  0075E2  0E04               	movlw	4
 39317  0075E4  26F3               	addwf	prodl,f,c
 39318  0075E6  0E00               	movlw	0
 39319  0075E8  22F4               	addwfc	prodh,f,c
 39320  0075EA  0E00               	movlw	low _swTimers
 39321  0075EC  24F3               	addwf	prodl,w,c
 39322  0075EE  6ED9               	movwf	fsr2l,c
 39323  0075F0  0E03               	movlw	high _swTimers
 39324  0075F2  20F4               	addwfc	prodh,w,c
 39325  0075F4  6EDA               	movwf	fsr2h,c
 39326  0075F6  0E01               	movlw	1
 39327  0075F8  6EDF               	movwf	indf2,c
 39328                           
 39329                           ; BSR set to: 0
 39330                           ;sw_timer.c: 230: (INTCONbits.GIE = 1);
 39331  0075FA  8EF2               	bsf	intcon,7,c	;volatile
 39332                           
 39333                           ; BSR set to: 0
 39334  0075FC  0012               	return		;funcret
 39335  0075FE                     __end_of_SwTimerStart:
 39336                           	opt stack 0
 39337                           tosu	equ	0xFFF
 39338                           tosh	equ	0xFFE
 39339                           tosl	equ	0xFFD
 39340                           pclath	equ	0xFFA
 39341                           tblptru	equ	0xFF8
 39342                           tblptrh	equ	0xFF7
 39343                           tblptrl	equ	0xFF6
 39344                           tablat	equ	0xFF5
 39345                           prodh	equ	0xFF4
 39346                           prodl	equ	0xFF3
 39347                           intcon	equ	0xFF2
 39348                           intcon2	equ	0xFF1
 39349                           intcon3	equ	0xFF0
 39350                           indf0	equ	0xFEF
 39351                           postinc0	equ	0xFEE
 39352                           plusw0	equ	0xFEB
 39353                           fsr0h	equ	0xFEA
 39354                           fsr0l	equ	0xFE9
 39355                           wreg	equ	0xFE8
 39356                           postinc1	equ	0xFE6
 39357                           postdec1	equ	0xFE5
 39358                           plusw1	equ	0xFE3
 39359                           fsr1h	equ	0xFE2
 39360                           fsr1l	equ	0xFE1
 39361                           indf2	equ	0xFDF
 39362                           postinc2	equ	0xFDE
 39363                           postdec2	equ	0xFDD
 39364                           plusw2	equ	0xFDB
 39365                           fsr2h	equ	0xFDA
 39366                           fsr2l	equ	0xFD9
 39367                           status	equ	0xFD8
 39368                           
 39369 ;; *************** function _TMR_OverrideRemaining *****************
 39370 ;; Defined at:
 39371 ;;		line 65 in file "mcc_generated_files/LoRaWAN/sw_timer.c"
 39372 ;; Parameters:    Size  Location     Type
 39373 ;;  ticksRemaini    4   10[BANK0 ] unsigned long 
 39374 ;; Auto vars:     Size  Location     Type
 39375 ;;  oldReloadVal    2   18[BANK0 ] unsigned int 
 39376 ;;  tmrVal          2   16[BANK0 ] unsigned int 
 39377 ;; Return value:  Size  Location     Type
 39378 ;;                  1    wreg      void 
 39379 ;; Registers used:
 39380 ;;		wreg, status,2, status,0, cstack
 39381 ;; Tracked objects:
 39382 ;;		On entry : 0/0
 39383 ;;		On exit  : 0/0
 39384 ;;		Unchanged: 0/0
 39385 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 39386 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 39387 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 39388 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 39389 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 39390 ;;Total ram usage:       10 bytes
 39391 ;; Hardware stack levels used:    1
 39392 ;; Hardware stack levels required when called:    9
 39393 ;; This function calls:
 39394 ;;		_TMR_SwapTimer
 39395 ;; This function is called by:
 39396 ;;		_SwTimerStart
 39397 ;; This function uses a non-reentrant model
 39398 ;;
 39399                           
 39400                           	psect	text189
 39401  0074CC                     __ptext189:
 39402                           	opt stack 0
 39403  0074CC                     _TMR_OverrideRemaining:
 39404                           	opt stack 18
 39405                           
 39406                           ;sw_timer.c: 67: uint16_t tmrVal;
 39407                           ;sw_timer.c: 68: uint16_t oldReloadVal;
 39408                           ;sw_timer.c: 71: if (ticksToScheduledInterrupt > 10)
 39409                           
 39410                           ; BSR set to: 0
 39411                           ;incstack = 0
 39412  0074CC  5057               	movf	_ticksToScheduledInterrupt+3,w,c	;volatile
 39413  0074CE  1056               	iorwf	_ticksToScheduledInterrupt+2,w,c	;volatile
 39414  0074D0  1055               	iorwf	_ticksToScheduledInterrupt+1,w,c	;volatile
 39415  0074D2  E104               	bnz	u8270
 39416  0074D4  0E0B               	movlw	11
 39417  0074D6  5C54               	subwf	_ticksToScheduledInterrupt,w,c	;volatile
 39418  0074D8  A0D8               	btfss	status,0,c
 39419  0074DA  0012               	return	
 39420  0074DC                     u8270:
 39421                           
 39422                           ;sw_timer.c: 72: {
 39423                           ;sw_timer.c: 73: if (ticksRemaining < ticksToScheduledInterrupt)
 39424  0074DC  5054               	movf	_ticksToScheduledInterrupt,w,c	;volatile
 39425  0074DE  0100               	movlb	0	; () banked
 39426  0074E0  5D6A               	subwf	TMR_OverrideRemaining@ticksRemaining& (0+255),w,b
 39427  0074E2  5055               	movf	_ticksToScheduledInterrupt+1,w,c	;volatile
 39428  0074E4  596B               	subwfb	(TMR_OverrideRemaining@ticksRemaining+1)& (0+255),w,b
 39429  0074E6  5056               	movf	_ticksToScheduledInterrupt+2,w,c	;volatile
 39430  0074E8  596C               	subwfb	(TMR_OverrideRemaining@ticksRemaining+2)& (0+255),w,b
 39431  0074EA  5057               	movf	_ticksToScheduledInterrupt+3,w,c	;volatile
 39432  0074EC  596D               	subwfb	(TMR_OverrideRemaining@ticksRemaining+3)& (0+255),w,b
 39433  0074EE  B0D8               	btfsc	status,0,c
 39434  0074F0  0012               	return	
 39435                           
 39436                           ; BSR set to: 0
 39437                           ;sw_timer.c: 74: {
 39438                           ;sw_timer.c: 75: ticksToScheduledInterrupt = ticksRemaining;
 39439  0074F2  C06A  F054         	movff	TMR_OverrideRemaining@ticksRemaining,_ticksToScheduledInterrupt	;volatile
 39440  0074F6  C06B  F055         	movff	TMR_OverrideRemaining@ticksRemaining+1,_ticksToScheduledInterrupt+1	;volatile
 39441  0074FA  C06C  F056         	movff	TMR_OverrideRemaining@ticksRemaining+2,_ticksToScheduledInterrupt+2	;volatile
 39442  0074FE  C06D  F057         	movff	TMR_OverrideRemaining@ticksRemaining+3,_ticksToScheduledInterrupt+3	;volatile
 39443                           
 39444                           ;sw_timer.c: 76: oldReloadVal = reloadVal;
 39445  007502  C04C  F072         	movff	_reloadVal,TMR_OverrideRemaining@oldReloadVal	;volatile
 39446  007506  C04D  F073         	movff	_reloadVal+1,TMR_OverrideRemaining@oldReloadVal+1	;volatile
 39447                           
 39448                           ;sw_timer.c: 78: reloadVal = ((uint32_t)0x10000) - ticksRemaining;
 39449  00750A  C06A  F06E         	movff	TMR_OverrideRemaining@ticksRemaining,??_TMR_OverrideRemaining
 39450  00750E  C06B  F06F         	movff	TMR_OverrideRemaining@ticksRemaining+1,??_TMR_OverrideRemaining+1
 39451  007512  1F6E               	comf	??_TMR_OverrideRemaining& (0+255),f,b
 39452  007514  1F6F               	comf	(??_TMR_OverrideRemaining+1)& (0+255),f,b
 39453  007516  4B6E               	infsnz	??_TMR_OverrideRemaining& (0+255),f,b
 39454  007518  2B6F               	incf	(??_TMR_OverrideRemaining+1)& (0+255),f,b
 39455  00751A  C06E  F04C         	movff	??_TMR_OverrideRemaining,_reloadVal	;volatile
 39456  00751E  C06F  F04D         	movff	??_TMR_OverrideRemaining+1,_reloadVal+1	;volatile
 39457                           
 39458                           ; BSR set to: 0
 39459                           ;sw_timer.c: 79: tmrVal = TMR_SwapTimer(reloadVal);
 39460  007522  C04C  F068         	movff	_reloadVal,TMR_SwapTimer@timerVal	;volatile
 39461  007526  C04D  F069         	movff	_reloadVal+1,TMR_SwapTimer@timerVal+1	;volatile
 39462  00752A  ECC6  F043         	call	_TMR_SwapTimer	;wreg free
 39463  00752E  C068  F070         	movff	?_TMR_SwapTimer,TMR_OverrideRemaining@tmrVal
 39464  007532  C069  F071         	movff	?_TMR_SwapTimer+1,TMR_OverrideRemaining@tmrVal+1
 39465                           
 39466                           ;sw_timer.c: 80: ticksAdded += tmrVal - oldReloadVal;
 39467  007536  C072  F06E         	movff	TMR_OverrideRemaining@oldReloadVal,??_TMR_OverrideRemaining
 39468  00753A  C073  F06F         	movff	TMR_OverrideRemaining@oldReloadVal+1,??_TMR_OverrideRemaining+1
 39469  00753E  0100               	movlb	0	; () banked
 39470  007540  1F6E               	comf	??_TMR_OverrideRemaining& (0+255),f,b
 39471  007542  1F6F               	comf	(??_TMR_OverrideRemaining+1)& (0+255),f,b
 39472  007544  4B6E               	infsnz	??_TMR_OverrideRemaining& (0+255),f,b
 39473  007546  2B6F               	incf	(??_TMR_OverrideRemaining+1)& (0+255),f,b
 39474  007548  5170               	movf	TMR_OverrideRemaining@tmrVal& (0+255),w,b
 39475  00754A  276E               	addwf	??_TMR_OverrideRemaining& (0+255),f,b
 39476  00754C  5171               	movf	(TMR_OverrideRemaining@tmrVal+1)& (0+255),w,b
 39477  00754E  236F               	addwfc	(??_TMR_OverrideRemaining+1)& (0+255),f,b
 39478  007550  516E               	movf	??_TMR_OverrideRemaining& (0+255),w,b
 39479  007552  0101               	movlb	1	; () banked
 39480  007554  2708               	addwf	_ticksAdded& (0+255),f,b	;volatile
 39481  007556  0100               	movlb	0	; () banked
 39482  007558  516F               	movf	(??_TMR_OverrideRemaining+1)& (0+255),w,b
 39483  00755A  0101               	movlb	1	; () banked
 39484  00755C  2309               	addwfc	(_ticksAdded+1)& (0+255),f,b	;volatile
 39485  00755E  0E00               	movlw	0
 39486  007560  230A               	addwfc	(_ticksAdded+2)& (0+255),f,b	;volatile
 39487  007562  0E00               	movlw	0
 39488  007564  230B               	addwfc	(_ticksAdded+3)& (0+255),f,b	;volatile
 39489                           
 39490                           ; BSR set to: 1
 39491  007566  0012               	return	
 39492  007568                     __end_of_TMR_OverrideRemaining:
 39493                           	opt stack 0
 39494                           tosu	equ	0xFFF
 39495                           tosh	equ	0xFFE
 39496                           tosl	equ	0xFFD
 39497                           pclath	equ	0xFFA
 39498                           tblptru	equ	0xFF8
 39499                           tblptrh	equ	0xFF7
 39500                           tblptrl	equ	0xFF6
 39501                           tablat	equ	0xFF5
 39502                           prodh	equ	0xFF4
 39503                           prodl	equ	0xFF3
 39504                           intcon	equ	0xFF2
 39505                           intcon2	equ	0xFF1
 39506                           intcon3	equ	0xFF0
 39507                           indf0	equ	0xFEF
 39508                           postinc0	equ	0xFEE
 39509                           plusw0	equ	0xFEB
 39510                           fsr0h	equ	0xFEA
 39511                           fsr0l	equ	0xFE9
 39512                           wreg	equ	0xFE8
 39513                           postinc1	equ	0xFE6
 39514                           postdec1	equ	0xFE5
 39515                           plusw1	equ	0xFE3
 39516                           fsr1h	equ	0xFE2
 39517                           fsr1l	equ	0xFE1
 39518                           indf2	equ	0xFDF
 39519                           postinc2	equ	0xFDE
 39520                           postdec2	equ	0xFDD
 39521                           plusw2	equ	0xFDB
 39522                           fsr2h	equ	0xFDA
 39523                           fsr2l	equ	0xFD9
 39524                           status	equ	0xFD8
 39525                           
 39526 ;; *************** function _TMR_SwapTimer *****************
 39527 ;; Defined at:
 39528 ;;		line 112 in file "mcc_generated_files/LoRaWAN/sw_timer.c"
 39529 ;; Parameters:    Size  Location     Type
 39530 ;;  timerVal        2    8[BANK0 ] unsigned int 
 39531 ;; Auto vars:     Size  Location     Type
 39532 ;;		None
 39533 ;; Return value:  Size  Location     Type
 39534 ;;                  2    8[BANK0 ] unsigned int 
 39535 ;; Registers used:
 39536 ;;		wreg, status,2, status,0, cstack
 39537 ;; Tracked objects:
 39538 ;;		On entry : 0/0
 39539 ;;		On exit  : 0/0
 39540 ;;		Unchanged: 0/0
 39541 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 39542 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 39543 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 39544 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 39545 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 39546 ;;Total ram usage:        2 bytes
 39547 ;; Hardware stack levels used:    1
 39548 ;; Hardware stack levels required when called:    8
 39549 ;; This function calls:
 39550 ;;		_TMR1_ReadTimer
 39551 ;;		_TMR1_WriteTimer
 39552 ;; This function is called by:
 39553 ;;		_TMR_OverrideRemaining
 39554 ;; This function uses a non-reentrant model
 39555 ;;
 39556                           
 39557                           	psect	text190
 39558  00878C                     __ptext190:
 39559                           	opt stack 0
 39560  00878C                     _TMR_SwapTimer:
 39561                           	opt stack 18
 39562                           
 39563                           ;sw_timer.c: 114: static uint16_t oldVal;
 39564                           ;sw_timer.c: 115: static uint16_t retVal;
 39565                           ;sw_timer.c: 117: oldVal = TMR1_ReadTimer();
 39566                           
 39567                           ;incstack = 0
 39568  00878C  EC8D  F048         	call	_TMR1_ReadTimer	;wreg free
 39569  008790  C060  F146         	movff	?_TMR1_ReadTimer,TMR_SwapTimer@oldVal
 39570  008794  C061  F147         	movff	?_TMR1_ReadTimer+1,TMR_SwapTimer@oldVal+1
 39571  008798                     
 39572                           ;sw_timer.c: 123: ;
 39573  008798  EC8D  F048         	call	_TMR1_ReadTimer	;wreg free
 39574  00879C  0101               	movlb	1	; () banked
 39575  00879E  5146               	movf	TMR_SwapTimer@oldVal& (0+255),w,b
 39576  0087A0  0100               	movlb	0	; () banked
 39577  0087A2  1960               	xorwf	?_TMR1_ReadTimer& (0+255),w,b
 39578  0087A4  E106               	bnz	l8871
 39579  0087A6  0101               	movlb	1	; () banked
 39580  0087A8  5147               	movf	(TMR_SwapTimer@oldVal+1)& (0+255),w,b
 39581  0087AA  0100               	movlb	0	; () banked
 39582  0087AC  1961               	xorwf	(?_TMR1_ReadTimer+1)& (0+255),w,b
 39583  0087AE  B4D8               	btfsc	status,2,c
 39584  0087B0  D7F3               	goto	l1535
 39585  0087B2                     l8871:
 39586                           
 39587                           ; BSR set to: 0
 39588                           ;sw_timer.c: 125: TMR1_WriteTimer(timerVal);
 39589  0087B2  C068  F060         	movff	TMR_SwapTimer@timerVal,TMR1_WriteTimer@timerVal
 39590  0087B6  C069  F061         	movff	TMR_SwapTimer@timerVal+1,TMR1_WriteTimer@timerVal+1
 39591  0087BA  ECCE  F048         	call	_TMR1_WriteTimer	;wreg free
 39592                           
 39593                           ;sw_timer.c: 128: oldVal++;
 39594  0087BE  0101               	movlb	1	; () banked
 39595  0087C0  4B46               	infsnz	TMR_SwapTimer@oldVal& (0+255),f,b
 39596  0087C2  2B47               	incf	(TMR_SwapTimer@oldVal+1)& (0+255),f,b
 39597                           
 39598                           ; BSR set to: 1
 39599                           ;sw_timer.c: 130: retVal = oldVal;
 39600  0087C4  C146  F144         	movff	TMR_SwapTimer@oldVal,TMR_SwapTimer@retVal
 39601  0087C8  C147  F145         	movff	TMR_SwapTimer@oldVal+1,TMR_SwapTimer@retVal+1
 39602                           
 39603                           ; BSR set to: 1
 39604                           ;sw_timer.c: 132: return retVal;
 39605  0087CC  C144  F068         	movff	TMR_SwapTimer@retVal,?_TMR_SwapTimer
 39606  0087D0  C145  F069         	movff	TMR_SwapTimer@retVal+1,?_TMR_SwapTimer+1
 39607  0087D4  0012               	return	
 39608  0087D6                     __end_of_TMR_SwapTimer:
 39609                           	opt stack 0
 39610                           tosu	equ	0xFFF
 39611                           tosh	equ	0xFFE
 39612                           tosl	equ	0xFFD
 39613                           pclath	equ	0xFFA
 39614                           tblptru	equ	0xFF8
 39615                           tblptrh	equ	0xFF7
 39616                           tblptrl	equ	0xFF6
 39617                           tablat	equ	0xFF5
 39618                           prodh	equ	0xFF4
 39619                           prodl	equ	0xFF3
 39620                           intcon	equ	0xFF2
 39621                           intcon2	equ	0xFF1
 39622                           intcon3	equ	0xFF0
 39623                           indf0	equ	0xFEF
 39624                           postinc0	equ	0xFEE
 39625                           plusw0	equ	0xFEB
 39626                           fsr0h	equ	0xFEA
 39627                           fsr0l	equ	0xFE9
 39628                           wreg	equ	0xFE8
 39629                           postinc1	equ	0xFE6
 39630                           postdec1	equ	0xFE5
 39631                           plusw1	equ	0xFE3
 39632                           fsr1h	equ	0xFE2
 39633                           fsr1l	equ	0xFE1
 39634                           indf2	equ	0xFDF
 39635                           postinc2	equ	0xFDE
 39636                           postdec2	equ	0xFDD
 39637                           plusw2	equ	0xFDB
 39638                           fsr2h	equ	0xFDA
 39639                           fsr2l	equ	0xFD9
 39640                           status	equ	0xFD8
 39641                           
 39642 ;; *************** function _TMR1_WriteTimer *****************
 39643 ;; Defined at:
 39644 ;;		line 121 in file "mcc_generated_files/tmr1.c"
 39645 ;; Parameters:    Size  Location     Type
 39646 ;;  timerVal        2    0[BANK0 ] unsigned int 
 39647 ;; Auto vars:     Size  Location     Type
 39648 ;;		None
 39649 ;; Return value:  Size  Location     Type
 39650 ;;                  1    wreg      void 
 39651 ;; Registers used:
 39652 ;;		wreg, status,2
 39653 ;; Tracked objects:
 39654 ;;		On entry : 0/0
 39655 ;;		On exit  : 0/0
 39656 ;;		Unchanged: 0/0
 39657 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 39658 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 39659 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 39660 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 39661 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 39662 ;;Total ram usage:        2 bytes
 39663 ;; Hardware stack levels used:    1
 39664 ;; Hardware stack levels required when called:    7
 39665 ;; This function calls:
 39666 ;;		Nothing
 39667 ;; This function is called by:
 39668 ;;		_TMR_SwapTimer
 39669 ;;		_TMR1_Reload
 39670 ;; This function uses a non-reentrant model
 39671 ;;
 39672                           
 39673                           	psect	text191
 39674  00919C                     __ptext191:
 39675                           	opt stack 0
 39676  00919C                     _TMR1_WriteTimer:
 39677                           	opt stack 18
 39678                           
 39679                           ;tmr1.c: 123: if (T1CONbits.T1SYNC == 1)
 39680                           
 39681                           ; BSR set to: 1
 39682                           ;incstack = 0
 39683  00919C  A4CD               	btfss	4045,2,c	;volatile
 39684  00919E  D008               	goto	l2627
 39685                           
 39686                           ;tmr1.c: 124: {
 39687                           ;tmr1.c: 126: T1CONbits.TMR1ON = 0;
 39688  0091A0  90CD               	bcf	4045,0,c	;volatile
 39689                           
 39690                           ;tmr1.c: 129: TMR1H = (timerVal >> 8);
 39691  0091A2  0100               	movlb	0	; () banked
 39692  0091A4  5161               	movf	(TMR1_WriteTimer@timerVal+1)& (0+255),w,b
 39693  0091A6  6ECF               	movwf	4047,c	;volatile
 39694                           
 39695                           ; BSR set to: 0
 39696                           ;tmr1.c: 130: TMR1L = (uint8_t) timerVal;
 39697  0091A8  C060  FFCE         	movff	TMR1_WriteTimer@timerVal,4046	;volatile
 39698                           
 39699                           ; BSR set to: 0
 39700                           ;tmr1.c: 133: T1CONbits.TMR1ON =1;
 39701  0091AC  80CD               	bsf	4045,0,c	;volatile
 39702                           
 39703                           ;tmr1.c: 134: }
 39704  0091AE  0012               	return	
 39705  0091B0                     l2627:
 39706                           
 39707                           ;tmr1.c: 135: else
 39708                           ;tmr1.c: 136: {
 39709                           ;tmr1.c: 138: TMR1H = (timerVal >> 8);
 39710                           
 39711                           ; BSR set to: 0
 39712  0091B0  0100               	movlb	0	; () banked
 39713  0091B2  5161               	movf	(TMR1_WriteTimer@timerVal+1)& (0+255),w,b
 39714  0091B4  6ECF               	movwf	4047,c	;volatile
 39715                           
 39716                           ; BSR set to: 0
 39717                           ;tmr1.c: 139: TMR1L = (uint8_t) timerVal;
 39718  0091B6  C060  FFCE         	movff	TMR1_WriteTimer@timerVal,4046	;volatile
 39719  0091BA  0012               	return	
 39720  0091BC                     __end_of_TMR1_WriteTimer:
 39721                           	opt stack 0
 39722                           tosu	equ	0xFFF
 39723                           tosh	equ	0xFFE
 39724                           tosl	equ	0xFFD
 39725                           pclath	equ	0xFFA
 39726                           tblptru	equ	0xFF8
 39727                           tblptrh	equ	0xFF7
 39728                           tblptrl	equ	0xFF6
 39729                           tablat	equ	0xFF5
 39730                           prodh	equ	0xFF4
 39731                           prodl	equ	0xFF3
 39732                           intcon	equ	0xFF2
 39733                           intcon2	equ	0xFF1
 39734                           intcon3	equ	0xFF0
 39735                           indf0	equ	0xFEF
 39736                           postinc0	equ	0xFEE
 39737                           plusw0	equ	0xFEB
 39738                           fsr0h	equ	0xFEA
 39739                           fsr0l	equ	0xFE9
 39740                           wreg	equ	0xFE8
 39741                           postinc1	equ	0xFE6
 39742                           postdec1	equ	0xFE5
 39743                           plusw1	equ	0xFE3
 39744                           fsr1h	equ	0xFE2
 39745                           fsr1l	equ	0xFE1
 39746                           indf2	equ	0xFDF
 39747                           postinc2	equ	0xFDE
 39748                           postdec2	equ	0xFDD
 39749                           plusw2	equ	0xFDB
 39750                           fsr2h	equ	0xFDA
 39751                           fsr2l	equ	0xFD9
 39752                           status	equ	0xFD8
 39753                           
 39754 ;; *************** function _SwTimersInterrupt *****************
 39755 ;; Defined at:
 39756 ;;		line 287 in file "mcc_generated_files/LoRaWAN/sw_timer.c"
 39757 ;; Parameters:    Size  Location     Type
 39758 ;;		None
 39759 ;; Auto vars:     Size  Location     Type
 39760 ;;  ticksToNextT    4   44[BANK0 ] unsigned long 
 39761 ;;  timeElapsed     4   40[BANK0 ] unsigned long 
 39762 ;;  i               1   48[BANK0 ] unsigned char 
 39763 ;; Return value:  Size  Location     Type
 39764 ;;                  4   32[BANK0 ] unsigned long 
 39765 ;; Registers used:
 39766 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 39767 ;; Tracked objects:
 39768 ;;		On entry : 0/0
 39769 ;;		On exit  : 0/0
 39770 ;;		Unchanged: 0/0
 39771 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 39772 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 39773 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 39774 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 39775 ;;      Totals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 39776 ;;Total ram usage:       17 bytes
 39777 ;; Hardware stack levels used:    1
 39778 ;; Hardware stack levels required when called:    9
 39779 ;; This function calls:
 39780 ;;		_TMR_GetDeltaTime
 39781 ;; This function is called by:
 39782 ;;		_SwTimerReadValue
 39783 ;;		_SwTimerStart
 39784 ;;		_SwTimersCanSleep
 39785 ;; This function uses a non-reentrant model
 39786 ;;
 39787                           
 39788                           	psect	text192
 39789  0061AE                     __ptext192:
 39790                           	opt stack 0
 39791  0061AE                     _SwTimersInterrupt:
 39792                           	opt stack 18
 39793                           
 39794                           ;sw_timer.c: 289: uint8_t i;
 39795                           ;sw_timer.c: 290: uint32_t timeElapsed;
 39796                           ;sw_timer.c: 291: uint32_t ticksToNextTimerEvent = 0xFFFFFFFF;
 39797                           
 39798                           ; BSR set to: 0
 39799                           ;incstack = 0
 39800  0061AE  0100               	movlb	0	; () banked
 39801  0061B0  698C               	setf	SwTimersInterrupt@ticksToNextTimerEvent& (0+255),b
 39802  0061B2  698D               	setf	(SwTimersInterrupt@ticksToNextTimerEvent+1)& (0+255),b
 39803  0061B4  698E               	setf	(SwTimersInterrupt@ticksToNextTimerEvent+2)& (0+255),b
 39804  0061B6  698F               	setf	(SwTimersInterrupt@ticksToNextTimerEvent+3)& (0+255),b
 39805                           
 39806                           ; BSR set to: 0
 39807                           ;sw_timer.c: 295: timeElapsed = TMR_GetDeltaTime();
 39808  0061B8  ECF8  F025         	call	_TMR_GetDeltaTime	;wreg free
 39809  0061BC  C068  F088         	movff	?_TMR_GetDeltaTime,SwTimersInterrupt@timeElapsed
 39810  0061C0  C069  F089         	movff	?_TMR_GetDeltaTime+1,SwTimersInterrupt@timeElapsed+1
 39811  0061C4  C06A  F08A         	movff	?_TMR_GetDeltaTime+2,SwTimersInterrupt@timeElapsed+2
 39812  0061C8  C06B  F08B         	movff	?_TMR_GetDeltaTime+3,SwTimersInterrupt@timeElapsed+3
 39813                           
 39814                           ;sw_timer.c: 297: for (i = 0; i < allocatedTimers; i++)
 39815  0061CC  0E00               	movlw	0
 39816  0061CE  0100               	movlb	0	; () banked
 39817  0061D0  6F90               	movwf	SwTimersInterrupt@i& (0+255),b
 39818  0061D2  D061               	goto	l1592
 39819  0061D4                     
 39820                           ; BSR set to: 0
 39821                           ;sw_timer.c: 298: {
 39822                           ;sw_timer.c: 301: if (swTimers[i].running == 1)
 39823                           
 39824                           ; BSR set to: 0
 39825  0061D4  5190               	movf	SwTimersInterrupt@i& (0+255),w,b
 39826  0061D6  0D08               	mullw	8
 39827  0061D8  0E04               	movlw	4
 39828  0061DA  26F3               	addwf	prodl,f,c
 39829  0061DC  0E00               	movlw	0
 39830  0061DE  22F4               	addwfc	prodh,f,c
 39831  0061E0  0E00               	movlw	low _swTimers
 39832  0061E2  24F3               	addwf	prodl,w,c
 39833  0061E4  6ED9               	movwf	fsr2l,c
 39834  0061E6  0E03               	movlw	high _swTimers
 39835  0061E8  20F4               	addwfc	prodh,w,c
 39836  0061EA  6EDA               	movwf	fsr2h,c
 39837  0061EC  04DE               	decf	postinc2,w,c
 39838  0061EE  A4D8               	btfss	status,2,c
 39839  0061F0  D051               	goto	l1597
 39840                           
 39841                           ; BSR set to: 0
 39842                           ;sw_timer.c: 302: {
 39843                           ;sw_timer.c: 303: if (swTimers[i].ticksRemaining <= timeElapsed)
 39844  0061F2  5190               	movf	SwTimersInterrupt@i& (0+255),w,b
 39845  0061F4  0D08               	mullw	8
 39846  0061F6  0E00               	movlw	low _swTimers
 39847  0061F8  24F3               	addwf	prodl,w,c
 39848  0061FA  6ED9               	movwf	fsr2l,c
 39849  0061FC  0E03               	movlw	high _swTimers
 39850  0061FE  20F4               	addwfc	prodh,w,c
 39851  006200  6EDA               	movwf	fsr2h,c
 39852  006202  50DE               	movf	postinc2,w,c
 39853  006204  5D88               	subwf	SwTimersInterrupt@timeElapsed& (0+255),w,b
 39854  006206  50DE               	movf	postinc2,w,c
 39855  006208  5989               	subwfb	(SwTimersInterrupt@timeElapsed+1)& (0+255),w,b
 39856  00620A  50DE               	movf	postinc2,w,c
 39857  00620C  598A               	subwfb	(SwTimersInterrupt@timeElapsed+2)& (0+255),w,b
 39858  00620E  50DE               	movf	postinc2,w,c
 39859  006210  598B               	subwfb	(SwTimersInterrupt@timeElapsed+3)& (0+255),w,b
 39860  006212  A0D8               	btfss	status,0,c
 39861  006214  D00D               	goto	l1595
 39862                           
 39863                           ; BSR set to: 0
 39864                           ;sw_timer.c: 304: {
 39865                           ;sw_timer.c: 305: swTimers[i].ticksRemaining = 0;
 39866  006216  5190               	movf	SwTimersInterrupt@i& (0+255),w,b
 39867  006218  0D08               	mullw	8
 39868  00621A  0E00               	movlw	low _swTimers
 39869  00621C  24F3               	addwf	prodl,w,c
 39870  00621E  6ED9               	movwf	fsr2l,c
 39871  006220  0E03               	movlw	high _swTimers
 39872  006222  20F4               	addwfc	prodh,w,c
 39873  006224  6EDA               	movwf	fsr2h,c
 39874  006226  6ADE               	clrf	postinc2,c
 39875  006228  6ADE               	clrf	postinc2,c
 39876  00622A  6ADE               	clrf	postinc2,c
 39877  00622C  6ADD               	clrf	postdec2,c
 39878                           
 39879                           ;sw_timer.c: 306: }
 39880  00622E  D032               	goto	l1597
 39881  006230                     l1595:
 39882                           
 39883                           ; BSR set to: 0
 39884                           ;sw_timer.c: 307: else
 39885                           ;sw_timer.c: 308: {
 39886                           ;sw_timer.c: 309: swTimers[i].ticksRemaining -= timeElapsed;
 39887                           
 39888                           ; BSR set to: 0
 39889  006230  5190               	movf	SwTimersInterrupt@i& (0+255),w,b
 39890  006232  0D08               	mullw	8
 39891  006234  0E00               	movlw	low _swTimers
 39892  006236  24F3               	addwf	prodl,w,c
 39893  006238  6ED9               	movwf	fsr2l,c
 39894  00623A  0E03               	movlw	high _swTimers
 39895  00623C  20F4               	addwfc	prodh,w,c
 39896  00623E  6EDA               	movwf	fsr2h,c
 39897  006240  5188               	movf	SwTimersInterrupt@timeElapsed& (0+255),w,b
 39898  006242  5EDE               	subwf	postinc2,f,c
 39899  006244  5189               	movf	(SwTimersInterrupt@timeElapsed+1)& (0+255),w,b
 39900  006246  5ADE               	subwfb	postinc2,f,c
 39901  006248  518A               	movf	(SwTimersInterrupt@timeElapsed+2)& (0+255),w,b
 39902  00624A  5ADE               	subwfb	postinc2,f,c
 39903  00624C  518B               	movf	(SwTimersInterrupt@timeElapsed+3)& (0+255),w,b
 39904  00624E  5ADE               	subwfb	postinc2,f,c
 39905                           
 39906                           ;sw_timer.c: 312: if (swTimers[i].ticksRemaining < ticksToNextTimerEvent)
 39907  006250  5190               	movf	SwTimersInterrupt@i& (0+255),w,b
 39908  006252  0D08               	mullw	8
 39909  006254  0E00               	movlw	low _swTimers
 39910  006256  24F3               	addwf	prodl,w,c
 39911  006258  6ED9               	movwf	fsr2l,c
 39912  00625A  0E03               	movlw	high _swTimers
 39913  00625C  20F4               	addwfc	prodh,w,c
 39914  00625E  6EDA               	movwf	fsr2h,c
 39915  006260  518C               	movf	SwTimersInterrupt@ticksToNextTimerEvent& (0+255),w,b
 39916  006262  5CDE               	subwf	postinc2,w,c
 39917  006264  518D               	movf	(SwTimersInterrupt@ticksToNextTimerEvent+1)& (0+255),w,b
 39918  006266  58DE               	subwfb	postinc2,w,c
 39919  006268  518E               	movf	(SwTimersInterrupt@ticksToNextTimerEvent+2)& (0+255),w,b
 39920  00626A  58DE               	subwfb	postinc2,w,c
 39921  00626C  518F               	movf	(SwTimersInterrupt@ticksToNextTimerEvent+3)& (0+255),w,b
 39922  00626E  58DE               	subwfb	postinc2,w,c
 39923  006270  B0D8               	btfsc	status,0,c
 39924  006272  D010               	goto	l1597
 39925                           
 39926                           ; BSR set to: 0
 39927                           ;sw_timer.c: 313: {
 39928                           ;sw_timer.c: 314: ticksToNextTimerEvent = swTimers[i].ticksRemaining;
 39929  006274  5190               	movf	SwTimersInterrupt@i& (0+255),w,b
 39930  006276  0D08               	mullw	8
 39931  006278  0E00               	movlw	low _swTimers
 39932  00627A  24F3               	addwf	prodl,w,c
 39933  00627C  6ED9               	movwf	fsr2l,c
 39934  00627E  0E03               	movlw	high _swTimers
 39935  006280  20F4               	addwfc	prodh,w,c
 39936  006282  6EDA               	movwf	fsr2h,c
 39937  006284  CFDE F08C          	movff	postinc2,SwTimersInterrupt@ticksToNextTimerEvent
 39938  006288  CFDE F08D          	movff	postinc2,SwTimersInterrupt@ticksToNextTimerEvent+1
 39939  00628C  CFDE F08E          	movff	postinc2,SwTimersInterrupt@ticksToNextTimerEvent+2
 39940  006290  CFDE F08F          	movff	postinc2,SwTimersInterrupt@ticksToNextTimerEvent+3
 39941  006294                     l1597:
 39942                           
 39943                           ; BSR set to: 0
 39944                           
 39945                           ; BSR set to: 0
 39946                           
 39947                           ; BSR set to: 0
 39948                           
 39949                           ; BSR set to: 0
 39950  006294  2B90               	incf	SwTimersInterrupt@i& (0+255),f,b
 39951  006296                     l1592:
 39952                           
 39953                           ; BSR set to: 0
 39954                           
 39955                           ; BSR set to: 0
 39956  006296  0101               	movlb	1	; () banked
 39957  006298  5152               	movf	_allocatedTimers& (0+255),w,b	;volatile
 39958  00629A  0100               	movlb	0	; () banked
 39959  00629C  5D90               	subwf	SwTimersInterrupt@i& (0+255),w,b
 39960  00629E  A0D8               	btfss	status,0,c
 39961  0062A0  D799               	goto	l1593
 39962                           
 39963                           ; BSR set to: 0
 39964                           ;sw_timer.c: 315: }
 39965                           ;sw_timer.c: 316: }
 39966                           ;sw_timer.c: 317: }
 39967                           ;sw_timer.c: 318: }
 39968                           ;sw_timer.c: 320: return ticksToNextTimerEvent;
 39969  0062A2  C08C  F080         	movff	SwTimersInterrupt@ticksToNextTimerEvent,?_SwTimersInterrupt
 39970  0062A6  C08D  F081         	movff	SwTimersInterrupt@ticksToNextTimerEvent+1,?_SwTimersInterrupt+1
 39971  0062AA  C08E  F082         	movff	SwTimersInterrupt@ticksToNextTimerEvent+2,?_SwTimersInterrupt+2
 39972  0062AE  C08F  F083         	movff	SwTimersInterrupt@ticksToNextTimerEvent+3,?_SwTimersInterrupt+3
 39973                           
 39974                           ; BSR set to: 0
 39975  0062B2  0012               	return		;funcret
 39976  0062B4                     __end_of_SwTimersInterrupt:
 39977                           	opt stack 0
 39978                           tosu	equ	0xFFF
 39979                           tosh	equ	0xFFE
 39980                           tosl	equ	0xFFD
 39981                           pclath	equ	0xFFA
 39982                           tblptru	equ	0xFF8
 39983                           tblptrh	equ	0xFF7
 39984                           tblptrl	equ	0xFF6
 39985                           tablat	equ	0xFF5
 39986                           prodh	equ	0xFF4
 39987                           prodl	equ	0xFF3
 39988                           intcon	equ	0xFF2
 39989                           intcon2	equ	0xFF1
 39990                           intcon3	equ	0xFF0
 39991                           indf0	equ	0xFEF
 39992                           postinc0	equ	0xFEE
 39993                           plusw0	equ	0xFEB
 39994                           fsr0h	equ	0xFEA
 39995                           fsr0l	equ	0xFE9
 39996                           wreg	equ	0xFE8
 39997                           postinc1	equ	0xFE6
 39998                           postdec1	equ	0xFE5
 39999                           plusw1	equ	0xFE3
 40000                           fsr1h	equ	0xFE2
 40001                           fsr1l	equ	0xFE1
 40002                           indf2	equ	0xFDF
 40003                           postinc2	equ	0xFDE
 40004                           postdec2	equ	0xFDD
 40005                           plusw2	equ	0xFDB
 40006                           fsr2h	equ	0xFDA
 40007                           fsr2l	equ	0xFD9
 40008                           status	equ	0xFD8
 40009                           
 40010 ;; *************** function _TMR_GetDeltaTime *****************
 40011 ;; Defined at:
 40012 ;;		line 88 in file "mcc_generated_files/LoRaWAN/sw_timer.c"
 40013 ;; Parameters:    Size  Location     Type
 40014 ;;		None
 40015 ;; Auto vars:     Size  Location     Type
 40016 ;;		None
 40017 ;; Return value:  Size  Location     Type
 40018 ;;                  4    8[BANK0 ] unsigned long 
 40019 ;; Registers used:
 40020 ;;		wreg, status,2, status,0, cstack
 40021 ;; Tracked objects:
 40022 ;;		On entry : 0/0
 40023 ;;		On exit  : 0/0
 40024 ;;		Unchanged: 0/0
 40025 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 40026 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 40027 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 40028 ;;      Temps:          0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 40029 ;;      Totals:         0      24       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 40030 ;;Total ram usage:       24 bytes
 40031 ;; Hardware stack levels used:    1
 40032 ;; Hardware stack levels required when called:    8
 40033 ;; This function calls:
 40034 ;;		_TMR1_ReadTimer
 40035 ;; This function is called by:
 40036 ;;		_SwTimersInterrupt
 40037 ;; This function uses a non-reentrant model
 40038 ;;
 40039                           
 40040                           	psect	text193
 40041  004BF0                     __ptext193:
 40042                           	opt stack 0
 40043  004BF0                     _TMR_GetDeltaTime:
 40044                           	opt stack 18
 40045                           
 40046                           ;sw_timer.c: 90: static uint32_t retVal;
 40047                           ;sw_timer.c: 91: static uint16_t tmrVal;
 40048                           ;sw_timer.c: 93: tmrVal = TMR1_ReadTimer();
 40049                           
 40050                           ; BSR set to: 0
 40051                           ;incstack = 0
 40052  004BF0  EC8D  F048         	call	_TMR1_ReadTimer	;wreg free
 40053  004BF4  C060  F148         	movff	?_TMR1_ReadTimer,TMR_GetDeltaTime@tmrVal
 40054  004BF8  C061  F149         	movff	?_TMR1_ReadTimer+1,TMR_GetDeltaTime@tmrVal+1
 40055                           
 40056                           ;sw_timer.c: 95: if (timerOverflow == 1)
 40057  004BFC  0453               	decf	_timerOverflow,w,c	;volatile
 40058  004BFE  A4D8               	btfss	status,2,c
 40059  004C00  D079               	goto	l1525
 40060                           
 40061                           ;sw_timer.c: 96: {
 40062                           ;sw_timer.c: 97: timerOverflow = 0;
 40063  004C02  0E00               	movlw	0
 40064  004C04  6E53               	movwf	_timerOverflow,c	;volatile
 40065                           
 40066                           ;sw_timer.c: 98: retVal = ((uint32_t)0x10000) - reloadVal + tmrVal - ticksAccounted + ti
      +                          cksAdded;
 40067  004C06  C104  F06C         	movff	_ticksAccounted,??_TMR_GetDeltaTime	;volatile
 40068  004C0A  C105  F06D         	movff	_ticksAccounted+1,??_TMR_GetDeltaTime+1	;volatile
 40069  004C0E  C106  F06E         	movff	_ticksAccounted+2,??_TMR_GetDeltaTime+2	;volatile
 40070  004C12  C107  F06F         	movff	_ticksAccounted+3,??_TMR_GetDeltaTime+3	;volatile
 40071  004C16  0100               	movlb	0	; () banked
 40072  004C18  1F6C               	comf	??_TMR_GetDeltaTime& (0+255),f,b
 40073  004C1A  1F6D               	comf	(??_TMR_GetDeltaTime+1)& (0+255),f,b
 40074  004C1C  1F6E               	comf	(??_TMR_GetDeltaTime+2)& (0+255),f,b
 40075  004C1E  1F6F               	comf	(??_TMR_GetDeltaTime+3)& (0+255),f,b
 40076  004C20  2B6C               	incf	??_TMR_GetDeltaTime& (0+255),f,b
 40077  004C22  0E00               	movlw	0
 40078  004C24  236D               	addwfc	(??_TMR_GetDeltaTime+1)& (0+255),f,b
 40079  004C26  236E               	addwfc	(??_TMR_GetDeltaTime+2)& (0+255),f,b
 40080  004C28  236F               	addwfc	(??_TMR_GetDeltaTime+3)& (0+255),f,b
 40081  004C2A  504C               	movf	_reloadVal,w,c	;volatile
 40082  004C2C  6F70               	movwf	(??_TMR_GetDeltaTime+4)& (0+255),b
 40083  004C2E  504D               	movf	_reloadVal+1,w,c	;volatile
 40084  004C30  6F71               	movwf	(??_TMR_GetDeltaTime+5)& (0+255),b
 40085  004C32  6B72               	clrf	(??_TMR_GetDeltaTime+6)& (0+255),b
 40086  004C34  6B73               	clrf	(??_TMR_GetDeltaTime+7)& (0+255),b
 40087  004C36  1F70               	comf	(??_TMR_GetDeltaTime+4)& (0+255),f,b
 40088  004C38  1F71               	comf	(??_TMR_GetDeltaTime+5)& (0+255),f,b
 40089  004C3A  1F72               	comf	(??_TMR_GetDeltaTime+6)& (0+255),f,b
 40090  004C3C  1F73               	comf	(??_TMR_GetDeltaTime+7)& (0+255),f,b
 40091  004C3E  2B70               	incf	(??_TMR_GetDeltaTime+4)& (0+255),f,b
 40092  004C40  0E00               	movlw	0
 40093  004C42  2371               	addwfc	(??_TMR_GetDeltaTime+5)& (0+255),f,b
 40094  004C44  2372               	addwfc	(??_TMR_GetDeltaTime+6)& (0+255),f,b
 40095  004C46  2373               	addwfc	(??_TMR_GetDeltaTime+7)& (0+255),f,b
 40096  004C48  0101               	movlb	1	; () banked
 40097  004C4A  5148               	movf	TMR_GetDeltaTime@tmrVal& (0+255),w,b
 40098  004C4C  0100               	movlb	0	; () banked
 40099  004C4E  2570               	addwf	(??_TMR_GetDeltaTime+4)& (0+255),w,b
 40100  004C50  6F74               	movwf	(??_TMR_GetDeltaTime+8)& (0+255),b
 40101  004C52  0101               	movlb	1	; () banked
 40102  004C54  5149               	movf	(TMR_GetDeltaTime@tmrVal+1)& (0+255),w,b
 40103  004C56  0100               	movlb	0	; () banked
 40104  004C58  2171               	addwfc	(??_TMR_GetDeltaTime+5)& (0+255),w,b
 40105  004C5A  6F75               	movwf	(??_TMR_GetDeltaTime+9)& (0+255),b
 40106  004C5C  0E00               	movlw	0
 40107  004C5E  2172               	addwfc	(??_TMR_GetDeltaTime+6)& (0+255),w,b
 40108  004C60  6F76               	movwf	(??_TMR_GetDeltaTime+10)& (0+255),b
 40109  004C62  0E00               	movlw	0
 40110  004C64  2173               	addwfc	(??_TMR_GetDeltaTime+7)& (0+255),w,b
 40111  004C66  6F77               	movwf	(??_TMR_GetDeltaTime+11)& (0+255),b
 40112  004C68  516C               	movf	??_TMR_GetDeltaTime& (0+255),w,b
 40113  004C6A  2574               	addwf	(??_TMR_GetDeltaTime+8)& (0+255),w,b
 40114  004C6C  6F78               	movwf	(??_TMR_GetDeltaTime+12)& (0+255),b
 40115  004C6E  516D               	movf	(??_TMR_GetDeltaTime+1)& (0+255),w,b
 40116  004C70  2175               	addwfc	(??_TMR_GetDeltaTime+9)& (0+255),w,b
 40117  004C72  6F79               	movwf	(??_TMR_GetDeltaTime+13)& (0+255),b
 40118  004C74  516E               	movf	(??_TMR_GetDeltaTime+2)& (0+255),w,b
 40119  004C76  2176               	addwfc	(??_TMR_GetDeltaTime+10)& (0+255),w,b
 40120  004C78  6F7A               	movwf	(??_TMR_GetDeltaTime+14)& (0+255),b
 40121  004C7A  516F               	movf	(??_TMR_GetDeltaTime+3)& (0+255),w,b
 40122  004C7C  2177               	addwfc	(??_TMR_GetDeltaTime+11)& (0+255),w,b
 40123  004C7E  6F7B               	movwf	(??_TMR_GetDeltaTime+15)& (0+255),b
 40124  004C80  0101               	movlb	1	; () banked
 40125  004C82  5108               	movf	_ticksAdded& (0+255),w,b	;volatile
 40126  004C84  0100               	movlb	0	; () banked
 40127  004C86  2578               	addwf	(??_TMR_GetDeltaTime+12)& (0+255),w,b
 40128  004C88  6F7C               	movwf	(??_TMR_GetDeltaTime+16)& (0+255),b
 40129  004C8A  0101               	movlb	1	; () banked
 40130  004C8C  5109               	movf	(_ticksAdded+1)& (0+255),w,b	;volatile
 40131  004C8E  0100               	movlb	0	; () banked
 40132  004C90  2179               	addwfc	(??_TMR_GetDeltaTime+13)& (0+255),w,b
 40133  004C92  6F7D               	movwf	(??_TMR_GetDeltaTime+17)& (0+255),b
 40134  004C94  0101               	movlb	1	; () banked
 40135  004C96  510A               	movf	(_ticksAdded+2)& (0+255),w,b	;volatile
 40136  004C98  0100               	movlb	0	; () banked
 40137  004C9A  217A               	addwfc	(??_TMR_GetDeltaTime+14)& (0+255),w,b
 40138  004C9C  6F7E               	movwf	(??_TMR_GetDeltaTime+18)& (0+255),b
 40139  004C9E  0101               	movlb	1	; () banked
 40140  004CA0  510B               	movf	(_ticksAdded+3)& (0+255),w,b	;volatile
 40141  004CA2  0100               	movlb	0	; () banked
 40142  004CA4  217B               	addwfc	(??_TMR_GetDeltaTime+15)& (0+255),w,b
 40143  004CA6  6F7F               	movwf	(??_TMR_GetDeltaTime+19)& (0+255),b
 40144  004CA8  0E00               	movlw	0
 40145  004CAA  257C               	addwf	(??_TMR_GetDeltaTime+16)& (0+255),w,b
 40146  004CAC  0101               	movlb	1	; () banked
 40147  004CAE  6F00               	movwf	TMR_GetDeltaTime@retVal& (0+255),b
 40148  004CB0  0E00               	movlw	0
 40149  004CB2  0100               	movlb	0	; () banked
 40150  004CB4  217D               	addwfc	(??_TMR_GetDeltaTime+17)& (0+255),w,b
 40151  004CB6  0101               	movlb	1	; () banked
 40152  004CB8  6F01               	movwf	(TMR_GetDeltaTime@retVal+1)& (0+255),b
 40153  004CBA  0E01               	movlw	1
 40154  004CBC  0100               	movlb	0	; () banked
 40155  004CBE  217E               	addwfc	(??_TMR_GetDeltaTime+18)& (0+255),w,b
 40156  004CC0  0101               	movlb	1	; () banked
 40157  004CC2  6F02               	movwf	(TMR_GetDeltaTime@retVal+2)& (0+255),b
 40158  004CC4  0E00               	movlw	0
 40159  004CC6  0100               	movlb	0	; () banked
 40160  004CC8  217F               	addwfc	(??_TMR_GetDeltaTime+19)& (0+255),w,b
 40161  004CCA  0101               	movlb	1	; () banked
 40162  004CCC  6F03               	movwf	(TMR_GetDeltaTime@retVal+3)& (0+255),b
 40163                           
 40164                           ; BSR set to: 1
 40165                           ;sw_timer.c: 99: ticksAccounted = tmrVal;
 40166  004CCE  C148  F104         	movff	TMR_GetDeltaTime@tmrVal,_ticksAccounted	;volatile
 40167  004CD2  C149  F105         	movff	TMR_GetDeltaTime@tmrVal+1,_ticksAccounted+1	;volatile
 40168  004CD6  6B06               	clrf	(_ticksAccounted+2)& (0+255),b	;volatile
 40169  004CD8  6B07               	clrf	(_ticksAccounted+3)& (0+255),b	;volatile
 40170                           
 40171                           ; BSR set to: 1
 40172                           ;sw_timer.c: 100: ticksAdded = 0;
 40173  004CDA  0E00               	movlw	0
 40174  004CDC  6F08               	movwf	_ticksAdded& (0+255),b	;volatile
 40175  004CDE  0E00               	movlw	0
 40176  004CE0  6F09               	movwf	(_ticksAdded+1)& (0+255),b	;volatile
 40177  004CE2  0E00               	movlw	0
 40178  004CE4  6F0A               	movwf	(_ticksAdded+2)& (0+255),b	;volatile
 40179  004CE6  0E00               	movlw	0
 40180  004CE8  6F0B               	movwf	(_ticksAdded+3)& (0+255),b	;volatile
 40181                           
 40182                           ; BSR set to: 1
 40183                           ;sw_timer.c: 101: reloadVal = 0;
 40184  004CEA  0E00               	movlw	0
 40185  004CEC  6E4D               	movwf	_reloadVal+1,c	;volatile
 40186  004CEE  0E00               	movlw	0
 40187  004CF0  6E4C               	movwf	_reloadVal,c	;volatile
 40188                           
 40189                           ;sw_timer.c: 102: }
 40190  004CF2  D04B               	goto	l1526
 40191  004CF4                     l1525:
 40192                           
 40193                           ;sw_timer.c: 103: else
 40194                           ;sw_timer.c: 104: {
 40195                           ;sw_timer.c: 105: retVal = tmrVal - reloadVal - ticksAccounted + ticksAdded;
 40196                           
 40197                           ; BSR set to: 1
 40198  004CF4  C104  F06C         	movff	_ticksAccounted,??_TMR_GetDeltaTime	;volatile
 40199  004CF8  C105  F06D         	movff	_ticksAccounted+1,??_TMR_GetDeltaTime+1	;volatile
 40200  004CFC  C106  F06E         	movff	_ticksAccounted+2,??_TMR_GetDeltaTime+2	;volatile
 40201  004D00  C107  F06F         	movff	_ticksAccounted+3,??_TMR_GetDeltaTime+3	;volatile
 40202  004D04  0100               	movlb	0	; () banked
 40203  004D06  1F6C               	comf	??_TMR_GetDeltaTime& (0+255),f,b
 40204  004D08  1F6D               	comf	(??_TMR_GetDeltaTime+1)& (0+255),f,b
 40205  004D0A  1F6E               	comf	(??_TMR_GetDeltaTime+2)& (0+255),f,b
 40206  004D0C  1F6F               	comf	(??_TMR_GetDeltaTime+3)& (0+255),f,b
 40207  004D0E  2B6C               	incf	??_TMR_GetDeltaTime& (0+255),f,b
 40208  004D10  0E00               	movlw	0
 40209  004D12  236D               	addwfc	(??_TMR_GetDeltaTime+1)& (0+255),f,b
 40210  004D14  236E               	addwfc	(??_TMR_GetDeltaTime+2)& (0+255),f,b
 40211  004D16  236F               	addwfc	(??_TMR_GetDeltaTime+3)& (0+255),f,b
 40212  004D18  C04C  F070         	movff	_reloadVal,??_TMR_GetDeltaTime+4	;volatile
 40213  004D1C  C04D  F071         	movff	_reloadVal+1,??_TMR_GetDeltaTime+5	;volatile
 40214  004D20  1F70               	comf	(??_TMR_GetDeltaTime+4)& (0+255),f,b
 40215  004D22  1F71               	comf	(??_TMR_GetDeltaTime+5)& (0+255),f,b
 40216  004D24  4B70               	infsnz	(??_TMR_GetDeltaTime+4)& (0+255),f,b
 40217  004D26  2B71               	incf	(??_TMR_GetDeltaTime+5)& (0+255),f,b
 40218  004D28  0101               	movlb	1	; () banked
 40219  004D2A  5148               	movf	TMR_GetDeltaTime@tmrVal& (0+255),w,b
 40220  004D2C  0100               	movlb	0	; () banked
 40221  004D2E  2770               	addwf	(??_TMR_GetDeltaTime+4)& (0+255),f,b
 40222  004D30  0101               	movlb	1	; () banked
 40223  004D32  5149               	movf	(TMR_GetDeltaTime@tmrVal+1)& (0+255),w,b
 40224  004D34  0100               	movlb	0	; () banked
 40225  004D36  2371               	addwfc	(??_TMR_GetDeltaTime+5)& (0+255),f,b
 40226  004D38  5170               	movf	(??_TMR_GetDeltaTime+4)& (0+255),w,b
 40227  004D3A  256C               	addwf	??_TMR_GetDeltaTime& (0+255),w,b
 40228  004D3C  6F72               	movwf	(??_TMR_GetDeltaTime+6)& (0+255),b
 40229  004D3E  5171               	movf	(??_TMR_GetDeltaTime+5)& (0+255),w,b
 40230  004D40  216D               	addwfc	(??_TMR_GetDeltaTime+1)& (0+255),w,b
 40231  004D42  6F73               	movwf	(??_TMR_GetDeltaTime+7)& (0+255),b
 40232  004D44  0E00               	movlw	0
 40233  004D46  216E               	addwfc	(??_TMR_GetDeltaTime+2)& (0+255),w,b
 40234  004D48  6F74               	movwf	(??_TMR_GetDeltaTime+8)& (0+255),b
 40235  004D4A  0E00               	movlw	0
 40236  004D4C  216F               	addwfc	(??_TMR_GetDeltaTime+3)& (0+255),w,b
 40237  004D4E  6F75               	movwf	(??_TMR_GetDeltaTime+9)& (0+255),b
 40238  004D50  0101               	movlb	1	; () banked
 40239  004D52  5108               	movf	_ticksAdded& (0+255),w,b	;volatile
 40240  004D54  0100               	movlb	0	; () banked
 40241  004D56  2572               	addwf	(??_TMR_GetDeltaTime+6)& (0+255),w,b
 40242  004D58  0101               	movlb	1	; () banked
 40243  004D5A  6F00               	movwf	TMR_GetDeltaTime@retVal& (0+255),b
 40244  004D5C  5109               	movf	(_ticksAdded+1)& (0+255),w,b	;volatile
 40245  004D5E  0100               	movlb	0	; () banked
 40246  004D60  2173               	addwfc	(??_TMR_GetDeltaTime+7)& (0+255),w,b
 40247  004D62  0101               	movlb	1	; () banked
 40248  004D64  6F01               	movwf	(TMR_GetDeltaTime@retVal+1)& (0+255),b
 40249  004D66  510A               	movf	(_ticksAdded+2)& (0+255),w,b	;volatile
 40250  004D68  0100               	movlb	0	; () banked
 40251  004D6A  2174               	addwfc	(??_TMR_GetDeltaTime+8)& (0+255),w,b
 40252  004D6C  0101               	movlb	1	; () banked
 40253  004D6E  6F02               	movwf	(TMR_GetDeltaTime@retVal+2)& (0+255),b
 40254  004D70  510B               	movf	(_ticksAdded+3)& (0+255),w,b	;volatile
 40255  004D72  0100               	movlb	0	; () banked
 40256  004D74  2175               	addwfc	(??_TMR_GetDeltaTime+9)& (0+255),w,b
 40257  004D76  0101               	movlb	1	; () banked
 40258  004D78  6F03               	movwf	(TMR_GetDeltaTime@retVal+3)& (0+255),b
 40259                           
 40260                           ;sw_timer.c: 106: ticksAccounted += retVal;
 40261  004D7A  5100               	movf	TMR_GetDeltaTime@retVal& (0+255),w,b
 40262  004D7C  2704               	addwf	_ticksAccounted& (0+255),f,b	;volatile
 40263  004D7E  5101               	movf	(TMR_GetDeltaTime@retVal+1)& (0+255),w,b
 40264  004D80  2305               	addwfc	(_ticksAccounted+1)& (0+255),f,b	;volatile
 40265  004D82  5102               	movf	(TMR_GetDeltaTime@retVal+2)& (0+255),w,b
 40266  004D84  2306               	addwfc	(_ticksAccounted+2)& (0+255),f,b	;volatile
 40267  004D86  5103               	movf	(TMR_GetDeltaTime@retVal+3)& (0+255),w,b
 40268  004D88  2307               	addwfc	(_ticksAccounted+3)& (0+255),f,b	;volatile
 40269  004D8A                     l1526:
 40270                           
 40271                           ; BSR set to: 1
 40272                           ;sw_timer.c: 107: }
 40273                           ;sw_timer.c: 109: return retVal;
 40274                           
 40275                           ; BSR set to: 1
 40276  004D8A  C100  F068         	movff	TMR_GetDeltaTime@retVal,?_TMR_GetDeltaTime
 40277  004D8E  C101  F069         	movff	TMR_GetDeltaTime@retVal+1,?_TMR_GetDeltaTime+1
 40278  004D92  C102  F06A         	movff	TMR_GetDeltaTime@retVal+2,?_TMR_GetDeltaTime+2
 40279  004D96  C103  F06B         	movff	TMR_GetDeltaTime@retVal+3,?_TMR_GetDeltaTime+3
 40280  004D9A  0012               	return	
 40281  004D9C                     __end_of_TMR_GetDeltaTime:
 40282                           	opt stack 0
 40283                           tosu	equ	0xFFF
 40284                           tosh	equ	0xFFE
 40285                           tosl	equ	0xFFD
 40286                           pclath	equ	0xFFA
 40287                           tblptru	equ	0xFF8
 40288                           tblptrh	equ	0xFF7
 40289                           tblptrl	equ	0xFF6
 40290                           tablat	equ	0xFF5
 40291                           prodh	equ	0xFF4
 40292                           prodl	equ	0xFF3
 40293                           intcon	equ	0xFF2
 40294                           intcon2	equ	0xFF1
 40295                           intcon3	equ	0xFF0
 40296                           indf0	equ	0xFEF
 40297                           postinc0	equ	0xFEE
 40298                           plusw0	equ	0xFEB
 40299                           fsr0h	equ	0xFEA
 40300                           fsr0l	equ	0xFE9
 40301                           wreg	equ	0xFE8
 40302                           postinc1	equ	0xFE6
 40303                           postdec1	equ	0xFE5
 40304                           plusw1	equ	0xFE3
 40305                           fsr1h	equ	0xFE2
 40306                           fsr1l	equ	0xFE1
 40307                           indf2	equ	0xFDF
 40308                           postinc2	equ	0xFDE
 40309                           postdec2	equ	0xFDD
 40310                           plusw2	equ	0xFDB
 40311                           fsr2h	equ	0xFDA
 40312                           fsr2l	equ	0xFD9
 40313                           status	equ	0xFD8
 40314                           
 40315 ;; *************** function _TMR1_ReadTimer *****************
 40316 ;; Defined at:
 40317 ;;		line 105 in file "mcc_generated_files/tmr1.c"
 40318 ;; Parameters:    Size  Location     Type
 40319 ;;		None
 40320 ;; Auto vars:     Size  Location     Type
 40321 ;;  readVal         2    4[BANK0 ] unsigned int 
 40322 ;;  readValLow      1    7[BANK0 ] unsigned char 
 40323 ;;  readValHigh     1    6[BANK0 ] unsigned char 
 40324 ;; Return value:  Size  Location     Type
 40325 ;;                  2    0[BANK0 ] unsigned int 
 40326 ;; Registers used:
 40327 ;;		wreg, status,2
 40328 ;; Tracked objects:
 40329 ;;		On entry : 0/0
 40330 ;;		On exit  : 0/0
 40331 ;;		Unchanged: 0/0
 40332 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 40333 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 40334 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 40335 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 40336 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 40337 ;;Total ram usage:        8 bytes
 40338 ;; Hardware stack levels used:    1
 40339 ;; Hardware stack levels required when called:    7
 40340 ;; This function calls:
 40341 ;;		Nothing
 40342 ;; This function is called by:
 40343 ;;		_TMR_GetDeltaTime
 40344 ;;		_TMR_SwapTimer
 40345 ;; This function uses a non-reentrant model
 40346 ;;
 40347                           
 40348                           	psect	text194
 40349  00911A                     __ptext194:
 40350                           	opt stack 0
 40351  00911A                     _TMR1_ReadTimer:
 40352                           	opt stack 18
 40353                           
 40354                           ;tmr1.c: 107: uint16_t readVal;
 40355                           ;tmr1.c: 108: uint8_t readValHigh;
 40356                           ;tmr1.c: 109: uint8_t readValLow;
 40357                           ;tmr1.c: 111: T1CONbits.T1RD16 = 1;
 40358                           
 40359                           ; BSR set to: 1
 40360                           ;incstack = 0
 40361  00911A  82CD               	bsf	4045,1,c	;volatile
 40362                           
 40363                           ;tmr1.c: 113: readValLow = TMR1L;
 40364  00911C  CFCE F067          	movff	4046,TMR1_ReadTimer@readValLow	;volatile
 40365                           
 40366                           ;tmr1.c: 114: readValHigh = TMR1H;
 40367  009120  CFCF F066          	movff	4047,TMR1_ReadTimer@readValHigh	;volatile
 40368                           
 40369                           ;tmr1.c: 116: readVal = ((uint16_t)readValHigh << 8) | readValLow;
 40370  009124  0100               	movlb	0	; () banked
 40371  009126  5166               	movf	TMR1_ReadTimer@readValHigh& (0+255),w,b
 40372  009128  6F62               	movwf	??_TMR1_ReadTimer& (0+255),b
 40373  00912A  5167               	movf	TMR1_ReadTimer@readValLow& (0+255),w,b
 40374  00912C  6F64               	movwf	TMR1_ReadTimer@readVal& (0+255),b
 40375  00912E  C062  F065         	movff	??_TMR1_ReadTimer,TMR1_ReadTimer@readVal+1
 40376                           
 40377                           ; BSR set to: 0
 40378                           ;tmr1.c: 118: return readVal;
 40379  009132  C064  F060         	movff	TMR1_ReadTimer@readVal,?_TMR1_ReadTimer
 40380  009136  C065  F061         	movff	TMR1_ReadTimer@readVal+1,?_TMR1_ReadTimer+1
 40381  00913A  0012               	return	
 40382  00913C                     __end_of_TMR1_ReadTimer:
 40383                           	opt stack 0
 40384                           tosu	equ	0xFFF
 40385                           tosh	equ	0xFFE
 40386                           tosl	equ	0xFFD
 40387                           pclath	equ	0xFFA
 40388                           tblptru	equ	0xFF8
 40389                           tblptrh	equ	0xFF7
 40390                           tblptrl	equ	0xFF6
 40391                           tablat	equ	0xFF5
 40392                           prodh	equ	0xFF4
 40393                           prodl	equ	0xFF3
 40394                           intcon	equ	0xFF2
 40395                           intcon2	equ	0xFF1
 40396                           intcon3	equ	0xFF0
 40397                           indf0	equ	0xFEF
 40398                           postinc0	equ	0xFEE
 40399                           plusw0	equ	0xFEB
 40400                           fsr0h	equ	0xFEA
 40401                           fsr0l	equ	0xFE9
 40402                           wreg	equ	0xFE8
 40403                           postinc1	equ	0xFE6
 40404                           postdec1	equ	0xFE5
 40405                           plusw1	equ	0xFE3
 40406                           fsr1h	equ	0xFE2
 40407                           fsr1l	equ	0xFE1
 40408                           indf2	equ	0xFDF
 40409                           postinc2	equ	0xFDE
 40410                           postdec2	equ	0xFDD
 40411                           plusw2	equ	0xFDB
 40412                           fsr2h	equ	0xFDA
 40413                           fsr2l	equ	0xFD9
 40414                           status	equ	0xFD8
 40415                           
 40416 ;; *************** function _SwTimerSetTimeout *****************
 40417 ;; Defined at:
 40418 ;;		line 186 in file "mcc_generated_files/LoRaWAN/sw_timer.c"
 40419 ;; Parameters:    Size  Location     Type
 40420 ;;  timerId         1    wreg     unsigned char 
 40421 ;;  timeout         4   13[BANK0 ] unsigned long 
 40422 ;; Auto vars:     Size  Location     Type
 40423 ;;  timerId         1   21[BANK0 ] unsigned char 
 40424 ;; Return value:  Size  Location     Type
 40425 ;;                  1    wreg      void 
 40426 ;; Registers used:
 40427 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 40428 ;; Tracked objects:
 40429 ;;		On entry : 0/0
 40430 ;;		On exit  : 0/0
 40431 ;;		Unchanged: 0/0
 40432 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 40433 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 40434 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 40435 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 40436 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 40437 ;;Total ram usage:        9 bytes
 40438 ;; Hardware stack levels used:    1
 40439 ;; Hardware stack levels required when called:    7
 40440 ;; This function calls:
 40441 ;;		Nothing
 40442 ;; This function is called by:
 40443 ;;		_RADIO_Transmit
 40444 ;;		_RADIO_ReceiveStart
 40445 ;;		_LORAWAN_Join
 40446 ;;		_LORAWAN_LinkCheckConfigure
 40447 ;;		_LORAWAN_LinkCheckCallback
 40448 ;;		_UpdateRetransmissionAckTimeoutState
 40449 ;;		_UpdateJoinSuccessState
 40450 ;;		_LORAWAN_TxDone
 40451 ;;		_LORAWAN_RxTimeout
 40452 ;;		_StartReTxTimer
 40453 ;;		_DutyCycleCallback
 40454 ;; This function uses a non-reentrant model
 40455 ;;
 40456                           
 40457                           	psect	text195
 40458  008A02                     __ptext195:
 40459                           	opt stack 0
 40460  008A02                     _SwTimerSetTimeout:
 40461                           	opt stack 21
 40462                           
 40463                           ; BSR set to: 0
 40464                           ;incstack = 0
 40465                           ;SwTimerSetTimeout@timerId stored from wreg
 40466  008A02  0100               	movlb	0	; () banked
 40467  008A04  6F75               	movwf	SwTimerSetTimeout@timerId& (0+255),b
 40468                           
 40469                           ;sw_timer.c: 188: (INTCONbits.GIE = 0);
 40470  008A06  9EF2               	bcf	intcon,7,c	;volatile
 40471                           
 40472                           ;sw_timer.c: 189: swTimers[timerId].ticksRemaining = timeout - 32;
 40473  008A08  0EE0               	movlw	224
 40474  008A0A  0100               	movlb	0	; () banked
 40475  008A0C  256D               	addwf	SwTimerSetTimeout@timeout& (0+255),w,b
 40476  008A0E  6F71               	movwf	??_SwTimerSetTimeout& (0+255),b
 40477  008A10  0EFF               	movlw	255
 40478  008A12  216E               	addwfc	(SwTimerSetTimeout@timeout+1)& (0+255),w,b
 40479  008A14  6F72               	movwf	(??_SwTimerSetTimeout+1)& (0+255),b
 40480  008A16  0EFF               	movlw	255
 40481  008A18  216F               	addwfc	(SwTimerSetTimeout@timeout+2)& (0+255),w,b
 40482  008A1A  6F73               	movwf	(??_SwTimerSetTimeout+2)& (0+255),b
 40483  008A1C  0EFF               	movlw	255
 40484  008A1E  2170               	addwfc	(SwTimerSetTimeout@timeout+3)& (0+255),w,b
 40485  008A20  6F74               	movwf	(??_SwTimerSetTimeout+3)& (0+255),b
 40486  008A22  5175               	movf	SwTimerSetTimeout@timerId& (0+255),w,b
 40487  008A24  0D08               	mullw	8
 40488  008A26  0E00               	movlw	low _swTimers
 40489  008A28  24F3               	addwf	prodl,w,c
 40490  008A2A  6ED9               	movwf	fsr2l,c
 40491  008A2C  0E03               	movlw	high _swTimers
 40492  008A2E  20F4               	addwfc	prodh,w,c
 40493  008A30  6EDA               	movwf	fsr2h,c
 40494  008A32  C071  FFDE         	movff	??_SwTimerSetTimeout,postinc2
 40495  008A36  C072  FFDE         	movff	??_SwTimerSetTimeout+1,postinc2
 40496  008A3A  C073  FFDE         	movff	??_SwTimerSetTimeout+2,postinc2
 40497  008A3E  C074  FFDE         	movff	??_SwTimerSetTimeout+3,postinc2
 40498                           
 40499                           ; BSR set to: 0
 40500                           ;sw_timer.c: 190: (INTCONbits.GIE = 1);
 40501  008A42  8EF2               	bsf	intcon,7,c	;volatile
 40502                           
 40503                           ; BSR set to: 0
 40504  008A44  0012               	return		;funcret
 40505  008A46                     __end_of_SwTimerSetTimeout:
 40506                           	opt stack 0
 40507                           tosu	equ	0xFFF
 40508                           tosh	equ	0xFFE
 40509                           tosl	equ	0xFFD
 40510                           pclath	equ	0xFFA
 40511                           tblptru	equ	0xFF8
 40512                           tblptrh	equ	0xFF7
 40513                           tblptrl	equ	0xFF6
 40514                           tablat	equ	0xFF5
 40515                           prodh	equ	0xFF4
 40516                           prodl	equ	0xFF3
 40517                           intcon	equ	0xFF2
 40518                           intcon2	equ	0xFF1
 40519                           intcon3	equ	0xFF0
 40520                           indf0	equ	0xFEF
 40521                           postinc0	equ	0xFEE
 40522                           plusw0	equ	0xFEB
 40523                           fsr0h	equ	0xFEA
 40524                           fsr0l	equ	0xFE9
 40525                           wreg	equ	0xFE8
 40526                           postinc1	equ	0xFE6
 40527                           postdec1	equ	0xFE5
 40528                           plusw1	equ	0xFE3
 40529                           fsr1h	equ	0xFE2
 40530                           fsr1l	equ	0xFE1
 40531                           indf2	equ	0xFDF
 40532                           postinc2	equ	0xFDE
 40533                           postdec2	equ	0xFDD
 40534                           plusw2	equ	0xFDB
 40535                           fsr2h	equ	0xFDA
 40536                           fsr2l	equ	0xFD9
 40537                           status	equ	0xFD8
 40538                           
 40539 ;; *************** function _InitDefault868Channels *****************
 40540 ;; Defined at:
 40541 ;;		line 979 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 40542 ;; Parameters:    Size  Location     Type
 40543 ;;		None
 40544 ;; Auto vars:     Size  Location     Type
 40545 ;;  i               1   11[BANK0 ] unsigned char 
 40546 ;; Return value:  Size  Location     Type
 40547 ;;                  1    wreg      void 
 40548 ;; Registers used:
 40549 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 40550 ;; Tracked objects:
 40551 ;;		On entry : 0/0
 40552 ;;		On exit  : 0/0
 40553 ;;		Unchanged: 0/0
 40554 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 40555 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 40556 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 40557 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 40558 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 40559 ;;Total ram usage:        1 bytes
 40560 ;; Hardware stack levels used:    1
 40561 ;; Hardware stack levels required when called:    8
 40562 ;; This function calls:
 40563 ;;		_memcpy
 40564 ;;		_memset
 40565 ;; This function is called by:
 40566 ;;		_LORAWAN_Reset
 40567 ;; This function uses a non-reentrant model
 40568 ;;
 40569                           
 40570                           	psect	text196
 40571  0077A8                     __ptext196:
 40572                           	opt stack 0
 40573  0077A8                     _InitDefault868Channels:
 40574                           	opt stack 20
 40575                           
 40576                           ;lorawan_eu.c: 981: uint8_t i;
 40577                           ;lorawan_eu.c: 983: memset (Channels, 0, sizeof(Channels) );
 40578                           
 40579                           ; BSR set to: 0
 40580                           ;incstack = 0
 40581  0077A8  0E00               	movlw	low _Channels
 40582  0077AA  0100               	movlb	0	; () banked
 40583  0077AC  6F60               	movwf	memset@p1& (0+255),b
 40584  0077AE  0E04               	movlw	high _Channels
 40585  0077B0  6F61               	movwf	(memset@p1+1)& (0+255),b
 40586  0077B2  0E00               	movlw	0
 40587  0077B4  6F63               	movwf	(memset@c+1)& (0+255),b
 40588  0077B6  0E00               	movlw	0
 40589  0077B8  6F62               	movwf	memset@c& (0+255),b
 40590  0077BA  0E00               	movlw	0
 40591  0077BC  6F65               	movwf	(memset@n+1)& (0+255),b
 40592  0077BE  0EE0               	movlw	224
 40593  0077C0  6F64               	movwf	memset@n& (0+255),b
 40594  0077C2  ECCC  F046         	call	_memset	;wreg free
 40595                           
 40596                           ;lorawan_eu.c: 984: memcpy (Channels, DefaultChannels868, sizeof(DefaultChannels868) );
 40597  0077C6  0E00               	movlw	low _Channels
 40598  0077C8  0100               	movlb	0	; () banked
 40599  0077CA  6F60               	movwf	memcpy@d1& (0+255),b
 40600  0077CC  0E04               	movlw	high _Channels
 40601  0077CE  6F61               	movwf	(memcpy@d1+1)& (0+255),b
 40602  0077D0  0ED2               	movlw	low _DefaultChannels868
 40603  0077D2  6F62               	movwf	memcpy@s1& (0+255),b
 40604  0077D4  0EFF               	movlw	high _DefaultChannels868
 40605  0077D6  6F63               	movwf	(memcpy@s1+1)& (0+255),b
 40606  0077D8  0E00               	movlw	0
 40607  0077DA  6F65               	movwf	(memcpy@n+1)& (0+255),b
 40608  0077DC  0E2A               	movlw	42
 40609  0077DE  6F64               	movwf	memcpy@n& (0+255),b
 40610  0077E0  EC37  F041         	call	_memcpy	;wreg free
 40611                           
 40612                           ;lorawan_eu.c: 985: for (i = 3; i < 16; i++)
 40613  0077E4  0E03               	movlw	3
 40614  0077E6  0100               	movlb	0	; () banked
 40615  0077E8  6F6B               	movwf	InitDefault868Channels@i& (0+255),b
 40616  0077EA                     l12179:
 40617                           
 40618                           ; BSR set to: 0
 40619  0077EA  0E0F               	movlw	15
 40620  0077EC  656B               	cpfsgt	InitDefault868Channels@i& (0+255),b
 40621  0077EE  D001               	goto	l2038
 40622  0077F0  0012               	return	
 40623  0077F2                     l2038:
 40624                           
 40625                           ; BSR set to: 0
 40626                           ;lorawan_eu.c: 986: {
 40627                           ;lorawan_eu.c: 989: Channels[i].dutyCycle = (65535U);
 40628                           
 40629                           ; BSR set to: 0
 40630  0077F2  516B               	movf	InitDefault868Channels@i& (0+255),w,b
 40631  0077F4  0D0E               	mullw	14
 40632  0077F6  0E06               	movlw	6
 40633  0077F8  26F3               	addwf	prodl,f,c
 40634  0077FA  0E00               	movlw	0
 40635  0077FC  22F4               	addwfc	prodh,f,c
 40636  0077FE  0E00               	movlw	low _Channels
 40637  007800  24F3               	addwf	prodl,w,c
 40638  007802  6ED9               	movwf	fsr2l,c
 40639  007804  0E04               	movlw	high _Channels
 40640  007806  20F4               	addwfc	prodh,w,c
 40641  007808  6EDA               	movwf	fsr2h,c
 40642  00780A  0EFF               	movlw	255
 40643  00780C  6EDE               	movwf	postinc2,c
 40644  00780E  0EFF               	movlw	255
 40645  007810  6EDD               	movwf	postdec2,c
 40646                           
 40647                           ;lorawan_eu.c: 990: Channels[i].dataRange.value = (255);
 40648  007812  516B               	movf	InitDefault868Channels@i& (0+255),w,b
 40649  007814  0D0E               	mullw	14
 40650  007816  0E05               	movlw	5
 40651  007818  26F3               	addwf	prodl,f,c
 40652  00781A  0E00               	movlw	0
 40653  00781C  22F4               	addwfc	prodh,f,c
 40654  00781E  0E00               	movlw	low _Channels
 40655  007820  24F3               	addwf	prodl,w,c
 40656  007822  6ED9               	movwf	fsr2l,c
 40657  007824  0E04               	movlw	high _Channels
 40658  007826  20F4               	addwfc	prodh,w,c
 40659  007828  6EDA               	movwf	fsr2h,c
 40660  00782A  0EFF               	movlw	255
 40661  00782C  6EDF               	movwf	indf2,c
 40662                           
 40663                           ; BSR set to: 0
 40664  00782E  2B6B               	incf	InitDefault868Channels@i& (0+255),f,b
 40665  007830  D7DC               	goto	l12179
 40666  007832                     __end_of_InitDefault868Channels:
 40667                           	opt stack 0
 40668                           tosu	equ	0xFFF
 40669                           tosh	equ	0xFFE
 40670                           tosl	equ	0xFFD
 40671                           pclath	equ	0xFFA
 40672                           tblptru	equ	0xFF8
 40673                           tblptrh	equ	0xFF7
 40674                           tblptrl	equ	0xFF6
 40675                           tablat	equ	0xFF5
 40676                           prodh	equ	0xFF4
 40677                           prodl	equ	0xFF3
 40678                           intcon	equ	0xFF2
 40679                           intcon2	equ	0xFF1
 40680                           intcon3	equ	0xFF0
 40681                           indf0	equ	0xFEF
 40682                           postinc0	equ	0xFEE
 40683                           plusw0	equ	0xFEB
 40684                           fsr0h	equ	0xFEA
 40685                           fsr0l	equ	0xFE9
 40686                           wreg	equ	0xFE8
 40687                           postinc1	equ	0xFE6
 40688                           postdec1	equ	0xFE5
 40689                           plusw1	equ	0xFE3
 40690                           fsr1h	equ	0xFE2
 40691                           fsr1l	equ	0xFE1
 40692                           indf2	equ	0xFDF
 40693                           postinc2	equ	0xFDE
 40694                           postdec2	equ	0xFDD
 40695                           plusw2	equ	0xFDB
 40696                           fsr2h	equ	0xFDA
 40697                           fsr2l	equ	0xFD9
 40698                           status	equ	0xFD8
 40699                           
 40700 ;; *************** function _InitDefault433Channels *****************
 40701 ;; Defined at:
 40702 ;;		line 994 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 40703 ;; Parameters:    Size  Location     Type
 40704 ;;		None
 40705 ;; Auto vars:     Size  Location     Type
 40706 ;;  i               1   11[BANK0 ] unsigned char 
 40707 ;; Return value:  Size  Location     Type
 40708 ;;                  1    wreg      void 
 40709 ;; Registers used:
 40710 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 40711 ;; Tracked objects:
 40712 ;;		On entry : 0/0
 40713 ;;		On exit  : 0/0
 40714 ;;		Unchanged: 0/0
 40715 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 40716 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 40717 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 40718 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 40719 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 40720 ;;Total ram usage:        1 bytes
 40721 ;; Hardware stack levels used:    1
 40722 ;; Hardware stack levels required when called:    8
 40723 ;; This function calls:
 40724 ;;		_memcpy
 40725 ;;		_memset
 40726 ;; This function is called by:
 40727 ;;		_LORAWAN_Reset
 40728 ;; This function uses a non-reentrant model
 40729 ;;
 40730                           
 40731                           	psect	text197
 40732  007832                     __ptext197:
 40733                           	opt stack 0
 40734  007832                     _InitDefault433Channels:
 40735                           	opt stack 20
 40736                           
 40737                           ;lorawan_eu.c: 996: uint8_t i;
 40738                           ;lorawan_eu.c: 998: memset (Channels, 0, sizeof(Channels) );
 40739                           
 40740                           ; BSR set to: 0
 40741                           ;incstack = 0
 40742  007832  0E00               	movlw	low _Channels
 40743  007834  0100               	movlb	0	; () banked
 40744  007836  6F60               	movwf	memset@p1& (0+255),b
 40745  007838  0E04               	movlw	high _Channels
 40746  00783A  6F61               	movwf	(memset@p1+1)& (0+255),b
 40747  00783C  0E00               	movlw	0
 40748  00783E  6F63               	movwf	(memset@c+1)& (0+255),b
 40749  007840  0E00               	movlw	0
 40750  007842  6F62               	movwf	memset@c& (0+255),b
 40751  007844  0E00               	movlw	0
 40752  007846  6F65               	movwf	(memset@n+1)& (0+255),b
 40753  007848  0EE0               	movlw	224
 40754  00784A  6F64               	movwf	memset@n& (0+255),b
 40755  00784C  ECCC  F046         	call	_memset	;wreg free
 40756                           
 40757                           ;lorawan_eu.c: 999: memcpy (Channels, DefaultChannels433, sizeof(DefaultChannels433) );
 40758  007850  0E00               	movlw	low _Channels
 40759  007852  0100               	movlb	0	; () banked
 40760  007854  6F60               	movwf	memcpy@d1& (0+255),b
 40761  007856  0E04               	movlw	high _Channels
 40762  007858  6F61               	movwf	(memcpy@d1+1)& (0+255),b
 40763  00785A  0EA8               	movlw	low _DefaultChannels433
 40764  00785C  6F62               	movwf	memcpy@s1& (0+255),b
 40765  00785E  0EFF               	movlw	high _DefaultChannels433
 40766  007860  6F63               	movwf	(memcpy@s1+1)& (0+255),b
 40767  007862  0E00               	movlw	0
 40768  007864  6F65               	movwf	(memcpy@n+1)& (0+255),b
 40769  007866  0E2A               	movlw	42
 40770  007868  6F64               	movwf	memcpy@n& (0+255),b
 40771  00786A  EC37  F041         	call	_memcpy	;wreg free
 40772                           
 40773                           ;lorawan_eu.c: 1000: for (i = 3; i < 16; i++)
 40774  00786E  0E03               	movlw	3
 40775  007870  0100               	movlb	0	; () banked
 40776  007872  6F6B               	movwf	InitDefault433Channels@i& (0+255),b
 40777  007874                     l12195:
 40778                           
 40779                           ; BSR set to: 0
 40780  007874  0E0F               	movlw	15
 40781  007876  656B               	cpfsgt	InitDefault433Channels@i& (0+255),b
 40782  007878  D001               	goto	l2043
 40783  00787A  0012               	return	
 40784  00787C                     l2043:
 40785                           
 40786                           ; BSR set to: 0
 40787                           ;lorawan_eu.c: 1001: {
 40788                           ;lorawan_eu.c: 1004: Channels[i].dutyCycle = (65535U);
 40789                           
 40790                           ; BSR set to: 0
 40791  00787C  516B               	movf	InitDefault433Channels@i& (0+255),w,b
 40792  00787E  0D0E               	mullw	14
 40793  007880  0E06               	movlw	6
 40794  007882  26F3               	addwf	prodl,f,c
 40795  007884  0E00               	movlw	0
 40796  007886  22F4               	addwfc	prodh,f,c
 40797  007888  0E00               	movlw	low _Channels
 40798  00788A  24F3               	addwf	prodl,w,c
 40799  00788C  6ED9               	movwf	fsr2l,c
 40800  00788E  0E04               	movlw	high _Channels
 40801  007890  20F4               	addwfc	prodh,w,c
 40802  007892  6EDA               	movwf	fsr2h,c
 40803  007894  0EFF               	movlw	255
 40804  007896  6EDE               	movwf	postinc2,c
 40805  007898  0EFF               	movlw	255
 40806  00789A  6EDD               	movwf	postdec2,c
 40807                           
 40808                           ;lorawan_eu.c: 1005: Channels[i].dataRange.value = (255);
 40809  00789C  516B               	movf	InitDefault433Channels@i& (0+255),w,b
 40810  00789E  0D0E               	mullw	14
 40811  0078A0  0E05               	movlw	5
 40812  0078A2  26F3               	addwf	prodl,f,c
 40813  0078A4  0E00               	movlw	0
 40814  0078A6  22F4               	addwfc	prodh,f,c
 40815  0078A8  0E00               	movlw	low _Channels
 40816  0078AA  24F3               	addwf	prodl,w,c
 40817  0078AC  6ED9               	movwf	fsr2l,c
 40818  0078AE  0E04               	movlw	high _Channels
 40819  0078B0  20F4               	addwfc	prodh,w,c
 40820  0078B2  6EDA               	movwf	fsr2h,c
 40821  0078B4  0EFF               	movlw	255
 40822  0078B6  6EDF               	movwf	indf2,c
 40823                           
 40824                           ; BSR set to: 0
 40825  0078B8  2B6B               	incf	InitDefault433Channels@i& (0+255),f,b
 40826  0078BA  D7DC               	goto	l12195
 40827  0078BC                     __end_of_InitDefault433Channels:
 40828                           	opt stack 0
 40829                           tosu	equ	0xFFF
 40830                           tosh	equ	0xFFE
 40831                           tosl	equ	0xFFD
 40832                           pclath	equ	0xFFA
 40833                           tblptru	equ	0xFF8
 40834                           tblptrh	equ	0xFF7
 40835                           tblptrl	equ	0xFF6
 40836                           tablat	equ	0xFF5
 40837                           prodh	equ	0xFF4
 40838                           prodl	equ	0xFF3
 40839                           intcon	equ	0xFF2
 40840                           intcon2	equ	0xFF1
 40841                           intcon3	equ	0xFF0
 40842                           indf0	equ	0xFEF
 40843                           postinc0	equ	0xFEE
 40844                           plusw0	equ	0xFEB
 40845                           fsr0h	equ	0xFEA
 40846                           fsr0l	equ	0xFE9
 40847                           wreg	equ	0xFE8
 40848                           postinc1	equ	0xFE6
 40849                           postdec1	equ	0xFE5
 40850                           plusw1	equ	0xFE3
 40851                           fsr1h	equ	0xFE2
 40852                           fsr1l	equ	0xFE1
 40853                           indf2	equ	0xFDF
 40854                           postinc2	equ	0xFDE
 40855                           postdec2	equ	0xFDD
 40856                           plusw2	equ	0xFDB
 40857                           fsr2h	equ	0xFDA
 40858                           fsr2l	equ	0xFD9
 40859                           status	equ	0xFD8
 40860                           
 40861 ;; *************** function _memset *****************
 40862 ;; Defined at:
 40863 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\memset.c"
 40864 ;; Parameters:    Size  Location     Type
 40865 ;;  p1              2    0[BANK0 ] PTR void 
 40866 ;;		 -> AssemblePacket@mhdr(1), aesBuffer(16), Channels(224), macBuffer(271), 
 40867 ;;		 -> loRa.activationParameters(105), loRa(245), GenerateSubkey@l(16), AESCmac@x(16), 
 40868 ;;  c               2    2[BANK0 ] int 
 40869 ;;  n               2    4[BANK0 ] unsigned int 
 40870 ;; Auto vars:     Size  Location     Type
 40871 ;;  p               2    6[BANK0 ] PTR unsigned char 
 40872 ;;		 -> AssemblePacket@mhdr(1), aesBuffer(16), Channels(224), macBuffer(271), 
 40873 ;;		 -> loRa.activationParameters(105), loRa(245), GenerateSubkey@l(16), AESCmac@x(16), 
 40874 ;; Return value:  Size  Location     Type
 40875 ;;                  2    0[BANK0 ] PTR void 
 40876 ;; Registers used:
 40877 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 40878 ;; Tracked objects:
 40879 ;;		On entry : 0/0
 40880 ;;		On exit  : 0/0
 40881 ;;		Unchanged: 0/0
 40882 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 40883 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 40884 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 40885 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 40886 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 40887 ;;Total ram usage:        8 bytes
 40888 ;; Hardware stack levels used:    1
 40889 ;; Hardware stack levels required when called:    7
 40890 ;; This function calls:
 40891 ;;		Nothing
 40892 ;; This function is called by:
 40893 ;;		_AESCmac
 40894 ;;		_GenerateSubkey
 40895 ;;		_AssemblePacket
 40896 ;;		_PrepareJoinRequestFrame
 40897 ;;		_PrepareSessionKeys
 40898 ;;		_AssembleEncryptionBlock
 40899 ;;		_LORAWAN_Reset
 40900 ;;		_InitDefault868Channels
 40901 ;;		_InitDefault433Channels
 40902 ;; This function uses a non-reentrant model
 40903 ;;
 40904                           
 40905                           	psect	text198
 40906  008D98                     __ptext198:
 40907                           	opt stack 0
 40908  008D98                     _memset:
 40909                           	opt stack 21
 40910                           
 40911                           ; BSR set to: 0
 40912                           ;incstack = 0
 40913  008D98  C060  F066         	movff	memset@p1,memset@p
 40914  008D9C  C061  F067         	movff	memset@p1+1,memset@p+1
 40915  008DA0  D009               	goto	l3263
 40916  008DA2                     l8951:
 40917  008DA2  C066  FFD9         	movff	memset@p,fsr2l
 40918  008DA6  C067  FFDA         	movff	memset@p+1,fsr2h
 40919  008DAA  C062  FFDF         	movff	memset@c,indf2
 40920  008DAE  0100               	movlb	0	; () banked
 40921  008DB0  4B66               	infsnz	memset@p& (0+255),f,b
 40922  008DB2  2B67               	incf	(memset@p+1)& (0+255),f,b
 40923  008DB4                     l3263:
 40924                           
 40925                           ; BSR set to: 0
 40926  008DB4  0100               	movlb	0	; () banked
 40927  008DB6  0764               	decf	memset@n& (0+255),f,b
 40928  008DB8  A0D8               	btfss	status,0,c
 40929  008DBA  0765               	decf	(memset@n+1)& (0+255),f,b
 40930  008DBC  2964               	incf	memset@n& (0+255),w,b
 40931  008DBE  E1F1               	bnz	l8951
 40932  008DC0  2965               	incf	(memset@n+1)& (0+255),w,b
 40933  008DC2  B4D8               	btfsc	status,2,c
 40934  008DC4  0012               	return	
 40935  008DC6  D7ED               	goto	l3264
 40936  008DC8                     __end_of_memset:
 40937                           	opt stack 0
 40938                           tosu	equ	0xFFF
 40939                           tosh	equ	0xFFE
 40940                           tosl	equ	0xFFD
 40941                           pclath	equ	0xFFA
 40942                           tblptru	equ	0xFF8
 40943                           tblptrh	equ	0xFF7
 40944                           tblptrl	equ	0xFF6
 40945                           tablat	equ	0xFF5
 40946                           prodh	equ	0xFF4
 40947                           prodl	equ	0xFF3
 40948                           intcon	equ	0xFF2
 40949                           intcon2	equ	0xFF1
 40950                           intcon3	equ	0xFF0
 40951                           indf0	equ	0xFEF
 40952                           postinc0	equ	0xFEE
 40953                           plusw0	equ	0xFEB
 40954                           fsr0h	equ	0xFEA
 40955                           fsr0l	equ	0xFE9
 40956                           wreg	equ	0xFE8
 40957                           postinc1	equ	0xFE6
 40958                           postdec1	equ	0xFE5
 40959                           plusw1	equ	0xFE3
 40960                           fsr1h	equ	0xFE2
 40961                           fsr1l	equ	0xFE1
 40962                           indf2	equ	0xFDF
 40963                           postinc2	equ	0xFDE
 40964                           postdec2	equ	0xFDD
 40965                           plusw2	equ	0xFDB
 40966                           fsr2h	equ	0xFDA
 40967                           fsr2l	equ	0xFD9
 40968                           status	equ	0xFD8
 40969                           
 40970 ;; *************** function _memcpy *****************
 40971 ;; Defined at:
 40972 ;;		line 27 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\memcpy.c"
 40973 ;; Parameters:    Size  Location     Type
 40974 ;;  d1              2    0[BANK0 ] PTR void 
 40975 ;;		 -> UpdateCfList@frequency(4), ComputeMic@mic(4), ExtractMic@mic(4), aesBuffer(16), 
 40976 ;;		 -> radioBuffer(271), LORAWAN_RxDone@computedMic(4), Channels(224), loRa.activationParameters.applicationEui(8), 
 40977 ;;		 -> loRa.activationParameters.deviceEui(8), macBuffer(271), loRa.activationParameters(105), loRa(245), 
 40978 ;;		 -> AESEncodeLoRa@useKey(16), RadioConfiguration(54), AESCmac@x(16), 
 40979 ;;  s1              2    2[BANK0 ] PTR const void 
 40980 ;;		 -> LORAWAN_RxDone@hdr.cfList(16), radioBuffer.cfList(16), testtest(2), appSKey(16), 
 40981 ;;		 -> nwkSKey(16), FskSyncWordBuff(3), UpdateCfList@joinAccept(2), DefaultChannels433(42), 
 40982 ;;		 -> DefaultChannels868(42), AssembleEncryptionBlock@frameCounter(4), ComputeSessionKeys@joinAcceptBuffer(2), Prepare
      +JoinRequestFrame@mic(4), 
 40983 ;;		 -> loRa.devNonce(2), loRa.fCntUp.valueLow(2), aesBuffer(16), radioBuffer(271), 
 40984 ;;		 -> LORAWAN_RxDone@hdr(2), loRa.activationParameters.applicationKey(16), loRa.activationParameters.applicationSessio
      +nKey(16), loRa.activationParameters.networkSessionKey(16), 
 40985 ;;		 -> loRa.activationParameters.deviceAddress(4), loRa.activationParameters.applicationEui(8), loRa.activationParamete
      +rs.deviceEui(8), loRa.activationParameters.mcastApplicationSessionKey(16), 
 40986 ;;		 -> loRa.activationParameters.mcastNetworkSessionKey(16), loRa.activationParameters.mcastDeviceAddress(4), loRa.fCnt
      +Up(4), loRa.activationParameters(105), 
 40987 ;;		 -> loRa(245), RadioConfiguration.syncWord(8), RadioConfiguration(54), AESCmac@y(16), 
 40988 ;;		 -> NULL(0), 
 40989 ;;  n               2    4[BANK0 ] unsigned int 
 40990 ;; Auto vars:     Size  Location     Type
 40991 ;;  s               2    8[BANK0 ] PTR const unsigned char 
 40992 ;;		 -> LORAWAN_RxDone@hdr.cfList(16), radioBuffer.cfList(16), testtest(2), appSKey(16), 
 40993 ;;		 -> nwkSKey(16), FskSyncWordBuff(3), UpdateCfList@joinAccept(2), DefaultChannels433(42), 
 40994 ;;		 -> DefaultChannels868(42), AssembleEncryptionBlock@frameCounter(4), ComputeSessionKeys@joinAcceptBuffer(2), Prepare
      +JoinRequestFrame@mic(4), 
 40995 ;;		 -> loRa.devNonce(2), loRa.fCntUp.valueLow(2), aesBuffer(16), radioBuffer(271), 
 40996 ;;		 -> LORAWAN_RxDone@hdr(2), loRa.activationParameters.applicationKey(16), loRa.activationParameters.applicationSessio
      +nKey(16), loRa.activationParameters.networkSessionKey(16), 
 40997 ;;		 -> loRa.activationParameters.deviceAddress(4), loRa.activationParameters.applicationEui(8), loRa.activationParamete
      +rs.deviceEui(8), loRa.activationParameters.mcastApplicationSessionKey(16), 
 40998 ;;		 -> loRa.activationParameters.mcastNetworkSessionKey(16), loRa.activationParameters.mcastDeviceAddress(4), loRa.fCnt
      +Up(4), loRa.activationParameters(105), 
 40999 ;;		 -> loRa(245), RadioConfiguration.syncWord(8), RadioConfiguration(54), AESCmac@y(16), 
 41000 ;;		 -> NULL(0), 
 41001 ;;  d               2    6[BANK0 ] PTR unsigned char 
 41002 ;;		 -> UpdateCfList@frequency(4), ComputeMic@mic(4), ExtractMic@mic(4), aesBuffer(16), 
 41003 ;;		 -> radioBuffer(271), LORAWAN_RxDone@computedMic(4), Channels(224), loRa.activationParameters.applicationEui(8), 
 41004 ;;		 -> loRa.activationParameters.deviceEui(8), macBuffer(271), loRa.activationParameters(105), loRa(245), 
 41005 ;;		 -> AESEncodeLoRa@useKey(16), RadioConfiguration(54), AESCmac@x(16), 
 41006 ;;  tmp             1   10[BANK0 ] unsigned char 
 41007 ;; Return value:  Size  Location     Type
 41008 ;;                  2    0[BANK0 ] PTR void 
 41009 ;; Registers used:
 41010 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 41011 ;; Tracked objects:
 41012 ;;		On entry : 0/0
 41013 ;;		On exit  : 0/0
 41014 ;;		Unchanged: 0/0
 41015 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 41016 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 41017 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 41018 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 41019 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 41020 ;;Total ram usage:       11 bytes
 41021 ;; Hardware stack levels used:    1
 41022 ;; Hardware stack levels required when called:    7
 41023 ;; This function calls:
 41024 ;;		Nothing
 41025 ;; This function is called by:
 41026 ;;		_AESCmac
 41027 ;;		_RADIO_SetFSKSyncWord
 41028 ;;		_AESEncodeLoRa
 41029 ;;		_LORAWAN_SetNetworkSessionKey
 41030 ;;		_LORAWAN_SetApplicationSessionKey
 41031 ;;		_LORAWAN_RxDone
 41032 ;;		_AssemblePacket
 41033 ;;		_PrepareJoinRequestFrame
 41034 ;;		_PrepareSessionKeys
 41035 ;;		_AssembleEncryptionBlock
 41036 ;;		_ExtractMic
 41037 ;;		_ComputeMic
 41038 ;;		_UpdateCfList
 41039 ;;		_InitDefault868Channels
 41040 ;;		_InitDefault433Channels
 41041 ;;		_RADIO_GetData
 41042 ;;		_RADIO_GetFSKSyncWord
 41043 ;;		_LORAWAN_SetMcastNetworkSessionKey
 41044 ;;		_LORAWAN_SetMcastApplicationSessionKey
 41045 ;;		_LORAWAN_GetMcastApplicationSessionKey
 41046 ;;		_LORAWAN_GetMcastNetworkSessionKey
 41047 ;;		_LORAWAN_SetDeviceEui
 41048 ;;		_LORAWAN_GetDeviceEui
 41049 ;;		_LORAWAN_SetApplicationEui
 41050 ;;		_LORAWAN_GetApplicationEui
 41051 ;;		_LORAWAN_GetNetworkSessionKey
 41052 ;;		_LORAWAN_GetApplicationSessionKey
 41053 ;;		_LORAWAN_SetApplicationKey
 41054 ;;		_LORAWAN_GetApplicationKey
 41055 ;; This function uses a non-reentrant model
 41056 ;;
 41057                           
 41058                           	psect	text199
 41059  00826E                     __ptext199:
 41060                           	opt stack 0
 41061  00826E                     _memcpy:
 41062                           	opt stack 22
 41063                           
 41064                           ; BSR set to: 0
 41065                           ;incstack = 0
 41066  00826E  C062  F068         	movff	memcpy@s1,memcpy@s
 41067  008272  C063  F069         	movff	memcpy@s1+1,memcpy@s+1
 41068  008276  C060  F066         	movff	memcpy@d1,memcpy@d
 41069  00827A  C061  F067         	movff	memcpy@d1+1,memcpy@d+1
 41070  00827E  D01D               	goto	l3257
 41071  008280                     l8739:
 41072  008280  C068  FFF6         	movff	memcpy@s,tblptrl
 41073  008284  C069  FFF7         	movff	memcpy@s+1,tblptrh
 41074  008288  0E00               	movlw	low (__mediumconst shr (0+16))
 41075  00828A  6EF8               	movwf	tblptru,c
 41076  00828C  0E0F               	movlw	(high __ramtop+-1)
 41077  00828E  64F7               	cpfsgt	tblptrh,c
 41078  008290  D003               	bra	u7677
 41079  008292  0008               	tblrd		*
 41080  008294  50F5               	movf	tablat,w,c
 41081  008296  D005               	bra	u7670
 41082  008298                     u7677:
 41083  008298  CFF6 FFE9          	movff	tblptrl,fsr0l
 41084  00829C  CFF7 FFEA          	movff	tblptrh,fsr0h
 41085  0082A0  50EF               	movf	indf0,w,c
 41086  0082A2                     u7670:
 41087  0082A2  0100               	movlb	0	; () banked
 41088  0082A4  6F6A               	movwf	memcpy@tmp& (0+255),b
 41089                           
 41090                           ; BSR set to: 0
 41091  0082A6  4B68               	infsnz	memcpy@s& (0+255),f,b
 41092  0082A8  2B69               	incf	(memcpy@s+1)& (0+255),f,b
 41093                           
 41094                           ; BSR set to: 0
 41095  0082AA  C066  FFD9         	movff	memcpy@d,fsr2l
 41096  0082AE  C067  FFDA         	movff	memcpy@d+1,fsr2h
 41097  0082B2  C06A  FFDF         	movff	memcpy@tmp,indf2
 41098                           
 41099                           ; BSR set to: 0
 41100  0082B6  4B66               	infsnz	memcpy@d& (0+255),f,b
 41101  0082B8  2B67               	incf	(memcpy@d+1)& (0+255),f,b
 41102  0082BA                     l3257:
 41103                           
 41104                           ; BSR set to: 0
 41105  0082BA  0100               	movlb	0	; () banked
 41106  0082BC  0764               	decf	memcpy@n& (0+255),f,b
 41107  0082BE  A0D8               	btfss	status,0,c
 41108  0082C0  0765               	decf	(memcpy@n+1)& (0+255),f,b
 41109  0082C2  2964               	incf	memcpy@n& (0+255),w,b
 41110  0082C4  E1DD               	bnz	l8739
 41111  0082C6  2965               	incf	(memcpy@n+1)& (0+255),w,b
 41112  0082C8  B4D8               	btfsc	status,2,c
 41113  0082CA  0012               	return	
 41114  0082CC  D7D9               	goto	l3258
 41115  0082CE                     __end_of_memcpy:
 41116                           	opt stack 0
 41117                           tosu	equ	0xFFF
 41118                           tosh	equ	0xFFE
 41119                           tosl	equ	0xFFD
 41120                           pclath	equ	0xFFA
 41121                           tblptru	equ	0xFF8
 41122                           tblptrh	equ	0xFF7
 41123                           tblptrl	equ	0xFF6
 41124                           tablat	equ	0xFF5
 41125                           prodh	equ	0xFF4
 41126                           prodl	equ	0xFF3
 41127                           intcon	equ	0xFF2
 41128                           intcon2	equ	0xFF1
 41129                           intcon3	equ	0xFF0
 41130                           indf0	equ	0xFEF
 41131                           postinc0	equ	0xFEE
 41132                           plusw0	equ	0xFEB
 41133                           fsr0h	equ	0xFEA
 41134                           fsr0l	equ	0xFE9
 41135                           wreg	equ	0xFE8
 41136                           postinc1	equ	0xFE6
 41137                           postdec1	equ	0xFE5
 41138                           plusw1	equ	0xFE3
 41139                           fsr1h	equ	0xFE2
 41140                           fsr1l	equ	0xFE1
 41141                           indf2	equ	0xFDF
 41142                           postinc2	equ	0xFDE
 41143                           postdec2	equ	0xFDD
 41144                           plusw2	equ	0xFDB
 41145                           fsr2h	equ	0xFDA
 41146                           fsr2l	equ	0xFD9
 41147                           status	equ	0xFD8
 41148                           
 41149 ;; *************** function _CreateAllSoftwareTimers *****************
 41150 ;; Defined at:
 41151 ;;		line 937 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 41152 ;; Parameters:    Size  Location     Type
 41153 ;;		None
 41154 ;; Auto vars:     Size  Location     Type
 41155 ;;		None
 41156 ;; Return value:  Size  Location     Type
 41157 ;;                  1    wreg      void 
 41158 ;; Registers used:
 41159 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 41160 ;; Tracked objects:
 41161 ;;		On entry : 0/0
 41162 ;;		On exit  : 0/0
 41163 ;;		Unchanged: 0/0
 41164 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 41165 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 41166 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 41167 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 41168 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 41169 ;;Total ram usage:        0 bytes
 41170 ;; Hardware stack levels used:    1
 41171 ;; Hardware stack levels required when called:    8
 41172 ;; This function calls:
 41173 ;;		_SwTimerCreate
 41174 ;; This function is called by:
 41175 ;;		_LORAWAN_Init
 41176 ;; This function uses a non-reentrant model
 41177 ;;
 41178                           
 41179                           	psect	text200
 41180  0086EC                     __ptext200:
 41181                           	opt stack 0
 41182  0086EC                     _CreateAllSoftwareTimers:
 41183                           	opt stack 21
 41184                           
 41185                           ;lorawan_eu.c: 939: loRa.joinAccept1TimerId = SwTimerCreate();
 41186                           
 41187                           ; BSR set to: 0
 41188                           ;incstack = 0
 41189  0086EC  EC47  F03B         	call	_SwTimerCreate	;wreg free
 41190  0086F0  0102               	movlb	2	; () banked
 41191  0086F2  6FEC               	movwf	(_loRa+226)& (0+255),b
 41192                           
 41193                           ;lorawan_eu.c: 940: loRa.joinAccept2TimerId = SwTimerCreate();
 41194  0086F4  EC47  F03B         	call	_SwTimerCreate	;wreg free
 41195  0086F8  0102               	movlb	2	; () banked
 41196  0086FA  6FED               	movwf	(_loRa+227)& (0+255),b
 41197                           
 41198                           ;lorawan_eu.c: 941: loRa.receiveWindow1TimerId = SwTimerCreate();
 41199  0086FC  EC47  F03B         	call	_SwTimerCreate	;wreg free
 41200  008700  0102               	movlb	2	; () banked
 41201  008702  6FEE               	movwf	(_loRa+228)& (0+255),b
 41202                           
 41203                           ;lorawan_eu.c: 942: loRa.receiveWindow2TimerId = SwTimerCreate();
 41204  008704  EC47  F03B         	call	_SwTimerCreate	;wreg free
 41205  008708  0102               	movlb	2	; () banked
 41206  00870A  6FEF               	movwf	(_loRa+229)& (0+255),b
 41207                           
 41208                           ;lorawan_eu.c: 943: loRa.linkCheckTimerId = SwTimerCreate();
 41209  00870C  EC47  F03B         	call	_SwTimerCreate	;wreg free
 41210  008710  0102               	movlb	2	; () banked
 41211  008712  6FF1               	movwf	(_loRa+231)& (0+255),b
 41212                           
 41213                           ;lorawan_eu.c: 944: loRa.ackTimeoutTimerId = SwTimerCreate();
 41214  008714  EC47  F03B         	call	_SwTimerCreate	;wreg free
 41215  008718  0102               	movlb	2	; () banked
 41216  00871A  6FF2               	movwf	(_loRa+232)& (0+255),b
 41217                           
 41218                           ;lorawan_eu.c: 945: loRa.automaticReplyTimerId = SwTimerCreate();
 41219  00871C  EC47  F03B         	call	_SwTimerCreate	;wreg free
 41220  008720  0102               	movlb	2	; () banked
 41221  008722  6FF0               	movwf	(_loRa+230)& (0+255),b
 41222                           
 41223                           ;lorawan_eu.c: 946: loRa.unconfirmedRetransmisionTimerId = SwTimerCreate();
 41224  008724  EC47  F03B         	call	_SwTimerCreate	;wreg free
 41225  008728  0102               	movlb	2	; () banked
 41226  00872A  6FF4               	movwf	(_loRa+234)& (0+255),b
 41227                           
 41228                           ;lorawan_eu.c: 947: loRa.abpJoinTimerId = SwTimerCreate();
 41229  00872C  EC47  F03B         	call	_SwTimerCreate	;wreg free
 41230  008730  0102               	movlb	2	; () banked
 41231  008732  6FFD               	movwf	(_loRa+243)& (0+255),b
 41232                           
 41233                           ;lorawan_eu.c: 948: loRa.dutyCycleTimerId = SwTimerCreate();
 41234  008734  EC47  F03B         	call	_SwTimerCreate	;wreg free
 41235  008738  0102               	movlb	2	; () banked
 41236  00873A  6FF3               	movwf	(_loRa+233)& (0+255),b
 41237                           
 41238                           ; BSR set to: 2
 41239  00873C  0012               	return		;funcret
 41240  00873E                     __end_of_CreateAllSoftwareTimers:
 41241                           	opt stack 0
 41242                           tosu	equ	0xFFF
 41243                           tosh	equ	0xFFE
 41244                           tosl	equ	0xFFD
 41245                           pclath	equ	0xFFA
 41246                           tblptru	equ	0xFF8
 41247                           tblptrh	equ	0xFF7
 41248                           tblptrl	equ	0xFF6
 41249                           tablat	equ	0xFF5
 41250                           prodh	equ	0xFF4
 41251                           prodl	equ	0xFF3
 41252                           intcon	equ	0xFF2
 41253                           intcon2	equ	0xFF1
 41254                           intcon3	equ	0xFF0
 41255                           indf0	equ	0xFEF
 41256                           postinc0	equ	0xFEE
 41257                           plusw0	equ	0xFEB
 41258                           fsr0h	equ	0xFEA
 41259                           fsr0l	equ	0xFE9
 41260                           wreg	equ	0xFE8
 41261                           postinc1	equ	0xFE6
 41262                           postdec1	equ	0xFE5
 41263                           plusw1	equ	0xFE3
 41264                           fsr1h	equ	0xFE2
 41265                           fsr1l	equ	0xFE1
 41266                           indf2	equ	0xFDF
 41267                           postinc2	equ	0xFDE
 41268                           postdec2	equ	0xFDD
 41269                           plusw2	equ	0xFDB
 41270                           fsr2h	equ	0xFDA
 41271                           fsr2l	equ	0xFD9
 41272                           status	equ	0xFD8
 41273                           
 41274 ;; *************** function _SwTimerCreate *****************
 41275 ;; Defined at:
 41276 ;;		line 154 in file "mcc_generated_files/LoRaWAN/sw_timer.c"
 41277 ;; Parameters:    Size  Location     Type
 41278 ;;		None
 41279 ;; Auto vars:     Size  Location     Type
 41280 ;;  retVal          1    0[BANK0 ] unsigned char 
 41281 ;; Return value:  Size  Location     Type
 41282 ;;                  1    wreg      unsigned char 
 41283 ;; Registers used:
 41284 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 41285 ;; Tracked objects:
 41286 ;;		On entry : 0/0
 41287 ;;		On exit  : 0/0
 41288 ;;		Unchanged: 0/0
 41289 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 41290 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 41291 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 41292 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 41293 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 41294 ;;Total ram usage:        1 bytes
 41295 ;; Hardware stack levels used:    1
 41296 ;; Hardware stack levels required when called:    7
 41297 ;; This function calls:
 41298 ;;		Nothing
 41299 ;; This function is called by:
 41300 ;;		_RADIO_Init
 41301 ;;		_CreateAllSoftwareTimers
 41302 ;; This function uses a non-reentrant model
 41303 ;;
 41304                           
 41305                           	psect	text201
 41306  00768E                     __ptext201:
 41307                           	opt stack 0
 41308  00768E                     _SwTimerCreate:
 41309                           	opt stack 21
 41310                           
 41311                           ;sw_timer.c: 156: uint8_t retVal;
 41312                           ;sw_timer.c: 157: if (allocatedTimers < 20)
 41313                           
 41314                           ; BSR set to: 2
 41315                           ;incstack = 0
 41316  00768E  0E14               	movlw	20
 41317  007690  0101               	movlb	1	; () banked
 41318  007692  6152               	cpfslt	_allocatedTimers& (0+255),b	;volatile
 41319  007694  D040               	goto	l1549
 41320                           
 41321                           ; BSR set to: 1
 41322                           ;sw_timer.c: 158: {
 41323                           ;sw_timer.c: 159: (INTCONbits.GIE = 0);
 41324  007696  9EF2               	bcf	intcon,7,c	;volatile
 41325                           
 41326                           ;sw_timer.c: 160: retVal = allocatedTimers;
 41327  007698  C152  F060         	movff	_allocatedTimers,SwTimerCreate@retVal	;volatile
 41328                           
 41329                           ; BSR set to: 1
 41330                           ;sw_timer.c: 161: swTimers[retVal].running = 0;
 41331  00769C  0100               	movlb	0	; () banked
 41332  00769E  5160               	movf	SwTimerCreate@retVal& (0+255),w,b
 41333  0076A0  0D08               	mullw	8
 41334  0076A2  0E04               	movlw	4
 41335  0076A4  26F3               	addwf	prodl,f,c
 41336  0076A6  0E00               	movlw	0
 41337  0076A8  22F4               	addwfc	prodh,f,c
 41338  0076AA  0E00               	movlw	low _swTimers
 41339  0076AC  24F3               	addwf	prodl,w,c
 41340  0076AE  6ED9               	movwf	fsr2l,c
 41341  0076B0  0E03               	movlw	high _swTimers
 41342  0076B2  20F4               	addwfc	prodh,w,c
 41343  0076B4  6EDA               	movwf	fsr2h,c
 41344  0076B6  0E00               	movlw	0
 41345  0076B8  6EDF               	movwf	indf2,c
 41346                           
 41347                           ;sw_timer.c: 162: swTimers[retVal].ticksRemaining = 0;
 41348  0076BA  5160               	movf	SwTimerCreate@retVal& (0+255),w,b
 41349  0076BC  0D08               	mullw	8
 41350  0076BE  0E00               	movlw	low _swTimers
 41351  0076C0  24F3               	addwf	prodl,w,c
 41352  0076C2  6ED9               	movwf	fsr2l,c
 41353  0076C4  0E03               	movlw	high _swTimers
 41354  0076C6  20F4               	addwfc	prodh,w,c
 41355  0076C8  6EDA               	movwf	fsr2h,c
 41356  0076CA  6ADE               	clrf	postinc2,c
 41357  0076CC  6ADE               	clrf	postinc2,c
 41358  0076CE  6ADE               	clrf	postinc2,c
 41359  0076D0  6ADD               	clrf	postdec2,c
 41360                           
 41361                           ;sw_timer.c: 163: swTimers[retVal].callbackParameter = 0;
 41362  0076D2  5160               	movf	SwTimerCreate@retVal& (0+255),w,b
 41363  0076D4  0D08               	mullw	8
 41364  0076D6  0E05               	movlw	5
 41365  0076D8  26F3               	addwf	prodl,f,c
 41366  0076DA  0E00               	movlw	0
 41367  0076DC  22F4               	addwfc	prodh,f,c
 41368  0076DE  0E00               	movlw	low _swTimers
 41369  0076E0  24F3               	addwf	prodl,w,c
 41370  0076E2  6ED9               	movwf	fsr2l,c
 41371  0076E4  0E03               	movlw	high _swTimers
 41372  0076E6  20F4               	addwfc	prodh,w,c
 41373  0076E8  6EDA               	movwf	fsr2h,c
 41374  0076EA  0E00               	movlw	0
 41375  0076EC  6EDF               	movwf	indf2,c
 41376                           
 41377                           ;sw_timer.c: 164: swTimers[retVal].callback = (0);
 41378  0076EE  5160               	movf	SwTimerCreate@retVal& (0+255),w,b
 41379  0076F0  0D08               	mullw	8
 41380  0076F2  0E06               	movlw	6
 41381  0076F4  26F3               	addwf	prodl,f,c
 41382  0076F6  0E00               	movlw	0
 41383  0076F8  22F4               	addwfc	prodh,f,c
 41384  0076FA  0E00               	movlw	low _swTimers
 41385  0076FC  24F3               	addwf	prodl,w,c
 41386  0076FE  6ED9               	movwf	fsr2l,c
 41387  007700  0E03               	movlw	high _swTimers
 41388  007702  20F4               	addwfc	prodh,w,c
 41389  007704  6EDA               	movwf	fsr2h,c
 41390  007706  0E00               	movlw	0
 41391  007708  6EDE               	movwf	postinc2,c
 41392  00770A  0E00               	movlw	0
 41393  00770C  6EDD               	movwf	postdec2,c
 41394                           
 41395                           ; BSR set to: 0
 41396                           ;sw_timer.c: 165: allocatedTimers++;
 41397  00770E  0101               	movlb	1	; () banked
 41398  007710  2B52               	incf	_allocatedTimers& (0+255),f,b	;volatile
 41399                           
 41400                           ; BSR set to: 1
 41401                           ;sw_timer.c: 166: (INTCONbits.GIE = 1);
 41402  007712  8EF2               	bsf	intcon,7,c	;volatile
 41403                           
 41404                           ;sw_timer.c: 167: }
 41405  007714  D001               	goto	l1553
 41406  007716                     l1549:
 41407                           
 41408                           ;sw_timer.c: 171: {
 41409                           
 41410                           ; BSR set to: 1
 41411                           ;sw_timer.c: 168: else
 41412                           ;sw_timer.c: 169: {
 41413                           ;sw_timer.c: 170: while(1)
 41414  007716  D7FF               	goto	l1549
 41415  007718                     l1553:
 41416                           
 41417                           ;sw_timer.c: 175: }
 41418                           ;sw_timer.c: 176: }
 41419                           ;sw_timer.c: 177: return retVal;
 41420  007718  0100               	movlb	0	; () banked
 41421  00771A  5160               	movf	SwTimerCreate@retVal& (0+255),w,b
 41422  00771C  0012               	return	
 41423  00771E                     __end_of_SwTimerCreate:
 41424                           	opt stack 0
 41425                           tosu	equ	0xFFF
 41426                           tosh	equ	0xFFE
 41427                           tosl	equ	0xFFD
 41428                           pclath	equ	0xFFA
 41429                           tblptru	equ	0xFF8
 41430                           tblptrh	equ	0xFF7
 41431                           tblptrl	equ	0xFF6
 41432                           tablat	equ	0xFF5
 41433                           prodh	equ	0xFF4
 41434                           prodl	equ	0xFF3
 41435                           intcon	equ	0xFF2
 41436                           intcon2	equ	0xFF1
 41437                           intcon3	equ	0xFF0
 41438                           indf0	equ	0xFEF
 41439                           postinc0	equ	0xFEE
 41440                           plusw0	equ	0xFEB
 41441                           fsr0h	equ	0xFEA
 41442                           fsr0l	equ	0xFE9
 41443                           wreg	equ	0xFE8
 41444                           postinc1	equ	0xFE6
 41445                           postdec1	equ	0xFE5
 41446                           plusw1	equ	0xFE3
 41447                           fsr1h	equ	0xFE2
 41448                           fsr1l	equ	0xFE1
 41449                           indf2	equ	0xFDF
 41450                           postinc2	equ	0xFDE
 41451                           postdec2	equ	0xFDD
 41452                           plusw2	equ	0xFDB
 41453                           fsr2h	equ	0xFDA
 41454                           fsr2l	equ	0xFD9
 41455                           status	equ	0xFD8
 41456                           
 41457 ;; *************** function _EUSART1_Write *****************
 41458 ;; Defined at:
 41459 ;;		line 202 in file "mcc_generated_files/eusart1.c"
 41460 ;; Parameters:    Size  Location     Type
 41461 ;;  txData          1    wreg     unsigned char 
 41462 ;; Auto vars:     Size  Location     Type
 41463 ;;  txData          1    0[BANK0 ] unsigned char 
 41464 ;; Return value:  Size  Location     Type
 41465 ;;                  1    wreg      void 
 41466 ;; Registers used:
 41467 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 41468 ;; Tracked objects:
 41469 ;;		On entry : 0/0
 41470 ;;		On exit  : 0/0
 41471 ;;		Unchanged: 0/0
 41472 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 41473 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 41474 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 41475 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 41476 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 41477 ;;Total ram usage:        1 bytes
 41478 ;; Hardware stack levels used:    1
 41479 ;; Hardware stack levels required when called:    7
 41480 ;; This function calls:
 41481 ;;		Nothing
 41482 ;; This function is called by:
 41483 ;;		_main
 41484 ;; This function uses a non-reentrant model
 41485 ;;
 41486                           
 41487                           	psect	text202
 41488  008B8A                     __ptext202:
 41489                           	opt stack 0
 41490  008B8A                     _EUSART1_Write:
 41491                           	opt stack 23
 41492                           
 41493                           ; BSR set to: 0
 41494                           ;incstack = 0
 41495                           ;EUSART1_Write@txData stored from wreg
 41496  008B8A  0100               	movlb	0	; () banked
 41497  008B8C  6F60               	movwf	EUSART1_Write@txData& (0+255),b
 41498  008B8E                     
 41499                           ;eusart1.c: 205: {
 41500                           
 41501                           ;eusart1.c: 204: while(0 == eusart1TxBufferRemaining)
 41502  008B8E  0101               	movlb	1	; () banked
 41503  008B90  51FE               	movf	_eusart1TxBufferRemaining& (0+255),w,b	;volatile
 41504  008B92  B4D8               	btfsc	status,2,c
 41505  008B94  D7FC               	goto	l12887
 41506                           
 41507                           ; BSR set to: 1
 41508                           ;eusart1.c: 206: }
 41509                           ;eusart1.c: 208: if(0 == PIE1bits.TX1IE)
 41510  008B96  B89D               	btfsc	3997,4,c	;volatile
 41511  008B98  D003               	goto	l2540
 41512                           
 41513                           ; BSR set to: 1
 41514                           ;eusart1.c: 209: {
 41515                           ;eusart1.c: 210: TXREG1 = txData;
 41516  008B9A  C060  FFAD         	movff	EUSART1_Write@txData,4013	;volatile
 41517                           
 41518                           ;eusart1.c: 211: }
 41519  008B9E  D012               	goto	l2541
 41520  008BA0                     l2540:
 41521                           
 41522                           ; BSR set to: 1
 41523                           ;eusart1.c: 212: else
 41524                           ;eusart1.c: 213: {
 41525                           ;eusart1.c: 214: PIE1bits.TX1IE = 0;
 41526  008BA0  989D               	bcf	3997,4,c	;volatile
 41527                           
 41528                           ; BSR set to: 1
 41529                           ;eusart1.c: 215: eusart1TxBuffer[eusart1TxHead++] = txData;
 41530  008BA2  5051               	movf	_eusart1TxHead,w,c	;volatile
 41531  008BA4  0D01               	mullw	1
 41532  008BA6  0E4F               	movlw	low _eusart1TxBuffer
 41533  008BA8  24F3               	addwf	prodl,w,c
 41534  008BAA  6ED9               	movwf	fsr2l,c
 41535  008BAC  0E01               	movlw	high _eusart1TxBuffer
 41536  008BAE  20F4               	addwfc	prodh,w,c
 41537  008BB0  6EDA               	movwf	fsr2h,c
 41538  008BB2  C060  FFDF         	movff	EUSART1_Write@txData,indf2
 41539                           
 41540                           ; BSR set to: 1
 41541  008BB6  2A51               	incf	_eusart1TxHead,f,c	;volatile
 41542                           
 41543                           ; BSR set to: 1
 41544                           ;eusart1.c: 216: if(sizeof(eusart1TxBuffer) <= eusart1TxHead)
 41545  008BB8  5051               	movf	_eusart1TxHead,w,c	;volatile
 41546  008BBA  B4D8               	btfsc	status,2,c
 41547  008BBC  D002               	goto	l2542
 41548                           
 41549                           ; BSR set to: 1
 41550                           ;eusart1.c: 217: {
 41551                           ;eusart1.c: 218: eusart1TxHead = 0;
 41552  008BBE  0E00               	movlw	0
 41553  008BC0  6E51               	movwf	_eusart1TxHead,c	;volatile
 41554  008BC2                     l2542:
 41555                           
 41556                           ; BSR set to: 1
 41557                           ;eusart1.c: 219: }
 41558                           ;eusart1.c: 220: eusart1TxBufferRemaining--;
 41559                           
 41560                           ; BSR set to: 1
 41561  008BC2  07FE               	decf	_eusart1TxBufferRemaining& (0+255),f,b	;volatile
 41562  008BC4                     l2541:
 41563                           
 41564                           ; BSR set to: 1
 41565                           ;eusart1.c: 221: }
 41566                           ;eusart1.c: 222: PIE1bits.TX1IE = 1;
 41567                           
 41568                           ; BSR set to: 1
 41569  008BC4  889D               	bsf	3997,4,c	;volatile
 41570                           
 41571                           ; BSR set to: 1
 41572  008BC6  0012               	return		;funcret
 41573  008BC8                     __end_of_EUSART1_Write:
 41574                           	opt stack 0
 41575                           tosu	equ	0xFFF
 41576                           tosh	equ	0xFFE
 41577                           tosl	equ	0xFFD
 41578                           pclath	equ	0xFFA
 41579                           tblptru	equ	0xFF8
 41580                           tblptrh	equ	0xFF7
 41581                           tblptrl	equ	0xFF6
 41582                           tablat	equ	0xFF5
 41583                           prodh	equ	0xFF4
 41584                           prodl	equ	0xFF3
 41585                           intcon	equ	0xFF2
 41586                           intcon2	equ	0xFF1
 41587                           intcon3	equ	0xFF0
 41588                           indf0	equ	0xFEF
 41589                           postinc0	equ	0xFEE
 41590                           plusw0	equ	0xFEB
 41591                           fsr0h	equ	0xFEA
 41592                           fsr0l	equ	0xFE9
 41593                           wreg	equ	0xFE8
 41594                           postinc1	equ	0xFE6
 41595                           postdec1	equ	0xFE5
 41596                           plusw1	equ	0xFE3
 41597                           fsr1h	equ	0xFE2
 41598                           fsr1l	equ	0xFE1
 41599                           indf2	equ	0xFDF
 41600                           postinc2	equ	0xFDE
 41601                           postdec2	equ	0xFDD
 41602                           plusw2	equ	0xFDB
 41603                           fsr2h	equ	0xFDA
 41604                           fsr2l	equ	0xFD9
 41605                           status	equ	0xFD8
 41606                           
 41607 ;; *************** function _INTERRUPT_InterruptManager *****************
 41608 ;; Defined at:
 41609 ;;		line 58 in file "mcc_generated_files/interrupt_manager.c"
 41610 ;; Parameters:    Size  Location     Type
 41611 ;;		None
 41612 ;; Auto vars:     Size  Location     Type
 41613 ;;		None
 41614 ;; Return value:  Size  Location     Type
 41615 ;;                  1    wreg      void 
 41616 ;; Registers used:
 41617 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
 41618 ;; Tracked objects:
 41619 ;;		On entry : 0/0
 41620 ;;		On exit  : 0/0
 41621 ;;		Unchanged: 0/0
 41622 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 41623 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 41624 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 41625 ;;      Temps:         10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 41626 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 41627 ;;Total ram usage:       10 bytes
 41628 ;; Hardware stack levels used:    1
 41629 ;; Hardware stack levels required when called:    6
 41630 ;; This function calls:
 41631 ;;		Absolute function
 41632 ;;		_EUSART1_Receive_ISR
 41633 ;;		_EUSART1_Transmit_ISR
 41634 ;;		_INT1_ISR
 41635 ;;		_INT2_ISR
 41636 ;;		_PIN_MANAGER_IOC
 41637 ;;		_TMR1_ISR
 41638 ;; This function is called by:
 41639 ;;		Interrupt level 2
 41640 ;; This function uses a non-reentrant model
 41641 ;;
 41642                           
 41643                           	psect	intcode
 41644  000008                     __pintcode:
 41645                           	opt stack 0
 41646  000008                     _INTERRUPT_InterruptManager:
 41647                           	opt stack 12
 41648                           
 41649                           ; BSR set to: 1
 41650                           ;incstack = 0
 41651  000008  CFFA F034          	movff	pclath,??_INTERRUPT_InterruptManager
 41652  00000C  CFFB F035          	movff	pclatu,??_INTERRUPT_InterruptManager+1
 41653  000010  CFE9 F036          	movff	fsr0l,??_INTERRUPT_InterruptManager+2
 41654  000014  CFEA F037          	movff	fsr0h,??_INTERRUPT_InterruptManager+3
 41655  000018  CFE1 F038          	movff	fsr1l,??_INTERRUPT_InterruptManager+4
 41656  00001C  CFE2 F039          	movff	fsr1h,??_INTERRUPT_InterruptManager+5
 41657  000020  CFD9 F03A          	movff	fsr2l,??_INTERRUPT_InterruptManager+6
 41658  000024  CFDA F03B          	movff	fsr2h,??_INTERRUPT_InterruptManager+7
 41659  000028  CFF3 F03C          	movff	prodl,??_INTERRUPT_InterruptManager+8
 41660  00002C  CFF4 F03D          	movff	prodh,??_INTERRUPT_InterruptManager+9
 41661  000030  EE1A  F028         	lfsr	1,___inthi_sp
 41662                           
 41663                           ;interrupt_manager.c: 61: if(INTCON3bits.INT1IE == 1 && INTCON3bits.INT1IF == 1)
 41664  000034  B6F0               	btfsc	intcon3,3,c	;volatile
 41665  000036  A0F0               	btfss	intcon3,0,c	;volatile
 41666  000038  D003               	goto	i2l2244
 41667                           
 41668                           ;interrupt_manager.c: 62: {
 41669                           ;interrupt_manager.c: 63: INT1_ISR();
 41670  00003A  ECA3  F04A         	call	_INT1_ISR	;wreg free
 41671                           
 41672                           ;interrupt_manager.c: 64: }
 41673  00003E  D031               	goto	i2u1714_49
 41674  000040                     i2l2244:
 41675                           
 41676                           ;interrupt_manager.c: 65: else if(INTCON3bits.INT2IE == 1 && INTCON3bits.INT2IF == 1)
 41677  000040  B8F0               	btfsc	intcon3,4,c	;volatile
 41678  000042  A2F0               	btfss	intcon3,1,c	;volatile
 41679  000044  D003               	goto	i2l2246
 41680                           
 41681                           ;interrupt_manager.c: 66: {
 41682                           ;interrupt_manager.c: 67: INT2_ISR();
 41683  000046  EC9F  F04A         	call	_INT2_ISR	;wreg free
 41684                           
 41685                           ;interrupt_manager.c: 68: }
 41686  00004A  D02B               	goto	i2u1714_49
 41687  00004C                     i2l2246:
 41688                           
 41689                           ;interrupt_manager.c: 69: else if(INTCONbits.RBIE == 1 && INTCONbits.RBIF == 1)
 41690  00004C  B6F2               	btfsc	intcon,3,c	;volatile
 41691  00004E  A0F2               	btfss	intcon,0,c	;volatile
 41692  000050  D003               	goto	i2l2248
 41693                           
 41694                           ;interrupt_manager.c: 70: {
 41695                           ;interrupt_manager.c: 71: PIN_MANAGER_IOC();
 41696  000052  EC96  F04A         	call	_PIN_MANAGER_IOC	;wreg free
 41697                           
 41698                           ;interrupt_manager.c: 72: }
 41699  000056  D025               	goto	i2u1714_49
 41700  000058                     i2l2248:
 41701                           
 41702                           ;interrupt_manager.c: 73: else if(INTCONbits.PEIE == 1)
 41703  000058  ACF2               	btfss	intcon,6,c	;volatile
 41704  00005A  D023               	goto	i2u1714_49
 41705                           
 41706                           ;interrupt_manager.c: 74: {
 41707                           ;interrupt_manager.c: 75: if(PIE1bits.TMR1IE == 1 && PIR1bits.TMR1IF == 1)
 41708  00005C  B09D               	btfsc	3997,0,c	;volatile
 41709  00005E  A09E               	btfss	3998,0,c	;volatile
 41710  000060  D002               	goto	i2l2251
 41711                           
 41712                           ;interrupt_manager.c: 76: {
 41713                           ;interrupt_manager.c: 77: TMR1_ISR();
 41714  000062  ECC4  F049         	call	_TMR1_ISR	;wreg free
 41715  000066                     i2l2251:
 41716                           
 41717                           ;interrupt_manager.c: 78: }
 41718                           ;interrupt_manager.c: 79: if(PIE1bits.TX1IE == 1 && PIR1bits.TX1IF == 1)
 41719  000066  B89D               	btfsc	3997,4,c	;volatile
 41720  000068  A89E               	btfss	3998,4,c	;volatile
 41721  00006A  D00C               	goto	i2u1711_49
 41722                           
 41723                           ;interrupt_manager.c: 80: {
 41724                           ;interrupt_manager.c: 81: EUSART1_TxDefaultInterruptHandler();
 41725  00006C  D801               	call	i2u1711_48
 41726  00006E  D00A               	goto	i2u1711_49
 41727  000070                     i2u1711_48:
 41728  000070  0005               	push	
 41729  000072  6EFA               	movwf	pclath,c
 41730  000074  0103               	movlb	3	; () banked
 41731  000076  51F5               	movf	_EUSART1_TxDefaultInterruptHandler& (0+255),w,b
 41732  000078  6EFD               	movwf	tosl,c
 41733  00007A  51F6               	movf	(_EUSART1_TxDefaultInterruptHandler+1)& (0+255),w,b
 41734  00007C  6EFE               	movwf	tosh,c
 41735  00007E  6AFF               	clrf	tosu,c
 41736  000080  50FA               	movf	pclath,w,c
 41737  000082  0012               	return		;indir
 41738  000084                     i2u1711_49:
 41739                           
 41740                           ;interrupt_manager.c: 82: }
 41741                           ;interrupt_manager.c: 83: if(PIE1bits.RC1IE == 1 && PIR1bits.RC1IF == 1)
 41742  000084  BA9D               	btfsc	3997,5,c	;volatile
 41743  000086  AA9E               	btfss	3998,5,c	;volatile
 41744  000088  D00C               	goto	i2u1714_49
 41745                           
 41746                           ;interrupt_manager.c: 84: {
 41747                           ;interrupt_manager.c: 85: EUSART1_RxDefaultInterruptHandler();
 41748  00008A  D801               	call	i2u1714_48
 41749  00008C  D00A               	goto	i2u1714_49
 41750  00008E                     i2u1714_48:
 41751  00008E  0005               	push	
 41752  000090  6EFA               	movwf	pclath,c
 41753  000092  0103               	movlb	3	; () banked
 41754  000094  51F3               	movf	_EUSART1_RxDefaultInterruptHandler& (0+255),w,b
 41755  000096  6EFD               	movwf	tosl,c
 41756  000098  51F4               	movf	(_EUSART1_RxDefaultInterruptHandler+1)& (0+255),w,b
 41757  00009A  6EFE               	movwf	tosh,c
 41758  00009C  6AFF               	clrf	tosu,c
 41759  00009E  50FA               	movf	pclath,w,c
 41760  0000A0  0012               	return		;indir
 41761  0000A2                     i2u1714_49:
 41762                           
 41763                           ;interrupt_manager.c: 92: else
 41764                           ;interrupt_manager.c: 93: {
 41765                           
 41766                           ;interrupt_manager.c: 90: }
 41767                           ;interrupt_manager.c: 91: }
 41768                           
 41769                           ;interrupt_manager.c: 87: else
 41770                           ;interrupt_manager.c: 88: {
 41771                           
 41772                           ;interrupt_manager.c: 86: }
 41773  0000A2  C03D  FFF4         	movff	??_INTERRUPT_InterruptManager+9,prodh
 41774  0000A6  C03C  FFF3         	movff	??_INTERRUPT_InterruptManager+8,prodl
 41775  0000AA  C03B  FFDA         	movff	??_INTERRUPT_InterruptManager+7,fsr2h
 41776  0000AE  C03A  FFD9         	movff	??_INTERRUPT_InterruptManager+6,fsr2l
 41777  0000B2  C039  FFE2         	movff	??_INTERRUPT_InterruptManager+5,fsr1h
 41778  0000B6  C038  FFE1         	movff	??_INTERRUPT_InterruptManager+4,fsr1l
 41779  0000BA  C037  FFEA         	movff	??_INTERRUPT_InterruptManager+3,fsr0h
 41780  0000BE  C036  FFE9         	movff	??_INTERRUPT_InterruptManager+2,fsr0l
 41781  0000C2  C035  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
 41782  0000C6  C034  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
 41783  0000CA  0011               	retfie		f
 41784  0000CC                     __end_of_INTERRUPT_InterruptManager:
 41785                           	opt stack 0
 41786                           tosu	equ	0xFFF
 41787                           tosh	equ	0xFFE
 41788                           tosl	equ	0xFFD
 41789                           pclatu	equ	0xFFB
 41790                           pclath	equ	0xFFA
 41791                           tblptru	equ	0xFF8
 41792                           tblptrh	equ	0xFF7
 41793                           tblptrl	equ	0xFF6
 41794                           tablat	equ	0xFF5
 41795                           prodh	equ	0xFF4
 41796                           prodl	equ	0xFF3
 41797                           intcon	equ	0xFF2
 41798                           intcon2	equ	0xFF1
 41799                           intcon3	equ	0xFF0
 41800                           indf0	equ	0xFEF
 41801                           postinc0	equ	0xFEE
 41802                           plusw0	equ	0xFEB
 41803                           fsr0h	equ	0xFEA
 41804                           fsr0l	equ	0xFE9
 41805                           wreg	equ	0xFE8
 41806                           postinc1	equ	0xFE6
 41807                           postdec1	equ	0xFE5
 41808                           plusw1	equ	0xFE3
 41809                           fsr1h	equ	0xFE2
 41810                           fsr1l	equ	0xFE1
 41811                           indf2	equ	0xFDF
 41812                           postinc2	equ	0xFDE
 41813                           postdec2	equ	0xFDD
 41814                           plusw2	equ	0xFDB
 41815                           fsr2h	equ	0xFDA
 41816                           fsr2l	equ	0xFD9
 41817                           status	equ	0xFD8
 41818                           
 41819 ;; *************** function _TMR1_ISR *****************
 41820 ;; Defined at:
 41821 ;;		line 158 in file "mcc_generated_files/tmr1.c"
 41822 ;; Parameters:    Size  Location     Type
 41823 ;;		None
 41824 ;; Auto vars:     Size  Location     Type
 41825 ;;		None
 41826 ;; Return value:  Size  Location     Type
 41827 ;;                  1    wreg      void 
 41828 ;; Registers used:
 41829 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
 41830 ;; Tracked objects:
 41831 ;;		On entry : 0/0
 41832 ;;		On exit  : 0/0
 41833 ;;		Unchanged: 0/0
 41834 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 41835 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 41836 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 41837 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 41838 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 41839 ;;Total ram usage:        0 bytes
 41840 ;; Hardware stack levels used:    1
 41841 ;; Hardware stack levels required when called:    5
 41842 ;; This function calls:
 41843 ;;		_TMR1_CallBack
 41844 ;;		i2_TMR1_WriteTimer
 41845 ;; This function is called by:
 41846 ;;		_INTERRUPT_InterruptManager
 41847 ;; This function uses a non-reentrant model
 41848 ;;
 41849                           
 41850                           	psect	text204
 41851  009388                     __ptext204:
 41852                           	opt stack 0
 41853  009388                     _TMR1_ISR:
 41854                           	opt stack 12
 41855                           
 41856                           ;tmr1.c: 162: PIR1bits.TMR1IF = 0;
 41857                           
 41858                           ;incstack = 0
 41859  009388  909E               	bcf	3998,0,c	;volatile
 41860                           
 41861                           ;tmr1.c: 163: TMR1_WriteTimer(timer1ReloadVal);
 41862  00938A  C1FC  F001         	movff	_timer1ReloadVal,i2TMR1_WriteTimer@timerVal	;volatile
 41863  00938E  C1FD  F002         	movff	_timer1ReloadVal+1,i2TMR1_WriteTimer@timerVal+1	;volatile
 41864  009392  EC59  F049         	call	i2_TMR1_WriteTimer	;wreg free
 41865                           
 41866                           ;tmr1.c: 167: TMR1_CallBack();
 41867  009396  ECDE  F048         	call	_TMR1_CallBack	;wreg free
 41868  00939A  0012               	return		;funcret
 41869  00939C                     __end_of_TMR1_ISR:
 41870                           	opt stack 0
 41871                           tosu	equ	0xFFF
 41872                           tosh	equ	0xFFE
 41873                           tosl	equ	0xFFD
 41874                           pclatu	equ	0xFFB
 41875                           pclath	equ	0xFFA
 41876                           tblptru	equ	0xFF8
 41877                           tblptrh	equ	0xFF7
 41878                           tblptrl	equ	0xFF6
 41879                           tablat	equ	0xFF5
 41880                           prodh	equ	0xFF4
 41881                           prodl	equ	0xFF3
 41882                           intcon	equ	0xFF2
 41883                           intcon2	equ	0xFF1
 41884                           intcon3	equ	0xFF0
 41885                           indf0	equ	0xFEF
 41886                           postinc0	equ	0xFEE
 41887                           plusw0	equ	0xFEB
 41888                           fsr0h	equ	0xFEA
 41889                           fsr0l	equ	0xFE9
 41890                           wreg	equ	0xFE8
 41891                           postinc1	equ	0xFE6
 41892                           postdec1	equ	0xFE5
 41893                           plusw1	equ	0xFE3
 41894                           fsr1h	equ	0xFE2
 41895                           fsr1l	equ	0xFE1
 41896                           indf2	equ	0xFDF
 41897                           postinc2	equ	0xFDE
 41898                           postdec2	equ	0xFDD
 41899                           plusw2	equ	0xFDB
 41900                           fsr2h	equ	0xFDA
 41901                           fsr2l	equ	0xFD9
 41902                           status	equ	0xFD8
 41903                           
 41904 ;; *************** function _TMR1_CallBack *****************
 41905 ;; Defined at:
 41906 ;;		line 170 in file "mcc_generated_files/tmr1.c"
 41907 ;; Parameters:    Size  Location     Type
 41908 ;;		None
 41909 ;; Auto vars:     Size  Location     Type
 41910 ;;		None
 41911 ;; Return value:  Size  Location     Type
 41912 ;;                  1    wreg      void 
 41913 ;; Registers used:
 41914 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
 41915 ;; Tracked objects:
 41916 ;;		On entry : 0/0
 41917 ;;		On exit  : 0/0
 41918 ;;		Unchanged: 0/0
 41919 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 41920 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 41921 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 41922 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 41923 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 41924 ;;Total ram usage:        0 bytes
 41925 ;; Hardware stack levels used:    1
 41926 ;; Hardware stack levels required when called:    4
 41927 ;; This function calls:
 41928 ;;		Absolute function
 41929 ;;		_TMR1_DefaultInterruptHandler
 41930 ;;		_TMR_ISR_lora
 41931 ;; This function is called by:
 41932 ;;		_TMR1_ISR
 41933 ;; This function uses a non-reentrant model
 41934 ;;
 41935                           
 41936                           	psect	text205
 41937  0091BC                     __ptext205:
 41938                           	opt stack 0
 41939  0091BC                     _TMR1_CallBack:
 41940                           	opt stack 12
 41941                           
 41942                           ;tmr1.c: 173: if(TMR1_InterruptHandler)
 41943                           
 41944                           ;incstack = 0
 41945  0091BC  0103               	movlb	3	; () banked
 41946  0091BE  51E9               	movf	_TMR1_InterruptHandler& (0+255),w,b
 41947  0091C0  11EA               	iorwf	(_TMR1_InterruptHandler+1)& (0+255),w,b
 41948  0091C2  B4D8               	btfsc	status,2,c
 41949  0091C4  0012               	return	
 41950                           
 41951                           ; BSR set to: 3
 41952                           ;tmr1.c: 174: {
 41953                           ;tmr1.c: 175: TMR1_InterruptHandler();
 41954  0091C6  D801               	call	i2u1681_48
 41955  0091C8  0012               	return	
 41956  0091CA                     i2u1681_48:
 41957  0091CA  0005               	push	
 41958  0091CC  6EFA               	movwf	pclath,c
 41959  0091CE  51E9               	movf	_TMR1_InterruptHandler& (0+255),w,b
 41960  0091D0  6EFD               	movwf	tosl,c
 41961  0091D2  51EA               	movf	(_TMR1_InterruptHandler+1)& (0+255),w,b
 41962  0091D4  6EFE               	movwf	tosh,c
 41963  0091D6  6AFF               	clrf	tosu,c
 41964  0091D8  50FA               	movf	pclath,w,c
 41965  0091DA  0012               	return		;indir
 41966  0091DC                     __end_of_TMR1_CallBack:
 41967                           	opt stack 0
 41968                           tosu	equ	0xFFF
 41969                           tosh	equ	0xFFE
 41970                           tosl	equ	0xFFD
 41971                           pclatu	equ	0xFFB
 41972                           pclath	equ	0xFFA
 41973                           tblptru	equ	0xFF8
 41974                           tblptrh	equ	0xFF7
 41975                           tblptrl	equ	0xFF6
 41976                           tablat	equ	0xFF5
 41977                           prodh	equ	0xFF4
 41978                           prodl	equ	0xFF3
 41979                           intcon	equ	0xFF2
 41980                           intcon2	equ	0xFF1
 41981                           intcon3	equ	0xFF0
 41982                           indf0	equ	0xFEF
 41983                           postinc0	equ	0xFEE
 41984                           plusw0	equ	0xFEB
 41985                           fsr0h	equ	0xFEA
 41986                           fsr0l	equ	0xFE9
 41987                           wreg	equ	0xFE8
 41988                           postinc1	equ	0xFE6
 41989                           postdec1	equ	0xFE5
 41990                           plusw1	equ	0xFE3
 41991                           fsr1h	equ	0xFE2
 41992                           fsr1l	equ	0xFE1
 41993                           indf2	equ	0xFDF
 41994                           postinc2	equ	0xFDE
 41995                           postdec2	equ	0xFDD
 41996                           plusw2	equ	0xFDB
 41997                           fsr2h	equ	0xFDA
 41998                           fsr2l	equ	0xFD9
 41999                           status	equ	0xFD8
 42000                           
 42001 ;; *************** function _TMR1_DefaultInterruptHandler *****************
 42002 ;; Defined at:
 42003 ;;		line 183 in file "mcc_generated_files/tmr1.c"
 42004 ;; Parameters:    Size  Location     Type
 42005 ;;		None
 42006 ;; Auto vars:     Size  Location     Type
 42007 ;;		None
 42008 ;; Return value:  Size  Location     Type
 42009 ;;                  1    wreg      void 
 42010 ;; Registers used:
 42011 ;;		None
 42012 ;; Tracked objects:
 42013 ;;		On entry : 0/0
 42014 ;;		On exit  : 0/0
 42015 ;;		Unchanged: 0/0
 42016 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 42017 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 42018 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 42019 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 42020 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 42021 ;;Total ram usage:        0 bytes
 42022 ;; Hardware stack levels used:    1
 42023 ;; This function calls:
 42024 ;;		Nothing
 42025 ;; This function is called by:
 42026 ;;		_TMR1_Initialize
 42027 ;;		_TMR1_CallBack
 42028 ;; This function uses a non-reentrant model
 42029 ;;
 42030                           
 42031                           	psect	text206
 42032  0095A6                     __ptext206:
 42033                           	opt stack 0
 42034  0095A6                     _TMR1_DefaultInterruptHandler:
 42035                           	opt stack 15
 42036                           
 42037                           ;incstack = 0
 42038  0095A6  0012               	return		;funcret
 42039  0095A8                     __end_of_TMR1_DefaultInterruptHandler:
 42040                           	opt stack 0
 42041                           tosu	equ	0xFFF
 42042                           tosh	equ	0xFFE
 42043                           tosl	equ	0xFFD
 42044                           pclatu	equ	0xFFB
 42045                           pclath	equ	0xFFA
 42046                           tblptru	equ	0xFF8
 42047                           tblptrh	equ	0xFF7
 42048                           tblptrl	equ	0xFF6
 42049                           tablat	equ	0xFF5
 42050                           prodh	equ	0xFF4
 42051                           prodl	equ	0xFF3
 42052                           intcon	equ	0xFF2
 42053                           intcon2	equ	0xFF1
 42054                           intcon3	equ	0xFF0
 42055                           indf0	equ	0xFEF
 42056                           postinc0	equ	0xFEE
 42057                           plusw0	equ	0xFEB
 42058                           fsr0h	equ	0xFEA
 42059                           fsr0l	equ	0xFE9
 42060                           wreg	equ	0xFE8
 42061                           postinc1	equ	0xFE6
 42062                           postdec1	equ	0xFE5
 42063                           plusw1	equ	0xFE3
 42064                           fsr1h	equ	0xFE2
 42065                           fsr1l	equ	0xFE1
 42066                           indf2	equ	0xFDF
 42067                           postinc2	equ	0xFDE
 42068                           postdec2	equ	0xFDD
 42069                           plusw2	equ	0xFDB
 42070                           fsr2h	equ	0xFDA
 42071                           fsr2l	equ	0xFD9
 42072                           status	equ	0xFD8
 42073                           
 42074 ;; *************** function _TMR_ISR_lora *****************
 42075 ;; Defined at:
 42076 ;;		line 59 in file "mcc_generated_files/LoRaWAN/tmr_lora_addons.c"
 42077 ;; Parameters:    Size  Location     Type
 42078 ;;		None
 42079 ;; Auto vars:     Size  Location     Type
 42080 ;;		None
 42081 ;; Return value:  Size  Location     Type
 42082 ;;                  1    wreg      void 
 42083 ;; Registers used:
 42084 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 42085 ;; Tracked objects:
 42086 ;;		On entry : 0/0
 42087 ;;		On exit  : 0/0
 42088 ;;		Unchanged: 0/0
 42089 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 42090 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 42091 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 42092 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 42093 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 42094 ;;Total ram usage:        2 bytes
 42095 ;; Hardware stack levels used:    1
 42096 ;; Hardware stack levels required when called:    3
 42097 ;; This function calls:
 42098 ;;		i2_SwTimersInterrupt
 42099 ;;		i2_TMR_SwapTimer
 42100 ;; This function is called by:
 42101 ;;		_TMR_ISR_Lora_Init
 42102 ;;		_TMR1_CallBack
 42103 ;; This function uses a non-reentrant model
 42104 ;;
 42105                           
 42106                           	psect	text207
 42107  0084F2                     __ptext207:
 42108                           	opt stack 0
 42109  0084F2                     _TMR_ISR_lora:
 42110                           	opt stack 12
 42111                           
 42112                           ;tmr_lora_addons.c: 61: timerOverflow = 1;
 42113                           
 42114                           ;incstack = 0
 42115  0084F2  0E01               	movlw	1
 42116  0084F4  6E53               	movwf	_timerOverflow,c	;volatile
 42117                           
 42118                           ;tmr_lora_addons.c: 63: ticksToScheduledInterrupt = SwTimersInterrupt();
 42119  0084F6  EC5A  F031         	call	i2_SwTimersInterrupt	;wreg free
 42120  0084FA  C021  F054         	movff	?i2_SwTimersInterrupt,_ticksToScheduledInterrupt	;volatile
 42121  0084FE  C022  F055         	movff	?i2_SwTimersInterrupt+1,_ticksToScheduledInterrupt+1	;volatile
 42122  008502  C023  F056         	movff	?i2_SwTimersInterrupt+2,_ticksToScheduledInterrupt+2	;volatile
 42123  008506  C024  F057         	movff	?i2_SwTimersInterrupt+3,_ticksToScheduledInterrupt+3	;volatile
 42124                           
 42125                           ;tmr_lora_addons.c: 65: if (ticksToScheduledInterrupt < ((uint32_t)0x10000))
 42126  00850A  5057               	movf	_ticksToScheduledInterrupt+3,w,c	;volatile
 42127  00850C  E11D               	bnz	i2l2171
 42128  00850E  0456               	decf	_ticksToScheduledInterrupt+2,w,c	;volatile
 42129  008510  B0D8               	btfsc	status,0,c
 42130  008512  0012               	return	
 42131                           
 42132                           ;tmr_lora_addons.c: 66: {
 42133                           ;tmr_lora_addons.c: 67: reloadVal = ((uint32_t)0x10000) - ticksToScheduledInterrupt;
 42134  008514  C054  F032         	movff	_ticksToScheduledInterrupt,??_TMR_ISR_lora	;volatile
 42135  008518  C055  F033         	movff	_ticksToScheduledInterrupt+1,??_TMR_ISR_lora+1	;volatile
 42136  00851C  1E32               	comf	??_TMR_ISR_lora,f,c
 42137  00851E  1E33               	comf	??_TMR_ISR_lora+1,f,c
 42138  008520  4A32               	infsnz	??_TMR_ISR_lora,f,c
 42139  008522  2A33               	incf	??_TMR_ISR_lora+1,f,c
 42140  008524  C032  F04C         	movff	??_TMR_ISR_lora,_reloadVal	;volatile
 42141  008528  C033  F04D         	movff	??_TMR_ISR_lora+1,_reloadVal+1	;volatile
 42142                           
 42143                           ;tmr_lora_addons.c: 68: ticksAdded = TMR_SwapTimer(reloadVal);
 42144  00852C  C04C  F009         	movff	_reloadVal,i2TMR_SwapTimer@timerVal	;volatile
 42145  008530  C04D  F00A         	movff	_reloadVal+1,i2TMR_SwapTimer@timerVal+1	;volatile
 42146  008534  EC23  F045         	call	i2_TMR_SwapTimer	;wreg free
 42147  008538  C009  F108         	movff	?i2_TMR_SwapTimer,_ticksAdded	;volatile
 42148  00853C  C00A  F109         	movff	?i2_TMR_SwapTimer+1,_ticksAdded+1	;volatile
 42149  008540  0101               	movlb	1	; () banked
 42150  008542  6B0A               	clrf	(_ticksAdded+2)& (0+255),b	;volatile
 42151  008544  6B0B               	clrf	(_ticksAdded+3)& (0+255),b	;volatile
 42152  008546  0012               	return	
 42153  008548                     i2l2171:
 42154  008548  0012               	return		;funcret
 42155  00854A                     __end_of_TMR_ISR_lora:
 42156                           	opt stack 0
 42157                           tosu	equ	0xFFF
 42158                           tosh	equ	0xFFE
 42159                           tosl	equ	0xFFD
 42160                           pclatu	equ	0xFFB
 42161                           pclath	equ	0xFFA
 42162                           tblptru	equ	0xFF8
 42163                           tblptrh	equ	0xFF7
 42164                           tblptrl	equ	0xFF6
 42165                           tablat	equ	0xFF5
 42166                           prodh	equ	0xFF4
 42167                           prodl	equ	0xFF3
 42168                           intcon	equ	0xFF2
 42169                           intcon2	equ	0xFF1
 42170                           intcon3	equ	0xFF0
 42171                           indf0	equ	0xFEF
 42172                           postinc0	equ	0xFEE
 42173                           plusw0	equ	0xFEB
 42174                           fsr0h	equ	0xFEA
 42175                           fsr0l	equ	0xFE9
 42176                           wreg	equ	0xFE8
 42177                           postinc1	equ	0xFE6
 42178                           postdec1	equ	0xFE5
 42179                           plusw1	equ	0xFE3
 42180                           fsr1h	equ	0xFE2
 42181                           fsr1l	equ	0xFE1
 42182                           indf2	equ	0xFDF
 42183                           postinc2	equ	0xFDE
 42184                           postdec2	equ	0xFDD
 42185                           plusw2	equ	0xFDB
 42186                           fsr2h	equ	0xFDA
 42187                           fsr2l	equ	0xFD9
 42188                           status	equ	0xFD8
 42189                           
 42190 ;; *************** function i2_TMR_SwapTimer *****************
 42191 ;; Defined at:
 42192 ;;		line 112 in file "mcc_generated_files/LoRaWAN/sw_timer.c"
 42193 ;; Parameters:    Size  Location     Type
 42194 ;;  timerVal        2    8[COMRAM] unsigned int 
 42195 ;; Auto vars:     Size  Location     Type
 42196 ;;		None
 42197 ;; Return value:  Size  Location     Type
 42198 ;;                  2    8[COMRAM] unsigned int 
 42199 ;; Registers used:
 42200 ;;		wreg, status,2, status,0, cstack
 42201 ;; Tracked objects:
 42202 ;;		On entry : 0/0
 42203 ;;		On exit  : 0/0
 42204 ;;		Unchanged: 0/0
 42205 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 42206 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 42207 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 42208 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 42209 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 42210 ;;Total ram usage:        2 bytes
 42211 ;; Hardware stack levels used:    1
 42212 ;; Hardware stack levels required when called:    1
 42213 ;; This function calls:
 42214 ;;		i2_TMR1_ReadTimer
 42215 ;;		i2_TMR1_WriteTimer
 42216 ;; This function is called by:
 42217 ;;		_TMR_ISR_lora
 42218 ;; This function uses a non-reentrant model
 42219 ;;
 42220                           
 42221                           	psect	text208
 42222  008A46                     __ptext208:
 42223                           	opt stack 0
 42224  008A46                     i2_TMR_SwapTimer:
 42225                           	opt stack 13
 42226                           
 42227                           ;sw_timer.c: 114: static uint16_t oldVal;
 42228                           ;sw_timer.c: 115: static uint16_t retVal;
 42229                           ;sw_timer.c: 117: oldVal = TMR1_ReadTimer();
 42230                           
 42231                           ;incstack = 0
 42232  008A46  ECEE  F048         	call	i2_TMR1_ReadTimer	;wreg free
 42233  008A4A  C001  F146         	movff	?i2_TMR1_ReadTimer,TMR_SwapTimer@oldVal
 42234  008A4E  C002  F147         	movff	?i2_TMR1_ReadTimer+1,TMR_SwapTimer@oldVal+1
 42235  008A52                     
 42236                           ;sw_timer.c: 123: ;
 42237  008A52  ECEE  F048         	call	i2_TMR1_ReadTimer	;wreg free
 42238  008A56  0101               	movlb	1	; () banked
 42239  008A58  5146               	movf	TMR_SwapTimer@oldVal& (0+255),w,b
 42240  008A5A  1801               	xorwf	?i2_TMR1_ReadTimer,w,c
 42241  008A5C  E104               	bnz	i2l11737
 42242  008A5E  5147               	movf	(TMR_SwapTimer@oldVal+1)& (0+255),w,b
 42243  008A60  1802               	xorwf	?i2_TMR1_ReadTimer+1,w,c
 42244  008A62  B4D8               	btfsc	status,2,c
 42245  008A64  D7F6               	goto	i2l1535
 42246  008A66                     i2l11737:
 42247                           
 42248                           ; BSR set to: 1
 42249                           ;sw_timer.c: 125: TMR1_WriteTimer(timerVal);
 42250  008A66  C009  F001         	movff	i2TMR_SwapTimer@timerVal,i2TMR1_WriteTimer@timerVal
 42251  008A6A  C00A  F002         	movff	i2TMR_SwapTimer@timerVal+1,i2TMR1_WriteTimer@timerVal+1
 42252  008A6E  EC59  F049         	call	i2_TMR1_WriteTimer	;wreg free
 42253                           
 42254                           ;sw_timer.c: 128: oldVal++;
 42255  008A72  0101               	movlb	1	; () banked
 42256  008A74  4B46               	infsnz	TMR_SwapTimer@oldVal& (0+255),f,b
 42257  008A76  2B47               	incf	(TMR_SwapTimer@oldVal+1)& (0+255),f,b
 42258                           
 42259                           ; BSR set to: 1
 42260                           ;sw_timer.c: 130: retVal = oldVal;
 42261  008A78  C146  F144         	movff	TMR_SwapTimer@oldVal,TMR_SwapTimer@retVal
 42262  008A7C  C147  F145         	movff	TMR_SwapTimer@oldVal+1,TMR_SwapTimer@retVal+1
 42263                           
 42264                           ; BSR set to: 1
 42265                           ;sw_timer.c: 132: return retVal;
 42266  008A80  C144  F009         	movff	TMR_SwapTimer@retVal,?i2_TMR_SwapTimer
 42267  008A84  C145  F00A         	movff	TMR_SwapTimer@retVal+1,?i2_TMR_SwapTimer+1
 42268  008A88  0012               	return	
 42269  008A8A                     __end_ofi2_TMR_SwapTimer:
 42270                           	opt stack 0
 42271                           tosu	equ	0xFFF
 42272                           tosh	equ	0xFFE
 42273                           tosl	equ	0xFFD
 42274                           pclatu	equ	0xFFB
 42275                           pclath	equ	0xFFA
 42276                           tblptru	equ	0xFF8
 42277                           tblptrh	equ	0xFF7
 42278                           tblptrl	equ	0xFF6
 42279                           tablat	equ	0xFF5
 42280                           prodh	equ	0xFF4
 42281                           prodl	equ	0xFF3
 42282                           intcon	equ	0xFF2
 42283                           intcon2	equ	0xFF1
 42284                           intcon3	equ	0xFF0
 42285                           indf0	equ	0xFEF
 42286                           postinc0	equ	0xFEE
 42287                           plusw0	equ	0xFEB
 42288                           fsr0h	equ	0xFEA
 42289                           fsr0l	equ	0xFE9
 42290                           wreg	equ	0xFE8
 42291                           postinc1	equ	0xFE6
 42292                           postdec1	equ	0xFE5
 42293                           plusw1	equ	0xFE3
 42294                           fsr1h	equ	0xFE2
 42295                           fsr1l	equ	0xFE1
 42296                           indf2	equ	0xFDF
 42297                           postinc2	equ	0xFDE
 42298                           postdec2	equ	0xFDD
 42299                           plusw2	equ	0xFDB
 42300                           fsr2h	equ	0xFDA
 42301                           fsr2l	equ	0xFD9
 42302                           status	equ	0xFD8
 42303                           
 42304 ;; *************** function i2_TMR1_WriteTimer *****************
 42305 ;; Defined at:
 42306 ;;		line 121 in file "mcc_generated_files/tmr1.c"
 42307 ;; Parameters:    Size  Location     Type
 42308 ;;  timerVal        2    0[COMRAM] unsigned int 
 42309 ;; Auto vars:     Size  Location     Type
 42310 ;;		None
 42311 ;; Return value:  Size  Location     Type
 42312 ;;                  1    wreg      void 
 42313 ;; Registers used:
 42314 ;;		wreg, status,2
 42315 ;; Tracked objects:
 42316 ;;		On entry : 0/0
 42317 ;;		On exit  : 0/0
 42318 ;;		Unchanged: 0/0
 42319 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 42320 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 42321 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 42322 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 42323 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 42324 ;;Total ram usage:        2 bytes
 42325 ;; Hardware stack levels used:    1
 42326 ;; This function calls:
 42327 ;;		Nothing
 42328 ;; This function is called by:
 42329 ;;		_TMR1_ISR
 42330 ;;		i2_TMR_SwapTimer
 42331 ;; This function uses a non-reentrant model
 42332 ;;
 42333                           
 42334                           	psect	text209
 42335  0092B2                     __ptext209:
 42336                           	opt stack 0
 42337  0092B2                     i2_TMR1_WriteTimer:
 42338                           	opt stack 16
 42339                           
 42340                           ;tmr1.c: 123: if (T1CONbits.T1SYNC == 1)
 42341                           
 42342                           ; BSR set to: 1
 42343                           ;incstack = 0
 42344  0092B2  A4CD               	btfss	4045,2,c	;volatile
 42345  0092B4  D007               	goto	i2l2627
 42346                           
 42347                           ;tmr1.c: 124: {
 42348                           ;tmr1.c: 126: T1CONbits.TMR1ON = 0;
 42349  0092B6  90CD               	bcf	4045,0,c	;volatile
 42350                           
 42351                           ;tmr1.c: 129: TMR1H = (timerVal >> 8);
 42352  0092B8  5002               	movf	i2TMR1_WriteTimer@timerVal+1,w,c
 42353  0092BA  6ECF               	movwf	4047,c	;volatile
 42354                           
 42355                           ;tmr1.c: 130: TMR1L = (uint8_t) timerVal;
 42356  0092BC  C001  FFCE         	movff	i2TMR1_WriteTimer@timerVal,4046	;volatile
 42357                           
 42358                           ;tmr1.c: 133: T1CONbits.TMR1ON =1;
 42359  0092C0  80CD               	bsf	4045,0,c	;volatile
 42360                           
 42361                           ;tmr1.c: 134: }
 42362  0092C2  0012               	return	
 42363  0092C4                     i2l2627:
 42364                           
 42365                           ;tmr1.c: 135: else
 42366                           ;tmr1.c: 136: {
 42367                           ;tmr1.c: 138: TMR1H = (timerVal >> 8);
 42368  0092C4  5002               	movf	i2TMR1_WriteTimer@timerVal+1,w,c
 42369  0092C6  6ECF               	movwf	4047,c	;volatile
 42370                           
 42371                           ;tmr1.c: 139: TMR1L = (uint8_t) timerVal;
 42372  0092C8  C001  FFCE         	movff	i2TMR1_WriteTimer@timerVal,4046	;volatile
 42373  0092CC  0012               	return	
 42374  0092CE                     __end_ofi2_TMR1_WriteTimer:
 42375                           	opt stack 0
 42376                           tosu	equ	0xFFF
 42377                           tosh	equ	0xFFE
 42378                           tosl	equ	0xFFD
 42379                           pclatu	equ	0xFFB
 42380                           pclath	equ	0xFFA
 42381                           tblptru	equ	0xFF8
 42382                           tblptrh	equ	0xFF7
 42383                           tblptrl	equ	0xFF6
 42384                           tablat	equ	0xFF5
 42385                           prodh	equ	0xFF4
 42386                           prodl	equ	0xFF3
 42387                           intcon	equ	0xFF2
 42388                           intcon2	equ	0xFF1
 42389                           intcon3	equ	0xFF0
 42390                           indf0	equ	0xFEF
 42391                           postinc0	equ	0xFEE
 42392                           plusw0	equ	0xFEB
 42393                           fsr0h	equ	0xFEA
 42394                           fsr0l	equ	0xFE9
 42395                           wreg	equ	0xFE8
 42396                           postinc1	equ	0xFE6
 42397                           postdec1	equ	0xFE5
 42398                           plusw1	equ	0xFE3
 42399                           fsr1h	equ	0xFE2
 42400                           fsr1l	equ	0xFE1
 42401                           indf2	equ	0xFDF
 42402                           postinc2	equ	0xFDE
 42403                           postdec2	equ	0xFDD
 42404                           plusw2	equ	0xFDB
 42405                           fsr2h	equ	0xFDA
 42406                           fsr2l	equ	0xFD9
 42407                           status	equ	0xFD8
 42408                           
 42409 ;; *************** function i2_SwTimersInterrupt *****************
 42410 ;; Defined at:
 42411 ;;		line 287 in file "mcc_generated_files/LoRaWAN/sw_timer.c"
 42412 ;; Parameters:    Size  Location     Type
 42413 ;;		None
 42414 ;; Auto vars:     Size  Location     Type
 42415 ;;  SwTimersInte    4   44[COMRAM] unsigned long 
 42416 ;;  SwTimersInte    4   40[COMRAM] unsigned long 
 42417 ;;  SwTimersInte    1   48[COMRAM] unsigned char 
 42418 ;; Return value:  Size  Location     Type
 42419 ;;                  4   32[COMRAM] unsigned long 
 42420 ;; Registers used:
 42421 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 42422 ;; Tracked objects:
 42423 ;;		On entry : 0/0
 42424 ;;		On exit  : 0/0
 42425 ;;		Unchanged: 0/0
 42426 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 42427 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 42428 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 42429 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 42430 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 42431 ;;Total ram usage:       17 bytes
 42432 ;; Hardware stack levels used:    1
 42433 ;; Hardware stack levels required when called:    2
 42434 ;; This function calls:
 42435 ;;		i2_TMR_GetDeltaTime
 42436 ;; This function is called by:
 42437 ;;		_TMR_ISR_lora
 42438 ;; This function uses a non-reentrant model
 42439 ;;
 42440                           
 42441                           	psect	text210
 42442  0062B4                     __ptext210:
 42443                           	opt stack 0
 42444  0062B4                     i2_SwTimersInterrupt:
 42445                           	opt stack 12
 42446                           
 42447                           ;sw_timer.c: 289: uint8_t i;
 42448                           ;sw_timer.c: 290: uint32_t timeElapsed;
 42449                           ;sw_timer.c: 291: uint32_t ticksToNextTimerEvent = 0xFFFFFFFF;
 42450                           
 42451                           ;incstack = 0
 42452  0062B4  682D               	setf	i2SwTimersInterrupt@ticksToNextTimerEvent,c
 42453  0062B6  682E               	setf	i2SwTimersInterrupt@ticksToNextTimerEvent+1,c
 42454  0062B8  682F               	setf	i2SwTimersInterrupt@ticksToNextTimerEvent+2,c
 42455  0062BA  6830               	setf	i2SwTimersInterrupt@ticksToNextTimerEvent+3,c
 42456                           
 42457                           ;sw_timer.c: 295: timeElapsed = TMR_GetDeltaTime();
 42458  0062BC  ECD3  F029         	call	i2_TMR_GetDeltaTime	;wreg free
 42459  0062C0  C009  F029         	movff	?i2_TMR_GetDeltaTime,i2SwTimersInterrupt@timeElapsed
 42460  0062C4  C00A  F02A         	movff	?i2_TMR_GetDeltaTime+1,i2SwTimersInterrupt@timeElapsed+1
 42461  0062C8  C00B  F02B         	movff	?i2_TMR_GetDeltaTime+2,i2SwTimersInterrupt@timeElapsed+2
 42462  0062CC  C00C  F02C         	movff	?i2_TMR_GetDeltaTime+3,i2SwTimersInterrupt@timeElapsed+3
 42463                           
 42464                           ;sw_timer.c: 297: for (i = 0; i < allocatedTimers; i++)
 42465  0062D0  0E00               	movlw	0
 42466  0062D2  6E31               	movwf	i2SwTimersInterrupt@i,c
 42467  0062D4  D061               	goto	i2l1592
 42468  0062D6                     
 42469                           ;sw_timer.c: 298: {
 42470                           ;sw_timer.c: 301: if (swTimers[i].running == 1)
 42471  0062D6  5031               	movf	i2SwTimersInterrupt@i,w,c
 42472  0062D8  0D08               	mullw	8
 42473  0062DA  0E04               	movlw	4
 42474  0062DC  26F3               	addwf	prodl,f,c
 42475  0062DE  0E00               	movlw	0
 42476  0062E0  22F4               	addwfc	prodh,f,c
 42477  0062E2  0E00               	movlw	low _swTimers
 42478  0062E4  24F3               	addwf	prodl,w,c
 42479  0062E6  6ED9               	movwf	fsr2l,c
 42480  0062E8  0E03               	movlw	high _swTimers
 42481  0062EA  20F4               	addwfc	prodh,w,c
 42482  0062EC  6EDA               	movwf	fsr2h,c
 42483  0062EE  04DE               	decf	postinc2,w,c
 42484  0062F0  A4D8               	btfss	status,2,c
 42485  0062F2  D051               	goto	i2l1597
 42486                           
 42487                           ;sw_timer.c: 302: {
 42488                           ;sw_timer.c: 303: if (swTimers[i].ticksRemaining <= timeElapsed)
 42489  0062F4  5031               	movf	i2SwTimersInterrupt@i,w,c
 42490  0062F6  0D08               	mullw	8
 42491  0062F8  0E00               	movlw	low _swTimers
 42492  0062FA  24F3               	addwf	prodl,w,c
 42493  0062FC  6ED9               	movwf	fsr2l,c
 42494  0062FE  0E03               	movlw	high _swTimers
 42495  006300  20F4               	addwfc	prodh,w,c
 42496  006302  6EDA               	movwf	fsr2h,c
 42497  006304  50DE               	movf	postinc2,w,c
 42498  006306  5C29               	subwf	i2SwTimersInterrupt@timeElapsed,w,c
 42499  006308  50DE               	movf	postinc2,w,c
 42500  00630A  582A               	subwfb	i2SwTimersInterrupt@timeElapsed+1,w,c
 42501  00630C  50DE               	movf	postinc2,w,c
 42502  00630E  582B               	subwfb	i2SwTimersInterrupt@timeElapsed+2,w,c
 42503  006310  50DE               	movf	postinc2,w,c
 42504  006312  582C               	subwfb	i2SwTimersInterrupt@timeElapsed+3,w,c
 42505  006314  A0D8               	btfss	status,0,c
 42506  006316  D00D               	goto	i2l1595
 42507                           
 42508                           ;sw_timer.c: 304: {
 42509                           ;sw_timer.c: 305: swTimers[i].ticksRemaining = 0;
 42510  006318  5031               	movf	i2SwTimersInterrupt@i,w,c
 42511  00631A  0D08               	mullw	8
 42512  00631C  0E00               	movlw	low _swTimers
 42513  00631E  24F3               	addwf	prodl,w,c
 42514  006320  6ED9               	movwf	fsr2l,c
 42515  006322  0E03               	movlw	high _swTimers
 42516  006324  20F4               	addwfc	prodh,w,c
 42517  006326  6EDA               	movwf	fsr2h,c
 42518  006328  6ADE               	clrf	postinc2,c
 42519  00632A  6ADE               	clrf	postinc2,c
 42520  00632C  6ADE               	clrf	postinc2,c
 42521  00632E  6ADD               	clrf	postdec2,c
 42522                           
 42523                           ;sw_timer.c: 306: }
 42524  006330  D032               	goto	i2l1597
 42525  006332                     i2l1595:
 42526                           
 42527                           ;sw_timer.c: 307: else
 42528                           ;sw_timer.c: 308: {
 42529                           ;sw_timer.c: 309: swTimers[i].ticksRemaining -= timeElapsed;
 42530  006332  5031               	movf	i2SwTimersInterrupt@i,w,c
 42531  006334  0D08               	mullw	8
 42532  006336  0E00               	movlw	low _swTimers
 42533  006338  24F3               	addwf	prodl,w,c
 42534  00633A  6ED9               	movwf	fsr2l,c
 42535  00633C  0E03               	movlw	high _swTimers
 42536  00633E  20F4               	addwfc	prodh,w,c
 42537  006340  6EDA               	movwf	fsr2h,c
 42538  006342  5029               	movf	i2SwTimersInterrupt@timeElapsed,w,c
 42539  006344  5EDE               	subwf	postinc2,f,c
 42540  006346  502A               	movf	i2SwTimersInterrupt@timeElapsed+1,w,c
 42541  006348  5ADE               	subwfb	postinc2,f,c
 42542  00634A  502B               	movf	i2SwTimersInterrupt@timeElapsed+2,w,c
 42543  00634C  5ADE               	subwfb	postinc2,f,c
 42544  00634E  502C               	movf	i2SwTimersInterrupt@timeElapsed+3,w,c
 42545  006350  5ADE               	subwfb	postinc2,f,c
 42546                           
 42547                           ;sw_timer.c: 312: if (swTimers[i].ticksRemaining < ticksToNextTimerEvent)
 42548  006352  5031               	movf	i2SwTimersInterrupt@i,w,c
 42549  006354  0D08               	mullw	8
 42550  006356  0E00               	movlw	low _swTimers
 42551  006358  24F3               	addwf	prodl,w,c
 42552  00635A  6ED9               	movwf	fsr2l,c
 42553  00635C  0E03               	movlw	high _swTimers
 42554  00635E  20F4               	addwfc	prodh,w,c
 42555  006360  6EDA               	movwf	fsr2h,c
 42556  006362  502D               	movf	i2SwTimersInterrupt@ticksToNextTimerEvent,w,c
 42557  006364  5CDE               	subwf	postinc2,w,c
 42558  006366  502E               	movf	i2SwTimersInterrupt@ticksToNextTimerEvent+1,w,c
 42559  006368  58DE               	subwfb	postinc2,w,c
 42560  00636A  502F               	movf	i2SwTimersInterrupt@ticksToNextTimerEvent+2,w,c
 42561  00636C  58DE               	subwfb	postinc2,w,c
 42562  00636E  5030               	movf	i2SwTimersInterrupt@ticksToNextTimerEvent+3,w,c
 42563  006370  58DE               	subwfb	postinc2,w,c
 42564  006372  B0D8               	btfsc	status,0,c
 42565  006374  D010               	goto	i2l1597
 42566                           
 42567                           ;sw_timer.c: 313: {
 42568                           ;sw_timer.c: 314: ticksToNextTimerEvent = swTimers[i].ticksRemaining;
 42569  006376  5031               	movf	i2SwTimersInterrupt@i,w,c
 42570  006378  0D08               	mullw	8
 42571  00637A  0E00               	movlw	low _swTimers
 42572  00637C  24F3               	addwf	prodl,w,c
 42573  00637E  6ED9               	movwf	fsr2l,c
 42574  006380  0E03               	movlw	high _swTimers
 42575  006382  20F4               	addwfc	prodh,w,c
 42576  006384  6EDA               	movwf	fsr2h,c
 42577  006386  CFDE F02D          	movff	postinc2,i2SwTimersInterrupt@ticksToNextTimerEvent
 42578  00638A  CFDE F02E          	movff	postinc2,i2SwTimersInterrupt@ticksToNextTimerEvent+1
 42579  00638E  CFDE F02F          	movff	postinc2,i2SwTimersInterrupt@ticksToNextTimerEvent+2
 42580  006392  CFDE F030          	movff	postinc2,i2SwTimersInterrupt@ticksToNextTimerEvent+3
 42581  006396                     i2l1597:
 42582  006396  2A31               	incf	i2SwTimersInterrupt@i,f,c
 42583  006398                     i2l1592:
 42584  006398  0101               	movlb	1	; () banked
 42585  00639A  5152               	movf	_allocatedTimers& (0+255),w,b	;volatile
 42586  00639C  5C31               	subwf	i2SwTimersInterrupt@i,w,c
 42587  00639E  A0D8               	btfss	status,0,c
 42588  0063A0  D79A               	goto	i2l1593
 42589                           
 42590                           ; BSR set to: 1
 42591                           ;sw_timer.c: 315: }
 42592                           ;sw_timer.c: 316: }
 42593                           ;sw_timer.c: 317: }
 42594                           ;sw_timer.c: 318: }
 42595                           ;sw_timer.c: 320: return ticksToNextTimerEvent;
 42596  0063A2  C02D  F021         	movff	i2SwTimersInterrupt@ticksToNextTimerEvent,?i2_SwTimersInterrupt
 42597  0063A6  C02E  F022         	movff	i2SwTimersInterrupt@ticksToNextTimerEvent+1,?i2_SwTimersInterrupt+1
 42598  0063AA  C02F  F023         	movff	i2SwTimersInterrupt@ticksToNextTimerEvent+2,?i2_SwTimersInterrupt+2
 42599  0063AE  C030  F024         	movff	i2SwTimersInterrupt@ticksToNextTimerEvent+3,?i2_SwTimersInterrupt+3
 42600                           
 42601                           ; BSR set to: 1
 42602  0063B2  0012               	return		;funcret
 42603  0063B4                     __end_ofi2_SwTimersInterrupt:
 42604                           	opt stack 0
 42605                           tosu	equ	0xFFF
 42606                           tosh	equ	0xFFE
 42607                           tosl	equ	0xFFD
 42608                           pclatu	equ	0xFFB
 42609                           pclath	equ	0xFFA
 42610                           tblptru	equ	0xFF8
 42611                           tblptrh	equ	0xFF7
 42612                           tblptrl	equ	0xFF6
 42613                           tablat	equ	0xFF5
 42614                           prodh	equ	0xFF4
 42615                           prodl	equ	0xFF3
 42616                           intcon	equ	0xFF2
 42617                           intcon2	equ	0xFF1
 42618                           intcon3	equ	0xFF0
 42619                           indf0	equ	0xFEF
 42620                           postinc0	equ	0xFEE
 42621                           plusw0	equ	0xFEB
 42622                           fsr0h	equ	0xFEA
 42623                           fsr0l	equ	0xFE9
 42624                           wreg	equ	0xFE8
 42625                           postinc1	equ	0xFE6
 42626                           postdec1	equ	0xFE5
 42627                           plusw1	equ	0xFE3
 42628                           fsr1h	equ	0xFE2
 42629                           fsr1l	equ	0xFE1
 42630                           indf2	equ	0xFDF
 42631                           postinc2	equ	0xFDE
 42632                           postdec2	equ	0xFDD
 42633                           plusw2	equ	0xFDB
 42634                           fsr2h	equ	0xFDA
 42635                           fsr2l	equ	0xFD9
 42636                           status	equ	0xFD8
 42637                           
 42638 ;; *************** function i2_TMR_GetDeltaTime *****************
 42639 ;; Defined at:
 42640 ;;		line 88 in file "mcc_generated_files/LoRaWAN/sw_timer.c"
 42641 ;; Parameters:    Size  Location     Type
 42642 ;;		None
 42643 ;; Auto vars:     Size  Location     Type
 42644 ;;		None
 42645 ;; Return value:  Size  Location     Type
 42646 ;;                  4    8[COMRAM] unsigned long 
 42647 ;; Registers used:
 42648 ;;		wreg, status,2, status,0, cstack
 42649 ;; Tracked objects:
 42650 ;;		On entry : 0/0
 42651 ;;		On exit  : 0/0
 42652 ;;		Unchanged: 0/0
 42653 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 42654 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 42655 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 42656 ;;      Temps:         20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 42657 ;;      Totals:        24       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 42658 ;;Total ram usage:       24 bytes
 42659 ;; Hardware stack levels used:    1
 42660 ;; Hardware stack levels required when called:    1
 42661 ;; This function calls:
 42662 ;;		i2_TMR1_ReadTimer
 42663 ;; This function is called by:
 42664 ;;		i2_SwTimersInterrupt
 42665 ;; This function uses a non-reentrant model
 42666 ;;
 42667                           
 42668                           	psect	text211
 42669  0053A6                     __ptext211:
 42670                           	opt stack 0
 42671  0053A6                     i2_TMR_GetDeltaTime:
 42672                           	opt stack 12
 42673                           
 42674                           ;sw_timer.c: 90: static uint32_t retVal;
 42675                           ;sw_timer.c: 91: static uint16_t tmrVal;
 42676                           ;sw_timer.c: 93: tmrVal = TMR1_ReadTimer();
 42677                           
 42678                           ; BSR set to: 1
 42679                           ;incstack = 0
 42680  0053A6  ECEE  F048         	call	i2_TMR1_ReadTimer	;wreg free
 42681  0053AA  C001  F148         	movff	?i2_TMR1_ReadTimer,TMR_GetDeltaTime@tmrVal
 42682  0053AE  C002  F149         	movff	?i2_TMR1_ReadTimer+1,TMR_GetDeltaTime@tmrVal+1
 42683                           
 42684                           ;sw_timer.c: 95: if (timerOverflow == 1)
 42685  0053B2  0453               	decf	_timerOverflow,w,c	;volatile
 42686  0053B4  A4D8               	btfss	status,2,c
 42687  0053B6  D066               	goto	i2l1525
 42688                           
 42689                           ;sw_timer.c: 96: {
 42690                           ;sw_timer.c: 97: timerOverflow = 0;
 42691  0053B8  0E00               	movlw	0
 42692  0053BA  6E53               	movwf	_timerOverflow,c	;volatile
 42693                           
 42694                           ;sw_timer.c: 98: retVal = ((uint32_t)0x10000) - reloadVal + tmrVal - ticksAccounted + ti
      +                          cksAdded;
 42695  0053BC  C104  F00D         	movff	_ticksAccounted,??i2_TMR_GetDeltaTime	;volatile
 42696  0053C0  C105  F00E         	movff	_ticksAccounted+1,??i2_TMR_GetDeltaTime+1	;volatile
 42697  0053C4  C106  F00F         	movff	_ticksAccounted+2,??i2_TMR_GetDeltaTime+2	;volatile
 42698  0053C8  C107  F010         	movff	_ticksAccounted+3,??i2_TMR_GetDeltaTime+3	;volatile
 42699  0053CC  1E0D               	comf	??i2_TMR_GetDeltaTime,f,c
 42700  0053CE  1E0E               	comf	??i2_TMR_GetDeltaTime+1,f,c
 42701  0053D0  1E0F               	comf	??i2_TMR_GetDeltaTime+2,f,c
 42702  0053D2  1E10               	comf	??i2_TMR_GetDeltaTime+3,f,c
 42703  0053D4  2A0D               	incf	??i2_TMR_GetDeltaTime,f,c
 42704  0053D6  0E00               	movlw	0
 42705  0053D8  220E               	addwfc	??i2_TMR_GetDeltaTime+1,f,c
 42706  0053DA  220F               	addwfc	??i2_TMR_GetDeltaTime+2,f,c
 42707  0053DC  2210               	addwfc	??i2_TMR_GetDeltaTime+3,f,c
 42708  0053DE  504C               	movf	_reloadVal,w,c	;volatile
 42709  0053E0  6E11               	movwf	(??i2_TMR_GetDeltaTime+4)& (0+255),c
 42710  0053E2  504D               	movf	_reloadVal+1,w,c	;volatile
 42711  0053E4  6E12               	movwf	(??i2_TMR_GetDeltaTime+5)& (0+255),c
 42712  0053E6  6A13               	clrf	(??i2_TMR_GetDeltaTime+6)& (0+255),c
 42713  0053E8  6A14               	clrf	(??i2_TMR_GetDeltaTime+7)& (0+255),c
 42714  0053EA  1E11               	comf	??i2_TMR_GetDeltaTime+4,f,c
 42715  0053EC  1E12               	comf	??i2_TMR_GetDeltaTime+5,f,c
 42716  0053EE  1E13               	comf	??i2_TMR_GetDeltaTime+6,f,c
 42717  0053F0  1E14               	comf	??i2_TMR_GetDeltaTime+7,f,c
 42718  0053F2  2A11               	incf	??i2_TMR_GetDeltaTime+4,f,c
 42719  0053F4  0E00               	movlw	0
 42720  0053F6  2212               	addwfc	??i2_TMR_GetDeltaTime+5,f,c
 42721  0053F8  2213               	addwfc	??i2_TMR_GetDeltaTime+6,f,c
 42722  0053FA  2214               	addwfc	??i2_TMR_GetDeltaTime+7,f,c
 42723  0053FC  0101               	movlb	1	; () banked
 42724  0053FE  5148               	movf	TMR_GetDeltaTime@tmrVal& (0+255),w,b
 42725  005400  2411               	addwf	??i2_TMR_GetDeltaTime+4,w,c
 42726  005402  6E15               	movwf	(??i2_TMR_GetDeltaTime+8)& (0+255),c
 42727  005404  5149               	movf	(TMR_GetDeltaTime@tmrVal+1)& (0+255),w,b
 42728  005406  2012               	addwfc	??i2_TMR_GetDeltaTime+5,w,c
 42729  005408  6E16               	movwf	(??i2_TMR_GetDeltaTime+9)& (0+255),c
 42730  00540A  0E00               	movlw	0
 42731  00540C  2013               	addwfc	??i2_TMR_GetDeltaTime+6,w,c
 42732  00540E  6E17               	movwf	(??i2_TMR_GetDeltaTime+10)& (0+255),c
 42733  005410  0E00               	movlw	0
 42734  005412  2014               	addwfc	??i2_TMR_GetDeltaTime+7,w,c
 42735  005414  6E18               	movwf	(??i2_TMR_GetDeltaTime+11)& (0+255),c
 42736  005416  500D               	movf	??i2_TMR_GetDeltaTime,w,c
 42737  005418  2415               	addwf	??i2_TMR_GetDeltaTime+8,w,c
 42738  00541A  6E19               	movwf	(??i2_TMR_GetDeltaTime+12)& (0+255),c
 42739  00541C  500E               	movf	??i2_TMR_GetDeltaTime+1,w,c
 42740  00541E  2016               	addwfc	??i2_TMR_GetDeltaTime+9,w,c
 42741  005420  6E1A               	movwf	(??i2_TMR_GetDeltaTime+13)& (0+255),c
 42742  005422  500F               	movf	??i2_TMR_GetDeltaTime+2,w,c
 42743  005424  2017               	addwfc	??i2_TMR_GetDeltaTime+10,w,c
 42744  005426  6E1B               	movwf	(??i2_TMR_GetDeltaTime+14)& (0+255),c
 42745  005428  5010               	movf	??i2_TMR_GetDeltaTime+3,w,c
 42746  00542A  2018               	addwfc	??i2_TMR_GetDeltaTime+11,w,c
 42747  00542C  6E1C               	movwf	(??i2_TMR_GetDeltaTime+15)& (0+255),c
 42748  00542E  5108               	movf	_ticksAdded& (0+255),w,b	;volatile
 42749  005430  2419               	addwf	??i2_TMR_GetDeltaTime+12,w,c
 42750  005432  6E1D               	movwf	(??i2_TMR_GetDeltaTime+16)& (0+255),c
 42751  005434  5109               	movf	(_ticksAdded+1)& (0+255),w,b	;volatile
 42752  005436  201A               	addwfc	??i2_TMR_GetDeltaTime+13,w,c
 42753  005438  6E1E               	movwf	(??i2_TMR_GetDeltaTime+17)& (0+255),c
 42754  00543A  510A               	movf	(_ticksAdded+2)& (0+255),w,b	;volatile
 42755  00543C  201B               	addwfc	??i2_TMR_GetDeltaTime+14,w,c
 42756  00543E  6E1F               	movwf	(??i2_TMR_GetDeltaTime+18)& (0+255),c
 42757  005440  510B               	movf	(_ticksAdded+3)& (0+255),w,b	;volatile
 42758  005442  201C               	addwfc	??i2_TMR_GetDeltaTime+15,w,c
 42759  005444  6E20               	movwf	(??i2_TMR_GetDeltaTime+19)& (0+255),c
 42760  005446  0E00               	movlw	0
 42761  005448  241D               	addwf	??i2_TMR_GetDeltaTime+16,w,c
 42762  00544A  6F00               	movwf	TMR_GetDeltaTime@retVal& (0+255),b
 42763  00544C  0E00               	movlw	0
 42764  00544E  201E               	addwfc	??i2_TMR_GetDeltaTime+17,w,c
 42765  005450  6F01               	movwf	(TMR_GetDeltaTime@retVal+1)& (0+255),b
 42766  005452  0E01               	movlw	1
 42767  005454  201F               	addwfc	??i2_TMR_GetDeltaTime+18,w,c
 42768  005456  6F02               	movwf	(TMR_GetDeltaTime@retVal+2)& (0+255),b
 42769  005458  0E00               	movlw	0
 42770  00545A  2020               	addwfc	??i2_TMR_GetDeltaTime+19,w,c
 42771  00545C  6F03               	movwf	(TMR_GetDeltaTime@retVal+3)& (0+255),b
 42772                           
 42773                           ; BSR set to: 1
 42774                           ;sw_timer.c: 99: ticksAccounted = tmrVal;
 42775  00545E  C148  F104         	movff	TMR_GetDeltaTime@tmrVal,_ticksAccounted	;volatile
 42776  005462  C149  F105         	movff	TMR_GetDeltaTime@tmrVal+1,_ticksAccounted+1	;volatile
 42777  005466  6B06               	clrf	(_ticksAccounted+2)& (0+255),b	;volatile
 42778  005468  6B07               	clrf	(_ticksAccounted+3)& (0+255),b	;volatile
 42779                           
 42780                           ; BSR set to: 1
 42781                           ;sw_timer.c: 100: ticksAdded = 0;
 42782  00546A  0E00               	movlw	0
 42783  00546C  6F08               	movwf	_ticksAdded& (0+255),b	;volatile
 42784  00546E  0E00               	movlw	0
 42785  005470  6F09               	movwf	(_ticksAdded+1)& (0+255),b	;volatile
 42786  005472  0E00               	movlw	0
 42787  005474  6F0A               	movwf	(_ticksAdded+2)& (0+255),b	;volatile
 42788  005476  0E00               	movlw	0
 42789  005478  6F0B               	movwf	(_ticksAdded+3)& (0+255),b	;volatile
 42790                           
 42791                           ; BSR set to: 1
 42792                           ;sw_timer.c: 101: reloadVal = 0;
 42793  00547A  0E00               	movlw	0
 42794  00547C  6E4D               	movwf	_reloadVal+1,c	;volatile
 42795  00547E  0E00               	movlw	0
 42796  005480  6E4C               	movwf	_reloadVal,c	;volatile
 42797                           
 42798                           ;sw_timer.c: 102: }
 42799  005482  D03E               	goto	i2l1526
 42800  005484                     i2l1525:
 42801                           
 42802                           ;sw_timer.c: 103: else
 42803                           ;sw_timer.c: 104: {
 42804                           ;sw_timer.c: 105: retVal = tmrVal - reloadVal - ticksAccounted + ticksAdded;
 42805                           
 42806                           ; BSR set to: 1
 42807  005484  C104  F00D         	movff	_ticksAccounted,??i2_TMR_GetDeltaTime	;volatile
 42808  005488  C105  F00E         	movff	_ticksAccounted+1,??i2_TMR_GetDeltaTime+1	;volatile
 42809  00548C  C106  F00F         	movff	_ticksAccounted+2,??i2_TMR_GetDeltaTime+2	;volatile
 42810  005490  C107  F010         	movff	_ticksAccounted+3,??i2_TMR_GetDeltaTime+3	;volatile
 42811  005494  1E0D               	comf	??i2_TMR_GetDeltaTime,f,c
 42812  005496  1E0E               	comf	??i2_TMR_GetDeltaTime+1,f,c
 42813  005498  1E0F               	comf	??i2_TMR_GetDeltaTime+2,f,c
 42814  00549A  1E10               	comf	??i2_TMR_GetDeltaTime+3,f,c
 42815  00549C  2A0D               	incf	??i2_TMR_GetDeltaTime,f,c
 42816  00549E  0E00               	movlw	0
 42817  0054A0  220E               	addwfc	??i2_TMR_GetDeltaTime+1,f,c
 42818  0054A2  220F               	addwfc	??i2_TMR_GetDeltaTime+2,f,c
 42819  0054A4  2210               	addwfc	??i2_TMR_GetDeltaTime+3,f,c
 42820  0054A6  C04C  F011         	movff	_reloadVal,??i2_TMR_GetDeltaTime+4	;volatile
 42821  0054AA  C04D  F012         	movff	_reloadVal+1,??i2_TMR_GetDeltaTime+5	;volatile
 42822  0054AE  1E11               	comf	??i2_TMR_GetDeltaTime+4,f,c
 42823  0054B0  1E12               	comf	??i2_TMR_GetDeltaTime+5,f,c
 42824  0054B2  4A11               	infsnz	??i2_TMR_GetDeltaTime+4,f,c
 42825  0054B4  2A12               	incf	??i2_TMR_GetDeltaTime+5,f,c
 42826  0054B6  0101               	movlb	1	; () banked
 42827  0054B8  5148               	movf	TMR_GetDeltaTime@tmrVal& (0+255),w,b
 42828  0054BA  2611               	addwf	??i2_TMR_GetDeltaTime+4,f,c
 42829  0054BC  5149               	movf	(TMR_GetDeltaTime@tmrVal+1)& (0+255),w,b
 42830  0054BE  2212               	addwfc	??i2_TMR_GetDeltaTime+5,f,c
 42831  0054C0  5011               	movf	??i2_TMR_GetDeltaTime+4,w,c
 42832  0054C2  240D               	addwf	??i2_TMR_GetDeltaTime,w,c
 42833  0054C4  6E13               	movwf	(??i2_TMR_GetDeltaTime+6)& (0+255),c
 42834  0054C6  5012               	movf	??i2_TMR_GetDeltaTime+5,w,c
 42835  0054C8  200E               	addwfc	??i2_TMR_GetDeltaTime+1,w,c
 42836  0054CA  6E14               	movwf	(??i2_TMR_GetDeltaTime+7)& (0+255),c
 42837  0054CC  0E00               	movlw	0
 42838  0054CE  200F               	addwfc	??i2_TMR_GetDeltaTime+2,w,c
 42839  0054D0  6E15               	movwf	(??i2_TMR_GetDeltaTime+8)& (0+255),c
 42840  0054D2  0E00               	movlw	0
 42841  0054D4  2010               	addwfc	??i2_TMR_GetDeltaTime+3,w,c
 42842  0054D6  6E16               	movwf	(??i2_TMR_GetDeltaTime+9)& (0+255),c
 42843  0054D8  5108               	movf	_ticksAdded& (0+255),w,b	;volatile
 42844  0054DA  2413               	addwf	??i2_TMR_GetDeltaTime+6,w,c
 42845  0054DC  6F00               	movwf	TMR_GetDeltaTime@retVal& (0+255),b
 42846  0054DE  5109               	movf	(_ticksAdded+1)& (0+255),w,b	;volatile
 42847  0054E0  2014               	addwfc	??i2_TMR_GetDeltaTime+7,w,c
 42848  0054E2  6F01               	movwf	(TMR_GetDeltaTime@retVal+1)& (0+255),b
 42849  0054E4  510A               	movf	(_ticksAdded+2)& (0+255),w,b	;volatile
 42850  0054E6  2015               	addwfc	??i2_TMR_GetDeltaTime+8,w,c
 42851  0054E8  6F02               	movwf	(TMR_GetDeltaTime@retVal+2)& (0+255),b
 42852  0054EA  510B               	movf	(_ticksAdded+3)& (0+255),w,b	;volatile
 42853  0054EC  2016               	addwfc	??i2_TMR_GetDeltaTime+9,w,c
 42854  0054EE  6F03               	movwf	(TMR_GetDeltaTime@retVal+3)& (0+255),b
 42855                           
 42856                           ;sw_timer.c: 106: ticksAccounted += retVal;
 42857  0054F0  5100               	movf	TMR_GetDeltaTime@retVal& (0+255),w,b
 42858  0054F2  2704               	addwf	_ticksAccounted& (0+255),f,b	;volatile
 42859  0054F4  5101               	movf	(TMR_GetDeltaTime@retVal+1)& (0+255),w,b
 42860  0054F6  2305               	addwfc	(_ticksAccounted+1)& (0+255),f,b	;volatile
 42861  0054F8  5102               	movf	(TMR_GetDeltaTime@retVal+2)& (0+255),w,b
 42862  0054FA  2306               	addwfc	(_ticksAccounted+2)& (0+255),f,b	;volatile
 42863  0054FC  5103               	movf	(TMR_GetDeltaTime@retVal+3)& (0+255),w,b
 42864  0054FE  2307               	addwfc	(_ticksAccounted+3)& (0+255),f,b	;volatile
 42865  005500                     i2l1526:
 42866                           
 42867                           ; BSR set to: 1
 42868                           ;sw_timer.c: 107: }
 42869                           ;sw_timer.c: 109: return retVal;
 42870                           
 42871                           ; BSR set to: 1
 42872  005500  C100  F009         	movff	TMR_GetDeltaTime@retVal,?i2_TMR_GetDeltaTime
 42873  005504  C101  F00A         	movff	TMR_GetDeltaTime@retVal+1,?i2_TMR_GetDeltaTime+1
 42874  005508  C102  F00B         	movff	TMR_GetDeltaTime@retVal+2,?i2_TMR_GetDeltaTime+2
 42875  00550C  C103  F00C         	movff	TMR_GetDeltaTime@retVal+3,?i2_TMR_GetDeltaTime+3
 42876  005510  0012               	return	
 42877  005512                     __end_ofi2_TMR_GetDeltaTime:
 42878                           	opt stack 0
 42879                           tosu	equ	0xFFF
 42880                           tosh	equ	0xFFE
 42881                           tosl	equ	0xFFD
 42882                           pclatu	equ	0xFFB
 42883                           pclath	equ	0xFFA
 42884                           tblptru	equ	0xFF8
 42885                           tblptrh	equ	0xFF7
 42886                           tblptrl	equ	0xFF6
 42887                           tablat	equ	0xFF5
 42888                           prodh	equ	0xFF4
 42889                           prodl	equ	0xFF3
 42890                           intcon	equ	0xFF2
 42891                           intcon2	equ	0xFF1
 42892                           intcon3	equ	0xFF0
 42893                           indf0	equ	0xFEF
 42894                           postinc0	equ	0xFEE
 42895                           plusw0	equ	0xFEB
 42896                           fsr0h	equ	0xFEA
 42897                           fsr0l	equ	0xFE9
 42898                           wreg	equ	0xFE8
 42899                           postinc1	equ	0xFE6
 42900                           postdec1	equ	0xFE5
 42901                           plusw1	equ	0xFE3
 42902                           fsr1h	equ	0xFE2
 42903                           fsr1l	equ	0xFE1
 42904                           indf2	equ	0xFDF
 42905                           postinc2	equ	0xFDE
 42906                           postdec2	equ	0xFDD
 42907                           plusw2	equ	0xFDB
 42908                           fsr2h	equ	0xFDA
 42909                           fsr2l	equ	0xFD9
 42910                           status	equ	0xFD8
 42911                           
 42912 ;; *************** function i2_TMR1_ReadTimer *****************
 42913 ;; Defined at:
 42914 ;;		line 105 in file "mcc_generated_files/tmr1.c"
 42915 ;; Parameters:    Size  Location     Type
 42916 ;;		None
 42917 ;; Auto vars:     Size  Location     Type
 42918 ;;  TMR1_ReadTim    2    4[COMRAM] unsigned int 
 42919 ;;  TMR1_ReadTim    1    7[COMRAM] unsigned char 
 42920 ;;  TMR1_ReadTim    1    6[COMRAM] unsigned char 
 42921 ;; Return value:  Size  Location     Type
 42922 ;;                  2    0[COMRAM] unsigned int 
 42923 ;; Registers used:
 42924 ;;		wreg, status,2
 42925 ;; Tracked objects:
 42926 ;;		On entry : 0/0
 42927 ;;		On exit  : 0/0
 42928 ;;		Unchanged: 0/0
 42929 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 42930 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 42931 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 42932 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 42933 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 42934 ;;Total ram usage:        8 bytes
 42935 ;; Hardware stack levels used:    1
 42936 ;; This function calls:
 42937 ;;		Nothing
 42938 ;; This function is called by:
 42939 ;;		i2_TMR_GetDeltaTime
 42940 ;;		i2_TMR_SwapTimer
 42941 ;; This function uses a non-reentrant model
 42942 ;;
 42943                           
 42944                           	psect	text212
 42945  0091DC                     __ptext212:
 42946                           	opt stack 0
 42947  0091DC                     i2_TMR1_ReadTimer:
 42948                           	opt stack 13
 42949                           
 42950                           ;tmr1.c: 107: uint16_t readVal;
 42951                           ;tmr1.c: 108: uint8_t readValHigh;
 42952                           ;tmr1.c: 109: uint8_t readValLow;
 42953                           ;tmr1.c: 111: T1CONbits.T1RD16 = 1;
 42954                           
 42955                           ; BSR set to: 1
 42956                           ;incstack = 0
 42957  0091DC  82CD               	bsf	4045,1,c	;volatile
 42958                           
 42959                           ;tmr1.c: 113: readValLow = TMR1L;
 42960  0091DE  CFCE F008          	movff	4046,i2TMR1_ReadTimer@readValLow	;volatile
 42961                           
 42962                           ;tmr1.c: 114: readValHigh = TMR1H;
 42963  0091E2  CFCF F007          	movff	4047,i2TMR1_ReadTimer@readValHigh	;volatile
 42964                           
 42965                           ;tmr1.c: 116: readVal = ((uint16_t)readValHigh << 8) | readValLow;
 42966  0091E6  5007               	movf	i2TMR1_ReadTimer@readValHigh,w,c
 42967  0091E8  6E03               	movwf	??i2_TMR1_ReadTimer& (0+255),c
 42968  0091EA  5008               	movf	i2TMR1_ReadTimer@readValLow,w,c
 42969  0091EC  6E05               	movwf	i2TMR1_ReadTimer@readVal,c
 42970  0091EE  C003  F006         	movff	??i2_TMR1_ReadTimer,i2TMR1_ReadTimer@readVal+1
 42971                           
 42972                           ;tmr1.c: 118: return readVal;
 42973  0091F2  C005  F001         	movff	i2TMR1_ReadTimer@readVal,?i2_TMR1_ReadTimer
 42974  0091F6  C006  F002         	movff	i2TMR1_ReadTimer@readVal+1,?i2_TMR1_ReadTimer+1
 42975  0091FA  0012               	return	
 42976  0091FC                     __end_ofi2_TMR1_ReadTimer:
 42977                           	opt stack 0
 42978                           tosu	equ	0xFFF
 42979                           tosh	equ	0xFFE
 42980                           tosl	equ	0xFFD
 42981                           pclatu	equ	0xFFB
 42982                           pclath	equ	0xFFA
 42983                           tblptru	equ	0xFF8
 42984                           tblptrh	equ	0xFF7
 42985                           tblptrl	equ	0xFF6
 42986                           tablat	equ	0xFF5
 42987                           prodh	equ	0xFF4
 42988                           prodl	equ	0xFF3
 42989                           intcon	equ	0xFF2
 42990                           intcon2	equ	0xFF1
 42991                           intcon3	equ	0xFF0
 42992                           indf0	equ	0xFEF
 42993                           postinc0	equ	0xFEE
 42994                           plusw0	equ	0xFEB
 42995                           fsr0h	equ	0xFEA
 42996                           fsr0l	equ	0xFE9
 42997                           wreg	equ	0xFE8
 42998                           postinc1	equ	0xFE6
 42999                           postdec1	equ	0xFE5
 43000                           plusw1	equ	0xFE3
 43001                           fsr1h	equ	0xFE2
 43002                           fsr1l	equ	0xFE1
 43003                           indf2	equ	0xFDF
 43004                           postinc2	equ	0xFDE
 43005                           postdec2	equ	0xFDD
 43006                           plusw2	equ	0xFDB
 43007                           fsr2h	equ	0xFDA
 43008                           fsr2l	equ	0xFD9
 43009                           status	equ	0xFD8
 43010                           
 43011 ;; *************** function _PIN_MANAGER_IOC *****************
 43012 ;; Defined at:
 43013 ;;		line 110 in file "mcc_generated_files/pin_manager.c"
 43014 ;; Parameters:    Size  Location     Type
 43015 ;;		None
 43016 ;; Auto vars:     Size  Location     Type
 43017 ;;		None
 43018 ;; Return value:  Size  Location     Type
 43019 ;;                  1    wreg      void 
 43020 ;; Registers used:
 43021 ;;		wreg, status,2, status,0, pclath, tosl, cstack
 43022 ;; Tracked objects:
 43023 ;;		On entry : 0/0
 43024 ;;		On exit  : 0/0
 43025 ;;		Unchanged: 0/0
 43026 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 43027 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 43028 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 43029 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 43030 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 43031 ;;Total ram usage:        0 bytes
 43032 ;; Hardware stack levels used:    1
 43033 ;; Hardware stack levels required when called:    2
 43034 ;; This function calls:
 43035 ;;		_IOCB4_ISR
 43036 ;; This function is called by:
 43037 ;;		_INTERRUPT_InterruptManager
 43038 ;; This function uses a non-reentrant model
 43039 ;;
 43040                           
 43041                           	psect	text213
 43042  00952C                     __ptext213:
 43043                           	opt stack 0
 43044  00952C                     _PIN_MANAGER_IOC:
 43045                           	opt stack 15
 43046                           
 43047                           ;pin_manager.c: 113: if(IOCBbits.IOCB4 == 1)
 43048                           
 43049                           ;incstack = 0
 43050  00952C  B862               	btfsc	3938,4,c	;volatile
 43051                           
 43052                           ;pin_manager.c: 114: {
 43053                           ;pin_manager.c: 115: IOCB4_ISR();
 43054  00952E  ECFE  F048         	call	_IOCB4_ISR	;wreg free
 43055                           
 43056                           ;pin_manager.c: 116: }
 43057                           ;pin_manager.c: 118: INTCONbits.RBIF = 0;
 43058  009532  90F2               	bcf	intcon,0,c	;volatile
 43059  009534  0012               	return		;funcret
 43060  009536                     __end_of_PIN_MANAGER_IOC:
 43061                           	opt stack 0
 43062                           tosu	equ	0xFFF
 43063                           tosh	equ	0xFFE
 43064                           tosl	equ	0xFFD
 43065                           pclatu	equ	0xFFB
 43066                           pclath	equ	0xFFA
 43067                           tblptru	equ	0xFF8
 43068                           tblptrh	equ	0xFF7
 43069                           tblptrl	equ	0xFF6
 43070                           tablat	equ	0xFF5
 43071                           prodh	equ	0xFF4
 43072                           prodl	equ	0xFF3
 43073                           intcon	equ	0xFF2
 43074                           intcon2	equ	0xFF1
 43075                           intcon3	equ	0xFF0
 43076                           indf0	equ	0xFEF
 43077                           postinc0	equ	0xFEE
 43078                           plusw0	equ	0xFEB
 43079                           fsr0h	equ	0xFEA
 43080                           fsr0l	equ	0xFE9
 43081                           wreg	equ	0xFE8
 43082                           postinc1	equ	0xFE6
 43083                           postdec1	equ	0xFE5
 43084                           plusw1	equ	0xFE3
 43085                           fsr1h	equ	0xFE2
 43086                           fsr1l	equ	0xFE1
 43087                           indf2	equ	0xFDF
 43088                           postinc2	equ	0xFDE
 43089                           postdec2	equ	0xFDD
 43090                           plusw2	equ	0xFDB
 43091                           fsr2h	equ	0xFDA
 43092                           fsr2l	equ	0xFD9
 43093                           status	equ	0xFD8
 43094                           
 43095 ;; *************** function _IOCB4_ISR *****************
 43096 ;; Defined at:
 43097 ;;		line 124 in file "mcc_generated_files/pin_manager.c"
 43098 ;; Parameters:    Size  Location     Type
 43099 ;;		None
 43100 ;; Auto vars:     Size  Location     Type
 43101 ;;		None
 43102 ;; Return value:  Size  Location     Type
 43103 ;;                  1    wreg      void 
 43104 ;; Registers used:
 43105 ;;		wreg, status,2, status,0, pclath, tosl, cstack
 43106 ;; Tracked objects:
 43107 ;;		On entry : 0/0
 43108 ;;		On exit  : 0/0
 43109 ;;		Unchanged: 0/0
 43110 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 43111 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 43112 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 43113 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 43114 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 43115 ;;Total ram usage:        0 bytes
 43116 ;; Hardware stack levels used:    1
 43117 ;; Hardware stack levels required when called:    1
 43118 ;; This function calls:
 43119 ;;		Absolute function
 43120 ;;		_DIO2_ISR_Lora
 43121 ;;		_IOCB4_DefaultInterruptHandler
 43122 ;; This function is called by:
 43123 ;;		_PIN_MANAGER_IOC
 43124 ;; This function uses a non-reentrant model
 43125 ;;
 43126                           
 43127                           	psect	text214
 43128  0091FC                     __ptext214:
 43129                           	opt stack 0
 43130  0091FC                     _IOCB4_ISR:
 43131                           	opt stack 15
 43132                           
 43133                           ;pin_manager.c: 129: if(IOCB4_InterruptHandler)
 43134                           
 43135                           ;incstack = 0
 43136  0091FC  0103               	movlb	3	; () banked
 43137  0091FE  51F1               	movf	_IOCB4_InterruptHandler& (0+255),w,b
 43138  009200  11F2               	iorwf	(_IOCB4_InterruptHandler+1)& (0+255),w,b
 43139  009202  B4D8               	btfsc	status,2,c
 43140  009204  0012               	return	
 43141                           
 43142                           ; BSR set to: 3
 43143                           ;pin_manager.c: 130: {
 43144                           ;pin_manager.c: 131: IOCB4_InterruptHandler();
 43145  009206  D801               	call	i2u1679_48
 43146  009208  0012               	return	
 43147  00920A                     i2u1679_48:
 43148  00920A  0005               	push	
 43149  00920C  6EFA               	movwf	pclath,c
 43150  00920E  51F1               	movf	_IOCB4_InterruptHandler& (0+255),w,b
 43151  009210  6EFD               	movwf	tosl,c
 43152  009212  51F2               	movf	(_IOCB4_InterruptHandler+1)& (0+255),w,b
 43153  009214  6EFE               	movwf	tosh,c
 43154  009216  6AFF               	clrf	tosu,c
 43155  009218  50FA               	movf	pclath,w,c
 43156  00921A  0012               	return		;indir
 43157  00921C                     __end_of_IOCB4_ISR:
 43158                           	opt stack 0
 43159                           tosu	equ	0xFFF
 43160                           tosh	equ	0xFFE
 43161                           tosl	equ	0xFFD
 43162                           pclatu	equ	0xFFB
 43163                           pclath	equ	0xFFA
 43164                           tblptru	equ	0xFF8
 43165                           tblptrh	equ	0xFF7
 43166                           tblptrl	equ	0xFF6
 43167                           tablat	equ	0xFF5
 43168                           prodh	equ	0xFF4
 43169                           prodl	equ	0xFF3
 43170                           intcon	equ	0xFF2
 43171                           intcon2	equ	0xFF1
 43172                           intcon3	equ	0xFF0
 43173                           indf0	equ	0xFEF
 43174                           postinc0	equ	0xFEE
 43175                           plusw0	equ	0xFEB
 43176                           fsr0h	equ	0xFEA
 43177                           fsr0l	equ	0xFE9
 43178                           wreg	equ	0xFE8
 43179                           postinc1	equ	0xFE6
 43180                           postdec1	equ	0xFE5
 43181                           plusw1	equ	0xFE3
 43182                           fsr1h	equ	0xFE2
 43183                           fsr1l	equ	0xFE1
 43184                           indf2	equ	0xFDF
 43185                           postinc2	equ	0xFDE
 43186                           postdec2	equ	0xFDD
 43187                           plusw2	equ	0xFDB
 43188                           fsr2h	equ	0xFDA
 43189                           fsr2l	equ	0xFD9
 43190                           status	equ	0xFD8
 43191                           
 43192 ;; *************** function _DIO2_ISR_Lora *****************
 43193 ;; Defined at:
 43194 ;;		line 73 in file "mcc_generated_files/LoRaWAN/interrupt_manager_lora_addons.c"
 43195 ;; Parameters:    Size  Location     Type
 43196 ;;		None
 43197 ;; Auto vars:     Size  Location     Type
 43198 ;;		None
 43199 ;; Return value:  Size  Location     Type
 43200 ;;                  1    wreg      void 
 43201 ;; Registers used:
 43202 ;;		status,2, status,0
 43203 ;; Tracked objects:
 43204 ;;		On entry : 0/0
 43205 ;;		On exit  : 0/0
 43206 ;;		Unchanged: 0/0
 43207 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 43208 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 43209 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 43210 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 43211 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 43212 ;;Total ram usage:        0 bytes
 43213 ;; Hardware stack levels used:    1
 43214 ;; This function calls:
 43215 ;;		Nothing
 43216 ;; This function is called by:
 43217 ;;		_DIO2_ISR_Lora_Init
 43218 ;;		_IOCB4_ISR
 43219 ;; This function uses a non-reentrant model
 43220 ;;
 43221                           
 43222                           	psect	text215
 43223  009566                     __ptext215:
 43224                           	opt stack 0
 43225  009566                     _DIO2_ISR_Lora:
 43226                           	opt stack 15
 43227                           
 43228                           ;interrupt_manager_lora_addons.c: 75: dioStatus |= 0x04;
 43229                           
 43230                           ;incstack = 0
 43231  009566  0101               	movlb	1	; () banked
 43232  009568  8554               	bsf	_dioStatus& (0+255),2,b	;volatile
 43233                           
 43234                           ; BSR set to: 1
 43235  00956A  0012               	return		;funcret
 43236  00956C                     __end_of_DIO2_ISR_Lora:
 43237                           	opt stack 0
 43238                           tosu	equ	0xFFF
 43239                           tosh	equ	0xFFE
 43240                           tosl	equ	0xFFD
 43241                           pclatu	equ	0xFFB
 43242                           pclath	equ	0xFFA
 43243                           tblptru	equ	0xFF8
 43244                           tblptrh	equ	0xFF7
 43245                           tblptrl	equ	0xFF6
 43246                           tablat	equ	0xFF5
 43247                           prodh	equ	0xFF4
 43248                           prodl	equ	0xFF3
 43249                           intcon	equ	0xFF2
 43250                           intcon2	equ	0xFF1
 43251                           intcon3	equ	0xFF0
 43252                           indf0	equ	0xFEF
 43253                           postinc0	equ	0xFEE
 43254                           plusw0	equ	0xFEB
 43255                           fsr0h	equ	0xFEA
 43256                           fsr0l	equ	0xFE9
 43257                           wreg	equ	0xFE8
 43258                           postinc1	equ	0xFE6
 43259                           postdec1	equ	0xFE5
 43260                           plusw1	equ	0xFE3
 43261                           fsr1h	equ	0xFE2
 43262                           fsr1l	equ	0xFE1
 43263                           indf2	equ	0xFDF
 43264                           postinc2	equ	0xFDE
 43265                           postdec2	equ	0xFDD
 43266                           plusw2	equ	0xFDB
 43267                           fsr2h	equ	0xFDA
 43268                           fsr2l	equ	0xFD9
 43269                           status	equ	0xFD8
 43270                           
 43271 ;; *************** function _IOCB4_DefaultInterruptHandler *****************
 43272 ;; Defined at:
 43273 ;;		line 145 in file "mcc_generated_files/pin_manager.c"
 43274 ;; Parameters:    Size  Location     Type
 43275 ;;		None
 43276 ;; Auto vars:     Size  Location     Type
 43277 ;;		None
 43278 ;; Return value:  Size  Location     Type
 43279 ;;                  1    wreg      void 
 43280 ;; Registers used:
 43281 ;;		None
 43282 ;; Tracked objects:
 43283 ;;		On entry : 0/0
 43284 ;;		On exit  : 0/0
 43285 ;;		Unchanged: 0/0
 43286 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 43287 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 43288 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 43289 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 43290 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 43291 ;;Total ram usage:        0 bytes
 43292 ;; Hardware stack levels used:    1
 43293 ;; This function calls:
 43294 ;;		Nothing
 43295 ;; This function is called by:
 43296 ;;		_PIN_MANAGER_Initialize
 43297 ;;		_IOCB4_ISR
 43298 ;; This function uses a non-reentrant model
 43299 ;;
 43300                           
 43301                           	psect	text216
 43302  0095A8                     __ptext216:
 43303                           	opt stack 0
 43304  0095A8                     _IOCB4_DefaultInterruptHandler:
 43305                           	opt stack 15
 43306                           
 43307                           ; BSR set to: 1
 43308                           ;incstack = 0
 43309  0095A8  0012               	return		;funcret
 43310  0095AA                     __end_of_IOCB4_DefaultInterruptHandler:
 43311                           	opt stack 0
 43312                           tosu	equ	0xFFF
 43313                           tosh	equ	0xFFE
 43314                           tosl	equ	0xFFD
 43315                           pclatu	equ	0xFFB
 43316                           pclath	equ	0xFFA
 43317                           tblptru	equ	0xFF8
 43318                           tblptrh	equ	0xFF7
 43319                           tblptrl	equ	0xFF6
 43320                           tablat	equ	0xFF5
 43321                           prodh	equ	0xFF4
 43322                           prodl	equ	0xFF3
 43323                           intcon	equ	0xFF2
 43324                           intcon2	equ	0xFF1
 43325                           intcon3	equ	0xFF0
 43326                           indf0	equ	0xFEF
 43327                           postinc0	equ	0xFEE
 43328                           plusw0	equ	0xFEB
 43329                           fsr0h	equ	0xFEA
 43330                           fsr0l	equ	0xFE9
 43331                           wreg	equ	0xFE8
 43332                           postinc1	equ	0xFE6
 43333                           postdec1	equ	0xFE5
 43334                           plusw1	equ	0xFE3
 43335                           fsr1h	equ	0xFE2
 43336                           fsr1l	equ	0xFE1
 43337                           indf2	equ	0xFDF
 43338                           postinc2	equ	0xFDE
 43339                           postdec2	equ	0xFDD
 43340                           plusw2	equ	0xFDB
 43341                           fsr2h	equ	0xFDA
 43342                           fsr2l	equ	0xFD9
 43343                           status	equ	0xFD8
 43344                           
 43345 ;; *************** function _INT2_ISR *****************
 43346 ;; Defined at:
 43347 ;;		line 59 in file "mcc_generated_files/ext_int.c"
 43348 ;; Parameters:    Size  Location     Type
 43349 ;;		None
 43350 ;; Auto vars:     Size  Location     Type
 43351 ;;		None
 43352 ;; Return value:  Size  Location     Type
 43353 ;;                  1    wreg      void 
 43354 ;; Registers used:
 43355 ;;		wreg, status,2, status,0, pclath, tosl, cstack
 43356 ;; Tracked objects:
 43357 ;;		On entry : 0/0
 43358 ;;		On exit  : 0/0
 43359 ;;		Unchanged: 0/0
 43360 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 43361 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 43362 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 43363 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 43364 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 43365 ;;Total ram usage:        0 bytes
 43366 ;; Hardware stack levels used:    1
 43367 ;; Hardware stack levels required when called:    2
 43368 ;; This function calls:
 43369 ;;		_INT2_CallBack
 43370 ;; This function is called by:
 43371 ;;		_INTERRUPT_InterruptManager
 43372 ;; This function uses a non-reentrant model
 43373 ;;
 43374                           
 43375                           	psect	text217
 43376  00953E                     __ptext217:
 43377                           	opt stack 0
 43378  00953E                     _INT2_ISR:
 43379                           	opt stack 15
 43380                           
 43381                           ;ext_int.c: 61: (INTCON3bits.INT2IF = 0);
 43382                           
 43383                           ;incstack = 0
 43384  00953E  92F0               	bcf	intcon3,1,c	;volatile
 43385                           
 43386                           ;ext_int.c: 64: INT2_CallBack();
 43387  009540  EC0E  F049         	call	_INT2_CallBack	;wreg free
 43388  009544  0012               	return		;funcret
 43389  009546                     __end_of_INT2_ISR:
 43390                           	opt stack 0
 43391                           tosu	equ	0xFFF
 43392                           tosh	equ	0xFFE
 43393                           tosl	equ	0xFFD
 43394                           pclatu	equ	0xFFB
 43395                           pclath	equ	0xFFA
 43396                           tblptru	equ	0xFF8
 43397                           tblptrh	equ	0xFF7
 43398                           tblptrl	equ	0xFF6
 43399                           tablat	equ	0xFF5
 43400                           prodh	equ	0xFF4
 43401                           prodl	equ	0xFF3
 43402                           intcon	equ	0xFF2
 43403                           intcon2	equ	0xFF1
 43404                           intcon3	equ	0xFF0
 43405                           indf0	equ	0xFEF
 43406                           postinc0	equ	0xFEE
 43407                           plusw0	equ	0xFEB
 43408                           fsr0h	equ	0xFEA
 43409                           fsr0l	equ	0xFE9
 43410                           wreg	equ	0xFE8
 43411                           postinc1	equ	0xFE6
 43412                           postdec1	equ	0xFE5
 43413                           plusw1	equ	0xFE3
 43414                           fsr1h	equ	0xFE2
 43415                           fsr1l	equ	0xFE1
 43416                           indf2	equ	0xFDF
 43417                           postinc2	equ	0xFDE
 43418                           postdec2	equ	0xFDD
 43419                           plusw2	equ	0xFDB
 43420                           fsr2h	equ	0xFDA
 43421                           fsr2l	equ	0xFD9
 43422                           status	equ	0xFD8
 43423                           
 43424 ;; *************** function _INT2_CallBack *****************
 43425 ;; Defined at:
 43426 ;;		line 68 in file "mcc_generated_files/ext_int.c"
 43427 ;; Parameters:    Size  Location     Type
 43428 ;;		None
 43429 ;; Auto vars:     Size  Location     Type
 43430 ;;		None
 43431 ;; Return value:  Size  Location     Type
 43432 ;;                  1    wreg      void 
 43433 ;; Registers used:
 43434 ;;		wreg, status,2, status,0, pclath, tosl, cstack
 43435 ;; Tracked objects:
 43436 ;;		On entry : 0/0
 43437 ;;		On exit  : 0/0
 43438 ;;		Unchanged: 0/0
 43439 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 43440 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 43441 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 43442 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 43443 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 43444 ;;Total ram usage:        0 bytes
 43445 ;; Hardware stack levels used:    1
 43446 ;; Hardware stack levels required when called:    1
 43447 ;; This function calls:
 43448 ;;		Absolute function
 43449 ;;		_DIO1_ISR_Lora
 43450 ;;		_INT2_DefaultInterruptHandler
 43451 ;; This function is called by:
 43452 ;;		_INT2_ISR
 43453 ;; This function uses a non-reentrant model
 43454 ;;
 43455                           
 43456                           	psect	text218
 43457  00921C                     __ptext218:
 43458                           	opt stack 0
 43459  00921C                     _INT2_CallBack:
 43460                           	opt stack 15
 43461                           
 43462                           ;ext_int.c: 71: if(INT2_InterruptHandler)
 43463                           
 43464                           ;incstack = 0
 43465  00921C  0103               	movlb	3	; () banked
 43466  00921E  51F7               	movf	_INT2_InterruptHandler& (0+255),w,b
 43467  009220  11F8               	iorwf	(_INT2_InterruptHandler+1)& (0+255),w,b
 43468  009222  B4D8               	btfsc	status,2,c
 43469  009224  0012               	return	
 43470                           
 43471                           ; BSR set to: 3
 43472                           ;ext_int.c: 72: {
 43473                           ;ext_int.c: 73: INT2_InterruptHandler();
 43474  009226  D801               	call	i2u1677_48
 43475  009228  0012               	return	
 43476  00922A                     i2u1677_48:
 43477  00922A  0005               	push	
 43478  00922C  6EFA               	movwf	pclath,c
 43479  00922E  51F7               	movf	_INT2_InterruptHandler& (0+255),w,b
 43480  009230  6EFD               	movwf	tosl,c
 43481  009232  51F8               	movf	(_INT2_InterruptHandler+1)& (0+255),w,b
 43482  009234  6EFE               	movwf	tosh,c
 43483  009236  6AFF               	clrf	tosu,c
 43484  009238  50FA               	movf	pclath,w,c
 43485  00923A  0012               	return		;indir
 43486  00923C                     __end_of_INT2_CallBack:
 43487                           	opt stack 0
 43488                           tosu	equ	0xFFF
 43489                           tosh	equ	0xFFE
 43490                           tosl	equ	0xFFD
 43491                           pclatu	equ	0xFFB
 43492                           pclath	equ	0xFFA
 43493                           tblptru	equ	0xFF8
 43494                           tblptrh	equ	0xFF7
 43495                           tblptrl	equ	0xFF6
 43496                           tablat	equ	0xFF5
 43497                           prodh	equ	0xFF4
 43498                           prodl	equ	0xFF3
 43499                           intcon	equ	0xFF2
 43500                           intcon2	equ	0xFF1
 43501                           intcon3	equ	0xFF0
 43502                           indf0	equ	0xFEF
 43503                           postinc0	equ	0xFEE
 43504                           plusw0	equ	0xFEB
 43505                           fsr0h	equ	0xFEA
 43506                           fsr0l	equ	0xFE9
 43507                           wreg	equ	0xFE8
 43508                           postinc1	equ	0xFE6
 43509                           postdec1	equ	0xFE5
 43510                           plusw1	equ	0xFE3
 43511                           fsr1h	equ	0xFE2
 43512                           fsr1l	equ	0xFE1
 43513                           indf2	equ	0xFDF
 43514                           postinc2	equ	0xFDE
 43515                           postdec2	equ	0xFDD
 43516                           plusw2	equ	0xFDB
 43517                           fsr2h	equ	0xFDA
 43518                           fsr2l	equ	0xFD9
 43519                           status	equ	0xFD8
 43520                           
 43521 ;; *************** function _DIO1_ISR_Lora *****************
 43522 ;; Defined at:
 43523 ;;		line 68 in file "mcc_generated_files/LoRaWAN/interrupt_manager_lora_addons.c"
 43524 ;; Parameters:    Size  Location     Type
 43525 ;;		None
 43526 ;; Auto vars:     Size  Location     Type
 43527 ;;		None
 43528 ;; Return value:  Size  Location     Type
 43529 ;;                  1    wreg      void 
 43530 ;; Registers used:
 43531 ;;		status,2, status,0
 43532 ;; Tracked objects:
 43533 ;;		On entry : 0/0
 43534 ;;		On exit  : 0/0
 43535 ;;		Unchanged: 0/0
 43536 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 43537 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 43538 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 43539 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 43540 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 43541 ;;Total ram usage:        0 bytes
 43542 ;; Hardware stack levels used:    1
 43543 ;; This function calls:
 43544 ;;		Nothing
 43545 ;; This function is called by:
 43546 ;;		_DIO1_ISR_Lora_Init
 43547 ;;		_INT2_CallBack
 43548 ;; This function uses a non-reentrant model
 43549 ;;
 43550                           
 43551                           	psect	text219
 43552  00956C                     __ptext219:
 43553                           	opt stack 0
 43554  00956C                     _DIO1_ISR_Lora:
 43555                           	opt stack 15
 43556                           
 43557                           ;interrupt_manager_lora_addons.c: 70: dioStatus |= 0x02;
 43558                           
 43559                           ;incstack = 0
 43560  00956C  0101               	movlb	1	; () banked
 43561  00956E  8354               	bsf	_dioStatus& (0+255),1,b	;volatile
 43562                           
 43563                           ; BSR set to: 1
 43564  009570  0012               	return		;funcret
 43565  009572                     __end_of_DIO1_ISR_Lora:
 43566                           	opt stack 0
 43567                           tosu	equ	0xFFF
 43568                           tosh	equ	0xFFE
 43569                           tosl	equ	0xFFD
 43570                           pclatu	equ	0xFFB
 43571                           pclath	equ	0xFFA
 43572                           tblptru	equ	0xFF8
 43573                           tblptrh	equ	0xFF7
 43574                           tblptrl	equ	0xFF6
 43575                           tablat	equ	0xFF5
 43576                           prodh	equ	0xFF4
 43577                           prodl	equ	0xFF3
 43578                           intcon	equ	0xFF2
 43579                           intcon2	equ	0xFF1
 43580                           intcon3	equ	0xFF0
 43581                           indf0	equ	0xFEF
 43582                           postinc0	equ	0xFEE
 43583                           plusw0	equ	0xFEB
 43584                           fsr0h	equ	0xFEA
 43585                           fsr0l	equ	0xFE9
 43586                           wreg	equ	0xFE8
 43587                           postinc1	equ	0xFE6
 43588                           postdec1	equ	0xFE5
 43589                           plusw1	equ	0xFE3
 43590                           fsr1h	equ	0xFE2
 43591                           fsr1l	equ	0xFE1
 43592                           indf2	equ	0xFDF
 43593                           postinc2	equ	0xFDE
 43594                           postdec2	equ	0xFDD
 43595                           plusw2	equ	0xFDB
 43596                           fsr2h	equ	0xFDA
 43597                           fsr2l	equ	0xFD9
 43598                           status	equ	0xFD8
 43599                           
 43600 ;; *************** function _INT2_DefaultInterruptHandler *****************
 43601 ;; Defined at:
 43602 ;;		line 81 in file "mcc_generated_files/ext_int.c"
 43603 ;; Parameters:    Size  Location     Type
 43604 ;;		None
 43605 ;; Auto vars:     Size  Location     Type
 43606 ;;		None
 43607 ;; Return value:  Size  Location     Type
 43608 ;;                  1    wreg      void 
 43609 ;; Registers used:
 43610 ;;		None
 43611 ;; Tracked objects:
 43612 ;;		On entry : 0/0
 43613 ;;		On exit  : 0/0
 43614 ;;		Unchanged: 0/0
 43615 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 43616 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 43617 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 43618 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 43619 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 43620 ;;Total ram usage:        0 bytes
 43621 ;; Hardware stack levels used:    1
 43622 ;; This function calls:
 43623 ;;		Nothing
 43624 ;; This function is called by:
 43625 ;;		_EXT_INT_Initialize
 43626 ;;		_INT2_CallBack
 43627 ;; This function uses a non-reentrant model
 43628 ;;
 43629                           
 43630                           	psect	text220
 43631  0095AA                     __ptext220:
 43632                           	opt stack 0
 43633  0095AA                     _INT2_DefaultInterruptHandler:
 43634                           	opt stack 15
 43635                           
 43636                           ; BSR set to: 1
 43637                           ;incstack = 0
 43638  0095AA  0012               	return		;funcret
 43639  0095AC                     __end_of_INT2_DefaultInterruptHandler:
 43640                           	opt stack 0
 43641                           tosu	equ	0xFFF
 43642                           tosh	equ	0xFFE
 43643                           tosl	equ	0xFFD
 43644                           pclatu	equ	0xFFB
 43645                           pclath	equ	0xFFA
 43646                           tblptru	equ	0xFF8
 43647                           tblptrh	equ	0xFF7
 43648                           tblptrl	equ	0xFF6
 43649                           tablat	equ	0xFF5
 43650                           prodh	equ	0xFF4
 43651                           prodl	equ	0xFF3
 43652                           intcon	equ	0xFF2
 43653                           intcon2	equ	0xFF1
 43654                           intcon3	equ	0xFF0
 43655                           indf0	equ	0xFEF
 43656                           postinc0	equ	0xFEE
 43657                           plusw0	equ	0xFEB
 43658                           fsr0h	equ	0xFEA
 43659                           fsr0l	equ	0xFE9
 43660                           wreg	equ	0xFE8
 43661                           postinc1	equ	0xFE6
 43662                           postdec1	equ	0xFE5
 43663                           plusw1	equ	0xFE3
 43664                           fsr1h	equ	0xFE2
 43665                           fsr1l	equ	0xFE1
 43666                           indf2	equ	0xFDF
 43667                           postinc2	equ	0xFDE
 43668                           postdec2	equ	0xFDD
 43669                           plusw2	equ	0xFDB
 43670                           fsr2h	equ	0xFDA
 43671                           fsr2l	equ	0xFD9
 43672                           status	equ	0xFD8
 43673                           
 43674 ;; *************** function _INT1_ISR *****************
 43675 ;; Defined at:
 43676 ;;		line 33 in file "mcc_generated_files/ext_int.c"
 43677 ;; Parameters:    Size  Location     Type
 43678 ;;		None
 43679 ;; Auto vars:     Size  Location     Type
 43680 ;;		None
 43681 ;; Return value:  Size  Location     Type
 43682 ;;                  1    wreg      void 
 43683 ;; Registers used:
 43684 ;;		wreg, status,2, status,0, pclath, tosl, cstack
 43685 ;; Tracked objects:
 43686 ;;		On entry : 0/0
 43687 ;;		On exit  : 0/0
 43688 ;;		Unchanged: 0/0
 43689 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 43690 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 43691 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 43692 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 43693 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 43694 ;;Total ram usage:        0 bytes
 43695 ;; Hardware stack levels used:    1
 43696 ;; Hardware stack levels required when called:    2
 43697 ;; This function calls:
 43698 ;;		_INT1_CallBack
 43699 ;; This function is called by:
 43700 ;;		_INTERRUPT_InterruptManager
 43701 ;; This function uses a non-reentrant model
 43702 ;;
 43703                           
 43704                           	psect	text221
 43705  009546                     __ptext221:
 43706                           	opt stack 0
 43707  009546                     _INT1_ISR:
 43708                           	opt stack 15
 43709                           
 43710                           ;ext_int.c: 35: (INTCON3bits.INT1IF = 0);
 43711                           
 43712                           ;incstack = 0
 43713  009546  90F0               	bcf	intcon3,0,c	;volatile
 43714                           
 43715                           ;ext_int.c: 38: INT1_CallBack();
 43716  009548  EC1E  F049         	call	_INT1_CallBack	;wreg free
 43717  00954C  0012               	return		;funcret
 43718  00954E                     __end_of_INT1_ISR:
 43719                           	opt stack 0
 43720                           tosu	equ	0xFFF
 43721                           tosh	equ	0xFFE
 43722                           tosl	equ	0xFFD
 43723                           pclatu	equ	0xFFB
 43724                           pclath	equ	0xFFA
 43725                           tblptru	equ	0xFF8
 43726                           tblptrh	equ	0xFF7
 43727                           tblptrl	equ	0xFF6
 43728                           tablat	equ	0xFF5
 43729                           prodh	equ	0xFF4
 43730                           prodl	equ	0xFF3
 43731                           intcon	equ	0xFF2
 43732                           intcon2	equ	0xFF1
 43733                           intcon3	equ	0xFF0
 43734                           indf0	equ	0xFEF
 43735                           postinc0	equ	0xFEE
 43736                           plusw0	equ	0xFEB
 43737                           fsr0h	equ	0xFEA
 43738                           fsr0l	equ	0xFE9
 43739                           wreg	equ	0xFE8
 43740                           postinc1	equ	0xFE6
 43741                           postdec1	equ	0xFE5
 43742                           plusw1	equ	0xFE3
 43743                           fsr1h	equ	0xFE2
 43744                           fsr1l	equ	0xFE1
 43745                           indf2	equ	0xFDF
 43746                           postinc2	equ	0xFDE
 43747                           postdec2	equ	0xFDD
 43748                           plusw2	equ	0xFDB
 43749                           fsr2h	equ	0xFDA
 43750                           fsr2l	equ	0xFD9
 43751                           status	equ	0xFD8
 43752                           
 43753 ;; *************** function _INT1_CallBack *****************
 43754 ;; Defined at:
 43755 ;;		line 42 in file "mcc_generated_files/ext_int.c"
 43756 ;; Parameters:    Size  Location     Type
 43757 ;;		None
 43758 ;; Auto vars:     Size  Location     Type
 43759 ;;		None
 43760 ;; Return value:  Size  Location     Type
 43761 ;;                  1    wreg      void 
 43762 ;; Registers used:
 43763 ;;		wreg, status,2, status,0, pclath, tosl, cstack
 43764 ;; Tracked objects:
 43765 ;;		On entry : 0/0
 43766 ;;		On exit  : 0/0
 43767 ;;		Unchanged: 0/0
 43768 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 43769 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 43770 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 43771 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 43772 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 43773 ;;Total ram usage:        0 bytes
 43774 ;; Hardware stack levels used:    1
 43775 ;; Hardware stack levels required when called:    1
 43776 ;; This function calls:
 43777 ;;		Absolute function
 43778 ;;		_DIO0_ISR_Lora
 43779 ;;		_INT1_DefaultInterruptHandler
 43780 ;; This function is called by:
 43781 ;;		_INT1_ISR
 43782 ;; This function uses a non-reentrant model
 43783 ;;
 43784                           
 43785                           	psect	text222
 43786  00923C                     __ptext222:
 43787                           	opt stack 0
 43788  00923C                     _INT1_CallBack:
 43789                           	opt stack 15
 43790                           
 43791                           ;ext_int.c: 45: if(INT1_InterruptHandler)
 43792                           
 43793                           ;incstack = 0
 43794  00923C  0103               	movlb	3	; () banked
 43795  00923E  51F9               	movf	_INT1_InterruptHandler& (0+255),w,b
 43796  009240  11FA               	iorwf	(_INT1_InterruptHandler+1)& (0+255),w,b
 43797  009242  B4D8               	btfsc	status,2,c
 43798  009244  0012               	return	
 43799                           
 43800                           ; BSR set to: 3
 43801                           ;ext_int.c: 46: {
 43802                           ;ext_int.c: 47: INT1_InterruptHandler();
 43803  009246  D801               	call	i2u1675_48
 43804  009248  0012               	return	
 43805  00924A                     i2u1675_48:
 43806  00924A  0005               	push	
 43807  00924C  6EFA               	movwf	pclath,c
 43808  00924E  51F9               	movf	_INT1_InterruptHandler& (0+255),w,b
 43809  009250  6EFD               	movwf	tosl,c
 43810  009252  51FA               	movf	(_INT1_InterruptHandler+1)& (0+255),w,b
 43811  009254  6EFE               	movwf	tosh,c
 43812  009256  6AFF               	clrf	tosu,c
 43813  009258  50FA               	movf	pclath,w,c
 43814  00925A  0012               	return		;indir
 43815  00925C                     __end_of_INT1_CallBack:
 43816                           	opt stack 0
 43817                           tosu	equ	0xFFF
 43818                           tosh	equ	0xFFE
 43819                           tosl	equ	0xFFD
 43820                           pclatu	equ	0xFFB
 43821                           pclath	equ	0xFFA
 43822                           tblptru	equ	0xFF8
 43823                           tblptrh	equ	0xFF7
 43824                           tblptrl	equ	0xFF6
 43825                           tablat	equ	0xFF5
 43826                           prodh	equ	0xFF4
 43827                           prodl	equ	0xFF3
 43828                           intcon	equ	0xFF2
 43829                           intcon2	equ	0xFF1
 43830                           intcon3	equ	0xFF0
 43831                           indf0	equ	0xFEF
 43832                           postinc0	equ	0xFEE
 43833                           plusw0	equ	0xFEB
 43834                           fsr0h	equ	0xFEA
 43835                           fsr0l	equ	0xFE9
 43836                           wreg	equ	0xFE8
 43837                           postinc1	equ	0xFE6
 43838                           postdec1	equ	0xFE5
 43839                           plusw1	equ	0xFE3
 43840                           fsr1h	equ	0xFE2
 43841                           fsr1l	equ	0xFE1
 43842                           indf2	equ	0xFDF
 43843                           postinc2	equ	0xFDE
 43844                           postdec2	equ	0xFDD
 43845                           plusw2	equ	0xFDB
 43846                           fsr2h	equ	0xFDA
 43847                           fsr2l	equ	0xFD9
 43848                           status	equ	0xFD8
 43849                           
 43850 ;; *************** function _DIO0_ISR_Lora *****************
 43851 ;; Defined at:
 43852 ;;		line 63 in file "mcc_generated_files/LoRaWAN/interrupt_manager_lora_addons.c"
 43853 ;; Parameters:    Size  Location     Type
 43854 ;;		None
 43855 ;; Auto vars:     Size  Location     Type
 43856 ;;		None
 43857 ;; Return value:  Size  Location     Type
 43858 ;;                  1    wreg      void 
 43859 ;; Registers used:
 43860 ;;		status,2, status,0
 43861 ;; Tracked objects:
 43862 ;;		On entry : 0/0
 43863 ;;		On exit  : 0/0
 43864 ;;		Unchanged: 0/0
 43865 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 43866 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 43867 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 43868 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 43869 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 43870 ;;Total ram usage:        0 bytes
 43871 ;; Hardware stack levels used:    1
 43872 ;; This function calls:
 43873 ;;		Nothing
 43874 ;; This function is called by:
 43875 ;;		_DIO0_ISR_Lora_Init
 43876 ;;		_INT1_CallBack
 43877 ;; This function uses a non-reentrant model
 43878 ;;
 43879                           
 43880                           	psect	text223
 43881  009572                     __ptext223:
 43882                           	opt stack 0
 43883  009572                     _DIO0_ISR_Lora:
 43884                           	opt stack 15
 43885                           
 43886                           ;interrupt_manager_lora_addons.c: 65: dioStatus |= 0x01;
 43887                           
 43888                           ;incstack = 0
 43889  009572  0101               	movlb	1	; () banked
 43890  009574  8154               	bsf	_dioStatus& (0+255),0,b	;volatile
 43891                           
 43892                           ; BSR set to: 1
 43893  009576  0012               	return		;funcret
 43894  009578                     __end_of_DIO0_ISR_Lora:
 43895                           	opt stack 0
 43896                           tosu	equ	0xFFF
 43897                           tosh	equ	0xFFE
 43898                           tosl	equ	0xFFD
 43899                           pclatu	equ	0xFFB
 43900                           pclath	equ	0xFFA
 43901                           tblptru	equ	0xFF8
 43902                           tblptrh	equ	0xFF7
 43903                           tblptrl	equ	0xFF6
 43904                           tablat	equ	0xFF5
 43905                           prodh	equ	0xFF4
 43906                           prodl	equ	0xFF3
 43907                           intcon	equ	0xFF2
 43908                           intcon2	equ	0xFF1
 43909                           intcon3	equ	0xFF0
 43910                           indf0	equ	0xFEF
 43911                           postinc0	equ	0xFEE
 43912                           plusw0	equ	0xFEB
 43913                           fsr0h	equ	0xFEA
 43914                           fsr0l	equ	0xFE9
 43915                           wreg	equ	0xFE8
 43916                           postinc1	equ	0xFE6
 43917                           postdec1	equ	0xFE5
 43918                           plusw1	equ	0xFE3
 43919                           fsr1h	equ	0xFE2
 43920                           fsr1l	equ	0xFE1
 43921                           indf2	equ	0xFDF
 43922                           postinc2	equ	0xFDE
 43923                           postdec2	equ	0xFDD
 43924                           plusw2	equ	0xFDB
 43925                           fsr2h	equ	0xFDA
 43926                           fsr2l	equ	0xFD9
 43927                           status	equ	0xFD8
 43928                           
 43929 ;; *************** function _INT1_DefaultInterruptHandler *****************
 43930 ;; Defined at:
 43931 ;;		line 55 in file "mcc_generated_files/ext_int.c"
 43932 ;; Parameters:    Size  Location     Type
 43933 ;;		None
 43934 ;; Auto vars:     Size  Location     Type
 43935 ;;		None
 43936 ;; Return value:  Size  Location     Type
 43937 ;;                  1    wreg      void 
 43938 ;; Registers used:
 43939 ;;		None
 43940 ;; Tracked objects:
 43941 ;;		On entry : 0/0
 43942 ;;		On exit  : 0/0
 43943 ;;		Unchanged: 0/0
 43944 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 43945 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 43946 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 43947 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 43948 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 43949 ;;Total ram usage:        0 bytes
 43950 ;; Hardware stack levels used:    1
 43951 ;; This function calls:
 43952 ;;		Nothing
 43953 ;; This function is called by:
 43954 ;;		_EXT_INT_Initialize
 43955 ;;		_INT1_CallBack
 43956 ;; This function uses a non-reentrant model
 43957 ;;
 43958                           
 43959                           	psect	text224
 43960  0095AC                     __ptext224:
 43961                           	opt stack 0
 43962  0095AC                     _INT1_DefaultInterruptHandler:
 43963                           	opt stack 15
 43964                           
 43965                           ; BSR set to: 1
 43966                           ;incstack = 0
 43967  0095AC  0012               	return		;funcret
 43968  0095AE                     __end_of_INT1_DefaultInterruptHandler:
 43969                           	opt stack 0
 43970                           tosu	equ	0xFFF
 43971                           tosh	equ	0xFFE
 43972                           tosl	equ	0xFFD
 43973                           pclatu	equ	0xFFB
 43974                           pclath	equ	0xFFA
 43975                           tblptru	equ	0xFF8
 43976                           tblptrh	equ	0xFF7
 43977                           tblptrl	equ	0xFF6
 43978                           tablat	equ	0xFF5
 43979                           prodh	equ	0xFF4
 43980                           prodl	equ	0xFF3
 43981                           intcon	equ	0xFF2
 43982                           intcon2	equ	0xFF1
 43983                           intcon3	equ	0xFF0
 43984                           indf0	equ	0xFEF
 43985                           postinc0	equ	0xFEE
 43986                           plusw0	equ	0xFEB
 43987                           fsr0h	equ	0xFEA
 43988                           fsr0l	equ	0xFE9
 43989                           wreg	equ	0xFE8
 43990                           postinc1	equ	0xFE6
 43991                           postdec1	equ	0xFE5
 43992                           plusw1	equ	0xFE3
 43993                           fsr1h	equ	0xFE2
 43994                           fsr1l	equ	0xFE1
 43995                           indf2	equ	0xFDF
 43996                           postinc2	equ	0xFDE
 43997                           postdec2	equ	0xFDD
 43998                           plusw2	equ	0xFDB
 43999                           fsr2h	equ	0xFDA
 44000                           fsr2l	equ	0xFD9
 44001                           status	equ	0xFD8
 44002                           
 44003 ;; *************** function _EUSART1_Transmit_ISR *****************
 44004 ;; Defined at:
 44005 ;;		line 226 in file "mcc_generated_files/eusart1.c"
 44006 ;; Parameters:    Size  Location     Type
 44007 ;;		None
 44008 ;; Auto vars:     Size  Location     Type
 44009 ;;		None
 44010 ;; Return value:  Size  Location     Type
 44011 ;;                  1    wreg      void 
 44012 ;; Registers used:
 44013 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 44014 ;; Tracked objects:
 44015 ;;		On entry : 0/0
 44016 ;;		On exit  : 0/0
 44017 ;;		Unchanged: 0/0
 44018 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 44019 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 44020 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 44021 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 44022 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 44023 ;;Total ram usage:        0 bytes
 44024 ;; Hardware stack levels used:    1
 44025 ;; This function calls:
 44026 ;;		Nothing
 44027 ;; This function is called by:
 44028 ;;		_EUSART1_Initialize
 44029 ;;		_INTERRUPT_InterruptManager
 44030 ;; This function uses a non-reentrant model
 44031 ;;
 44032                           
 44033                           	psect	text225
 44034  008DC8                     __ptext225:
 44035                           	opt stack 0
 44036  008DC8                     _EUSART1_Transmit_ISR:
 44037                           	opt stack 17
 44038                           
 44039                           ;eusart1.c: 230: if(sizeof(eusart1TxBuffer) > eusart1TxBufferRemaining)
 44040                           
 44041                           ;incstack = 0
 44042  008DC8  0101               	movlb	1	; () banked
 44043  008DCA  51FE               	movf	_eusart1TxBufferRemaining& (0+255),w,b	;volatile
 44044  008DCC  A4D8               	btfss	status,2,c
 44045  008DCE  D012               	goto	i2l2546
 44046                           
 44047                           ; BSR set to: 1
 44048                           ;eusart1.c: 231: {
 44049                           ;eusart1.c: 232: TXREG1 = eusart1TxBuffer[eusart1TxTail++];
 44050  008DD0  5150               	movf	_eusart1TxTail& (0+255),w,b	;volatile
 44051  008DD2  0D01               	mullw	1
 44052  008DD4  0E4F               	movlw	low _eusart1TxBuffer
 44053  008DD6  24F3               	addwf	prodl,w,c
 44054  008DD8  6ED9               	movwf	fsr2l,c
 44055  008DDA  0E01               	movlw	high _eusart1TxBuffer
 44056  008DDC  20F4               	addwfc	prodh,w,c
 44057  008DDE  6EDA               	movwf	fsr2h,c
 44058  008DE0  50DF               	movf	indf2,w,c
 44059  008DE2  6EAD               	movwf	4013,c	;volatile
 44060                           
 44061                           ; BSR set to: 1
 44062  008DE4  2B50               	incf	_eusart1TxTail& (0+255),f,b	;volatile
 44063                           
 44064                           ; BSR set to: 1
 44065                           ;eusart1.c: 233: if(sizeof(eusart1TxBuffer) <= eusart1TxTail)
 44066  008DE6  5150               	movf	_eusart1TxTail& (0+255),w,b	;volatile
 44067  008DE8  B4D8               	btfsc	status,2,c
 44068  008DEA  D002               	goto	i2l2547
 44069                           
 44070                           ; BSR set to: 1
 44071                           ;eusart1.c: 234: {
 44072                           ;eusart1.c: 235: eusart1TxTail = 0;
 44073  008DEC  0E00               	movlw	0
 44074  008DEE  6F50               	movwf	_eusart1TxTail& (0+255),b	;volatile
 44075  008DF0                     i2l2547:
 44076                           
 44077                           ; BSR set to: 1
 44078                           ;eusart1.c: 236: }
 44079                           ;eusart1.c: 237: eusart1TxBufferRemaining++;
 44080                           
 44081                           ; BSR set to: 1
 44082  008DF0  2BFE               	incf	_eusart1TxBufferRemaining& (0+255),f,b	;volatile
 44083                           
 44084                           ;eusart1.c: 238: }
 44085  008DF2  0012               	return	
 44086  008DF4                     i2l2546:
 44087                           
 44088                           ; BSR set to: 1
 44089                           ;eusart1.c: 239: else
 44090                           ;eusart1.c: 240: {
 44091                           ;eusart1.c: 241: PIE1bits.TX1IE = 0;
 44092  008DF4  989D               	bcf	3997,4,c	;volatile
 44093  008DF6  0012               	return	
 44094  008DF8                     __end_of_EUSART1_Transmit_ISR:
 44095                           	opt stack 0
 44096                           tosu	equ	0xFFF
 44097                           tosh	equ	0xFFE
 44098                           tosl	equ	0xFFD
 44099                           pclatu	equ	0xFFB
 44100                           pclath	equ	0xFFA
 44101                           tblptru	equ	0xFF8
 44102                           tblptrh	equ	0xFF7
 44103                           tblptrl	equ	0xFF6
 44104                           tablat	equ	0xFF5
 44105                           prodh	equ	0xFF4
 44106                           prodl	equ	0xFF3
 44107                           intcon	equ	0xFF2
 44108                           intcon2	equ	0xFF1
 44109                           intcon3	equ	0xFF0
 44110                           indf0	equ	0xFEF
 44111                           postinc0	equ	0xFEE
 44112                           plusw0	equ	0xFEB
 44113                           fsr0h	equ	0xFEA
 44114                           fsr0l	equ	0xFE9
 44115                           wreg	equ	0xFE8
 44116                           postinc1	equ	0xFE6
 44117                           postdec1	equ	0xFE5
 44118                           plusw1	equ	0xFE3
 44119                           fsr1h	equ	0xFE2
 44120                           fsr1l	equ	0xFE1
 44121                           indf2	equ	0xFDF
 44122                           postinc2	equ	0xFDE
 44123                           postdec2	equ	0xFDD
 44124                           plusw2	equ	0xFDB
 44125                           fsr2h	equ	0xFDA
 44126                           fsr2l	equ	0xFD9
 44127                           status	equ	0xFD8
 44128                           
 44129 ;; *************** function _EUSART1_Receive_ISR *****************
 44130 ;; Defined at:
 44131 ;;		line 245 in file "mcc_generated_files/eusart1.c"
 44132 ;; Parameters:    Size  Location     Type
 44133 ;;		None
 44134 ;; Auto vars:     Size  Location     Type
 44135 ;;		None
 44136 ;; Return value:  Size  Location     Type
 44137 ;;                  1    wreg      void 
 44138 ;; Registers used:
 44139 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
 44140 ;; Tracked objects:
 44141 ;;		On entry : 0/0
 44142 ;;		On exit  : 0/0
 44143 ;;		Unchanged: 0/0
 44144 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 44145 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 44146 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 44147 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 44148 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 44149 ;;Total ram usage:        3 bytes
 44150 ;; Hardware stack levels used:    1
 44151 ;; Hardware stack levels required when called:    2
 44152 ;; This function calls:
 44153 ;;		Absolute function
 44154 ;;		_EUSART1_DefaultErrorHandler
 44155 ;;		_EUSART1_DefaultFramingErrorHandler
 44156 ;;		_EUSART1_DefaultOverrunErrorHandler
 44157 ;;		_EUSART1_Read
 44158 ;;		_EUSART1_RxDataHandler
 44159 ;;		_strncat
 44160 ;; This function is called by:
 44161 ;;		_EUSART1_Initialize
 44162 ;;		_INTERRUPT_InterruptManager
 44163 ;; This function uses a non-reentrant model
 44164 ;;
 44165                           
 44166                           	psect	text226
 44167  003D88                     __ptext226:
 44168                           	opt stack 0
 44169  003D88                     _EUSART1_Receive_ISR:
 44170                           	opt stack 15
 44171                           
 44172                           ;eusart1.c: 248: eusart1RxStatusBuffer[eusart1RxHead].status = 0;
 44173                           
 44174                           ; BSR set to: 1
 44175                           ;incstack = 0
 44176  003D88  5050               	movf	_eusart1RxHead,w,c	;volatile
 44177  003D8A  0D01               	mullw	1
 44178  003D8C  0E4E               	movlw	low _eusart1RxStatusBuffer
 44179  003D8E  24F3               	addwf	prodl,w,c
 44180  003D90  6ED9               	movwf	fsr2l,c
 44181  003D92  0E00               	movlw	high _eusart1RxStatusBuffer
 44182  003D94  20F4               	addwfc	prodh,w,c
 44183  003D96  6EDA               	movwf	fsr2h,c
 44184  003D98  0E00               	movlw	0
 44185  003D9A  6EDF               	movwf	indf2,c
 44186                           
 44187                           ;eusart1.c: 250: if(RCSTA1bits.FERR){
 44188  003D9C  A4AB               	btfss	4011,2,c	;volatile
 44189  003D9E  D015               	goto	i2u1690_49
 44190                           
 44191                           ;eusart1.c: 251: eusart1RxStatusBuffer[eusart1RxHead].ferr = 1;
 44192  003DA0  5050               	movf	_eusart1RxHead,w,c	;volatile
 44193  003DA2  0D01               	mullw	1
 44194  003DA4  0E4E               	movlw	low _eusart1RxStatusBuffer
 44195  003DA6  24F3               	addwf	prodl,w,c
 44196  003DA8  6ED9               	movwf	fsr2l,c
 44197  003DAA  0E00               	movlw	high _eusart1RxStatusBuffer
 44198  003DAC  20F4               	addwfc	prodh,w,c
 44199  003DAE  6EDA               	movwf	fsr2h,c
 44200  003DB0  82DF               	bsf	indf2,1,c
 44201                           
 44202                           ;eusart1.c: 252: EUSART1_FramingErrorHandler();
 44203  003DB2  D801               	call	i2u1690_48
 44204  003DB4  D00A               	goto	i2u1690_49
 44205  003DB6                     i2u1690_48:
 44206  003DB6  0005               	push	
 44207  003DB8  6EFA               	movwf	pclath,c
 44208  003DBA  0103               	movlb	3	; () banked
 44209  003DBC  51EF               	movf	_EUSART1_FramingErrorHandler& (0+255),w,b
 44210  003DBE  6EFD               	movwf	tosl,c
 44211  003DC0  51F0               	movf	(_EUSART1_FramingErrorHandler+1)& (0+255),w,b
 44212  003DC2  6EFE               	movwf	tosh,c
 44213  003DC4  6AFF               	clrf	tosu,c
 44214  003DC6  50FA               	movf	pclath,w,c
 44215  003DC8  0012               	return		;indir
 44216  003DCA                     i2u1690_49:
 44217                           
 44218                           ;eusart1.c: 253: }
 44219                           ;eusart1.c: 255: if(RCSTA1bits.OERR){
 44220  003DCA  A2AB               	btfss	4011,1,c	;volatile
 44221  003DCC  D015               	goto	i2u1692_49
 44222                           
 44223                           ;eusart1.c: 256: eusart1RxStatusBuffer[eusart1RxHead].oerr = 1;
 44224  003DCE  5050               	movf	_eusart1RxHead,w,c	;volatile
 44225  003DD0  0D01               	mullw	1
 44226  003DD2  0E4E               	movlw	low _eusart1RxStatusBuffer
 44227  003DD4  24F3               	addwf	prodl,w,c
 44228  003DD6  6ED9               	movwf	fsr2l,c
 44229  003DD8  0E00               	movlw	high _eusart1RxStatusBuffer
 44230  003DDA  20F4               	addwfc	prodh,w,c
 44231  003DDC  6EDA               	movwf	fsr2h,c
 44232  003DDE  84DF               	bsf	indf2,2,c
 44233                           
 44234                           ;eusart1.c: 257: EUSART1_OverrunErrorHandler();
 44235  003DE0  D801               	call	i2u1692_48
 44236  003DE2  D00A               	goto	i2u1692_49
 44237  003DE4                     i2u1692_48:
 44238  003DE4  0005               	push	
 44239  003DE6  6EFA               	movwf	pclath,c
 44240  003DE8  0103               	movlb	3	; () banked
 44241  003DEA  51ED               	movf	_EUSART1_OverrunErrorHandler& (0+255),w,b
 44242  003DEC  6EFD               	movwf	tosl,c
 44243  003DEE  51EE               	movf	(_EUSART1_OverrunErrorHandler+1)& (0+255),w,b
 44244  003DF0  6EFE               	movwf	tosh,c
 44245  003DF2  6AFF               	clrf	tosu,c
 44246  003DF4  50FA               	movf	pclath,w,c
 44247  003DF6  0012               	return		;indir
 44248  003DF8                     i2u1692_49:
 44249                           
 44250                           ;eusart1.c: 258: }
 44251                           ;eusart1.c: 260: if(eusart1RxStatusBuffer[eusart1RxHead].status){
 44252  003DF8  5050               	movf	_eusart1RxHead,w,c	;volatile
 44253  003DFA  0D01               	mullw	1
 44254  003DFC  0E4E               	movlw	low _eusart1RxStatusBuffer
 44255  003DFE  24F3               	addwf	prodl,w,c
 44256  003E00  6ED9               	movwf	fsr2l,c
 44257  003E02  0E00               	movlw	high _eusart1RxStatusBuffer
 44258  003E04  20F4               	addwfc	prodh,w,c
 44259  003E06  6EDA               	movwf	fsr2h,c
 44260  003E08  50DF               	movf	indf2,w,c
 44261  003E0A  B4D8               	btfsc	status,2,c
 44262  003E0C  D00C               	goto	i2l2554
 44263                           
 44264                           ;eusart1.c: 261: EUSART1_ErrorHandler();
 44265  003E0E  D801               	call	i2u1694_48
 44266  003E10  0012               	return	
 44267  003E12                     i2u1694_48:
 44268  003E12  0005               	push	
 44269  003E14  6EFA               	movwf	pclath,c
 44270  003E16  0103               	movlb	3	; () banked
 44271  003E18  51EB               	movf	_EUSART1_ErrorHandler& (0+255),w,b
 44272  003E1A  6EFD               	movwf	tosl,c
 44273  003E1C  51EC               	movf	(_EUSART1_ErrorHandler+1)& (0+255),w,b
 44274  003E1E  6EFE               	movwf	tosh,c
 44275  003E20  6AFF               	clrf	tosu,c
 44276  003E22  50FA               	movf	pclath,w,c
 44277  003E24  0012               	return		;indir
 44278  003E26                     i2l2554:
 44279                           
 44280                           ;eusart1.c: 263: EUSART1_RxDataHandler();
 44281  003E26  EC35  F048         	call	_EUSART1_RxDataHandler	;wreg free
 44282                           
 44283                           ;eusart1.c: 264: LATA=0xF0;
 44284  003E2A  0EF0               	movlw	240
 44285  003E2C  6E89               	movwf	3977,c	;volatile
 44286                           
 44287                           ;eusart1.c: 266: datax = EUSART1_Read();
 44288  003E2E  ECEB  F043         	call	_EUSART1_Read	;wreg free
 44289  003E32  0101               	movlb	1	; () banked
 44290  003E34  6F4B               	movwf	_datax& (0+255),b
 44291                           
 44292                           ; BSR set to: 1
 44293                           ;eusart1.c: 268: datatobesolved = datax;
 44294  003E36  C14B  F04A         	movff	_datax,_datatobesolved
 44295  003E3A  6A4B               	clrf	_datatobesolved+1,c
 44296                           
 44297                           ; BSR set to: 1
 44298                           ;eusart1.c: 270: bitStatusbefore1 = (datatobesolved >> 0) & 1;
 44299  003E3C  0E01               	movlw	1
 44300  003E3E  144A               	andwf	_datatobesolved,w,c
 44301  003E40  6F40               	movwf	_bitStatusbefore1& (0+255),b
 44302  003E42  6B41               	clrf	(_bitStatusbefore1+1)& (0+255),b
 44303                           
 44304                           ; BSR set to: 1
 44305                           ;eusart1.c: 271: bitStatusbefore2 = (datatobesolved >> 1) & 1;
 44306  003E44  344B               	rlcf	_datatobesolved+1,w,c
 44307  003E46  304B               	rrcf	_datatobesolved+1,w,c
 44308  003E48  6E0A               	movwf	(??_EUSART1_Receive_ISR+1)& (0+255),c
 44309  003E4A  304A               	rrcf	_datatobesolved,w,c
 44310  003E4C  6E09               	movwf	??_EUSART1_Receive_ISR& (0+255),c
 44311  003E4E  0E01               	movlw	1
 44312  003E50  1409               	andwf	??_EUSART1_Receive_ISR,w,c
 44313  003E52  6F3E               	movwf	_bitStatusbefore2& (0+255),b
 44314  003E54  6B3F               	clrf	(_bitStatusbefore2+1)& (0+255),b
 44315                           
 44316                           ; BSR set to: 1
 44317                           ;eusart1.c: 272: bitStatusbefore3 = (datatobesolved >> 2) & 1;
 44318  003E56  C04A  F009         	movff	_datatobesolved,??_EUSART1_Receive_ISR
 44319  003E5A  C04B  F00A         	movff	_datatobesolved+1,??_EUSART1_Receive_ISR+1
 44320  003E5E  340A               	rlcf	??_EUSART1_Receive_ISR+1,w,c
 44321  003E60  320A               	rrcf	??_EUSART1_Receive_ISR+1,f,c
 44322  003E62  3209               	rrcf	??_EUSART1_Receive_ISR,f,c
 44323  003E64  340A               	rlcf	??_EUSART1_Receive_ISR+1,w,c
 44324  003E66  320A               	rrcf	??_EUSART1_Receive_ISR+1,f,c
 44325  003E68  3209               	rrcf	??_EUSART1_Receive_ISR,f,c
 44326  003E6A  0E01               	movlw	1
 44327  003E6C  1409               	andwf	??_EUSART1_Receive_ISR,w,c
 44328  003E6E  6F3C               	movwf	_bitStatusbefore3& (0+255),b
 44329  003E70  6B3D               	clrf	(_bitStatusbefore3+1)& (0+255),b
 44330                           
 44331                           ; BSR set to: 1
 44332                           ;eusart1.c: 273: bitStatusbefore4 = (datatobesolved >> 3) & 1;
 44333  003E72  C04A  F009         	movff	_datatobesolved,??_EUSART1_Receive_ISR
 44334  003E76  C04B  F00A         	movff	_datatobesolved+1,??_EUSART1_Receive_ISR+1
 44335  003E7A  340A               	rlcf	??_EUSART1_Receive_ISR+1,w,c
 44336  003E7C  320A               	rrcf	??_EUSART1_Receive_ISR+1,f,c
 44337  003E7E  3209               	rrcf	??_EUSART1_Receive_ISR,f,c
 44338  003E80  340A               	rlcf	??_EUSART1_Receive_ISR+1,w,c
 44339  003E82  320A               	rrcf	??_EUSART1_Receive_ISR+1,f,c
 44340  003E84  3209               	rrcf	??_EUSART1_Receive_ISR,f,c
 44341  003E86  340A               	rlcf	??_EUSART1_Receive_ISR+1,w,c
 44342  003E88  320A               	rrcf	??_EUSART1_Receive_ISR+1,f,c
 44343  003E8A  3209               	rrcf	??_EUSART1_Receive_ISR,f,c
 44344  003E8C  0E01               	movlw	1
 44345  003E8E  1409               	andwf	??_EUSART1_Receive_ISR,w,c
 44346  003E90  6F3A               	movwf	_bitStatusbefore4& (0+255),b
 44347  003E92  6B3B               	clrf	(_bitStatusbefore4+1)& (0+255),b
 44348                           
 44349                           ; BSR set to: 1
 44350                           ;eusart1.c: 274: bitStatusbefore5 = (datatobesolved >> 4) & 1;
 44351  003E94  C04A  F009         	movff	_datatobesolved,??_EUSART1_Receive_ISR
 44352  003E98  C04B  F00A         	movff	_datatobesolved+1,??_EUSART1_Receive_ISR+1
 44353  003E9C  0E04               	movlw	4
 44354  003E9E  6E0B               	movwf	(??_EUSART1_Receive_ISR+2)& (0+255),c
 44355  003EA0                     i2u1695_45:
 44356  003EA0  340A               	rlcf	??_EUSART1_Receive_ISR+1,w,c
 44357  003EA2  320A               	rrcf	??_EUSART1_Receive_ISR+1,f,c
 44358  003EA4  3209               	rrcf	??_EUSART1_Receive_ISR,f,c
 44359  003EA6  2E0B               	decfsz	(??_EUSART1_Receive_ISR+2)& (0+255),f,c
 44360  003EA8  D7FB               	goto	i2u1695_45
 44361  003EAA  0E01               	movlw	1
 44362  003EAC  1409               	andwf	??_EUSART1_Receive_ISR,w,c
 44363  003EAE  6F38               	movwf	_bitStatusbefore5& (0+255),b
 44364  003EB0  6B39               	clrf	(_bitStatusbefore5+1)& (0+255),b
 44365                           
 44366                           ; BSR set to: 1
 44367                           ;eusart1.c: 275: bitStatusbefore6 = (datatobesolved >> 5) & 1;
 44368  003EB2  C04A  F009         	movff	_datatobesolved,??_EUSART1_Receive_ISR
 44369  003EB6  C04B  F00A         	movff	_datatobesolved+1,??_EUSART1_Receive_ISR+1
 44370  003EBA  0E05               	movlw	5
 44371  003EBC  6E0B               	movwf	(??_EUSART1_Receive_ISR+2)& (0+255),c
 44372  003EBE                     i2u1696_45:
 44373  003EBE  340A               	rlcf	??_EUSART1_Receive_ISR+1,w,c
 44374  003EC0  320A               	rrcf	??_EUSART1_Receive_ISR+1,f,c
 44375  003EC2  3209               	rrcf	??_EUSART1_Receive_ISR,f,c
 44376  003EC4  2E0B               	decfsz	(??_EUSART1_Receive_ISR+2)& (0+255),f,c
 44377  003EC6  D7FB               	goto	i2u1696_45
 44378  003EC8  0E01               	movlw	1
 44379  003ECA  1409               	andwf	??_EUSART1_Receive_ISR,w,c
 44380  003ECC  6F36               	movwf	_bitStatusbefore6& (0+255),b
 44381  003ECE  6B37               	clrf	(_bitStatusbefore6+1)& (0+255),b
 44382                           
 44383                           ; BSR set to: 1
 44384                           ;eusart1.c: 276: bitStatusbefore7 = (datatobesolved >> 6) & 1;
 44385  003ED0  C04A  F009         	movff	_datatobesolved,??_EUSART1_Receive_ISR
 44386  003ED4  C04B  F00A         	movff	_datatobesolved+1,??_EUSART1_Receive_ISR+1
 44387  003ED8  0E06               	movlw	6
 44388  003EDA  6E0B               	movwf	(??_EUSART1_Receive_ISR+2)& (0+255),c
 44389  003EDC                     i2u1697_45:
 44390  003EDC  340A               	rlcf	??_EUSART1_Receive_ISR+1,w,c
 44391  003EDE  320A               	rrcf	??_EUSART1_Receive_ISR+1,f,c
 44392  003EE0  3209               	rrcf	??_EUSART1_Receive_ISR,f,c
 44393  003EE2  2E0B               	decfsz	(??_EUSART1_Receive_ISR+2)& (0+255),f,c
 44394  003EE4  D7FB               	goto	i2u1697_45
 44395  003EE6  0E01               	movlw	1
 44396  003EE8  1409               	andwf	??_EUSART1_Receive_ISR,w,c
 44397  003EEA  6F34               	movwf	_bitStatusbefore7& (0+255),b
 44398  003EEC  6B35               	clrf	(_bitStatusbefore7+1)& (0+255),b
 44399                           
 44400                           ; BSR set to: 1
 44401                           ;eusart1.c: 278: bitStatus1 = bitStatusbefore1<<0;
 44402  003EEE  C140  F130         	movff	_bitStatusbefore1,_bitStatus1
 44403  003EF2  C141  F131         	movff	_bitStatusbefore1+1,_bitStatus1+1
 44404                           
 44405                           ; BSR set to: 1
 44406                           ;eusart1.c: 279: bitStatus2 = bitStatusbefore2<<1;
 44407  003EF6  90D8               	bcf	status,0,c
 44408  003EF8  353E               	rlcf	_bitStatusbefore2& (0+255),w,b
 44409  003EFA  6F2E               	movwf	_bitStatus2& (0+255),b
 44410  003EFC  353F               	rlcf	(_bitStatusbefore2+1)& (0+255),w,b
 44411  003EFE  6F2F               	movwf	(_bitStatus2+1)& (0+255),b
 44412                           
 44413                           ; BSR set to: 1
 44414                           ;eusart1.c: 280: bitStatus3 = bitStatusbefore3<<2;
 44415  003F00  C13C  F009         	movff	_bitStatusbefore3,??_EUSART1_Receive_ISR
 44416  003F04  C13D  F00A         	movff	_bitStatusbefore3+1,??_EUSART1_Receive_ISR+1
 44417  003F08  90D8               	bcf	status,0,c
 44418  003F0A  3609               	rlcf	??_EUSART1_Receive_ISR,f,c
 44419  003F0C  360A               	rlcf	??_EUSART1_Receive_ISR+1,f,c
 44420  003F0E  90D8               	bcf	status,0,c
 44421  003F10  3609               	rlcf	??_EUSART1_Receive_ISR,f,c
 44422  003F12  360A               	rlcf	??_EUSART1_Receive_ISR+1,f,c
 44423  003F14  C009  F12C         	movff	??_EUSART1_Receive_ISR,_bitStatus3
 44424  003F18  C00A  F12D         	movff	??_EUSART1_Receive_ISR+1,_bitStatus3+1
 44425                           
 44426                           ; BSR set to: 1
 44427                           ;eusart1.c: 281: bitStatus4 = bitStatusbefore4<<3;
 44428  003F1C  C13A  F009         	movff	_bitStatusbefore4,??_EUSART1_Receive_ISR
 44429  003F20  C13B  F00A         	movff	_bitStatusbefore4+1,??_EUSART1_Receive_ISR+1
 44430  003F24  90D8               	bcf	status,0,c
 44431  003F26  3609               	rlcf	??_EUSART1_Receive_ISR,f,c
 44432  003F28  360A               	rlcf	??_EUSART1_Receive_ISR+1,f,c
 44433  003F2A  90D8               	bcf	status,0,c
 44434  003F2C  3609               	rlcf	??_EUSART1_Receive_ISR,f,c
 44435  003F2E  360A               	rlcf	??_EUSART1_Receive_ISR+1,f,c
 44436  003F30  90D8               	bcf	status,0,c
 44437  003F32  3609               	rlcf	??_EUSART1_Receive_ISR,f,c
 44438  003F34  360A               	rlcf	??_EUSART1_Receive_ISR+1,f,c
 44439  003F36  C009  F12A         	movff	??_EUSART1_Receive_ISR,_bitStatus4
 44440  003F3A  C00A  F12B         	movff	??_EUSART1_Receive_ISR+1,_bitStatus4+1
 44441                           
 44442                           ; BSR set to: 1
 44443                           ;eusart1.c: 282: bitStatus5 = bitStatusbefore5<<4;
 44444  003F3E  C138  F009         	movff	_bitStatusbefore5,??_EUSART1_Receive_ISR
 44445  003F42  C139  F00A         	movff	_bitStatusbefore5+1,??_EUSART1_Receive_ISR+1
 44446  003F46  3A09               	swapf	??_EUSART1_Receive_ISR,f,c
 44447  003F48  3A0A               	swapf	??_EUSART1_Receive_ISR+1,f,c
 44448  003F4A  0EF0               	movlw	240
 44449  003F4C  160A               	andwf	??_EUSART1_Receive_ISR+1,f,c
 44450  003F4E  5009               	movf	??_EUSART1_Receive_ISR,w,c
 44451  003F50  0B0F               	andlw	15
 44452  003F52  120A               	iorwf	??_EUSART1_Receive_ISR+1,f,c
 44453  003F54  0EF0               	movlw	240
 44454  003F56  1609               	andwf	??_EUSART1_Receive_ISR,f,c
 44455  003F58  C009  F128         	movff	??_EUSART1_Receive_ISR,_bitStatus5
 44456  003F5C  C00A  F129         	movff	??_EUSART1_Receive_ISR+1,_bitStatus5+1
 44457                           
 44458                           ; BSR set to: 1
 44459                           ;eusart1.c: 283: bitStatus6 = bitStatusbefore6<<5;
 44460  003F60  C136  F009         	movff	_bitStatusbefore6,??_EUSART1_Receive_ISR
 44461  003F64  C137  F00A         	movff	_bitStatusbefore6+1,??_EUSART1_Receive_ISR+1
 44462  003F68  0E05               	movlw	5
 44463  003F6A                     i2u1698_45:
 44464  003F6A  90D8               	bcf	status,0,c
 44465  003F6C  3609               	rlcf	??_EUSART1_Receive_ISR,f,c
 44466  003F6E  360A               	rlcf	??_EUSART1_Receive_ISR+1,f,c
 44467  003F70  2EE8               	decfsz	wreg,f,c
 44468  003F72  D7FB               	goto	i2u1698_45
 44469  003F74  C009  F126         	movff	??_EUSART1_Receive_ISR,_bitStatus6
 44470  003F78  C00A  F127         	movff	??_EUSART1_Receive_ISR+1,_bitStatus6+1
 44471                           
 44472                           ; BSR set to: 1
 44473                           ;eusart1.c: 284: bitStatus7 = bitStatusbefore7<<6;
 44474  003F7C  C134  F009         	movff	_bitStatusbefore7,??_EUSART1_Receive_ISR
 44475  003F80  C135  F00A         	movff	_bitStatusbefore7+1,??_EUSART1_Receive_ISR+1
 44476  003F84  0E06               	movlw	6
 44477  003F86                     i2u1699_45:
 44478  003F86  90D8               	bcf	status,0,c
 44479  003F88  3609               	rlcf	??_EUSART1_Receive_ISR,f,c
 44480  003F8A  360A               	rlcf	??_EUSART1_Receive_ISR+1,f,c
 44481  003F8C  2EE8               	decfsz	wreg,f,c
 44482  003F8E  D7FB               	goto	i2u1699_45
 44483  003F90  C009  F124         	movff	??_EUSART1_Receive_ISR,_bitStatus7
 44484  003F94  C00A  F125         	movff	??_EUSART1_Receive_ISR+1,_bitStatus7+1
 44485                           
 44486                           ; BSR set to: 1
 44487                           ;eusart1.c: 286: dataresult = bitStatus7 | bitStatus6 | bitStatus5 | bitStatus4 | bitSta
      +                          tus3 | bitStatus2 | bitStatus1;
 44488  003F98  5126               	movf	_bitStatus6& (0+255),w,b
 44489  003F9A  1124               	iorwf	_bitStatus7& (0+255),w,b
 44490  003F9C  6E09               	movwf	??_EUSART1_Receive_ISR& (0+255),c
 44491  003F9E  5127               	movf	(_bitStatus6+1)& (0+255),w,b
 44492  003FA0  1125               	iorwf	(_bitStatus7+1)& (0+255),w,b
 44493  003FA2  6E0A               	movwf	(??_EUSART1_Receive_ISR+1)& (0+255),c
 44494  003FA4  5128               	movf	_bitStatus5& (0+255),w,b
 44495  003FA6  1209               	iorwf	??_EUSART1_Receive_ISR,f,c
 44496  003FA8  5129               	movf	(_bitStatus5+1)& (0+255),w,b
 44497  003FAA  120A               	iorwf	??_EUSART1_Receive_ISR+1,f,c
 44498  003FAC  512A               	movf	_bitStatus4& (0+255),w,b
 44499  003FAE  1209               	iorwf	??_EUSART1_Receive_ISR,f,c
 44500  003FB0  512B               	movf	(_bitStatus4+1)& (0+255),w,b
 44501  003FB2  120A               	iorwf	??_EUSART1_Receive_ISR+1,f,c
 44502  003FB4  512C               	movf	_bitStatus3& (0+255),w,b
 44503  003FB6  1209               	iorwf	??_EUSART1_Receive_ISR,f,c
 44504  003FB8  512D               	movf	(_bitStatus3+1)& (0+255),w,b
 44505  003FBA  120A               	iorwf	??_EUSART1_Receive_ISR+1,f,c
 44506  003FBC  512E               	movf	_bitStatus2& (0+255),w,b
 44507  003FBE  1209               	iorwf	??_EUSART1_Receive_ISR,f,c
 44508  003FC0  512F               	movf	(_bitStatus2+1)& (0+255),w,b
 44509  003FC2  120A               	iorwf	??_EUSART1_Receive_ISR+1,f,c
 44510  003FC4  5130               	movf	_bitStatus1& (0+255),w,b
 44511  003FC6  1009               	iorwf	??_EUSART1_Receive_ISR,w,c
 44512  003FC8  6F8B               	movwf	_dataresult& (0+255),b
 44513  003FCA  5131               	movf	(_bitStatus1+1)& (0+255),w,b
 44514  003FCC  100A               	iorwf	??_EUSART1_Receive_ISR+1,w,c
 44515  003FCE  6F8C               	movwf	(_dataresult+1)& (0+255),b
 44516                           
 44517                           ; BSR set to: 1
 44518                           ;eusart1.c: 288: strncat(dataxstr, &dataresult, 1);
 44519  003FD0  0E40               	movlw	low _dataxstr
 44520  003FD2  6E01               	movwf	strncat@to,c
 44521  003FD4  0E05               	movlw	high _dataxstr
 44522  003FD6  6E02               	movwf	strncat@to+1,c
 44523  003FD8  0E8B               	movlw	low _dataresult
 44524  003FDA  6E03               	movwf	strncat@from,c
 44525  003FDC  0E01               	movlw	high _dataresult
 44526  003FDE  6E04               	movwf	strncat@from+1,c
 44527  003FE0  0E00               	movlw	0
 44528  003FE2  6E06               	movwf	strncat@size+1,c
 44529  003FE4  0E01               	movlw	1
 44530  003FE6  6E05               	movwf	strncat@size,c
 44531  003FE8  EC42  F040         	call	_strncat	;wreg free
 44532  003FEC  0012               	return	
 44533  003FEE                     __end_of_EUSART1_Receive_ISR:
 44534                           	opt stack 0
 44535                           tosu	equ	0xFFF
 44536                           tosh	equ	0xFFE
 44537                           tosl	equ	0xFFD
 44538                           pclatu	equ	0xFFB
 44539                           pclath	equ	0xFFA
 44540                           tblptru	equ	0xFF8
 44541                           tblptrh	equ	0xFF7
 44542                           tblptrl	equ	0xFF6
 44543                           tablat	equ	0xFF5
 44544                           prodh	equ	0xFF4
 44545                           prodl	equ	0xFF3
 44546                           intcon	equ	0xFF2
 44547                           intcon2	equ	0xFF1
 44548                           intcon3	equ	0xFF0
 44549                           indf0	equ	0xFEF
 44550                           postinc0	equ	0xFEE
 44551                           plusw0	equ	0xFEB
 44552                           fsr0h	equ	0xFEA
 44553                           fsr0l	equ	0xFE9
 44554                           wreg	equ	0xFE8
 44555                           postinc1	equ	0xFE6
 44556                           postdec1	equ	0xFE5
 44557                           plusw1	equ	0xFE3
 44558                           fsr1h	equ	0xFE2
 44559                           fsr1l	equ	0xFE1
 44560                           indf2	equ	0xFDF
 44561                           postinc2	equ	0xFDE
 44562                           postdec2	equ	0xFDD
 44563                           plusw2	equ	0xFDB
 44564                           fsr2h	equ	0xFDA
 44565                           fsr2l	equ	0xFD9
 44566                           status	equ	0xFD8
 44567                           
 44568 ;; *************** function _strncat *****************
 44569 ;; Defined at:
 44570 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strncat.c"
 44571 ;; Parameters:    Size  Location     Type
 44572 ;;  to              2    0[COMRAM] PTR unsigned char 
 44573 ;;		 -> dataxstr(64), 
 44574 ;;  from            2    2[COMRAM] PTR const unsigned char 
 44575 ;;		 -> dataresult(2), 
 44576 ;;  size            2    4[COMRAM] unsigned int 
 44577 ;; Auto vars:     Size  Location     Type
 44578 ;;  cp              2    6[COMRAM] PTR unsigned char 
 44579 ;;		 -> dataxstr(64), 
 44580 ;; Return value:  Size  Location     Type
 44581 ;;                  2    0[COMRAM] PTR unsigned char 
 44582 ;; Registers used:
 44583 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0
 44584 ;; Tracked objects:
 44585 ;;		On entry : 0/0
 44586 ;;		On exit  : 0/0
 44587 ;;		Unchanged: 0/0
 44588 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 44589 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 44590 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 44591 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 44592 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 44593 ;;Total ram usage:        8 bytes
 44594 ;; Hardware stack levels used:    1
 44595 ;; This function calls:
 44596 ;;		Nothing
 44597 ;; This function is called by:
 44598 ;;		_EUSART1_Receive_ISR
 44599 ;; This function uses a non-reentrant model
 44600 ;;
 44601                           
 44602                           	psect	text227
 44603  008084                     __ptext227:
 44604                           	opt stack 0
 44605  008084                     _strncat:
 44606                           	opt stack 16
 44607                           
 44608                           ;incstack = 0
 44609  008084  C001  F007         	movff	strncat@to,strncat@cp
 44610  008088  C002  F008         	movff	strncat@to+1,strncat@cp+1
 44611  00808C  D002               	goto	i2l3403
 44612  00808E  4A07               	infsnz	strncat@cp,f,c
 44613  008090  2A08               	incf	strncat@cp+1,f,c
 44614  008092                     i2l3403:
 44615  008092  C007  FFD9         	movff	strncat@cp,fsr2l
 44616  008096  C008  FFDA         	movff	strncat@cp+1,fsr2h
 44617  00809A  50DF               	movf	indf2,w,c
 44618  00809C  B4D8               	btfsc	status,2,c
 44619  00809E  D008               	goto	i2l3406
 44620  0080A0  D7F6               	goto	i2l3404
 44621  0080A2  0605               	decf	strncat@size,f,c
 44622  0080A4  A0D8               	btfss	status,0,c
 44623  0080A6  0606               	decf	strncat@size+1,f,c
 44624  0080A8  4A07               	infsnz	strncat@cp,f,c
 44625  0080AA  2A08               	incf	strncat@cp+1,f,c
 44626  0080AC  4A03               	infsnz	strncat@from,f,c
 44627  0080AE  2A04               	incf	strncat@from+1,f,c
 44628  0080B0                     i2l3406:
 44629  0080B0  5005               	movf	strncat@size,w,c
 44630  0080B2  1006               	iorwf	strncat@size+1,w,c
 44631  0080B4  B4D8               	btfsc	status,2,c
 44632  0080B6  D00D               	goto	i2u1382_40
 44633  0080B8  C003  FFD9         	movff	strncat@from,fsr2l
 44634  0080BC  C004  FFDA         	movff	strncat@from+1,fsr2h
 44635  0080C0  C007  FFE9         	movff	strncat@cp,fsr0l
 44636  0080C4  C008  FFEA         	movff	strncat@cp+1,fsr0h
 44637  0080C8  CFDF FFEF          	movff	indf2,indf0
 44638  0080CC  50EF               	movf	indf0,w,c
 44639  0080CE  A4D8               	btfss	status,2,c
 44640  0080D0  D7E8               	goto	i2l3407
 44641  0080D2                     i2u1382_40:
 44642  0080D2  5005               	movf	strncat@size,w,c
 44643  0080D4  1006               	iorwf	strncat@size+1,w,c
 44644  0080D6  A4D8               	btfss	status,2,c
 44645  0080D8  0012               	return	
 44646  0080DA  C007  FFD9         	movff	strncat@cp,fsr2l
 44647  0080DE  C008  FFDA         	movff	strncat@cp+1,fsr2h
 44648  0080E2  0E00               	movlw	0
 44649  0080E4  6EDF               	movwf	indf2,c
 44650  0080E6  0012               	return	
 44651  0080E8                     __end_of_strncat:
 44652                           	opt stack 0
 44653                           tosu	equ	0xFFF
 44654                           tosh	equ	0xFFE
 44655                           tosl	equ	0xFFD
 44656                           pclatu	equ	0xFFB
 44657                           pclath	equ	0xFFA
 44658                           tblptru	equ	0xFF8
 44659                           tblptrh	equ	0xFF7
 44660                           tblptrl	equ	0xFF6
 44661                           tablat	equ	0xFF5
 44662                           prodh	equ	0xFF4
 44663                           prodl	equ	0xFF3
 44664                           intcon	equ	0xFF2
 44665                           intcon2	equ	0xFF1
 44666                           intcon3	equ	0xFF0
 44667                           indf0	equ	0xFEF
 44668                           postinc0	equ	0xFEE
 44669                           plusw0	equ	0xFEB
 44670                           fsr0h	equ	0xFEA
 44671                           fsr0l	equ	0xFE9
 44672                           wreg	equ	0xFE8
 44673                           postinc1	equ	0xFE6
 44674                           postdec1	equ	0xFE5
 44675                           plusw1	equ	0xFE3
 44676                           fsr1h	equ	0xFE2
 44677                           fsr1l	equ	0xFE1
 44678                           indf2	equ	0xFDF
 44679                           postinc2	equ	0xFDE
 44680                           postdec2	equ	0xFDD
 44681                           plusw2	equ	0xFDB
 44682                           fsr2h	equ	0xFDA
 44683                           fsr2l	equ	0xFD9
 44684                           status	equ	0xFD8
 44685                           
 44686 ;; *************** function _EUSART1_Read *****************
 44687 ;; Defined at:
 44688 ;;		line 180 in file "mcc_generated_files/eusart1.c"
 44689 ;; Parameters:    Size  Location     Type
 44690 ;;		None
 44691 ;; Auto vars:     Size  Location     Type
 44692 ;;  readValue       1    0[COMRAM] unsigned char 
 44693 ;; Return value:  Size  Location     Type
 44694 ;;                  1    wreg      unsigned char 
 44695 ;; Registers used:
 44696 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 44697 ;; Tracked objects:
 44698 ;;		On entry : 0/0
 44699 ;;		On exit  : 0/0
 44700 ;;		Unchanged: 0/0
 44701 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 44702 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 44703 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 44704 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 44705 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 44706 ;;Total ram usage:        1 bytes
 44707 ;; Hardware stack levels used:    1
 44708 ;; This function calls:
 44709 ;;		Nothing
 44710 ;; This function is called by:
 44711 ;;		_EUSART1_Receive_ISR
 44712 ;;		_UART_Read_Text
 44713 ;; This function uses a non-reentrant model
 44714 ;;
 44715                           
 44716                           	psect	text228
 44717  0087D6                     __ptext228:
 44718                           	opt stack 0
 44719  0087D6                     _EUSART1_Read:
 44720                           	opt stack 16
 44721                           
 44722                           ;eusart1.c: 182: uint8_t readValue = 0;
 44723                           
 44724                           ;incstack = 0
 44725  0087D6  0E00               	movlw	0
 44726  0087D8  6E01               	movwf	EUSART1_Read@readValue,c
 44727  0087DA                     
 44728                           ;eusart1.c: 185: {
 44729  0087DA  0101               	movlb	1	; () banked
 44730  0087DC  514D               	movf	_eusart1RxCount& (0+255),w,b	;volatile
 44731  0087DE  B4D8               	btfsc	status,2,c
 44732  0087E0  D7FC               	goto	i2l2531
 44733                           
 44734                           ; BSR set to: 1
 44735                           ;eusart1.c: 186: }
 44736                           ;eusart1.c: 188: eusart1RxLastError = eusart1RxStatusBuffer[eusart1RxTail];
 44737                           
 44738                           ; BSR set to: 1
 44739  0087E2  504F               	movf	_eusart1RxTail,w,c	;volatile
 44740  0087E4  0D01               	mullw	1
 44741  0087E6  0E4E               	movlw	low _eusart1RxStatusBuffer
 44742  0087E8  24F3               	addwf	prodl,w,c
 44743  0087EA  6ED9               	movwf	fsr2l,c
 44744  0087EC  0E00               	movlw	high _eusart1RxStatusBuffer
 44745  0087EE  20F4               	addwfc	prodh,w,c
 44746  0087F0  6EDA               	movwf	fsr2h,c
 44747  0087F2  50DF               	movf	indf2,w,c
 44748  0087F4  6F4C               	movwf	_eusart1RxLastError& (0+255),b	;volatile
 44749                           
 44750                           ;eusart1.c: 190: readValue = eusart1RxBuffer[eusart1RxTail++];
 44751  0087F6  504F               	movf	_eusart1RxTail,w,c	;volatile
 44752  0087F8  0D01               	mullw	1
 44753  0087FA  0E4E               	movlw	low _eusart1RxBuffer
 44754  0087FC  24F3               	addwf	prodl,w,c
 44755  0087FE  6ED9               	movwf	fsr2l,c
 44756  008800  0E01               	movlw	high _eusart1RxBuffer
 44757  008802  20F4               	addwfc	prodh,w,c
 44758  008804  6EDA               	movwf	fsr2h,c
 44759  008806  50DF               	movf	indf2,w,c
 44760  008808  6E01               	movwf	EUSART1_Read@readValue,c
 44761                           
 44762                           ; BSR set to: 1
 44763  00880A  2A4F               	incf	_eusart1RxTail,f,c	;volatile
 44764                           
 44765                           ; BSR set to: 1
 44766                           ;eusart1.c: 191: if(sizeof(eusart1RxBuffer) <= eusart1RxTail)
 44767  00880C  504F               	movf	_eusart1RxTail,w,c	;volatile
 44768  00880E  B4D8               	btfsc	status,2,c
 44769  008810  D002               	goto	i2l2533
 44770                           
 44771                           ; BSR set to: 1
 44772                           ;eusart1.c: 192: {
 44773                           ;eusart1.c: 193: eusart1RxTail = 0;
 44774  008812  0E00               	movlw	0
 44775  008814  6E4F               	movwf	_eusart1RxTail,c	;volatile
 44776  008816                     i2l2533:
 44777                           
 44778                           ; BSR set to: 1
 44779                           ;eusart1.c: 194: }
 44780                           ;eusart1.c: 195: PIE1bits.RC1IE = 0;
 44781                           
 44782                           ; BSR set to: 1
 44783  008816  9A9D               	bcf	3997,5,c	;volatile
 44784                           
 44785                           ; BSR set to: 1
 44786                           ;eusart1.c: 196: eusart1RxCount--;
 44787  008818  074D               	decf	_eusart1RxCount& (0+255),f,b	;volatile
 44788                           
 44789                           ; BSR set to: 1
 44790                           ;eusart1.c: 197: PIE1bits.RC1IE = 1;
 44791  00881A  8A9D               	bsf	3997,5,c	;volatile
 44792                           
 44793                           ; BSR set to: 1
 44794                           ;eusart1.c: 199: return readValue;
 44795  00881C  5001               	movf	EUSART1_Read@readValue,w,c
 44796  00881E  0012               	return	
 44797  008820                     __end_of_EUSART1_Read:
 44798                           	opt stack 0
 44799                           tosu	equ	0xFFF
 44800                           tosh	equ	0xFFE
 44801                           tosl	equ	0xFFD
 44802                           pclatu	equ	0xFFB
 44803                           pclath	equ	0xFFA
 44804                           tblptru	equ	0xFF8
 44805                           tblptrh	equ	0xFF7
 44806                           tblptrl	equ	0xFF6
 44807                           tablat	equ	0xFF5
 44808                           prodh	equ	0xFF4
 44809                           prodl	equ	0xFF3
 44810                           intcon	equ	0xFF2
 44811                           intcon2	equ	0xFF1
 44812                           intcon3	equ	0xFF0
 44813                           indf0	equ	0xFEF
 44814                           postinc0	equ	0xFEE
 44815                           plusw0	equ	0xFEB
 44816                           fsr0h	equ	0xFEA
 44817                           fsr0l	equ	0xFE9
 44818                           wreg	equ	0xFE8
 44819                           postinc1	equ	0xFE6
 44820                           postdec1	equ	0xFE5
 44821                           plusw1	equ	0xFE3
 44822                           fsr1h	equ	0xFE2
 44823                           fsr1l	equ	0xFE1
 44824                           indf2	equ	0xFDF
 44825                           postinc2	equ	0xFDE
 44826                           postdec2	equ	0xFDD
 44827                           plusw2	equ	0xFDB
 44828                           fsr2h	equ	0xFDA
 44829                           fsr2l	equ	0xFD9
 44830                           status	equ	0xFD8
 44831                           
 44832 ;; *************** function _EUSART1_DefaultOverrunErrorHandler *****************
 44833 ;; Defined at:
 44834 ;;		line 309 in file "mcc_generated_files/eusart1.c"
 44835 ;; Parameters:    Size  Location     Type
 44836 ;;		None
 44837 ;; Auto vars:     Size  Location     Type
 44838 ;;		None
 44839 ;; Return value:  Size  Location     Type
 44840 ;;                  1    wreg      void 
 44841 ;; Registers used:
 44842 ;;		None
 44843 ;; Tracked objects:
 44844 ;;		On entry : 0/0
 44845 ;;		On exit  : 0/0
 44846 ;;		Unchanged: 0/0
 44847 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 44848 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 44849 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 44850 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 44851 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 44852 ;;Total ram usage:        0 bytes
 44853 ;; Hardware stack levels used:    1
 44854 ;; This function calls:
 44855 ;;		Nothing
 44856 ;; This function is called by:
 44857 ;;		_EUSART1_Initialize
 44858 ;;		_EUSART1_Receive_ISR
 44859 ;; This function uses a non-reentrant model
 44860 ;;
 44861                           
 44862                           	psect	text229
 44863  009578                     __ptext229:
 44864                           	opt stack 0
 44865  009578                     _EUSART1_DefaultOverrunErrorHandler:
 44866                           	opt stack 16
 44867                           
 44868                           ;eusart1.c: 312: RCSTA1bits.CREN = 0;
 44869                           
 44870                           ; BSR set to: 1
 44871                           ;incstack = 0
 44872  009578  98AB               	bcf	4011,4,c	;volatile
 44873                           
 44874                           ;eusart1.c: 313: RCSTA1bits.CREN = 1;
 44875  00957A  88AB               	bsf	4011,4,c	;volatile
 44876  00957C  0012               	return		;funcret
 44877  00957E                     __end_of_EUSART1_DefaultOverrunErrorHandler:
 44878                           	opt stack 0
 44879                           tosu	equ	0xFFF
 44880                           tosh	equ	0xFFE
 44881                           tosl	equ	0xFFD
 44882                           pclatu	equ	0xFFB
 44883                           pclath	equ	0xFFA
 44884                           tblptru	equ	0xFF8
 44885                           tblptrh	equ	0xFF7
 44886                           tblptrl	equ	0xFF6
 44887                           tablat	equ	0xFF5
 44888                           prodh	equ	0xFF4
 44889                           prodl	equ	0xFF3
 44890                           intcon	equ	0xFF2
 44891                           intcon2	equ	0xFF1
 44892                           intcon3	equ	0xFF0
 44893                           indf0	equ	0xFEF
 44894                           postinc0	equ	0xFEE
 44895                           plusw0	equ	0xFEB
 44896                           fsr0h	equ	0xFEA
 44897                           fsr0l	equ	0xFE9
 44898                           wreg	equ	0xFE8
 44899                           postinc1	equ	0xFE6
 44900                           postdec1	equ	0xFE5
 44901                           plusw1	equ	0xFE3
 44902                           fsr1h	equ	0xFE2
 44903                           fsr1l	equ	0xFE1
 44904                           indf2	equ	0xFDF
 44905                           postinc2	equ	0xFDE
 44906                           postdec2	equ	0xFDD
 44907                           plusw2	equ	0xFDB
 44908                           fsr2h	equ	0xFDA
 44909                           fsr2l	equ	0xFD9
 44910                           status	equ	0xFD8
 44911                           
 44912 ;; *************** function _EUSART1_DefaultFramingErrorHandler *****************
 44913 ;; Defined at:
 44914 ;;		line 307 in file "mcc_generated_files/eusart1.c"
 44915 ;; Parameters:    Size  Location     Type
 44916 ;;		None
 44917 ;; Auto vars:     Size  Location     Type
 44918 ;;		None
 44919 ;; Return value:  Size  Location     Type
 44920 ;;                  1    wreg      void 
 44921 ;; Registers used:
 44922 ;;		None
 44923 ;; Tracked objects:
 44924 ;;		On entry : 0/0
 44925 ;;		On exit  : 0/0
 44926 ;;		Unchanged: 0/0
 44927 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 44928 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 44929 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 44930 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 44931 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 44932 ;;Total ram usage:        0 bytes
 44933 ;; Hardware stack levels used:    1
 44934 ;; This function calls:
 44935 ;;		Nothing
 44936 ;; This function is called by:
 44937 ;;		_EUSART1_Initialize
 44938 ;;		_EUSART1_Receive_ISR
 44939 ;; This function uses a non-reentrant model
 44940 ;;
 44941                           
 44942                           	psect	text230
 44943  0095AE                     __ptext230:
 44944                           	opt stack 0
 44945  0095AE                     _EUSART1_DefaultFramingErrorHandler:
 44946                           	opt stack 16
 44947                           
 44948                           ;incstack = 0
 44949  0095AE  0012               	return		;funcret
 44950  0095B0                     __end_of_EUSART1_DefaultFramingErrorHandler:
 44951                           	opt stack 0
 44952                           tosu	equ	0xFFF
 44953                           tosh	equ	0xFFE
 44954                           tosl	equ	0xFFD
 44955                           pclatu	equ	0xFFB
 44956                           pclath	equ	0xFFA
 44957                           tblptru	equ	0xFF8
 44958                           tblptrh	equ	0xFF7
 44959                           tblptrl	equ	0xFF6
 44960                           tablat	equ	0xFF5
 44961                           prodh	equ	0xFF4
 44962                           prodl	equ	0xFF3
 44963                           intcon	equ	0xFF2
 44964                           intcon2	equ	0xFF1
 44965                           intcon3	equ	0xFF0
 44966                           indf0	equ	0xFEF
 44967                           postinc0	equ	0xFEE
 44968                           plusw0	equ	0xFEB
 44969                           fsr0h	equ	0xFEA
 44970                           fsr0l	equ	0xFE9
 44971                           wreg	equ	0xFE8
 44972                           postinc1	equ	0xFE6
 44973                           postdec1	equ	0xFE5
 44974                           plusw1	equ	0xFE3
 44975                           fsr1h	equ	0xFE2
 44976                           fsr1l	equ	0xFE1
 44977                           indf2	equ	0xFDF
 44978                           postinc2	equ	0xFDE
 44979                           postdec2	equ	0xFDD
 44980                           plusw2	equ	0xFDB
 44981                           fsr2h	equ	0xFDA
 44982                           fsr2l	equ	0xFD9
 44983                           status	equ	0xFD8
 44984                           
 44985 ;; *************** function _EUSART1_DefaultErrorHandler *****************
 44986 ;; Defined at:
 44987 ;;		line 317 in file "mcc_generated_files/eusart1.c"
 44988 ;; Parameters:    Size  Location     Type
 44989 ;;		None
 44990 ;; Auto vars:     Size  Location     Type
 44991 ;;		None
 44992 ;; Return value:  Size  Location     Type
 44993 ;;                  1    wreg      void 
 44994 ;; Registers used:
 44995 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 44996 ;; Tracked objects:
 44997 ;;		On entry : 0/0
 44998 ;;		On exit  : 0/0
 44999 ;;		Unchanged: 0/0
 45000 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 45001 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 45002 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 45003 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 45004 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 45005 ;;Total ram usage:        0 bytes
 45006 ;; Hardware stack levels used:    1
 45007 ;; Hardware stack levels required when called:    1
 45008 ;; This function calls:
 45009 ;;		_EUSART1_RxDataHandler
 45010 ;; This function is called by:
 45011 ;;		_EUSART1_Initialize
 45012 ;;		_EUSART1_Receive_ISR
 45013 ;; This function uses a non-reentrant model
 45014 ;;
 45015                           
 45016                           	psect	text231
 45017  00957E                     __ptext231:
 45018                           	opt stack 0
 45019  00957E                     _EUSART1_DefaultErrorHandler:
 45020                           	opt stack 15
 45021                           
 45022                           ;eusart1.c: 318: EUSART1_RxDataHandler();
 45023                           
 45024                           ;incstack = 0
 45025  00957E  EC35  F048         	call	_EUSART1_RxDataHandler	;wreg free
 45026  009582  0012               	return		;funcret
 45027  009584                     __end_of_EUSART1_DefaultErrorHandler:
 45028                           	opt stack 0
 45029                           tosu	equ	0xFFF
 45030                           tosh	equ	0xFFE
 45031                           tosl	equ	0xFFD
 45032                           pclatu	equ	0xFFB
 45033                           pclath	equ	0xFFA
 45034                           tblptru	equ	0xFF8
 45035                           tblptrh	equ	0xFF7
 45036                           tblptrl	equ	0xFF6
 45037                           tablat	equ	0xFF5
 45038                           prodh	equ	0xFF4
 45039                           prodl	equ	0xFF3
 45040                           intcon	equ	0xFF2
 45041                           intcon2	equ	0xFF1
 45042                           intcon3	equ	0xFF0
 45043                           indf0	equ	0xFEF
 45044                           postinc0	equ	0xFEE
 45045                           plusw0	equ	0xFEB
 45046                           fsr0h	equ	0xFEA
 45047                           fsr0l	equ	0xFE9
 45048                           wreg	equ	0xFE8
 45049                           postinc1	equ	0xFE6
 45050                           postdec1	equ	0xFE5
 45051                           plusw1	equ	0xFE3
 45052                           fsr1h	equ	0xFE2
 45053                           fsr1l	equ	0xFE1
 45054                           indf2	equ	0xFDF
 45055                           postinc2	equ	0xFDE
 45056                           postdec2	equ	0xFDD
 45057                           plusw2	equ	0xFDB
 45058                           fsr2h	equ	0xFDA
 45059                           fsr2l	equ	0xFD9
 45060                           status	equ	0xFD8
 45061                           
 45062 ;; *************** function _EUSART1_RxDataHandler *****************
 45063 ;; Defined at:
 45064 ;;		line 297 in file "mcc_generated_files/eusart1.c"
 45065 ;; Parameters:    Size  Location     Type
 45066 ;;		None
 45067 ;; Auto vars:     Size  Location     Type
 45068 ;;		None
 45069 ;; Return value:  Size  Location     Type
 45070 ;;                  1    wreg      void 
 45071 ;; Registers used:
 45072 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 45073 ;; Tracked objects:
 45074 ;;		On entry : 0/0
 45075 ;;		On exit  : 0/0
 45076 ;;		Unchanged: 0/0
 45077 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 45078 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 45079 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 45080 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 45081 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 45082 ;;Total ram usage:        0 bytes
 45083 ;; Hardware stack levels used:    1
 45084 ;; This function calls:
 45085 ;;		Nothing
 45086 ;; This function is called by:
 45087 ;;		_EUSART1_Receive_ISR
 45088 ;;		_EUSART1_DefaultErrorHandler
 45089 ;; This function uses a non-reentrant model
 45090 ;;
 45091                           
 45092                           	psect	text232
 45093  00906A                     __ptext232:
 45094                           	opt stack 0
 45095  00906A                     _EUSART1_RxDataHandler:
 45096                           	opt stack 16
 45097                           
 45098                           ;eusart1.c: 299: eusart1RxBuffer[eusart1RxHead++] = RCREG1;
 45099                           
 45100                           ;incstack = 0
 45101  00906A  5050               	movf	_eusart1RxHead,w,c	;volatile
 45102  00906C  0D01               	mullw	1
 45103  00906E  0E4E               	movlw	low _eusart1RxBuffer
 45104  009070  24F3               	addwf	prodl,w,c
 45105  009072  6ED9               	movwf	fsr2l,c
 45106  009074  0E01               	movlw	high _eusart1RxBuffer
 45107  009076  20F4               	addwfc	prodh,w,c
 45108  009078  6EDA               	movwf	fsr2h,c
 45109  00907A  CFAE FFDF          	movff	4014,indf2	;volatile
 45110  00907E  2A50               	incf	_eusart1RxHead,f,c	;volatile
 45111                           
 45112                           ;eusart1.c: 300: if(sizeof(eusart1RxBuffer) <= eusart1RxHead)
 45113  009080  5050               	movf	_eusart1RxHead,w,c	;volatile
 45114  009082  B4D8               	btfsc	status,2,c
 45115  009084  D002               	goto	i2l2559
 45116                           
 45117                           ;eusart1.c: 301: {
 45118                           ;eusart1.c: 302: eusart1RxHead = 0;
 45119  009086  0E00               	movlw	0
 45120  009088  6E50               	movwf	_eusart1RxHead,c	;volatile
 45121  00908A                     i2l2559:
 45122                           
 45123                           ;eusart1.c: 303: }
 45124                           ;eusart1.c: 304: eusart1RxCount++;
 45125  00908A  0101               	movlb	1	; () banked
 45126  00908C  2B4D               	incf	_eusart1RxCount& (0+255),f,b	;volatile
 45127                           
 45128                           ; BSR set to: 1
 45129  00908E  0012               	return		;funcret
 45130  009090                     __end_of_EUSART1_RxDataHandler:
 45131                           	opt stack 0
 45132                           tosu	equ	0xFFF
 45133                           tosh	equ	0xFFE
 45134                           tosl	equ	0xFFD
 45135                           pclatu	equ	0xFFB
 45136                           pclath	equ	0xFFA
 45137                           tblptru	equ	0xFF8
 45138                           tblptrh	equ	0xFF7
 45139                           tblptrl	equ	0xFF6
 45140                           tablat	equ	0xFF5
 45141                           prodh	equ	0xFF4
 45142                           prodl	equ	0xFF3
 45143                           intcon	equ	0xFF2
 45144                           intcon2	equ	0xFF1
 45145                           intcon3	equ	0xFF0
 45146                           indf0	equ	0xFEF
 45147                           postinc0	equ	0xFEE
 45148                           plusw0	equ	0xFEB
 45149                           fsr0h	equ	0xFEA
 45150                           fsr0l	equ	0xFE9
 45151                           wreg	equ	0xFE8
 45152                           postinc1	equ	0xFE6
 45153                           postdec1	equ	0xFE5
 45154                           plusw1	equ	0xFE3
 45155                           fsr1h	equ	0xFE2
 45156                           fsr1l	equ	0xFE1
 45157                           indf2	equ	0xFDF
 45158                           postinc2	equ	0xFDE
 45159                           postdec2	equ	0xFDD
 45160                           plusw2	equ	0xFDB
 45161                           fsr2h	equ	0xFDA
 45162                           fsr2l	equ	0xFD9
 45163                           status	equ	0xFD8
 45164                           tosu	equ	0xFFF
 45165                           tosh	equ	0xFFE
 45166                           tosl	equ	0xFFD
 45167                           pclatu	equ	0xFFB
 45168                           pclath	equ	0xFFA
 45169                           tblptru	equ	0xFF8
 45170                           tblptrh	equ	0xFF7
 45171                           tblptrl	equ	0xFF6
 45172                           tablat	equ	0xFF5
 45173                           prodh	equ	0xFF4
 45174                           prodl	equ	0xFF3
 45175                           intcon	equ	0xFF2
 45176                           intcon2	equ	0xFF1
 45177                           intcon3	equ	0xFF0
 45178                           indf0	equ	0xFEF
 45179                           postinc0	equ	0xFEE
 45180                           plusw0	equ	0xFEB
 45181                           fsr0h	equ	0xFEA
 45182                           fsr0l	equ	0xFE9
 45183                           wreg	equ	0xFE8
 45184                           postinc1	equ	0xFE6
 45185                           postdec1	equ	0xFE5
 45186                           plusw1	equ	0xFE3
 45187                           fsr1h	equ	0xFE2
 45188                           fsr1l	equ	0xFE1
 45189                           indf2	equ	0xFDF
 45190                           postinc2	equ	0xFDE
 45191                           postdec2	equ	0xFDD
 45192                           plusw2	equ	0xFDB
 45193                           fsr2h	equ	0xFDA
 45194                           fsr2l	equ	0xFD9
 45195                           status	equ	0xFD8
 45196                           
 45197                           	psect	text233
 45198  000000                     __ptext233:
 45199                           	opt stack 0
 45200                           tosu	equ	0xFFF
 45201                           tosh	equ	0xFFE
 45202                           tosl	equ	0xFFD
 45203                           pclatu	equ	0xFFB
 45204                           pclath	equ	0xFFA
 45205                           tblptru	equ	0xFF8
 45206                           tblptrh	equ	0xFF7
 45207                           tblptrl	equ	0xFF6
 45208                           tablat	equ	0xFF5
 45209                           prodh	equ	0xFF4
 45210                           prodl	equ	0xFF3
 45211                           intcon	equ	0xFF2
 45212                           intcon2	equ	0xFF1
 45213                           intcon3	equ	0xFF0
 45214                           indf0	equ	0xFEF
 45215                           postinc0	equ	0xFEE
 45216                           plusw0	equ	0xFEB
 45217                           fsr0h	equ	0xFEA
 45218                           fsr0l	equ	0xFE9
 45219                           wreg	equ	0xFE8
 45220                           postinc1	equ	0xFE6
 45221                           postdec1	equ	0xFE5
 45222                           plusw1	equ	0xFE3
 45223                           fsr1h	equ	0xFE2
 45224                           fsr1l	equ	0xFE1
 45225                           indf2	equ	0xFDF
 45226                           postinc2	equ	0xFDE
 45227                           postdec2	equ	0xFDD
 45228                           plusw2	equ	0xFDB
 45229                           fsr2h	equ	0xFDA
 45230                           fsr2l	equ	0xFD9
 45231                           status	equ	0xFD8
 45232                           
 45233                           	psect	rparam
 45234  0000                     tosu	equ	0xFFF
 45235                           tosh	equ	0xFFE
 45236                           tosl	equ	0xFFD
 45237                           pclatu	equ	0xFFB
 45238                           pclath	equ	0xFFA
 45239                           tblptru	equ	0xFF8
 45240                           tblptrh	equ	0xFF7
 45241                           tblptrl	equ	0xFF6
 45242                           tablat	equ	0xFF5
 45243                           prodh	equ	0xFF4
 45244                           prodl	equ	0xFF3
 45245                           intcon	equ	0xFF2
 45246                           intcon2	equ	0xFF1
 45247                           intcon3	equ	0xFF0
 45248                           indf0	equ	0xFEF
 45249                           postinc0	equ	0xFEE
 45250                           plusw0	equ	0xFEB
 45251                           fsr0h	equ	0xFEA
 45252                           fsr0l	equ	0xFE9
 45253                           wreg	equ	0xFE8
 45254                           postinc1	equ	0xFE6
 45255                           postdec1	equ	0xFE5
 45256                           plusw1	equ	0xFE3
 45257                           fsr1h	equ	0xFE2
 45258                           fsr1l	equ	0xFE1
 45259                           indf2	equ	0xFDF
 45260                           postinc2	equ	0xFDE
 45261                           postdec2	equ	0xFDD
 45262                           plusw2	equ	0xFDB
 45263                           fsr2h	equ	0xFDA
 45264                           fsr2l	equ	0xFD9
 45265                           status	equ	0xFD8
 45266                           
 45267                           	psect	temp
 45268  00003E                     btemp:
 45269                           	opt stack 0
 45270  00003E                     	ds	12
 45271  0000                     wtemp0	set	btemp
 45272  0000                     wtemp1	set	btemp+2
 45273  0000                     wtemp2	set	btemp+4
 45274  0000                     wtemp3	set	btemp+6
 45275  0000                     wtemp4	set	btemp+8
 45276  0000                     wtemp5	set	btemp+10
 45277  0000                     wtemp6	set	btemp+1
 45278  0000                     ttemp0	set	btemp
 45279  0000                     ttemp1	set	btemp+3
 45280  0000                     ttemp2	set	btemp+6
 45281  0000                     ttemp3	set	btemp+9
 45282  0000                     ltemp0	set	btemp
 45283  0000                     ltemp1	set	btemp+4
 45284  0000                     ltemp2	set	btemp+8
 45285                           tosu	equ	0xFFF
 45286                           tosh	equ	0xFFE
 45287                           tosl	equ	0xFFD
 45288                           pclatu	equ	0xFFB
 45289                           pclath	equ	0xFFA
 45290                           tblptru	equ	0xFF8
 45291                           tblptrh	equ	0xFF7
 45292                           tblptrl	equ	0xFF6
 45293                           tablat	equ	0xFF5
 45294                           prodh	equ	0xFF4
 45295                           prodl	equ	0xFF3
 45296                           intcon	equ	0xFF2
 45297                           intcon2	equ	0xFF1
 45298                           intcon3	equ	0xFF0
 45299                           indf0	equ	0xFEF
 45300                           postinc0	equ	0xFEE
 45301                           plusw0	equ	0xFEB
 45302                           fsr0h	equ	0xFEA
 45303                           fsr0l	equ	0xFE9
 45304                           wreg	equ	0xFE8
 45305                           postinc1	equ	0xFE6
 45306                           postdec1	equ	0xFE5
 45307                           plusw1	equ	0xFE3
 45308                           fsr1h	equ	0xFE2
 45309                           fsr1l	equ	0xFE1
 45310                           indf2	equ	0xFDF
 45311                           postinc2	equ	0xFDE
 45312                           postdec2	equ	0xFDD
 45313                           plusw2	equ	0xFDB
 45314                           fsr2h	equ	0xFDA
 45315                           fsr2l	equ	0xFD9
 45316                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    408
    Data        65
    BSS         1476
    Persistent  23
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           83     61      75
    BANK0           160    159     159
    BANK1           256    105     255
    BANK2           256      0     255
    BANK3           256      0     251
    BANK4           256      0     224
    BANK5           256      0     128
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           56      0       0

Pointer List with Targets:

    RxData@pData	PTR unsigned char  size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), NULL(NULL[0]), 

    RxPayload$0	PTR unsigned char  size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), NULL(NULL[0]), 

    S823$0$0	PTR unsigned char  size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), NULL(NULL[0]), 

    strncat@from	PTR const unsigned char  size(2) Largest target is 2
		 -> dataresult(BANK1[2]), 

    strncat@to	PTR unsigned char  size(2) Largest target is 64
		 -> dataxstr(BANK5[64]), 

    strncat@cp	PTR unsigned char  size(2) Largest target is 64
		 -> dataxstr(BANK5[64]), 

    memset@p1	PTR void  size(2) Largest target is 271
		 -> AssemblePacket@mhdr(BANK0[1]), aesBuffer(BANK3[16]), Channels(BANK4[224]), macBuffer(BIGRAM[271]), 
		 -> loRa.activationParameters(BANK2[105]), loRa(BANK2[245]), GenerateSubkey@l(BANK0[16]), AESCmac@x(BANK1[16]), 

    memset@p	PTR unsigned char  size(2) Largest target is 271
		 -> AssemblePacket@mhdr(BANK0[1]), aesBuffer(BANK3[16]), Channels(BANK4[224]), macBuffer(BIGRAM[271]), 
		 -> loRa.activationParameters(BANK2[105]), loRa(BANK2[245]), GenerateSubkey@l(BANK0[16]), AESCmac@x(BANK1[16]), 

    memcpy@d1	PTR void  size(2) Largest target is 271
		 -> UpdateCfList@frequency(BANK0[4]), ComputeMic@mic(BANK0[4]), ExtractMic@mic(BANK0[4]), aesBuffer(BANK3[16]), 
		 -> radioBuffer(BIGRAM[271]), LORAWAN_RxDone@computedMic(BANK0[4]), Channels(BANK4[224]), loRa.activationParameters.applicationEui(BANK2[8]), 
		 -> loRa.activationParameters.deviceEui(BANK2[8]), macBuffer(BIGRAM[271]), loRa.activationParameters(BANK2[105]), loRa(BANK2[245]), 
		 -> AESEncodeLoRa@useKey(BANK0[16]), RadioConfiguration(BANK1[54]), AESCmac@x(BANK1[16]), 

    memcpy@d	PTR unsigned char  size(2) Largest target is 271
		 -> UpdateCfList@frequency(BANK0[4]), ComputeMic@mic(BANK0[4]), ExtractMic@mic(BANK0[4]), aesBuffer(BANK3[16]), 
		 -> radioBuffer(BIGRAM[271]), LORAWAN_RxDone@computedMic(BANK0[4]), Channels(BANK4[224]), loRa.activationParameters.applicationEui(BANK2[8]), 
		 -> loRa.activationParameters.deviceEui(BANK2[8]), macBuffer(BIGRAM[271]), loRa.activationParameters(BANK2[105]), loRa(BANK2[245]), 
		 -> AESEncodeLoRa@useKey(BANK0[16]), RadioConfiguration(BANK1[54]), AESCmac@x(BANK1[16]), 

    memcpy@s1	PTR const void  size(2) Largest target is 271
		 -> LORAWAN_RxDone@hdr.cfList(COMRAM[16]), radioBuffer.cfList(BIGRAM[16]), testtest(BANK1[2]), appSKey(BANK3[16]), 
		 -> nwkSKey(BANK3[16]), FskSyncWordBuff(CODE[3]), UpdateCfList@joinAccept(BANK0[2]), DefaultChannels433(CODE[42]), 
		 -> DefaultChannels868(CODE[42]), AssembleEncryptionBlock@frameCounter(BANK0[4]), ComputeSessionKeys@joinAcceptBuffer(BANK0[2]), PrepareJoinRequestFrame@mic(BANK0[4]), 
		 -> loRa.devNonce(BANK2[2]), loRa.fCntUp.valueLow(BANK2[2]), aesBuffer(BANK3[16]), radioBuffer(BIGRAM[271]), 
		 -> LORAWAN_RxDone@hdr(BANK0[2]), loRa.activationParameters.applicationKey(BANK2[16]), loRa.activationParameters.applicationSessionKey(BANK2[16]), loRa.activationParameters.networkSessionKey(BANK2[16]), 
		 -> loRa.activationParameters.deviceAddress(BANK2[4]), loRa.activationParameters.applicationEui(BANK2[8]), loRa.activationParameters.deviceEui(BANK2[8]), loRa.activationParameters.mcastApplicationSessionKey(BANK2[16]), 
		 -> loRa.activationParameters.mcastNetworkSessionKey(BANK2[16]), loRa.activationParameters.mcastDeviceAddress(BANK2[4]), loRa.fCntUp(BANK2[4]), loRa.activationParameters(BANK2[105]), 
		 -> loRa(BANK2[245]), RadioConfiguration.syncWord(BANK1[8]), RadioConfiguration(BANK1[54]), AESCmac@y(BANK1[16]), 
		 -> NULL(NULL[0]), 

    memcpy@s	PTR const unsigned char  size(2) Largest target is 271
		 -> LORAWAN_RxDone@hdr.cfList(COMRAM[16]), radioBuffer.cfList(BIGRAM[16]), testtest(BANK1[2]), appSKey(BANK3[16]), 
		 -> nwkSKey(BANK3[16]), FskSyncWordBuff(CODE[3]), UpdateCfList@joinAccept(BANK0[2]), DefaultChannels433(CODE[42]), 
		 -> DefaultChannels868(CODE[42]), AssembleEncryptionBlock@frameCounter(BANK0[4]), ComputeSessionKeys@joinAcceptBuffer(BANK0[2]), PrepareJoinRequestFrame@mic(BANK0[4]), 
		 -> loRa.devNonce(BANK2[2]), loRa.fCntUp.valueLow(BANK2[2]), aesBuffer(BANK3[16]), radioBuffer(BIGRAM[271]), 
		 -> LORAWAN_RxDone@hdr(BANK0[2]), loRa.activationParameters.applicationKey(BANK2[16]), loRa.activationParameters.applicationSessionKey(BANK2[16]), loRa.activationParameters.networkSessionKey(BANK2[16]), 
		 -> loRa.activationParameters.deviceAddress(BANK2[4]), loRa.activationParameters.applicationEui(BANK2[8]), loRa.activationParameters.deviceEui(BANK2[8]), loRa.activationParameters.mcastApplicationSessionKey(BANK2[16]), 
		 -> loRa.activationParameters.mcastNetworkSessionKey(BANK2[16]), loRa.activationParameters.mcastDeviceAddress(BANK2[4]), loRa.fCntUp(BANK2[4]), loRa.activationParameters(BANK2[105]), 
		 -> loRa(BANK2[245]), RadioConfiguration.syncWord(BANK1[8]), RadioConfiguration(BANK1[54]), AESCmac@y(BANK1[16]), 
		 -> NULL(NULL[0]), 

    TMR1_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR1_DefaultInterruptHandler(), TMR_ISR_lora(), 

    TMR1_InterruptHandler	PTR FTN()void  size(2) Largest target is 4
		 -> TMR1_DefaultInterruptHandler(), TMR_ISR_lora(), Absolute function(), 

    EUSART1_SetRxInterruptHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART1_Receive_ISR(), 

    EUSART1_SetTxInterruptHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART1_Transmit_ISR(), 

    EUSART1_SetErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART1_DefaultErrorHandler(), 

    EUSART1_SetOverrunErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART1_DefaultOverrunErrorHandler(), 

    EUSART1_SetFramingErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART1_DefaultFramingErrorHandler(), 

    sp__strncat	PTR unsigned char  size(2) Largest target is 64
		 -> dataxstr(BANK5[64]), 

    EUSART1_ErrorHandler	PTR FTN()void  size(2) Largest target is 4
		 -> EUSART1_DefaultErrorHandler(), Absolute function(), 

    EUSART1_OverrunErrorHandler	PTR FTN()void  size(2) Largest target is 4
		 -> EUSART1_DefaultOverrunErrorHandler(), Absolute function(), 

    EUSART1_FramingErrorHandler	PTR FTN()void  size(2) Largest target is 4
		 -> EUSART1_DefaultFramingErrorHandler(), Absolute function(), 

    IOCB4_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> IOCB4_DefaultInterruptHandler(), DIO2_ISR_Lora(), 

    IOCB4_InterruptHandler	PTR FTN()void  size(2) Largest target is 4
		 -> IOCB4_DefaultInterruptHandler(), DIO2_ISR_Lora(), Absolute function(), 

    EUSART1_RxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 4
		 -> EUSART1_Receive_ISR(), Absolute function(), 

    EUSART1_TxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 4
		 -> EUSART1_Transmit_ISR(), Absolute function(), 

    INT2_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> INT2_DefaultInterruptHandler(), DIO1_ISR_Lora(), 

    INT2_InterruptHandler	PTR FTN()void  size(2) Largest target is 4
		 -> INT2_DefaultInterruptHandler(), DIO1_ISR_Lora(), Absolute function(), 

    INT1_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> INT1_DefaultInterruptHandler(), DIO0_ISR_Lora(), 

    INT1_InterruptHandler	PTR FTN()void  size(2) Largest target is 4
		 -> INT1_DefaultInterruptHandler(), DIO0_ISR_Lora(), Absolute function(), 

    UpdateCfList@joinAccept	PTR struct . size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), 

    SearchAvailableChannel@channelIndex	PTR unsigned char  size(2) Largest target is 1
		 -> SelectChannelForTransmission@channelIndex(BANK0[1]), LORAWAN_RxDone@channelIndex(BANK0[1]), 

    ExecuteRxParamSetupReq@ptr	PTR unsigned char  size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), 

    ExecuteNewChannel@ptr	PTR unsigned char  size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), 

    ExecuteDevStatus@ptr	PTR unsigned char  size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), 

    ExecuteLinkAdr@redundancy	PTR struct . size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), 

    ExecuteLinkAdr@ptr	PTR unsigned char  size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), 

    ExecuteDutyCycle@ptr	PTR unsigned char  size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), 

    LORAWAN_Init@RxJoinResponse	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> RxJoinResponse(), 

    LORAWAN_Init@RxPayload	PTR FTN(PTR unsigned char ,unsigned char ,enum E7264,)void  size(2) Largest target is 1
		 -> RxData(), 

    EncodeShiftRow@stateTable	PTR unsigned char  size(2) Largest target is 271
		 -> aesBuffer(BANK3[16]), radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), loRa.activationParameters(BANK2[105]), 
		 -> loRa(BANK2[245]), GenerateSubkey@l(BANK0[16]), AESCmac@y(BANK1[16]), AESCmac@x(BANK1[16]), 

    EncKeySchedule@key	PTR unsigned char  size(2) Largest target is 16
		 -> AESEncodeLoRa@useKey(BANK0[16]), 

    AESEncode@key	PTR unsigned char  size(2) Largest target is 16
		 -> AESEncodeLoRa@useKey(BANK0[16]), 

    AESEncode@block	PTR unsigned char  size(2) Largest target is 271
		 -> aesBuffer(BANK3[16]), radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), loRa.activationParameters(BANK2[105]), 
		 -> loRa(BANK2[245]), GenerateSubkey@l(BANK0[16]), AESCmac@y(BANK1[16]), AESCmac@x(BANK1[16]), 

    SwTimerSetCallback@callback	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> DutyCycleCallback(), UpdateJoinSuccessState(), AutomaticReplyCallback(), UnconfirmedTransmissionCallback(), 
		 -> AckRetransmissionCallback(), LORAWAN_LinkCheckCallback(), LORAWAN_ReceiveWindow2Callback(), LORAWAN_ReceiveWindow1Callback(), 
		 -> RADIO_WatchdogTimeout(), RADIO_RxFSKTimeout(), 

    S1968$callback	PTR FTN(unsigned char ,)void  size(2) Largest target is 4
		 -> DutyCycleCallback(), UpdateJoinSuccessState(), AutomaticReplyCallback(), UnconfirmedTransmissionCallback(), 
		 -> AckRetransmissionCallback(), LORAWAN_LinkCheckCallback(), LORAWAN_ReceiveWindow2Callback(), LORAWAN_ReceiveWindow1Callback(), 
		 -> RADIO_WatchdogTimeout(), RADIO_RxFSKTimeout(), Absolute function(), 

    swTimers.callback	PTR FTN(unsigned char ,)void  size(2) Largest target is 4
		 -> DutyCycleCallback(), UpdateJoinSuccessState(), AutomaticReplyCallback(), UnconfirmedTransmissionCallback(), 
		 -> AckRetransmissionCallback(), LORAWAN_LinkCheckCallback(), LORAWAN_ReceiveWindow2Callback(), LORAWAN_ReceiveWindow1Callback(), 
		 -> RADIO_WatchdogTimeout(), RADIO_RxFSKTimeout(), Absolute function(), 

    EncryptFRMPayload@buffer	PTR unsigned char  size(2) Largest target is 271
		 -> testtest(BANK1[2]), radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), NULL(NULL[0]), 

    EncryptFRMPayload@bufferToBeEncrypted	PTR unsigned char  size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), macBuffer(BIGRAM[271]), 

    EncryptFRMPayload@key	PTR unsigned char  size(2) Largest target is 245
		 -> loRa.activationParameters(BANK2[105]), loRa(BANK2[245]), 

    ComputeMic@buffer	PTR unsigned char  size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), macBuffer(BIGRAM[271]), 

    ComputeMic@key	PTR unsigned char  size(2) Largest target is 245
		 -> loRa.activationParameters(BANK2[105]), loRa(BANK2[245]), 

    ExtractMic@buffer	PTR unsigned char  size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), 

    CheckMcastFlags@hdr	PTR struct . size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), 

    CheckFlags@hdr	PTR struct . size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), 

    ComputeSessionKeys@joinAcceptBuffer	PTR struct . size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), 

    PrepareSessionKeys@networkId	PTR unsigned char  size(2) Largest target is 2
		 -> ComputeSessionKeys@joinAcceptBuffer(BANK0[2]), radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), 

    PrepareSessionKeys@appNonce	PTR unsigned char  size(2) Largest target is 2
		 -> ComputeSessionKeys@joinAcceptBuffer(BANK0[2]), radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), 

    PrepareSessionKeys@sessionKey	PTR unsigned char  size(2) Largest target is 245
		 -> loRa.activationParameters(BANK2[105]), loRa(BANK2[245]), 

    IncludeMacCommandsResponse@macBuffer	PTR unsigned char  size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), macBuffer(BIGRAM[271]), 

    IncludeMacCommandsResponse@pBufferIndex	PTR unsigned char  size(2) Largest target is 1
		 -> AssemblePacket@macCmdIdx(BANK0[1]), AssemblePacket@bufferIndex(BANK0[1]), 

    AssemblePacket@buffer	PTR unsigned char  size(2) Largest target is 2
		 -> testtest(BANK1[2]), NULL(NULL[0]), 

    ExecuteRxTimingSetup@ptr	PTR unsigned char  size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), 

    ExecuteLinkCheck@ptr	PTR unsigned char  size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), 

    sp__ExecuteRxTimingSetup	PTR unsigned char  size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), 

    sp__ExecuteNewChannel	PTR unsigned char  size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), 

    sp__ExecuteDevStatus	PTR unsigned char  size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), 

    sp__ExecuteRxParamSetupReq	PTR unsigned char  size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), 

    sp__ExecuteDutyCycle	PTR unsigned char  size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), 

    sp__ExecuteLinkAdr	PTR unsigned char  size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), 

    sp__ExecuteLinkCheck	PTR unsigned char  size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), 

    MacExecuteCommands@buffer	PTR unsigned char  size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), 

    MacExecuteCommands@ptr	PTR unsigned char  size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), 

    sp__MacExecuteCommands	PTR unsigned char  size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), 

    LORAWAN_RxDone@packet	PTR unsigned char  size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), NULL(NULL[0]), 

    LORAWAN_RxDone@hdr	PTR struct . size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), 

    LORAWAN_RxDone@joinAccept	PTR struct . size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), 

    LORAWAN_RxDone@buffer	PTR unsigned char  size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), 

    LORAWAN_SetApplicationSessionKey@applicationSessionKeyNew	PTR unsigned char  size(2) Largest target is 16
		 -> appSKey(BANK3[16]), 

    LORAWAN_SetNetworkSessionKey@networkSessionKeyNew	PTR unsigned char  size(2) Largest target is 16
		 -> nwkSKey(BANK3[16]), 

    LORAWAN_Send@buffer	PTR void  size(2) Largest target is 2
		 -> testtest(BANK1[2]), NULL(NULL[0]), 

    S823$RxJoinResponse	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> RxJoinResponse(), 

    rxPayload.RxJoinResponse	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> RxJoinResponse(), 

    S823$RxAppData	PTR FTN(PTR unsigned char ,unsigned char ,enum E7205,)void  size(2) Largest target is 1
		 -> RxData(), 

    rxPayload.RxAppData	PTR FTN(PTR unsigned char ,unsigned char ,enum E7205,)void  size(2) Largest target is 1
		 -> RxData(), 

    AESEncodeLoRa@block	PTR unsigned char  size(2) Largest target is 271
		 -> aesBuffer(BANK3[16]), radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), loRa.activationParameters(BANK2[105]), 
		 -> loRa(BANK2[245]), GenerateSubkey@l(BANK0[16]), AESCmac@y(BANK1[16]), AESCmac@x(BANK1[16]), 

    AESEncodeLoRa@key	PTR unsigned char  size(2) Largest target is 245
		 -> loRa.activationParameters(BANK2[105]), loRa(BANK2[245]), 

    RADIO_SetFSKSyncWord@syncWord	PTR unsigned char  size(2) Largest target is 3
		 -> FskSyncWordBuff(CODE[3]), 

    RADIO_Transmit@buffer	PTR unsigned char  size(2) Largest target is 271
		 -> macBuffer(BIGRAM[271]), 

    RADIO_Init@radioBuffer	PTR unsigned char  size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), 

    S283$fhssNextFrequency	PTR FTN()unsigned long  size(2) Largest target is 4
		 -> Absolute function(), 

    RadioConfiguration.fhssNextFrequency	PTR FTN()unsigned long  size(2) Largest target is 4
		 -> Absolute function(), 

    S283$dataBuffer	PTR unsigned char  size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), 

    RadioConfiguration.dataBuffer	PTR unsigned char  size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), 

    FillSubKey@source	PTR unsigned char  size(2) Largest target is 16
		 -> GenerateSubkey@l(BANK0[16]), AESCmac@k1(BANK1[16]), 

    FillSubKey@key	PTR unsigned char  size(2) Largest target is 16
		 -> AESCmac@k2(BANK1[16]), AESCmac@k1(BANK1[16]), 

    GenerateSubkey@k2	PTR unsigned char  size(2) Largest target is 16
		 -> AESCmac@k2(BANK1[16]), 

    GenerateSubkey@k1	PTR unsigned char  size(2) Largest target is 16
		 -> AESCmac@k1(BANK1[16]), 

    GenerateSubkey@key	PTR unsigned char  size(2) Largest target is 245
		 -> loRa.activationParameters(BANK2[105]), loRa(BANK2[245]), 

    AESCmac@output	PTR unsigned char  size(2) Largest target is 16
		 -> aesBuffer(BANK3[16]), 

    sp__memcpy	PTR void  size(2) Largest target is 271
		 -> UpdateCfList@frequency(BANK0[4]), ComputeMic@mic(BANK0[4]), ExtractMic@mic(BANK0[4]), aesBuffer(BANK3[16]), 
		 -> radioBuffer(BIGRAM[271]), LORAWAN_RxDone@computedMic(BANK0[4]), Channels(BANK4[224]), loRa.activationParameters.applicationEui(BANK2[8]), 
		 -> loRa.activationParameters.deviceEui(BANK2[8]), macBuffer(BIGRAM[271]), loRa.activationParameters(BANK2[105]), loRa(BANK2[245]), 
		 -> AESEncodeLoRa@useKey(BANK0[16]), RadioConfiguration(BANK1[54]), AESCmac@x(BANK1[16]), 

    sp__memset	PTR void  size(2) Largest target is 271
		 -> AssemblePacket@mhdr(BANK0[1]), aesBuffer(BANK3[16]), Channels(BANK4[224]), macBuffer(BIGRAM[271]), 
		 -> loRa.activationParameters(BANK2[105]), loRa(BANK2[245]), GenerateSubkey@l(BANK0[16]), AESCmac@x(BANK1[16]), 

    AESCmac@input	PTR unsigned char  size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), macBuffer(BIGRAM[271]), 

    AESCmac@key	PTR unsigned char  size(2) Largest target is 245
		 -> loRa.activationParameters(BANK2[105]), loRa(BANK2[245]), 

    AESCmac@ptr	PTR unsigned char  size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), macBuffer(BIGRAM[271]), NULL(NULL[0]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    _TMR1_CallBack->_TMR_ISR_lora
    _TMR_ISR_lora->i2_SwTimersInterrupt
    i2_TMR_SwapTimer->i2_TMR1_ReadTimer
    i2_SwTimersInterrupt->i2_TMR_GetDeltaTime
    i2_TMR_GetDeltaTime->i2_TMR1_ReadTimer
    _EUSART1_Receive_ISR->_strncat

Critical Paths under _main in BANK0

    ___aldiv->___almod
    _TMR1_Initialize->_TMR1_SetInterruptHandler
    _PIN_MANAGER_Initialize->_IOCB4_SetInterruptHandler
    _TMR_ISR_Lora_Init->_TMR1_SetInterruptHandler
    _DIO2_ISR_Lora_Init->_IOCB4_SetInterruptHandler
    _DIO1_ISR_Lora_Init->_INT2_SetInterruptHandler
    _DIO0_ISR_Lora_Init->_INT1_SetInterruptHandler
    _EXT_INT_Initialize->_INT1_SetInterruptHandler
    _EXT_INT_Initialize->_INT2_SetInterruptHandler
    _EUSART1_Initialize->_EUSART1_SetErrorHandler
    _EUSART1_Initialize->_EUSART1_SetFramingErrorHandler
    _EUSART1_Initialize->_EUSART1_SetOverrunErrorHandler
    _EUSART1_Initialize->_EUSART1_SetRxInterruptHandler
    _EUSART1_Initialize->_EUSART1_SetTxInterruptHandler
    _LORAWAN_SetNetworkSessionKey->_memcpy
    _LORAWAN_SetApplicationSessionKey->_memcpy
    _LORAWAN_Mainloop->_RADIO_DIO0
    _UnconfirmedTransmissionCallback->_RADIO_Transmit
    _RADIO_WatchdogTimeout->_RADIO_WriteMode
    _RADIO_RxFSKTimeout->_RADIO_WriteMode
    _LORAWAN_ReceiveWindow1Callback->_RADIO_ReceiveStart
    _LORAWAN_LinkCheckCallback->_SwTimerStart
    _DutyCycleCallback->_SwTimerStart
    _AutomaticReplyCallback->_LORAWAN_Send
    _AckRetransmissionCallback->_RADIO_Transmit
    _RADIO_DIO5->_RADIO_UnhandledInterrupt
    _RADIO_DIO4->_RADIO_UnhandledInterrupt
    _RADIO_DIO3->_RADIO_UnhandledInterrupt
    _RADIO_DIO2->_RADIO_FHSSChangeChannel
    _RADIO_RxTimeout->_LORAWAN_RxTimeout
    _RADIO_FHSSChangeChannel->_RADIO_WriteFrequency
    _RADIO_DIO0->_RADIO_FSKPayloadReady
    _RADIO_DIO0->_RADIO_RxDone
    _RADIO_UnhandledInterrupt->_RADIO_RegisterWrite
    _RADIO_TxDone->_LORAWAN_TxDone
    _RADIO_RxDone->_LORAWAN_RxDone
    _RADIO_FSKPayloadReady->_LORAWAN_RxDone
    _LORAWAN_RxTimeout->_RADIO_Transmit
    _LORAWAN_ReceiveWindow2Callback->_RADIO_ReceiveStart
    _LORAWAN_RxDone->_LORAWAN_Send
    _UpdateRetransmissionAckTimeoutState->_SwTimerStart
    _UpdateJoinSuccessState->_SwTimerStart
    _UpdateCfList->___lmul
    _StartReTxTimer->_SwTimerStart
    _MacExecuteCommands->_ExecuteNewChannel
    _ExecuteRxTimingSetup->_UpdateReceiveDelays
    _UpdateReceiveDelays->___wmul
    _ExecuteRxParamSetupReq->___lmul
    _ExecuteNewChannel->___lmul
    _ValidateDataRange->_ValidateDataRate
    _LORAWAN_SetChannelIdStatus->_UpdateChannelIdStatus
    _ExecuteLinkAdr->_EnableChannels
    _EnableChannels->_EnableChannels1
    _EnableChannels1->_UpdateChannelIdStatus
    _LORAWAN_Send->_AssemblePacket
    _LORAWAN_GetMaxPayloadSize->_CountfOptsLength
    _AssemblePacket->_AESCmac
    _EncryptFRMPayload->_AESEncodeLoRa
    ___awdiv->___awmod
    _AssembleEncryptionBlock->_memcpy
    _ExtractMic->_memcpy
    _ComputeSessionKeys->_AESEncodeLoRa
    _PrepareSessionKeys->_memcpy
    _RADIO_FSKPacketSent->_LORAWAN_TxDone
    _SwTimerReadValue->_SwTimersInterrupt
    _LORAWAN_EnterContinuousReceive->_RADIO_ReceiveStart
    _RADIO_ReceiveStop->_RADIO_WriteMode
    _RADIO_ReceiveStart->_RADIO_WriteConfiguration
    _ConfigureRadioRx->_ConfigureRadio
    _LORAWAN_Join->_PrepareJoinRequestFrame
    _SelectChannelForTransmission->_SearchAvailableChannel
    _SearchAvailableChannel->_Random
    _ConfigureRadioTx->_ConfigureRadio
    _ConfigureRadio->_RADIO_SetFSKSyncWord
    _RADIO_SetFSKSyncWord->_memcpy
    _RADIO_Transmit->_RADIO_WriteConfiguration
    _RADIO_WriteConfiguration->___lmul
    _RADIO_WritePower->_RADIO_RegisterRead
    _RADIO_WritePower->_RADIO_RegisterWrite
    _RADIO_WriteFSKFrequencyDeviation->___lldiv
    _RADIO_WriteFSKBitRate->___lldiv
    _PrepareJoinRequestFrame->_ComputeMic
    _Random->___lwmod
    _rand->___lmul
    ___lwmod->_rand
    _ComputeMic->_AESCmac
    _AESCmac->_GenerateSubkey
    _GenerateSubkey->_AESEncodeLoRa
    _AESEncodeLoRa->_AESEncode
    _AESEncode->_EncKeySchedule
    _LORAWAN_Init->_LORAWAN_Reset
    _srand->_RADIO_ReadRandom
    _SetCallbackSoftwareTimers->_SwTimerSetCallback
    _RADIO_ReadRandom->_RADIO_WriteMode
    _LORAWAN_Reset->_LORAWAN_LinkCheckConfigure
    _StopAllSoftwareTimers->_SwTimerStop
    _RADIO_Init->_RADIO_WriteFrequency
    _RADIO_WriteMode->_SystemBlockingWaitMs
    _RADIO_RegisterRead->_HALSPISend
    _RADIO_WriteFrequency->___lldiv
    _RADIO_RegisterWrite->_HALSPISend
    _HALSPISend->_SPI2_Exchange8bit
    _RADIO_Reset->_SystemBlockingWaitMs
    _LORAWAN_LinkCheckConfigure->___lmul
    ___lmul->_SwTimerReadValue
    _SwTimerStart->_SwTimersInterrupt
    _TMR_OverrideRemaining->_TMR_SwapTimer
    _TMR_SwapTimer->_TMR1_ReadTimer
    _SwTimersInterrupt->_TMR_GetDeltaTime
    _TMR_GetDeltaTime->_TMR1_ReadTimer
    _SwTimerSetTimeout->___lldiv
    _InitDefault868Channels->_memcpy
    _InitDefault433Channels->_memcpy
    _CreateAllSoftwareTimers->_SwTimerCreate

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    _RADIO_RxDone->_LORAWAN_RxDone
    _RADIO_FSKPayloadReady->_LORAWAN_RxDone
    _LORAWAN_RxDone->_AESCmac
    _AssemblePacket->_AESCmac
    _ComputeMic->_AESCmac

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 6     6      0 5807519
                                            153 BANK0      6     6      0
                      _EUSART1_Write
                       _LORAWAN_Init
                       _LORAWAN_Join
                   _LORAWAN_Mainloop
                       _LORAWAN_Send
   _LORAWAN_SetApplicationSessionKey
           _LORAWAN_SetDeviceAddress
       _LORAWAN_SetNetworkSessionKey
                  _SYSTEM_Initialize
            _TMR5_HasOverflowOccured
                            ___aldiv
                            ___almod
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (1) ___awmod                                              6     2      4    1008
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (1) ___almod                                             10     2      8     474
                                              0 BANK0     10     2      8
 ---------------------------------------------------------------------------------
 (1) ___aldiv                                             14     6      8     478
                                             10 BANK0     14     6      8
                            ___almod (ARG)
 ---------------------------------------------------------------------------------
 (1) _TMR5_HasOverflowOccured                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0    2155
                 _EUSART1_Initialize
                 _EXT_INT_Initialize
               _INTERRUPT_Initialize
               _LORAWAN_PlatformInit
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _SPI2_Initialize
                    _TMR1_Initialize
                    _TMR5_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR5_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Initialize                                      0     0      0     200
           _TMR1_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (2) _SPI2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0     200
          _IOCB4_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _LORAWAN_PlatformInit                                 0     0      0     800
                 _DIO0_ISR_Lora_Init
                 _DIO1_ISR_Lora_Init
                 _DIO2_ISR_Lora_Init
                 _DIO3_ISR_Lora_Init
                 _DIO4_ISR_Lora_Init
                 _DIO5_ISR_Lora_Init
                    _SystemTimerInit
                  _TMR_ISR_Lora_Init
 ---------------------------------------------------------------------------------
 (3) _TMR_ISR_Lora_Init                                    0     0      0     200
           _TMR1_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _TMR1_SetInterruptHandler                             2     0      2     200
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _SystemTimerInit                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _DIO5_ISR_Lora_Init                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _DIO4_ISR_Lora_Init                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _DIO3_ISR_Lora_Init                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _DIO2_ISR_Lora_Init                                   0     0      0     200
          _IOCB4_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _IOCB4_SetInterruptHandler                            2     0      2     200
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _DIO1_ISR_Lora_Init                                   0     0      0     200
           _INT2_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _DIO0_ISR_Lora_Init                                   0     0      0     200
           _INT1_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EXT_INT_Initialize                                   0     0      0     400
           _INT1_SetInterruptHandler
           _INT2_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (4) _INT2_SetInterruptHandler                             2     0      2     200
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (4) _INT1_SetInterruptHandler                             2     0      2     200
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Initialize                                   0     0      0     555
            _EUSART1_SetErrorHandler
     _EUSART1_SetFramingErrorHandler
     _EUSART1_SetOverrunErrorHandler
      _EUSART1_SetRxInterruptHandler
      _EUSART1_SetTxInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _EUSART1_SetTxInterruptHandler                        2     0      2     111
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART1_SetRxInterruptHandler                        2     0      2     111
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART1_SetOverrunErrorHandler                       2     0      2     111
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART1_SetFramingErrorHandler                       2     0      2     111
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART1_SetErrorHandler                              2     0      2     111
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _LORAWAN_SetNetworkSessionKey                         2     0      2   12024
                                             11 BANK0      2     0      2
                             _memcpy
 ---------------------------------------------------------------------------------
 (1) _LORAWAN_SetDeviceAddress                             4     0      4     111
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (1) _LORAWAN_SetApplicationSessionKey                     2     0      2   12024
                                             11 BANK0      2     0      2
                             _memcpy
 ---------------------------------------------------------------------------------
 (1) _LORAWAN_Mainloop                                     0     0      0 5131601
             _INTERRUPT_GetDioStatus
                         _RADIO_DIO0
                         _RADIO_DIO1
                         _RADIO_DIO2
                         _RADIO_DIO3
                         _RADIO_DIO4
                         _RADIO_DIO5
                    _SwTimersExecute
 ---------------------------------------------------------------------------------
 (2) _SwTimersExecute                                      5     5      0 1996459
                                            122 BANK0      5     5      0
                   Absolute function *
          _AckRetransmissionCallback *
             _AutomaticReplyCallback *
                  _DutyCycleCallback *
          _LORAWAN_LinkCheckCallback *
     _LORAWAN_ReceiveWindow1Callback *
     _LORAWAN_ReceiveWindow2Callback *
                 _RADIO_RxFSKTimeout *
              _RADIO_WatchdogTimeout *
    _UnconfirmedTransmissionCallback *
             _UpdateJoinSuccessState *
 ---------------------------------------------------------------------------------
 (3) _UnconfirmedTransmissionCallback                      1     0      1  131857
                     _RADIO_Transmit
_ResetParametersForUnconfirmedTransm
                             _RxData *
       _SelectChannelForTransmission
 ---------------------------------------------------------------------------------
 (3) _RADIO_WatchdogTimeout                                1     0      1  585627
                  _LORAWAN_RxTimeout
                     _LORAWAN_TxDone
                    _RADIO_WriteMode
 ---------------------------------------------------------------------------------
 (3) _RADIO_RxFSKTimeout                                   2     1      1  429571
                  _LORAWAN_RxTimeout
                 _RADIO_RegisterRead
                    _RADIO_WriteMode
                        _SwTimerStop
 ---------------------------------------------------------------------------------
 (3) _LORAWAN_ReceiveWindow1Callback                       5     4      1  134048
                   _ConfigureRadioRx
                         _GetRx1Freq
                 _RADIO_ReceiveStart
                  _RADIO_ReceiveStop
                  _RADIO_ReleaseData
 ---------------------------------------------------------------------------------
 (4) _GetRx1Freq                                           4     0      4       0
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (3) _LORAWAN_LinkCheckCallback                            6     5      1    7908
                  _SwTimerSetTimeout
                       _SwTimerStart
                            ___lldiv
 ---------------------------------------------------------------------------------
 (3) _DutyCycleCallback                                   11    10      1    8219
                  _SwTimerSetTimeout
                       _SwTimerStart
                            ___lldiv
 ---------------------------------------------------------------------------------
 (3) _AutomaticReplyCallback                               1     0      1  274562
                       _LORAWAN_Send
 ---------------------------------------------------------------------------------
 (3) _AckRetransmissionCallback                            2     1      1  140194
               _FindSmallestDataRate
          _LORAWAN_GetMaxPayloadSize
                     _RADIO_Transmit
_ResetParametersForConfirmedTransmis
                             _RxData *
       _SelectChannelForTransmission
_UpdateRetransmissionAckTimeoutState
 ---------------------------------------------------------------------------------
 (16) Absolute function(Fake)                              4     0      4       0
 ---------------------------------------------------------------------------------
 (2) _RADIO_DIO5                                           2     2      0    8478
                                              5 BANK0      2     2      0
                 _RADIO_RegisterRead
           _RADIO_UnhandledInterrupt
 ---------------------------------------------------------------------------------
 (2) _RADIO_DIO4                                           3     3      0    8478
                                              5 BANK0      3     3      0
                 _RADIO_RegisterRead
           _RADIO_UnhandledInterrupt
 ---------------------------------------------------------------------------------
 (2) _RADIO_DIO3                                           2     2      0    8478
                                              5 BANK0      2     2      0
                 _RADIO_RegisterRead
           _RADIO_UnhandledInterrupt
 ---------------------------------------------------------------------------------
 (2) _RADIO_DIO2                                           3     3      0   31054
                                             26 BANK0      3     3      0
            _RADIO_FHSSChangeChannel
                 _RADIO_RegisterRead
           _RADIO_UnhandledInterrupt
 ---------------------------------------------------------------------------------
 (2) _RADIO_DIO1                                           2     2      0  468898
                                            107 BANK0      2     2      0
            _RADIO_FHSSChangeChannel
                 _RADIO_RegisterRead
                    _RADIO_RxTimeout
           _RADIO_UnhandledInterrupt
 ---------------------------------------------------------------------------------
 (3) _RADIO_RxTimeout                                      0     0      0  437823
                  _LORAWAN_RxTimeout
                _RADIO_RegisterWrite
                    _RADIO_WriteMode
                        _SwTimerStop
 ---------------------------------------------------------------------------------
 (3) _RADIO_FHSSChangeChannel                              1     1      0   22553
                                             25 BANK0      1     1      0
                 _RADIO_RegisterRead
                _RADIO_RegisterWrite
               _RADIO_WriteFrequency
 ---------------------------------------------------------------------------------
 (2) _RADIO_DIO0                                           4     4      0 2609733
                                            149 BANK0      4     4      0
                _RADIO_FSKPacketSent
              _RADIO_FSKPayloadReady
                 _RADIO_RegisterRead
                       _RADIO_RxDone
                       _RADIO_TxDone
           _RADIO_UnhandledInterrupt
 ---------------------------------------------------------------------------------
 (3) _RADIO_UnhandledInterrupt                             1     1      0    8387
                                              4 BANK0      1     1      0
                _RADIO_RegisterWrite
 ---------------------------------------------------------------------------------
 (3) _RADIO_TxDone                                        12    12      0  183306
                                            131 BANK0     12    12      0
                     _LORAWAN_TxDone
                _RADIO_RegisterWrite
                    _RADIO_WriteMode
                   _SwTimerReadValue
                        _SwTimerStop
                             ___lmul
 ---------------------------------------------------------------------------------
 (3) _RADIO_RxDone                                         2     2      0  917786
                                            147 BANK0      2     2      0
                     _HALSPICSAssert
                   _HALSPICSDeassert
                         _HALSPISend
                     _LORAWAN_RxDone
                 _RADIO_RegisterRead
                _RADIO_RegisterWrite
                    _RADIO_WriteMode
                        _SwTimerStop
                            ___abdiv
 ---------------------------------------------------------------------------------
 (4) ___abdiv                                              7     6      1     389
                                              0 BANK0      7     6      1
 ---------------------------------------------------------------------------------
 (3) _RADIO_FSKPayloadReady                                2     2      0 1324997
                                            147 BANK0      2     2      0
                     _HALSPICSAssert
                   _HALSPICSDeassert
                         _HALSPISend
                     _LORAWAN_RxDone
                  _LORAWAN_RxTimeout
                 _RADIO_RegisterRead
                    _RADIO_WriteMode
                        _SwTimerStop
 ---------------------------------------------------------------------------------
 (4) _LORAWAN_RxTimeout                                    9     9      0  415988
                                             98 BANK0      9     9      0
     _LORAWAN_ReceiveWindow2Callback
                     _RADIO_Transmit
_ResetParametersForConfirmedTransmis
_ResetParametersForUnconfirmedTransm
                             _RxData *
       _SelectChannelForTransmission
                   _SetJoinFailState
                  _SwTimerSetTimeout
                       _SwTimerStart
                            ___lldiv
 ---------------------------------------------------------------------------------
 (5) _LORAWAN_ReceiveWindow2Callback                       1     0      1  276114
                   _ConfigureRadioRx
     _LORAWAN_EnterContinuousReceive
                    _RADIO_GetStatus
                 _RADIO_ReceiveStart
                  _RADIO_ReceiveStop
                  _RADIO_ReleaseData
_ResetParametersForConfirmedTransmis
_ResetParametersForUnconfirmedTransm
                             _RxData *
 ---------------------------------------------------------------------------------
 (4) _LORAWAN_RxDone                                      28    25      3  895314
                                            122 BANK0     25    25      0
                                            102 BANK1      3     0      3
                            _AESCmac
                      _AESEncodeLoRa
            _AssembleEncryptionBlock
                         _CheckFlags
                    _CheckMcastFlags
                         _ComputeMic
                 _ComputeSessionKeys
                  _EncryptFRMPayload
                         _ExtractMic
     _LORAWAN_EnterContinuousReceive
                       _LORAWAN_Send
                 _MacExecuteCommands
                    _RADIO_GetStatus
                  _RADIO_ReleaseData
                             _RxData *
             _SearchAvailableChannel
                   _SetJoinFailState
             _SetReceptionNotOkState
                     _StartReTxTimer
                        _SwTimerStop
                       _UpdateCfList
                   _UpdateDLSettings
             _UpdateJoinSuccessState
                _UpdateReceiveDelays
_UpdateRetransmissionAckTimeoutState
                             _memcpy
 ---------------------------------------------------------------------------------
 (4) _UpdateRetransmissionAckTimeoutState                  4     4      0    7815
                                             58 BANK0      4     4      0
                  _SwTimerSetTimeout
                       _SwTimerStart
                            ___lldiv
 ---------------------------------------------------------------------------------
 (3) _UpdateJoinSuccessState                               5     4      1    7839
                     _RxJoinResponse *
                  _SwTimerSetTimeout
                       _SwTimerStart
                            ___lldiv
 ---------------------------------------------------------------------------------
 (5) _UpdateDLSettings                                     2     1      1     177
                                              0 BANK0      2     1      1
 ---------------------------------------------------------------------------------
 (5) _UpdateCfList                                         9     7      2   21562
                                             70 BANK0      9     7      2
         _LORAWAN_SetChannelIdStatus
                  _ValidateFrequency
                             ___lmul
                             ___wmul
                             _memcpy
 ---------------------------------------------------------------------------------
 (5) _StartReTxTimer                                       9     9      0    8017
                                             58 BANK0      9     9      0
                  _SwTimerSetTimeout
                       _SwTimerStart
                            ___lldiv
 ---------------------------------------------------------------------------------
 (5) _SetReceptionNotOkState                               0     0      0  142089
     _LORAWAN_EnterContinuousReceive
                             _RxData *
 ---------------------------------------------------------------------------------
 (5) _SetJoinFailState                                     0     0      0       0
                     _RxJoinResponse *
 ---------------------------------------------------------------------------------
 (4) _RxJoinResponse                                       1     1      0       0
 ---------------------------------------------------------------------------------
 (5) _MacExecuteCommands                                   8     5      3   22914
                                             80 BANK0      8     5      3
                   _ExecuteDevStatus
                   _ExecuteDutyCycle
                     _ExecuteLinkAdr
                   _ExecuteLinkCheck
                  _ExecuteNewChannel
             _ExecuteRxParamSetupReq
               _ExecuteRxTimingSetup
 ---------------------------------------------------------------------------------
 (6) _ExecuteRxTimingSetup                                 3     1      2    1784
                                              7 BANK0      3     1      2
                _UpdateReceiveDelays
 ---------------------------------------------------------------------------------
 (5) _UpdateReceiveDelays                                  1     1      0    1627
                                              6 BANK0      1     1      0
                             ___wmul
 ---------------------------------------------------------------------------------
 (6) ___wmul                                               6     2      4    1583
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (6) _ExecuteRxParamSetupReq                               9     7      2    6259
                                             70 BANK0      9     7      2
     _UpdateReceiveWindow2Parameters
                   _ValidateDataRate
                  _ValidateFrequency
                   _ValidateRxOffset
                             ___lmul
 ---------------------------------------------------------------------------------
 (7) _ValidateRxOffset                                     2     2      0      46
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (7) _UpdateReceiveWindow2Parameters                       5     0      5     400
                                              0 BANK0      5     0      5
 ---------------------------------------------------------------------------------
 (6) _ExecuteNewChannel                                   10     8      2   11071
                                             70 BANK0     10     8      2
         _LORAWAN_SetChannelIdStatus
              _UpdateChannelIdStatus
                    _UpdateDataRange
                    _UpdateDutyCycle
                    _UpdateFrequency
                  _ValidateChannelId
                  _ValidateDataRange
                  _ValidateFrequency
                             ___lmul
 ---------------------------------------------------------------------------------
 (6) _ValidateFrequency                                    5     1      4     558
                                              0 BANK0      5     1      4
 ---------------------------------------------------------------------------------
 (7) _ValidateDataRange                                    4     4      0     204
                                              2 BANK0      4     4      0
                   _ValidateDataRate
 ---------------------------------------------------------------------------------
 (7) _UpdateFrequency                                      5     1      4     333
                                              0 BANK0      5     1      4
 ---------------------------------------------------------------------------------
 (7) _UpdateDutyCycle                                      3     1      2     333
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (7) _UpdateDataRange                                      4     3      1     489
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (6) _LORAWAN_SetChannelIdStatus                           3     2      1    2033
                                              4 BANK0      3     2      1
              _UpdateChannelIdStatus
                  _ValidateChannelId
 ---------------------------------------------------------------------------------
 (7) _ValidateChannelId                                    3     2      1     802
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (6) _ExecuteLinkCheck                                     2     0      2     157
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (6) _ExecuteLinkAdr                                      10     8      2    2590
                                             15 BANK0     10     8      2
                     _EnableChannels
              _UpdateCurrentDataRate
                      _UpdateTxPower
                _ValidateChannelMask
            _ValidateChannelMaskCntl
                   _ValidateDataRate
                    _ValidateTxPower
 ---------------------------------------------------------------------------------
 (7) _ValidateTxPower                                      2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (7) _ValidateDataRate                                     2     2      0      46
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (7) _ValidateChannelMaskCntl                              2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (7) _ValidateChannelMask                                  5     3      2     225
                                              0 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (7) _UpdateTxPower                                        1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (7) _UpdateCurrentDataRate                                1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (7) _EnableChannels                                       3     0      3    1647
                                             12 BANK0      3     0      3
                    _EnableChannels1
 ---------------------------------------------------------------------------------
 (8) _EnableChannels1                                      8     3      5    1425
                                              4 BANK0      8     3      5
              _UpdateChannelIdStatus
 ---------------------------------------------------------------------------------
 (7) _UpdateChannelIdStatus                                4     3      1     778
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (6) _ExecuteDutyCycle                                     6     4      2     201
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (6) _ExecuteDevStatus                                     2     0      2     111
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _LORAWAN_Send                                         7     3      4  274562
                                            115 BANK0      7     3      4
                     _AssemblePacket
          _LORAWAN_GetMaxPayloadSize
                  _RADIO_ReceiveStop
                     _RADIO_Transmit
       _SelectChannelForTransmission
 ---------------------------------------------------------------------------------
 (2) _LORAWAN_GetMaxPayloadSize                            3     3      0     184
                                              8 BANK0      3     3      0
                   _CountfOptsLength
 ---------------------------------------------------------------------------------
 (2) _AssemblePacket                                      12     7      5  131832
                                            103 BANK0     12     7      5
                            _AESCmac
            _AssembleEncryptionBlock
                   _CountfOptsLength
                  _EncryptFRMPayload
               _FindSmallestDataRate
         _IncludeMacCommandsResponse
                             _memcpy
                             _memset
 ---------------------------------------------------------------------------------
 (3) _IncludeMacCommandsResponse                          15    10      5    1870
                                              0 BANK0     15    10      5
                 _RADIO_GetPacketSnr
 ---------------------------------------------------------------------------------
 (4) _RADIO_GetPacketSnr                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _FindSmallestDataRate                                 4     4      0     315
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (3) _EncryptFRMPayload                                   22     8     14   39496
                                             49 BANK0     22     8     14
                      _AESEncodeLoRa
            _AssembleEncryptionBlock
                            ___awdiv
 ---------------------------------------------------------------------------------
 (1) ___awdiv                                              8     4      4    1368
                                              6 BANK0      8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (4) _AssembleEncryptionBlock                              9     2      7   17042
                                             11 BANK0      9     2      7
                             _memcpy
                             _memset
 ---------------------------------------------------------------------------------
 (3) _CountfOptsLength                                     8     8      0     136
                                              0 BANK0      8     8      0
 ---------------------------------------------------------------------------------
 (5) _ExtractMic                                          12     8      4   12516
                                             11 BANK0     12     8      4
                             _memcpy
 ---------------------------------------------------------------------------------
 (5) _ComputeSessionKeys                                   2     0      2   32758
                                             49 BANK0      2     0      2
                      _AESEncodeLoRa
                 _PrepareSessionKeys
 ---------------------------------------------------------------------------------
 (6) _PrepareSessionKeys                                   7     1      6   15726
                                             11 BANK0      7     1      6
                             _memcpy
                             _memset
 ---------------------------------------------------------------------------------
 (5) _CheckMcastFlags                                      2     0      2     221
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (5) _CheckFlags                                           2     0      2     177
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _RADIO_FSKPacketSent                                 13    13      0  175054
                                            131 BANK0     13    13      0
                     _LORAWAN_TxDone
                 _RADIO_RegisterRead
                    _RADIO_WriteMode
                   _SwTimerReadValue
                        _SwTimerStop
                             ___lmul
 ---------------------------------------------------------------------------------
 (4) _LORAWAN_TxDone                                      40    38      2  156191
                                             91 BANK0     40    38      2
     _LORAWAN_EnterContinuousReceive
                    _RADIO_GetStatus
                             _RxData *
                   _SwTimerIsRunning
                   _SwTimerReadValue
                  _SwTimerSetTimeout
                       _SwTimerStart
                        _SwTimerStop
                            ___lldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (5) _SwTimerReadValue                                     9     5      4     361
                                             49 BANK0      9     5      4
                  _SwTimersInterrupt
 ---------------------------------------------------------------------------------
 (5) _SwTimerIsRunning                                     2     2      0      45
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (5) _RADIO_GetStatus                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _LORAWAN_EnterContinuousReceive                       0     0      0  138057
                   _ConfigureRadioRx
                 _RADIO_ReceiveStart
                  _RADIO_ReceiveStop
                  _RADIO_ReleaseData
_ResetParametersForConfirmedTransmis
_ResetParametersForUnconfirmedTransm
                             _RxData *
 ---------------------------------------------------------------------------------
 (4) _RxData                                               4     0      4    4032
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (4) _ResetParametersForUnconfirmedTransmission            0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _ResetParametersForConfirmedTransmission              0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _RADIO_ReleaseData                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _RADIO_ReceiveStop                                    0     0      0   13448
                    _RADIO_WriteMode
 ---------------------------------------------------------------------------------
 (6) _RADIO_ReceiveStart                                  10     8      2  107423
                                             81 BANK0     10     8      2
                _RADIO_RegisterWrite
           _RADIO_WriteConfiguration
                    _RADIO_WriteMode
                  _SwTimerSetTimeout
                       _SwTimerStart
                            ___lldiv
 ---------------------------------------------------------------------------------
 (6) _ConfigureRadioRx                                     5     1      4   13154
                                             19 BANK0      5     1      4
                     _ConfigureRadio
                       _RADIO_SetCRC
                _RADIO_SetIQInverted
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_GetDioStatus                               1     1      0      23
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _LORAWAN_Join                                         3     3      0  221138
                                            123 BANK0      3     3      0
            _PrepareJoinRequestFrame
                     _RADIO_Transmit
       _SelectChannelForTransmission
                  _SwTimerSetTimeout
                       _SwTimerStart
               _UpdateJoinInProgress
 ---------------------------------------------------------------------------------
 (2) _UpdateJoinInProgress                                 1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _SelectChannelForTransmission                         3     3      0   19506
                                             91 BANK0      3     3      0
                   _ConfigureRadioTx
             _SearchAvailableChannel
 ---------------------------------------------------------------------------------
 (3) _SearchAvailableChannel                              12     9      3    6348
                                             79 BANK0     12     9      3
                             _Random
 ---------------------------------------------------------------------------------
 (3) _ConfigureRadioTx                                     6     2      4   13022
                                             19 BANK0      6     2      4
                     _ConfigureRadio
                       _RADIO_SetCRC
                _RADIO_SetIQInverted
               _RADIO_SetOutputPower
 ---------------------------------------------------------------------------------
 (4) _RADIO_SetOutputPower                                 1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _RADIO_SetIQInverted                                  1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _RADIO_SetCRC                                         1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _ConfigureRadio                                       5     1      4   12799
                                             14 BANK0      5     1      4
                 _RADIO_SetBandwidth
          _RADIO_SetChannelFrequency
               _RADIO_SetFSKSyncWord
        _RADIO_SetFrequencyHopPeriod
              _RADIO_SetLoRaSyncWord
                _RADIO_SetModulation
           _RADIO_SetSpreadingFactor
 ---------------------------------------------------------------------------------
 (5) _RADIO_SetSpreadingFactor                             1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (5) _RADIO_SetModulation                                  1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (5) _RADIO_SetFrequencyHopPeriod                          2     0      2     111
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (5) _RADIO_SetFSKSyncWord                                 3     1      2   12069
                                             11 BANK0      3     1      2
                             _memcpy
 ---------------------------------------------------------------------------------
 (5) _RADIO_SetChannelFrequency                            4     0      4     243
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (5) _RADIO_SetBandwidth                                   1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _RADIO_Transmit                                      17    14      3  108319
                                             81 BANK0     17    14      3
                     _HALSPICSAssert
                   _HALSPICSDeassert
                         _HALSPISend
                 _RADIO_RegisterRead
                _RADIO_RegisterWrite
           _RADIO_WriteConfiguration
                    _RADIO_WriteMode
                  _SwTimerSetTimeout
                       _SwTimerStart
                        _SwTimerStop
                            ___lldiv
 ---------------------------------------------------------------------------------
 (3) _RADIO_WriteConfiguration                            11     9      2   77416
                                             70 BANK0     11     9      2
                 _RADIO_RegisterRead
                _RADIO_RegisterWrite
              _RADIO_WriteFSKBitRate
   _RADIO_WriteFSKFrequencyDeviation
               _RADIO_WriteFrequency
                    _RADIO_WriteMode
                   _RADIO_WritePower
                             ___lmul
 ---------------------------------------------------------------------------------
 (4) _RADIO_WritePower                                     3     3      0    8759
                                              4 BANK0      3     3      0
                 _RADIO_RegisterRead
                _RADIO_RegisterWrite
 ---------------------------------------------------------------------------------
 (4) _RADIO_WriteFSKFrequencyDeviation                     8     4      4   13513
                                             13 BANK0      8     4      4
                _RADIO_RegisterWrite
                            ___lldiv
 ---------------------------------------------------------------------------------
 (4) _RADIO_WriteFSKBitRate                                8     4      4   13512
                                             13 BANK0      8     4      4
                _RADIO_RegisterWrite
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) _PrepareJoinRequestFrame                             11    11      0   90348
                                            112 BANK0     11    11      0
                         _ComputeMic
                             _Random
                             _memcpy
                             _memset
 ---------------------------------------------------------------------------------
 (4) _Random                                               2     0      2    5409
                                             77 BANK0      2     0      2
                            ___lwmod
                               _rand
 ---------------------------------------------------------------------------------
 (5) _rand                                                 2     0      2    4872
                                             70 BANK0      2     0      2
                             ___lmul
 ---------------------------------------------------------------------------------
 (5) ___lwmod                                              5     1      4     337
                                             72 BANK0      5     1      4
                               _rand (ARG)
 ---------------------------------------------------------------------------------
 (5) _ComputeMic                                           9     4      5   69538
                                            103 BANK0      9     4      5
                            _AESCmac
                             _memcpy
 ---------------------------------------------------------------------------------
 (3) _AESCmac                                            116   109      7   57000
                                             89 BANK0     14     7      7
                                              0 BANK1    102   102      0
                      _AESEncodeLoRa
                     _GenerateSubkey
                             _memcpy
                             _memset
 ---------------------------------------------------------------------------------
 (4) _GenerateSubkey                                      40    34      6   22093
                                             49 BANK0     40    34      6
                      _AESEncodeLoRa
                         _FillSubKey
                             _memset
 ---------------------------------------------------------------------------------
 (5) _FillSubKey                                           8     3      5    1270
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (4) _AESEncodeLoRa                                       20    16      4   16854
                                             29 BANK0     20    16      4
                          _AESEncode
                             _memcpy
 ---------------------------------------------------------------------------------
 (5) _AESEncode                                           24    20      4    3397
                                              6 BANK0     23    19      4
                     _EncKeySchedule
                     _EncodeShiftRow
 ---------------------------------------------------------------------------------
 (6) _EncodeShiftRow                                       3     1      2     709
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (6) _EncKeySchedule                                       6     4      2     839
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (1) _LORAWAN_Init                                         4     0      4  150532
                                             82 BANK0      4     0      4
            _CreateAllSoftwareTimers
                      _LORAWAN_Reset
                         _RADIO_Init
                   _RADIO_ReadRandom
          _SetCallbackSoftwareTimers
              _StopAllSoftwareTimers
                              _srand
 ---------------------------------------------------------------------------------
 (2) _srand                                                2     0      2     111
                                             18 BANK0      2     0      2
                   _RADIO_ReadRandom (ARG)
 ---------------------------------------------------------------------------------
 (2) _SetCallbackSoftwareTimers                            0     0      0    2224
                 _SwTimerSetCallback
 ---------------------------------------------------------------------------------
 (2) _RADIO_ReadRandom                                     6     4      2   22531
                                             12 BANK0      6     4      2
                 _RADIO_RegisterRead
                _RADIO_RegisterWrite
                    _RADIO_WriteMode
               _SystemBlockingWaitMs
 ---------------------------------------------------------------------------------
 (2) _LORAWAN_Reset                                        1     1      0   85775
                                             81 BANK0      1     1      0
             _InitDefault433Channels
             _InitDefault868Channels
         _LORAWAN_LinkCheckConfigure
                         _RADIO_Init
              _RADIO_SetLoRaSyncWord
              _StopAllSoftwareTimers
             _UpdateMinMaxChDataRate
                             _memset
 ---------------------------------------------------------------------------------
 (3) _UpdateMinMaxChDataRate                               2     2      0     156
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _StopAllSoftwareTimers                                0     0      0      22
                        _SwTimerStop
 ---------------------------------------------------------------------------------
 (5) _RADIO_SetLoRaSyncWord                                1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _RADIO_Init                                           7     1      6   39536
                                             25 BANK0      7     1      6
                 _RADIO_RegisterRead
                _RADIO_RegisterWrite
                        _RADIO_Reset
               _RADIO_WriteFrequency
                    _RADIO_WriteMode
                      _SwTimerCreate
                 _SwTimerSetCallback
                        _SwTimerStop
 ---------------------------------------------------------------------------------
 (3) _SwTimerSetCallback                                   4     1      3    2224
                                              0 BANK0      4     1      3
 ---------------------------------------------------------------------------------
 (3) _RADIO_WriteMode                                      7     5      2   13448
                                              5 BANK0      7     5      2
                    _HALDIO5PinValue
                 _RADIO_RegisterRead
                _RADIO_RegisterWrite
               _SystemBlockingWaitMs
 ---------------------------------------------------------------------------------
 (4) _RADIO_RegisterRead                                   2     2      0      90
                                              2 BANK0      2     2      0
                     _HALSPICSAssert
                   _HALSPICSDeassert
                         _HALSPISend
 ---------------------------------------------------------------------------------
 (4) _HALDIO5PinValue                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _RADIO_WriteFrequency                                12     8      4   14097
                                             13 BANK0     12     8      4
                _RADIO_RegisterWrite
                            ___lldiv
                            ___llmod
 ---------------------------------------------------------------------------------
 (5) ___llmod                                              9     1      8     337
                                              0 BANK0      9     1      8
 ---------------------------------------------------------------------------------
 (4) _RADIO_RegisterWrite                                  2     1      1    8365
                                              2 BANK0      2     1      1
                     _HALSPICSAssert
                   _HALSPICSDeassert
                         _HALSPISend
 ---------------------------------------------------------------------------------
 (5) _HALSPISend                                           1     1      0      44
                                              1 BANK0      1     1      0
                  _SPI2_Exchange8bit
 ---------------------------------------------------------------------------------
 (6) _SPI2_Exchange8bit                                    1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (5) _HALSPICSDeassert                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _HALSPICSAssert                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _RADIO_Reset                                          0     0      0     601
               _HALResetPinMakeInput
              _HALResetPinMakeOutput
             _HALResetPinOutputValue
               _SystemBlockingWaitMs
 ---------------------------------------------------------------------------------
 (4) _SystemBlockingWaitMs                                 5     1      4     557
                                              0 BANK0      5     1      4
 ---------------------------------------------------------------------------------
 (4) _HALResetPinOutputValue                               1     1      0      44
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _HALResetPinMakeOutput                                0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _HALResetPinMakeInput                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _LORAWAN_LinkCheckConfigure                          11     9      2   12934
                                             70 BANK0     11     9      2
                  _SwTimerSetTimeout
                       _SwTimerStart
                        _SwTimerStop
                            ___lldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (6) ___lmul                                              12     4      8    4872
                                             58 BANK0     12     4      8
                   _SwTimerReadValue (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8    4968
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (3) _SwTimerStop                                          1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _SwTimerStart                                         9     9      0    1201
                                             49 BANK0      9     9      0
                  _SwTimersInterrupt
              _TMR_OverrideRemaining
 ---------------------------------------------------------------------------------
 (4) _TMR_OverrideRemaining                               10     6      4     773
                                             10 BANK0     10     6      4
                      _TMR_SwapTimer
 ---------------------------------------------------------------------------------
 (5) _TMR_SwapTimer                                        2     0      2     572
                                              8 BANK0      2     0      2
                     _TMR1_ReadTimer
                    _TMR1_WriteTimer
 ---------------------------------------------------------------------------------
 (6) _TMR1_WriteTimer                                      2     0      2     329
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (4) _SwTimersInterrupt                                   17    13      4     316
                                             32 BANK0     17    13      4
                   _TMR_GetDeltaTime
 ---------------------------------------------------------------------------------
 (5) _TMR_GetDeltaTime                                    24    20      4      69
                                              8 BANK0     24    20      4
                     _TMR1_ReadTimer
 ---------------------------------------------------------------------------------
 (6) _TMR1_ReadTimer                                       8     6      2      69
                                              0 BANK0      8     6      2
 ---------------------------------------------------------------------------------
 (3) _SwTimerSetTimeout                                    9     5      4    1646
                                             13 BANK0      9     5      4
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (3) _InitDefault868Channels                               1     1      0   15014
                                             11 BANK0      1     1      0
                             _memcpy
                             _memset
 ---------------------------------------------------------------------------------
 (3) _InitDefault433Channels                               1     1      0   15014
                                             11 BANK0      1     1      0
                             _memcpy
                             _memset
 ---------------------------------------------------------------------------------
 (3) _memset                                               8     2      6    3033
                                              0 BANK0      8     2      6
 ---------------------------------------------------------------------------------
 (2) _memcpy                                              11     5      6   11891
                                              0 BANK0     11     5      6
 ---------------------------------------------------------------------------------
 (2) _CreateAllSoftwareTimers                              0     0      0     111
                      _SwTimerCreate
 ---------------------------------------------------------------------------------
 (3) _SwTimerCreate                                        1     1      0     111
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _EUSART1_Write                                        1     1      0      44
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (13) _INTERRUPT_InterruptManager                         10    10      0    1169
                                             51 COMRAM    10    10      0
                   Absolute function *
                _EUSART1_Receive_ISR *
               _EUSART1_Transmit_ISR *
                           _INT1_ISR
                           _INT2_ISR
                    _PIN_MANAGER_IOC
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (14) _TMR1_ISR                                            0     0      0     713
                      _TMR1_CallBack
                  i2_TMR1_WriteTimer
 ---------------------------------------------------------------------------------
 (15) _TMR1_CallBack                                       0     0      0     573
                   Absolute function *
       _TMR1_DefaultInterruptHandler *
                       _TMR_ISR_lora *
 ---------------------------------------------------------------------------------
 (16) _TMR_ISR_lora                                        2     2      0     573
                                             49 COMRAM     2     2      0
                i2_SwTimersInterrupt
                    i2_TMR_SwapTimer
 ---------------------------------------------------------------------------------
 (17) i2_TMR_SwapTimer                                     2     0      2     257
                                              8 COMRAM     2     0      2
                   i2_TMR1_ReadTimer
                  i2_TMR1_WriteTimer
 ---------------------------------------------------------------------------------
 (15) i2_TMR1_WriteTimer                                   2     0      2     140
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (17) i2_SwTimersInterrupt                                17    13      4     316
                                             32 COMRAM    17    13      4
                 i2_TMR_GetDeltaTime
 ---------------------------------------------------------------------------------
 (18) i2_TMR_GetDeltaTime                                 24    20      4      69
                                              8 COMRAM    24    20      4
                   i2_TMR1_ReadTimer
 ---------------------------------------------------------------------------------
 (18) i2_TMR1_ReadTimer                                    8     6      2      69
                                              0 COMRAM     8     6      2
 ---------------------------------------------------------------------------------
 (16) _TMR1_DefaultInterruptHandler                        0     0      0       0
 ---------------------------------------------------------------------------------
 (14) _PIN_MANAGER_IOC                                     0     0      0       0
                          _IOCB4_ISR
 ---------------------------------------------------------------------------------
 (15) _IOCB4_ISR                                           0     0      0       0
                   Absolute function *
                      _DIO2_ISR_Lora *
      _IOCB4_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (16) _IOCB4_DefaultInterruptHandler                       0     0      0       0
 ---------------------------------------------------------------------------------
 (16) _DIO2_ISR_Lora                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (14) _INT2_ISR                                            0     0      0       0
                      _INT2_CallBack
 ---------------------------------------------------------------------------------
 (15) _INT2_CallBack                                       0     0      0       0
                   Absolute function *
                      _DIO1_ISR_Lora *
       _INT2_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (16) _INT2_DefaultInterruptHandler                        0     0      0       0
 ---------------------------------------------------------------------------------
 (16) _DIO1_ISR_Lora                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (14) _INT1_ISR                                            0     0      0       0
                      _INT1_CallBack
 ---------------------------------------------------------------------------------
 (15) _INT1_CallBack                                       0     0      0       0
                   Absolute function *
                      _DIO0_ISR_Lora *
       _INT1_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (16) _INT1_DefaultInterruptHandler                        0     0      0       0
 ---------------------------------------------------------------------------------
 (16) _DIO0_ISR_Lora                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (14) _EUSART1_Transmit_ISR                                0     0      0       0
 ---------------------------------------------------------------------------------
 (14) _EUSART1_Receive_ISR                                 3     3      0     456
                                              8 COMRAM     3     3      0
                   Absolute function *
        _EUSART1_DefaultErrorHandler *
 _EUSART1_DefaultFramingErrorHandler *
 _EUSART1_DefaultOverrunErrorHandler *
                       _EUSART1_Read
              _EUSART1_RxDataHandler
                            _strncat
 ---------------------------------------------------------------------------------
 (15) _strncat                                             8     2      6     432
                                              0 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (15) _EUSART1_Read                                        1     1      0      24
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (15) _EUSART1_DefaultOverrunErrorHandler                  0     0      0       0
 ---------------------------------------------------------------------------------
 (15) _EUSART1_DefaultFramingErrorHandler                  0     0      0       0
 ---------------------------------------------------------------------------------
 (15) _EUSART1_DefaultErrorHandler                         0     0      0       0
              _EUSART1_RxDataHandler
 ---------------------------------------------------------------------------------
 (15) _EUSART1_RxDataHandler                               0     0      0       0
 ---------------------------------------------------------------------------------
 (16) Absolute function(Fake)                              4     0      4       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 18
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _EUSART1_Write
   _LORAWAN_Init
     _CreateAllSoftwareTimers
       _SwTimerCreate
     _LORAWAN_Reset
       _InitDefault433Channels
         _memcpy
         _memset
       _InitDefault868Channels
         _memcpy
         _memset
       _LORAWAN_LinkCheckConfigure
         _SwTimerSetTimeout
           ___lldiv (ARG)
         _SwTimerStart
           _SwTimersInterrupt
             _TMR_GetDeltaTime
               _TMR1_ReadTimer
           _TMR_OverrideRemaining
             _TMR_SwapTimer
               _TMR1_ReadTimer
               _TMR1_WriteTimer
         _SwTimerStop
         ___lldiv
         ___lmul
           _SwTimerReadValue (ARG)
             _SwTimersInterrupt
               _TMR_GetDeltaTime
                 _TMR1_ReadTimer
       _RADIO_Init
         _RADIO_RegisterRead
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         _RADIO_RegisterWrite
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         _RADIO_Reset
           _HALResetPinMakeInput
           _HALResetPinMakeOutput
           _HALResetPinOutputValue
           _SystemBlockingWaitMs
         _RADIO_WriteFrequency
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           ___lldiv
           ___llmod
         _RADIO_WriteMode
           _HALDIO5PinValue
           _RADIO_RegisterRead
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _SystemBlockingWaitMs
         _SwTimerCreate
         _SwTimerSetCallback
         _SwTimerStop
       _RADIO_SetLoRaSyncWord
       _StopAllSoftwareTimers
         _SwTimerStop
       _UpdateMinMaxChDataRate
       _memset
     _RADIO_Init
       _RADIO_RegisterRead
         _HALSPICSAssert
         _HALSPICSDeassert
         _HALSPISend
           _SPI2_Exchange8bit
       _RADIO_RegisterWrite
         _HALSPICSAssert
         _HALSPICSDeassert
         _HALSPISend
           _SPI2_Exchange8bit
       _RADIO_Reset
         _HALResetPinMakeInput
         _HALResetPinMakeOutput
         _HALResetPinOutputValue
         _SystemBlockingWaitMs
       _RADIO_WriteFrequency
         _RADIO_RegisterWrite
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         ___lldiv
         ___llmod
       _RADIO_WriteMode
         _HALDIO5PinValue
         _RADIO_RegisterRead
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         _RADIO_RegisterWrite
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         _SystemBlockingWaitMs
       _SwTimerCreate
       _SwTimerSetCallback
       _SwTimerStop
     _RADIO_ReadRandom
       _RADIO_RegisterRead
         _HALSPICSAssert
         _HALSPICSDeassert
         _HALSPISend
           _SPI2_Exchange8bit
       _RADIO_RegisterWrite
         _HALSPICSAssert
         _HALSPICSDeassert
         _HALSPISend
           _SPI2_Exchange8bit
       _RADIO_WriteMode
         _HALDIO5PinValue
         _RADIO_RegisterRead
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         _RADIO_RegisterWrite
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         _SystemBlockingWaitMs
       _SystemBlockingWaitMs
     _SetCallbackSoftwareTimers
       _SwTimerSetCallback
     _StopAllSoftwareTimers
       _SwTimerStop
     _srand
       _RADIO_ReadRandom (ARG)
         _RADIO_RegisterRead
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         _RADIO_RegisterWrite
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         _RADIO_WriteMode
           _HALDIO5PinValue
           _RADIO_RegisterRead
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _SystemBlockingWaitMs
         _SystemBlockingWaitMs
   _LORAWAN_Join
     _PrepareJoinRequestFrame
       _ComputeMic
         _AESCmac
           _AESEncodeLoRa
             _AESEncode
               _EncKeySchedule
               _EncodeShiftRow
             _memcpy
           _GenerateSubkey
             _AESEncodeLoRa
               _AESEncode
                 _EncKeySchedule
                 _EncodeShiftRow
               _memcpy
             _FillSubKey
             _memset
           _memcpy
           _memset
         _memcpy
       _Random
         ___lwmod
           _rand (ARG)
             ___lmul
               _SwTimerReadValue (ARG)
                 _SwTimersInterrupt
                   _TMR_GetDeltaTime
                     _TMR1_ReadTimer
         _rand
           ___lmul
             _SwTimerReadValue (ARG)
               _SwTimersInterrupt
                 _TMR_GetDeltaTime
                   _TMR1_ReadTimer
       _memcpy
       _memset
     _RADIO_Transmit
       _HALSPICSAssert
       _HALSPICSDeassert
       _HALSPISend
         _SPI2_Exchange8bit
       _RADIO_RegisterRead
         _HALSPICSAssert
         _HALSPICSDeassert
         _HALSPISend
           _SPI2_Exchange8bit
       _RADIO_RegisterWrite
         _HALSPICSAssert
         _HALSPICSDeassert
         _HALSPISend
           _SPI2_Exchange8bit
       _RADIO_WriteConfiguration
         _RADIO_RegisterRead
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         _RADIO_RegisterWrite
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         _RADIO_WriteFSKBitRate
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           ___lldiv
         _RADIO_WriteFSKFrequencyDeviation
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           ___lldiv
         _RADIO_WriteFrequency
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           ___lldiv
           ___llmod
         _RADIO_WriteMode
           _HALDIO5PinValue
           _RADIO_RegisterRead
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _SystemBlockingWaitMs
         _RADIO_WritePower
           _RADIO_RegisterRead
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
         ___lmul
           _SwTimerReadValue (ARG)
             _SwTimersInterrupt
               _TMR_GetDeltaTime
                 _TMR1_ReadTimer
       _RADIO_WriteMode
         _HALDIO5PinValue
         _RADIO_RegisterRead
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         _RADIO_RegisterWrite
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         _SystemBlockingWaitMs
       _SwTimerSetTimeout
         ___lldiv (ARG)
       _SwTimerStart
         _SwTimersInterrupt
           _TMR_GetDeltaTime
             _TMR1_ReadTimer
         _TMR_OverrideRemaining
           _TMR_SwapTimer
             _TMR1_ReadTimer
             _TMR1_WriteTimer
       _SwTimerStop
       ___lldiv
     _SelectChannelForTransmission
       _ConfigureRadioTx
         _ConfigureRadio
           _RADIO_SetBandwidth
           _RADIO_SetChannelFrequency
           _RADIO_SetFSKSyncWord
             _memcpy
           _RADIO_SetFrequencyHopPeriod
           _RADIO_SetLoRaSyncWord
           _RADIO_SetModulation
           _RADIO_SetSpreadingFactor
         _RADIO_SetCRC
         _RADIO_SetIQInverted
         _RADIO_SetOutputPower
       _SearchAvailableChannel
         _Random
           ___lwmod
             _rand (ARG)
               ___lmul
                 _SwTimerReadValue (ARG)
                   _SwTimersInterrupt
                     _TMR_GetDeltaTime
                       _TMR1_ReadTimer
           _rand
             ___lmul
               _SwTimerReadValue (ARG)
                 _SwTimersInterrupt
                   _TMR_GetDeltaTime
                     _TMR1_ReadTimer
     _SwTimerSetTimeout
       ___lldiv (ARG)
     _SwTimerStart
       _SwTimersInterrupt
         _TMR_GetDeltaTime
           _TMR1_ReadTimer
       _TMR_OverrideRemaining
         _TMR_SwapTimer
           _TMR1_ReadTimer
           _TMR1_WriteTimer
     _UpdateJoinInProgress
   _LORAWAN_Mainloop
     _INTERRUPT_GetDioStatus
     _RADIO_DIO0
       _RADIO_FSKPacketSent
         _LORAWAN_TxDone
           _LORAWAN_EnterContinuousReceive
             _ConfigureRadioRx
               _ConfigureRadio
                 _RADIO_SetBandwidth
                 _RADIO_SetChannelFrequency
                 _RADIO_SetFSKSyncWord
                   _memcpy
                 _RADIO_SetFrequencyHopPeriod
                 _RADIO_SetLoRaSyncWord
                 _RADIO_SetModulation
                 _RADIO_SetSpreadingFactor
               _RADIO_SetCRC
               _RADIO_SetIQInverted
             _RADIO_ReceiveStart
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_WriteConfiguration
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_WriteFSKBitRate
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                 _RADIO_WriteFSKFrequencyDeviation
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                 _RADIO_WriteFrequency
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                   ___llmod
                 _RADIO_WriteMode
                   _HALDIO5PinValue
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _SystemBlockingWaitMs
                 _RADIO_WritePower
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                 ___lmul
                   _SwTimerReadValue (ARG)
                     _SwTimersInterrupt
                       _TMR_GetDeltaTime
                         _TMR1_ReadTimer
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _SystemBlockingWaitMs
               _SwTimerSetTimeout
                 ___lldiv (ARG)
               _SwTimerStart
                 _SwTimersInterrupt
                   _TMR_GetDeltaTime
                     _TMR1_ReadTimer
                 _TMR_OverrideRemaining
                   _TMR_SwapTimer
                     _TMR1_ReadTimer
                     _TMR1_WriteTimer
               ___lldiv
             _RADIO_ReceiveStop
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _SystemBlockingWaitMs
             _RADIO_ReleaseData
             _ResetParametersForConfirmedTransmission
             _ResetParametersForUnconfirmedTransmission
             _RxData *
           _RADIO_GetStatus
           _RxData *
           _SwTimerIsRunning *
           _SwTimerReadValue *
             _SwTimersInterrupt
               _TMR_GetDeltaTime
                 _TMR1_ReadTimer
           _SwTimerSetTimeout *
             ___lldiv (ARG)
           _SwTimerStart *
             _SwTimersInterrupt
               _TMR_GetDeltaTime
                 _TMR1_ReadTimer
             _TMR_OverrideRemaining
               _TMR_SwapTimer
                 _TMR1_ReadTimer
                 _TMR1_WriteTimer
           _SwTimerStop *
           ___lldiv *
           ___lmul *
             _SwTimerReadValue (ARG)
               _SwTimersInterrupt
                 _TMR_GetDeltaTime
                   _TMR1_ReadTimer
         _RADIO_RegisterRead
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         _RADIO_WriteMode
           _HALDIO5PinValue
           _RADIO_RegisterRead
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _SystemBlockingWaitMs
         _SwTimerReadValue
           _SwTimersInterrupt
             _TMR_GetDeltaTime
               _TMR1_ReadTimer
         _SwTimerStop
         ___lmul
           _SwTimerReadValue (ARG)
             _SwTimersInterrupt
               _TMR_GetDeltaTime
                 _TMR1_ReadTimer
       _RADIO_FSKPayloadReady
         _HALSPICSAssert
         _HALSPICSDeassert
         _HALSPISend
           _SPI2_Exchange8bit
         _LORAWAN_RxDone
           _AESCmac
             _AESEncodeLoRa
               _AESEncode
                 _EncKeySchedule
                 _EncodeShiftRow
               _memcpy
             _GenerateSubkey
               _AESEncodeLoRa
                 _AESEncode
                   _EncKeySchedule
                   _EncodeShiftRow
                 _memcpy
               _FillSubKey
               _memset
             _memcpy
             _memset
           _AESEncodeLoRa
             _AESEncode
               _EncKeySchedule
               _EncodeShiftRow
             _memcpy
           _AssembleEncryptionBlock
             _memcpy
             _memset
           _CheckFlags
           _CheckMcastFlags
           _ComputeMic
             _AESCmac
               _AESEncodeLoRa
                 _AESEncode
                   _EncKeySchedule
                   _EncodeShiftRow
                 _memcpy
               _GenerateSubkey
                 _AESEncodeLoRa
                   _AESEncode
                     _EncKeySchedule
                     _EncodeShiftRow
                   _memcpy
                 _FillSubKey
                 _memset
               _memcpy
               _memset
             _memcpy
           _ComputeSessionKeys
             _AESEncodeLoRa
               _AESEncode
                 _EncKeySchedule
                 _EncodeShiftRow
               _memcpy
             _PrepareSessionKeys
               _memcpy
               _memset
           _EncryptFRMPayload
             _AESEncodeLoRa
               _AESEncode
                 _EncKeySchedule
                 _EncodeShiftRow
               _memcpy
             _AssembleEncryptionBlock
               _memcpy
               _memset
             ___awdiv
               ___awmod (ARG)
           _ExtractMic
             _memcpy
           _LORAWAN_EnterContinuousReceive
             _ConfigureRadioRx
               _ConfigureRadio
                 _RADIO_SetBandwidth
                 _RADIO_SetChannelFrequency
                 _RADIO_SetFSKSyncWord
                   _memcpy
                 _RADIO_SetFrequencyHopPeriod
                 _RADIO_SetLoRaSyncWord
                 _RADIO_SetModulation
                 _RADIO_SetSpreadingFactor
               _RADIO_SetCRC
               _RADIO_SetIQInverted
             _RADIO_ReceiveStart
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_WriteConfiguration
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_WriteFSKBitRate
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                 _RADIO_WriteFSKFrequencyDeviation
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                 _RADIO_WriteFrequency
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                   ___llmod
                 _RADIO_WriteMode
                   _HALDIO5PinValue
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _SystemBlockingWaitMs
                 _RADIO_WritePower
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                 ___lmul
                   _SwTimerReadValue (ARG)
                     _SwTimersInterrupt
                       _TMR_GetDeltaTime
                         _TMR1_ReadTimer
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _SystemBlockingWaitMs
               _SwTimerSetTimeout
                 ___lldiv (ARG)
               _SwTimerStart
                 _SwTimersInterrupt
                   _TMR_GetDeltaTime
                     _TMR1_ReadTimer
                 _TMR_OverrideRemaining
                   _TMR_SwapTimer
                     _TMR1_ReadTimer
                     _TMR1_WriteTimer
               ___lldiv
             _RADIO_ReceiveStop
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _SystemBlockingWaitMs
             _RADIO_ReleaseData
             _ResetParametersForConfirmedTransmission
             _ResetParametersForUnconfirmedTransmission
             _RxData *
           _LORAWAN_Send
             _AssemblePacket
               _AESCmac
                 _AESEncodeLoRa
                   _AESEncode
                     _EncKeySchedule
                     _EncodeShiftRow
                   _memcpy
                 _GenerateSubkey
                   _AESEncodeLoRa
                     _AESEncode
                       _EncKeySchedule
                       _EncodeShiftRow
                     _memcpy
                   _FillSubKey
                   _memset
                 _memcpy
                 _memset
               _AssembleEncryptionBlock
                 _memcpy
                 _memset
               _CountfOptsLength
               _EncryptFRMPayload
                 _AESEncodeLoRa
                   _AESEncode
                     _EncKeySchedule
                     _EncodeShiftRow
                   _memcpy
                 _AssembleEncryptionBlock
                   _memcpy
                   _memset
                 ___awdiv
                   ___awmod (ARG)
               _FindSmallestDataRate
               _IncludeMacCommandsResponse
                 _RADIO_GetPacketSnr
               _memcpy
               _memset
             _LORAWAN_GetMaxPayloadSize
               _CountfOptsLength
             _RADIO_ReceiveStop
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _SystemBlockingWaitMs
             _RADIO_Transmit
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
               _RADIO_RegisterRead
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_WriteConfiguration
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_WriteFSKBitRate
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                 _RADIO_WriteFSKFrequencyDeviation
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                 _RADIO_WriteFrequency
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                   ___llmod
                 _RADIO_WriteMode
                   _HALDIO5PinValue
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _SystemBlockingWaitMs
                 _RADIO_WritePower
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                 ___lmul
                   _SwTimerReadValue (ARG)
                     _SwTimersInterrupt
                       _TMR_GetDeltaTime
                         _TMR1_ReadTimer
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _SystemBlockingWaitMs
               _SwTimerSetTimeout
                 ___lldiv (ARG)
               _SwTimerStart
                 _SwTimersInterrupt
                   _TMR_GetDeltaTime
                     _TMR1_ReadTimer
                 _TMR_OverrideRemaining
                   _TMR_SwapTimer
                     _TMR1_ReadTimer
                     _TMR1_WriteTimer
               _SwTimerStop
               ___lldiv
             _SelectChannelForTransmission
               _ConfigureRadioTx
                 _ConfigureRadio
                   _RADIO_SetBandwidth
                   _RADIO_SetChannelFrequency
                   _RADIO_SetFSKSyncWord
                     _memcpy
                   _RADIO_SetFrequencyHopPeriod
                   _RADIO_SetLoRaSyncWord
                   _RADIO_SetModulation
                   _RADIO_SetSpreadingFactor
                 _RADIO_SetCRC
                 _RADIO_SetIQInverted
                 _RADIO_SetOutputPower
               _SearchAvailableChannel
                 _Random
                   ___lwmod
                     _rand (ARG)
                       ___lmul
                         _SwTimerReadValue (ARG)
                           _SwTimersInterrupt
                             _TMR_GetDeltaTime
                               _TMR1_ReadTimer
                   _rand
                     ___lmul
                       _SwTimerReadValue (ARG)
                         _SwTimersInterrupt
                           _TMR_GetDeltaTime
                             _TMR1_ReadTimer
           _MacExecuteCommands
             _ExecuteDevStatus
             _ExecuteDutyCycle
             _ExecuteLinkAdr
               _EnableChannels
                 _EnableChannels1
                   _UpdateChannelIdStatus
               _UpdateCurrentDataRate
               _UpdateTxPower
               _ValidateChannelMask
               _ValidateChannelMaskCntl
               _ValidateDataRate
               _ValidateTxPower
             _ExecuteLinkCheck
             _ExecuteNewChannel
               _LORAWAN_SetChannelIdStatus
                 _UpdateChannelIdStatus
                 _ValidateChannelId
               _UpdateChannelIdStatus
               _UpdateDataRange
               _UpdateDutyCycle
               _UpdateFrequency
               _ValidateChannelId
               _ValidateDataRange
                 _ValidateDataRate
               _ValidateFrequency
               ___lmul
                 _SwTimerReadValue (ARG)
                   _SwTimersInterrupt
                     _TMR_GetDeltaTime
                       _TMR1_ReadTimer
             _ExecuteRxParamSetupReq
               _UpdateReceiveWindow2Parameters
               _ValidateDataRate
               _ValidateFrequency
               _ValidateRxOffset
               ___lmul
                 _SwTimerReadValue (ARG)
                   _SwTimersInterrupt
                     _TMR_GetDeltaTime
                       _TMR1_ReadTimer
             _ExecuteRxTimingSetup
               _UpdateReceiveDelays
                 ___wmul
           _RADIO_GetStatus
           _RADIO_ReleaseData
           _RxData *
           _SearchAvailableChannel *
             _Random
               ___lwmod
                 _rand (ARG)
                   ___lmul
                     _SwTimerReadValue (ARG)
                       _SwTimersInterrupt
                         _TMR_GetDeltaTime
                           _TMR1_ReadTimer
               _rand
                 ___lmul
                   _SwTimerReadValue (ARG)
                     _SwTimersInterrupt
                       _TMR_GetDeltaTime
                         _TMR1_ReadTimer
           _SetJoinFailState *
             _RxJoinResponse *
           _SetReceptionNotOkState *
             _LORAWAN_EnterContinuousReceive
               _ConfigureRadioRx
                 _ConfigureRadio
                   _RADIO_SetBandwidth
                   _RADIO_SetChannelFrequency
                   _RADIO_SetFSKSyncWord
                     _memcpy
                   _RADIO_SetFrequencyHopPeriod
                   _RADIO_SetLoRaSyncWord
                   _RADIO_SetModulation
                   _RADIO_SetSpreadingFactor
                 _RADIO_SetCRC
                 _RADIO_SetIQInverted
               _RADIO_ReceiveStart
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_WriteConfiguration
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_WriteFSKBitRate
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     ___lldiv
                   _RADIO_WriteFSKFrequencyDeviation
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     ___lldiv
                   _RADIO_WriteFrequency
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     ___lldiv
                     ___llmod
                   _RADIO_WriteMode
                     _HALDIO5PinValue
                     _RADIO_RegisterRead
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     _SystemBlockingWaitMs
                   _RADIO_WritePower
                     _RADIO_RegisterRead
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                   ___lmul
                     _SwTimerReadValue (ARG)
                       _SwTimersInterrupt
                         _TMR_GetDeltaTime
                           _TMR1_ReadTimer
                 _RADIO_WriteMode
                   _HALDIO5PinValue
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _SystemBlockingWaitMs
                 _SwTimerSetTimeout
                   ___lldiv (ARG)
                 _SwTimerStart
                   _SwTimersInterrupt
                     _TMR_GetDeltaTime
                       _TMR1_ReadTimer
                   _TMR_OverrideRemaining
                     _TMR_SwapTimer
                       _TMR1_ReadTimer
                       _TMR1_WriteTimer
                 ___lldiv
               _RADIO_ReceiveStop
                 _RADIO_WriteMode
                   _HALDIO5PinValue
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _SystemBlockingWaitMs
               _RADIO_ReleaseData
               _ResetParametersForConfirmedTransmission
               _ResetParametersForUnconfirmedTransmission
               _RxData *
             _RxData *
           _StartReTxTimer *
             _SwTimerSetTimeout
               ___lldiv (ARG)
             _SwTimerStart
               _SwTimersInterrupt
                 _TMR_GetDeltaTime
                   _TMR1_ReadTimer
               _TMR_OverrideRemaining
                 _TMR_SwapTimer
                   _TMR1_ReadTimer
                   _TMR1_WriteTimer
             ___lldiv
           _SwTimerStop *
           _UpdateCfList *
             _LORAWAN_SetChannelIdStatus
               _UpdateChannelIdStatus
               _ValidateChannelId
             _ValidateFrequency
             ___lmul
               _SwTimerReadValue (ARG)
                 _SwTimersInterrupt
                   _TMR_GetDeltaTime
                     _TMR1_ReadTimer
             ___wmul
             _memcpy
           _UpdateDLSettings *
           _UpdateJoinSuccessState *
             _RxJoinResponse *
             _SwTimerSetTimeout *
               ___lldiv (ARG)
             _SwTimerStart *
               _SwTimersInterrupt
                 _TMR_GetDeltaTime
                   _TMR1_ReadTimer
               _TMR_OverrideRemaining
                 _TMR_SwapTimer
                   _TMR1_ReadTimer
                   _TMR1_WriteTimer
             ___lldiv *
           _UpdateReceiveDelays *
             ___wmul
           _UpdateRetransmissionAckTimeoutState *
             _SwTimerSetTimeout
               ___lldiv (ARG)
             _SwTimerStart
               _SwTimersInterrupt
                 _TMR_GetDeltaTime
                   _TMR1_ReadTimer
               _TMR_OverrideRemaining
                 _TMR_SwapTimer
                   _TMR1_ReadTimer
                   _TMR1_WriteTimer
             ___lldiv
           _memcpy *
         _LORAWAN_RxTimeout
           _LORAWAN_ReceiveWindow2Callback
             _ConfigureRadioRx
               _ConfigureRadio
                 _RADIO_SetBandwidth
                 _RADIO_SetChannelFrequency
                 _RADIO_SetFSKSyncWord
                   _memcpy
                 _RADIO_SetFrequencyHopPeriod
                 _RADIO_SetLoRaSyncWord
                 _RADIO_SetModulation
                 _RADIO_SetSpreadingFactor
               _RADIO_SetCRC
               _RADIO_SetIQInverted
             _LORAWAN_EnterContinuousReceive
               _ConfigureRadioRx
                 _ConfigureRadio
                   _RADIO_SetBandwidth
                   _RADIO_SetChannelFrequency
                   _RADIO_SetFSKSyncWord
                     _memcpy
                   _RADIO_SetFrequencyHopPeriod
                   _RADIO_SetLoRaSyncWord
                   _RADIO_SetModulation
                   _RADIO_SetSpreadingFactor
                 _RADIO_SetCRC
                 _RADIO_SetIQInverted
               _RADIO_ReceiveStart
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_WriteConfiguration
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_WriteFSKBitRate
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     ___lldiv
                   _RADIO_WriteFSKFrequencyDeviation
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     ___lldiv
                   _RADIO_WriteFrequency
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     ___lldiv
                     ___llmod
                   _RADIO_WriteMode
                     _HALDIO5PinValue
                     _RADIO_RegisterRead
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     _SystemBlockingWaitMs
                   _RADIO_WritePower
                     _RADIO_RegisterRead
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                   ___lmul
                     _SwTimerReadValue (ARG)
                       _SwTimersInterrupt
                         _TMR_GetDeltaTime
                           _TMR1_ReadTimer
                 _RADIO_WriteMode
                   _HALDIO5PinValue
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _SystemBlockingWaitMs
                 _SwTimerSetTimeout
                   ___lldiv (ARG)
                 _SwTimerStart
                   _SwTimersInterrupt
                     _TMR_GetDeltaTime
                       _TMR1_ReadTimer
                   _TMR_OverrideRemaining
                     _TMR_SwapTimer
                       _TMR1_ReadTimer
                       _TMR1_WriteTimer
                 ___lldiv
               _RADIO_ReceiveStop
                 _RADIO_WriteMode
                   _HALDIO5PinValue
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _SystemBlockingWaitMs
               _RADIO_ReleaseData
               _ResetParametersForConfirmedTransmission
               _ResetParametersForUnconfirmedTransmission
               _RxData *
             _RADIO_GetStatus
             _RADIO_ReceiveStart
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_WriteConfiguration
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_WriteFSKBitRate
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                 _RADIO_WriteFSKFrequencyDeviation
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                 _RADIO_WriteFrequency
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                   ___llmod
                 _RADIO_WriteMode
                   _HALDIO5PinValue
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _SystemBlockingWaitMs
                 _RADIO_WritePower
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                 ___lmul
                   _SwTimerReadValue (ARG)
                     _SwTimersInterrupt
                       _TMR_GetDeltaTime
                         _TMR1_ReadTimer
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _SystemBlockingWaitMs
               _SwTimerSetTimeout
                 ___lldiv (ARG)
               _SwTimerStart
                 _SwTimersInterrupt
                   _TMR_GetDeltaTime
                     _TMR1_ReadTimer
                 _TMR_OverrideRemaining
                   _TMR_SwapTimer
                     _TMR1_ReadTimer
                     _TMR1_WriteTimer
               ___lldiv
             _RADIO_ReceiveStop
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _SystemBlockingWaitMs
             _RADIO_ReleaseData
             _ResetParametersForConfirmedTransmission
             _ResetParametersForUnconfirmedTransmission
             _RxData *
           _RADIO_Transmit
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
             _RADIO_RegisterRead
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _RADIO_RegisterWrite
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _RADIO_WriteConfiguration
               _RADIO_RegisterRead
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_WriteFSKBitRate
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 ___lldiv
               _RADIO_WriteFSKFrequencyDeviation
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 ___lldiv
               _RADIO_WriteFrequency
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 ___lldiv
                 ___llmod
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _SystemBlockingWaitMs
               _RADIO_WritePower
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
               ___lmul
                 _SwTimerReadValue (ARG)
                   _SwTimersInterrupt
                     _TMR_GetDeltaTime
                       _TMR1_ReadTimer
             _RADIO_WriteMode
               _HALDIO5PinValue
               _RADIO_RegisterRead
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _SystemBlockingWaitMs
             _SwTimerSetTimeout
               ___lldiv (ARG)
             _SwTimerStart
               _SwTimersInterrupt
                 _TMR_GetDeltaTime
                   _TMR1_ReadTimer
               _TMR_OverrideRemaining
                 _TMR_SwapTimer
                   _TMR1_ReadTimer
                   _TMR1_WriteTimer
             _SwTimerStop
             ___lldiv
           _ResetParametersForConfirmedTransmission
           _ResetParametersForUnconfirmedTransmission
           _RxData *
           _SelectChannelForTransmission *
             _ConfigureRadioTx
               _ConfigureRadio
                 _RADIO_SetBandwidth
                 _RADIO_SetChannelFrequency
                 _RADIO_SetFSKSyncWord
                   _memcpy
                 _RADIO_SetFrequencyHopPeriod
                 _RADIO_SetLoRaSyncWord
                 _RADIO_SetModulation
                 _RADIO_SetSpreadingFactor
               _RADIO_SetCRC
               _RADIO_SetIQInverted
               _RADIO_SetOutputPower
             _SearchAvailableChannel
               _Random
                 ___lwmod
                   _rand (ARG)
                     ___lmul
                       _SwTimerReadValue (ARG)
                         _SwTimersInterrupt
                           _TMR_GetDeltaTime
                             _TMR1_ReadTimer
                 _rand
                   ___lmul
                     _SwTimerReadValue (ARG)
                       _SwTimersInterrupt
                         _TMR_GetDeltaTime
                           _TMR1_ReadTimer
           _SetJoinFailState *
             _RxJoinResponse *
           _SwTimerSetTimeout *
             ___lldiv (ARG)
           _SwTimerStart *
             _SwTimersInterrupt
               _TMR_GetDeltaTime
                 _TMR1_ReadTimer
             _TMR_OverrideRemaining
               _TMR_SwapTimer
                 _TMR1_ReadTimer
                 _TMR1_WriteTimer
           ___lldiv *
         _RADIO_RegisterRead
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         _RADIO_WriteMode
           _HALDIO5PinValue
           _RADIO_RegisterRead
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _SystemBlockingWaitMs
         _SwTimerStop
       _RADIO_RegisterRead
         _HALSPICSAssert
         _HALSPICSDeassert
         _HALSPISend
           _SPI2_Exchange8bit
       _RADIO_RxDone
         _HALSPICSAssert
         _HALSPICSDeassert
         _HALSPISend
           _SPI2_Exchange8bit
         _LORAWAN_RxDone
           _AESCmac
             _AESEncodeLoRa
               _AESEncode
                 _EncKeySchedule
                 _EncodeShiftRow
               _memcpy
             _GenerateSubkey
               _AESEncodeLoRa
                 _AESEncode
                   _EncKeySchedule
                   _EncodeShiftRow
                 _memcpy
               _FillSubKey
               _memset
             _memcpy
             _memset
           _AESEncodeLoRa
             _AESEncode
               _EncKeySchedule
               _EncodeShiftRow
             _memcpy
           _AssembleEncryptionBlock
             _memcpy
             _memset
           _CheckFlags
           _CheckMcastFlags
           _ComputeMic
             _AESCmac
               _AESEncodeLoRa
                 _AESEncode
                   _EncKeySchedule
                   _EncodeShiftRow
                 _memcpy
               _GenerateSubkey
                 _AESEncodeLoRa
                   _AESEncode
                     _EncKeySchedule
                     _EncodeShiftRow
                   _memcpy
                 _FillSubKey
                 _memset
               _memcpy
               _memset
             _memcpy
           _ComputeSessionKeys
             _AESEncodeLoRa
               _AESEncode
                 _EncKeySchedule
                 _EncodeShiftRow
               _memcpy
             _PrepareSessionKeys
               _memcpy
               _memset
           _EncryptFRMPayload
             _AESEncodeLoRa
               _AESEncode
                 _EncKeySchedule
                 _EncodeShiftRow
               _memcpy
             _AssembleEncryptionBlock
               _memcpy
               _memset
             ___awdiv
               ___awmod (ARG)
           _ExtractMic
             _memcpy
           _LORAWAN_EnterContinuousReceive
             _ConfigureRadioRx
               _ConfigureRadio
                 _RADIO_SetBandwidth
                 _RADIO_SetChannelFrequency
                 _RADIO_SetFSKSyncWord
                   _memcpy
                 _RADIO_SetFrequencyHopPeriod
                 _RADIO_SetLoRaSyncWord
                 _RADIO_SetModulation
                 _RADIO_SetSpreadingFactor
               _RADIO_SetCRC
               _RADIO_SetIQInverted
             _RADIO_ReceiveStart
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_WriteConfiguration
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_WriteFSKBitRate
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                 _RADIO_WriteFSKFrequencyDeviation
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                 _RADIO_WriteFrequency
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                   ___llmod
                 _RADIO_WriteMode
                   _HALDIO5PinValue
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _SystemBlockingWaitMs
                 _RADIO_WritePower
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                 ___lmul
                   _SwTimerReadValue (ARG)
                     _SwTimersInterrupt
                       _TMR_GetDeltaTime
                         _TMR1_ReadTimer
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _SystemBlockingWaitMs
               _SwTimerSetTimeout
                 ___lldiv (ARG)
               _SwTimerStart
                 _SwTimersInterrupt
                   _TMR_GetDeltaTime
                     _TMR1_ReadTimer
                 _TMR_OverrideRemaining
                   _TMR_SwapTimer
                     _TMR1_ReadTimer
                     _TMR1_WriteTimer
               ___lldiv
             _RADIO_ReceiveStop
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _SystemBlockingWaitMs
             _RADIO_ReleaseData
             _ResetParametersForConfirmedTransmission
             _ResetParametersForUnconfirmedTransmission
             _RxData *
           _LORAWAN_Send
             _AssemblePacket
               _AESCmac
                 _AESEncodeLoRa
                   _AESEncode
                     _EncKeySchedule
                     _EncodeShiftRow
                   _memcpy
                 _GenerateSubkey
                   _AESEncodeLoRa
                     _AESEncode
                       _EncKeySchedule
                       _EncodeShiftRow
                     _memcpy
                   _FillSubKey
                   _memset
                 _memcpy
                 _memset
               _AssembleEncryptionBlock
                 _memcpy
                 _memset
               _CountfOptsLength
               _EncryptFRMPayload
                 _AESEncodeLoRa
                   _AESEncode
                     _EncKeySchedule
                     _EncodeShiftRow
                   _memcpy
                 _AssembleEncryptionBlock
                   _memcpy
                   _memset
                 ___awdiv
                   ___awmod (ARG)
               _FindSmallestDataRate
               _IncludeMacCommandsResponse
                 _RADIO_GetPacketSnr
               _memcpy
               _memset
             _LORAWAN_GetMaxPayloadSize
               _CountfOptsLength
             _RADIO_ReceiveStop
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _SystemBlockingWaitMs
             _RADIO_Transmit
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
               _RADIO_RegisterRead
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_WriteConfiguration
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_WriteFSKBitRate
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                 _RADIO_WriteFSKFrequencyDeviation
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                 _RADIO_WriteFrequency
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                   ___llmod
                 _RADIO_WriteMode
                   _HALDIO5PinValue
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _SystemBlockingWaitMs
                 _RADIO_WritePower
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                 ___lmul
                   _SwTimerReadValue (ARG)
                     _SwTimersInterrupt
                       _TMR_GetDeltaTime
                         _TMR1_ReadTimer
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _SystemBlockingWaitMs
               _SwTimerSetTimeout
                 ___lldiv (ARG)
               _SwTimerStart
                 _SwTimersInterrupt
                   _TMR_GetDeltaTime
                     _TMR1_ReadTimer
                 _TMR_OverrideRemaining
                   _TMR_SwapTimer
                     _TMR1_ReadTimer
                     _TMR1_WriteTimer
               _SwTimerStop
               ___lldiv
             _SelectChannelForTransmission
               _ConfigureRadioTx
                 _ConfigureRadio
                   _RADIO_SetBandwidth
                   _RADIO_SetChannelFrequency
                   _RADIO_SetFSKSyncWord
                     _memcpy
                   _RADIO_SetFrequencyHopPeriod
                   _RADIO_SetLoRaSyncWord
                   _RADIO_SetModulation
                   _RADIO_SetSpreadingFactor
                 _RADIO_SetCRC
                 _RADIO_SetIQInverted
                 _RADIO_SetOutputPower
               _SearchAvailableChannel
                 _Random
                   ___lwmod
                     _rand (ARG)
                       ___lmul
                         _SwTimerReadValue (ARG)
                           _SwTimersInterrupt
                             _TMR_GetDeltaTime
                               _TMR1_ReadTimer
                   _rand
                     ___lmul
                       _SwTimerReadValue (ARG)
                         _SwTimersInterrupt
                           _TMR_GetDeltaTime
                             _TMR1_ReadTimer
           _MacExecuteCommands
             _ExecuteDevStatus
             _ExecuteDutyCycle
             _ExecuteLinkAdr
               _EnableChannels
                 _EnableChannels1
                   _UpdateChannelIdStatus
               _UpdateCurrentDataRate
               _UpdateTxPower
               _ValidateChannelMask
               _ValidateChannelMaskCntl
               _ValidateDataRate
               _ValidateTxPower
             _ExecuteLinkCheck
             _ExecuteNewChannel
               _LORAWAN_SetChannelIdStatus
                 _UpdateChannelIdStatus
                 _ValidateChannelId
               _UpdateChannelIdStatus
               _UpdateDataRange
               _UpdateDutyCycle
               _UpdateFrequency
               _ValidateChannelId
               _ValidateDataRange
                 _ValidateDataRate
               _ValidateFrequency
               ___lmul
                 _SwTimerReadValue (ARG)
                   _SwTimersInterrupt
                     _TMR_GetDeltaTime
                       _TMR1_ReadTimer
             _ExecuteRxParamSetupReq
               _UpdateReceiveWindow2Parameters
               _ValidateDataRate
               _ValidateFrequency
               _ValidateRxOffset
               ___lmul
                 _SwTimerReadValue (ARG)
                   _SwTimersInterrupt
                     _TMR_GetDeltaTime
                       _TMR1_ReadTimer
             _ExecuteRxTimingSetup
               _UpdateReceiveDelays
                 ___wmul
           _RADIO_GetStatus
           _RADIO_ReleaseData
           _RxData *
           _SearchAvailableChannel *
             _Random
               ___lwmod
                 _rand (ARG)
                   ___lmul
                     _SwTimerReadValue (ARG)
                       _SwTimersInterrupt
                         _TMR_GetDeltaTime
                           _TMR1_ReadTimer
               _rand
                 ___lmul
                   _SwTimerReadValue (ARG)
                     _SwTimersInterrupt
                       _TMR_GetDeltaTime
                         _TMR1_ReadTimer
           _SetJoinFailState *
             _RxJoinResponse *
           _SetReceptionNotOkState *
             _LORAWAN_EnterContinuousReceive
               _ConfigureRadioRx
                 _ConfigureRadio
                   _RADIO_SetBandwidth
                   _RADIO_SetChannelFrequency
                   _RADIO_SetFSKSyncWord
                     _memcpy
                   _RADIO_SetFrequencyHopPeriod
                   _RADIO_SetLoRaSyncWord
                   _RADIO_SetModulation
                   _RADIO_SetSpreadingFactor
                 _RADIO_SetCRC
                 _RADIO_SetIQInverted
               _RADIO_ReceiveStart
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_WriteConfiguration
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_WriteFSKBitRate
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     ___lldiv
                   _RADIO_WriteFSKFrequencyDeviation
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     ___lldiv
                   _RADIO_WriteFrequency
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     ___lldiv
                     ___llmod
                   _RADIO_WriteMode
                     _HALDIO5PinValue
                     _RADIO_RegisterRead
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     _SystemBlockingWaitMs
                   _RADIO_WritePower
                     _RADIO_RegisterRead
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                   ___lmul
                     _SwTimerReadValue (ARG)
                       _SwTimersInterrupt
                         _TMR_GetDeltaTime
                           _TMR1_ReadTimer
                 _RADIO_WriteMode
                   _HALDIO5PinValue
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _SystemBlockingWaitMs
                 _SwTimerSetTimeout
                   ___lldiv (ARG)
                 _SwTimerStart
                   _SwTimersInterrupt
                     _TMR_GetDeltaTime
                       _TMR1_ReadTimer
                   _TMR_OverrideRemaining
                     _TMR_SwapTimer
                       _TMR1_ReadTimer
                       _TMR1_WriteTimer
                 ___lldiv
               _RADIO_ReceiveStop
                 _RADIO_WriteMode
                   _HALDIO5PinValue
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _SystemBlockingWaitMs
               _RADIO_ReleaseData
               _ResetParametersForConfirmedTransmission
               _ResetParametersForUnconfirmedTransmission
               _RxData *
             _RxData *
           _StartReTxTimer *
             _SwTimerSetTimeout
               ___lldiv (ARG)
             _SwTimerStart
               _SwTimersInterrupt
                 _TMR_GetDeltaTime
                   _TMR1_ReadTimer
               _TMR_OverrideRemaining
                 _TMR_SwapTimer
                   _TMR1_ReadTimer
                   _TMR1_WriteTimer
             ___lldiv
           _SwTimerStop *
           _UpdateCfList *
             _LORAWAN_SetChannelIdStatus
               _UpdateChannelIdStatus
               _ValidateChannelId
             _ValidateFrequency
             ___lmul
               _SwTimerReadValue (ARG)
                 _SwTimersInterrupt
                   _TMR_GetDeltaTime
                     _TMR1_ReadTimer
             ___wmul
             _memcpy
           _UpdateDLSettings *
           _UpdateJoinSuccessState *
             _RxJoinResponse *
             _SwTimerSetTimeout *
               ___lldiv (ARG)
             _SwTimerStart *
               _SwTimersInterrupt
                 _TMR_GetDeltaTime
                   _TMR1_ReadTimer
               _TMR_OverrideRemaining
                 _TMR_SwapTimer
                   _TMR1_ReadTimer
                   _TMR1_WriteTimer
             ___lldiv *
           _UpdateReceiveDelays *
             ___wmul
           _UpdateRetransmissionAckTimeoutState *
             _SwTimerSetTimeout
               ___lldiv (ARG)
             _SwTimerStart
               _SwTimersInterrupt
                 _TMR_GetDeltaTime
                   _TMR1_ReadTimer
               _TMR_OverrideRemaining
                 _TMR_SwapTimer
                   _TMR1_ReadTimer
                   _TMR1_WriteTimer
             ___lldiv
           _memcpy *
         _RADIO_RegisterRead
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         _RADIO_RegisterWrite
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         _RADIO_WriteMode
           _HALDIO5PinValue
           _RADIO_RegisterRead
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _SystemBlockingWaitMs
         _SwTimerStop
         ___abdiv
       _RADIO_TxDone
         _LORAWAN_TxDone
           _LORAWAN_EnterContinuousReceive
             _ConfigureRadioRx
               _ConfigureRadio
                 _RADIO_SetBandwidth
                 _RADIO_SetChannelFrequency
                 _RADIO_SetFSKSyncWord
                   _memcpy
                 _RADIO_SetFrequencyHopPeriod
                 _RADIO_SetLoRaSyncWord
                 _RADIO_SetModulation
                 _RADIO_SetSpreadingFactor
               _RADIO_SetCRC
               _RADIO_SetIQInverted
             _RADIO_ReceiveStart
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_WriteConfiguration
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_WriteFSKBitRate
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                 _RADIO_WriteFSKFrequencyDeviation
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                 _RADIO_WriteFrequency
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                   ___llmod
                 _RADIO_WriteMode
                   _HALDIO5PinValue
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _SystemBlockingWaitMs
                 _RADIO_WritePower
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                 ___lmul
                   _SwTimerReadValue (ARG)
                     _SwTimersInterrupt
                       _TMR_GetDeltaTime
                         _TMR1_ReadTimer
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _SystemBlockingWaitMs
               _SwTimerSetTimeout
                 ___lldiv (ARG)
               _SwTimerStart
                 _SwTimersInterrupt
                   _TMR_GetDeltaTime
                     _TMR1_ReadTimer
                 _TMR_OverrideRemaining
                   _TMR_SwapTimer
                     _TMR1_ReadTimer
                     _TMR1_WriteTimer
               ___lldiv
             _RADIO_ReceiveStop
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _SystemBlockingWaitMs
             _RADIO_ReleaseData
             _ResetParametersForConfirmedTransmission
             _ResetParametersForUnconfirmedTransmission
             _RxData *
           _RADIO_GetStatus
           _RxData *
           _SwTimerIsRunning *
           _SwTimerReadValue *
             _SwTimersInterrupt
               _TMR_GetDeltaTime
                 _TMR1_ReadTimer
           _SwTimerSetTimeout *
             ___lldiv (ARG)
           _SwTimerStart *
             _SwTimersInterrupt
               _TMR_GetDeltaTime
                 _TMR1_ReadTimer
             _TMR_OverrideRemaining
               _TMR_SwapTimer
                 _TMR1_ReadTimer
                 _TMR1_WriteTimer
           _SwTimerStop *
           ___lldiv *
           ___lmul *
             _SwTimerReadValue (ARG)
               _SwTimersInterrupt
                 _TMR_GetDeltaTime
                   _TMR1_ReadTimer
         _RADIO_RegisterWrite
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         _RADIO_WriteMode
           _HALDIO5PinValue
           _RADIO_RegisterRead
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _SystemBlockingWaitMs
         _SwTimerReadValue
           _SwTimersInterrupt
             _TMR_GetDeltaTime
               _TMR1_ReadTimer
         _SwTimerStop
         ___lmul
           _SwTimerReadValue (ARG)
             _SwTimersInterrupt
               _TMR_GetDeltaTime
                 _TMR1_ReadTimer
       _RADIO_UnhandledInterrupt
         _RADIO_RegisterWrite
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
     _RADIO_DIO1
       _RADIO_FHSSChangeChannel
         _RADIO_RegisterRead
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         _RADIO_RegisterWrite
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         _RADIO_WriteFrequency
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           ___lldiv
           ___llmod
       _RADIO_RegisterRead
         _HALSPICSAssert
         _HALSPICSDeassert
         _HALSPISend
           _SPI2_Exchange8bit
       _RADIO_RxTimeout
         _LORAWAN_RxTimeout
           _LORAWAN_ReceiveWindow2Callback
             _ConfigureRadioRx
               _ConfigureRadio
                 _RADIO_SetBandwidth
                 _RADIO_SetChannelFrequency
                 _RADIO_SetFSKSyncWord
                   _memcpy
                 _RADIO_SetFrequencyHopPeriod
                 _RADIO_SetLoRaSyncWord
                 _RADIO_SetModulation
                 _RADIO_SetSpreadingFactor
               _RADIO_SetCRC
               _RADIO_SetIQInverted
             _LORAWAN_EnterContinuousReceive
               _ConfigureRadioRx
                 _ConfigureRadio
                   _RADIO_SetBandwidth
                   _RADIO_SetChannelFrequency
                   _RADIO_SetFSKSyncWord
                     _memcpy
                   _RADIO_SetFrequencyHopPeriod
                   _RADIO_SetLoRaSyncWord
                   _RADIO_SetModulation
                   _RADIO_SetSpreadingFactor
                 _RADIO_SetCRC
                 _RADIO_SetIQInverted
               _RADIO_ReceiveStart
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_WriteConfiguration
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_WriteFSKBitRate
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     ___lldiv
                   _RADIO_WriteFSKFrequencyDeviation
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     ___lldiv
                   _RADIO_WriteFrequency
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     ___lldiv
                     ___llmod
                   _RADIO_WriteMode
                     _HALDIO5PinValue
                     _RADIO_RegisterRead
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     _SystemBlockingWaitMs
                   _RADIO_WritePower
                     _RADIO_RegisterRead
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                   ___lmul
                     _SwTimerReadValue (ARG)
                       _SwTimersInterrupt
                         _TMR_GetDeltaTime
                           _TMR1_ReadTimer
                 _RADIO_WriteMode
                   _HALDIO5PinValue
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _SystemBlockingWaitMs
                 _SwTimerSetTimeout
                   ___lldiv (ARG)
                 _SwTimerStart
                   _SwTimersInterrupt
                     _TMR_GetDeltaTime
                       _TMR1_ReadTimer
                   _TMR_OverrideRemaining
                     _TMR_SwapTimer
                       _TMR1_ReadTimer
                       _TMR1_WriteTimer
                 ___lldiv
               _RADIO_ReceiveStop
                 _RADIO_WriteMode
                   _HALDIO5PinValue
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _SystemBlockingWaitMs
               _RADIO_ReleaseData
               _ResetParametersForConfirmedTransmission
               _ResetParametersForUnconfirmedTransmission
               _RxData *
             _RADIO_GetStatus
             _RADIO_ReceiveStart
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_WriteConfiguration
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_WriteFSKBitRate
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                 _RADIO_WriteFSKFrequencyDeviation
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                 _RADIO_WriteFrequency
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                   ___llmod
                 _RADIO_WriteMode
                   _HALDIO5PinValue
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _SystemBlockingWaitMs
                 _RADIO_WritePower
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                 ___lmul
                   _SwTimerReadValue (ARG)
                     _SwTimersInterrupt
                       _TMR_GetDeltaTime
                         _TMR1_ReadTimer
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _SystemBlockingWaitMs
               _SwTimerSetTimeout
                 ___lldiv (ARG)
               _SwTimerStart
                 _SwTimersInterrupt
                   _TMR_GetDeltaTime
                     _TMR1_ReadTimer
                 _TMR_OverrideRemaining
                   _TMR_SwapTimer
                     _TMR1_ReadTimer
                     _TMR1_WriteTimer
               ___lldiv
             _RADIO_ReceiveStop
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _SystemBlockingWaitMs
             _RADIO_ReleaseData
             _ResetParametersForConfirmedTransmission
             _ResetParametersForUnconfirmedTransmission
             _RxData *
           _RADIO_Transmit
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
             _RADIO_RegisterRead
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _RADIO_RegisterWrite
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _RADIO_WriteConfiguration
               _RADIO_RegisterRead
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_WriteFSKBitRate
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 ___lldiv
               _RADIO_WriteFSKFrequencyDeviation
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 ___lldiv
               _RADIO_WriteFrequency
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 ___lldiv
                 ___llmod
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _SystemBlockingWaitMs
               _RADIO_WritePower
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
               ___lmul
                 _SwTimerReadValue (ARG)
                   _SwTimersInterrupt
                     _TMR_GetDeltaTime
                       _TMR1_ReadTimer
             _RADIO_WriteMode
               _HALDIO5PinValue
               _RADIO_RegisterRead
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _SystemBlockingWaitMs
             _SwTimerSetTimeout
               ___lldiv (ARG)
             _SwTimerStart
               _SwTimersInterrupt
                 _TMR_GetDeltaTime
                   _TMR1_ReadTimer
               _TMR_OverrideRemaining
                 _TMR_SwapTimer
                   _TMR1_ReadTimer
                   _TMR1_WriteTimer
             _SwTimerStop
             ___lldiv
           _ResetParametersForConfirmedTransmission
           _ResetParametersForUnconfirmedTransmission
           _RxData *
           _SelectChannelForTransmission *
             _ConfigureRadioTx
               _ConfigureRadio
                 _RADIO_SetBandwidth
                 _RADIO_SetChannelFrequency
                 _RADIO_SetFSKSyncWord
                   _memcpy
                 _RADIO_SetFrequencyHopPeriod
                 _RADIO_SetLoRaSyncWord
                 _RADIO_SetModulation
                 _RADIO_SetSpreadingFactor
               _RADIO_SetCRC
               _RADIO_SetIQInverted
               _RADIO_SetOutputPower
             _SearchAvailableChannel
               _Random
                 ___lwmod
                   _rand (ARG)
                     ___lmul
                       _SwTimerReadValue (ARG)
                         _SwTimersInterrupt
                           _TMR_GetDeltaTime
                             _TMR1_ReadTimer
                 _rand
                   ___lmul
                     _SwTimerReadValue (ARG)
                       _SwTimersInterrupt
                         _TMR_GetDeltaTime
                           _TMR1_ReadTimer
           _SetJoinFailState *
             _RxJoinResponse *
           _SwTimerSetTimeout *
             ___lldiv (ARG)
           _SwTimerStart *
             _SwTimersInterrupt
               _TMR_GetDeltaTime
                 _TMR1_ReadTimer
             _TMR_OverrideRemaining
               _TMR_SwapTimer
                 _TMR1_ReadTimer
                 _TMR1_WriteTimer
           ___lldiv *
         _RADIO_RegisterWrite
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         _RADIO_WriteMode
           _HALDIO5PinValue
           _RADIO_RegisterRead
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _SystemBlockingWaitMs
         _SwTimerStop
       _RADIO_UnhandledInterrupt
         _RADIO_RegisterWrite
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
     _RADIO_DIO2
       _RADIO_FHSSChangeChannel
         _RADIO_RegisterRead
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         _RADIO_RegisterWrite
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         _RADIO_WriteFrequency
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           ___lldiv
           ___llmod
       _RADIO_RegisterRead
         _HALSPICSAssert
         _HALSPICSDeassert
         _HALSPISend
           _SPI2_Exchange8bit
       _RADIO_UnhandledInterrupt
         _RADIO_RegisterWrite
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
     _RADIO_DIO3
       _RADIO_RegisterRead
         _HALSPICSAssert
         _HALSPICSDeassert
         _HALSPISend
           _SPI2_Exchange8bit
       _RADIO_UnhandledInterrupt
         _RADIO_RegisterWrite
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
     _RADIO_DIO4
       _RADIO_RegisterRead
         _HALSPICSAssert
         _HALSPICSDeassert
         _HALSPISend
           _SPI2_Exchange8bit
       _RADIO_UnhandledInterrupt
         _RADIO_RegisterWrite
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
     _RADIO_DIO5
       _RADIO_RegisterRead
         _HALSPICSAssert
         _HALSPICSDeassert
         _HALSPISend
           _SPI2_Exchange8bit
       _RADIO_UnhandledInterrupt
         _RADIO_RegisterWrite
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
     _SwTimersExecute
       Absolute function(Fake) *
       _AckRetransmissionCallback *
         _FindSmallestDataRate
         _LORAWAN_GetMaxPayloadSize
           _CountfOptsLength
         _RADIO_Transmit
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
           _RADIO_RegisterRead
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _RADIO_WriteConfiguration
             _RADIO_RegisterRead
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _RADIO_RegisterWrite
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _RADIO_WriteFSKBitRate
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               ___lldiv
             _RADIO_WriteFSKFrequencyDeviation
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               ___lldiv
             _RADIO_WriteFrequency
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               ___lldiv
               ___llmod
             _RADIO_WriteMode
               _HALDIO5PinValue
               _RADIO_RegisterRead
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _SystemBlockingWaitMs
             _RADIO_WritePower
               _RADIO_RegisterRead
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
             ___lmul
               _SwTimerReadValue (ARG)
                 _SwTimersInterrupt
                   _TMR_GetDeltaTime
                     _TMR1_ReadTimer
           _RADIO_WriteMode
             _HALDIO5PinValue
             _RADIO_RegisterRead
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _RADIO_RegisterWrite
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _SystemBlockingWaitMs
           _SwTimerSetTimeout
             ___lldiv (ARG)
           _SwTimerStart
             _SwTimersInterrupt
               _TMR_GetDeltaTime
                 _TMR1_ReadTimer
             _TMR_OverrideRemaining
               _TMR_SwapTimer
                 _TMR1_ReadTimer
                 _TMR1_WriteTimer
           _SwTimerStop
           ___lldiv
         _ResetParametersForConfirmedTransmission
         _RxData *
         _SelectChannelForTransmission *
           _ConfigureRadioTx
             _ConfigureRadio
               _RADIO_SetBandwidth
               _RADIO_SetChannelFrequency
               _RADIO_SetFSKSyncWord
                 _memcpy
               _RADIO_SetFrequencyHopPeriod
               _RADIO_SetLoRaSyncWord
               _RADIO_SetModulation
               _RADIO_SetSpreadingFactor
             _RADIO_SetCRC
             _RADIO_SetIQInverted
             _RADIO_SetOutputPower
           _SearchAvailableChannel
             _Random
               ___lwmod
                 _rand (ARG)
                   ___lmul
                     _SwTimerReadValue (ARG)
                       _SwTimersInterrupt
                         _TMR_GetDeltaTime
                           _TMR1_ReadTimer
               _rand
                 ___lmul
                   _SwTimerReadValue (ARG)
                     _SwTimersInterrupt
                       _TMR_GetDeltaTime
                         _TMR1_ReadTimer
         _UpdateRetransmissionAckTimeoutState *
           _SwTimerSetTimeout
             ___lldiv (ARG)
           _SwTimerStart
             _SwTimersInterrupt
               _TMR_GetDeltaTime
                 _TMR1_ReadTimer
             _TMR_OverrideRemaining
               _TMR_SwapTimer
                 _TMR1_ReadTimer
                 _TMR1_WriteTimer
           ___lldiv
       _AutomaticReplyCallback *
         _LORAWAN_Send
           _AssemblePacket
             _AESCmac
               _AESEncodeLoRa
                 _AESEncode
                   _EncKeySchedule
                   _EncodeShiftRow
                 _memcpy
               _GenerateSubkey
                 _AESEncodeLoRa
                   _AESEncode
                     _EncKeySchedule
                     _EncodeShiftRow
                   _memcpy
                 _FillSubKey
                 _memset
               _memcpy
               _memset
             _AssembleEncryptionBlock
               _memcpy
               _memset
             _CountfOptsLength
             _EncryptFRMPayload
               _AESEncodeLoRa
                 _AESEncode
                   _EncKeySchedule
                   _EncodeShiftRow
                 _memcpy
               _AssembleEncryptionBlock
                 _memcpy
                 _memset
               ___awdiv
                 ___awmod (ARG)
             _FindSmallestDataRate
             _IncludeMacCommandsResponse
               _RADIO_GetPacketSnr
             _memcpy
             _memset
           _LORAWAN_GetMaxPayloadSize
             _CountfOptsLength
           _RADIO_ReceiveStop
             _RADIO_WriteMode
               _HALDIO5PinValue
               _RADIO_RegisterRead
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _SystemBlockingWaitMs
           _RADIO_Transmit
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
             _RADIO_RegisterRead
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _RADIO_RegisterWrite
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _RADIO_WriteConfiguration
               _RADIO_RegisterRead
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_WriteFSKBitRate
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 ___lldiv
               _RADIO_WriteFSKFrequencyDeviation
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 ___lldiv
               _RADIO_WriteFrequency
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 ___lldiv
                 ___llmod
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _SystemBlockingWaitMs
               _RADIO_WritePower
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
               ___lmul
                 _SwTimerReadValue (ARG)
                   _SwTimersInterrupt
                     _TMR_GetDeltaTime
                       _TMR1_ReadTimer
             _RADIO_WriteMode
               _HALDIO5PinValue
               _RADIO_RegisterRead
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _SystemBlockingWaitMs
             _SwTimerSetTimeout
               ___lldiv (ARG)
             _SwTimerStart
               _SwTimersInterrupt
                 _TMR_GetDeltaTime
                   _TMR1_ReadTimer
               _TMR_OverrideRemaining
                 _TMR_SwapTimer
                   _TMR1_ReadTimer
                   _TMR1_WriteTimer
             _SwTimerStop
             ___lldiv
           _SelectChannelForTransmission
             _ConfigureRadioTx
               _ConfigureRadio
                 _RADIO_SetBandwidth
                 _RADIO_SetChannelFrequency
                 _RADIO_SetFSKSyncWord
                   _memcpy
                 _RADIO_SetFrequencyHopPeriod
                 _RADIO_SetLoRaSyncWord
                 _RADIO_SetModulation
                 _RADIO_SetSpreadingFactor
               _RADIO_SetCRC
               _RADIO_SetIQInverted
               _RADIO_SetOutputPower
             _SearchAvailableChannel
               _Random
                 ___lwmod
                   _rand (ARG)
                     ___lmul
                       _SwTimerReadValue (ARG)
                         _SwTimersInterrupt
                           _TMR_GetDeltaTime
                             _TMR1_ReadTimer
                 _rand
                   ___lmul
                     _SwTimerReadValue (ARG)
                       _SwTimersInterrupt
                         _TMR_GetDeltaTime
                           _TMR1_ReadTimer
       _DutyCycleCallback *
         _SwTimerSetTimeout
           ___lldiv (ARG)
         _SwTimerStart
           _SwTimersInterrupt
             _TMR_GetDeltaTime
               _TMR1_ReadTimer
           _TMR_OverrideRemaining
             _TMR_SwapTimer
               _TMR1_ReadTimer
               _TMR1_WriteTimer
         ___lldiv
       _LORAWAN_LinkCheckCallback *
         _SwTimerSetTimeout
           ___lldiv (ARG)
         _SwTimerStart
           _SwTimersInterrupt
             _TMR_GetDeltaTime
               _TMR1_ReadTimer
           _TMR_OverrideRemaining
             _TMR_SwapTimer
               _TMR1_ReadTimer
               _TMR1_WriteTimer
         ___lldiv
       _LORAWAN_ReceiveWindow1Callback *
         _ConfigureRadioRx
           _ConfigureRadio
             _RADIO_SetBandwidth
             _RADIO_SetChannelFrequency
             _RADIO_SetFSKSyncWord
               _memcpy
             _RADIO_SetFrequencyHopPeriod
             _RADIO_SetLoRaSyncWord
             _RADIO_SetModulation
             _RADIO_SetSpreadingFactor
           _RADIO_SetCRC
           _RADIO_SetIQInverted
         _GetRx1Freq
         _RADIO_ReceiveStart
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _RADIO_WriteConfiguration
             _RADIO_RegisterRead
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _RADIO_RegisterWrite
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _RADIO_WriteFSKBitRate
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               ___lldiv
             _RADIO_WriteFSKFrequencyDeviation
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               ___lldiv
             _RADIO_WriteFrequency
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               ___lldiv
               ___llmod
             _RADIO_WriteMode
               _HALDIO5PinValue
               _RADIO_RegisterRead
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _SystemBlockingWaitMs
             _RADIO_WritePower
               _RADIO_RegisterRead
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
             ___lmul
               _SwTimerReadValue (ARG)
                 _SwTimersInterrupt
                   _TMR_GetDeltaTime
                     _TMR1_ReadTimer
           _RADIO_WriteMode
             _HALDIO5PinValue
             _RADIO_RegisterRead
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _RADIO_RegisterWrite
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _SystemBlockingWaitMs
           _SwTimerSetTimeout
             ___lldiv (ARG)
           _SwTimerStart
             _SwTimersInterrupt
               _TMR_GetDeltaTime
                 _TMR1_ReadTimer
             _TMR_OverrideRemaining
               _TMR_SwapTimer
                 _TMR1_ReadTimer
                 _TMR1_WriteTimer
           ___lldiv
         _RADIO_ReceiveStop
           _RADIO_WriteMode
             _HALDIO5PinValue
             _RADIO_RegisterRead
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _RADIO_RegisterWrite
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _SystemBlockingWaitMs
         _RADIO_ReleaseData
       _LORAWAN_ReceiveWindow2Callback *
         _ConfigureRadioRx
           _ConfigureRadio
             _RADIO_SetBandwidth
             _RADIO_SetChannelFrequency
             _RADIO_SetFSKSyncWord
               _memcpy
             _RADIO_SetFrequencyHopPeriod
             _RADIO_SetLoRaSyncWord
             _RADIO_SetModulation
             _RADIO_SetSpreadingFactor
           _RADIO_SetCRC
           _RADIO_SetIQInverted
         _LORAWAN_EnterContinuousReceive
           _ConfigureRadioRx
             _ConfigureRadio
               _RADIO_SetBandwidth
               _RADIO_SetChannelFrequency
               _RADIO_SetFSKSyncWord
                 _memcpy
               _RADIO_SetFrequencyHopPeriod
               _RADIO_SetLoRaSyncWord
               _RADIO_SetModulation
               _RADIO_SetSpreadingFactor
             _RADIO_SetCRC
             _RADIO_SetIQInverted
           _RADIO_ReceiveStart
             _RADIO_RegisterWrite
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _RADIO_WriteConfiguration
               _RADIO_RegisterRead
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_WriteFSKBitRate
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 ___lldiv
               _RADIO_WriteFSKFrequencyDeviation
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 ___lldiv
               _RADIO_WriteFrequency
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 ___lldiv
                 ___llmod
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _SystemBlockingWaitMs
               _RADIO_WritePower
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
               ___lmul
                 _SwTimerReadValue (ARG)
                   _SwTimersInterrupt
                     _TMR_GetDeltaTime
                       _TMR1_ReadTimer
             _RADIO_WriteMode
               _HALDIO5PinValue
               _RADIO_RegisterRead
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _SystemBlockingWaitMs
             _SwTimerSetTimeout
               ___lldiv (ARG)
             _SwTimerStart
               _SwTimersInterrupt
                 _TMR_GetDeltaTime
                   _TMR1_ReadTimer
               _TMR_OverrideRemaining
                 _TMR_SwapTimer
                   _TMR1_ReadTimer
                   _TMR1_WriteTimer
             ___lldiv
           _RADIO_ReceiveStop
             _RADIO_WriteMode
               _HALDIO5PinValue
               _RADIO_RegisterRead
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _SystemBlockingWaitMs
           _RADIO_ReleaseData
           _ResetParametersForConfirmedTransmission
           _ResetParametersForUnconfirmedTransmission
           _RxData *
         _RADIO_GetStatus
         _RADIO_ReceiveStart
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _RADIO_WriteConfiguration
             _RADIO_RegisterRead
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _RADIO_RegisterWrite
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _RADIO_WriteFSKBitRate
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               ___lldiv
             _RADIO_WriteFSKFrequencyDeviation
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               ___lldiv
             _RADIO_WriteFrequency
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               ___lldiv
               ___llmod
             _RADIO_WriteMode
               _HALDIO5PinValue
               _RADIO_RegisterRead
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _SystemBlockingWaitMs
             _RADIO_WritePower
               _RADIO_RegisterRead
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
             ___lmul
               _SwTimerReadValue (ARG)
                 _SwTimersInterrupt
                   _TMR_GetDeltaTime
                     _TMR1_ReadTimer
           _RADIO_WriteMode
             _HALDIO5PinValue
             _RADIO_RegisterRead
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _RADIO_RegisterWrite
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _SystemBlockingWaitMs
           _SwTimerSetTimeout
             ___lldiv (ARG)
           _SwTimerStart
             _SwTimersInterrupt
               _TMR_GetDeltaTime
                 _TMR1_ReadTimer
             _TMR_OverrideRemaining
               _TMR_SwapTimer
                 _TMR1_ReadTimer
                 _TMR1_WriteTimer
           ___lldiv
         _RADIO_ReceiveStop
           _RADIO_WriteMode
             _HALDIO5PinValue
             _RADIO_RegisterRead
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _RADIO_RegisterWrite
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _SystemBlockingWaitMs
         _RADIO_ReleaseData
         _ResetParametersForConfirmedTransmission
         _ResetParametersForUnconfirmedTransmission
         _RxData *
       _RADIO_RxFSKTimeout *
         _LORAWAN_RxTimeout
           _LORAWAN_ReceiveWindow2Callback
             _ConfigureRadioRx
               _ConfigureRadio
                 _RADIO_SetBandwidth
                 _RADIO_SetChannelFrequency
                 _RADIO_SetFSKSyncWord
                   _memcpy
                 _RADIO_SetFrequencyHopPeriod
                 _RADIO_SetLoRaSyncWord
                 _RADIO_SetModulation
                 _RADIO_SetSpreadingFactor
               _RADIO_SetCRC
               _RADIO_SetIQInverted
             _LORAWAN_EnterContinuousReceive
               _ConfigureRadioRx
                 _ConfigureRadio
                   _RADIO_SetBandwidth
                   _RADIO_SetChannelFrequency
                   _RADIO_SetFSKSyncWord
                     _memcpy
                   _RADIO_SetFrequencyHopPeriod
                   _RADIO_SetLoRaSyncWord
                   _RADIO_SetModulation
                   _RADIO_SetSpreadingFactor
                 _RADIO_SetCRC
                 _RADIO_SetIQInverted
               _RADIO_ReceiveStart
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_WriteConfiguration
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_WriteFSKBitRate
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     ___lldiv
                   _RADIO_WriteFSKFrequencyDeviation
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     ___lldiv
                   _RADIO_WriteFrequency
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     ___lldiv
                     ___llmod
                   _RADIO_WriteMode
                     _HALDIO5PinValue
                     _RADIO_RegisterRead
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     _SystemBlockingWaitMs
                   _RADIO_WritePower
                     _RADIO_RegisterRead
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                   ___lmul
                     _SwTimerReadValue (ARG)
                       _SwTimersInterrupt
                         _TMR_GetDeltaTime
                           _TMR1_ReadTimer
                 _RADIO_WriteMode
                   _HALDIO5PinValue
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _SystemBlockingWaitMs
                 _SwTimerSetTimeout
                   ___lldiv (ARG)
                 _SwTimerStart
                   _SwTimersInterrupt
                     _TMR_GetDeltaTime
                       _TMR1_ReadTimer
                   _TMR_OverrideRemaining
                     _TMR_SwapTimer
                       _TMR1_ReadTimer
                       _TMR1_WriteTimer
                 ___lldiv
               _RADIO_ReceiveStop
                 _RADIO_WriteMode
                   _HALDIO5PinValue
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _SystemBlockingWaitMs
               _RADIO_ReleaseData
               _ResetParametersForConfirmedTransmission
               _ResetParametersForUnconfirmedTransmission
               _RxData *
             _RADIO_GetStatus
             _RADIO_ReceiveStart
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_WriteConfiguration
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_WriteFSKBitRate
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                 _RADIO_WriteFSKFrequencyDeviation
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                 _RADIO_WriteFrequency
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                   ___llmod
                 _RADIO_WriteMode
                   _HALDIO5PinValue
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _SystemBlockingWaitMs
                 _RADIO_WritePower
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                 ___lmul
                   _SwTimerReadValue (ARG)
                     _SwTimersInterrupt
                       _TMR_GetDeltaTime
                         _TMR1_ReadTimer
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _SystemBlockingWaitMs
               _SwTimerSetTimeout
                 ___lldiv (ARG)
               _SwTimerStart
                 _SwTimersInterrupt
                   _TMR_GetDeltaTime
                     _TMR1_ReadTimer
                 _TMR_OverrideRemaining
                   _TMR_SwapTimer
                     _TMR1_ReadTimer
                     _TMR1_WriteTimer
               ___lldiv
             _RADIO_ReceiveStop
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _SystemBlockingWaitMs
             _RADIO_ReleaseData
             _ResetParametersForConfirmedTransmission
             _ResetParametersForUnconfirmedTransmission
             _RxData *
           _RADIO_Transmit
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
             _RADIO_RegisterRead
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _RADIO_RegisterWrite
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _RADIO_WriteConfiguration
               _RADIO_RegisterRead
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_WriteFSKBitRate
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 ___lldiv
               _RADIO_WriteFSKFrequencyDeviation
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 ___lldiv
               _RADIO_WriteFrequency
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 ___lldiv
                 ___llmod
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _SystemBlockingWaitMs
               _RADIO_WritePower
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
               ___lmul
                 _SwTimerReadValue (ARG)
                   _SwTimersInterrupt
                     _TMR_GetDeltaTime
                       _TMR1_ReadTimer
             _RADIO_WriteMode
               _HALDIO5PinValue
               _RADIO_RegisterRead
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _SystemBlockingWaitMs
             _SwTimerSetTimeout
               ___lldiv (ARG)
             _SwTimerStart
               _SwTimersInterrupt
                 _TMR_GetDeltaTime
                   _TMR1_ReadTimer
               _TMR_OverrideRemaining
                 _TMR_SwapTimer
                   _TMR1_ReadTimer
                   _TMR1_WriteTimer
             _SwTimerStop
             ___lldiv
           _ResetParametersForConfirmedTransmission
           _ResetParametersForUnconfirmedTransmission
           _RxData *
           _SelectChannelForTransmission *
             _ConfigureRadioTx
               _ConfigureRadio
                 _RADIO_SetBandwidth
                 _RADIO_SetChannelFrequency
                 _RADIO_SetFSKSyncWord
                   _memcpy
                 _RADIO_SetFrequencyHopPeriod
                 _RADIO_SetLoRaSyncWord
                 _RADIO_SetModulation
                 _RADIO_SetSpreadingFactor
               _RADIO_SetCRC
               _RADIO_SetIQInverted
               _RADIO_SetOutputPower
             _SearchAvailableChannel
               _Random
                 ___lwmod
                   _rand (ARG)
                     ___lmul
                       _SwTimerReadValue (ARG)
                         _SwTimersInterrupt
                           _TMR_GetDeltaTime
                             _TMR1_ReadTimer
                 _rand
                   ___lmul
                     _SwTimerReadValue (ARG)
                       _SwTimersInterrupt
                         _TMR_GetDeltaTime
                           _TMR1_ReadTimer
           _SetJoinFailState *
             _RxJoinResponse *
           _SwTimerSetTimeout *
             ___lldiv (ARG)
           _SwTimerStart *
             _SwTimersInterrupt
               _TMR_GetDeltaTime
                 _TMR1_ReadTimer
             _TMR_OverrideRemaining
               _TMR_SwapTimer
                 _TMR1_ReadTimer
                 _TMR1_WriteTimer
           ___lldiv *
         _RADIO_RegisterRead
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         _RADIO_WriteMode
           _HALDIO5PinValue
           _RADIO_RegisterRead
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _SystemBlockingWaitMs
         _SwTimerStop
       _RADIO_WatchdogTimeout *
         _LORAWAN_RxTimeout
           _LORAWAN_ReceiveWindow2Callback
             _ConfigureRadioRx
               _ConfigureRadio
                 _RADIO_SetBandwidth
                 _RADIO_SetChannelFrequency
                 _RADIO_SetFSKSyncWord
                   _memcpy
                 _RADIO_SetFrequencyHopPeriod
                 _RADIO_SetLoRaSyncWord
                 _RADIO_SetModulation
                 _RADIO_SetSpreadingFactor
               _RADIO_SetCRC
               _RADIO_SetIQInverted
             _LORAWAN_EnterContinuousReceive
               _ConfigureRadioRx
                 _ConfigureRadio
                   _RADIO_SetBandwidth
                   _RADIO_SetChannelFrequency
                   _RADIO_SetFSKSyncWord
                     _memcpy
                   _RADIO_SetFrequencyHopPeriod
                   _RADIO_SetLoRaSyncWord
                   _RADIO_SetModulation
                   _RADIO_SetSpreadingFactor
                 _RADIO_SetCRC
                 _RADIO_SetIQInverted
               _RADIO_ReceiveStart
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_WriteConfiguration
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_WriteFSKBitRate
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     ___lldiv
                   _RADIO_WriteFSKFrequencyDeviation
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     ___lldiv
                   _RADIO_WriteFrequency
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     ___lldiv
                     ___llmod
                   _RADIO_WriteMode
                     _HALDIO5PinValue
                     _RADIO_RegisterRead
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     _SystemBlockingWaitMs
                   _RADIO_WritePower
                     _RADIO_RegisterRead
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                   ___lmul
                     _SwTimerReadValue (ARG)
                       _SwTimersInterrupt
                         _TMR_GetDeltaTime
                           _TMR1_ReadTimer
                 _RADIO_WriteMode
                   _HALDIO5PinValue
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _SystemBlockingWaitMs
                 _SwTimerSetTimeout
                   ___lldiv (ARG)
                 _SwTimerStart
                   _SwTimersInterrupt
                     _TMR_GetDeltaTime
                       _TMR1_ReadTimer
                   _TMR_OverrideRemaining
                     _TMR_SwapTimer
                       _TMR1_ReadTimer
                       _TMR1_WriteTimer
                 ___lldiv
               _RADIO_ReceiveStop
                 _RADIO_WriteMode
                   _HALDIO5PinValue
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _SystemBlockingWaitMs
               _RADIO_ReleaseData
               _ResetParametersForConfirmedTransmission
               _ResetParametersForUnconfirmedTransmission
               _RxData *
             _RADIO_GetStatus
             _RADIO_ReceiveStart
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_WriteConfiguration
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_WriteFSKBitRate
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                 _RADIO_WriteFSKFrequencyDeviation
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                 _RADIO_WriteFrequency
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                   ___llmod
                 _RADIO_WriteMode
                   _HALDIO5PinValue
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _SystemBlockingWaitMs
                 _RADIO_WritePower
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                 ___lmul
                   _SwTimerReadValue (ARG)
                     _SwTimersInterrupt
                       _TMR_GetDeltaTime
                         _TMR1_ReadTimer
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _SystemBlockingWaitMs
               _SwTimerSetTimeout
                 ___lldiv (ARG)
               _SwTimerStart
                 _SwTimersInterrupt
                   _TMR_GetDeltaTime
                     _TMR1_ReadTimer
                 _TMR_OverrideRemaining
                   _TMR_SwapTimer
                     _TMR1_ReadTimer
                     _TMR1_WriteTimer
               ___lldiv
             _RADIO_ReceiveStop
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _SystemBlockingWaitMs
             _RADIO_ReleaseData
             _ResetParametersForConfirmedTransmission
             _ResetParametersForUnconfirmedTransmission
             _RxData *
           _RADIO_Transmit
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
             _RADIO_RegisterRead
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _RADIO_RegisterWrite
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _RADIO_WriteConfiguration
               _RADIO_RegisterRead
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_WriteFSKBitRate
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 ___lldiv
               _RADIO_WriteFSKFrequencyDeviation
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 ___lldiv
               _RADIO_WriteFrequency
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 ___lldiv
                 ___llmod
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _SystemBlockingWaitMs
               _RADIO_WritePower
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
               ___lmul
                 _SwTimerReadValue (ARG)
                   _SwTimersInterrupt
                     _TMR_GetDeltaTime
                       _TMR1_ReadTimer
             _RADIO_WriteMode
               _HALDIO5PinValue
               _RADIO_RegisterRead
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _SystemBlockingWaitMs
             _SwTimerSetTimeout
               ___lldiv (ARG)
             _SwTimerStart
               _SwTimersInterrupt
                 _TMR_GetDeltaTime
                   _TMR1_ReadTimer
               _TMR_OverrideRemaining
                 _TMR_SwapTimer
                   _TMR1_ReadTimer
                   _TMR1_WriteTimer
             _SwTimerStop
             ___lldiv
           _ResetParametersForConfirmedTransmission
           _ResetParametersForUnconfirmedTransmission
           _RxData *
           _SelectChannelForTransmission *
             _ConfigureRadioTx
               _ConfigureRadio
                 _RADIO_SetBandwidth
                 _RADIO_SetChannelFrequency
                 _RADIO_SetFSKSyncWord
                   _memcpy
                 _RADIO_SetFrequencyHopPeriod
                 _RADIO_SetLoRaSyncWord
                 _RADIO_SetModulation
                 _RADIO_SetSpreadingFactor
               _RADIO_SetCRC
               _RADIO_SetIQInverted
               _RADIO_SetOutputPower
             _SearchAvailableChannel
               _Random
                 ___lwmod
                   _rand (ARG)
                     ___lmul
                       _SwTimerReadValue (ARG)
                         _SwTimersInterrupt
                           _TMR_GetDeltaTime
                             _TMR1_ReadTimer
                 _rand
                   ___lmul
                     _SwTimerReadValue (ARG)
                       _SwTimersInterrupt
                         _TMR_GetDeltaTime
                           _TMR1_ReadTimer
           _SetJoinFailState *
             _RxJoinResponse *
           _SwTimerSetTimeout *
             ___lldiv (ARG)
           _SwTimerStart *
             _SwTimersInterrupt
               _TMR_GetDeltaTime
                 _TMR1_ReadTimer
             _TMR_OverrideRemaining
               _TMR_SwapTimer
                 _TMR1_ReadTimer
                 _TMR1_WriteTimer
           ___lldiv *
         _LORAWAN_TxDone
           _LORAWAN_EnterContinuousReceive
             _ConfigureRadioRx
               _ConfigureRadio
                 _RADIO_SetBandwidth
                 _RADIO_SetChannelFrequency
                 _RADIO_SetFSKSyncWord
                   _memcpy
                 _RADIO_SetFrequencyHopPeriod
                 _RADIO_SetLoRaSyncWord
                 _RADIO_SetModulation
                 _RADIO_SetSpreadingFactor
               _RADIO_SetCRC
               _RADIO_SetIQInverted
             _RADIO_ReceiveStart
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_WriteConfiguration
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_WriteFSKBitRate
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                 _RADIO_WriteFSKFrequencyDeviation
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                 _RADIO_WriteFrequency
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                   ___llmod
                 _RADIO_WriteMode
                   _HALDIO5PinValue
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _SystemBlockingWaitMs
                 _RADIO_WritePower
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                 ___lmul
                   _SwTimerReadValue (ARG)
                     _SwTimersInterrupt
                       _TMR_GetDeltaTime
                         _TMR1_ReadTimer
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _SystemBlockingWaitMs
               _SwTimerSetTimeout
                 ___lldiv (ARG)
               _SwTimerStart
                 _SwTimersInterrupt
                   _TMR_GetDeltaTime
                     _TMR1_ReadTimer
                 _TMR_OverrideRemaining
                   _TMR_SwapTimer
                     _TMR1_ReadTimer
                     _TMR1_WriteTimer
               ___lldiv
             _RADIO_ReceiveStop
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _SystemBlockingWaitMs
             _RADIO_ReleaseData
             _ResetParametersForConfirmedTransmission
             _ResetParametersForUnconfirmedTransmission
             _RxData *
           _RADIO_GetStatus
           _RxData *
           _SwTimerIsRunning *
           _SwTimerReadValue *
             _SwTimersInterrupt
               _TMR_GetDeltaTime
                 _TMR1_ReadTimer
           _SwTimerSetTimeout *
             ___lldiv (ARG)
           _SwTimerStart *
             _SwTimersInterrupt
               _TMR_GetDeltaTime
                 _TMR1_ReadTimer
             _TMR_OverrideRemaining
               _TMR_SwapTimer
                 _TMR1_ReadTimer
                 _TMR1_WriteTimer
           _SwTimerStop *
           ___lldiv *
           ___lmul *
             _SwTimerReadValue (ARG)
               _SwTimersInterrupt
                 _TMR_GetDeltaTime
                   _TMR1_ReadTimer
         _RADIO_WriteMode
           _HALDIO5PinValue
           _RADIO_RegisterRead
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _SystemBlockingWaitMs
       _UnconfirmedTransmissionCallback *
         _RADIO_Transmit
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
           _RADIO_RegisterRead
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _RADIO_WriteConfiguration
             _RADIO_RegisterRead
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _RADIO_RegisterWrite
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _RADIO_WriteFSKBitRate
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               ___lldiv
             _RADIO_WriteFSKFrequencyDeviation
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               ___lldiv
             _RADIO_WriteFrequency
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               ___lldiv
               ___llmod
             _RADIO_WriteMode
               _HALDIO5PinValue
               _RADIO_RegisterRead
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _SystemBlockingWaitMs
             _RADIO_WritePower
               _RADIO_RegisterRead
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
             ___lmul
               _SwTimerReadValue (ARG)
                 _SwTimersInterrupt
                   _TMR_GetDeltaTime
                     _TMR1_ReadTimer
           _RADIO_WriteMode
             _HALDIO5PinValue
             _RADIO_RegisterRead
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _RADIO_RegisterWrite
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _SystemBlockingWaitMs
           _SwTimerSetTimeout
             ___lldiv (ARG)
           _SwTimerStart
             _SwTimersInterrupt
               _TMR_GetDeltaTime
                 _TMR1_ReadTimer
             _TMR_OverrideRemaining
               _TMR_SwapTimer
                 _TMR1_ReadTimer
                 _TMR1_WriteTimer
           _SwTimerStop
           ___lldiv
         _ResetParametersForUnconfirmedTransmission
         _RxData *
         _SelectChannelForTransmission *
           _ConfigureRadioTx
             _ConfigureRadio
               _RADIO_SetBandwidth
               _RADIO_SetChannelFrequency
               _RADIO_SetFSKSyncWord
                 _memcpy
               _RADIO_SetFrequencyHopPeriod
               _RADIO_SetLoRaSyncWord
               _RADIO_SetModulation
               _RADIO_SetSpreadingFactor
             _RADIO_SetCRC
             _RADIO_SetIQInverted
             _RADIO_SetOutputPower
           _SearchAvailableChannel
             _Random
               ___lwmod
                 _rand (ARG)
                   ___lmul
                     _SwTimerReadValue (ARG)
                       _SwTimersInterrupt
                         _TMR_GetDeltaTime
                           _TMR1_ReadTimer
               _rand
                 ___lmul
                   _SwTimerReadValue (ARG)
                     _SwTimersInterrupt
                       _TMR_GetDeltaTime
                         _TMR1_ReadTimer
       _UpdateJoinSuccessState *
         _RxJoinResponse *
         _SwTimerSetTimeout *
           ___lldiv (ARG)
         _SwTimerStart *
           _SwTimersInterrupt
             _TMR_GetDeltaTime
               _TMR1_ReadTimer
           _TMR_OverrideRemaining
             _TMR_SwapTimer
               _TMR1_ReadTimer
               _TMR1_WriteTimer
         ___lldiv *
   _LORAWAN_Send
     _AssemblePacket
       _AESCmac
         _AESEncodeLoRa
           _AESEncode
             _EncKeySchedule
             _EncodeShiftRow
           _memcpy
         _GenerateSubkey
           _AESEncodeLoRa
             _AESEncode
               _EncKeySchedule
               _EncodeShiftRow
             _memcpy
           _FillSubKey
           _memset
         _memcpy
         _memset
       _AssembleEncryptionBlock
         _memcpy
         _memset
       _CountfOptsLength
       _EncryptFRMPayload
         _AESEncodeLoRa
           _AESEncode
             _EncKeySchedule
             _EncodeShiftRow
           _memcpy
         _AssembleEncryptionBlock
           _memcpy
           _memset
         ___awdiv
           ___awmod (ARG)
       _FindSmallestDataRate
       _IncludeMacCommandsResponse
         _RADIO_GetPacketSnr
       _memcpy
       _memset
     _LORAWAN_GetMaxPayloadSize
       _CountfOptsLength
     _RADIO_ReceiveStop
       _RADIO_WriteMode
         _HALDIO5PinValue
         _RADIO_RegisterRead
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         _RADIO_RegisterWrite
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         _SystemBlockingWaitMs
     _RADIO_Transmit
       _HALSPICSAssert
       _HALSPICSDeassert
       _HALSPISend
         _SPI2_Exchange8bit
       _RADIO_RegisterRead
         _HALSPICSAssert
         _HALSPICSDeassert
         _HALSPISend
           _SPI2_Exchange8bit
       _RADIO_RegisterWrite
         _HALSPICSAssert
         _HALSPICSDeassert
         _HALSPISend
           _SPI2_Exchange8bit
       _RADIO_WriteConfiguration
         _RADIO_RegisterRead
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         _RADIO_RegisterWrite
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         _RADIO_WriteFSKBitRate
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           ___lldiv
         _RADIO_WriteFSKFrequencyDeviation
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           ___lldiv
         _RADIO_WriteFrequency
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           ___lldiv
           ___llmod
         _RADIO_WriteMode
           _HALDIO5PinValue
           _RADIO_RegisterRead
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _SystemBlockingWaitMs
         _RADIO_WritePower
           _RADIO_RegisterRead
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
         ___lmul
           _SwTimerReadValue (ARG)
             _SwTimersInterrupt
               _TMR_GetDeltaTime
                 _TMR1_ReadTimer
       _RADIO_WriteMode
         _HALDIO5PinValue
         _RADIO_RegisterRead
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         _RADIO_RegisterWrite
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         _SystemBlockingWaitMs
       _SwTimerSetTimeout
         ___lldiv (ARG)
       _SwTimerStart
         _SwTimersInterrupt
           _TMR_GetDeltaTime
             _TMR1_ReadTimer
         _TMR_OverrideRemaining
           _TMR_SwapTimer
             _TMR1_ReadTimer
             _TMR1_WriteTimer
       _SwTimerStop
       ___lldiv
     _SelectChannelForTransmission
       _ConfigureRadioTx
         _ConfigureRadio
           _RADIO_SetBandwidth
           _RADIO_SetChannelFrequency
           _RADIO_SetFSKSyncWord
             _memcpy
           _RADIO_SetFrequencyHopPeriod
           _RADIO_SetLoRaSyncWord
           _RADIO_SetModulation
           _RADIO_SetSpreadingFactor
         _RADIO_SetCRC
         _RADIO_SetIQInverted
         _RADIO_SetOutputPower
       _SearchAvailableChannel
         _Random
           ___lwmod
             _rand (ARG)
               ___lmul
                 _SwTimerReadValue (ARG)
                   _SwTimersInterrupt
                     _TMR_GetDeltaTime
                       _TMR1_ReadTimer
           _rand
             ___lmul
               _SwTimerReadValue (ARG)
                 _SwTimersInterrupt
                   _TMR_GetDeltaTime
                     _TMR1_ReadTimer
   _LORAWAN_SetApplicationSessionKey
     _memcpy
   _LORAWAN_SetDeviceAddress
   _LORAWAN_SetNetworkSessionKey
     _memcpy
   _SYSTEM_Initialize
     _EUSART1_Initialize
       _EUSART1_SetErrorHandler
       _EUSART1_SetFramingErrorHandler
       _EUSART1_SetOverrunErrorHandler
       _EUSART1_SetRxInterruptHandler
       _EUSART1_SetTxInterruptHandler
     _EXT_INT_Initialize
       _INT1_SetInterruptHandler
       _INT2_SetInterruptHandler
     _INTERRUPT_Initialize
     _LORAWAN_PlatformInit
       _DIO0_ISR_Lora_Init
         _INT1_SetInterruptHandler
       _DIO1_ISR_Lora_Init
         _INT2_SetInterruptHandler
       _DIO2_ISR_Lora_Init
         _IOCB4_SetInterruptHandler
       _DIO3_ISR_Lora_Init
       _DIO4_ISR_Lora_Init
       _DIO5_ISR_Lora_Init
       _SystemTimerInit
       _TMR_ISR_Lora_Init
         _TMR1_SetInterruptHandler
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
       _IOCB4_SetInterruptHandler
     _SPI2_Initialize
     _TMR1_Initialize
       _TMR1_SetInterruptHandler
     _TMR5_Initialize
   _TMR5_HasOverflowOccured
   ___aldiv
     ___almod (ARG)
   ___almod
   ___awdiv
     ___awmod (ARG)
   ___awmod

 _INTERRUPT_InterruptManager (ROOT)
   Absolute function(Fake) *
   _EUSART1_Receive_ISR *
     Absolute function(Fake) *
     _EUSART1_DefaultErrorHandler *
       _EUSART1_RxDataHandler
     _EUSART1_DefaultFramingErrorHandler *
     _EUSART1_DefaultOverrunErrorHandler *
     _EUSART1_Read *
     _EUSART1_RxDataHandler *
     _strncat *
   _EUSART1_Transmit_ISR *
   _INT1_ISR *
     _INT1_CallBack
       Absolute function(Fake) *
       _DIO0_ISR_Lora *
       _INT1_DefaultInterruptHandler *
   _INT2_ISR *
     _INT2_CallBack
       Absolute function(Fake) *
       _DIO1_ISR_Lora *
       _INT2_DefaultInterruptHandler *
   _PIN_MANAGER_IOC *
     _IOCB4_ISR
       Absolute function(Fake) *
       _DIO2_ISR_Lora *
       _IOCB4_DefaultInterruptHandler *
   _TMR1_ISR *
     _TMR1_CallBack
       Absolute function(Fake) *
       _TMR1_DefaultInterruptHandler *
       _TMR_ISR_lora *
         i2_SwTimersInterrupt
           i2_TMR_GetDeltaTime
             i2_TMR1_ReadTimer
         i2_TMR_SwapTimer
           i2_TMR1_ReadTimer
           i2_TMR1_WriteTimer
     i2_TMR1_WriteTimer

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F37      0     21E      37       13.9%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0      80      16       50.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0      E0      14       87.5%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0      FB      11       98.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0      FF       9       99.6%
BITBANK1           100      0       0       6        0.0%
BANK1              100     69      FF       7       99.6%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     9F      9F       5       99.4%
BITCOMRAM           53      0       0       0        0.0%
COMRAM              53     3D      4B       1       90.4%
BITBANK15           38      0       0      35        0.0%
BANK15              38      0       0      36        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       2       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     543      12        0.0%
DATA                 0      0     763       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Fri Aug 28 16:10:51 2020

                                        ??_LORAWAN_TxDone 00BD  
                              __end_of_DIO3_ISR_Lora_Init 95A2  
                                _eusart1TxBufferRemaining 01FE  
                                      ?_LORAWAN_RxTimeout 0001  
                                                       _n 0202  
                        __size_of_RADIO_FHSSChangeChannel 0040  
                                          HALSPISend@data 0061  
                         __end_of_ValidateChannelMaskCntl 915C  
                                                      l20 2394  
                                                      l13 22A8  
                                                      l30 2486  
                                                      l22 23C6  
                                                      l15 2356  
                                                      l40 5AF2  
                                                      l24 23E8  
                                                      l16 231C  
                                                      l33 256C  
                                                      l25 23FC  
                                                      l17 22D4  
                                                      l42 5B1A  
                                                      l26 240C  
                                                      l51 81A2  
                                                      l52 815A  
                                                      l44 5B6E  
                                                      l28 2524  
                                                      l29 2478  
                                                      l46 5B96  
                                                      l77 92F8  
                                            ___awdiv@sign 006B  
                         __size_of_UpdateJoinSuccessState 013E  
                                     ___wmul@multiplicand 0062  
                      __size_of_IOCB4_SetInterruptHandler 000A  
                                            _TMR_ISR_lora 84F2  
                                   __end_of_AESEncodeLoRa 8C72  
                                             ?_RADIO_DIO0 0001  
                                             ?_RADIO_DIO1 0001  
                                             ?_RADIO_DIO2 0001  
                                             ?_RADIO_DIO3 0001  
                                             ?_RADIO_DIO4 0001  
                                             ?_RADIO_DIO5 0001  
                              ?_IOCB4_SetInterruptHandler 0060  
                                            __CFG_CP0$OFF 000000  
                                            __CFG_CP1$OFF 000000  
                                            __CFG_CP2$OFF 000000  
                                            __CFG_CP3$OFF 000000  
                                             __CFG_LVP$ON 000000  
                                     ??_LORAWAN_RxTimeout 00C2  
                                                     l200 66BC  
                                                     l201 66CA  
                                                     l210 676C  
                                                     l202 66FC  
                                                     l300 42EE  
                                                     l205 671C  
                                                     l214 4B2A  
                                                     l206 672A  
                                                     l230 1680  
                                                     l302 4308  
                                                     l215 4B40  
                                                     l231 15E4  
                                                     l303 437A  
                                                     l160 63D0  
                                                     l208 6738  
                                                     l232 1698  
                                                     l304 444A  
                                                     l320 69D4  
                                                     l217 4B74  
                                                     l209 6764  
                                                     l233 160C  
                                                     l401 8766  
                                                     l242 1716  
                                                     l234 1634  
                                                     l306 43D4  
                                                     l330 7164  
                                                     l322 6A28  
                                                     l402 876C  
                                                     l171 646C  
                                                     l251 18DE  
                                                     l235 166C  
                                                     l331 715E  
                                                     l172 645E  
                                                     l164 63EA  
                                                     l260 1A06  
                                                     l228 193A  
                                                     l252 18EA  
                                                     l244 1792  
                                                     l236 16C4  
                                                     l316 6A24  
                                                     l404 8786  
                                                     l412 8588  
                                                     l173 6462  
                                                     l261 1A12  
                                                     l253 1914  
                                                     l237 1712  
                                                     l229 16B2  
                                                     l333 7166  
                                                     l413 857A  
                                                     l166 6432  
                                                     l254 192C  
                                                     l334 717C  
                                                     l175 649A  
                                                     l167 6414  
                                                     l247 17B2  
                                                     l327 7126  
                                                     l319 69F2  
                                                     l168 6420  
                                                     l256 19B0  
                                                     l280 40DA  
                                                     l272 4000  
                                                     l328 7108  
                                                     l344 5FF4  
                                                     l257 19E2  
                                                     l249 1892  
                                                     l353 5D9C  
                                                     l417 8580  
                                                     l258 19C2  
                                                     l274 4018  
                                                     l275 4032  
                                                     l276 409E  
                                                     l380 763E  
                                                     l452 8BFE  
                                                     l277 40B6  
                                                     l293 4238  
                                                     l381 762A  
                                                     l446 746A  
                                                     l286 421A  
                                                     l278 40C8  
                                                     l390 7672  
                                                     l199 670C  
                                                     l279 40F4  
                                                     l295 4250  
                                                     l383 7630  
                                                     l375 8AFE  
                                                     l455 8850  
                                                     l288 41A4  
                                                     l296 4266  
                                                     l384 7636  
                                                     l297 4272  
                                                     l369 8CBC  
                                                     l393 767A  
                                                     l298 42A0  
                                                     l386 7682  
                                                     l458 8862  
                                                     l299 42CC  
                                                     l387 7650  
                                                     l388 7662  
                                             ?_RADIO_Init 0079  
                                                     l398 8774  
                                                     l399 8760  
                                                     l577 8D48  
                                                     l771 6D2A  
                                                     l772 6D3A  
                                                     l749 73F0  
                                                     l777 6DA6  
                                                     l769 6D02  
                                         ??_UpdateTxPower 0060  
                                            __CFG_CPB$OFF 000000  
                                            __CFG_CPD$OFF 000000  
                    __end_of_SelectChannelForTransmission 7E7E  
                   __size_of_SelectChannelForTransmission 006C  
                            _SelectChannelForTransmission 7E12  
                                      _RADIO_Transmit$517 00B8  
                                      _RADIO_Transmit$518 00BC  
                                  _ExecuteRxParamSetupReq 4456  
                                      _DIO2_ISR_Lora_Init 93E2  
                                      __size_of_AESEncode 034A  
                                         _timer1ReloadVal 01FC  
                                         ?_EncKeySchedule 0060  
                                                     _sub 0500  
                                            ___awmod@sign 0065  
                                   _RADIO_SetLoRaSyncWord 9522  
                                                     prod 000FF3  
                                                     tosl 000FFD  
                                                     wreg 000FE8  
                                              _TXSTA1bits 000FAC  
                                         __end_of_AESCmac 25E8  
                                 __end_of_SwTimersExecute 696A  
                                  SystemBlockingWaitMs@ms 0060  
                                 LORAWAN_Join@bufferIndex 00DB  
                                __size_of_RADIO_GetStatus 0006  
                                   ?_SystemBlockingWaitMs 0060  
                                    ??i2_TMR_GetDeltaTime 000D  
                                ??_SearchAvailableChannel 00B2  
                            __end_of_FindSmallestDataRate 6B2C  
                     __end_of_RADIO_SetFrequencyHopPeriod 9518  
                             _RADIO_SetFrequencyHopPeriod 950E  
                                              _CheckFlags 832C  
                                           _first1decimal 0114  
                                  ?_TMR_OverrideRemaining 006A  
                                           _INT1_CallBack 923C  
                                           _first2decimal 0112  
                                ?_AssembleEncryptionBlock 006B  
                                     ?_DIO2_ISR_Lora_Init 0001  
                                       ??_UpdateFrequency 0064  
                                           _first3decimal 0110  
                                      __size_of_IOCB4_ISR 0020  
                                                    l1032 58C2  
                                                    l1024 586E  
                                                    l1200 0A24  
                                                    l1025 5860  
                                                    l2001 484C  
                                                    l1201 0A32  
                                                    l1026 582C  
                                                    l1202 0B96  
                                                    l1027 585C  
                                                    l1203 0B00  
                                                    l1043 7040  
                                                    l1124 659E  
                                                    l2020 51BC  
                                                    l1125 64C4  
                                                    l2005 7372  
                                                    l1301 1E72  
                                                    l2013 928A  
                                                    l1221 0CF0  
                                                    l1213 0C5A  
                                                    l1205 0B90  
                                                    l1045 70C4  
                                                    l1126 6532  
                                                    l1302 1BD6  
                                                    l2110 82E8  
                                                    l1222 0CF4  
                                                    l1127 659A  
                                                    l1311 1D50  
                                                    l1303 1C44  
                                                    l1231 8242  
                                                    l1207 0C66  
                                                    l1151 010A  
                                                    l3000 7900  
                                                    l1312 1DBE  
                                                    l1304 1C8A  
                                                    l1232 8268  
                                                    l2120 7DB6  
                                                    l2112 8312  
                                                    l1240 355A  
                                                    l1208 0C60  
                                                    l1160 0200  
                                                    l1152 0158  
                                                    l1048 6CCE  
                                                    l1072 539C  
                                                    l2025 7E78  
                                                    l3001 78F8  
                                                    l1305 1CD0  
                                                    l1241 346C  
                                                    l1153 015C  
                                                    l1057 6CDE  
                                                    l1314 1E06  
                                                    l1306 1CD4  
                                                    l2050 59F6  
                                                    l1242 3482  
                                                    l2018 51C0  
                                                    l1162 0D0C  
                                                    l3010 7CD8  
                                                    l2043 787C  
                                                    l1403 50A6  
                                                    l1323 6A68  
                                                    l1315 1E10  
                                                    l1307 1D30  
                                                    l2051 5A5E  
                                                    l1243 3498  
                                                    l2019 50C8  
                                                    l1227 0D50  
                                                    l1155 01EE  
                                                    l3011 7CE4  
                                                    l3004 7920  
                                                    l1404 5060  
                                                    l1332 6B26  
                                                    l1324 6AE8  
                                                    l2060 5578  
                                                    l2124 7E08  
                                                    l1244 34AE  
                                                    l1148 0D12  
                                                    l1180 05F2  
                                                    l3005 792A  
                                                    l1325 6A6E  
                                                    l1261 1F0A  
                                                    l2061 55E6  
                                                    l2125 7DDA  
                                                    l2109 8328  
                                                    l1245 34C4  
                                                    l1237 32C6  
                                                    l1165 06FC  
                                                    l1181 06A0  
                                                    l1173 0528  
                                                    l1149 02AA  
                                                    l3013 7CFA  
                                                    l2038 77F2  
                                                    l3006 7938  
                                                    l1326 6AE6  
                                                    l1262 1F14  
                                                    l2062 564E  
                                                    l2126 7DEA  
                                                    l2118 7DCE  
                                                    l1238 351E  
                                                    l1246 34DA  
                                                    l1174 056C  
                                                    l1166 032C  
                                                    l1094 61A8  
                                                    l3014 7CF2  
                                                    l1271 1FFA  
                                                    l2127 7DF6  
                                                    l2119 7DC4  
                                                    l1247 34F0  
                                                    l1239 3456  
                                                    l1167 043C  
                                                    l2143 32AC  
                                                    l1360 8342  
                                                    l1328 6B0A  
                                                    l1280 219A  
                                                    l1272 2008  
                                                    l1264 1FF8  
                                                    l2048 5A62  
                                                    l1248 357A  
                                                    l1336 7BB6  
                                                    l1184 0742  
                                                    l1176 05C4  
                                                    l1168 04F8  
                                                    l1361 8358  
                                                    l1273 202A  
                                                    l1265 1FB0  
                                                    l2049 5988  
                                                    l2073 8052  
                                                    l1169 04E0  
                                                    l3017 7D12  
                                                    l1362 836E  
                                                    l2058 5572  
                                                    l2090 90B0  
                                                    l1194 0974  
                                                    l1186 085E  
                                                    l1178 05E0  
                                                    l3018 7D1C  
                                                    l1371 7AA0  
                                                    l1291 1E74  
                                                    l1267 1FF4  
                                                    l2059 5652  
                                                    l1347 8ABC  
                                                    l1195 0990  
                                                    l3019 7D2A  
                                                    l1612 2964  
                                                    l1284 4DF2  
                                                    l1292 1A44  
                                                    l1276 203C  
                                                    l2084 88A8  
                                                    l1188 0934  
                                                    l1525 4CF4  
                                                    l1621 2AD4  
                                                    l1373 7AB6  
                                                    l1381 7004  
                                                    l1277 20A8  
                                                    l2069 932E  
                                                    l1197 09BC  
                                                    l1189 091C  
                                                    l1526 4D8A  
                                                    l1286 4E48  
                                                    l1374 7ACA  
                                                    l1278 2132  
                                                    l2078 8080  
                                                    l1535 8798  
                                                    l1543 8D88  
                                                    l1631 2B36  
                                                    l1623 2ADE  
                                                    l1615 299E  
                                                    l1367 7A86  
                                                    l1199 09CE  
                                                    l1544 8D6A  
                                                    l1632 2C5E  
                                                    l1296 1E36  
                                                    l2096 9158  
                                                    l1553 7718  
                                                    l1641 3996  
                                                    l1625 2B00  
                                                    l1377 7006  
                                                    l1297 1ADA  
                                                    l2370 93CA  
                                                    l1618 2A04  
                                                    l1378 6F58  
                                                    l1386 6630  
                                                    l1298 1B48  
                                                    l1627 2B0A  
                                                    l3243 8992  
                                                    l1299 1B8E  
                                                    l2540 8BA0  
                                                    l3180 79F8  
                                                    l1812 4968  
                                                    l3244 898A  
                                                    l1900 262E  
                                                    l2541 8BC4  
                                                    l1549 7716  
                                                    l3181 79EC  
                                                    l1629 2B2C  
                                                    l1397 500C  
                                                    l2542 8BC2  
                                                    l3190 7F70  
                                                    l1806 81C4  
                                                    l1398 4F58  
                                                    l1910 272E  
                   RADIO_WriteConfiguration@symbolTimeout 00A6  
                                                    l3263 8DB4  
                                                    l3191 7F64  
                                                    l1807 81C8  
                                                    l1639 398C  
                                                    l3247 89AA  
                                                    l1399 4F9E  
                                                    l1903 26E6  
                                                    l1583 695A  
                                                    l3264 8DA2  
                                                    l1592 6296  
                                                    l3184 7A2C  
                                                    l3248 89B4  
                                                    l1904 26AE  
                                                    l1584 688A  
                                                    l3257 82BA  
                                                    l1593 61D4  
                                                    l1569 75C8  
                                                    l3185 7A3A  
                                                    l3258 8280  
                                                    l3194 7F98  
                                                    l1914 2866  
                                                    l1595 6230  
                                                    l2627 91B0  
                                                    l3195 7FA6  
                                                    l1915 276E  
                                                    l1587 6956  
                                                    l1836 8408  
                                                    l1908 28E0  
                                                    l1916 2862  
                                                    l1597 6294  
                                                    l1925 9346  
                                                    l1909 2766  
                                                    l2901 71D2  
                                                    l1942 37E0  
                                                    l1838 8438  
                                                    l2902 71C6  
                                                    l1871 118C  
                                                    l1943 365C  
                                                    l1880 13D4  
                                                    l1944 36AE  
                                                    l1960 3C52  
                                                    l2816 2CF8  
                                                    l2841 84AC  
                                                    l1865 14C4  
                                                    l1881 14AC  
                                                    l1937 8632  
                                                    l1929 8EFE  
                                                    l1945 36EC  
                                                    l1961 3D7E  
                                                    l2905 71FA  
                                                    l2817 2D0C  
                                                    l2842 84C0  
                                                    l1874 1230  
                                                    l1866 0F28  
                                                    l1938 863E  
                                                    l1962 3D16  
                                                    l2906 7208  
                                                    l1883 1438  
                                                    l1947 37C6  
                                                    l1963 3D08  
                                                    l1971 4524  
                                                    l2907 721E  
                                                    l1980 5F2C  
                                                    l1868 1046  
                                                    l1972 4564  
                                                    l2860 800C  
                                                    l1981 5E66  
                                                    l1869 1222  
                                                    l1949 386A  
                                                    l1957 3C14  
                                                    l1973 45A4  
                                                    l2861 8014  
                                                    l2853 7FCC  
                                                    l1878 1336  
                                                    l1966 3D6C  
                                                    l1974 4660  
                                                    l1894 2918  
                                                    l2854 7FD6  
                                                    l1991 5F62  
                                                    l1983 5F26  
                                                    l1879 1356  
                                                    l1967 3D7A  
                                                    l1895 2624  
                                                    l1992 5F66  
                                                    l1888 14F8  
                                                    l1896 2612  
                                                    l2856 7FEC  
                                                    l1985 5F28  
                                                    l2857 7FE6  
                                                    l1979 5E60  
                                                    l2892 6E4C  
                                                    l1989 5F48  
                                                    l1997 4688  
                                                    l2893 6E5A  
                                                    l2885 6DD2  
                                                    l2894 6E70  
                                                    l2886 6DEA  
                                                    l1999 483E  
                                                    l2888 6E18  
                                                    l2889 6E0C  
                                                    l2898 71A0  
                                                    l2899 71B4  
                                           _first4decimal 0208  
                                                    l2997 78D2  
                                                    l2998 78E2  
                                                    l9263 5B12  
                                                    l9281 5B8E  
                                                    l9515 6654  
                                                    l8813 29FC  
                                                    l8739 8280  
                                                    l8853 2C56  
                                                    l9709 2564  
                                                    l9653 238C  
                                                    l8951 8DA2  
                                                    l8871 87B2  
                                                    l8785 295C  
                                                    l9673 2404  
                                                    l8797 2996  
                                                    l9689 247E  
                                        _RADIO_WritePower 66A0  
                                                    l9885 4F96  
                                                    l9969 7012  
                            ??_LORAWAN_SetChannelIdStatus 0065  
                                 _PrepareJoinRequestFrame 4D9C  
                                                    _LATA 000F89  
                                                    _LATB 000F8A  
                                                    _LATC 000F8B  
                                                    _LATD 000F8C  
                                                    _LATE 000F8D  
                                           _first5decimal 0206  
                                                    u8100 648E  
                                                    u8210 7748  
                                                    u9100 25B2  
                                                    u9030 2400  
                                                    u8230 7770  
                                            ?_RADIO_Reset 0001  
                                                    u9050 2452  
                                                    u8250 7796  
                                                    u8420 8996  
                                                    u9300 6AF4  
                                                    u9205 43C2  
                                                    u8270 74DC  
                                                    u9070 24EC  
                                                    u9215 43E6  
                                                    u7800 2C44  
                                                    u7720 2990  
                                                    u9240 8EF2  
                                                    u8441 5A98  
                                                    u8610 1764  
                                                    u8530 16AC  
                                                    u9250 8EFA  
                                                    u7820 2C8A  
                                                    u7740 29E2  
                                                    u9340 6B1E  
                                                    u7670 82A2  
                                                    u8470 5B46  
                                                    u9510 5F4E  
                                                    u9190 439A  
                                                    u8535 16A2  
                                                    u9175 4328  
                                                    u7920 7F74  
                                                    u8560 16FC  
                                                    u7690 9460  
                                                    u8635 17CC  
                                                    u8580 170C  
                              __size_of_RADIO_ReceiveStop 0020  
                                                    u9540 6FC6  
                                                    u9380 500A  
                                                    u8820 90AC  
                                                    u7677 8298  
                                                    u7950 819E  
                                                    u9550 7012  
                                                    u8910 7904  
                                                    u7960 81A0  
                                                    u7890 79FC  
                                                    u9490 5F3A  
                                                    u9660 1D18  
                                                    u9580 1AD8  
                                                    u9740 807C  
                                                    u8960 22BA  
                                                    u8945 228A  
                                                    u8970 22BC  
                                                    u9690 1E80  
                                                    u9930 8324  
                                                    u9770 88A2  
                                                    _TMR1 000FCE  
                                                    _TMR5 000F4F  
                                       ??_UpdateDutyCycle 0062  
                                                    _WPUB 000F61  
                                  ??_LORAWAN_PlatformInit 0062  
                                           _INT2_CallBack 921C  
                                           _EUSART1_Write 8B8A  
                                ??_InitDefault433Channels 006B  
                                ExecuteNewChannel@drRange 00AA  
                                      _PrepareSessionKeys 7230  
                                                    _loRa 020A  
                                                    _main 2C96  
                                                    _cout 0200  
                                                    _rand 838A  
                                           ?_EUSART1_Read 0001  
                          __end_of_UpdateMinMaxChDataRate 65AC  
                                                    fsr0h 000FEA  
                                                    fsr1h 000FE2  
                                                    indf0 000FEF  
                                                    fsr2h 000FDA  
                                                    fsr0l 000FE9  
                                                    indf2 000FDF  
                                                    fsr1l 000FE1  
                                                    fsr2l 000FD9  
                                 __size_of_RADIO_Transmit 0238  
                                                    btemp 003E  
                                           __CFG_BORV$190 000000  
                          __size_of_StopAllSoftwareTimers 0052  
                                           ComputeMic@mic 00CC  
                                           ComputeMic@key 00C7  
                               __end_of_LORAWAN_RxTimeout 294C  
                               __size_of_ConfigureRadioRx 002A  
                               __size_of_ConfigureRadioTx 0052  
                       __size_of_INT2_SetInterruptHandler 000A  
                           __end_of_StopAllSoftwareTimers 86EC  
                               ?_INT2_SetInterruptHandler 0060  
                                                    prodh 000FF4  
                                                    prodl 000FF3  
                                                    start 00CC  
                                         _timer5ReloadVal 03E7  
                                           __CFG_IESO$OFF 000000  
                                __end_of_CountfOptsLength 7016  
                                   ExecuteLinkAdr@txPower 0075  
                                     __size_of_HALSPISend 000E  
                              ??_TMR1_SetInterruptHandler 0062  
                              EnableChannels1@channelMask 0064  
                                        ??_AssemblePacket 00CC  
                                  ?_HALResetPinMakeOutput 0001  
                                     ?_PrepareSessionKeys 006B  
                                  __size_of_TMR_SwapTimer 004A  
                              __end_of_RADIO_GetPacketSnr 955A  
                                            ___param_bank 000000  
                                              _GetRx1Freq 939C  
                              __size_of_RADIO_ReleaseData 0006  
                                    ??_DIO2_ISR_Lora_Init 0062  
                         __end_of_CreateAllSoftwareTimers 873E  
                  SearchAvailableChannel@transmissionType 00AF  
                         __size_of_HALResetPinOutputValue 001A  
                                   MacExecuteCommands@ptr 00B6  
                                   _RADIO_WriteFSKBitRate 7EE8  
                                __size_of_SystemTimerInit 0008  
                                        __end_of_INT1_ISR 954E  
                                        __end_of_INT2_ISR 9546  
                          __size_of_OSCILLATOR_Initialize 000E  
                                  ExecuteLinkAdr@dataRate 0078  
                           __end_of_OSCILLATOR_Initialize 943E  
                      __size_of_LORAWAN_LinkCheckCallback 016C  
                                                   l10401 1FF2  
                                                   l12101 6138  
                                                   l10167 82E0  
                                                   l11223 0528  
                                                   l12027 7042  
                                                   l12051 526E  
                                                   l12107 6162  
                                                   l11245 05C4  
                                                   l12045 5250  
                                                   l12061 52A2  
                                                   l12117 61A4  
                                                   l12127 7C86  
                                                   l12223 30A4  
                                                   l12215 2FE8  
                                                   l10721 6D2A  
                                                   l10801 5C4A  
                                                   l12225 30BE  
                                                   l12233 315A  
                                                   l12411 4DEA  
                                                   l10387 1FAC  
                                         __end_of___abdiv 801E  
                                                   l12067 5300  
                                                   l10389 1FB0  
                                                   l11357 0974  
                                                   l12245 3208  
                                                   l10807 5CE6  
                                                   l12425 4E40  
                                                   l11625 1228  
                                                   l12097 6132  
                                                   l12195 7874  
                                                   l12179 77EA  
                                                   l11483 0CEA  
                                                   l11379 09BC  
                                                   l10771 6CB8  
                                                   l10847 4680  
                                                   l10775 6CC6  
                                                   l12377 7462  
                                                   l10779 6CD6  
                                                   l10979 3506  
                                                   l12887 8B8E  
                                   _eusart1RxStatusBuffer 004E  
                                         __end_of___aldiv 6E82  
                                         __end_of___almod 7230  
                                                   ?_main 0001  
                                                   ?_rand 00A6  
                                         __end_of___awdiv 7942  
                                              _FillSubKey 814A  
                                         __end_of___awmod 7D34  
                       __end_of_IOCB4_SetInterruptHandler 9478  
                                           ?_RADIO_SetCRC 0001  
                                         __end_of___lldiv 7A4C  
                                         RADIO_Transmit@i 00C1  
                                                   u10040 416A  
                                                   u11010 7B6A  
                                                   u10055 4192  
                                                   u10065 41B6  
                                                   u11130 35A2  
                                                   u10180 201E  
                                                   u11205 51E4  
                                                   u11048 7B9E  
                                                   u11400 042C  
                                                   u11320 01E8  
                                                   u11049 7BB2  
                                                   u10258 7C36  
                                         ___awdiv@divisor 0068  
                                                   u11350 02C6  
                                                   u13030 527C  
                                                   u12055 265A  
                                                   u12320 1144  
                                                   u10384 8622  
                                                   u10480 3BE4  
                                                   u12128 2752  
                                                   _T1CON 000FCD  
                                         __end_of___llmod 7FB8  
                                                   u10385 861C  
                                                   u12330 1162  
                                                   u11290 01CC  
                                                   u12218 2904  
                                                   u11371 0304  
                                                   u12420 13D8  
                                                   u12340 11C2  
                                                   u11540 0632  
                                                   u10805 5C3A  
                                                   u11518 05A0  
                                                   u12238 2938  
                                                   u12078 26D2  
                                                   u13070 52B8  
                                                   u12335 1158  
                                                   u11519 05B4  
                                                   u10815 5C5C  
                                                   u12440 1400  
                                                   u10920 4852  
                                                   u11448 04BC  
                                                   u12345 11B6  
                                                   u12265 0DEC  
                                                   u11449 04D0  
                                                   u11730 0A66  
                                                   u11570 0726  
                                                   u13170 612C  
                                                   u12275 0E70  
                                                   u12195 2882  
                                                   u11900 0CB6  
                                       ??_EnableChannels1 0069  
                                                   u12285 0F62  
                                                   u13085 52F0  
                                                   u12518 1518  
                                                   u10950 7A82  
                                                   u11830 0C24  
                                                   u11590 0842  
                                                   u12550 7FFA  
                                                   u10758 6CA4  
                                                   u13238 6190  
                                                   u10838 5CF4  
                                                   u10790 5C02  
                                                   u12455 1426  
                                                   u12295 0FE6  
                                                   u10775 7D52  
                                                   u13095 5312  
                                                   u10839 5D08  
                                                   u13600 749C  
                                                   u11648 08EC  
                                                   u11568 06D8  
                                                   u11488 0548  
                                                   u13440 31B2  
                                                   _LATC2 007C5A  
                                                   u12465 144A  
                                                   u11649 0900  
                                                   u11569 06EC  
                                                   u11489 055C  
                                                   u12810 5D5A  
                                                   u10858 8D24  
                                                   u14250 9454  
                                                   u14410 7CFE  
                                    RxJoinResponse@status 0001  
                                                   _LATD3 007C63  
                                                   u13620 4E36  
                                                   u12820 5D72  
                                                   u12830 5DDA  
                                                   u13278 7CAA  
                                                   u13198 615C  
                                                   u14350 71D6  
                                                   u13279 7CBE  
                                                   u13455 31F8  
                                                   u13640 4E8C  
                                                   u12680 69AC  
                                                   u12760 5FB2  
                       __end_of_AckRetransmissionCallback 61AE  
                  SearchAvailableChannel@randomNumberCopy 00B6  
                                                   u12825 5D66  
                                                   u13465 3222  
                                                   u12498 14E4  
                                                   u12770 5FCA  
                                                   u14290 6E1C  
                                                   u12835 5DCE  
                                                   u12940 5888  
                                                   u11868 0C92  
                                                   u12780 6032  
                                                   u11869 0CA6  
                                                   u13565 8C80  
                                                   u11958 0D3C  
                                                   u11798 0BFE  
                                                   u11799 0C12  
                                                   u12775 5FBE  
                                                   u13495 760C  
                                                   u11968 0D66  
                                                   _T5CON 000F4E  
                                                   u12785 6026  
                                                   u12955 58B0  
                                                   u12965 58D4  
                                          __CFG_DEBUG$OFF 000000  
                                                   u17177 2D6A  
                                                   u17187 8D72  
                                                   u16728 6942  
                                                   u16729 6954  
                                         __end_of___lwmod 89BE  
                                           ?_RADIO_RxDone 0001  
                                         ___awdiv@counter 006A  
                             __size_of_RADIO_ReceiveStart 0230  
                     __size_of_LORAWAN_SetChannelIdStatus 005A  
                                           ?_RADIO_TxDone 0001  
                                                   _TMR1H 000FCF  
                                                   _TMR1L 000FCE  
                                                   _TMR5H 000F50  
                                                   _TMR5L 000F4F  
                                                   _TRISA 000F92  
                                                   _TRISB 000F93  
                                                   _TRISC 000F94  
                                                   _TRISD 000F95  
                                                   _TRISE 000F96  
                                                   _TXREG 000FAD  
                                __size_of_RADIO_RxTimeout 002E  
                                           __CFG_WRT0$OFF 000000  
                                           __CFG_WRT1$OFF 000000  
                           ?_SelectChannelForTransmission 0001  
                                           __CFG_WRT2$OFF 000000  
                                     ___lmul@multiplicand 009E  
                                           __CFG_WRT3$OFF 000000  
                                          _RxJoinResponse 95A2  
                                 ?_SetReceptionNotOkState 0001  
                                    _EUSART1_Transmit_ISR 8DC8  
                                          __CFG_EBTR0$OFF 000000  
                                          __CFG_FCMEN$OFF 000000  
                                          __CFG_EBTR1$OFF 000000  
                                          __CFG_EBTR2$OFF 000000  
                                          __CFG_EBTR3$OFF 000000  
                                    ??_PrepareSessionKeys 0071  
                                        __end_of_TMR1_ISR 939C  
                               FindSmallestDataRate@found 0061  
                                           __CFG_WRTB$OFF 000000  
                                           __CFG_WRTC$OFF 000000  
                                           __CFG_WRTD$OFF 000000  
                                          ?_INT1_CallBack 0001  
                                  LORAWAN_RxTimeout@minim 00C6  
                             __size_of_RADIO_SetBandwidth 000A  
                                          __CFG_EBTRB$OFF 000000  
                          __size_of_RADIO_WatchdogTimeout 0046  
                                                   _datax 014B  
                                                   __rcon 0052  
                                 __end_of_PIN_MANAGER_IOC 9536  
                            ??_IncludeMacCommandsResponse 0065  
                           __end_of_RADIO_WatchdogTimeout 8866  
      RADIO_WriteFSKFrequencyDeviation@frequencyDeviation 006D  
                          ??_INT1_DefaultInterruptHandler 0001  
                               __size_of_ValidateDataRate 0018  
                                                   _randx 01F6  
                          LORAWAN_RxDone@frmPayloadLength 00F0  
                           ValidateChannelMaskCntl@result 0060  
                                      __CFG_MCLRE$EXTMCLR 000000  
                                                   _srand 9412  
                                        UpdateDataRange@i 0063  
                                LORAWAN_RxDone@joinAccept 00EE  
                                  _UpdateJoinSuccessState 5BD4  
                                          ?_INT2_CallBack 0001  
                                _INT1_SetInterruptHandler 9482  
                                          ?_EUSART1_Write 0001  
                                              _ComputeMic 80E8  
                                 __end_of_TMR1_Initialize 8EAE  
                                  UpdateCfList@joinAccept 00A6  
                                                   pclath 000FFA  
                                                   tablat 000FF5  
                                                   ltemp0 003E  
                                 RADIO_WriteFrequency@num 0075  
                                                   ltemp1 0042  
                                                   ltemp2 0046  
                          __size_of_UpdateCurrentDataRate 000A  
                          __size_of_UpdateChannelIdStatus 0166  
                              PrepareSessionKeys@appNonce 006D  
                                  UpdateChannelIdStatus@i 0063  
                           __end_of_UpdateCurrentDataRate 94D2  
                            __size_of_RADIO_FSKPacketSent 012E  
                           __end_of_UpdateChannelIdStatus 5678  
                                          ??_EUSART1_Read 0001  
                                                   plusw0 000FEB  
                                                   plusw1 000FE3  
                                                   plusw2 000FDB  
                                                   ttemp0 003E  
                                                   ttemp1 0041  
                                                   ttemp2 0044  
                                                   ttemp3 0047  
                                UpdateFrequency@channelId 0064  
                                                   status 000FD8  
                                                   wtemp0 003E  
                                                   wtemp1 0040  
                                                   wtemp2 0042  
                                                   wtemp3 0044  
                                                   wtemp4 0046  
                                                   wtemp5 0048  
                                                   wtemp6 003F  
                                      _MacExecuteCommands 32B6  
                                          __CFG_HFOFST$ON 000000  
                                UpdateCfList@channelIndex 00AD  
                                     __size_of_RADIO_DIO0 0090  
                                     __size_of_RADIO_DIO1 004E  
                                     __size_of_RADIO_DIO2 0056  
                                     __size_of_RADIO_DIO3 0022  
                                     __size_of_RADIO_DIO4 0032  
                                     __size_of_RADIO_DIO5 0028  
                                         __end_of_strncat 80E8  
                      PrepareJoinRequestFrame@bufferIndex 00DA  
              __end_of_EUSART1_DefaultFramingErrorHandler 95B0  
             __size_of_EUSART1_DefaultFramingErrorHandler 0002  
                    ??_EUSART1_DefaultFramingErrorHandler 0001  
                     ?_EUSART1_DefaultFramingErrorHandler 0001  
                      _EUSART1_DefaultFramingErrorHandler 95AE  
                                         _TMR1_WriteTimer 919C  
                       TMR_OverrideRemaining@oldReloadVal 0072  
                                     LORAWAN_RxDone@fPort 00DF  
                                __size_of_RADIO_WriteMode 00FE  
                                       __end_of_AESEncode 2C96  
                                          __CFG_PBADEN$ON 000000  
                                     __size_of_RADIO_Init 01CA  
                        __end_of_RADIO_WriteConfiguration 1A2C  
                         ??_IOCB4_DefaultInterruptHandler 0001  
                                         _TMR5_Initialize 925C  
                            __size_of_RADIO_SetIQInverted 000A  
                               __size_ofi2_TMR1_ReadTimer 0020  
                               RADIO_WriteMode@dioMapping 0068  
                                         __initialization 6E82  
                            __size_ofi2_SwTimersInterrupt 0100  
                                        LORAWAN_Send@port 00D3  
                             __size_of_DIO1_ISR_Lora_Init 0010  
                                     ?_MacExecuteCommands 00B0  
                                       _SPI2_Exchange8bit 93C0  
                              __end_of_EUSART1_Initialize 7B4E  
                                            __end_of_main 2FB0  
                              AssembleEncryptionBlock@dir 0072  
                                            __end_of_rand 83E6  
                                       ?_TMR_GetDeltaTime 0068  
                                           AESCmac@padded 01BD  
                                __end_of_RADIO_ReadRandom 74CC  
                                        _SetJoinFailState 8D08  
                                 RADIO_WriteMode@blocking 0066  
                                    _UpdateJoinInProgress 92CE  
                                    _ExecuteRxTimingSetup 8F7E  
                                       __end_of_IOCB4_ISR 921C  
                               __size_of_UpdateDLSettings 001C  
                                      ?_SPI2_Exchange8bit 0001  
                               __size_of_ValidateRxOffset 0018  
                             ?_INTERRUPT_InterruptManager 0001  
                                      ??_TMR_GetDeltaTime 006C  
                                           AESCmac@output 00BB  
                              i2TMR1_ReadTimer@readValLow 0008  
                            __end_of_RADIO_SetOutputPower 94E6  
                                               ??_AESCmac 00C0  
                                          ??_RADIO_SetCRC 0060  
                                  MacExecuteCommands@done 00B5  
                                 InitDefault868Channels@i 006B  
                                                  ??_main 00F9  
                                                  ??_rand 00A8  
                                          ??_RADIO_RxDone 00F3  
                                          ??_RADIO_TxDone 00E3  
                                           __activetblptr 000003  
                                  ?_RADIO_SetLoRaSyncWord 0001  
                                  __end_of_RxJoinResponse 95A4  
                       __end_of_LORAWAN_LinkCheckCallback 53A6  
                          __end_of_SetReceptionNotOkState 7BCC  
                             __end_of_UpdateReceiveDelays 8ACC  
                         __end_of_AssembleEncryptionBlock 66A0  
                                __size_of_SPI2_Initialize 000E  
                                  ??_SystemBlockingWaitMs 0064  
                                        ??_StartReTxTimer 009A  
                                     ??_SPI2_Exchange8bit 0060  
                        CountfOptsLength@macCommandLength 0066  
                                   ?_EUSART1_Transmit_ISR 0001  
                                      EncodeShiftRow@temp 0062  
                                ??_InitDefault868Channels 006B  
                             __size_of_RADIO_RegisterRead 0028  
                                       ?_HALSPICSDeassert 0001  
                                        ?_SwTimersExecute 0001  
                                           _TMR_SwapTimer 878C  
                                          _EnableChannels 9296  
                               ??_PrepareJoinRequestFrame 00D0  
                                          _HALSPICSAssert 9590  
                                    ??_MacExecuteCommands 00B3  
                                             ?_CheckFlags 0060  
                                 LORAWAN_TxDone@timeOnAir 00BB  
                                              _ExtractMic 8440  
                         __size_of_SearchAvailableChannel 012A  
                                      ??_HALSPICSDeassert 0060  
                                  _HALResetPinOutputValue 92E8  
                                        ___llmod@dividend 0060  
                                        ___awdiv@dividend 0066  
                                                  ?_srand 0072  
                  __end_of_LORAWAN_ReceiveWindow1Callback 70CE  
                 __size_of_LORAWAN_ReceiveWindow1Callback 00B8  
                          _LORAWAN_ReceiveWindow1Callback 7016  
                                                  _ANSELA 000F38  
                                                  _ANSELB 000F39  
                                                  _ANSELC 000F3A  
                                                  _ANSELD 000F3B  
                                                  _ANSELE 000F3C  
                                         _ValidateTxPower 8ED8  
                                                  _T1GCON 000FCC  
                                                  _T5GCON 000F4D  
                                 SwTimerReadValue@timerId 0099  
                                 TMR1_WriteTimer@timerVal 0060  
                                          _ExecuteLinkAdr 35AC  
                  __end_of_LORAWAN_ReceiveWindow2Callback 6CE2  
                 __size_of_LORAWAN_ReceiveWindow2Callback 00D8  
                          _LORAWAN_ReceiveWindow2Callback 6C0A  
                                                  i2l2171 8548  
                                                  i2l2251 0066  
                                                  i2l2244 0040  
                                                  i2l1525 5484  
                                                  i2l1526 5500  
                                                  i2l2246 004C  
                                                  i2l1535 8A52  
                                                  i2l2248 0058  
                                                  i2l2531 87DA  
                                                  i2l3403 8092  
                                                  i2l3404 808E  
                                                  i2l2533 8816  
                                                  i2l3406 80B0  
                                          __CFG_WDTEN$OFF 000000  
                                                  i2l3407 80A2  
                                                  i2l1592 6398  
                                                  i2l1593 62D6  
                                                  i2l2554 3E26  
                                                  i2l2546 8DF4  
                                                  i2l2547 8DF0  
                                                  i2l1595 6332  
                                                  i2l2627 92C4  
                                                  i2l1597 6396  
                                                  i2l2559 908A  
                           __size_of_RADIO_SetFSKSyncWord 0030  
                                                  _RCREG1 000FAE  
                                                  _RCSTA1 000FAB  
                                                  _OSCCON 000FD3  
                                       ??_RADIO_GetStatus 0060  
                                                  _SPBRG1 000FAF  
                        __size_of_ValidateChannelMaskCntl 0020  
                                                  _TMR5IF 007BF1  
                         __size_of_InitDefault433Channels 008A  
                                                  _TRISC2 007CA2  
                                           ?_LORAWAN_Init 00B2  
                                           ?_LORAWAN_Join 0001  
                        AssembleEncryptionBlock@firstByte 0070  
                                           ?_LORAWAN_Send 00D3  
                         __size_of_AutomaticReplyCallback 0026  
                                                  _TXREG1 000FAD  
                              __size_of_LORAWAN_RxTimeout 0364  
                                                  _TXSTA1 000FAC  
                                       ?_ExecuteDevStatus 0060  
                              __end_of_DIO0_ISR_Lora_Init 9412  
                                __size_ofi2_TMR_SwapTimer 0044  
                                       ExecuteLinkAdr@ptr 006F  
                           __size_of_RADIO_WriteFrequency 00F0  
                                                  _STable FE67  
                             RADIO_WriteFrequency@num_mod 0071  
                                     LORAWAN_TxDone@delta 00D2  
                             __size_of_ComputeSessionKeys 0086  
                                               AESCmac@k1 019D  
                                               AESCmac@k2 018D  
                               __end_of_SPI2_Exchange8bit 93D2  
                                     LORAWAN_TxDone@found 00D1  
                                         _CheckMcastFlags 7A4C  
                                     LORAWAN_TxDone@minim 00DE  
                                      ??_ExecuteDevStatus 0062  
                                                  _Random 90F8  
                                          __CFG_XINST$OFF 000000  
                                                  _RxData 95A4  
                                     LORAWAN_TxDone@ticks 00DA  
                      SearchAvailableChannel@randomNumber 00B9  
                    __end_of_TMR1_DefaultInterruptHandler 95A8  
                   __size_of_TMR1_DefaultInterruptHandler 0002  
                            _TMR1_DefaultInterruptHandler 95A6  
                                             ?_GetRx1Freq 0060  
                           ValidateDataRange@dataRangeNew 0063  
                                 _RADIO_FHSSChangeChannel 8ACC  
                                               ??___abdiv 0061  
                                                  ___lmul 849A  
                                  ?_RADIO_WriteFSKBitRate 006D  
                                               ??___aldiv 0072  
                                               ??___almod 0068  
                                   ?_UpdateJoinInProgress 0001  
                                                  ___wmul 8FA6  
                             ?_LORAWAN_LinkCheckConfigure 00A6  
                                   ?_ExecuteRxTimingSetup 0067  
                                               ??___awdiv 006A  
                                          __CFG_STVREN$ON 000000  
                                               ??___awmod 0064  
                                    _FindSmallestDataRate 6A4E  
                                               ??___lldiv 0068  
                                               ??___llmod 0068  
                                               ??___lwmod 00AC  
                                                  _hexNum 03C4  
                      RADIO_SetChannelFrequency@frequency 0060  
                                         StartReTxTimer@i 00A2  
                                ?_EUSART1_SetErrorHandler 0060  
                               ExecuteRxParamSetupReq@ptr 00A6  
                                  __size_of_LORAWAN_Reset 01CE  
                                                  _memcpy 826E  
                                                  _memset 8D98  
                                                  clear_0 6EEA  
                                                  clear_1 6EFC  
                                                  clear_2 6F08  
                                                  clear_3 6F14  
                                                  clear_4 6F22  
                                                  clear_5 6F34  
                                                  clear_6 6F40  
                                 SwTimerIsRunning@timerId 0060  
                                        ___awdiv@quotient 006C  
                                         ___awmod@divisor 0062  
                                         ___awmod@counter 0064  
                        ??_EUSART1_SetOverrunErrorHandler 0062  
                         ?_EUSART1_SetOverrunErrorHandler 0060  
                             __size_of_DIO5_ISR_Lora_Init 0002  
                                             ?_FillSubKey 0060  
                                       ?_SwTimerIsRunning 0001  
                                       ?_ExecuteLinkCheck 0060  
                                         ?_RxJoinResponse 0001  
                                ?_TMR5_HasOverflowOccured 0001  
                                 __size_of_EncodeShiftRow 0164  
                                  __end_of_EnableChannels 92B2  
                              ??_RADIO_UnhandledInterrupt 0064  
                                            ??_HALSPISend 0061  
                    __end_of_INT2_DefaultInterruptHandler 95AC  
                   __size_of_INT2_DefaultInterruptHandler 0002  
                            _INT2_DefaultInterruptHandler 95AA  
                                            __pdataCOMRAM 0054  
                                             RxData@pData 0060  
                                  __end_of_HALSPICSAssert 9594  
                       __size_of_RADIO_SetSpreadingFactor 000A  
                            __size_of_ValidateChannelMask 005E  
                                           ??_SwTimerStop 0060  
                                         ??_INT1_CallBack 0001  
                                       ??_SystemTimerInit 0060  
                               ?_RADIO_SetSpreadingFactor 0001  
                                       ?_SwTimerReadValue 0091  
                                      ??_SwTimerIsRunning 0060  
                                          ?_TMR_SwapTimer 0068  
                         RADIO_FHSSChangeChannel@irqFlags 0079  
                                       ?_ExecuteDutyCycle 0060  
                                      ??_ExecuteLinkCheck 0062  
                                            __mediumconst FE66  
                                                  tblptrh 000FF7  
                                                  tblptrl 000FF6  
                                                  tblptru 000FF8  
                                                  srand@x 0072  
                                         ??_INT2_CallBack 0001  
                                      ??_SwTimerReadValue 0095  
                                         _UpdateDataRange 593A  
                                         ??_EUSART1_Write 0060  
                                  __end_of_ExecuteLinkAdr 3874  
                                      ??_ExecuteDutyCycle 0062  
                TMR1_SetInterruptHandler@InterruptHandler 0060  
               IOCB4_SetInterruptHandler@InterruptHandler 0060  
                INT2_SetInterruptHandler@InterruptHandler 0060  
                INT1_SetInterruptHandler@InterruptHandler 0060  
                      __end_of_LORAWAN_SetChannelIdStatus 8440  
                              _LORAWAN_SetChannelIdStatus 83E6  
                                        ?_PIN_MANAGER_IOC 0001  
                                           AESEncode@aux1 007A  
                                           AESEncode@aux2 0079  
                                           AESEncode@aux3 007B  
                                 __end_of_TMR1_WriteTimer 91BC  
                                   __end_of_SwTimerCreate 771E  
                                               ??_strncat 0007  
                                         _eusart1RxBuffer 014E  
                          ??_SelectChannelForTransmission 00BB  
                                             ?_ComputeMic 00C7  
                           __size_of_INTERRUPT_Initialize 0004  
                                   __end_of_TMR1_CallBack 91DC  
                               ExecuteDutyCycle@maxDCycle 0065  
                                         _eusart1TxBuffer 014F  
                                       ??_RADIO_RxTimeout 00CB  
                                        ?_TMR1_Initialize 0001  
                                 __end_of_TMR5_Initialize 927A  
                             UpdateFrequency@frequencyNew 0060  
                                       _SYSTEM_Initialize 901E  
                        __size_of_CreateAllSoftwareTimers 0052  
                                 __size_of_GenerateSubkey 014C  
                                          ??_LORAWAN_Init 00B6  
                                          ??_LORAWAN_Join 00DB  
                                          ??_LORAWAN_Send 00D7  
                          __size_of_RADIO_FSKPayloadReady 00B4  
                                              __accesstop 0060  
                                 __end_of__initialization 6F46  
                           __end_of_RADIO_FSKPayloadReady 7182  
                                          _RADIO_Transmit 3FEE  
                                               ?_INT1_ISR 0001  
                                               ?_INT2_ISR 0001  
                                    LORAWAN_RxDone@buffer 01F3  
                                  RADIO_ReadRandom@retVal 006F  
                                        _ConfigureRadioRx 8F2C  
                                    __size_of_RADIO_Reset 0046  
                                        _ConfigureRadioTx 8648  
                                     ExecuteDevStatus@ptr 0060  
                        ??_UpdateReceiveWindow2Parameters 0065  
                         ?_UpdateReceiveWindow2Parameters 0060  
                                      ?_SYSTEM_Initialize 0001  
                                    LORAWAN_RxDone@packet 00E8  
                                          _maxPayloadSize FF77  
                           RADIO_SetLoRaSyncWord@syncWord 0060  
                                           ___rparam_used 000001  
                              ValidateChannelId@channelId 0062  
                               ExecuteLinkAdr@channelMask 0073  
                          __size_of_EUSART1_RxDataHandler 0026  
                           __end_of_EUSART1_RxDataHandler 9090  
                                      __end_of_HALSPISend 944C  
                                          __pcstackCOMRAM 0001  
                                              ___inthi_sp 0A28  
                                  _SearchAvailableChannel 5E40  
                                 ValidateChannelId@result 0061  
                                   ?_FindSmallestDataRate 0001  
                                            __pidataBANK1 954E  
                                            __pidataBANK3 8C04  
                                     ??_SYSTEM_Initialize 0062  
                                        _bitStatusbefore1 0140  
                                        _bitStatusbefore2 013E  
                                        _bitStatusbefore3 013C  
                                        _bitStatusbefore4 013A  
                                        _bitStatusbefore5 0138  
                                        _bitStatusbefore6 0136  
                                        _bitStatusbefore7 0134  
                              __end_of_DIO4_ISR_Lora_Init 95A0  
                                               ?_TMR1_ISR 0001  
                                     __size_of_CheckFlags 005E  
                           ?_TMR1_DefaultInterruptHandler 0001  
                                _RADIO_WriteConfiguration 152C  
                                       ??_RADIO_WriteMode 0067  
                                         _spreadingFactor FF8E  
                               __size_of_LORAWAN_Mainloop 003E  
                                        ??_EncKeySchedule 0062  
                   __end_of_IOCB4_DefaultInterruptHandler 95AA  
                  __size_of_IOCB4_DefaultInterruptHandler 0002  
                           _IOCB4_DefaultInterruptHandler 95A8  
                                __end_of_RADIO_WritePower 6790  
                                 ?_ExecuteRxParamSetupReq 00A6  
                                           __end_of_srand 9422  
                                       LORAWAN_RxDone@hdr 00F1  
                                            ??_RADIO_DIO0 00F5  
                                            ??_RADIO_DIO1 00CB  
                                            ??_RADIO_DIO2 007A  
                                            ??_RADIO_DIO3 0065  
                                            ??_RADIO_DIO4 0065  
                                            ??_RADIO_DIO5 0065  
                                  _InitDefault433Channels 7832  
                                         _UpdateFrequency 88F2  
                                  _AutomaticReplyCallback 9044  
                             ??_IOCB4_SetInterruptHandler 0062  
                                    __end_of_EUSART1_Read 8820  
                                ??_INTERRUPT_GetDioStatus 0060  
                                            ??_RADIO_Init 007F  
                               SwTimerSetCallback@timerId 0063  
                              LORAWAN_RxDone@channelIndex 00E0  
                                  ??_EUSART1_Transmit_ISR 0001  
                          AssembleEncryptionBlock@blockId 006F  
                             __size_of_EXT_INT_Initialize 002A  
                                         _UpdateDutyCycle 8936  
                                         ?_EnableChannels 006C  
                                 ??_TMR_OverrideRemaining 006E  
                                          _datatobesolved 004A  
                                 __end_of_ValidateTxPower 8F02  
                                         ?_HALSPICSAssert 0001  
                                      _DIO3_ISR_Lora_Init 95A0  
                            __end_of_HALResetPinMakeInput 959C  
                                 __size_of_TMR1_ReadTimer 0022  
                        __end_of_INT2_SetInterruptHandler 9482  
                                        RADIO_DIO0@opMode 00F8  
                             __end_of_EUSART1_Receive_ISR 3FEE  
                             RADIO_RegisterRead@readValue 0063  
                      __end_of_IncludeMacCommandsResponse 1E8E  
                              _IncludeMacCommandsResponse 1A2C  
                           ?_INT2_DefaultInterruptHandler 0001  
                         __size_of_InitDefault868Channels 008A  
                                UpdateCfList@bufferLength 00A8  
                                        RADIO_DIO2@opMode 007B  
                                   LORAWAN_Send@confirmed 00D9  
                                             ?_ExtractMic 006B  
                                         ?_ExecuteLinkAdr 006F  
                                        _ValidateDataRate 9332  
                         LORAWAN_GetMaxPayloadSize@result 006A  
                                     __size_of_GetRx1Freq 0012  
                               __end_of_SYSTEM_Initialize 9044  
                      __size_of_RADIO_SetChannelFrequency 008A  
                                                 ??_srand 0074  
                                           _eusart1RxHead 0050  
                                  __end_of_RADIO_Transmit 4226  
                                           _eusart1TxHead 0051  
                                       ??_SPI2_Initialize 0060  
                                     ?_DIO3_ISR_Lora_Init 0001  
                                           _eusart1RxTail 004F  
                                           _LORAWAN_Reset 4858  
                              ?_RADIO_SetChannelFrequency 0060  
                                              __pbssBANK1 0100  
                                              __pbssBANK2 0200  
                                              __pbssBANK3 0300  
                                              __pbssBANK4 0400  
                                              __pbssBANK5 0500  
                                           _eusart1TxTail 0150  
                                        RxData@dataLength 0062  
                                     __end_of_SwTimerStop 901E  
                       _EUSART1_TxDefaultInterruptHandler 03F5  
                              ?_SetCallbackSoftwareTimers 0001  
                                 __end_of_CheckMcastFlags 7ACE  
                         ??_EUSART1_SetRxInterruptHandler 0062  
                                         __CFG_PLLCFG$OFF 000000  
                                  __end_of_maxPayloadSize FF7F  
                                              ??_INT1_ISR 0001  
                                              ??_INT2_ISR 0001  
                                      SwTimersInterrupt@i 0090  
                                    _RADIO_SetOutputPower 94DC  
                                  _RADIO_ReceiveStart$521 00B7  
                                    __end_of_RADIO_SetCRC 94FA  
                                  __size_of_DIO0_ISR_Lora 0006  
                                 ??_HALResetPinMakeOutput 0060  
                                    __end_of_RADIO_RxDone 6A4E  
                              __end_of_RADIO_RxFSKTimeout 8C04  
                                    __end_of_RADIO_TxDone 6090  
                                     __size_of_FillSubKey 0062  
                                      __end_of_RADIO_DIO0 768E  
                                      __end_of_RADIO_DIO1 878C  
                                      __end_of_RADIO_DIO2 85A0  
                                      __end_of_RADIO_DIO3 90F8  
                                      __end_of_RADIO_DIO4 8CA4  
                                      __end_of_RADIO_DIO5 8F7E  
                               ??_RADIO_FHSSChangeChannel 0079  
                             __size_of_SwTimerSetCallback 0044  
                               RADIO_SetOutputPower@power 0060  
                              __size_of_SPI2_Exchange8bit 0012  
                                              _dataresult 018B  
                                      __end_of_RADIO_Init 4BF0  
                       __size_of_LORAWAN_SetDeviceAddress 0018  
                         ?_LORAWAN_EnterContinuousReceive 0001  
                        ??_LORAWAN_EnterContinuousReceive 00BB  
                                                 ?_Random 00AD  
                                       ?_CountfOptsLength 0001  
                                  __size_of_DIO1_ISR_Lora 0006  
                                                 ?_RxData 0060  
                                              _bitStatus1 0130  
                                              _bitStatus2 012E  
                                              _bitStatus3 012C  
                                              _bitStatus4 012A  
                                              _bitStatus5 0128  
                                              _bitStatus6 0126  
                                              _bitStatus7 0124  
                         __end_of_EUSART1_SetErrorHandler 94BE  
                               ?_LORAWAN_SetDeviceAddress 0060  
                                        i2_TMR1_ReadTimer 91DC  
                                      __CFG_CCP2MX$PORTC1 000000  
                                          FillSubKey@size 0064  
                                         _EnableChannels1 7DA6  
                                __size_of_HALDIO5PinValue 000C  
                            __size_of_RADIO_RegisterWrite 0020  
                                  ??_UpdateJoinInProgress 0060  
                        __size_of_AssembleEncryptionBlock 00F4  
                                  ??_ExecuteRxTimingSetup 0069  
                                        FillSubKey@source 0060  
            SelectChannelForTransmission@transmissionType 00BB  
                                                 ?___lmul 009A  
                  AssembleEncryptionBlock@multicastStatus 0071  
                          __end_of_ExecuteRxParamSetupReq 466A  
                                      ??_CountfOptsLength 0060  
                                                 ?___wmul 0060  
                                  __size_of_DIO2_ISR_Lora 0006  
                                      EncryptFRMPayload@i 00A5  
                                      EncryptFRMPayload@j 00A6  
                                      EncryptFRMPayload@k 00A4  
                                              ??_TMR1_ISR 0034  
                                      __CFG_CCP3MX$PORTB5 000000  
                                       ??i2_TMR_SwapTimer 000B  
                                    ??_DIO3_ISR_Lora_Init 0060  
                                        _UpdateDLSettings 927A  
                         __end_of_TMR5_HasOverflowOccured 9458  
                                        _ValidateRxOffset 931A  
                                                 ?_memcpy 0060  
                                                 ?_memset 0060  
                                          ___lmul@product 00A2  
                                       _TMR_ISR_Lora_Init 93D2  
                                  RADIO_RegisterWrite@reg 0063  
                                     __size_of_ComputeMic 0062  
                                  RADIO_Transmit@regValue 00C0  
                            __size_of_RADIO_SetModulation 000A  
                                     _RADIO_FSKPacketSent 5D12  
                                                 _AESCmac 223E  
                                  ComputeMic@bufferLength 00CB  
                  __end_of_EUSART1_SetFramingErrorHandler 94B4  
                 __size_of_EUSART1_SetFramingErrorHandler 000A  
                          _EUSART1_SetFramingErrorHandler 94AA  
                                 __end_of_UpdateDataRange 5A88  
                                         ??_TMR_SwapTimer 006A  
                                RADIO_WriteFSKBitRate@num 0071  
                                      ?_TMR_ISR_Lora_Init 0001  
                              ??_INT1_SetInterruptHandler 0062  
                                                 i2l11737 8A66  
                                    EncryptFRMPayload@dir 0094  
                                      _RADIO_GetPacketSnr 9554  
                                    EncryptFRMPayload@key 0099  
                            ?_EUSART1_DefaultErrorHandler 0001  
                                   __end_of_UpdateTxPower 94C8  
                                     _RADIO_SetIQInverted 94E6  
                                                 _OSCCON2 000FD2  
                                 __size_of_ConfigureRadio 00A8  
                                                 _OSCTUNE 000F9B  
                             __size_ofi2_TMR_GetDeltaTime 016C  
                                                 _SPBRGH1 000FB0  
                                     i2_SwTimersInterrupt 62B4  
                                                 _SSP2ADD 000F6E  
                                                 _SSP2BUF 000F6F  
                                     ??_TMR_ISR_Lora_Init 0062  
                                       __end_of_bandwidth FF8E  
                  UpdateReceiveWindow2Parameters@dataRate 0064  
                                __end_of_SetJoinFailState 8D38  
                                          ?_LORAWAN_Reset 0001  
                            RADIO_WriteMode@newModulation 0065  
                                  ValidateDataRate@result 0061  
                                        ?_TMR1_WriteTimer 0060  
                                     ?_RADIO_GetPacketSnr 0001  
                                         ___abdiv@divisor 0060  
                                         ?_RADIO_Transmit 00B1  
                                 _ValidateChannelMaskCntl 913C  
                                         ___abdiv@counter 0063  
                                     StartReTxTimer@minim 009E  
                              AssemblePacket@bufferLength 00CA  
                            PrepareSessionKeys@sessionKey 006B  
                                    ?_RADIO_FSKPacketSent 0001  
                                   TMR_SwapTimer@timerVal 0068  
                                        ?_TMR5_Initialize 0001  
                       __end_of_RADIO_SetChannelFrequency 77A8  
                             PrepareJoinRequestFrame@iCtr 00D9  
                               _IOCB4_SetInterruptHandler 946E  
                       __end_of_SetCallbackSoftwareTimers 6C0A  
                                   ?_RADIO_SetOutputPower 0001  
                               _AckRetransmissionCallback 6090  
                             PrepareJoinRequestFrame@mhdr 00D8  
                                  __size_of_AESEncodeLoRa 0036  
                           __size_of_LORAWAN_PlatformInit 0022  
                                          _ticksAccounted 0104  
                                           ?_SwTimerStart 0001  
                                              AESCmac@key 00B9  
                                              AESCmac@ptr 01ED  
                                 __end_of_spreadingFactor FF95  
                                              _firstdigit 0118  
                                         __CFG_PWRTEN$OFF 000000  
                           UpdateCurrentDataRate@valueNew 0060  
                                                 __Hparam 0000  
                                    ?_RADIO_SetIQInverted 0001  
                              PrepareJoinRequestFrame@mic 00D4  
                                  _InitDefault868Channels 77A8  
                                RADIO_RegisterWrite@value 0062  
                                                 __Lparam 0000  
                                  ??_FindSmallestDataRate 0060  
                                LORAWAN_Send@bufferLength 00D6  
                                   _StopAllSoftwareTimers 869A  
                                         __size_of_Random 0022  
                                         __size_of_RxData 0002  
                                    ?i2_SwTimersInterrupt 0021  
                                 __end_of_UpdateFrequency 8936  
                                     AssemblePacket@fCtrl 00D0  
                                                 ___abdiv 7FB8  
                                              AESEncode@i 007C  
                                                 ___aldiv 6DB4  
                                               _AESEncode 294C  
                                                 ___almod 7182  
                                  ValidateRxOffset@result 0061  
                               __end_of_TMR_ISR_Lora_Init 93E2  
                                                 ___awdiv 78BC  
                                         __size_of___lmul 0058  
                                                 ___awmod 7CC2  
                             __size_of_DIO2_ISR_Lora_Init 0010  
                                 __end_of_UpdateDutyCycle 897A  
                                                 ___lldiv 79C8  
                                     __size_of_ExtractMic 005A  
                                         __size_of___wmul 0028  
                                    ??_RADIO_GetPacketSnr 0060  
                                                 ___llmod 7F50  
                                       ?_RADIO_ReadRandom 006C  
                                                 ___lwmod 897A  
                               SwTimerIsRunning@isRunning 0061  
                                 ??_RADIO_SetLoRaSyncWord 0060  
                                                 _devAddr 03C0  
                                    ValidateChannelMask@i 0064  
                                                 __pcinit 6E82  
                      __size_of_LORAWAN_GetMaxPayloadSize 0060  
                                                 _appSKey 03C7  
                                         _resultdata2send 0116  
                                         __size_of_memcpy 0060  
                              __end_of_RADIO_ReceiveStart 4456  
                                   RADIO_Init@radioBuffer 0079  
                                         __size_of_memset 0030  
                                                 __ramtop 1000  
                                TMR1_ReadTimer@readValLow 0067  
                                        _counterinterrupt 0142  
                        EncryptFRMPayload@multicastStatus 009E  
                                      ??_RADIO_ReadRandom 006E  
                              ?_LORAWAN_GetMaxPayloadSize 0001  
           RADIO_SetFrequencyHopPeriod@frequencyHopPeriod 0060  
                                                 __ptext0 2C96  
                                                 __ptext1 7CC2  
                                                 __ptext2 7182  
                                                 __ptext3 6DB4  
                                                 __ptext4 944C  
                                                 __ptext5 901E  
                                                 __ptext6 925C  
                                                 __ptext7 8E82  
                                                 __ptext8 9422  
                                                 __ptext9 85A0  
                                    __end_of_LORAWAN_Init 820E  
                                    __end_of_LORAWAN_Join 7428  
                                    __end_of_LORAWAN_Send 6DB4  
                                           _DIO0_ISR_Lora 9572  
                          ??_TMR1_DefaultInterruptHandler 0001  
                         RADIO_SetFSKSyncWord@syncWordLen 006D  
                                          _EncodeShiftRow 5678  
                                               _IOCB4_ISR 91FC  
                              ExecuteNewChannel@frequency 00AB  
                               TMR1_ReadTimer@readValHigh 0066  
                         __size_of_INTERRUPT_GetDioStatus 0014  
                                               _T1CONbits 000FCD  
                      SelectChannelForTransmission@result 00BC  
                                                 _counter 014A  
                                 __size_of_LORAWAN_RxDone 0CA6  
                                   _OSCILLATOR_Initialize 9430  
                          __end_of_UpdateJoinSuccessState 5D12  
                                 __size_of_LORAWAN_TxDone 07B2  
                              __end_of_RADIO_SetBandwidth 9522  
                                         _RADIO_GetStatus 955A  
                                        ?_ValidateTxPower 0001  
                                        ___awmod@dividend 0060  
                                 ?_HALResetPinOutputValue 0001  
                            __end_of_macEndDevCmdReplyLen FF9C  
                       __size_of_TMR1_SetInterruptHandler 000A  
                                           _DIO1_ISR_Lora 956C  
                                        ___aldiv@dividend 006A  
                                      _EUSART1_Initialize 7ACE  
                                             _SwTimerStop 8FF6  
                                ??_PIN_MANAGER_Initialize 0062  
                               ?_TMR1_SetInterruptHandler 0060  
                                                 _nwkSKey 03D7  
                             IncludeMacCommandsResponse@i 006D  
                                               _T5CONbits 000F4E  
                                           ?_UpdateCfList 00A6  
                                       _ExecuteNewChannel 3B18  
                             __size_of_PrepareSessionKeys 00AC  
                                            ??_CheckFlags 0062  
                           RADIO_SetModulation@modulation 0060  
                                 UpdateDLSettings@dlRx2Dr 0061  
                           ??_EUSART1_DefaultErrorHandler 0001  
                               __size_of_TMR_GetDeltaTime 01AC  
                                           _DIO2_ISR_Lora 9566  
                              __size_of_SYSTEM_Initialize 0026  
                    __end_of_LORAWAN_SetNetworkSessionKey 8E26  
                   __size_of_LORAWAN_SetNetworkSessionKey 002E  
                            _LORAWAN_SetNetworkSessionKey 8DF8  
                                      ?_ExecuteNewChannel 00A6  
                                                 _strncat 8084  
                              RADIO_WriteMode@currentMode 0069  
                                        ComputeMic@buffer 00C9  
                                    end_of_initialization 6F46  
                                 _CreateAllSoftwareTimers 86EC  
                                     SwTimerCreate@retVal 0060  
                                _INT2_SetInterruptHandler 9478  
                                   ??_RADIO_FSKPacketSent 00E3  
                                     ?_EUSART1_Initialize 0001  
                                          _GenerateSubkey 5A88  
                                   _RADIO_WatchdogTimeout 8820  
                          ??_INT2_DefaultInterruptHandler 0001  
                                              _modulation FF67  
                                        ?_CheckMcastFlags 0060  
                                  ExtractMic@bufferLength 006D  
                                                 memcpy@d 0066  
                                                 memcpy@n 0064  
                                                 memcpy@s 0068  
                                 __end_of_EnableChannels1 7E12  
                                                 memset@c 0062  
                                                 memset@n 0064  
                                                 memset@p 0066  
                               _LORAWAN_LinkCheckCallback 523A  
                             _EUSART1_OverrunErrorHandler 03ED  
                                          ??_SwTimerStart 0091  
                                     ??_ExecuteNewChannel 00A8  
                                               i2u1382_40 80D2  
                                               i2u1711_48 0070  
                                   _UpdateCurrentDataRate 94C8  
                                               i2u1711_49 0084  
                                   _UpdateChannelIdStatus 5512  
                                               i2u1714_48 008E  
                                               i2u1714_49 00A2  
                                               i2u1681_48 91CA  
                                               i2u1690_48 3DB6  
                                               i2u1690_49 3DCA  
                                 ??_RADIO_WriteFSKBitRate 0071  
                                               i2u1675_48 924A  
                                   ??_RADIO_SetIQInverted 0060  
                                               i2u1692_48 3DE4  
                                               i2u1692_49 3DF8  
                                               i2u1677_48 922A  
                              __end_of_DIO1_ISR_Lora_Init 9402  
                                               i2u1694_48 3E12  
                                               i2u1695_45 3EA0  
                                               i2u1679_48 920A  
                                               i2u1696_45 3EBE  
                                               i2u1697_45 3EDC  
                                               i2u1698_45 3F6A  
                                         ___lldiv@divisor 0064  
                                     _ValidateChannelMask 82CE  
                                               i2u1699_45 3F86  
                                              _ticksAdded 0108  
                             HALResetPinOutputValue@value 0060  
                                EncodeShiftRow@stateTable 0060  
                   __end_of_EUSART1_SetRxInterruptHandler 94A0  
                  __size_of_EUSART1_SetRxInterruptHandler 000A  
                           _EUSART1_SetRxInterruptHandler 9496  
                               __size_of_HALSPICSDeassert 0004  
                                ValidateDataRate@dataRate 0060  
                                         ___lldiv@counter 006C  
                             TMR_OverrideRemaining@tmrVal 0070  
                                   ??i2_SwTimersInterrupt 0025  
                                ExecuteLinkAdr@redundancy 0076  
                                       GenerateSubkey@key 0091  
                                    _HALResetPinMakeInput 9598  
                                            ??_GetRx1Freq 0064  
                           UpdateDLSettings@dlRx1DrOffset 0060  
                              LORAWAN_Init@RxJoinResponse 00B4  
                              LORAWAN_RxDone@bufferLength 01F5  
                        __end_of_RADIO_SetSpreadingFactor 9504  
                      AssembleEncryptionBlock@bufferIndex 0073  
                                            RxData@status 0063  
                                        ___aldiv@quotient 0074  
                                                 postdec1 000FE5  
                                                 postdec2 000FDD  
                                              ?_AESEncode 0066  
                                         _SystemTimerInit 9536  
                                                 postinc0 000FEE  
                                                 postinc1 000FE6  
                                                 postinc2 000FDE  
                                   __size_of_EUSART1_Read 004A  
                                        ??_RxJoinResponse 0060  
                                        _LORAWAN_Mainloop 8B4C  
                            __end_of_RADIO_SetFSKSyncWord 8D68  
                                      LORAWAN_Join@result 00DC  
                                      __end_of_CheckFlags 838A  
                                    ??_EUSART1_Initialize 0062  
                               ValidateTxPower@txPowerNew 0061  
                                              _thirddigit 011C  
                                          AESEncode@block 0066  
                       SearchAvailableChannel@maxChannels 00B8  
                                  __end_of_EncodeShiftRow 57DC  
                                      _DIO0_ISR_Lora_Init 9402  
                                       ??_HALDIO5PinValue 0060  
                                          ?_DIO0_ISR_Lora 0001  
                                   _INT1_InterruptHandler 03F9  
                                               _PORTBbits 000F81  
                                            ??_FillSubKey 0065  
                            SwTimersInterrupt@timeElapsed 0088  
                                           _AESEncodeLoRa 8C3C  
                               __size_of_ExecuteDevStatus 000A  
                            __end_of_RADIO_WriteFrequency 6880  
                              __end_of_RADIO_RegisterRead 8FF6  
                       __end_of_LORAWAN_GetMaxPayloadSize 826E  
                          __end_of_HALResetPinOutputValue 9302  
                                              ?_IOCB4_ISR 0001  
                                        ?_UpdateDataRange 0060  
                                __end_of_ConfigureRadioRx 8F56  
                                __end_of_ConfigureRadioTx 869A  
                                         _RADIO_RxTimeout 8E54  
                          UpdateChannelIdStatus@channelId 0062  
                               __end_of_ExecuteNewChannel 3D88  
                                        EnableChannels1@i 006B  
                                 __size_of_AssemblePacket 03B0  
                                          ?_DIO1_ISR_Lora 0001  
                                    ?_ValidateChannelMask 0060  
                                              _testassign 0122  
                                       _SwTimerSetTimeout 8A02  
                                          _TMR1_ReadTimer 911A  
                                          ??_UpdateCfList 00A8  
                                              _txPower433 FF9C  
                                              _txPower868 FFA2  
                                     ?_DIO0_ISR_Lora_Init 0001  
                                         ??_LORAWAN_Reset 00B1  
                                          ?_DIO2_ISR_Lora 0001  
                           __size_of_SystemBlockingWaitMs 0030  
                               ??_ValidateChannelMaskCntl 0060  
                                      ?_SwTimerSetTimeout 006D  
                             __size_of_MacExecuteCommands 02F6  
                                    ExecuteNewChannel@ptr 00A6  
                                ??_UpdateMinMaxChDataRate 0060  
                                  __end_of_GenerateSubkey 5BD4  
                        __size_of_EUSART1_SetErrorHandler 000A  
                                           RADIO_RxDone@i 00F4  
                                     EUSART1_Write@txData 0060  
                                   __size_of_RADIO_SetCRC 000A  
                                 AssemblePacket@macCmdIdx 00D1  
                             ?_LORAWAN_SetChannelIdStatus 0064  
                                          _localDioStatus 0153  
                                      __end_of_GetRx1Freq 93AE  
                                   __size_of_RADIO_RxDone 00E4  
                                            ??_ComputeMic 00CC  
                            __size_of_UpdateReceiveDelays 0042  
                                   __size_of_RADIO_TxDone 0126  
                                  ??_RADIO_SetOutputPower 0060  
                         EncryptFRMPayload@macBufferIndex 009B  
                           ?_LORAWAN_SetNetworkSessionKey 006B  
                                 UpdateMinMaxChDataRate@i 0061  
                                 LORAWAN_Reset@ismBandNew 00B1  
                               __size_of_SwTimerIsRunning 002A  
                              __end_of_ComputeSessionKeys 79C8  
                        __size_of_TMR5_HasOverflowOccured 000C  
                                     ??_SwTimerSetTimeout 0071  
                                __size_of_SwTimersExecute 00EA  
                               __size_of_ExecuteLinkCheck 0032  
                                  _INTERRUPT_GetDioStatus 9374  
                                         _RADIO_WriteMode 63B4  
                              ??_RADIO_WriteConfiguration 00A8  
                                            _EUSART1_Read 87D6  
                                   SPI2_Exchange8bit@data 0060  
                                 ?_SearchAvailableChannel 00AF  
                               __size_of_SwTimerReadValue 0040  
                             RADIO_FSKPacketSent@irqFlags 00EF  
                               __size_of_ExecuteDutyCycle 0054  
                                  ?_StopAllSoftwareTimers 0001  
                                 AssemblePacket@confirmed 00CE  
                                      __end_of_FillSubKey 81AC  
                                 _AssembleEncryptionBlock 65AC  
                                       __size_of_INT1_ISR 0008  
                                       __size_of_INT2_ISR 0008  
                    __size_of_EUSART1_DefaultErrorHandler 0006  
                                    ??_DIO0_ISR_Lora_Init 0062  
                                   ?_HALResetPinMakeInput 0001  
                                          __end_of_STable FF67  
                                     AESEncodeLoRa@useKey 0081  
                              SwTimerSetCallback@callback 0060  
                LORAWAN_SetDeviceAddress@deviceAddressNew 0060  
                                        ?_UpdateFrequency 0060  
                                      LORAWAN_Send@buffer 00D4  
                                          __end_of_Random 911A  
                                          __end_of_RxData 95A6  
                                 ?_InitDefault433Channels 0001  
                              __size_of_TMR_ISR_Lora_Init 0010  
                                __end_of_ValidateDataRate 934A  
                            __end_of_INTERRUPT_Initialize 958C  
                          EnableChannels1@channelMaskCntl 0066  
                          EnableChannels1@channelIndexMax 0068  
                          EnableChannels1@channelIndexMin 0067  
                     LORAWAN_SetChannelIdStatus@channelId 0066  
                                        ?_UpdateDutyCycle 0060  
                              __end_of_DIO5_ISR_Lora_Init 959E  
                                 __end_of_RADIO_GetStatus 9560  
                                          __end_of___lmul 84F2  
                                      LORAWAN_Send@result 00D8  
                                        ??_EnableChannels 006F  
                               i2TMR1_WriteTimer@timerVal 0001  
                                          __end_of___wmul 8FCE  
                                           ?_TMR_ISR_lora 0001  
                                        ??_HALSPICSAssert 0060  
                     TMR_OverrideRemaining@ticksRemaining 006A  
                                       ?_RADIO_WritePower 0001  
                                           __pidataCOMRAM 9584  
                                         ?_EncodeShiftRow 0060  
                                          ?_AESEncodeLoRa 007D  
                                       __size_of_TMR1_ISR 0014  
                                      __end_of_ComputeMic 814A  
                                               Random@max 00AD  
                                          __end_of_memcpy 82CE  
                                  ?_OSCILLATOR_Initialize 0001  
                               __end_of_SwTimerSetTimeout 8A46  
                                  __end_of_TMR1_ReadTimer 913C  
                                          __end_of_memset 8DC8  
                                         _SPI2_Initialize 9422  
                        LORAWAN_SetChannelIdStatus@result 0065  
                                ?_PrepareJoinRequestFrame 0001  
                                      ??_RADIO_WritePower 0064  
                                            _RADIO_SetCRC 94F0  
                                   ??_ValidateChannelMask 0062  
                                        ??_ExecuteLinkAdr 0071  
                                   UpdateCfList@frequency 00A9  
                                            _RADIO_RxDone 696A  
                                            _RADIO_TxDone 5F6A  
LORAWAN_SetApplicationSessionKey@applicationSessionKeyNew 006B  
                                     start_initialization 6E82  
                                          _ConfigureRadio 72DC  
                                      LORAWAN_RxDone@mhdr 00E1  
                                      LORAWAN_RxDone@temp 00E7  
                                      _DIO4_ISR_Lora_Init 959E  
                                __end_ofi2_TMR1_ReadTimer 91FC  
                          __size_of_TMR_OverrideRemaining 009C  
                                     _RADIO_RegisterWrite 917C  
                                            AESCmac@mLast 01AD  
                               ??_CreateAllSoftwareTimers 0061  
                         __size_of_PIN_MANAGER_Initialize 0054  
                           __end_of_TMR_OverrideRemaining 7568  
                             ?_IncludeMacCommandsResponse 0060  
                                   __end_of_INT1_CallBack 925C  
                                            ??_ExtractMic 006F  
                    EncryptFRMPayload@bufferToBeEncrypted 009C  
                                            AESCmac@input 00BD  
                        __end_of_LORAWAN_SetDeviceAddress 931A  
                                         ?_GenerateSubkey 0091  
           EUSART1_SetRxInterruptHandler@interruptHandler 0060  
           EUSART1_SetTxInterruptHandler@interruptHandler 0060  
                            ?_RADIO_SetFrequencyHopPeriod 0060  
                                         LORAWAN_TxDone@i 00E2  
                                   LORAWAN_Init@RxPayload 00B2  
                     AssembleEncryptionBlock@frameCounter 006B  
                                 i2TMR_SwapTimer@timerVal 0009  
                                   __end_of_INT2_CallBack 923C  
                                           ??_RADIO_Reset 0065  
                                __end_of_UpdateDLSettings 9296  
                                   __end_of_EUSART1_Write 8BC8  
                              SwTimerStart@ticksRemaining 0095  
                                  RADIO_WriteMode@newMode 006A  
                                __end_of_ValidateRxOffset 9332  
                             ??_RADIO_SetChannelFrequency 0064  
                             ??_SetCallbackSoftwareTimers 0064  
                                     ?_DIO4_ISR_Lora_Init 0001  
                                     _RADIO_SetModulation 9504  
                           ExecuteNewChannel@channelIndex 00AF  
                          __end_of_SearchAvailableChannel 5F6A  
                                        ?_EnableChannels1 0064  
                                         i2_TMR_SwapTimer 8A46  
                                 __size_of_StartReTxTimer 0182  
                                  ?_UpdateCurrentDataRate 0001  
                                  ?_UpdateChannelIdStatus 0060  
                                         ___llmod@divisor 0064  
                              MacExecuteCommands@fOptsLen 00B2  
                                 _RADIO_FSKPacketSent$536 00EB  
                                 __end_of_SystemTimerInit 953E  
                          UpdateChannelIdStatus@statusNew 0060  
                       __size_of_RADIO_UnhandledInterrupt 0032  
                                         ___llmod@counter 0068  
                                     TMR_SwapTimer@oldVal 0146  
                               ?_RADIO_UnhandledInterrupt 0001  
                                __size_of_PIN_MANAGER_IOC 000A  
                                     TMR_SwapTimer@retVal 0144  
                                   _RADIO_FSKPayloadReady 70CE  
                          __size_of_HALResetPinMakeOutput 0004  
                           __end_of_HALResetPinMakeOutput 9598  
                                                ??_Random 00AF  
                                                ??_RxData 0064  
                                                AESCmac@i 01F2  
                                                AESCmac@j 01F1  
                                                AESCmac@n 01F0  
                                                AESCmac@x 01DD  
                                                AESCmac@y 01CD  
                              SwTimerReadValue@ticksCount 0095  
                                    ?_RADIO_RegisterWrite 0062  
                          __end_of_InitDefault433Channels 78BC  
                          __end_of_AutomaticReplyCallback 906A  
                                     RADIO_Init@frequency 007B  
                                __size_of_TMR1_Initialize 002C  
                                    _macEndDevCmdReplyLen FF95  
                                                ??___lmul 00A2  
                                             ??_AESEncode 006A  
                       RADIO_WriteConfiguration@tempValue 00AC  
                                   __size_of_LORAWAN_Init 0062  
                      __size_of_AckRetransmissionCallback 011E  
                                   __size_of_LORAWAN_Join 00A4  
                                                ??___wmul 0064  
                                   __size_of_LORAWAN_Send 00D2  
                                 __end_of_RADIO_RxTimeout 8E82  
                                MacExecuteCommands@buffer 00B0  
                                   _EUSART1_RxDataHandler 906A  
                          ?_EUSART1_SetRxInterruptHandler 0060  
                                ??_SetReceptionNotOkState 00BB  
                                          ??_TMR_ISR_lora 0032  
                                         ??_DIO0_ISR_Lora 0001  
                                             __pdataBANK1 01F6  
                                             __pdataBANK3 03B0  
                                       _ValidateDataRange 8866  
                                      __end_of_ExtractMic 849A  
                i2SwTimersInterrupt@ticksToNextTimerEvent 002D  
                  SwTimersInterrupt@ticksToNextTimerEvent 008C  
                                                ??_memcpy 0066  
                                  __size_of_SwTimerCreate 0090  
                                                ??_memset 0066  
                                    ??_DIO4_ISR_Lora_Init 0060  
                              __end_of_EXT_INT_Initialize 8ED8  
                                       _ValidateChannelId 9090  
                                    ?_RADIO_SetModulation 0001  
                                _RADIO_SetSpreadingFactor 94FA  
                                      _RADIO_RxFSKTimeout 8BC8  
                                                ?_AESCmac 00B9  
                                  __size_of_TMR1_CallBack 0020  
                                         ??_DIO1_ISR_Lora 0001  
                                      ?_ValidateDataRange 0001  
                                ValidateRxOffset@rxOffset 0060  
                                            AESEncode@aux 0078  
                                            AESEncode@key 0068  
                                  TMR_GetDeltaTime@retVal 0100  
                                         ?_TMR1_ReadTimer 0060  
                                          _eusart1RxCount 014D  
                                             ??_IOCB4_ISR 0001  
                                  __end_of_ConfigureRadio 7384  
                                          _LORAWAN_RxDone 00D4  
                                      ?_ValidateChannelId 0060  
                                  TMR_GetDeltaTime@tmrVal 0148  
                                          _LORAWAN_TxDone 0D7A  
                              __size_of_ExecuteNewChannel 0270  
              LORAWAN_GetMaxPayloadSize@macCommandsLength 0069  
                                    __end_of_SwTimerStart 75FE  
                  __end_of_LORAWAN_EnterContinuousReceive 7C4A  
                 __size_of_LORAWAN_EnterContinuousReceive 007E  
                          _LORAWAN_EnterContinuousReceive 7BCC  
                                             __pbssBIGRAM 0580  
                                         ??_DIO2_ISR_Lora 0001  
                               __size_of_CountfOptsLength 00CA  
                                       CountfOptsLength@i 0067  
                                             __pbssCOMRAM 004A  
                              __end_of_DefaultChannels433 FFD2  
                              __end_of_DefaultChannels868 FFFC  
                       _EUSART1_RxDefaultInterruptHandler 03F3  
                                        ??_RADIO_Transmit 00B4  
                                      LORAWAN_RxTimeout@i 00CA  
                           __size_of_EUSART1_Transmit_ISR 0030  
                                           __pcstackBANK0 0060  
                                           __pcstackBANK1 018D  
                                     ??_ValidateDataRange 0062  
                                        _TMR_GetDeltaTime 4BF0  
                           EnableChannels@channelMaskCntl 006E  
                                 __end_of_RADIO_WriteMode 64B2  
                 __end_of_UnconfirmedTransmissionCallback 7CC2  
                __size_of_UnconfirmedTransmissionCallback 0078  
                         _UnconfirmedTransmissionCallback 7C4A  
                                 SearchAvailableChannel@i 00BA  
                                     ??_ValidateChannelId 0061  
                                   RADIO_RegisterRead@reg 0062  
                         __size_of_UpdateMinMaxChDataRate 00FA  
                     LORAWAN_SetChannelIdStatus@statusNew 0064  
                                               _aesBuffer 03A0  
                                 INTERRUPT_GetDioStatus@a 0060  
                                       ?_SetJoinFailState 0001  
                                     SwTimerStart@timerId 0099  
                           ??_RADIO_SetFrequencyHopPeriod 0062  
                         ??_EUSART1_SetTxInterruptHandler 0062  
                                    _RADIO_SetFSKSyncWord 8D38  
                             RADIO_SetBandwidth@bandwidth 0060  
                        ??_EUSART1_SetFramingErrorHandler 0062  
                         ?_EUSART1_SetFramingErrorHandler 0060  
                              __end_of_SwTimerSetCallback 8A02  
                            __size_of_EUSART1_Receive_ISR 0266  
       __end_of_ResetParametersForUnconfirmedTransmission 9374  
      __size_of_ResetParametersForUnconfirmedTransmission 0014  
              ?_ResetParametersForUnconfirmedTransmission 0001  
             ??_ResetParametersForUnconfirmedTransmission 0060  
               _ResetParametersForUnconfirmedTransmission 9360  
                               ??_AssembleEncryptionBlock 0072  
                                   _INT2_InterruptHandler 03F7  
                                               _bandwidth FF87  
                                      ??_SetJoinFailState 0060  
                                 ?_InitDefault868Channels 0001  
                                            _LORAWAN_Init 81AC  
                                            _LORAWAN_Join 7384  
                                            _LORAWAN_Send 6CE2  
                                  RADIO_FSKPayloadReady@i 00F4  
                                       _ValidateFrequency 801E  
                                               __pnvBANK1 01FC  
                                               __pnvBANK3 03E7  
                                  ??_HALResetPinMakeInput 0060  
                                    _RADIO_WriteFrequency 6790  
                                         FillSubKey@carry 0066  
                                        _HALSPICSDeassert 958C  
                          ??_LORAWAN_SetNetworkSessionKey 006D  
                                     __end_of_RADIO_Reset 88F2  
                                   ??_RADIO_RegisterWrite 0063  
                                  _PIN_MANAGER_Initialize 85A0  
                                           FillSubKey@key 0062  
                                      ?_ValidateFrequency 0060  
                                               _bitStatus 0132  
                                    __end_of_UpdateCfList 4858  
                     RADIO_WriteFSKFrequencyDeviation@num 0071  
                               EnableChannels@channelMask 006C  
                                               _macBuffer 068F  
                                               _dioStatus 0154  
                               __end_of_ValidateDataRange 88AC  
                           RADIO_FSKPayloadReady@irqFlags 00F3  
                                       _SwTimersInterrupt 61AE  
                                       ??_SwTimersExecute 00DA  
                                               __pintcode 0008  
                                                ?___abdiv 0060  
                        __end_of_TMR1_SetInterruptHandler 946E  
                                           __pmediumconst FE66  
                                                ?___aldiv 006A  
                                 RADIO_Transmit@bufferLen 00B3  
                                 __end_of_SPI2_Initialize 9430  
                                                ?___almod 0060  
                                                ?___awdiv 0066  
                                               __ptext100 1E8E  
                                               __ptext101 1A2C  
                                               __ptext110 7230  
                                               __ptext102 9554  
                               __end_of_ValidateChannelId 90B4  
                                               __ptext111 7A4C  
                                               __ptext103 6A4E  
                                               __ptext200 86EC  
                                               __ptext120 9360  
                                               __ptext112 832C  
                                               __ptext104 4F2C  
                                               __ptext201 768E  
                                               __ptext121 93AE  
                                               __ptext113 5D12  
                                               __ptext105 78BC  
                                               __ptext210 62B4  
                                               __ptext202 8B8A  
                                               __ptext130 5E40  
                                               __ptext122 9560  
                                               __ptext114 0D7A  
                                               __ptext106 65AC  
                                               __ptext211 53A6  
                                               __ptext131 8648  
                                               __ptext123 915C  
                                               __ptext115 8B0C  
                                               __ptext107 6F4C  
                                               __ptext220 95AA  
                                               __ptext212 91DC  
                                               __ptext204 9388  
                                               __ptext140 771E  
                                               __ptext132 94DC  
                                               __ptext124 4226  
                                               __ptext116 8F02  
                                               __ptext108 8440  
                                               __ptext221 9546  
                                               __ptext213 952C  
                                               __ptext205 91BC  
                                               __ptext141 9518  
                                               __ptext133 94E6  
                                               __ptext125 8F2C  
                                               __ptext117 955A  
                                               __ptext109 7942  
                                               __ptext230 95AE  
                                               __ptext222 923C  
                                               __ptext214 91FC  
                                               __ptext206 95A6  
                                               __ptext150 897A  
                                               __ptext142 3FEE  
                                               __ptext134 94F0  
                                               __ptext126 9374  
                                               __ptext118 7BCC  
                                               __ptext231 957E  
                                               __ptext223 9572  
                                               __ptext215 9566  
                                               __ptext207 84F2  
                                               __ptext151 80E8  
                                               __ptext143 152C  
                                               __ptext135 72DC  
                                               __ptext127 7384  
                                               __ptext119 95A4  
                                               __ptext232 906A  
                                               __ptext224 95AC  
                                               __ptext216 95A8  
                                               __ptext208 8A46  
                                               __ptext160 9412  
                                               __ptext152 223E  
                                               __ptext144 66A0  
                                               __ptext136 94FA  
                                               __ptext128 92CE  
                                               __ptext233 0000  
                                               __ptext225 8DC8  
                                               __ptext217 953E  
                                               __ptext209 92B2  
                                               __ptext161 6B2C  
                                               __ptext153 5A88  
                                               __ptext145 7E7E  
                                               __ptext137 9504  
                                               __ptext129 7E12  
                                               __ptext226 3D88  
                                               __ptext218 921C  
                                               __ptext170 8FCE  
                                               __ptext162 7428  
                                               __ptext154 814A  
                                               __ptext146 7EE8  
                                               __ptext138 950E  
                                               __ptext227 8084  
                                               __ptext219 956C  
                                               __ptext171 9458  
                                               __ptext163 4858  
                                               __ptext155 8C3C  
                                               __ptext147 4D9C  
                                               __ptext139 8D38  
                                               __ptext228 87D6  
                                               __ptext180 8D68  
                                               __ptext172 6790  
                                               __ptext164 64B2  
                                               __ptext156 294C  
                                               __ptext148 90F8  
                                               __ptext229 9578  
                                               __ptext181 92E8  
                                               __ptext173 7F50  
                                               __ptext165 869A  
                                               __ptext157 5678  
                                               __ptext149 838A  
                                               __ptext190 878C  
                                               __ptext182 9594  
                                               __ptext174 917C  
                                               __ptext166 9522  
                                               __ptext158 3874  
                                               __ptext191 919C  
                                               __ptext183 9598  
                                               __ptext175 943E  
                                               __ptext167 4A26  
                                               __ptext159 81AC  
                                               __ptext192 61AE  
                                               __ptext184 57DC  
                                               __ptext176 93C0  
                                               __ptext168 89BE  
                                               __ptext193 4BF0  
                                               __ptext185 849A  
                                               __ptext177 958C  
                                               __ptext169 63B4  
                                               __ptext194 911A  
                                               __ptext186 79C8  
                                               __ptext178 9590  
                                               __ptext195 8A02  
                                               __ptext187 8FF6  
                                               __ptext179 88AC  
                                                ?___awmod 0060  
                                               __ptext196 77A8  
                                               __ptext188 7568  
                                               __ptext197 7832  
                                               __ptext189 74CC  
                                               __ptext198 8D98  
                                               __ptext199 826E  
                                       _EncryptFRMPayload 4F2C  
                                                ?___lldiv 0060  
                            RADIO_FSKPacketSent@timeOnAir 00E7  
                           __size_of_UpdateJoinInProgress 001A  
                                                ?___llmod 0060  
                           __size_of_ExecuteRxTimingSetup 0028  
                                         ??_AESEncodeLoRa 0081  
                SelectChannelForTransmission@channelIndex 00BD  
                         __end_of_PrepareJoinRequestFrame 4F2C  
                                                ?___lwmod 00A8  
                                      ?_SwTimersInterrupt 0080  
                               _RADIO_SetChannelFrequency 771E  
                             __size_of_DIO3_ISR_Lora_Init 0002  
                   IncludeMacCommandsResponse@bufferIndex 006E  
                               _SetCallbackSoftwareTimers 6B2C  
                                      ConfigureRadio@freq 006E  
                                   ??_RADIO_SetModulation 0060  
                                        ?_RADIO_GetStatus 0001  
                                  __end_of_LORAWAN_RxDone 0D7A  
                                     ??_ValidateFrequency 0064  
                                  __end_of_LORAWAN_TxDone 152C  
                                      ?_EncryptFRMPayload 0091  
                            ??_INTERRUPT_InterruptManager 0034  
                                        ___almod@dividend 0060  
                                        __CFG_PRICLKEN$ON 000000  
                            __end_of_LORAWAN_PlatformInit 90D6  
                          __size_of_RADIO_SetLoRaSyncWord 000A  
                                        _ExecuteDevStatus 94D2  
                           __end_of_RADIO_SetLoRaSyncWord 952C  
                  IncludeMacCommandsResponse@pBufferIndex 0062  
                              __size_of_SwTimerSetTimeout 0044  
                             ??_LORAWAN_GetMaxPayloadSize 0068  
                          LORAWAN_LinkCheckConfigure@iCtr 00B0  
                        ExecuteRxParamSetupReq@dlSettings 00AE  
                                          _AssemblePacket 1E8E  
                                         ?_ConfigureRadio 006E  
                               AssemblePacket@bufferIndex 00D2  
                              ??_INT2_SetInterruptHandler 0062  
                                                _BAUDCON1 000FB8  
                              __end_ofi2_TMR_GetDeltaTime 5512  
              __end_of_EUSART1_DefaultOverrunErrorHandler 957E  
             __size_of_EUSART1_DefaultOverrunErrorHandler 0006  
                    ??_EUSART1_DefaultOverrunErrorHandler 0001  
                     ?_EUSART1_DefaultOverrunErrorHandler 0001  
                      _EUSART1_DefaultOverrunErrorHandler 9578  
                                     ??_SwTimersInterrupt 0084  
                                    RADIO_DIO0@dioMapping 00F7  
                                       _DutyCycleCallback 2FB0  
                                 InitDefault433Channels@i 006B  
                                    _EUSART1_ErrorHandler 03EB  
                                   __end_of_TMR_SwapTimer 87D6  
                                            ?_SwTimerStop 0001  
                                     ??_EncryptFRMPayload 009F  
                                 _EUSART1_SetErrorHandler 94B4  
                                 __end_ofi2_TMR_SwapTimer 8A8A  
                                 __size_of_EncKeySchedule 02A4  
                                      AssemblePacket@mhdr 00CF  
                                             strncat@from 0003  
                                      AssemblePacket@port 00C7  
                               __size_of_RADIO_ReadRandom 00A4  
                                             strncat@size 0005  
                                ConfigureRadioRx@dataRate 0077  
                                      _RADIO_ReceiveStart 4226  
                                                ?_strncat 0001  
                                          __size_of_srand 0010  
                                __end_of_LORAWAN_Mainloop 8B8A  
                                   ?_RADIO_SetFSKSyncWord 006B  
                                    _INTERRUPT_Initialize 9588  
                                           _SwTimerCreate 768E  
                          __end_of_InitDefault868Channels 7832  
                     IncludeMacCommandsResponse@macBuffer 0060  
                                 _TMR5_HasOverflowOccured 944C  
                                ?_RADIO_FHSSChangeChannel 0001  
                           ValidateFrequency@frequencyNew 0060  
                                           _TMR1_CallBack 91BC  
                                         ___aldiv@divisor 006E  
                               __end_of_ValidateFrequency 8084  
                                        _SwTimerIsRunning 8F02  
                                        _ExecuteLinkCheck 8CD6  
                                         ___aldiv@counter 0072  
                                    i2SwTimersInterrupt@i 0031  
                                                _INT1_ISR 9546  
                                _LORAWAN_SetDeviceAddress 9302  
                                                _INT2_ISR 953E  
                                       EncKeySchedule@key 0060  
                                          ___wmul@product 0064  
                                                _IOCBbits 000F62  
                                      _RADIO_SetBandwidth 9518  
                 EUSART1_SetErrorHandler@interruptHandler 0060  
                                  ?_RADIO_FSKPayloadReady 0001  
                       __size_of_INT1_SetInterruptHandler 000A  
                                    __end_of_rxWindowSize FF87  
                                   ?_RADIO_WriteFrequency 006D  
                               ?_INT1_SetInterruptHandler 0060  
                                        ?_SystemTimerInit 0001  
                                               _reloadVal 004C  
                                     ?_RADIO_ReceiveStart 00B1  
                                        _SwTimerReadValue 8B0C  
                                                _PIE1bits 000F9D  
                                        _ExecuteDutyCycle 85F4  
                                         _HALDIO5PinValue 9458  
                                    RADIO_DIO1@dioMapping 00CC  
                               __end_of_SwTimersInterrupt 62B4  
                                __size_of_TMR1_WriteTimer 0020  
                     __size_of_INTERRUPT_InterruptManager 00C4  
                              __end_of_DIO2_ISR_Lora_Init 93F2  
                                                _PIR1bits 000F9E  
                                        GenerateSubkey@k1 0093  
                                        GenerateSubkey@k2 0095  
                                    ConfigureRadioRx@freq 0073  
                               __end_of_EncryptFRMPayload 50B8  
                                                _PIR5bits 000F7E  
                          __size_of_RADIO_WriteFSKBitRate 0068  
                                UpdateReceiveDelays@delay 0066  
                               LORAWAN_RxDone@bufferIndex 00E6  
                                  __size_of_UpdateTxPower 000A  
                           __end_of_RADIO_WriteFSKBitRate 7F50  
                                    ConfigureRadioTx@freq 0073  
                                  ?_EUSART1_RxDataHandler 0001  
                             UpdateDataRange@dataRangeNew 0060  
                                __size_of_TMR5_Initialize 001E  
                                                _RCONbits 000FD0  
                                     ?_RADIO_SetBandwidth 0001  
                      SearchAvailableChannel@channelIndex 00B0  
                                               _rxPayload 010C  
                                        __CFG_WDTPS$32768 000000  
                                  _UpdateMinMaxChDataRate 64B2  
                           EncryptFRMPayload@bufferLength 0093  
                                 ValidateDataRange@result 0062  
                                                _SSP2CON1 000F6C  
                             UpdateDutyCycle@dutyCycleNew 0060  
              ValidateChannelId@allowedForDefaultChannels 0060  
                           __size_of_FindSmallestDataRate 00DE  
                                                _TMR1_ISR 9388  
                                ConfigureRadioTx@dataRate 0077  
                    __size_of_RADIO_SetFrequencyHopPeriod 000A  
                                   ValidateTxPower@result 0060  
                                        ?_RADIO_RxTimeout 0001  
                     __size_of_IncludeMacCommandsResponse 0462  
                                                _SSP2STAT 000F6D  
                            ??_LORAWAN_LinkCheckConfigure 00A8  
                                       ??_PIN_MANAGER_IOC 0001  
                             __size_of_RADIO_GetPacketSnr 0006  
                                     _UpdateReceiveDelays 8A8A  
                         __size_of_SetReceptionNotOkState 007E  
                                  __end_of_AssemblePacket 223E  
                                         ?_LORAWAN_RxDone 01F3  
                                         ?_LORAWAN_TxDone 00BB  
                                       ??_TMR1_Initialize 0062  
                                        ___abdiv@dividend 0066  
                                      _DIO1_ISR_Lora_Init 93F2  
                               __end_of_DutyCycleCallback 32B6  
                                       ___wmul@multiplier 0060  
                                        __size_of_AESCmac 03AA  
                                    ??_RADIO_ReceiveStart 00B3  
                                 ValidateFrequency@result 0064  
                              __end_of_PrepareSessionKeys 72DC  
                                       ?_ConfigureRadioRx 0073  
                                       ?_ConfigureRadioTx 0073  
                                    RADIO_DIO2@dioMapping 007C  
                                      AESEncodeLoRa@block 007D  
                                                _Channels 0400  
                             __end_of_RADIO_FSKPacketSent 5E40  
                 RADIO_SetSpreadingFactor@spreadingFactor 0060  
                                      ??_ConfigureRadioRx 0077  
                                      ??_ConfigureRadioTx 0077  
                                    ??_RADIO_SetBandwidth 0060  
                                     ?_DIO1_ISR_Lora_Init 0001  
                           RADIO_SetIQInverted@iqInverted 0060  
                                        ?_RADIO_WriteMode 0065  
                               LORAWAN_RxDone@computedMic 00EA  
                                       ___lmul@multiplier 009A  
                                             _INTCON2bits 000FF1  
                                             _INTCON3bits 000FF0  
                                          ?_SwTimerCreate 0001  
                                               copy_data0 6E96  
                                               copy_data1 6EB6  
                                               copy_data2 6ED6  
                                     _EncKeySchedule$2132 0064  
                                   ?_INTERRUPT_Initialize 0001  
                                 ?_INTERRUPT_GetDioStatus 0001  
                                    ?_UpdateReceiveDelays 0001  
                             __end_of_RADIO_SetIQInverted 94F0  
                                          ?_TMR1_CallBack 0001  
                                    __end_of_TMR_ISR_lora 854A  
                                             _RADIO_Reset 88AC  
                                     ExecuteLinkCheck@ptr 0060  
                          i2SwTimersInterrupt@timeElapsed 0029  
                                      _RADIO_RegisterRead 8FCE  
                                __size_of_ValidateTxPower 002A  
                                 ??_StopAllSoftwareTimers 0061  
                                          _StartReTxTimer 50B8  
                             __end_ofi2_SwTimersInterrupt 63B4  
                               _LORAWAN_GetMaxPayloadSize 820E  
                              LORAWAN_RxDone@extractedMic 00E2  
                                             AESCmac@flag 01EF  
                           EncryptFRMPayload@frameCounter 0095  
                                   EUSART1_Read@readValue 0001  
                                      CheckMcastFlags@hdr 0060  
                                             AESCmac@size 00BF  
                                SwTimerSetTimeout@timerId 0075  
                                SwTimerSetTimeout@timeout 006D  
                                   RADIO_WriteMode@opMode 006B  
                                ??_ExecuteRxParamSetupReq 00A8  
                     __size_of_LORAWAN_LinkCheckConfigure 015E  
                                        ___abdiv@quotient 0065  
                 UpdateReceiveWindow2Parameters@frequency 0060  
                   __end_of_EUSART1_SetTxInterruptHandler 9496  
                  __size_of_EUSART1_SetTxInterruptHandler 000A  
                           _EUSART1_SetTxInterruptHandler 948C  
                                    RADIO_DIO3@dioMapping 0066  
                                                __Hrparam 0000  
                                     ?_RADIO_RegisterRead 0001  
                            __end_of_SystemBlockingWaitMs 8D98  
                  ValidateChannelMaskCntl@channelMaskCntl 0061  
                                       i2_TMR1_WriteTimer 92B2  
                                               memcpy@tmp 006A  
                                                __Lrparam 0000  
                                        ??_EncodeShiftRow 0062  
                                    ??_DIO1_ISR_Lora_Init 0062  
                                __size_of_CheckMcastFlags 0082  
                                      __CFG_BOREN$SBORDIS 000000  
                                   TMR1_ReadTimer@readVal 0064  
                              __size_of_ValidateDataRange 0046  
                               _ticksToScheduledInterrupt 0054  
                                       __CFG_P2BMX$PORTD2 000000  
                            ValidateDataRange@dataRateMax 0064  
                            ValidateDataRange@dataRateMin 0065  
                              __size_of_ValidateChannelId 0024  
                                        ?_SPI2_Initialize 0001  
                                      ?i2_TMR1_WriteTimer 0001  
                                        __size_of___abdiv 0066  
                                 ??_OSCILLATOR_Initialize 0060  
                                       ?_ValidateDataRate 0001  
                                        __size_of___aldiv 00CE  
                                        __size_of___almod 00AE  
                                        __size_of___awdiv 0086  
                                      _ComputeSessionKeys 7942  
                                   __size_of_SwTimerStart 0096  
                                        __size_of___awmod 0072  
                                        __size_of___lldiv 0084  
                                        __size_of___llmod 0068  
                             __size_of_EUSART1_Initialize 0080  
                                        __size_of___lwmod 0044  
                                         ?_AssemblePacket 00C7  
                                    AssemblePacket@buffer 00C8  
                                        SwTimersExecute@i 00DE  
                                      ??_ValidateDataRate 0060  
                                _TMR1_SetInterruptHandler 9464  
                                  _IOCB4_InterruptHandler 03F1  
                                             _radioBuffer 0580  
                                     ??i2_TMR1_WriteTimer 0003  
         __end_of_ResetParametersForConfirmedTransmission 93C0  
        __size_of_ResetParametersForConfirmedTransmission 0012  
                ?_ResetParametersForConfirmedTransmission 0001  
               ??_ResetParametersForConfirmedTransmission 0060  
                 _ResetParametersForConfirmedTransmission 93AE  
                                   _TMR1_InterruptHandler 03E9  
                               ??_EUSART1_SetErrorHandler 0062  
                                        ??_GenerateSubkey 0097  
                     __end_of_EUSART1_DefaultErrorHandler 9584  
                             _EUSART1_DefaultErrorHandler 957E  
                                        _CountfOptsLength 6F4C  
                                              _HALSPISend 943E  
                                     ?_ComputeSessionKeys 0091  
                                          _rxWindowOffset FF6F  
                      RADIO_UnhandledInterrupt@modulation 0064  
                              __end_of_MacExecuteCommands 35AC  
                                    ??_RADIO_RegisterRead 0062  
                                    RADIO_DIO4@dioMapping 0067  
                        __end_of_RADIO_UnhandledInterrupt 8CD6  
                                           _UpdateTxPower 94BE  
                                                _dataxstr 0540  
                                    RADIO_Transmit@buffer 00B1  
                         __end_of_RADIO_FHSSChangeChannel 8B0C  
                                         _allocatedTimers 0152  
                          ?_IOCB4_DefaultInterruptHandler 0001  
                          __end_of_INTERRUPT_GetDioStatus 9388  
                                       ?i2_TMR1_ReadTimer 0001  
                               ??_TMR5_HasOverflowOccured 0060  
                                      _DIO5_ISR_Lora_Init 959C  
                                                __ptext10 9430  
                                                __ptext11 90B4  
                                                __ptext20 93F2  
                                                __ptext12 93D2  
                                                __ptext21 9402  
                                                __ptext13 9464  
                                              _T1GCONbits 000FCC  
                                                __ptext30 94AA  
                                                __ptext22 9588  
                                                __ptext14 9536  
                                                __ptext31 94B4  
                                                __ptext23 8EAE  
                                                __ptext15 959C  
                                                __ptext40 6090  
                                                __ptext32 8DF8  
                                                __ptext24 9478  
                                                __ptext16 959E  
                                                __ptext41 523A  
                                                __ptext33 9302  
                                                __ptext25 9482  
                                                __ptext17 95A0  
                                                __ptext50 90D6  
                                                __ptext42 6C0A  
                                                __ptext34 8E26  
                                                __ptext26 7ACE  
                                                __ptext18 93E2  
                                                __ptext51 854A  
                                                __ptext43 7016  
                                                __ptext35 8B4C  
                                                __ptext27 948C  
                                                __ptext19 946E  
                                                __ptext60 70CE  
                                                __ptext52 873E  
                                                __ptext44 8820  
                                                __ptext36 6880  
                                                __ptext28 9496  
                                                __ptext61 25E8  
                                                __ptext53 8E54  
                                                __ptext45 8BC8  
                                                __ptext37 2FB0  
                                                __ptext29 94A0  
                                                __ptext70 32B6  
                                                __ptext62 00D4  
                                                __ptext54 8ACC  
                                                __ptext46 7C4A  
                                                __ptext38 5BD4  
                                        ?i2_TMR_SwapTimer 0009  
                                                __ptext71 8F7E  
                                                __ptext63 7D34  
                                                __ptext55 75FE  
                                                __ptext47 939C  
                                                __ptext39 9044  
                                                __ptext80 88F2  
                                                __ptext72 8A8A  
                                                __ptext64 927A  
                                                __ptext56 8CA4  
                                                __ptext48 8F56  
                                                __ptext81 8936  
                                                __ptext73 8FA6  
                                                __ptext65 466A  
                                                __ptext57 5F6A  
                                                __ptext49 8C72  
                                                __ptext90 82CE  
                                                __ptext82 593A  
                                                __ptext74 4456  
                                                __ptext66 50B8  
                                                __ptext58 696A  
                                                __ptext91 94BE  
                                                __ptext83 83E6  
                                                __ptext75 931A  
                                                __ptext67 7B4E  
                                                __ptext59 7FB8  
                                                __ptext92 94C8  
                                                __ptext84 9090  
                                                __ptext76 934A  
                                                __ptext68 8D08  
                                                __ptext93 9296  
                                                __ptext85 8CD6  
                                                __ptext77 3B18  
                                                __ptext69 95A2  
                                                __ptext94 7DA6  
                                                __ptext86 35AC  
                                                __ptext78 801E  
                                                __ptext95 5512  
                                                __ptext87 8ED8  
                                                __ptext79 8866  
                                                __ptext96 85F4  
                                                __ptext88 9332  
                                                __ptext97 94D2  
                                                __ptext89 913C  
                                                __ptext98 6CE2  
                                                __ptext99 820E  
                                 ExecuteRxTimingSetup@ptr 0067  
                                  ??_RADIO_SetFSKSyncWord 006D  
                                   ??_UpdateReceiveDelays 0066  
                                   __end_of_LORAWAN_Reset 4A26  
                                  __end_of_StartReTxTimer 523A  
                                 ??_UpdateCurrentDataRate 0060  
                                 ??_UpdateChannelIdStatus 0061  
                                __size_of_UpdateDataRange 014E  
                                  _SetReceptionNotOkState 7B4E  
                                            _SSP2CON1bits 000F6C  
                                     GenerateSubkey@F7103 03B0  
                                         ___almod@divisor 0064  
                                      ??i2_TMR1_ReadTimer 0003  
                               __size_of_RADIO_WritePower 00F0  
                                 __end_of_HALDIO5PinValue 9464  
                                         ___almod@counter 0068  
                                        __size_of_strncat 0064  
                                       ?_UpdateDLSettings 0060  
                                  ConfigureRadio@dataRate 0072  
                                       ?_ValidateRxOffset 0001  
                                                _countera 0204  
                              __size_of_ValidateFrequency 0066  
                        __size_of_PrepareJoinRequestFrame 0190  
                                           CheckFlags@hdr 0060  
                                             _fourthdigit 011E  
                                  ??_RADIO_WriteFrequency 0071  
                                   __size_of_UpdateCfList 01EE  
                                     ?_DIO5_ISR_Lora_Init 0001  
                           __size_of_RADIO_SetOutputPower 000A  
                                           __size_of_main 031A  
                                           __size_of_rand 005C  
                                              _T5GCONbits 000F4D  
                                       _RADIO_ReceiveStop 915C  
                                      ??_UpdateDLSettings 0061  
                                    _LORAWAN_PlatformInit 90B4  
                                         _FskSyncWordBuff FFFC  
                                      ??_ValidateRxOffset 0060  
                               __end_ofi2_TMR1_WriteTimer 92CE  
               IncludeMacCommandsResponse@bIncludeInFopts 0064  
                                    ??_ComputeSessionKeys 0093  
                                           _timerOverflow 0053  
                                            _SwTimerStart 7568  
                              __size_of_SwTimersInterrupt 0106  
                                      ?_RADIO_ReceiveStop 0001  
                              ??_RADIO_SetSpreadingFactor 0060  
                                    RADIO_DIO5@dioMapping 0066  
                                   RADIO_TxDone@timeOnAir 00E7  
                          ValidateChannelMask@channelMask 0060  
                             __size_of_DIO0_ISR_Lora_Init 0010  
                              __size_of_EncryptFRMPayload 018C  
                                         GenerateSubkey@i 00B8  
                                         GenerateSubkey@l 00A8  
          EUSART1_SetOverrunErrorHandler@interruptHandler 0060  
                                 PrepareSessionKeys@index 0071  
                                __end_of_TMR_GetDeltaTime 4D9C  
                                      SwTimerStop@timerId 0060  
                                                _swTimers 0300  
                                        ??_TMR1_ReadTimer 0062  
        LORAWAN_SetNetworkSessionKey@networkSessionKeyNew 006B  
                                    RADIO_RxDone@irqFlags 00F3  
                                                _testtest 01FA  
                             __end_of_ValidateChannelMask 832C  
                                           UpdateCfList@i 00AE  
                      __end_of_INTERRUPT_InterruptManager 00CC  
                              _INTERRUPT_InterruptManager 0008  
                                     ??_RADIO_ReceiveStop 006C  
                             PrepareSessionKeys@networkId 006F  
                                       _RADIO_ReleaseData 9560  
                                       ??_TMR1_WriteTimer 0062  
                             _EUSART1_FramingErrorHandler 03EF  
                                              _RADIO_DIO0 75FE  
                                              _RADIO_DIO1 873E  
                                     _EUSART1_Receive_ISR 3D88  
                                              _RADIO_DIO2 854A  
                                              _RADIO_DIO3 90D6  
                                              _RADIO_DIO4 8C72  
                                              _RADIO_DIO5 8F56  
                                            _SSP2STATbits 000F6D  
                                    ??_DIO5_ISR_Lora_Init 0060  
                    __end_of_INT1_DefaultInterruptHandler 95AE  
                   __size_of_INT1_DefaultInterruptHandler 0002  
                            _INT1_DefaultInterruptHandler 95AC  
                       __size_of_RADIO_WriteConfiguration 0500  
                                  __end_of_rxWindowOffset FF77  
                             i2TMR1_ReadTimer@readValHigh 0007  
                                       ??_TMR5_Initialize 0060  
                              __size_of_DutyCycleCallback 0306  
                                 EncryptFRMPayload@buffer 0091  
                                      ?_RADIO_ReleaseData 0001  
                               ?_RADIO_WriteConfiguration 00A6  
                                      __end_of_modulation FF6F  
                                              _RADIO_Init 4A26  
                         ExecuteRxParamSetupReq@frequency 00AA  
                                __size_of_UpdateFrequency 0044  
                                ?_ValidateChannelMaskCntl 0001  
                                           __roundCounter 0151  
                                              _INTCONbits 000FF2  
                                 ConfigureRadioTx@txPower 0078  
                                             _seconddigit 011A  
                                __end_of_HALSPICSDeassert 9590  
                                __size_of_UpdateDutyCycle 0044  
                                          ?_UpdateTxPower 0001  
                                                memcpy@d1 0060  
                                                memcpy@s1 0062  
                                          _EncKeySchedule 3874  
                      __size_of_SetCallbackSoftwareTimers 00DE  
                                 __size_of_RxJoinResponse 0002  
                                         ??_SwTimerCreate 0060  
                                     ExecuteDutyCycle@ptr 0060  
                                            _UpdateCfList 466A  
                                     ??_RADIO_ReleaseData 0060  
                                  ??_INTERRUPT_Initialize 0060  
                                                memset@p1 0060  
                                         ??_TMR1_CallBack 0034  
                                    __size_of_SwTimerStop 0028  
                                        _RADIO_ReadRandom 7428  
                                      _EXT_INT_Initialize 8EAE  
                                         ?_StartReTxTimer 0001  
                                   _TMR_OverrideRemaining 74CC  
                                                intlevel2 0000  
                          RADIO_ReceiveStart@rxWindowSize 00B1  
                               __end_of_RADIO_ReceiveStop 917C  
                                         _SwTimersExecute 6880  
                     SwTimerSetCallback@callbackParameter 0062  
                                    ?_EUSART1_Receive_ISR 0001  
                                             FillSubKey@i 0067  
                           RADIO_WriteFrequency@frequency 006D  
                                        ___lwmod@dividend 00A8  
                                   ?_LORAWAN_PlatformInit 0001  
                                        ___lldiv@dividend 0060  
                                __end_of_ExecuteDevStatus 94DC  
                                 ?_PIN_MANAGER_Initialize 0001  
                                      _DefaultChannels433 FFA8  
                                      _DefaultChannels868 FFD2  
                                     ?_EXT_INT_Initialize 0001  
                                            ___abdiv@sign 0064  
                  __end_of_EUSART1_SetOverrunErrorHandler 94AA  
                 __size_of_EUSART1_SetOverrunErrorHandler 000A  
                          _EUSART1_SetOverrunErrorHandler 94A0  
                                UpdateDutyCycle@channelId 0062  
                                              _RCSTA1bits 000FAB  
                                  GenerateSubkey@const_Rb 0098  
                         __size_of_ExecuteRxParamSetupReq 0214  
                                               strncat@cp 0007  
                                               strncat@to 0001  
                            __end_of_EUSART1_Transmit_ISR 8DF8  
                               UpdateJoinInProgress@state 0060  
                                       ??_ValidateTxPower 0060  
                                     _LORAWAN_TxDone$2660 00C9  
                                     _LORAWAN_TxDone$2661 00CD  
                                     _LORAWAN_TxDone$5621 00D6  
                      __end_of_LORAWAN_LinkCheckConfigure 593A  
                               __end_of_RADIO_ReleaseData 9566  
                              _LORAWAN_LinkCheckConfigure 57DC  
                                      __end_of_txPower433 FFA2  
                                __size_of_EnableChannels1 006C  
                                      __end_of_txPower868 FFA8  
                                   _HALResetPinMakeOutput 9594  
                                ??_HALResetPinOutputValue 0060  
                                  __size_of_INT1_CallBack 0020  
                               RADIO_WriteConfiguration@i 00AB  
                               ExecuteRxTimingSetup@delay 0069  
                                        AESEncodeLoRa@key 007F  
                               __size_of_SetJoinFailState 0030  
                        LORAWAN_LinkCheckConfigure@period 00A6  
                                        ??_ConfigureRadio 0072  
          EUSART1_SetFramingErrorHandler@interruptHandler 0060  
                          ?_EUSART1_SetTxInterruptHandler 0060  
                                      _SwTimerSetCallback 89BE  
             __end_of_UpdateRetransmissionAckTimeoutState 7DA6  
            __size_of_UpdateRetransmissionAckTimeoutState 0072  
                    ?_UpdateRetransmissionAckTimeoutState 0001  
                   ??_UpdateRetransmissionAckTimeoutState 009A  
                     _UpdateRetransmissionAckTimeoutState 7D34  
                                       RADIO_ReadRandom@i 0071  
                            SearchAvailableChannel@result 00B7  
                                   RADIO_WritePower@paDac 0065  
                                  __size_of_INT2_CallBack 0020  
                             __size_of_DIO4_ISR_Lora_Init 0002  
                                          _AESEncode$2127 0072  
                                          _AESEncode$2128 0074  
                                          _AESEncode$2129 0076  
                                  __size_of_EUSART1_Write 003E  
                                      _eusart1RxLastError 014C  
                                   __end_of_DIO0_ISR_Lora 9578  
                                __end_of_SwTimerIsRunning 8F2C  
                                       ??_CheckMcastFlags 0062  
                                __end_of_ExecuteLinkCheck 8D08  
                                   RADIO_WritePower@power 0066  
                                        _RADIO_TxDone$532 00EB  
                                ?_CreateAllSoftwareTimers 0001  
                        RADIO_WriteMode@currentModulation 0067  
                                    ??_EXT_INT_Initialize 0062  
                            RADIO_SetFSKSyncWord@syncWord 006B  
                                            _rxWindowSize FF7F  
                                  __end_of_EncKeySchedule 3B18  
                           ?_INT1_DefaultInterruptHandler 0001  
                                   __end_of_DIO1_ISR_Lora 9572  
                                     ?_SwTimerSetCallback 0060  
                                __end_of_SwTimerReadValue 8B4C  
                                        ___lldiv@quotient 0068  
                                             ?_HALSPISend 0001  
                                __end_of_ExecuteDutyCycle 8648  
                                         ___lwmod@divisor 00AA  
                  __end_of_UpdateReceiveWindow2Parameters 9360  
                 __size_of_UpdateReceiveWindow2Parameters 0016  
                          _UpdateReceiveWindow2Parameters 934A  
                                 UpdateTxPower@txPowerNew 0060  
                                         ___lwmod@counter 00AC  
                         _LORAWAN_LinkCheckConfigure$1514 00AC  
                        __end_of_INT1_SetInterruptHandler 948C  
                            FindSmallestDataRate@dataRate 0063  
                           LORAWAN_Join@activationTypeNew 00DD  
                                   __size_of_TMR_ISR_lora 0058  
                                            ___aldiv@sign 0073  
                              ??_LORAWAN_SetDeviceAddress 0064  
                                       __CFG_T3CMX$PORTC0 000000  
                                   __end_of_DIO2_ISR_Lora 956C  
                                    _SystemBlockingWaitMs 8D68  
                                   FindSmallestDataRate@i 0062  
                      ComputeSessionKeys@joinAcceptBuffer 0091  
                                 __size_of_EnableChannels 001C  
                            __end_of_UpdateJoinInProgress 92E8  
                            __end_of_ExecuteRxTimingSetup 8FA6  
                                 __size_of_HALSPICSAssert 0004  
                                 __end_of_FskSyncWordBuff FFFF  
                __end_of_RADIO_WriteFSKFrequencyDeviation 7EE8  
               __size_of_RADIO_WriteFSKFrequencyDeviation 006A  
                      ??_RADIO_WriteFSKFrequencyDeviation 0071  
                       ?_RADIO_WriteFSKFrequencyDeviation 006D  
                        _RADIO_WriteFSKFrequencyDeviation 7E7E  
                __end_of_LORAWAN_SetApplicationSessionKey 8E54  
               __size_of_LORAWAN_SetApplicationSessionKey 002E  
                      ??_LORAWAN_SetApplicationSessionKey 006D  
                       ?_LORAWAN_SetApplicationSessionKey 006B  
                        _LORAWAN_SetApplicationSessionKey 8E26  
                                        ExtractMic@buffer 006B  
                                 ??_RADIO_FSKPayloadReady 00F3  
                                UpdateDataRange@channelId 0062  
                                _RADIO_UnhandledInterrupt 8CA4  
                                   ??_EUSART1_Receive_ISR 0009  
                                        ?_HALDIO5PinValue 0001  
                          __end_of_PIN_MANAGER_Initialize 85F4  
                                       ?_LORAWAN_Mainloop 0001  
                             __end_of_RADIO_RegisterWrite 919C  
                                            ___almod@sign 0069  
                                 __size_of_ExecuteLinkAdr 02C8  
                            RADIO_WriteFSKBitRate@bitRate 006D  
                                      i2_TMR_GetDeltaTime 53A6  
                                         RADIO_SetCRC@crc 0060  
                                       __CFG_FOSC$INTIO67 000000  
                                             _testassign2 0120  
                                         _PIN_MANAGER_IOC 952C  
                                     RADIO_WritePower@ocp 0064  
                                      ??_LORAWAN_Mainloop 00F9  
                              __size_ofi2_TMR1_WriteTimer 001C  
                                 ??_EUSART1_RxDataHandler 0001  
                                    ??_SwTimerSetCallback 0063  
                                       ??_UpdateDataRange 0061  
                                 ?_UpdateMinMaxChDataRate 0001  
                                         _TMR1_Initialize 8E82  
                        RADIO_WriteConfiguration@regValue 00B0  
                                 i2TMR1_ReadTimer@readVal 0005  
                                      _RadioConfiguration 0155  
                                           ExtractMic@mic 0073  
                                       _LORAWAN_RxTimeout 25E8  
                             __end_of_RADIO_SetModulation 950E  
                           __size_of_HALResetPinMakeInput 0004  
                             __size_of_RADIO_RxFSKTimeout 003C  
                                        ??_LORAWAN_RxDone 00DA  
                                     ?i2_TMR_GetDeltaTime 0009  
