

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Fri Aug 28 16:50:07 2020

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18LF46K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK2,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK3,global,class=CODE,delta=1,noexec
     8                           	psect	idataBANK4,global,class=CODE,delta=1,noexec
     9                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
    10                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	nvBANK3,global,class=BANK3,space=1,delta=1,lowdata,noexec
    12                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    13                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    15                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    16                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    17                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    18                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1,lowdata,noexec
    19                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1,lowdata,noexec
    20                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1,lowdata,noexec
    21                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1,lowdata,noexec
    22                           	psect	bssBANK5,global,class=BANK5,space=1,delta=1,lowdata,noexec
    23                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1,lowdata,noexec
    24                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    25                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    26                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    27                           	psect	text0,global,reloc=2,class=CODE,delta=1
    28                           	psect	text1,global,reloc=2,class=CODE,delta=1,group=1
    29                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=1
    30                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    31                           	psect	text4,global,reloc=2,class=CODE,delta=1
    32                           	psect	text5,global,reloc=2,class=CODE,delta=1
    33                           	psect	text6,global,reloc=2,class=CODE,delta=1
    34                           	psect	text7,global,reloc=2,class=CODE,delta=1
    35                           	psect	text8,global,reloc=2,class=CODE,delta=1
    36                           	psect	text9,global,reloc=2,class=CODE,delta=1
    37                           	psect	text10,global,reloc=2,class=CODE,delta=1
    38                           	psect	text11,global,reloc=2,class=CODE,delta=1
    39                           	psect	text12,global,reloc=2,class=CODE,delta=1
    40                           	psect	text13,global,reloc=2,class=CODE,delta=1
    41                           	psect	text14,global,reloc=2,class=CODE,delta=1
    42                           	psect	text15,global,reloc=2,class=CODE,delta=1
    43                           	psect	text16,global,reloc=2,class=CODE,delta=1
    44                           	psect	text17,global,reloc=2,class=CODE,delta=1
    45                           	psect	text18,global,reloc=2,class=CODE,delta=1
    46                           	psect	text19,global,reloc=2,class=CODE,delta=1
    47                           	psect	text20,global,reloc=2,class=CODE,delta=1
    48                           	psect	text21,global,reloc=2,class=CODE,delta=1
    49                           	psect	text22,global,reloc=2,class=CODE,delta=1
    50                           	psect	text23,global,reloc=2,class=CODE,delta=1
    51                           	psect	text24,global,reloc=2,class=CODE,delta=1
    52                           	psect	text25,global,reloc=2,class=CODE,delta=1
    53                           	psect	text26,global,reloc=2,class=CODE,delta=1
    54                           	psect	text27,global,reloc=2,class=CODE,delta=1
    55                           	psect	text28,global,reloc=2,class=CODE,delta=1
    56                           	psect	text29,global,reloc=2,class=CODE,delta=1
    57                           	psect	text30,global,reloc=2,class=CODE,delta=1
    58                           	psect	text31,global,reloc=2,class=CODE,delta=1
    59                           	psect	text32,global,reloc=2,class=CODE,delta=1
    60                           	psect	text33,global,reloc=2,class=CODE,delta=1
    61                           	psect	text34,global,reloc=2,class=CODE,delta=1
    62                           	psect	text35,global,reloc=2,class=CODE,delta=1
    63                           	psect	text36,global,reloc=2,class=CODE,delta=1
    64                           	psect	text37,global,reloc=2,class=CODE,delta=1
    65                           	psect	text38,global,reloc=2,class=CODE,delta=1
    66                           	psect	text39,global,reloc=2,class=CODE,delta=1
    67                           	psect	text40,global,reloc=2,class=CODE,delta=1
    68                           	psect	text41,global,reloc=2,class=CODE,delta=1
    69                           	psect	text42,global,reloc=2,class=CODE,delta=1
    70                           	psect	text43,global,reloc=2,class=CODE,delta=1
    71                           	psect	text44,global,reloc=2,class=CODE,delta=1
    72                           	psect	text45,global,reloc=2,class=CODE,delta=1
    73                           	psect	text46,global,reloc=2,class=CODE,delta=1
    74                           	psect	text47,global,reloc=2,class=CODE,delta=1
    75                           	psect	text48,global,reloc=2,class=CODE,delta=1
    76                           	psect	text49,global,reloc=2,class=CODE,delta=1
    77                           	psect	text50,global,reloc=2,class=CODE,delta=1
    78                           	psect	text51,global,reloc=2,class=CODE,delta=1
    79                           	psect	text52,global,reloc=2,class=CODE,delta=1
    80                           	psect	text53,global,reloc=2,class=CODE,delta=1
    81                           	psect	text54,global,reloc=2,class=CODE,delta=1
    82                           	psect	text55,global,reloc=2,class=CODE,delta=1
    83                           	psect	text56,global,reloc=2,class=CODE,delta=1
    84                           	psect	text57,global,reloc=2,class=CODE,delta=1
    85                           	psect	text58,global,reloc=2,class=CODE,delta=1
    86                           	psect	text59,global,reloc=2,class=CODE,delta=1,group=1
    87                           	psect	text60,global,reloc=2,class=CODE,delta=1
    88                           	psect	text61,global,reloc=2,class=CODE,delta=1
    89                           	psect	text62,global,reloc=2,class=CODE,delta=1
    90                           	psect	text63,global,reloc=2,class=CODE,delta=1
    91                           	psect	text64,global,reloc=2,class=CODE,delta=1
    92                           	psect	text65,global,reloc=2,class=CODE,delta=1
    93                           	psect	text66,global,reloc=2,class=CODE,delta=1
    94                           	psect	text67,global,reloc=2,class=CODE,delta=1
    95                           	psect	text68,global,reloc=2,class=CODE,delta=1
    96                           	psect	text69,global,reloc=2,class=CODE,delta=1
    97                           	psect	text70,global,reloc=2,class=CODE,delta=1
    98                           	psect	text71,global,reloc=2,class=CODE,delta=1
    99                           	psect	text72,global,reloc=2,class=CODE,delta=1
   100                           	psect	text73,global,reloc=2,class=CODE,delta=1,group=1
   101                           	psect	text74,global,reloc=2,class=CODE,delta=1
   102                           	psect	text75,global,reloc=2,class=CODE,delta=1
   103                           	psect	text76,global,reloc=2,class=CODE,delta=1
   104                           	psect	text77,global,reloc=2,class=CODE,delta=1
   105                           	psect	text78,global,reloc=2,class=CODE,delta=1
   106                           	psect	text79,global,reloc=2,class=CODE,delta=1
   107                           	psect	text80,global,reloc=2,class=CODE,delta=1
   108                           	psect	text81,global,reloc=2,class=CODE,delta=1
   109                           	psect	text82,global,reloc=2,class=CODE,delta=1
   110                           	psect	text83,global,reloc=2,class=CODE,delta=1
   111                           	psect	text84,global,reloc=2,class=CODE,delta=1
   112                           	psect	text85,global,reloc=2,class=CODE,delta=1
   113                           	psect	text86,global,reloc=2,class=CODE,delta=1
   114                           	psect	text87,global,reloc=2,class=CODE,delta=1
   115                           	psect	text88,global,reloc=2,class=CODE,delta=1
   116                           	psect	text89,global,reloc=2,class=CODE,delta=1
   117                           	psect	text90,global,reloc=2,class=CODE,delta=1
   118                           	psect	text91,global,reloc=2,class=CODE,delta=1
   119                           	psect	text92,global,reloc=2,class=CODE,delta=1
   120                           	psect	text93,global,reloc=2,class=CODE,delta=1
   121                           	psect	text94,global,reloc=2,class=CODE,delta=1
   122                           	psect	text95,global,reloc=2,class=CODE,delta=1
   123                           	psect	text96,global,reloc=2,class=CODE,delta=1
   124                           	psect	text97,global,reloc=2,class=CODE,delta=1
   125                           	psect	text98,global,reloc=2,class=CODE,delta=1
   126                           	psect	text99,global,reloc=2,class=CODE,delta=1
   127                           	psect	text100,global,reloc=2,class=CODE,delta=1
   128                           	psect	text101,global,reloc=2,class=CODE,delta=1
   129                           	psect	text102,global,reloc=2,class=CODE,delta=1
   130                           	psect	text103,global,reloc=2,class=CODE,delta=1
   131                           	psect	text104,global,reloc=2,class=CODE,delta=1
   132                           	psect	text105,global,reloc=2,class=CODE,delta=1,group=1
   133                           	psect	text106,global,reloc=2,class=CODE,delta=1
   134                           	psect	text107,global,reloc=2,class=CODE,delta=1
   135                           	psect	text108,global,reloc=2,class=CODE,delta=1
   136                           	psect	text109,global,reloc=2,class=CODE,delta=1
   137                           	psect	text110,global,reloc=2,class=CODE,delta=1
   138                           	psect	text111,global,reloc=2,class=CODE,delta=1
   139                           	psect	text112,global,reloc=2,class=CODE,delta=1
   140                           	psect	text113,global,reloc=2,class=CODE,delta=1
   141                           	psect	text114,global,reloc=2,class=CODE,delta=1
   142                           	psect	text115,global,reloc=2,class=CODE,delta=1
   143                           	psect	text116,global,reloc=2,class=CODE,delta=1
   144                           	psect	text117,global,reloc=2,class=CODE,delta=1
   145                           	psect	text118,global,reloc=2,class=CODE,delta=1
   146                           	psect	text119,global,reloc=2,class=CODE,delta=1
   147                           	psect	text120,global,reloc=2,class=CODE,delta=1
   148                           	psect	text121,global,reloc=2,class=CODE,delta=1
   149                           	psect	text122,global,reloc=2,class=CODE,delta=1
   150                           	psect	text123,global,reloc=2,class=CODE,delta=1
   151                           	psect	text124,global,reloc=2,class=CODE,delta=1
   152                           	psect	text125,global,reloc=2,class=CODE,delta=1
   153                           	psect	text126,global,reloc=2,class=CODE,delta=1
   154                           	psect	text127,global,reloc=2,class=CODE,delta=1
   155                           	psect	text128,global,reloc=2,class=CODE,delta=1
   156                           	psect	text129,global,reloc=2,class=CODE,delta=1
   157                           	psect	text130,global,reloc=2,class=CODE,delta=1
   158                           	psect	text131,global,reloc=2,class=CODE,delta=1
   159                           	psect	text132,global,reloc=2,class=CODE,delta=1
   160                           	psect	text133,global,reloc=2,class=CODE,delta=1
   161                           	psect	text134,global,reloc=2,class=CODE,delta=1
   162                           	psect	text135,global,reloc=2,class=CODE,delta=1
   163                           	psect	text136,global,reloc=2,class=CODE,delta=1
   164                           	psect	text137,global,reloc=2,class=CODE,delta=1
   165                           	psect	text138,global,reloc=2,class=CODE,delta=1
   166                           	psect	text139,global,reloc=2,class=CODE,delta=1
   167                           	psect	text140,global,reloc=2,class=CODE,delta=1
   168                           	psect	text141,global,reloc=2,class=CODE,delta=1
   169                           	psect	text142,global,reloc=2,class=CODE,delta=1
   170                           	psect	text143,global,reloc=2,class=CODE,delta=1
   171                           	psect	text144,global,reloc=2,class=CODE,delta=1
   172                           	psect	text145,global,reloc=2,class=CODE,delta=1
   173                           	psect	text146,global,reloc=2,class=CODE,delta=1
   174                           	psect	text147,global,reloc=2,class=CODE,delta=1
   175                           	psect	text148,global,reloc=2,class=CODE,delta=1
   176                           	psect	text149,global,reloc=2,class=CODE,delta=1,group=1
   177                           	psect	text150,global,reloc=2,class=CODE,delta=1,group=1
   178                           	psect	text151,global,reloc=2,class=CODE,delta=1
   179                           	psect	text152,global,reloc=2,class=CODE,delta=1
   180                           	psect	text153,global,reloc=2,class=CODE,delta=1
   181                           	psect	text154,global,reloc=2,class=CODE,delta=1
   182                           	psect	text155,global,reloc=2,class=CODE,delta=1
   183                           	psect	text156,global,reloc=2,class=CODE,delta=1
   184                           	psect	text157,global,reloc=2,class=CODE,delta=1
   185                           	psect	text158,global,reloc=2,class=CODE,delta=1
   186                           	psect	text159,global,reloc=2,class=CODE,delta=1
   187                           	psect	text160,global,reloc=2,class=CODE,delta=1,group=1
   188                           	psect	text161,global,reloc=2,class=CODE,delta=1
   189                           	psect	text162,global,reloc=2,class=CODE,delta=1
   190                           	psect	text163,global,reloc=2,class=CODE,delta=1
   191                           	psect	text164,global,reloc=2,class=CODE,delta=1
   192                           	psect	text165,global,reloc=2,class=CODE,delta=1
   193                           	psect	text166,global,reloc=2,class=CODE,delta=1
   194                           	psect	text167,global,reloc=2,class=CODE,delta=1
   195                           	psect	text168,global,reloc=2,class=CODE,delta=1
   196                           	psect	text169,global,reloc=2,class=CODE,delta=1
   197                           	psect	text170,global,reloc=2,class=CODE,delta=1
   198                           	psect	text171,global,reloc=2,class=CODE,delta=1
   199                           	psect	text172,global,reloc=2,class=CODE,delta=1
   200                           	psect	text173,global,reloc=2,class=CODE,delta=1,group=1
   201                           	psect	text174,global,reloc=2,class=CODE,delta=1
   202                           	psect	text175,global,reloc=2,class=CODE,delta=1
   203                           	psect	text176,global,reloc=2,class=CODE,delta=1
   204                           	psect	text177,global,reloc=2,class=CODE,delta=1
   205                           	psect	text178,global,reloc=2,class=CODE,delta=1
   206                           	psect	text179,global,reloc=2,class=CODE,delta=1
   207                           	psect	text180,global,reloc=2,class=CODE,delta=1
   208                           	psect	text181,global,reloc=2,class=CODE,delta=1
   209                           	psect	text182,global,reloc=2,class=CODE,delta=1
   210                           	psect	text183,global,reloc=2,class=CODE,delta=1
   211                           	psect	text184,global,reloc=2,class=CODE,delta=1
   212                           	psect	text185,global,reloc=2,class=CODE,delta=1,group=1
   213                           	psect	text186,global,reloc=2,class=CODE,delta=1,group=1
   214                           	psect	text187,global,reloc=2,class=CODE,delta=1
   215                           	psect	text188,global,reloc=2,class=CODE,delta=1
   216                           	psect	text189,global,reloc=2,class=CODE,delta=1
   217                           	psect	text190,global,reloc=2,class=CODE,delta=1
   218                           	psect	text191,global,reloc=2,class=CODE,delta=1
   219                           	psect	text192,global,reloc=2,class=CODE,delta=1
   220                           	psect	text193,global,reloc=2,class=CODE,delta=1
   221                           	psect	text194,global,reloc=2,class=CODE,delta=1
   222                           	psect	text195,global,reloc=2,class=CODE,delta=1
   223                           	psect	text196,global,reloc=2,class=CODE,delta=1
   224                           	psect	text197,global,reloc=2,class=CODE,delta=1
   225                           	psect	text198,global,reloc=2,class=CODE,delta=1,group=1
   226                           	psect	text199,global,reloc=2,class=CODE,delta=1,group=1
   227                           	psect	text200,global,reloc=2,class=CODE,delta=1
   228                           	psect	text201,global,reloc=2,class=CODE,delta=1
   229                           	psect	text202,global,reloc=2,class=CODE,delta=1
   230                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   231                           	psect	text204,global,reloc=2,class=CODE,delta=1
   232                           	psect	text205,global,reloc=2,class=CODE,delta=1
   233                           	psect	text206,global,reloc=2,class=CODE,delta=1
   234                           	psect	text207,global,reloc=2,class=CODE,delta=1
   235                           	psect	text208,global,reloc=2,class=CODE,delta=1
   236                           	psect	text209,global,reloc=2,class=CODE,delta=1
   237                           	psect	text210,global,reloc=2,class=CODE,delta=1
   238                           	psect	text211,global,reloc=2,class=CODE,delta=1
   239                           	psect	text212,global,reloc=2,class=CODE,delta=1
   240                           	psect	text213,global,reloc=2,class=CODE,delta=1
   241                           	psect	text214,global,reloc=2,class=CODE,delta=1
   242                           	psect	text215,global,reloc=2,class=CODE,delta=1
   243                           	psect	text216,global,reloc=2,class=CODE,delta=1
   244                           	psect	text217,global,reloc=2,class=CODE,delta=1
   245                           	psect	text218,global,reloc=2,class=CODE,delta=1
   246                           	psect	text219,global,reloc=2,class=CODE,delta=1
   247                           	psect	text220,global,reloc=2,class=CODE,delta=1
   248                           	psect	text221,global,reloc=2,class=CODE,delta=1
   249                           	psect	text222,global,reloc=2,class=CODE,delta=1
   250                           	psect	text223,global,reloc=2,class=CODE,delta=1
   251                           	psect	text224,global,reloc=2,class=CODE,delta=1
   252                           	psect	text225,global,reloc=2,class=CODE,delta=1
   253                           	psect	text226,global,reloc=2,class=CODE,delta=1
   254                           	psect	text227,global,reloc=2,class=CODE,delta=1,group=1
   255                           	psect	text228,global,reloc=2,class=CODE,delta=1
   256                           	psect	text229,global,reloc=2,class=CODE,delta=1
   257                           	psect	text230,global,reloc=2,class=CODE,delta=1
   258                           	psect	text231,global,reloc=2,class=CODE,delta=1
   259                           	psect	text232,global,reloc=2,class=CODE,delta=1
   260                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   261                           	psect	text233,global,reloc=2,class=CODE,delta=1
   262                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   263                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   264  0000                     
   265                           ; Version 1.45
   266                           ; Generated 16/11/2017 GMT
   267                           ; 
   268                           ; Copyright © 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   269                           ; All rights reserved.
   270                           ; 
   271                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   272                           ; 
   273                           ; Redistribution and use in source and binary forms, with or without modification, are
   274                           ; permitted provided that the following conditions are met:
   275                           ; 
   276                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   277                           ;        conditions and the following disclaimer.
   278                           ; 
   279                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   280                           ;        of conditions and the following disclaimer in the documentation and/or other
   281                           ;        materials provided with the distribution.
   282                           ; 
   283                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   284                           ;        software without specific prior written permission.
   285                           ; 
   286                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   287                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   288                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   289                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   290                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   291                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   292                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   293                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   294                           ; 
   295                           ; 
   296                           ; Code-generator required, PIC18LF46K22 Definitions
   297                           ; 
   298                           ; SFR Addresses
   299  0000                     
   300 ;;UnconfirmedTransmissionCallback@param	offset=-1 (param)
   301 ;;RADIO_WatchdogTimeout@param	offset=-1 (param)
   302 ;;RADIO_RxFSKTimeout@irqFlags	offset	0
   303 ;;RADIO_RxFSKTimeout@param	offset=-1 (param)
   304 ;;LORAWAN_ReceiveWindow1Callback@freq	offset	0
   305 ;;LORAWAN_ReceiveWindow1Callback@param	offset=-1 (param)
   306 ;;_LORAWAN_LinkCheckCallback$1528	offset	0
   307 ;;LORAWAN_LinkCheckCallback@iCtr	offset	4
   308 ;;LORAWAN_LinkCheckCallback@param	offset=-1 (param)
   309 ;;_DutyCycleCallback$2817	offset	0
   310 ;;DutyCycleCallback@minim	offset	4
   311 ;;DutyCycleCallback@i	offset	8
   312 ;;DutyCycleCallback@found	offset	9
   313 ;;DutyCycleCallback@param	offset=-1 (param)
   314 ;;AutomaticReplyCallback@param	offset=-1 (param)
   315 ;;AckRetransmissionCallback@maximumPacketSize	offset	0
   316 ;;AckRetransmissionCallback@param	offset=-1 (param)
   317 ;;_param	offset=-1 (param)
   318 ;;_UpdateJoinSuccessState$1545	offset	0
   319 ;;UpdateJoinSuccessState@param	offset=-1 (param)
   320                           
   321                           	psect	idataCOMRAM
   322  0095CE                     __pidataCOMRAM:
   323                           	opt stack 0
   324                           
   325                           ;initializer for _ticksToScheduledInterrupt
   326  0095CE  FFFF               	dw	65535
   327  0095D0  FFFF               	dw	65535
   328                           
   329                           	psect	idataBANK2
   330  0095D2                     __pidataBANK2:
   331                           	opt stack 0
   332                           
   333                           ;initializer for _randx
   334  0095D2  0001               	dw	1
   335  0095D4  0000               	dw	0
   336                           
   337                           	psect	idataBANK3
   338  008E96                     __pidataBANK3:
   339                           	opt stack 0
   340                           
   341                           ;initializer for GenerateSubkey@F7103
   342  008E96  00                 	db	0
   343  008E97  00                 	db	0
   344  008E98  00                 	db	0
   345  008E99  00                 	db	0
   346  008E9A  00                 	db	0
   347  008E9B  00                 	db	0
   348  008E9C  00                 	db	0
   349  008E9D  00                 	db	0
   350  008E9E  00                 	db	0
   351  008E9F  00                 	db	0
   352  008EA0  00                 	db	0
   353  008EA1  00                 	db	0
   354  008EA2  00                 	db	0
   355  008EA3  00                 	db	0
   356  008EA4  00                 	db	0
   357  008EA5  87                 	db	135
   358                           
   359                           ;initializer for _testtest
   360  008EA6  31                 	db	49
   361  008EA7  32                 	db	50
   362  008EA8  33                 	db	51
   363  008EA9  34                 	db	52
   364  008EAA  35                 	db	53
   365                           
   366                           ;initializer for _devAddr
   367  008EAB  5E47               	dw	24135
   368  008EAD  3DEF               	dw	15855
   369                           
   370                           ;initializer for _hexNum
   371  008EAF  31                 	db	49
   372  008EB0  41                 	db	65
   373  008EB1  00                 	db	0
   374                           
   375                           ;initializer for _nwkSKey
   376  008EB2  CB                 	db	203
   377  008EB3  1E                 	db	30
   378  008EB4  88                 	db	136
   379  008EB5  5D                 	db	93
   380  008EB6  5D                 	db	93
   381  008EB7  F1                 	db	241
   382  008EB8  12                 	db	18
   383  008EB9  D5                 	db	213
   384  008EBA  08                 	db	8
   385  008EBB  CC                 	db	204
   386  008EBC  B9                 	db	185
   387  008EBD  D1                 	db	209
   388  008EBE  D4                 	db	212
   389  008EBF  4B                 	db	75
   390  008EC0  1E                 	db	30
   391  008EC1  DF                 	db	223
   392                           
   393                           	psect	idataBANK4
   394  009412                     __pidataBANK4:
   395                           	opt stack 0
   396                           
   397                           ;initializer for _appSKey
   398  009412  96                 	db	150
   399  009413  23                 	db	35
   400  009414  5A                 	db	90
   401  009415  1F                 	db	31
   402  009416  9A                 	db	154
   403  009417  E1                 	db	225
   404  009418  60                 	db	96
   405  009419  36                 	db	54
   406  00941A  81                 	db	129
   407  00941B  C4                 	db	196
   408  00941C  E4                 	db	228
   409  00941D  B5                 	db	181
   410  00941E  54                 	db	84
   411  00941F  C3                 	db	195
   412  009420  CA                 	db	202
   413  009421  B5                 	db	181
   414                           
   415                           	psect	mediumconst
   416  00FE66                     __pmediumconst:
   417                           	opt stack 0
   418  00FE66  00                 	db	0
   419  00FE67                     _STable:
   420                           	opt stack 0
   421  00FE67  63                 	db	99
   422  00FE68  7C                 	db	124
   423  00FE69  77                 	db	119
   424  00FE6A  7B                 	db	123
   425  00FE6B  F2                 	db	242
   426  00FE6C  6B                 	db	107
   427  00FE6D  6F                 	db	111
   428  00FE6E  C5                 	db	197
   429  00FE6F  30                 	db	48
   430  00FE70  01                 	db	1
   431  00FE71  67                 	db	103
   432  00FE72  2B                 	db	43
   433  00FE73  FE                 	db	254
   434  00FE74  D7                 	db	215
   435  00FE75  AB                 	db	171
   436  00FE76  76                 	db	118
   437  00FE77  CA                 	db	202
   438  00FE78  82                 	db	130
   439  00FE79  C9                 	db	201
   440  00FE7A  7D                 	db	125
   441  00FE7B  FA                 	db	250
   442  00FE7C  59                 	db	89
   443  00FE7D  47                 	db	71
   444  00FE7E  F0                 	db	240
   445  00FE7F  AD                 	db	173
   446  00FE80  D4                 	db	212
   447  00FE81  A2                 	db	162
   448  00FE82  AF                 	db	175
   449  00FE83  9C                 	db	156
   450  00FE84  A4                 	db	164
   451  00FE85  72                 	db	114
   452  00FE86  C0                 	db	192
   453  00FE87  B7                 	db	183
   454  00FE88  FD                 	db	253
   455  00FE89  93                 	db	147
   456  00FE8A  26                 	db	38
   457  00FE8B  36                 	db	54
   458  00FE8C  3F                 	db	63
   459  00FE8D  F7                 	db	247
   460  00FE8E  CC                 	db	204
   461  00FE8F  34                 	db	52
   462  00FE90  A5                 	db	165
   463  00FE91  E5                 	db	229
   464  00FE92  F1                 	db	241
   465  00FE93  71                 	db	113
   466  00FE94  D8                 	db	216
   467  00FE95  31                 	db	49
   468  00FE96  15                 	db	21
   469  00FE97  04                 	db	4
   470  00FE98  C7                 	db	199
   471  00FE99  23                 	db	35
   472  00FE9A  C3                 	db	195
   473  00FE9B  18                 	db	24
   474  00FE9C  96                 	db	150
   475  00FE9D  05                 	db	5
   476  00FE9E  9A                 	db	154
   477  00FE9F  07                 	db	7
   478  00FEA0  12                 	db	18
   479  00FEA1  80                 	db	128
   480  00FEA2  E2                 	db	226
   481  00FEA3  EB                 	db	235
   482  00FEA4  27                 	db	39
   483  00FEA5  B2                 	db	178
   484  00FEA6  75                 	db	117
   485  00FEA7  09                 	db	9
   486  00FEA8  83                 	db	131
   487  00FEA9  2C                 	db	44
   488  00FEAA  1A                 	db	26
   489  00FEAB  1B                 	db	27
   490  00FEAC  6E                 	db	110
   491  00FEAD  5A                 	db	90
   492  00FEAE  A0                 	db	160
   493  00FEAF  52                 	db	82
   494  00FEB0  3B                 	db	59
   495  00FEB1  D6                 	db	214
   496  00FEB2  B3                 	db	179
   497  00FEB3  29                 	db	41
   498  00FEB4  E3                 	db	227
   499  00FEB5  2F                 	db	47
   500  00FEB6  84                 	db	132
   501  00FEB7  53                 	db	83
   502  00FEB8  D1                 	db	209
   503  00FEB9  00                 	db	0
   504  00FEBA  ED                 	db	237
   505  00FEBB  20                 	db	32
   506  00FEBC  FC                 	db	252
   507  00FEBD  B1                 	db	177
   508  00FEBE  5B                 	db	91
   509  00FEBF  6A                 	db	106
   510  00FEC0  CB                 	db	203
   511  00FEC1  BE                 	db	190
   512  00FEC2  39                 	db	57
   513  00FEC3  4A                 	db	74
   514  00FEC4  4C                 	db	76
   515  00FEC5  58                 	db	88
   516  00FEC6  CF                 	db	207
   517  00FEC7  D0                 	db	208
   518  00FEC8  EF                 	db	239
   519  00FEC9  AA                 	db	170
   520  00FECA  FB                 	db	251
   521  00FECB  43                 	db	67
   522  00FECC  4D                 	db	77
   523  00FECD  33                 	db	51
   524  00FECE  85                 	db	133
   525  00FECF  45                 	db	69
   526  00FED0  F9                 	db	249
   527  00FED1  02                 	db	2
   528  00FED2  7F                 	db	127
   529  00FED3  50                 	db	80
   530  00FED4  3C                 	db	60
   531  00FED5  9F                 	db	159
   532  00FED6  A8                 	db	168
   533  00FED7  51                 	db	81
   534  00FED8  A3                 	db	163
   535  00FED9  40                 	db	64
   536  00FEDA  8F                 	db	143
   537  00FEDB  92                 	db	146
   538  00FEDC  9D                 	db	157
   539  00FEDD  38                 	db	56
   540  00FEDE  F5                 	db	245
   541  00FEDF  BC                 	db	188
   542  00FEE0  B6                 	db	182
   543  00FEE1  DA                 	db	218
   544  00FEE2  21                 	db	33
   545  00FEE3  10                 	db	16
   546  00FEE4  FF                 	db	255
   547  00FEE5  F3                 	db	243
   548  00FEE6  D2                 	db	210
   549  00FEE7  CD                 	db	205
   550  00FEE8  0C                 	db	12
   551  00FEE9  13                 	db	19
   552  00FEEA  EC                 	db	236
   553  00FEEB  5F                 	db	95
   554  00FEEC  97                 	db	151
   555  00FEED  44                 	db	68
   556  00FEEE  17                 	db	23
   557  00FEEF  C4                 	db	196
   558  00FEF0  A7                 	db	167
   559  00FEF1  7E                 	db	126
   560  00FEF2  3D                 	db	61
   561  00FEF3  64                 	db	100
   562  00FEF4  5D                 	db	93
   563  00FEF5  19                 	db	25
   564  00FEF6  73                 	db	115
   565  00FEF7  60                 	db	96
   566  00FEF8  81                 	db	129
   567  00FEF9  4F                 	db	79
   568  00FEFA  DC                 	db	220
   569  00FEFB  22                 	db	34
   570  00FEFC  2A                 	db	42
   571  00FEFD  90                 	db	144
   572  00FEFE  88                 	db	136
   573  00FEFF  46                 	db	70
   574  00FF00  EE                 	db	238
   575  00FF01  B8                 	db	184
   576  00FF02  14                 	db	20
   577  00FF03  DE                 	db	222
   578  00FF04  5E                 	db	94
   579  00FF05  0B                 	db	11
   580  00FF06  DB                 	db	219
   581  00FF07  E0                 	db	224
   582  00FF08  32                 	db	50
   583  00FF09  3A                 	db	58
   584  00FF0A  0A                 	db	10
   585  00FF0B  49                 	db	73
   586  00FF0C  06                 	db	6
   587  00FF0D  24                 	db	36
   588  00FF0E  5C                 	db	92
   589  00FF0F  C2                 	db	194
   590  00FF10  D3                 	db	211
   591  00FF11  AC                 	db	172
   592  00FF12  62                 	db	98
   593  00FF13  91                 	db	145
   594  00FF14  95                 	db	149
   595  00FF15  E4                 	db	228
   596  00FF16  79                 	db	121
   597  00FF17  E7                 	db	231
   598  00FF18  C8                 	db	200
   599  00FF19  37                 	db	55
   600  00FF1A  6D                 	db	109
   601  00FF1B  8D                 	db	141
   602  00FF1C  D5                 	db	213
   603  00FF1D  4E                 	db	78
   604  00FF1E  A9                 	db	169
   605  00FF1F  6C                 	db	108
   606  00FF20  56                 	db	86
   607  00FF21  F4                 	db	244
   608  00FF22  EA                 	db	234
   609  00FF23  65                 	db	101
   610  00FF24  7A                 	db	122
   611  00FF25  AE                 	db	174
   612  00FF26  08                 	db	8
   613  00FF27  BA                 	db	186
   614  00FF28  78                 	db	120
   615  00FF29  25                 	db	37
   616  00FF2A  2E                 	db	46
   617  00FF2B  1C                 	db	28
   618  00FF2C  A6                 	db	166
   619  00FF2D  B4                 	db	180
   620  00FF2E  C6                 	db	198
   621  00FF2F  E8                 	db	232
   622  00FF30  DD                 	db	221
   623  00FF31  74                 	db	116
   624  00FF32  1F                 	db	31
   625  00FF33  4B                 	db	75
   626  00FF34  BD                 	db	189
   627  00FF35  8B                 	db	139
   628  00FF36  8A                 	db	138
   629  00FF37  70                 	db	112
   630  00FF38  3E                 	db	62
   631  00FF39  B5                 	db	181
   632  00FF3A  66                 	db	102
   633  00FF3B  48                 	db	72
   634  00FF3C  03                 	db	3
   635  00FF3D  F6                 	db	246
   636  00FF3E  0E                 	db	14
   637  00FF3F  61                 	db	97
   638  00FF40  35                 	db	53
   639  00FF41  57                 	db	87
   640  00FF42  B9                 	db	185
   641  00FF43  86                 	db	134
   642  00FF44  C1                 	db	193
   643  00FF45  1D                 	db	29
   644  00FF46  9E                 	db	158
   645  00FF47  E1                 	db	225
   646  00FF48  F8                 	db	248
   647  00FF49  98                 	db	152
   648  00FF4A  11                 	db	17
   649  00FF4B  69                 	db	105
   650  00FF4C  D9                 	db	217
   651  00FF4D  8E                 	db	142
   652  00FF4E  94                 	db	148
   653  00FF4F  9B                 	db	155
   654  00FF50  1E                 	db	30
   655  00FF51  87                 	db	135
   656  00FF52  E9                 	db	233
   657  00FF53  CE                 	db	206
   658  00FF54  55                 	db	85
   659  00FF55  28                 	db	40
   660  00FF56  DF                 	db	223
   661  00FF57  8C                 	db	140
   662  00FF58  A1                 	db	161
   663  00FF59  89                 	db	137
   664  00FF5A  0D                 	db	13
   665  00FF5B  BF                 	db	191
   666  00FF5C  E6                 	db	230
   667  00FF5D  42                 	db	66
   668  00FF5E  68                 	db	104
   669  00FF5F  41                 	db	65
   670  00FF60  99                 	db	153
   671  00FF61  2D                 	db	45
   672  00FF62  0F                 	db	15
   673  00FF63  B0                 	db	176
   674  00FF64  54                 	db	84
   675  00FF65  BB                 	db	187
   676  00FF66  16                 	db	22
   677  00FF67                     __end_of_STable:
   678                           	opt stack 0
   679  00FF67                     _modulation:
   680                           	opt stack 0
   681  00FF67  01                 	db	1
   682  00FF68  01                 	db	1
   683  00FF69  01                 	db	1
   684  00FF6A  01                 	db	1
   685  00FF6B  01                 	db	1
   686  00FF6C  01                 	db	1
   687  00FF6D  01                 	db	1
   688  00FF6E  00                 	db	0
   689  00FF6F                     __end_of_modulation:
   690                           	opt stack 0
   691  00FF6F                     _rxWindowOffset:
   692                           	opt stack 0
   693  00FF6F  DF                 	db	223
   694  00FF70  CE                 	db	206
   695  00FF71  C6                 	db	198
   696  00FF72  C2                 	db	194
   697  00FF73  BE                 	db	190
   698  00FF74  BC                 	db	188
   699  00FF75  F1                 	db	241
   700  00FF76  FE                 	db	254
   701  00FF77                     __end_of_rxWindowOffset:
   702                           	opt stack 0
   703  00FF77                     _maxPayloadSize:
   704                           	opt stack 0
   705  00FF77  33                 	db	51
   706  00FF78  33                 	db	51
   707  00FF79  33                 	db	51
   708  00FF7A  73                 	db	115
   709  00FF7B  F2                 	db	242
   710  00FF7C  F2                 	db	242
   711  00FF7D  F2                 	db	242
   712  00FF7E  38                 	db	56
   713  00FF7F                     __end_of_maxPayloadSize:
   714                           	opt stack 0
   715  00FF7F                     _rxWindowSize:
   716                           	opt stack 0
   717  00FF7F  08                 	db	8
   718  00FF80  0A                 	db	10
   719  00FF81  0E                 	db	14
   720  00FF82  1A                 	db	26
   721  00FF83  31                 	db	49
   722  00FF84  58                 	db	88
   723  00FF85  3C                 	db	60
   724  00FF86  08                 	db	8
   725  00FF87                     __end_of_rxWindowSize:
   726                           	opt stack 0
   727  00FF87                     _bandwidth:
   728                           	opt stack 0
   729  00FF87  07                 	db	7
   730  00FF88  07                 	db	7
   731  00FF89  07                 	db	7
   732  00FF8A  07                 	db	7
   733  00FF8B  07                 	db	7
   734  00FF8C  07                 	db	7
   735  00FF8D  08                 	db	8
   736  00FF8E                     __end_of_bandwidth:
   737                           	opt stack 0
   738  00FF8E                     _spreadingFactor:
   739                           	opt stack 0
   740  00FF8E  0C                 	db	12
   741  00FF8F  0B                 	db	11
   742  00FF90  0A                 	db	10
   743  00FF91  09                 	db	9
   744  00FF92  08                 	db	8
   745  00FF93  07                 	db	7
   746  00FF94  07                 	db	7
   747  00FF95                     __end_of_spreadingFactor:
   748                           	opt stack 0
   749  00FF95                     _macEndDevCmdReplyLen:
   750                           	opt stack 0
   751  00FF95  01                 	db	1
   752  00FF96  02                 	db	2
   753  00FF97  01                 	db	1
   754  00FF98  02                 	db	2
   755  00FF99  03                 	db	3
   756  00FF9A  02                 	db	2
   757  00FF9B  01                 	db	1
   758  00FF9C                     __end_of_macEndDevCmdReplyLen:
   759                           	opt stack 0
   760  00FF9C  0A                 	db	10
   761  00FF9D  07                 	db	7
   762  00FF9E  04                 	db	4
   763  00FF9F  01                 	db	1
   764  00FFA0  FE                 	db	254
   765  00FFA1  FB                 	db	251
   766  00FFA2                     __end_of_txPower433:
   767                           	opt stack 0
   768  00FFA2                     _txPower868:
   769                           	opt stack 0
   770  00FFA2  14                 	db	20
   771  00FFA3  0E                 	db	14
   772  00FFA4  0B                 	db	11
   773  00FFA5  08                 	db	8
   774  00FFA6  05                 	db	5
   775  00FFA7  02                 	db	2
   776  00FFA8                     __end_of_txPower868:
   777                           	opt stack 0
   778  00FFA8                     _DefaultChannels433:
   779                           	opt stack 0
   780  00FFA8  B9D8               	dw	47576
   781  00FFAA  19D1               	dw	6609
   782  00FFAC  01                 	db	1
   783  00FFAD  50                 	db	80
   784  00FFAE  012E               	dw	302
   785  00FFB0  0000               	dw	0
   786  00FFB2  0000               	dw	0
   787  00FFB4  01                 	db	1
   788  00FFB5  FF                 	db	255
   789  00FFB6  C718               	dw	50968
   790  00FFB8  19D4               	dw	6612
   791  00FFBA  01                 	db	1
   792  00FFBB  50                 	db	80
   793  00FFBC  012E               	dw	302
   794  00FFBE  0000               	dw	0
   795  00FFC0  0000               	dw	0
   796  00FFC2  01                 	db	1
   797  00FFC3  FF                 	db	255
   798  00FFC4  D458               	dw	54360
   799  00FFC6  19D7               	dw	6615
   800  00FFC8  01                 	db	1
   801  00FFC9  50                 	db	80
   802  00FFCA  012E               	dw	302
   803  00FFCC  0000               	dw	0
   804  00FFCE  0000               	dw	0
   805  00FFD0  01                 	db	1
   806  00FFD1  FF                 	db	255
   807  00FFD2                     __end_of_DefaultChannels433:
   808                           	opt stack 0
   809  00FFD2                     _DefaultChannels868:
   810                           	opt stack 0
   811  00FFD2  27A0               	dw	10144
   812  00FFD4  33BE               	dw	13246
   813  00FFD6  01                 	db	1
   814  00FFD7  50                 	db	80
   815  00FFD8  012E               	dw	302
   816  00FFDA  0000               	dw	0
   817  00FFDC  0000               	dw	0
   818  00FFDE  01                 	db	1
   819  00FFDF  FF                 	db	255
   820  00FFE0  34E0               	dw	13536
   821  00FFE2  33C1               	dw	13249
   822  00FFE4  01                 	db	1
   823  00FFE5  50                 	db	80
   824  00FFE6  012E               	dw	302
   825  00FFE8  0000               	dw	0
   826  00FFEA  0000               	dw	0
   827  00FFEC  01                 	db	1
   828  00FFED  FF                 	db	255
   829  00FFEE  4220               	dw	16928
   830  00FFF0  33C4               	dw	13252
   831  00FFF2  01                 	db	1
   832  00FFF3  50                 	db	80
   833  00FFF4  012E               	dw	302
   834  00FFF6  0000               	dw	0
   835  00FFF8  0000               	dw	0
   836  00FFFA  01                 	db	1
   837  00FFFB  FF                 	db	255
   838  00FFFC                     __end_of_DefaultChannels868:
   839                           	opt stack 0
   840  00FFFC                     _FskSyncWordBuff:
   841                           	opt stack 0
   842  00FFFC  C1                 	db	193
   843  00FFFD  94                 	db	148
   844  00FFFE  C1                 	db	193
   845  00FFFF                     __end_of_FskSyncWordBuff:
   846                           	opt stack 0
   847  00FFFF  00                 	db	0	; dummy byte at the end
   848  0000                     
   849                           	psect	nvBANK1
   850  0001FD                     __pnvBANK1:
   851                           	opt stack 0
   852  0001FD                     _timer1ReloadVal:
   853                           	opt stack 0
   854  0001FD                     	ds	2
   855  0001FF                     _eusart1TxBufferRemaining:
   856                           	opt stack 0
   857  0001FF                     	ds	1
   858                           
   859                           	psect	nvBANK3
   860  0003E3                     __pnvBANK3:
   861                           	opt stack 0
   862  0003E3                     _timer5ReloadVal:
   863                           	opt stack 0
   864  0003E3                     	ds	2
   865  0003E5                     _TMR1_InterruptHandler:
   866                           	opt stack 0
   867  0003E5                     	ds	2
   868  0003E7                     _EUSART1_ErrorHandler:
   869                           	opt stack 0
   870  0003E7                     	ds	2
   871  0003E9                     _EUSART1_OverrunErrorHandler:
   872                           	opt stack 0
   873  0003E9                     	ds	2
   874  0003EB                     _EUSART1_FramingErrorHandler:
   875                           	opt stack 0
   876  0003EB                     	ds	2
   877  0003ED                     _IOCB4_InterruptHandler:
   878                           	opt stack 0
   879  0003ED                     	ds	2
   880  0003EF                     _EUSART1_RxDefaultInterruptHandler:
   881                           	opt stack 0
   882  0003EF                     	ds	2
   883  0003F1                     _EUSART1_TxDefaultInterruptHandler:
   884                           	opt stack 0
   885  0003F1                     	ds	2
   886  0003F3                     _INT2_InterruptHandler:
   887                           	opt stack 0
   888  0003F3                     	ds	2
   889  0003F5                     _INT1_InterruptHandler:
   890                           	opt stack 0
   891  0003F5                     	ds	2
   892  0000                     _TMR5	set	3919
   893  0000                     _T5GCONbits	set	3917
   894  0000                     _T5CONbits	set	3918
   895  0000                     _T5CON	set	3918
   896  0000                     _TMR5L	set	3919
   897  0000                     _TMR5H	set	3920
   898  0000                     _T5GCON	set	3917
   899  0000                     _ANSELA	set	3896
   900  0000                     _ANSELE	set	3900
   901  0000                     _ANSELB	set	3897
   902  0000                     _ANSELC	set	3898
   903  0000                     _ANSELD	set	3899
   904  0000                     _TMR1	set	4046
   905  0000                     _TXREG	set	4013
   906  0000                     _PIR5bits	set	3966
   907  0000                     _T1GCONbits	set	4044
   908  0000                     _T1CONbits	set	4045
   909  0000                     _T1CON	set	4045
   910  0000                     _TMR1L	set	4046
   911  0000                     _TMR1H	set	4047
   912  0000                     _T1GCON	set	4044
   913  0000                     _RCREG1	set	4014
   914  0000                     _RCSTA1bits	set	4011
   915  0000                     _TXREG1	set	4013
   916  0000                     _TXSTA1bits	set	4012
   917  0000                     _SPBRGH1	set	4016
   918  0000                     _SPBRG1	set	4015
   919  0000                     _TXSTA1	set	4012
   920  0000                     _RCSTA1	set	4011
   921  0000                     _BAUDCON1	set	4024
   922  0000                     _SSP2STATbits	set	3949
   923  0000                     _SSP2BUF	set	3951
   924  0000                     _SSP2CON1bits	set	3948
   925  0000                     _SSP2ADD	set	3950
   926  0000                     _SSP2CON1	set	3948
   927  0000                     _SSP2STAT	set	3949
   928  0000                     _IOCBbits	set	3938
   929  0000                     _WPUB	set	3937
   930  0000                     _TRISD	set	3989
   931  0000                     _TRISC	set	3988
   932  0000                     _TRISB	set	3987
   933  0000                     _TRISA	set	3986
   934  0000                     _TRISE	set	3990
   935  0000                     _LATC	set	3979
   936  0000                     _LATB	set	3978
   937  0000                     _LATA	set	3977
   938  0000                     _LATD	set	3980
   939  0000                     _LATE	set	3981
   940  0000                     _OSCTUNE	set	3995
   941  0000                     _OSCCON2	set	4050
   942  0000                     _OSCCON	set	4051
   943  0000                     _PIR1bits	set	3998
   944  0000                     _PIE1bits	set	3997
   945  0000                     _RCONbits	set	4048
   946  0000                     _INTCON2bits	set	4081
   947  0000                     _INTCON3bits	set	4080
   948  0000                     _INTCONbits	set	4082
   949  0000                     _PORTBbits	set	3969
   950  0000                     _TMR5IF	set	31729
   951  0000                     _LATD3	set	31843
   952  0000                     _LATC2	set	31834
   953  0000                     _TRISC2	set	31906
   954                           
   955                           ; #config settings
   956  0000                     
   957                           	psect	cinit
   958  006A82                     __pcinit:
   959                           	opt stack 0
   960  006A82                     start_initialization:
   961                           	opt stack 0
   962  006A82                     __initialization:
   963                           	opt stack 0
   964                           
   965                           ; Initialize objects allocated to BANK4 (16 bytes)
   966                           ; load TBLPTR registers with __pidataBANK4
   967  006A82  0E12               	movlw	low __pidataBANK4
   968  006A84  6EF6               	movwf	tblptrl,c
   969  006A86  0E94               	movlw	high __pidataBANK4
   970  006A88  6EF7               	movwf	tblptrh,c
   971  006A8A  0E00               	movlw	low (__pidataBANK4 shr (0+16))
   972  006A8C  6EF8               	movwf	tblptru,c
   973  006A8E  EE04  F0E0         	lfsr	0,__pdataBANK4
   974  006A92  EE20 F010          	lfsr	2,16
   975  006A96                     copy_data0:
   976  006A96  0009               	tblrd		*+
   977  006A98  CFF5 FFEE          	movff	tablat,postinc0
   978  006A9C  50DD               	movf	postdec2,w,c
   979  006A9E  50D9               	movf	fsr2l,w,c
   980  006AA0  E1FA               	bnz	copy_data0
   981                           
   982                           ; Initialize objects allocated to BANK3 (44 bytes)
   983                           ; load TBLPTR registers with __pidataBANK3
   984  006AA2  0E96               	movlw	low __pidataBANK3
   985  006AA4  6EF6               	movwf	tblptrl,c
   986  006AA6  0E8E               	movlw	high __pidataBANK3
   987  006AA8  6EF7               	movwf	tblptrh,c
   988  006AAA  0E00               	movlw	low (__pidataBANK3 shr (0+16))
   989  006AAC  6EF8               	movwf	tblptru,c
   990  006AAE  EE03  F0B7         	lfsr	0,__pdataBANK3
   991  006AB2  EE20 F02C          	lfsr	2,44
   992  006AB6                     copy_data1:
   993  006AB6  0009               	tblrd		*+
   994  006AB8  CFF5 FFEE          	movff	tablat,postinc0
   995  006ABC  50DD               	movf	postdec2,w,c
   996  006ABE  50D9               	movf	fsr2l,w,c
   997  006AC0  E1FA               	bnz	copy_data1
   998                           
   999                           ; Initialize objects allocated to BANK2 (4 bytes)
  1000                           ; load TBLPTR registers with __pidataBANK2
  1001  006AC2  0ED2               	movlw	low __pidataBANK2
  1002  006AC4  6EF6               	movwf	tblptrl,c
  1003  006AC6  0E95               	movlw	high __pidataBANK2
  1004  006AC8  6EF7               	movwf	tblptrh,c
  1005  006ACA  0E00               	movlw	low (__pidataBANK2 shr (0+16))
  1006  006ACC  6EF8               	movwf	tblptru,c
  1007  006ACE  EE02  F0FB         	lfsr	0,__pdataBANK2
  1008  006AD2  EE20 F004          	lfsr	2,4
  1009  006AD6                     copy_data2:
  1010  006AD6  0009               	tblrd		*+
  1011  006AD8  CFF5 FFEE          	movff	tablat,postinc0
  1012  006ADC  50DD               	movf	postdec2,w,c
  1013  006ADE  50D9               	movf	fsr2l,w,c
  1014  006AE0  E1FA               	bnz	copy_data2
  1015                           
  1016                           ; Initialize objects allocated to COMRAM (4 bytes)
  1017                           ; load TBLPTR registers with __pidataCOMRAM
  1018  006AE2  0ECE               	movlw	low __pidataCOMRAM
  1019  006AE4  6EF6               	movwf	tblptrl,c
  1020  006AE6  0E95               	movlw	high __pidataCOMRAM
  1021  006AE8  6EF7               	movwf	tblptrh,c
  1022  006AEA  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
  1023  006AEC  6EF8               	movwf	tblptru,c
  1024  006AEE  EE00  F054         	lfsr	0,__pdataCOMRAM
  1025  006AF2  EE20 F004          	lfsr	2,4
  1026  006AF6                     copy_data3:
  1027  006AF6  0009               	tblrd		*+
  1028  006AF8  CFF5 FFEE          	movff	tablat,postinc0
  1029  006AFC  50DD               	movf	postdec2,w,c
  1030  006AFE  50D9               	movf	fsr2l,w,c
  1031  006B00  E1FA               	bnz	copy_data3
  1032                           
  1033                           ; Clear objects allocated to BIGRAM (542 bytes)
  1034  006B02  EE05  F080         	lfsr	0,__pbssBIGRAM
  1035  006B06  EE22 F01E          	lfsr	2,542
  1036  006B0A                     clear_0:
  1037  006B0A  6AEE               	clrf	postinc0,c
  1038  006B0C  50DD               	movf	postdec2,w,c
  1039  006B0E  50D9               	movf	fsr2l,w,c
  1040  006B10  E1FC               	bnz	clear_0
  1041  006B12  50DA               	movf	fsr2h,w,c
  1042  006B14  E1FA               	bnz	clear_0
  1043                           
  1044                           ; Clear objects allocated to BANK5 (128 bytes)
  1045  006B16  EE05  F000         	lfsr	0,__pbssBANK5
  1046  006B1A  0E80               	movlw	128
  1047  006B1C                     clear_1:
  1048  006B1C  6AEE               	clrf	postinc0,c
  1049  006B1E  06E8               	decf	wreg,f,c
  1050  006B20  E1FD               	bnz	clear_1
  1051                           
  1052                           ; Clear objects allocated to BANK4 (224 bytes)
  1053  006B22  EE04  F000         	lfsr	0,__pbssBANK4
  1054  006B26  0EE0               	movlw	224
  1055  006B28                     clear_2:
  1056  006B28  6AEE               	clrf	postinc0,c
  1057  006B2A  06E8               	decf	wreg,f,c
  1058  006B2C  E1FD               	bnz	clear_2
  1059                           
  1060                           ; Clear objects allocated to BANK3 (183 bytes)
  1061  006B2E  EE03  F000         	lfsr	0,__pbssBANK3
  1062  006B32  0EB7               	movlw	183
  1063  006B34                     clear_3:
  1064  006B34  6AEE               	clrf	postinc0,c
  1065  006B36  06E8               	decf	wreg,f,c
  1066  006B38  E1FD               	bnz	clear_3
  1067                           
  1068                           ; Clear objects allocated to BANK2 (251 bytes)
  1069  006B3A  EE02  F000         	lfsr	0,__pbssBANK2
  1070  006B3E  0EFB               	movlw	251
  1071  006B40                     clear_4:
  1072  006B40  6AEE               	clrf	postinc0,c
  1073  006B42  06E8               	decf	wreg,f,c
  1074  006B44  E1FD               	bnz	clear_4
  1075                           
  1076                           ; Clear objects allocated to BANK1 (143 bytes)
  1077  006B46  EE01  F000         	lfsr	0,__pbssBANK1
  1078  006B4A  0E8F               	movlw	143
  1079  006B4C                     clear_5:
  1080  006B4C  6AEE               	clrf	postinc0,c
  1081  006B4E  06E8               	decf	wreg,f,c
  1082  006B50  E1FD               	bnz	clear_5
  1083                           
  1084                           ; Clear objects allocated to COMRAM (10 bytes)
  1085  006B52  EE00  F04A         	lfsr	0,__pbssCOMRAM
  1086  006B56  0E0A               	movlw	10
  1087  006B58                     clear_6:
  1088  006B58  6AEE               	clrf	postinc0,c
  1089  006B5A  06E8               	decf	wreg,f,c
  1090  006B5C  E1FD               	bnz	clear_6
  1091  006B5E                     end_of_initialization:
  1092                           	opt stack 0
  1093  006B5E                     __end_of__initialization:
  1094                           	opt stack 0
  1095  006B5E  0100               	movlb	0
  1096  006B60  EFA6  F014         	goto	_main	;jump to C main() function
  1097                           tblptru	equ	0xFF8
  1098                           tblptrh	equ	0xFF7
  1099                           tblptrl	equ	0xFF6
  1100                           tablat	equ	0xFF5
  1101                           postinc0	equ	0xFEE
  1102                           wreg	equ	0xFE8
  1103                           postdec2	equ	0xFDD
  1104                           fsr2h	equ	0xFDA
  1105                           fsr2l	equ	0xFD9
  1106                           
  1107                           	psect	bssCOMRAM
  1108  00004A                     __pbssCOMRAM:
  1109                           	opt stack 0
  1110  00004A                     _datatobesolved:
  1111                           	opt stack 0
  1112  00004A                     	ds	2
  1113  00004C                     _reloadVal:
  1114                           	opt stack 0
  1115  00004C                     	ds	2
  1116  00004E                     _eusart1RxStatusBuffer:
  1117                           	opt stack 0
  1118  00004E                     	ds	1
  1119  00004F                     _eusart1RxTail:
  1120                           	opt stack 0
  1121  00004F                     	ds	1
  1122  000050                     _eusart1RxHead:
  1123                           	opt stack 0
  1124  000050                     	ds	1
  1125  000051                     _eusart1TxHead:
  1126                           	opt stack 0
  1127  000051                     	ds	1
  1128  000052                     __rcon:
  1129                           	opt stack 0
  1130  000052                     	ds	1
  1131  000053                     _timerOverflow:
  1132                           	opt stack 0
  1133  000053                     	ds	1
  1134                           tblptru	equ	0xFF8
  1135                           tblptrh	equ	0xFF7
  1136                           tblptrl	equ	0xFF6
  1137                           tablat	equ	0xFF5
  1138                           postinc0	equ	0xFEE
  1139                           wreg	equ	0xFE8
  1140                           postdec2	equ	0xFDD
  1141                           fsr2h	equ	0xFDA
  1142                           fsr2l	equ	0xFD9
  1143                           
  1144                           	psect	dataCOMRAM
  1145  000054                     __pdataCOMRAM:
  1146                           	opt stack 0
  1147  000054                     _ticksToScheduledInterrupt:
  1148                           	opt stack 0
  1149  000054                     	ds	4
  1150                           tblptru	equ	0xFF8
  1151                           tblptrh	equ	0xFF7
  1152                           tblptrl	equ	0xFF6
  1153                           tablat	equ	0xFF5
  1154                           postinc0	equ	0xFEE
  1155                           wreg	equ	0xFE8
  1156                           postdec2	equ	0xFDD
  1157                           fsr2h	equ	0xFDA
  1158                           fsr2l	equ	0xFD9
  1159                           
  1160                           	psect	bssBANK1
  1161  000100                     __pbssBANK1:
  1162                           	opt stack 0
  1163  000100                     TMR_GetDeltaTime@retVal:
  1164                           	opt stack 0
  1165  000100                     	ds	4
  1166  000104                     _ticksAccounted:
  1167                           	opt stack 0
  1168  000104                     	ds	4
  1169  000108                     _ticksAdded:
  1170                           	opt stack 0
  1171  000108                     	ds	4
  1172  00010C                     _rxPayload:
  1173                           	opt stack 0
  1174  00010C                     	ds	4
  1175  000110                     _first5decimal:
  1176                           	opt stack 0
  1177  000110                     	ds	2
  1178  000112                     _first4decimal:
  1179                           	opt stack 0
  1180  000112                     	ds	2
  1181  000114                     _first3decimal:
  1182                           	opt stack 0
  1183  000114                     	ds	2
  1184  000116                     _first2decimal:
  1185                           	opt stack 0
  1186  000116                     	ds	2
  1187  000118                     _first1decimal:
  1188                           	opt stack 0
  1189  000118                     	ds	2
  1190  00011A                     _resultdata2send:
  1191                           	opt stack 0
  1192  00011A                     	ds	2
  1193  00011C                     _firstdigit:
  1194                           	opt stack 0
  1195  00011C                     	ds	2
  1196  00011E                     _seconddigit:
  1197                           	opt stack 0
  1198  00011E                     	ds	2
  1199  000120                     _thirddigit:
  1200                           	opt stack 0
  1201  000120                     	ds	2
  1202  000122                     _fourthdigit:
  1203                           	opt stack 0
  1204  000122                     	ds	2
  1205  000124                     _testassign2:
  1206                           	opt stack 0
  1207  000124                     	ds	2
  1208  000126                     _testassign:
  1209                           	opt stack 0
  1210  000126                     	ds	2
  1211  000128                     _bitStatus7:
  1212                           	opt stack 0
  1213  000128                     	ds	2
  1214  00012A                     _bitStatus6:
  1215                           	opt stack 0
  1216  00012A                     	ds	2
  1217  00012C                     _bitStatus5:
  1218                           	opt stack 0
  1219  00012C                     	ds	2
  1220  00012E                     _bitStatus4:
  1221                           	opt stack 0
  1222  00012E                     	ds	2
  1223  000130                     _bitStatus3:
  1224                           	opt stack 0
  1225  000130                     	ds	2
  1226  000132                     _bitStatus2:
  1227                           	opt stack 0
  1228  000132                     	ds	2
  1229  000134                     _bitStatus1:
  1230                           	opt stack 0
  1231  000134                     	ds	2
  1232  000136                     _bitStatusbefore7:
  1233                           	opt stack 0
  1234  000136                     	ds	2
  1235  000138                     _bitStatusbefore6:
  1236                           	opt stack 0
  1237  000138                     	ds	2
  1238  00013A                     _bitStatusbefore5:
  1239                           	opt stack 0
  1240  00013A                     	ds	2
  1241  00013C                     _bitStatusbefore4:
  1242                           	opt stack 0
  1243  00013C                     	ds	2
  1244  00013E                     _bitStatusbefore3:
  1245                           	opt stack 0
  1246  00013E                     	ds	2
  1247  000140                     _bitStatusbefore2:
  1248                           	opt stack 0
  1249  000140                     	ds	2
  1250  000142                     _bitStatusbefore1:
  1251                           	opt stack 0
  1252  000142                     	ds	2
  1253  000144                     _counterinterrupt:
  1254                           	opt stack 0
  1255  000144                     	ds	2
  1256  000146                     TMR_SwapTimer@retVal:
  1257                           	opt stack 0
  1258  000146                     	ds	2
  1259  000148                     TMR_SwapTimer@oldVal:
  1260                           	opt stack 0
  1261  000148                     	ds	2
  1262  00014A                     TMR_GetDeltaTime@tmrVal:
  1263                           	opt stack 0
  1264  00014A                     	ds	2
  1265  00014C                     _counter:
  1266                           	opt stack 0
  1267  00014C                     	ds	1
  1268  00014D                     _datax:
  1269                           	opt stack 0
  1270  00014D                     	ds	1
  1271  00014E                     _eusart1RxLastError:
  1272                           	opt stack 0
  1273  00014E                     	ds	1
  1274  00014F                     _eusart1RxCount:
  1275                           	opt stack 0
  1276  00014F                     	ds	1
  1277  000150                     _eusart1RxBuffer:
  1278                           	opt stack 0
  1279  000150                     	ds	1
  1280  000151                     _eusart1TxBuffer:
  1281                           	opt stack 0
  1282  000151                     	ds	1
  1283  000152                     _eusart1TxTail:
  1284                           	opt stack 0
  1285  000152                     	ds	1
  1286  000153                     __roundCounter:
  1287                           	opt stack 0
  1288  000153                     	ds	1
  1289  000154                     _allocatedTimers:
  1290                           	opt stack 0
  1291  000154                     	ds	1
  1292  000155                     _localDioStatus:
  1293                           	opt stack 0
  1294  000155                     	ds	1
  1295  000156                     _dioStatus:
  1296                           	opt stack 0
  1297  000156                     	ds	1
  1298  000157                     _RadioConfiguration:
  1299                           	opt stack 0
  1300  000157                     	ds	54
  1301  00018D                     _dataresult:
  1302                           	opt stack 0
  1303  00018D                     	ds	2
  1304                           tblptru	equ	0xFF8
  1305                           tblptrh	equ	0xFF7
  1306                           tblptrl	equ	0xFF6
  1307                           tablat	equ	0xFF5
  1308                           postinc0	equ	0xFEE
  1309                           wreg	equ	0xFE8
  1310                           postdec2	equ	0xFDD
  1311                           fsr2h	equ	0xFDA
  1312                           fsr2l	equ	0xFD9
  1313                           
  1314                           	psect	bssBANK2
  1315  000200                     __pbssBANK2:
  1316                           	opt stack 0
  1317  000200                     _n:
  1318                           	opt stack 0
  1319  000200                     	ds	2
  1320  000202                     _countera:
  1321                           	opt stack 0
  1322  000202                     	ds	2
  1323  000204                     _bitStatus:
  1324                           	opt stack 0
  1325  000204                     	ds	2
  1326  000206                     _loRa:
  1327                           	opt stack 0
  1328  000206                     	ds	245
  1329                           tblptru	equ	0xFF8
  1330                           tblptrh	equ	0xFF7
  1331                           tblptrl	equ	0xFF6
  1332                           tablat	equ	0xFF5
  1333                           postinc0	equ	0xFEE
  1334                           wreg	equ	0xFE8
  1335                           postdec2	equ	0xFDD
  1336                           fsr2h	equ	0xFDA
  1337                           fsr2l	equ	0xFD9
  1338                           
  1339                           	psect	dataBANK2
  1340  0002FB                     __pdataBANK2:
  1341                           	opt stack 0
  1342  0002FB                     _randx:
  1343                           	opt stack 0
  1344  0002FB                     	ds	4
  1345                           tblptru	equ	0xFF8
  1346                           tblptrh	equ	0xFF7
  1347                           tblptrl	equ	0xFF6
  1348                           tablat	equ	0xFF5
  1349                           postinc0	equ	0xFEE
  1350                           wreg	equ	0xFE8
  1351                           postdec2	equ	0xFDD
  1352                           fsr2h	equ	0xFDA
  1353                           fsr2l	equ	0xFD9
  1354                           
  1355                           	psect	bssBANK3
  1356  000300                     __pbssBANK3:
  1357                           	opt stack 0
  1358  000300                     _swTimers:
  1359                           	opt stack 0
  1360  000300                     	ds	160
  1361  0003A0                     _cout:
  1362                           	opt stack 0
  1363  0003A0                     	ds	2
  1364  0003A2                     _aesBuffer:
  1365                           	opt stack 0
  1366  0003A2                     	ds	16
  1367  0003B2                     _tosend:
  1368                           	opt stack 0
  1369  0003B2                     	ds	5
  1370                           tblptru	equ	0xFF8
  1371                           tblptrh	equ	0xFF7
  1372                           tblptrl	equ	0xFF6
  1373                           tablat	equ	0xFF5
  1374                           postinc0	equ	0xFEE
  1375                           wreg	equ	0xFE8
  1376                           postdec2	equ	0xFDD
  1377                           fsr2h	equ	0xFDA
  1378                           fsr2l	equ	0xFD9
  1379                           
  1380                           	psect	dataBANK3
  1381  0003B7                     __pdataBANK3:
  1382                           	opt stack 0
  1383  0003B7                     GenerateSubkey@F7103:
  1384                           	opt stack 0
  1385  0003B7                     	ds	16
  1386  0003C7                     _testtest:
  1387                           	opt stack 0
  1388  0003C7                     	ds	5
  1389  0003CC                     _devAddr:
  1390                           	opt stack 0
  1391  0003CC                     	ds	4
  1392  0003D0                     _hexNum:
  1393                           	opt stack 0
  1394  0003D0                     	ds	3
  1395  0003D3                     _nwkSKey:
  1396                           	opt stack 0
  1397  0003D3                     	ds	16
  1398                           tblptru	equ	0xFF8
  1399                           tblptrh	equ	0xFF7
  1400                           tblptrl	equ	0xFF6
  1401                           tablat	equ	0xFF5
  1402                           postinc0	equ	0xFEE
  1403                           wreg	equ	0xFE8
  1404                           postdec2	equ	0xFDD
  1405                           fsr2h	equ	0xFDA
  1406                           fsr2l	equ	0xFD9
  1407                           
  1408                           	psect	bssBANK4
  1409  000400                     __pbssBANK4:
  1410                           	opt stack 0
  1411  000400                     _Channels:
  1412                           	opt stack 0
  1413  000400                     	ds	224
  1414                           tblptru	equ	0xFF8
  1415                           tblptrh	equ	0xFF7
  1416                           tblptrl	equ	0xFF6
  1417                           tablat	equ	0xFF5
  1418                           postinc0	equ	0xFEE
  1419                           wreg	equ	0xFE8
  1420                           postdec2	equ	0xFDD
  1421                           fsr2h	equ	0xFDA
  1422                           fsr2l	equ	0xFD9
  1423                           
  1424                           	psect	dataBANK4
  1425  0004E0                     __pdataBANK4:
  1426                           	opt stack 0
  1427  0004E0                     _appSKey:
  1428                           	opt stack 0
  1429  0004E0                     	ds	16
  1430                           tblptru	equ	0xFF8
  1431                           tblptrh	equ	0xFF7
  1432                           tblptrl	equ	0xFF6
  1433                           tablat	equ	0xFF5
  1434                           postinc0	equ	0xFEE
  1435                           wreg	equ	0xFE8
  1436                           postdec2	equ	0xFDD
  1437                           fsr2h	equ	0xFDA
  1438                           fsr2l	equ	0xFD9
  1439                           
  1440                           	psect	bssBANK5
  1441  000500                     __pbssBANK5:
  1442                           	opt stack 0
  1443  000500                     _sub:
  1444                           	opt stack 0
  1445  000500                     	ds	64
  1446  000540                     _dataxstr:
  1447                           	opt stack 0
  1448  000540                     	ds	64
  1449                           tblptru	equ	0xFF8
  1450                           tblptrh	equ	0xFF7
  1451                           tblptrl	equ	0xFF6
  1452                           tablat	equ	0xFF5
  1453                           postinc0	equ	0xFEE
  1454                           wreg	equ	0xFE8
  1455                           postdec2	equ	0xFDD
  1456                           fsr2h	equ	0xFDA
  1457                           fsr2l	equ	0xFD9
  1458                           
  1459                           	psect	bssBIGRAM
  1460  000580                     __pbssBIGRAM:
  1461                           	opt stack 0
  1462  000580                     _radioBuffer:
  1463                           	opt stack 0
  1464  000580                     	ds	271
  1465  00068F                     _macBuffer:
  1466                           	opt stack 0
  1467  00068F                     	ds	271
  1468                           tblptru	equ	0xFF8
  1469                           tblptrh	equ	0xFF7
  1470                           tblptrl	equ	0xFF6
  1471                           tablat	equ	0xFF5
  1472                           postinc0	equ	0xFEE
  1473                           wreg	equ	0xFE8
  1474                           postdec2	equ	0xFDD
  1475                           fsr2h	equ	0xFDA
  1476                           fsr2l	equ	0xFD9
  1477                           
  1478                           	psect	cstackBANK1
  1479  00018F                     __pcstackBANK1:
  1480                           	opt stack 0
  1481  00018F                     AESCmac@k2:
  1482                           	opt stack 0
  1483                           
  1484                           ; 16 bytes @ 0x0
  1485  00018F                     	ds	16
  1486  00019F                     AESCmac@k1:
  1487                           	opt stack 0
  1488                           
  1489                           ; 16 bytes @ 0x10
  1490  00019F                     	ds	16
  1491  0001AF                     AESCmac@mLast:
  1492                           	opt stack 0
  1493                           
  1494                           ; 16 bytes @ 0x20
  1495  0001AF                     	ds	16
  1496  0001BF                     AESCmac@padded:
  1497                           	opt stack 0
  1498                           
  1499                           ; 16 bytes @ 0x30
  1500  0001BF                     	ds	16
  1501  0001CF                     AESCmac@y:
  1502                           	opt stack 0
  1503                           
  1504                           ; 16 bytes @ 0x40
  1505  0001CF                     	ds	16
  1506  0001DF                     AESCmac@x:
  1507                           	opt stack 0
  1508                           
  1509                           ; 16 bytes @ 0x50
  1510  0001DF                     	ds	16
  1511  0001EF                     AESCmac@ptr:
  1512                           	opt stack 0
  1513                           
  1514                           ; 2 bytes @ 0x60
  1515  0001EF                     	ds	2
  1516  0001F1                     AESCmac@flag:
  1517                           	opt stack 0
  1518                           
  1519                           ; 1 bytes @ 0x62
  1520  0001F1                     	ds	1
  1521  0001F2                     AESCmac@n:
  1522                           	opt stack 0
  1523                           
  1524                           ; 1 bytes @ 0x63
  1525  0001F2                     	ds	1
  1526  0001F3                     AESCmac@j:
  1527                           	opt stack 0
  1528                           
  1529                           ; 1 bytes @ 0x64
  1530  0001F3                     	ds	1
  1531  0001F4                     AESCmac@i:
  1532                           	opt stack 0
  1533                           
  1534                           ; 1 bytes @ 0x65
  1535  0001F4                     	ds	1
  1536  0001F5                     LORAWAN_RxDone@buffer:
  1537                           	opt stack 0
  1538                           
  1539                           ; 2 bytes @ 0x66
  1540  0001F5                     	ds	2
  1541  0001F7                     LORAWAN_RxDone@bufferLength:
  1542                           	opt stack 0
  1543                           
  1544                           ; 1 bytes @ 0x68
  1545  0001F7                     	ds	1
  1546  0001F8                     main@first1decimalc:
  1547                           	opt stack 0
  1548                           
  1549                           ; 1 bytes @ 0x69
  1550  0001F8                     	ds	1
  1551  0001F9                     main@first2decimalc:
  1552                           	opt stack 0
  1553                           
  1554                           ; 1 bytes @ 0x6A
  1555  0001F9                     	ds	1
  1556  0001FA                     main@first3decimalc:
  1557                           	opt stack 0
  1558                           
  1559                           ; 1 bytes @ 0x6B
  1560  0001FA                     	ds	1
  1561  0001FB                     main@first4decimalc:
  1562                           	opt stack 0
  1563                           
  1564                           ; 1 bytes @ 0x6C
  1565  0001FB                     	ds	1
  1566  0001FC                     main@first5decimalc:
  1567                           	opt stack 0
  1568                           
  1569                           ; 1 bytes @ 0x6D
  1570  0001FC                     	ds	1
  1571                           tblptru	equ	0xFF8
  1572                           tblptrh	equ	0xFF7
  1573                           tblptrl	equ	0xFF6
  1574                           tablat	equ	0xFF5
  1575                           postinc0	equ	0xFEE
  1576                           wreg	equ	0xFE8
  1577                           postdec2	equ	0xFDD
  1578                           fsr2h	equ	0xFDA
  1579                           fsr2l	equ	0xFD9
  1580                           
  1581                           	psect	cstackBANK0
  1582  000060                     __pcstackBANK0:
  1583                           	opt stack 0
  1584  000060                     ??_FindSmallestDataRate:
  1585  000060                     ??_CountfOptsLength:
  1586  000060                     ??_UpdateMinMaxChDataRate:
  1587  000060                     ?_ExecuteLinkCheck:
  1588                           	opt stack 0
  1589  000060                     ?_ExecuteDutyCycle:
  1590                           	opt stack 0
  1591  000060                     ?_ExecuteDevStatus:
  1592                           	opt stack 0
  1593  000060                     ?_TMR1_ReadTimer:
  1594                           	opt stack 0
  1595  000060                     ?___wmul:
  1596                           	opt stack 0
  1597  000060                     ?___awmod:
  1598                           	opt stack 0
  1599  000060                     ?_GetRx1Freq:
  1600                           	opt stack 0
  1601  000060                     ?___almod:
  1602                           	opt stack 0
  1603  000060                     ?___lldiv:
  1604                           	opt stack 0
  1605  000060                     ?___llmod:
  1606                           	opt stack 0
  1607  000060                     HALResetPinOutputValue@value:
  1608                           	opt stack 0
  1609  000060                     RADIO_SetLoRaSyncWord@syncWord:
  1610                           	opt stack 0
  1611  000060                     RADIO_SetSpreadingFactor@spreadingFactor:
  1612                           	opt stack 0
  1613  000060                     RADIO_SetOutputPower@power:
  1614                           	opt stack 0
  1615  000060                     RADIO_SetCRC@crc:
  1616                           	opt stack 0
  1617  000060                     RADIO_SetIQInverted@iqInverted:
  1618                           	opt stack 0
  1619  000060                     RADIO_SetBandwidth@bandwidth:
  1620                           	opt stack 0
  1621  000060                     RADIO_SetModulation@modulation:
  1622                           	opt stack 0
  1623  000060                     UpdateCurrentDataRate@valueNew:
  1624                           	opt stack 0
  1625  000060                     UpdateTxPower@txPowerNew:
  1626                           	opt stack 0
  1627  000060                     UpdateJoinInProgress@state:
  1628                           	opt stack 0
  1629  000060                     INTERRUPT_GetDioStatus@a:
  1630                           	opt stack 0
  1631  000060                     SwTimerCreate@retVal:
  1632                           	opt stack 0
  1633  000060                     SwTimerIsRunning@timerId:
  1634                           	opt stack 0
  1635  000060                     SwTimerStop@timerId:
  1636                           	opt stack 0
  1637  000060                     ValidateDataRate@dataRate:
  1638                           	opt stack 0
  1639  000060                     ValidateTxPower@result:
  1640                           	opt stack 0
  1641  000060                     UpdateDLSettings@dlRx1DrOffset:
  1642                           	opt stack 0
  1643  000060                     UpdateDataRange@dataRangeNew:
  1644                           	opt stack 0
  1645  000060                     UpdateChannelIdStatus@statusNew:
  1646                           	opt stack 0
  1647  000060                     ValidateRxOffset@rxOffset:
  1648                           	opt stack 0
  1649  000060                     ValidateChannelId@allowedForDefaultChannels:
  1650                           	opt stack 0
  1651  000060                     ValidateChannelMaskCntl@result:
  1652                           	opt stack 0
  1653  000060                     SPI2_Exchange8bit@data:
  1654                           	opt stack 0
  1655  000060                     EUSART1_Write@txData:
  1656                           	opt stack 0
  1657  000060                     ___abdiv@divisor:
  1658                           	opt stack 0
  1659  000060                     FillSubKey@source:
  1660                           	opt stack 0
  1661  000060                     RADIO_SetFrequencyHopPeriod@frequencyHopPeriod:
  1662                           	opt stack 0
  1663  000060                     ExecuteLinkCheck@ptr:
  1664                           	opt stack 0
  1665  000060                     IncludeMacCommandsResponse@macBuffer:
  1666                           	opt stack 0
  1667  000060                     CheckFlags@hdr:
  1668                           	opt stack 0
  1669  000060                     CheckMcastFlags@hdr:
  1670                           	opt stack 0
  1671  000060                     SwTimerSetCallback@callback:
  1672                           	opt stack 0
  1673  000060                     EncKeySchedule@key:
  1674                           	opt stack 0
  1675  000060                     EncodeShiftRow@stateTable:
  1676                           	opt stack 0
  1677  000060                     ExecuteDutyCycle@ptr:
  1678                           	opt stack 0
  1679  000060                     ExecuteDevStatus@ptr:
  1680                           	opt stack 0
  1681  000060                     UpdateDutyCycle@dutyCycleNew:
  1682                           	opt stack 0
  1683  000060                     ValidateChannelMask@channelMask:
  1684                           	opt stack 0
  1685  000060                     INT1_SetInterruptHandler@InterruptHandler:
  1686                           	opt stack 0
  1687  000060                     INT2_SetInterruptHandler@InterruptHandler:
  1688                           	opt stack 0
  1689  000060                     IOCB4_SetInterruptHandler@InterruptHandler:
  1690                           	opt stack 0
  1691  000060                     EUSART1_SetFramingErrorHandler@interruptHandler:
  1692                           	opt stack 0
  1693  000060                     EUSART1_SetOverrunErrorHandler@interruptHandler:
  1694                           	opt stack 0
  1695  000060                     EUSART1_SetErrorHandler@interruptHandler:
  1696                           	opt stack 0
  1697  000060                     EUSART1_SetTxInterruptHandler@interruptHandler:
  1698                           	opt stack 0
  1699  000060                     EUSART1_SetRxInterruptHandler@interruptHandler:
  1700                           	opt stack 0
  1701  000060                     TMR1_WriteTimer@timerVal:
  1702                           	opt stack 0
  1703  000060                     TMR1_SetInterruptHandler@InterruptHandler:
  1704                           	opt stack 0
  1705  000060                     RxData@pData:
  1706                           	opt stack 0
  1707  000060                     ___wmul@multiplier:
  1708                           	opt stack 0
  1709  000060                     ___awmod@dividend:
  1710                           	opt stack 0
  1711  000060                     memcpy@d1:
  1712                           	opt stack 0
  1713  000060                     memset@p1:
  1714                           	opt stack 0
  1715  000060                     RADIO_SetChannelFrequency@frequency:
  1716                           	opt stack 0
  1717  000060                     LORAWAN_SetDeviceAddress@deviceAddressNew:
  1718                           	opt stack 0
  1719  000060                     UpdateReceiveWindow2Parameters@frequency:
  1720                           	opt stack 0
  1721  000060                     SystemBlockingWaitMs@ms:
  1722                           	opt stack 0
  1723  000060                     ValidateFrequency@frequencyNew:
  1724                           	opt stack 0
  1725  000060                     UpdateFrequency@frequencyNew:
  1726                           	opt stack 0
  1727  000060                     ___almod@dividend:
  1728                           	opt stack 0
  1729  000060                     ___lldiv@dividend:
  1730                           	opt stack 0
  1731  000060                     ___llmod@dividend:
  1732                           	opt stack 0
  1733                           
  1734                           ; 4 bytes @ 0x0
  1735  000060                     	ds	1
  1736  000061                     ??_UpdateDataRange:
  1737  000061                     ??_UpdateChannelIdStatus:
  1738  000061                     ??___abdiv:
  1739  000061                     HALSPISend@data:
  1740                           	opt stack 0
  1741  000061                     UpdateMinMaxChDataRate@i:
  1742                           	opt stack 0
  1743  000061                     FindSmallestDataRate@found:
  1744                           	opt stack 0
  1745  000061                     SwTimerIsRunning@isRunning:
  1746                           	opt stack 0
  1747  000061                     ValidateDataRate@result:
  1748                           	opt stack 0
  1749  000061                     ValidateTxPower@txPowerNew:
  1750                           	opt stack 0
  1751  000061                     UpdateDLSettings@dlRx2Dr:
  1752                           	opt stack 0
  1753  000061                     ValidateRxOffset@result:
  1754                           	opt stack 0
  1755  000061                     ValidateChannelId@result:
  1756                           	opt stack 0
  1757  000061                     ValidateChannelMaskCntl@channelMaskCntl:
  1758                           	opt stack 0
  1759                           
  1760                           ; 1 bytes @ 0x1
  1761  000061                     	ds	1
  1762  000062                     ??_ExecuteDutyCycle:
  1763  000062                     ??_TMR1_ReadTimer:
  1764  000062                     ??_EncKeySchedule:
  1765  000062                     ??_ValidateChannelMask:
  1766  000062                     RADIO_RegisterWrite@value:
  1767                           	opt stack 0
  1768  000062                     RADIO_RegisterRead@reg:
  1769                           	opt stack 0
  1770  000062                     FindSmallestDataRate@i:
  1771                           	opt stack 0
  1772  000062                     SwTimerSetCallback@callbackParameter:
  1773                           	opt stack 0
  1774  000062                     EncodeShiftRow@temp:
  1775                           	opt stack 0
  1776  000062                     UpdateDataRange@channelId:
  1777                           	opt stack 0
  1778  000062                     UpdateChannelIdStatus@channelId:
  1779                           	opt stack 0
  1780  000062                     ValidateDataRange@result:
  1781                           	opt stack 0
  1782  000062                     ValidateChannelId@channelId:
  1783                           	opt stack 0
  1784  000062                     UpdateDutyCycle@channelId:
  1785                           	opt stack 0
  1786  000062                     RxData@dataLength:
  1787                           	opt stack 0
  1788  000062                     FillSubKey@key:
  1789                           	opt stack 0
  1790  000062                     IncludeMacCommandsResponse@pBufferIndex:
  1791                           	opt stack 0
  1792  000062                     ___wmul@multiplicand:
  1793                           	opt stack 0
  1794  000062                     ___awmod@divisor:
  1795                           	opt stack 0
  1796  000062                     memcpy@s1:
  1797                           	opt stack 0
  1798  000062                     memset@c:
  1799                           	opt stack 0
  1800                           
  1801                           ; 2 bytes @ 0x2
  1802  000062                     	ds	1
  1803  000063                     RADIO_RegisterWrite@reg:
  1804                           	opt stack 0
  1805  000063                     RADIO_RegisterRead@readValue:
  1806                           	opt stack 0
  1807  000063                     FindSmallestDataRate@dataRate:
  1808                           	opt stack 0
  1809  000063                     SwTimerSetCallback@timerId:
  1810                           	opt stack 0
  1811  000063                     UpdateDataRange@i:
  1812                           	opt stack 0
  1813  000063                     UpdateChannelIdStatus@i:
  1814                           	opt stack 0
  1815  000063                     ValidateDataRange@dataRangeNew:
  1816                           	opt stack 0
  1817  000063                     RxData@status:
  1818                           	opt stack 0
  1819  000063                     ___abdiv@counter:
  1820                           	opt stack 0
  1821                           
  1822                           ; 1 bytes @ 0x3
  1823  000063                     	ds	1
  1824  000064                     ??_SystemBlockingWaitMs:
  1825  000064                     FillSubKey@size:
  1826                           	opt stack 0
  1827  000064                     RADIO_WritePower@ocp:
  1828                           	opt stack 0
  1829  000064                     RADIO_UnhandledInterrupt@modulation:
  1830                           	opt stack 0
  1831  000064                     UpdateReceiveWindow2Parameters@dataRate:
  1832                           	opt stack 0
  1833  000064                     IncludeMacCommandsResponse@bIncludeInFopts:
  1834                           	opt stack 0
  1835  000064                     LORAWAN_SetChannelIdStatus@statusNew:
  1836                           	opt stack 0
  1837  000064                     ValidateFrequency@result:
  1838                           	opt stack 0
  1839  000064                     ValidateDataRange@dataRateMax:
  1840                           	opt stack 0
  1841  000064                     UpdateFrequency@channelId:
  1842                           	opt stack 0
  1843  000064                     ValidateChannelMask@i:
  1844                           	opt stack 0
  1845  000064                     ___abdiv@sign:
  1846                           	opt stack 0
  1847  000064                     ___awmod@counter:
  1848                           	opt stack 0
  1849  000064                     _EncKeySchedule$2132:
  1850                           	opt stack 0
  1851  000064                     EnableChannels1@channelMask:
  1852                           	opt stack 0
  1853  000064                     TMR1_ReadTimer@readVal:
  1854                           	opt stack 0
  1855  000064                     ___wmul@product:
  1856                           	opt stack 0
  1857  000064                     memcpy@n:
  1858                           	opt stack 0
  1859  000064                     memset@n:
  1860                           	opt stack 0
  1861  000064                     ___almod@divisor:
  1862                           	opt stack 0
  1863  000064                     ___lldiv@divisor:
  1864                           	opt stack 0
  1865  000064                     ___llmod@divisor:
  1866                           	opt stack 0
  1867                           
  1868                           ; 4 bytes @ 0x4
  1869  000064                     	ds	1
  1870  000065                     ??_FillSubKey:
  1871  000065                     ??_IncludeMacCommandsResponse:
  1872  000065                     ??_RADIO_DIO3:
  1873  000065                     ??_RADIO_DIO4:
  1874  000065                     ??_RADIO_DIO5:
  1875  000065                     RADIO_WriteMode@newModulation:
  1876                           	opt stack 0
  1877  000065                     RADIO_WritePower@paDac:
  1878                           	opt stack 0
  1879  000065                     LORAWAN_SetChannelIdStatus@result:
  1880                           	opt stack 0
  1881  000065                     ExecuteDutyCycle@maxDCycle:
  1882                           	opt stack 0
  1883  000065                     ValidateDataRange@dataRateMin:
  1884                           	opt stack 0
  1885  000065                     ___abdiv@quotient:
  1886                           	opt stack 0
  1887  000065                     ___awmod@sign:
  1888                           	opt stack 0
  1889                           
  1890                           ; 1 bytes @ 0x5
  1891  000065                     	ds	1
  1892  000066                     ?___awdiv:
  1893                           	opt stack 0
  1894  000066                     FillSubKey@carry:
  1895                           	opt stack 0
  1896  000066                     RADIO_WriteMode@blocking:
  1897                           	opt stack 0
  1898  000066                     RADIO_WritePower@power:
  1899                           	opt stack 0
  1900  000066                     RADIO_DIO3@dioMapping:
  1901                           	opt stack 0
  1902  000066                     RADIO_DIO5@dioMapping:
  1903                           	opt stack 0
  1904  000066                     UpdateReceiveDelays@delay:
  1905                           	opt stack 0
  1906  000066                     CountfOptsLength@macCommandLength:
  1907                           	opt stack 0
  1908  000066                     LORAWAN_SetChannelIdStatus@channelId:
  1909                           	opt stack 0
  1910  000066                     EnableChannels1@channelMaskCntl:
  1911                           	opt stack 0
  1912  000066                     TMR1_ReadTimer@readValHigh:
  1913                           	opt stack 0
  1914  000066                     ___abdiv@dividend:
  1915                           	opt stack 0
  1916  000066                     AESEncode@block:
  1917                           	opt stack 0
  1918  000066                     ___awdiv@dividend:
  1919                           	opt stack 0
  1920  000066                     memcpy@d:
  1921                           	opt stack 0
  1922  000066                     memset@p:
  1923                           	opt stack 0
  1924                           
  1925                           ; 2 bytes @ 0x6
  1926  000066                     	ds	1
  1927  000067                     ?_ExecuteRxTimingSetup:
  1928                           	opt stack 0
  1929  000067                     FillSubKey@i:
  1930                           	opt stack 0
  1931  000067                     RADIO_WriteMode@currentModulation:
  1932                           	opt stack 0
  1933  000067                     RADIO_DIO4@dioMapping:
  1934                           	opt stack 0
  1935  000067                     CountfOptsLength@i:
  1936                           	opt stack 0
  1937  000067                     EnableChannels1@channelIndexMin:
  1938                           	opt stack 0
  1939  000067                     TMR1_ReadTimer@readValLow:
  1940                           	opt stack 0
  1941  000067                     ExecuteRxTimingSetup@ptr:
  1942                           	opt stack 0
  1943                           
  1944                           ; 2 bytes @ 0x7
  1945  000067                     	ds	1
  1946  000068                     ??_LORAWAN_GetMaxPayloadSize:
  1947  000068                     ?_TMR_SwapTimer:
  1948                           	opt stack 0
  1949  000068                     ?_TMR_GetDeltaTime:
  1950                           	opt stack 0
  1951  000068                     RADIO_WriteMode@dioMapping:
  1952                           	opt stack 0
  1953  000068                     EnableChannels1@channelIndexMax:
  1954                           	opt stack 0
  1955  000068                     ___almod@counter:
  1956                           	opt stack 0
  1957  000068                     ___llmod@counter:
  1958                           	opt stack 0
  1959  000068                     TMR_SwapTimer@timerVal:
  1960                           	opt stack 0
  1961  000068                     AESEncode@key:
  1962                           	opt stack 0
  1963  000068                     ___awdiv@divisor:
  1964                           	opt stack 0
  1965  000068                     memcpy@s:
  1966                           	opt stack 0
  1967  000068                     ___lldiv@quotient:
  1968                           	opt stack 0
  1969                           
  1970                           ; 4 bytes @ 0x8
  1971  000068                     	ds	1
  1972  000069                     ??_EnableChannels1:
  1973  000069                     RADIO_WriteMode@currentMode:
  1974                           	opt stack 0
  1975  000069                     LORAWAN_GetMaxPayloadSize@macCommandsLength:
  1976                           	opt stack 0
  1977  000069                     ExecuteRxTimingSetup@delay:
  1978                           	opt stack 0
  1979  000069                     ___almod@sign:
  1980                           	opt stack 0
  1981                           
  1982                           ; 1 bytes @ 0x9
  1983  000069                     	ds	1
  1984  00006A                     ??_AESEncode:
  1985  00006A                     ?___aldiv:
  1986                           	opt stack 0
  1987  00006A                     RADIO_WriteMode@newMode:
  1988                           	opt stack 0
  1989  00006A                     LORAWAN_GetMaxPayloadSize@result:
  1990                           	opt stack 0
  1991  00006A                     ___awdiv@counter:
  1992                           	opt stack 0
  1993  00006A                     memcpy@tmp:
  1994                           	opt stack 0
  1995  00006A                     TMR_OverrideRemaining@ticksRemaining:
  1996                           	opt stack 0
  1997  00006A                     ___aldiv@dividend:
  1998                           	opt stack 0
  1999                           
  2000                           ; 4 bytes @ 0xA
  2001  00006A                     	ds	1
  2002  00006B                     ?_ExtractMic:
  2003                           	opt stack 0
  2004  00006B                     RADIO_WriteMode@opMode:
  2005                           	opt stack 0
  2006  00006B                     InitDefault868Channels@i:
  2007                           	opt stack 0
  2008  00006B                     InitDefault433Channels@i:
  2009                           	opt stack 0
  2010  00006B                     EnableChannels1@i:
  2011                           	opt stack 0
  2012  00006B                     ___awdiv@sign:
  2013                           	opt stack 0
  2014  00006B                     RADIO_SetFSKSyncWord@syncWord:
  2015                           	opt stack 0
  2016  00006B                     LORAWAN_SetNetworkSessionKey@networkSessionKeyNew:
  2017                           	opt stack 0
  2018  00006B                     LORAWAN_SetApplicationSessionKey@applicationSessionKeyNew:
  2019                           	opt stack 0
  2020  00006B                     PrepareSessionKeys@sessionKey:
  2021                           	opt stack 0
  2022  00006B                     ExtractMic@buffer:
  2023                           	opt stack 0
  2024  00006B                     AssembleEncryptionBlock@frameCounter:
  2025                           	opt stack 0
  2026                           
  2027                           ; 4 bytes @ 0xB
  2028  00006B                     	ds	1
  2029  00006C                     ??_TMR_GetDeltaTime:
  2030  00006C                     ?_RADIO_ReadRandom:
  2031                           	opt stack 0
  2032  00006C                     ___lldiv@counter:
  2033                           	opt stack 0
  2034  00006C                     EnableChannels@channelMask:
  2035                           	opt stack 0
  2036  00006C                     ___awdiv@quotient:
  2037                           	opt stack 0
  2038                           
  2039                           ; 2 bytes @ 0xC
  2040  00006C                     	ds	1
  2041  00006D                     RADIO_SetFSKSyncWord@syncWordLen:
  2042                           	opt stack 0
  2043  00006D                     IncludeMacCommandsResponse@i:
  2044                           	opt stack 0
  2045  00006D                     ExtractMic@bufferLength:
  2046                           	opt stack 0
  2047  00006D                     PrepareSessionKeys@appNonce:
  2048                           	opt stack 0
  2049  00006D                     RADIO_WriteFrequency@frequency:
  2050                           	opt stack 0
  2051  00006D                     RADIO_WriteFSKFrequencyDeviation@frequencyDeviation:
  2052                           	opt stack 0
  2053  00006D                     RADIO_WriteFSKBitRate@bitRate:
  2054                           	opt stack 0
  2055  00006D                     SwTimerSetTimeout@timeout:
  2056                           	opt stack 0
  2057                           
  2058                           ; 4 bytes @ 0xD
  2059  00006D                     	ds	1
  2060  00006E                     ??_RADIO_ReadRandom:
  2061  00006E                     ??_TMR_OverrideRemaining:
  2062  00006E                     IncludeMacCommandsResponse@bufferIndex:
  2063                           	opt stack 0
  2064  00006E                     EnableChannels@channelMaskCntl:
  2065                           	opt stack 0
  2066  00006E                     ConfigureRadio@freq:
  2067                           	opt stack 0
  2068  00006E                     ___aldiv@divisor:
  2069                           	opt stack 0
  2070                           
  2071                           ; 4 bytes @ 0xE
  2072  00006E                     	ds	1
  2073  00006F                     ??_ExtractMic:
  2074  00006F                     ?_ExecuteLinkAdr:
  2075                           	opt stack 0
  2076  00006F                     AssembleEncryptionBlock@blockId:
  2077                           	opt stack 0
  2078  00006F                     RADIO_ReadRandom@retVal:
  2079                           	opt stack 0
  2080  00006F                     PrepareSessionKeys@networkId:
  2081                           	opt stack 0
  2082  00006F                     ExecuteLinkAdr@ptr:
  2083                           	opt stack 0
  2084                           
  2085                           ; 2 bytes @ 0xF
  2086  00006F                     	ds	1
  2087  000070                     AssembleEncryptionBlock@firstByte:
  2088                           	opt stack 0
  2089  000070                     TMR_OverrideRemaining@tmrVal:
  2090                           	opt stack 0
  2091                           
  2092                           ; 2 bytes @ 0x10
  2093  000070                     	ds	1
  2094  000071                     ??_SwTimerSetTimeout:
  2095  000071                     ??_ExecuteLinkAdr:
  2096  000071                     RADIO_ReadRandom@i:
  2097                           	opt stack 0
  2098  000071                     PrepareSessionKeys@index:
  2099                           	opt stack 0
  2100  000071                     AssembleEncryptionBlock@multicastStatus:
  2101                           	opt stack 0
  2102  000071                     RADIO_WriteFrequency@num_mod:
  2103                           	opt stack 0
  2104  000071                     RADIO_WriteFSKFrequencyDeviation@num:
  2105                           	opt stack 0
  2106  000071                     RADIO_WriteFSKBitRate@num:
  2107                           	opt stack 0
  2108                           
  2109                           ; 4 bytes @ 0x11
  2110  000071                     	ds	1
  2111  000072                     AssembleEncryptionBlock@dir:
  2112                           	opt stack 0
  2113  000072                     ConfigureRadio@dataRate:
  2114                           	opt stack 0
  2115  000072                     ___aldiv@counter:
  2116                           	opt stack 0
  2117  000072                     TMR_OverrideRemaining@oldReloadVal:
  2118                           	opt stack 0
  2119  000072                     _AESEncode$2127:
  2120                           	opt stack 0
  2121  000072                     srand@x:
  2122                           	opt stack 0
  2123                           
  2124                           ; 2 bytes @ 0x12
  2125  000072                     	ds	1
  2126  000073                     AssembleEncryptionBlock@bufferIndex:
  2127                           	opt stack 0
  2128  000073                     ___aldiv@sign:
  2129                           	opt stack 0
  2130  000073                     ExecuteLinkAdr@channelMask:
  2131                           	opt stack 0
  2132  000073                     ConfigureRadioRx@freq:
  2133                           	opt stack 0
  2134  000073                     ExtractMic@mic:
  2135                           	opt stack 0
  2136  000073                     ConfigureRadioTx@freq:
  2137                           	opt stack 0
  2138                           
  2139                           ; 4 bytes @ 0x13
  2140  000073                     	ds	1
  2141  000074                     _AESEncode$2128:
  2142                           	opt stack 0
  2143  000074                     ___aldiv@quotient:
  2144                           	opt stack 0
  2145                           
  2146                           ; 4 bytes @ 0x14
  2147  000074                     	ds	1
  2148  000075                     SwTimerSetTimeout@timerId:
  2149                           	opt stack 0
  2150  000075                     ExecuteLinkAdr@txPower:
  2151                           	opt stack 0
  2152  000075                     RADIO_WriteFrequency@num:
  2153                           	opt stack 0
  2154                           
  2155                           ; 4 bytes @ 0x15
  2156  000075                     	ds	1
  2157  000076                     _AESEncode$2129:
  2158                           	opt stack 0
  2159  000076                     ExecuteLinkAdr@redundancy:
  2160                           	opt stack 0
  2161                           
  2162                           ; 2 bytes @ 0x16
  2163  000076                     	ds	1
  2164  000077                     ConfigureRadioRx@dataRate:
  2165                           	opt stack 0
  2166  000077                     ConfigureRadioTx@dataRate:
  2167                           	opt stack 0
  2168                           
  2169                           ; 1 bytes @ 0x17
  2170  000077                     	ds	1
  2171  000078                     AESEncode@aux:
  2172                           	opt stack 0
  2173  000078                     ExecuteLinkAdr@dataRate:
  2174                           	opt stack 0
  2175  000078                     ConfigureRadioTx@txPower:
  2176                           	opt stack 0
  2177                           
  2178                           ; 1 bytes @ 0x18
  2179  000078                     	ds	1
  2180  000079                     RADIO_FHSSChangeChannel@irqFlags:
  2181                           	opt stack 0
  2182  000079                     AESEncode@aux2:
  2183                           	opt stack 0
  2184  000079                     RADIO_Init@radioBuffer:
  2185                           	opt stack 0
  2186                           
  2187                           ; 2 bytes @ 0x19
  2188  000079                     	ds	1
  2189  00007A                     ??_RADIO_DIO2:
  2190  00007A                     AESEncode@aux1:
  2191                           	opt stack 0
  2192                           
  2193                           ; 1 bytes @ 0x1A
  2194  00007A                     	ds	1
  2195  00007B                     RADIO_DIO2@opMode:
  2196                           	opt stack 0
  2197  00007B                     AESEncode@aux3:
  2198                           	opt stack 0
  2199  00007B                     RADIO_Init@frequency:
  2200                           	opt stack 0
  2201                           
  2202                           ; 4 bytes @ 0x1B
  2203  00007B                     	ds	1
  2204  00007C                     RADIO_DIO2@dioMapping:
  2205                           	opt stack 0
  2206  00007C                     AESEncode@i:
  2207                           	opt stack 0
  2208                           
  2209                           ; 1 bytes @ 0x1C
  2210  00007C                     	ds	1
  2211  00007D                     AESEncodeLoRa@block:
  2212                           	opt stack 0
  2213                           
  2214                           ; 2 bytes @ 0x1D
  2215  00007D                     	ds	2
  2216  00007F                     ??_RADIO_Init:
  2217  00007F                     AESEncodeLoRa@key:
  2218                           	opt stack 0
  2219                           
  2220                           ; 2 bytes @ 0x1F
  2221  00007F                     	ds	1
  2222  000080                     ?_SwTimersInterrupt:
  2223                           	opt stack 0
  2224                           
  2225                           ; 4 bytes @ 0x20
  2226  000080                     	ds	1
  2227  000081                     AESEncodeLoRa@useKey:
  2228                           	opt stack 0
  2229                           
  2230                           ; 16 bytes @ 0x21
  2231  000081                     	ds	3
  2232  000084                     
  2233                           ; 1 bytes @ 0x24
  2234  000084                     	ds	4
  2235  000088                     SwTimersInterrupt@timeElapsed:
  2236                           	opt stack 0
  2237                           
  2238                           ; 4 bytes @ 0x28
  2239  000088                     	ds	4
  2240  00008C                     SwTimersInterrupt@ticksToNextTimerEvent:
  2241                           	opt stack 0
  2242                           
  2243                           ; 4 bytes @ 0x2C
  2244  00008C                     	ds	4
  2245  000090                     SwTimersInterrupt@i:
  2246                           	opt stack 0
  2247                           
  2248                           ; 1 bytes @ 0x30
  2249  000090                     	ds	1
  2250  000091                     ?_SwTimerReadValue:
  2251                           	opt stack 0
  2252  000091                     GenerateSubkey@key:
  2253                           	opt stack 0
  2254  000091                     ComputeSessionKeys@joinAcceptBuffer:
  2255                           	opt stack 0
  2256  000091                     EncryptFRMPayload@buffer:
  2257                           	opt stack 0
  2258                           
  2259                           ; 2 bytes @ 0x31
  2260  000091                     	ds	2
  2261  000093                     EncryptFRMPayload@bufferLength:
  2262                           	opt stack 0
  2263  000093                     GenerateSubkey@k1:
  2264                           	opt stack 0
  2265                           
  2266                           ; 2 bytes @ 0x33
  2267  000093                     	ds	1
  2268  000094                     EncryptFRMPayload@dir:
  2269                           	opt stack 0
  2270                           
  2271                           ; 1 bytes @ 0x34
  2272  000094                     	ds	1
  2273  000095                     GenerateSubkey@k2:
  2274                           	opt stack 0
  2275  000095                     EncryptFRMPayload@frameCounter:
  2276                           	opt stack 0
  2277  000095                     SwTimerReadValue@ticksCount:
  2278                           	opt stack 0
  2279  000095                     SwTimerStart@ticksRemaining:
  2280                           	opt stack 0
  2281                           
  2282                           ; 4 bytes @ 0x35
  2283  000095                     	ds	2
  2284  000097                     ??_GenerateSubkey:
  2285                           
  2286                           ; 1 bytes @ 0x37
  2287  000097                     	ds	1
  2288  000098                     GenerateSubkey@const_Rb:
  2289                           	opt stack 0
  2290                           
  2291                           ; 16 bytes @ 0x38
  2292  000098                     	ds	1
  2293  000099                     SwTimerReadValue@timerId:
  2294                           	opt stack 0
  2295  000099                     SwTimerStart@timerId:
  2296                           	opt stack 0
  2297  000099                     EncryptFRMPayload@key:
  2298                           	opt stack 0
  2299                           
  2300                           ; 2 bytes @ 0x39
  2301  000099                     	ds	1
  2302  00009A                     ??_UpdateRetransmissionAckTimeoutState:
  2303  00009A                     ??_StartReTxTimer:
  2304  00009A                     ?___lmul:
  2305                           	opt stack 0
  2306  00009A                     ___lmul@multiplier:
  2307                           	opt stack 0
  2308                           
  2309                           ; 4 bytes @ 0x3A
  2310  00009A                     	ds	1
  2311  00009B                     EncryptFRMPayload@macBufferIndex:
  2312                           	opt stack 0
  2313                           
  2314                           ; 1 bytes @ 0x3B
  2315  00009B                     	ds	1
  2316  00009C                     EncryptFRMPayload@bufferToBeEncrypted:
  2317                           	opt stack 0
  2318                           
  2319                           ; 2 bytes @ 0x3C
  2320  00009C                     	ds	2
  2321  00009E                     EncryptFRMPayload@multicastStatus:
  2322                           	opt stack 0
  2323  00009E                     StartReTxTimer@minim:
  2324                           	opt stack 0
  2325  00009E                     ___lmul@multiplicand:
  2326                           	opt stack 0
  2327                           
  2328                           ; 4 bytes @ 0x3E
  2329  00009E                     	ds	1
  2330  00009F                     ??_EncryptFRMPayload:
  2331                           
  2332                           ; 1 bytes @ 0x3F
  2333  00009F                     	ds	3
  2334  0000A2                     StartReTxTimer@i:
  2335                           	opt stack 0
  2336  0000A2                     ___lmul@product:
  2337                           	opt stack 0
  2338                           
  2339                           ; 4 bytes @ 0x42
  2340  0000A2                     	ds	2
  2341  0000A4                     EncryptFRMPayload@k:
  2342                           	opt stack 0
  2343                           
  2344                           ; 1 bytes @ 0x44
  2345  0000A4                     	ds	1
  2346  0000A5                     EncryptFRMPayload@i:
  2347                           	opt stack 0
  2348                           
  2349                           ; 1 bytes @ 0x45
  2350  0000A5                     	ds	1
  2351  0000A6                     ?_rand:
  2352                           	opt stack 0
  2353  0000A6                     ?_ExecuteRxParamSetupReq:
  2354                           	opt stack 0
  2355  0000A6                     ?_ExecuteNewChannel:
  2356                           	opt stack 0
  2357  0000A6                     EncryptFRMPayload@j:
  2358                           	opt stack 0
  2359  0000A6                     RADIO_WriteConfiguration@symbolTimeout:
  2360                           	opt stack 0
  2361  0000A6                     LORAWAN_LinkCheckConfigure@period:
  2362                           	opt stack 0
  2363  0000A6                     ExecuteNewChannel@ptr:
  2364                           	opt stack 0
  2365  0000A6                     ExecuteRxParamSetupReq@ptr:
  2366                           	opt stack 0
  2367  0000A6                     UpdateCfList@joinAccept:
  2368                           	opt stack 0
  2369                           
  2370                           ; 2 bytes @ 0x46
  2371  0000A6                     	ds	2
  2372  0000A8                     ??_ExecuteRxParamSetupReq:
  2373  0000A8                     ??_ExecuteNewChannel:
  2374  0000A8                     ??_RADIO_WriteConfiguration:
  2375  0000A8                     ??_LORAWAN_LinkCheckConfigure:
  2376  0000A8                     ?___lwmod:
  2377                           	opt stack 0
  2378  0000A8                     UpdateCfList@bufferLength:
  2379                           	opt stack 0
  2380  0000A8                     ___lwmod@dividend:
  2381                           	opt stack 0
  2382  0000A8                     GenerateSubkey@l:
  2383                           	opt stack 0
  2384                           
  2385                           ; 16 bytes @ 0x48
  2386  0000A8                     	ds	1
  2387  0000A9                     UpdateCfList@frequency:
  2388                           	opt stack 0
  2389                           
  2390                           ; 4 bytes @ 0x49
  2391  0000A9                     	ds	1
  2392  0000AA                     ExecuteNewChannel@drRange:
  2393                           	opt stack 0
  2394  0000AA                     ___lwmod@divisor:
  2395                           	opt stack 0
  2396  0000AA                     ExecuteRxParamSetupReq@frequency:
  2397                           	opt stack 0
  2398                           
  2399                           ; 4 bytes @ 0x4A
  2400  0000AA                     	ds	1
  2401  0000AB                     RADIO_WriteConfiguration@i:
  2402                           	opt stack 0
  2403  0000AB                     ExecuteNewChannel@frequency:
  2404                           	opt stack 0
  2405                           
  2406                           ; 4 bytes @ 0x4B
  2407  0000AB                     	ds	1
  2408  0000AC                     ___lwmod@counter:
  2409                           	opt stack 0
  2410  0000AC                     RADIO_WriteConfiguration@tempValue:
  2411                           	opt stack 0
  2412  0000AC                     _LORAWAN_LinkCheckConfigure$1514:
  2413                           	opt stack 0
  2414                           
  2415                           ; 4 bytes @ 0x4C
  2416  0000AC                     	ds	1
  2417  0000AD                     ?_Random:
  2418                           	opt stack 0
  2419  0000AD                     UpdateCfList@channelIndex:
  2420                           	opt stack 0
  2421  0000AD                     Random@max:
  2422                           	opt stack 0
  2423                           
  2424                           ; 2 bytes @ 0x4D
  2425  0000AD                     	ds	1
  2426  0000AE                     ExecuteRxParamSetupReq@dlSettings:
  2427                           	opt stack 0
  2428  0000AE                     UpdateCfList@i:
  2429                           	opt stack 0
  2430                           
  2431                           ; 1 bytes @ 0x4E
  2432  0000AE                     	ds	1
  2433  0000AF                     ExecuteNewChannel@channelIndex:
  2434                           	opt stack 0
  2435  0000AF                     SearchAvailableChannel@transmissionType:
  2436                           	opt stack 0
  2437                           
  2438                           ; 1 bytes @ 0x4F
  2439  0000AF                     	ds	1
  2440  0000B0                     ?_MacExecuteCommands:
  2441                           	opt stack 0
  2442  0000B0                     RADIO_WriteConfiguration@regValue:
  2443                           	opt stack 0
  2444  0000B0                     LORAWAN_LinkCheckConfigure@iCtr:
  2445                           	opt stack 0
  2446  0000B0                     MacExecuteCommands@buffer:
  2447                           	opt stack 0
  2448  0000B0                     SearchAvailableChannel@channelIndex:
  2449                           	opt stack 0
  2450                           
  2451                           ; 2 bytes @ 0x50
  2452  0000B0                     	ds	1
  2453  0000B1                     ?_RADIO_Transmit:
  2454                           	opt stack 0
  2455  0000B1                     ?_RADIO_ReceiveStart:
  2456                           	opt stack 0
  2457  0000B1                     LORAWAN_Reset@ismBandNew:
  2458                           	opt stack 0
  2459  0000B1                     RADIO_Transmit@buffer:
  2460                           	opt stack 0
  2461  0000B1                     RADIO_ReceiveStart@rxWindowSize:
  2462                           	opt stack 0
  2463                           
  2464                           ; 2 bytes @ 0x51
  2465  0000B1                     	ds	1
  2466  0000B2                     ??_SearchAvailableChannel:
  2467  0000B2                     MacExecuteCommands@fOptsLen:
  2468                           	opt stack 0
  2469  0000B2                     LORAWAN_Init@RxPayload:
  2470                           	opt stack 0
  2471                           
  2472                           ; 2 bytes @ 0x52
  2473  0000B2                     	ds	1
  2474  0000B3                     ??_MacExecuteCommands:
  2475  0000B3                     ??_RADIO_ReceiveStart:
  2476  0000B3                     RADIO_Transmit@bufferLen:
  2477                           	opt stack 0
  2478                           
  2479                           ; 1 bytes @ 0x53
  2480  0000B3                     	ds	1
  2481  0000B4                     ??_RADIO_Transmit:
  2482  0000B4                     LORAWAN_Init@RxJoinResponse:
  2483                           	opt stack 0
  2484                           
  2485                           ; 2 bytes @ 0x54
  2486  0000B4                     	ds	1
  2487  0000B5                     MacExecuteCommands@done:
  2488                           	opt stack 0
  2489                           
  2490                           ; 1 bytes @ 0x55
  2491  0000B5                     	ds	1
  2492  0000B6                     SearchAvailableChannel@randomNumberCopy:
  2493                           	opt stack 0
  2494  0000B6                     MacExecuteCommands@ptr:
  2495                           	opt stack 0
  2496                           
  2497                           ; 2 bytes @ 0x56
  2498  0000B6                     	ds	1
  2499  0000B7                     SearchAvailableChannel@result:
  2500                           	opt stack 0
  2501  0000B7                     _RADIO_ReceiveStart$521:
  2502                           	opt stack 0
  2503                           
  2504                           ; 4 bytes @ 0x57
  2505  0000B7                     	ds	1
  2506  0000B8                     GenerateSubkey@i:
  2507                           	opt stack 0
  2508  0000B8                     SearchAvailableChannel@maxChannels:
  2509                           	opt stack 0
  2510  0000B8                     _RADIO_Transmit$517:
  2511                           	opt stack 0
  2512                           
  2513                           ; 4 bytes @ 0x58
  2514  0000B8                     	ds	1
  2515  0000B9                     SearchAvailableChannel@randomNumber:
  2516                           	opt stack 0
  2517  0000B9                     AESCmac@key:
  2518                           	opt stack 0
  2519                           
  2520                           ; 2 bytes @ 0x59
  2521  0000B9                     	ds	1
  2522  0000BA                     SearchAvailableChannel@i:
  2523                           	opt stack 0
  2524                           
  2525                           ; 1 bytes @ 0x5A
  2526  0000BA                     	ds	1
  2527  0000BB                     SelectChannelForTransmission@transmissionType:
  2528                           	opt stack 0
  2529  0000BB                     AESCmac@output:
  2530                           	opt stack 0
  2531  0000BB                     LORAWAN_TxDone@timeOnAir:
  2532                           	opt stack 0
  2533                           
  2534                           ; 2 bytes @ 0x5B
  2535  0000BB                     	ds	1
  2536  0000BC                     SelectChannelForTransmission@result:
  2537                           	opt stack 0
  2538  0000BC                     _RADIO_Transmit$518:
  2539                           	opt stack 0
  2540                           
  2541                           ; 4 bytes @ 0x5C
  2542  0000BC                     	ds	1
  2543  0000BD                     ??_LORAWAN_TxDone:
  2544  0000BD                     SelectChannelForTransmission@channelIndex:
  2545                           	opt stack 0
  2546  0000BD                     AESCmac@input:
  2547                           	opt stack 0
  2548                           
  2549                           ; 2 bytes @ 0x5D
  2550  0000BD                     	ds	2
  2551  0000BF                     AESCmac@size:
  2552                           	opt stack 0
  2553                           
  2554                           ; 1 bytes @ 0x5F
  2555  0000BF                     	ds	1
  2556  0000C0                     ??_AESCmac:
  2557  0000C0                     RADIO_Transmit@regValue:
  2558                           	opt stack 0
  2559                           
  2560                           ; 1 bytes @ 0x60
  2561  0000C0                     	ds	1
  2562  0000C1                     RADIO_Transmit@i:
  2563                           	opt stack 0
  2564                           
  2565                           ; 1 bytes @ 0x61
  2566  0000C1                     	ds	1
  2567  0000C2                     ??_LORAWAN_RxTimeout:
  2568                           
  2569                           ; 1 bytes @ 0x62
  2570  0000C2                     	ds	4
  2571  0000C6                     LORAWAN_RxTimeout@minim:
  2572                           	opt stack 0
  2573                           
  2574                           ; 4 bytes @ 0x66
  2575  0000C6                     	ds	1
  2576  0000C7                     ?_ComputeMic:
  2577                           	opt stack 0
  2578  0000C7                     AssemblePacket@port:
  2579                           	opt stack 0
  2580  0000C7                     ComputeMic@key:
  2581                           	opt stack 0
  2582                           
  2583                           ; 2 bytes @ 0x67
  2584  0000C7                     	ds	1
  2585  0000C8                     AssemblePacket@buffer:
  2586                           	opt stack 0
  2587                           
  2588                           ; 2 bytes @ 0x68
  2589  0000C8                     	ds	1
  2590  0000C9                     ComputeMic@buffer:
  2591                           	opt stack 0
  2592  0000C9                     _LORAWAN_TxDone$2660:
  2593                           	opt stack 0
  2594                           
  2595                           ; 4 bytes @ 0x69
  2596  0000C9                     	ds	1
  2597  0000CA                     LORAWAN_RxTimeout@i:
  2598                           	opt stack 0
  2599  0000CA                     AssemblePacket@bufferLength:
  2600                           	opt stack 0
  2601                           
  2602                           ; 2 bytes @ 0x6A
  2603  0000CA                     	ds	1
  2604  0000CB                     ??_RADIO_DIO1:
  2605  0000CB                     ComputeMic@bufferLength:
  2606                           	opt stack 0
  2607                           
  2608                           ; 1 bytes @ 0x6B
  2609  0000CB                     	ds	1
  2610  0000CC                     ??_AssemblePacket:
  2611  0000CC                     RADIO_DIO1@dioMapping:
  2612                           	opt stack 0
  2613  0000CC                     ComputeMic@mic:
  2614                           	opt stack 0
  2615                           
  2616                           ; 4 bytes @ 0x6C
  2617  0000CC                     	ds	1
  2618  0000CD                     _LORAWAN_TxDone$2661:
  2619                           	opt stack 0
  2620                           
  2621                           ; 4 bytes @ 0x6D
  2622  0000CD                     	ds	1
  2623  0000CE                     AssemblePacket@confirmed:
  2624                           	opt stack 0
  2625                           
  2626                           ; 1 bytes @ 0x6E
  2627  0000CE                     	ds	1
  2628  0000CF                     AssemblePacket@mhdr:
  2629                           	opt stack 0
  2630                           
  2631                           ; 1 bytes @ 0x6F
  2632  0000CF                     	ds	1
  2633  0000D0                     ??_PrepareJoinRequestFrame:
  2634  0000D0                     AssemblePacket@fCtrl:
  2635                           	opt stack 0
  2636                           
  2637                           ; 1 bytes @ 0x70
  2638  0000D0                     	ds	1
  2639  0000D1                     AssemblePacket@macCmdIdx:
  2640                           	opt stack 0
  2641  0000D1                     LORAWAN_TxDone@found:
  2642                           	opt stack 0
  2643                           
  2644                           ; 1 bytes @ 0x71
  2645  0000D1                     	ds	1
  2646  0000D2                     AssemblePacket@bufferIndex:
  2647                           	opt stack 0
  2648  0000D2                     LORAWAN_TxDone@delta:
  2649                           	opt stack 0
  2650                           
  2651                           ; 4 bytes @ 0x72
  2652  0000D2                     	ds	1
  2653  0000D3                     LORAWAN_Send@port:
  2654                           	opt stack 0
  2655                           
  2656                           ; 1 bytes @ 0x73
  2657  0000D3                     	ds	1
  2658  0000D4                     LORAWAN_Send@buffer:
  2659                           	opt stack 0
  2660  0000D4                     PrepareJoinRequestFrame@mic:
  2661                           	opt stack 0
  2662                           
  2663                           ; 4 bytes @ 0x74
  2664  0000D4                     	ds	2
  2665  0000D6                     LORAWAN_Send@bufferLength:
  2666                           	opt stack 0
  2667  0000D6                     _LORAWAN_TxDone$5627:
  2668                           	opt stack 0
  2669                           
  2670                           ; 4 bytes @ 0x76
  2671  0000D6                     	ds	1
  2672  0000D7                     ??_LORAWAN_Send:
  2673                           
  2674                           ; 1 bytes @ 0x77
  2675  0000D7                     	ds	1
  2676  0000D8                     LORAWAN_Send@result:
  2677                           	opt stack 0
  2678  0000D8                     PrepareJoinRequestFrame@mhdr:
  2679                           	opt stack 0
  2680                           
  2681                           ; 1 bytes @ 0x78
  2682  0000D8                     	ds	1
  2683  0000D9                     LORAWAN_Send@confirmed:
  2684                           	opt stack 0
  2685  0000D9                     PrepareJoinRequestFrame@iCtr:
  2686                           	opt stack 0
  2687                           
  2688                           ; 1 bytes @ 0x79
  2689  0000D9                     	ds	1
  2690  0000DA                     ??_LORAWAN_RxDone:
  2691  0000DA                     ??_SwTimersExecute:
  2692  0000DA                     PrepareJoinRequestFrame@bufferIndex:
  2693                           	opt stack 0
  2694  0000DA                     LORAWAN_TxDone@ticks:
  2695                           	opt stack 0
  2696                           
  2697                           ; 4 bytes @ 0x7A
  2698  0000DA                     	ds	1
  2699  0000DB                     LORAWAN_Join@bufferIndex:
  2700                           	opt stack 0
  2701                           
  2702                           ; 1 bytes @ 0x7B
  2703  0000DB                     	ds	1
  2704  0000DC                     LORAWAN_Join@result:
  2705                           	opt stack 0
  2706                           
  2707                           ; 1 bytes @ 0x7C
  2708  0000DC                     	ds	1
  2709  0000DD                     LORAWAN_Join@activationTypeNew:
  2710                           	opt stack 0
  2711                           
  2712                           ; 1 bytes @ 0x7D
  2713  0000DD                     	ds	1
  2714  0000DE                     SwTimersExecute@i:
  2715                           	opt stack 0
  2716  0000DE                     LORAWAN_TxDone@minim:
  2717                           	opt stack 0
  2718                           
  2719                           ; 4 bytes @ 0x7E
  2720  0000DE                     	ds	1
  2721  0000DF                     LORAWAN_RxDone@fPort:
  2722                           	opt stack 0
  2723                           
  2724                           ; 1 bytes @ 0x7F
  2725  0000DF                     	ds	1
  2726  0000E0                     LORAWAN_RxDone@channelIndex:
  2727                           	opt stack 0
  2728                           
  2729                           ; 1 bytes @ 0x80
  2730  0000E0                     	ds	1
  2731  0000E1                     LORAWAN_RxDone@mhdr:
  2732                           	opt stack 0
  2733                           
  2734                           ; 1 bytes @ 0x81
  2735  0000E1                     	ds	1
  2736  0000E2                     LORAWAN_TxDone@i:
  2737                           	opt stack 0
  2738  0000E2                     LORAWAN_RxDone@extractedMic:
  2739                           	opt stack 0
  2740                           
  2741                           ; 4 bytes @ 0x82
  2742  0000E2                     	ds	1
  2743  0000E3                     ??_RADIO_TxDone:
  2744  0000E3                     ??_RADIO_FSKPacketSent:
  2745                           
  2746                           ; 1 bytes @ 0x83
  2747  0000E3                     	ds	3
  2748  0000E6                     LORAWAN_RxDone@bufferIndex:
  2749                           	opt stack 0
  2750                           
  2751                           ; 1 bytes @ 0x86
  2752  0000E6                     	ds	1
  2753  0000E7                     LORAWAN_RxDone@temp:
  2754                           	opt stack 0
  2755  0000E7                     RADIO_TxDone@timeOnAir:
  2756                           	opt stack 0
  2757  0000E7                     RADIO_FSKPacketSent@timeOnAir:
  2758                           	opt stack 0
  2759                           
  2760                           ; 4 bytes @ 0x87
  2761  0000E7                     	ds	1
  2762  0000E8                     LORAWAN_RxDone@packet:
  2763                           	opt stack 0
  2764                           
  2765                           ; 2 bytes @ 0x88
  2766  0000E8                     	ds	2
  2767  0000EA                     LORAWAN_RxDone@computedMic:
  2768                           	opt stack 0
  2769                           
  2770                           ; 4 bytes @ 0x8A
  2771  0000EA                     	ds	1
  2772  0000EB                     _RADIO_TxDone$532:
  2773                           	opt stack 0
  2774  0000EB                     _RADIO_FSKPacketSent$536:
  2775                           	opt stack 0
  2776                           
  2777                           ; 4 bytes @ 0x8B
  2778  0000EB                     	ds	3
  2779  0000EE                     LORAWAN_RxDone@joinAccept:
  2780                           	opt stack 0
  2781                           
  2782                           ; 2 bytes @ 0x8E
  2783  0000EE                     	ds	1
  2784  0000EF                     RADIO_FSKPacketSent@irqFlags:
  2785                           	opt stack 0
  2786                           
  2787                           ; 1 bytes @ 0x8F
  2788  0000EF                     	ds	1
  2789  0000F0                     LORAWAN_RxDone@frmPayloadLength:
  2790                           	opt stack 0
  2791                           
  2792                           ; 1 bytes @ 0x90
  2793  0000F0                     	ds	1
  2794  0000F1                     LORAWAN_RxDone@hdr:
  2795                           	opt stack 0
  2796                           
  2797                           ; 2 bytes @ 0x91
  2798  0000F1                     	ds	2
  2799  0000F3                     RADIO_RxDone@irqFlags:
  2800                           	opt stack 0
  2801  0000F3                     RADIO_FSKPayloadReady@irqFlags:
  2802                           	opt stack 0
  2803                           
  2804                           ; 1 bytes @ 0x93
  2805  0000F3                     	ds	1
  2806  0000F4                     RADIO_RxDone@i:
  2807                           	opt stack 0
  2808  0000F4                     RADIO_FSKPayloadReady@i:
  2809                           	opt stack 0
  2810                           
  2811                           ; 1 bytes @ 0x94
  2812  0000F4                     	ds	1
  2813  0000F5                     ??_RADIO_DIO0:
  2814                           
  2815                           ; 1 bytes @ 0x95
  2816  0000F5                     	ds	2
  2817  0000F7                     RADIO_DIO0@dioMapping:
  2818                           	opt stack 0
  2819                           
  2820                           ; 1 bytes @ 0x97
  2821  0000F7                     	ds	1
  2822  0000F8                     RADIO_DIO0@opMode:
  2823                           	opt stack 0
  2824                           
  2825                           ; 1 bytes @ 0x98
  2826  0000F8                     	ds	1
  2827  0000F9                     ??_main:
  2828                           
  2829                           ; 1 bytes @ 0x99
  2830  0000F9                     	ds	6
  2831                           tblptru	equ	0xFF8
  2832                           tblptrh	equ	0xFF7
  2833                           tblptrl	equ	0xFF6
  2834                           tablat	equ	0xFF5
  2835                           postinc0	equ	0xFEE
  2836                           wreg	equ	0xFE8
  2837                           postdec2	equ	0xFDD
  2838                           fsr2h	equ	0xFDA
  2839                           fsr2l	equ	0xFD9
  2840                           
  2841                           	psect	cstackCOMRAM
  2842  000001                     __pcstackCOMRAM:
  2843                           	opt stack 0
  2844  000001                     ?i2_TMR1_ReadTimer:
  2845                           	opt stack 0
  2846  000001                     EUSART1_Read@readValue:
  2847                           	opt stack 0
  2848  000001                     strncat@to:
  2849                           	opt stack 0
  2850  000001                     i2TMR1_WriteTimer@timerVal:
  2851                           	opt stack 0
  2852                           
  2853                           ; 2 bytes @ 0x0
  2854  000001                     	ds	2
  2855  000003                     ??i2_TMR1_ReadTimer:
  2856  000003                     strncat@from:
  2857                           	opt stack 0
  2858                           
  2859                           ; 2 bytes @ 0x2
  2860  000003                     	ds	2
  2861  000005                     strncat@size:
  2862                           	opt stack 0
  2863  000005                     i2TMR1_ReadTimer@readVal:
  2864                           	opt stack 0
  2865                           
  2866                           ; 2 bytes @ 0x4
  2867  000005                     	ds	2
  2868  000007                     i2TMR1_ReadTimer@readValHigh:
  2869                           	opt stack 0
  2870  000007                     strncat@cp:
  2871                           	opt stack 0
  2872                           
  2873                           ; 2 bytes @ 0x6
  2874  000007                     	ds	1
  2875  000008                     i2TMR1_ReadTimer@readValLow:
  2876                           	opt stack 0
  2877                           
  2878                           ; 1 bytes @ 0x7
  2879  000008                     	ds	1
  2880  000009                     ??_EUSART1_Receive_ISR:
  2881  000009                     ?i2_TMR_SwapTimer:
  2882                           	opt stack 0
  2883  000009                     ?i2_TMR_GetDeltaTime:
  2884                           	opt stack 0
  2885  000009                     i2TMR_SwapTimer@timerVal:
  2886                           	opt stack 0
  2887                           
  2888                           ; 2 bytes @ 0x8
  2889  000009                     	ds	2
  2890  00000B                     
  2891                           ; 1 bytes @ 0xA
  2892  00000B                     	ds	2
  2893  00000D                     ??i2_TMR_GetDeltaTime:
  2894                           
  2895                           ; 1 bytes @ 0xC
  2896  00000D                     	ds	20
  2897  000021                     ?i2_SwTimersInterrupt:
  2898                           	opt stack 0
  2899                           
  2900                           ; 4 bytes @ 0x20
  2901  000021                     	ds	4
  2902  000025                     
  2903                           ; 1 bytes @ 0x24
  2904  000025                     	ds	4
  2905  000029                     i2SwTimersInterrupt@timeElapsed:
  2906                           	opt stack 0
  2907                           
  2908                           ; 4 bytes @ 0x28
  2909  000029                     	ds	4
  2910  00002D                     i2SwTimersInterrupt@ticksToNextTimerEvent:
  2911                           	opt stack 0
  2912                           
  2913                           ; 4 bytes @ 0x2C
  2914  00002D                     	ds	4
  2915  000031                     i2SwTimersInterrupt@i:
  2916                           	opt stack 0
  2917                           
  2918                           ; 1 bytes @ 0x30
  2919  000031                     	ds	1
  2920  000032                     ??_TMR_ISR_lora:
  2921                           
  2922                           ; 1 bytes @ 0x31
  2923  000032                     	ds	2
  2924  000034                     ??_INTERRUPT_InterruptManager:
  2925                           
  2926                           ; 1 bytes @ 0x33
  2927  000034                     	ds	10
  2928                           tblptru	equ	0xFF8
  2929                           tblptrh	equ	0xFF7
  2930                           tblptrl	equ	0xFF6
  2931                           tablat	equ	0xFF5
  2932                           postinc0	equ	0xFEE
  2933                           wreg	equ	0xFE8
  2934                           postdec2	equ	0xFDD
  2935                           fsr2h	equ	0xFDA
  2936                           fsr2l	equ	0xFD9
  2937                           
  2938 ;;
  2939 ;;Main: autosize = 0, tempsize = 6, incstack = 0, save=0
  2940 ;;
  2941 ;; *************** function _main *****************
  2942 ;; Defined at:
  2943 ;;		line 118 in file "main.c"
  2944 ;; Parameters:    Size  Location     Type
  2945 ;;		None
  2946 ;; Auto vars:     Size  Location     Type
  2947 ;;  first5decima    1  109[BANK1 ] unsigned char 
  2948 ;;  first4decima    1  108[BANK1 ] unsigned char 
  2949 ;;  first3decima    1  107[BANK1 ] unsigned char 
  2950 ;;  first2decima    1  106[BANK1 ] unsigned char 
  2951 ;;  first1decima    1  105[BANK1 ] unsigned char 
  2952 ;; Return value:  Size  Location     Type
  2953 ;;                  1    wreg      void 
  2954 ;; Registers used:
  2955 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, btemp, btemp+1, btemp+2, btemp+4, btemp+
      +5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2956 ;; Tracked objects:
  2957 ;;		On entry : 0/0
  2958 ;;		On exit  : 0/0
  2959 ;;		Unchanged: 0/0
  2960 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2961 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2962 ;;      Locals:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2963 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2964 ;;      Totals:         0       6       5       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2965 ;;Total ram usage:       11 bytes
  2966 ;; Hardware stack levels required when called:   19
  2967 ;; This function calls:
  2968 ;;		_EUSART1_Write
  2969 ;;		_LORAWAN_Init
  2970 ;;		_LORAWAN_Join
  2971 ;;		_LORAWAN_Mainloop
  2972 ;;		_LORAWAN_Send
  2973 ;;		_LORAWAN_SetApplicationSessionKey
  2974 ;;		_LORAWAN_SetDeviceAddress
  2975 ;;		_LORAWAN_SetNetworkSessionKey
  2976 ;;		_SYSTEM_Initialize
  2977 ;;		_TMR5_HasOverflowOccured
  2978 ;;		___aldiv
  2979 ;;		___almod
  2980 ;;		___awdiv
  2981 ;;		___awmod
  2982 ;; This function is called by:
  2983 ;;		Startup code after reset
  2984 ;; This function uses a non-reentrant model
  2985 ;;
  2986                           
  2987                           	psect	text0
  2988  00294C                     __ptext0:
  2989                           	opt stack 0
  2990  00294C                     _main:
  2991                           	opt stack 12
  2992                           
  2993                           ;main.c: 120: SYSTEM_Initialize();
  2994                           
  2995                           ;incstack = 0
  2996  00294C  EC2F  F048         	call	_SYSTEM_Initialize	;wreg free
  2997                           
  2998                           ;main.c: 121: (INTCONbits.GIE = 1);
  2999  002950  8EF2               	bsf	intcon,7,c	;volatile
  3000                           
  3001                           ;main.c: 122: (INTCONbits.PEIE = 1);
  3002  002952  8CF2               	bsf	intcon,6,c	;volatile
  3003                           
  3004                           ;main.c: 124: LORAWAN_Init(RxData, RxJoinResponse);
  3005  002954  0EF2               	movlw	low _RxData
  3006  002956  0100               	movlb	0	; () banked
  3007  002958  6FB2               	movwf	LORAWAN_Init@RxPayload& (0+255),b
  3008  00295A  0E95               	movlw	high _RxData
  3009  00295C  6FB3               	movwf	(LORAWAN_Init@RxPayload+1)& (0+255),b
  3010  00295E  0EF0               	movlw	low _RxJoinResponse
  3011  002960  6FB4               	movwf	LORAWAN_Init@RxJoinResponse& (0+255),b
  3012  002962  0E95               	movlw	high _RxJoinResponse
  3013  002964  6FB5               	movwf	(LORAWAN_Init@RxJoinResponse+1)& (0+255),b
  3014  002966  ECFC  F040         	call	_LORAWAN_Init	;wreg free
  3015                           
  3016                           ;main.c: 126: LORAWAN_SetNetworkSessionKey(nwkSKey);
  3017  00296A  0ED3               	movlw	low _nwkSKey
  3018  00296C  0100               	movlb	0	; () banked
  3019  00296E  6F6B               	movwf	LORAWAN_SetNetworkSessionKey@networkSessionKeyNew& (0+255),b
  3020  002970  0E03               	movlw	high _nwkSKey
  3021  002972  6F6C               	movwf	(LORAWAN_SetNetworkSessionKey@networkSessionKeyNew+1)& (0+255),b
  3022  002974  EC06  F047         	call	_LORAWAN_SetNetworkSessionKey	;wreg free
  3023                           
  3024                           ;main.c: 127: LORAWAN_SetApplicationSessionKey(appSKey);
  3025  002978  0EE0               	movlw	low _appSKey
  3026  00297A  0100               	movlb	0	; () banked
  3027  00297C  6F6B               	movwf	LORAWAN_SetApplicationSessionKey@applicationSessionKeyNew& (0+255),b
  3028  00297E  0E04               	movlw	high _appSKey
  3029  002980  6F6C               	movwf	(LORAWAN_SetApplicationSessionKey@applicationSessionKeyNew+1)& (0+255),b
  3030  002982  EC1D  F047         	call	_LORAWAN_SetApplicationSessionKey	;wreg free
  3031                           
  3032                           ;main.c: 128: LORAWAN_SetDeviceAddress(devAddr);
  3033  002986  C3CC  F060         	movff	_devAddr,LORAWAN_SetDeviceAddress@deviceAddressNew
  3034  00298A  C3CD  F061         	movff	_devAddr+1,LORAWAN_SetDeviceAddress@deviceAddressNew+1
  3035  00298E  C3CE  F062         	movff	_devAddr+2,LORAWAN_SetDeviceAddress@deviceAddressNew+2
  3036  002992  C3CF  F063         	movff	_devAddr+3,LORAWAN_SetDeviceAddress@deviceAddressNew+3
  3037  002996  ECA1  F049         	call	_LORAWAN_SetDeviceAddress	;wreg free
  3038                           
  3039                           ;main.c: 129: LORAWAN_Join(ABP);
  3040  00299A  0E01               	movlw	1
  3041  00299C  ECE8  F039         	call	_LORAWAN_Join
  3042                           
  3043                           ;main.c: 130: TRISA = 0xF0;
  3044  0029A0  0EF0               	movlw	240
  3045  0029A2  6E92               	movwf	3986,c	;volatile
  3046                           
  3047                           ;main.c: 131: countera=0;
  3048  0029A4  0E00               	movlw	0
  3049  0029A6  0102               	movlb	2	; () banked
  3050  0029A8  6F03               	movwf	(_countera+1)& (0+255),b
  3051  0029AA  0E00               	movlw	0
  3052  0029AC  6F02               	movwf	_countera& (0+255),b
  3053  0029AE                     
  3054                           ;main.c: 133: {
  3055                           ;main.c: 134: LORAWAN_Mainloop();
  3056                           
  3057                           ; BSR set to: 2
  3058  0029AE  ECCC  F045         	call	_LORAWAN_Mainloop	;wreg free
  3059                           
  3060                           ;main.c: 136: if (TMR5_HasOverflowOccured())
  3061  0029B2  EC4E  F04A         	call	_TMR5_HasOverflowOccured	;wreg free
  3062  0029B6  0900               	iorlw	0
  3063  0029B8  B4D8               	btfsc	status,2,c
  3064  0029BA  D003               	goto	l2819
  3065                           
  3066                           ;main.c: 137: {
  3067                           ;main.c: 138: counter ++;
  3068  0029BC  0101               	movlb	1	; () banked
  3069  0029BE  2B4C               	incf	_counter& (0+255),f,b
  3070                           
  3071                           ; BSR set to: 1
  3072                           ;main.c: 140: TMR5IF = 0;
  3073  0029C0  927E               	bcf	3966,1,c	;volatile
  3074  0029C2                     l2819:
  3075                           
  3076                           ;main.c: 142: }
  3077                           ;main.c: 144: if (counter == 2)
  3078                           
  3079                           ; BSR set to: 1
  3080  0029C2  0E02               	movlw	2
  3081  0029C4  0101               	movlb	1	; () banked
  3082  0029C6  194C               	xorwf	_counter& (0+255),w,b
  3083  0029C8  A4D8               	btfss	status,2,c
  3084  0029CA  D7F1               	goto	l2818
  3085                           
  3086                           ; BSR set to: 1
  3087                           ;main.c: 145: {
  3088                           ;main.c: 146: LATA=0xFF;
  3089  0029CC  6889               	setf	3977,c	;volatile
  3090                           
  3091                           ; BSR set to: 1
  3092                           ;main.c: 148: EUSART1_Write(0b00000011);
  3093  0029CE  0E03               	movlw	3
  3094  0029D0  ECEB  F045         	call	_EUSART1_Write
  3095                           
  3096                           ;main.c: 149: EUSART1_Write(0b00000011);
  3097  0029D4  0E03               	movlw	3
  3098  0029D6  ECEB  F045         	call	_EUSART1_Write
  3099                           
  3100                           ;main.c: 150: EUSART1_Write(0b00000000);
  3101  0029DA  0E00               	movlw	0
  3102  0029DC  ECEB  F045         	call	_EUSART1_Write
  3103                           
  3104                           ;main.c: 151: EUSART1_Write(0b01000111);
  3105  0029E0  0E47               	movlw	71
  3106  0029E2  ECEB  F045         	call	_EUSART1_Write
  3107                           
  3108                           ;main.c: 152: EUSART1_Write(0b00000000);
  3109  0029E6  0E00               	movlw	0
  3110  0029E8  ECEB  F045         	call	_EUSART1_Write
  3111                           
  3112                           ;main.c: 153: EUSART1_Write(0b00000001);
  3113  0029EC  0E01               	movlw	1
  3114  0029EE  ECEB  F045         	call	_EUSART1_Write
  3115                           
  3116                           ;main.c: 154: EUSART1_Write(0b00110101);
  3117  0029F2  0E35               	movlw	53
  3118  0029F4  ECEB  F045         	call	_EUSART1_Write
  3119                           
  3120                           ;main.c: 155: EUSART1_Write(0b11111101);
  3121  0029F8  0EFD               	movlw	253
  3122  0029FA  ECEB  F045         	call	_EUSART1_Write
  3123                           
  3124                           ;main.c: 157: EUSART1_Write(0b00000011);
  3125  0029FE  0E03               	movlw	3
  3126  002A00  ECEB  F045         	call	_EUSART1_Write
  3127                           
  3128                           ;main.c: 158: EUSART1_Write(0b00000011);
  3129  002A04  0E03               	movlw	3
  3130  002A06  ECEB  F045         	call	_EUSART1_Write
  3131                           
  3132                           ;main.c: 159: EUSART1_Write(0b00000000);
  3133  002A0A  0E00               	movlw	0
  3134  002A0C  ECEB  F045         	call	_EUSART1_Write
  3135                           
  3136                           ;main.c: 161: LATA=0xF0;
  3137  002A10  0EF0               	movlw	240
  3138  002A12  6E89               	movwf	3977,c	;volatile
  3139                           
  3140                           ;main.c: 163: _delay((unsigned long)((5000)*(16000000/4000.0)));
  3141  002A14  0E66               	movlw	102
  3142  002A16  0100               	movlb	0	; () banked
  3143  002A18  6FFA               	movwf	(??_main+1)& (0+255),b
  3144  002A1A  0E76               	movlw	118
  3145  002A1C  6FF9               	movwf	??_main& (0+255),b
  3146  002A1E  0EC1               	movlw	193
  3147  002A20                     u17177:
  3148  002A20  2EE8               	decfsz	wreg,f,c
  3149  002A22  D7FE               	bra	u17177
  3150  002A24  2FF9               	decfsz	??_main& (0+255),f,b
  3151  002A26  D7FC               	bra	u17177
  3152  002A28  2FFA               	decfsz	(??_main+1)& (0+255),f,b
  3153  002A2A  D7FA               	bra	u17177
  3154                           
  3155                           ;main.c: 165: testassign = dataxstr[3];
  3156  002A2C  C543  F126         	movff	_dataxstr+3,_testassign
  3157  002A30  0101               	movlb	1	; () banked
  3158  002A32  6B27               	clrf	(_testassign+1)& (0+255),b
  3159                           
  3160                           ; BSR set to: 1
  3161                           ;main.c: 166: testassign2 = dataxstr[4];
  3162  002A34  C544  F124         	movff	_dataxstr+4,_testassign2
  3163  002A38  6B25               	clrf	(_testassign2+1)& (0+255),b
  3164                           
  3165                           ; BSR set to: 1
  3166                           ;main.c: 168: fourthdigit = (testassign / 16);
  3167  002A3A  C126  F066         	movff	_testassign,___awdiv@dividend
  3168  002A3E  C127  F067         	movff	_testassign+1,___awdiv@dividend+1
  3169  002A42  0E00               	movlw	0
  3170  002A44  0100               	movlb	0	; () banked
  3171  002A46  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
  3172  002A48  0E10               	movlw	16
  3173  002A4A  6F68               	movwf	___awdiv@divisor& (0+255),b
  3174  002A4C  EC84  F03C         	call	___awdiv	;wreg free
  3175  002A50  C066  F122         	movff	?___awdiv,_fourthdigit
  3176  002A54  C067  F123         	movff	?___awdiv+1,_fourthdigit+1
  3177                           
  3178                           ;main.c: 169: thirddigit = (testassign % 16);
  3179  002A58  0E0F               	movlw	15
  3180  002A5A  0101               	movlb	1	; () banked
  3181  002A5C  1526               	andwf	_testassign& (0+255),w,b
  3182  002A5E  6F20               	movwf	_thirddigit& (0+255),b
  3183  002A60  6B21               	clrf	(_thirddigit+1)& (0+255),b
  3184                           
  3185                           ; BSR set to: 1
  3186                           ;main.c: 170: seconddigit = (testassign2 / 16);
  3187  002A62  C124  F066         	movff	_testassign2,___awdiv@dividend
  3188  002A66  C125  F067         	movff	_testassign2+1,___awdiv@dividend+1
  3189  002A6A  0E00               	movlw	0
  3190  002A6C  0100               	movlb	0	; () banked
  3191  002A6E  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
  3192  002A70  0E10               	movlw	16
  3193  002A72  6F68               	movwf	___awdiv@divisor& (0+255),b
  3194  002A74  EC84  F03C         	call	___awdiv	;wreg free
  3195  002A78  C066  F11E         	movff	?___awdiv,_seconddigit
  3196  002A7C  C067  F11F         	movff	?___awdiv+1,_seconddigit+1
  3197                           
  3198                           ;main.c: 171: firstdigit = (testassign2 % 16);
  3199  002A80  0E0F               	movlw	15
  3200  002A82  0101               	movlb	1	; () banked
  3201  002A84  1524               	andwf	_testassign2& (0+255),w,b
  3202  002A86  6F1C               	movwf	_firstdigit& (0+255),b
  3203  002A88  6B1D               	clrf	(_firstdigit+1)& (0+255),b
  3204                           
  3205                           ; BSR set to: 1
  3206                           ;main.c: 173: resultdata2send = (fourthdigit*16*16*16) + (thirddigit*16*16) + (seconddig
      +                          it*16) + firstdigit;
  3207  002A8A  C11E  F0F9         	movff	_seconddigit,??_main
  3208  002A8E  C11F  F0FA         	movff	_seconddigit+1,??_main+1
  3209  002A92  0100               	movlb	0	; () banked
  3210  002A94  3BF9               	swapf	??_main& (0+255),f,b
  3211  002A96  3BFA               	swapf	(??_main+1)& (0+255),f,b
  3212  002A98  0EF0               	movlw	240
  3213  002A9A  17FA               	andwf	(??_main+1)& (0+255),f,b
  3214  002A9C  51F9               	movf	??_main& (0+255),w,b
  3215  002A9E  0B0F               	andlw	15
  3216  002AA0  13FA               	iorwf	(??_main+1)& (0+255),f,b
  3217  002AA2  0EF0               	movlw	240
  3218  002AA4  17F9               	andwf	??_main& (0+255),f,b
  3219  002AA6  C120  F0FB         	movff	_thirddigit,??_main+2
  3220  002AAA  C121  F0FC         	movff	_thirddigit+1,??_main+3
  3221  002AAE  3BFB               	swapf	(??_main+2)& (0+255),f,b
  3222  002AB0  3BFC               	swapf	(??_main+3)& (0+255),f,b
  3223  002AB2  0EF0               	movlw	240
  3224  002AB4  17FC               	andwf	(??_main+3)& (0+255),f,b
  3225  002AB6  51FB               	movf	(??_main+2)& (0+255),w,b
  3226  002AB8  0B0F               	andlw	15
  3227  002ABA  13FC               	iorwf	(??_main+3)& (0+255),f,b
  3228  002ABC  0EF0               	movlw	240
  3229  002ABE  17FB               	andwf	(??_main+2)& (0+255),f,b
  3230  002AC0  3BFB               	swapf	(??_main+2)& (0+255),f,b
  3231  002AC2  3BFC               	swapf	(??_main+3)& (0+255),f,b
  3232  002AC4  0EF0               	movlw	240
  3233  002AC6  17FC               	andwf	(??_main+3)& (0+255),f,b
  3234  002AC8  51FB               	movf	(??_main+2)& (0+255),w,b
  3235  002ACA  0B0F               	andlw	15
  3236  002ACC  13FC               	iorwf	(??_main+3)& (0+255),f,b
  3237  002ACE  0EF0               	movlw	240
  3238  002AD0  17FB               	andwf	(??_main+2)& (0+255),f,b
  3239  002AD2  C122  F0FD         	movff	_fourthdigit,??_main+4
  3240  002AD6  C123  F0FE         	movff	_fourthdigit+1,??_main+5
  3241  002ADA  3BFD               	swapf	(??_main+4)& (0+255),f,b
  3242  002ADC  3BFE               	swapf	(??_main+5)& (0+255),f,b
  3243  002ADE  0EF0               	movlw	240
  3244  002AE0  17FE               	andwf	(??_main+5)& (0+255),f,b
  3245  002AE2  51FD               	movf	(??_main+4)& (0+255),w,b
  3246  002AE4  0B0F               	andlw	15
  3247  002AE6  13FE               	iorwf	(??_main+5)& (0+255),f,b
  3248  002AE8  0EF0               	movlw	240
  3249  002AEA  17FD               	andwf	(??_main+4)& (0+255),f,b
  3250  002AEC  3BFD               	swapf	(??_main+4)& (0+255),f,b
  3251  002AEE  3BFE               	swapf	(??_main+5)& (0+255),f,b
  3252  002AF0  0EF0               	movlw	240
  3253  002AF2  17FE               	andwf	(??_main+5)& (0+255),f,b
  3254  002AF4  51FD               	movf	(??_main+4)& (0+255),w,b
  3255  002AF6  0B0F               	andlw	15
  3256  002AF8  13FE               	iorwf	(??_main+5)& (0+255),f,b
  3257  002AFA  0EF0               	movlw	240
  3258  002AFC  17FD               	andwf	(??_main+4)& (0+255),f,b
  3259  002AFE  3BFD               	swapf	(??_main+4)& (0+255),f,b
  3260  002B00  3BFE               	swapf	(??_main+5)& (0+255),f,b
  3261  002B02  0EF0               	movlw	240
  3262  002B04  17FE               	andwf	(??_main+5)& (0+255),f,b
  3263  002B06  51FD               	movf	(??_main+4)& (0+255),w,b
  3264  002B08  0B0F               	andlw	15
  3265  002B0A  13FE               	iorwf	(??_main+5)& (0+255),f,b
  3266  002B0C  0EF0               	movlw	240
  3267  002B0E  17FD               	andwf	(??_main+4)& (0+255),f,b
  3268  002B10  51FB               	movf	(??_main+2)& (0+255),w,b
  3269  002B12  27FD               	addwf	(??_main+4)& (0+255),f,b
  3270  002B14  51FC               	movf	(??_main+3)& (0+255),w,b
  3271  002B16  23FE               	addwfc	(??_main+5)& (0+255),f,b
  3272  002B18  51F9               	movf	??_main& (0+255),w,b
  3273  002B1A  27FD               	addwf	(??_main+4)& (0+255),f,b
  3274  002B1C  51FA               	movf	(??_main+1)& (0+255),w,b
  3275  002B1E  23FE               	addwfc	(??_main+5)& (0+255),f,b
  3276  002B20  0101               	movlb	1	; () banked
  3277  002B22  511C               	movf	_firstdigit& (0+255),w,b
  3278  002B24  0100               	movlb	0	; () banked
  3279  002B26  25FD               	addwf	(??_main+4)& (0+255),w,b
  3280  002B28  0101               	movlb	1	; () banked
  3281  002B2A  6F1A               	movwf	_resultdata2send& (0+255),b
  3282  002B2C  511D               	movf	(_firstdigit+1)& (0+255),w,b
  3283  002B2E  0100               	movlb	0	; () banked
  3284  002B30  21FE               	addwfc	(??_main+5)& (0+255),w,b
  3285  002B32  0101               	movlb	1	; () banked
  3286  002B34  6F1B               	movwf	(_resultdata2send+1)& (0+255),b
  3287                           
  3288                           ; BSR set to: 1
  3289                           ;main.c: 175: first1decimal = (resultdata2send % 10);
  3290  002B36  C11A  F060         	movff	_resultdata2send,___awmod@dividend
  3291  002B3A  C11B  F061         	movff	_resultdata2send+1,___awmod@dividend+1
  3292  002B3E  0E00               	movlw	0
  3293  002B40  0100               	movlb	0	; () banked
  3294  002B42  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  3295  002B44  0E0A               	movlw	10
  3296  002B46  6F62               	movwf	___awmod@divisor& (0+255),b
  3297  002B48  EC87  F03E         	call	___awmod	;wreg free
  3298  002B4C  C060  F118         	movff	?___awmod,_first1decimal
  3299  002B50  C061  F119         	movff	?___awmod+1,_first1decimal+1
  3300                           
  3301                           ;main.c: 176: first2decimal = (resultdata2send % 100)/10;
  3302  002B54  0E00               	movlw	0
  3303  002B56  0100               	movlb	0	; () banked
  3304  002B58  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  3305  002B5A  0E64               	movlw	100
  3306  002B5C  6F62               	movwf	___awmod@divisor& (0+255),b
  3307  002B5E  C11A  F060         	movff	_resultdata2send,___awmod@dividend
  3308  002B62  C11B  F061         	movff	_resultdata2send+1,___awmod@dividend+1
  3309  002B66  EC87  F03E         	call	___awmod	;wreg free
  3310  002B6A  C060  F066         	movff	?___awmod,___awdiv@dividend
  3311  002B6E  C061  F067         	movff	?___awmod+1,___awdiv@dividend+1
  3312  002B72  0E00               	movlw	0
  3313  002B74  0100               	movlb	0	; () banked
  3314  002B76  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
  3315  002B78  0E0A               	movlw	10
  3316  002B7A  6F68               	movwf	___awdiv@divisor& (0+255),b
  3317  002B7C  EC84  F03C         	call	___awdiv	;wreg free
  3318  002B80  C066  F116         	movff	?___awdiv,_first2decimal
  3319  002B84  C067  F117         	movff	?___awdiv+1,_first2decimal+1
  3320                           
  3321                           ;main.c: 177: first3decimal = (resultdata2send % 1000)/100;
  3322  002B88  0E03               	movlw	3
  3323  002B8A  0100               	movlb	0	; () banked
  3324  002B8C  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  3325  002B8E  0EE8               	movlw	232
  3326  002B90  6F62               	movwf	___awmod@divisor& (0+255),b
  3327  002B92  C11A  F060         	movff	_resultdata2send,___awmod@dividend
  3328  002B96  C11B  F061         	movff	_resultdata2send+1,___awmod@dividend+1
  3329  002B9A  EC87  F03E         	call	___awmod	;wreg free
  3330  002B9E  C060  F066         	movff	?___awmod,___awdiv@dividend
  3331  002BA2  C061  F067         	movff	?___awmod+1,___awdiv@dividend+1
  3332  002BA6  0E00               	movlw	0
  3333  002BA8  0100               	movlb	0	; () banked
  3334  002BAA  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
  3335  002BAC  0E64               	movlw	100
  3336  002BAE  6F68               	movwf	___awdiv@divisor& (0+255),b
  3337  002BB0  EC84  F03C         	call	___awdiv	;wreg free
  3338  002BB4  C066  F114         	movff	?___awdiv,_first3decimal
  3339  002BB8  C067  F115         	movff	?___awdiv+1,_first3decimal+1
  3340                           
  3341                           ;main.c: 178: first4decimal = (resultdata2send % 10000)/1000;
  3342  002BBC  0E27               	movlw	39
  3343  002BBE  0100               	movlb	0	; () banked
  3344  002BC0  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  3345  002BC2  0E10               	movlw	16
  3346  002BC4  6F62               	movwf	___awmod@divisor& (0+255),b
  3347  002BC6  C11A  F060         	movff	_resultdata2send,___awmod@dividend
  3348  002BCA  C11B  F061         	movff	_resultdata2send+1,___awmod@dividend+1
  3349  002BCE  EC87  F03E         	call	___awmod	;wreg free
  3350  002BD2  C060  F066         	movff	?___awmod,___awdiv@dividend
  3351  002BD6  C061  F067         	movff	?___awmod+1,___awdiv@dividend+1
  3352  002BDA  0E03               	movlw	3
  3353  002BDC  0100               	movlb	0	; () banked
  3354  002BDE  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
  3355  002BE0  0EE8               	movlw	232
  3356  002BE2  6F68               	movwf	___awdiv@divisor& (0+255),b
  3357  002BE4  EC84  F03C         	call	___awdiv	;wreg free
  3358  002BE8  C066  F112         	movff	?___awdiv,_first4decimal
  3359  002BEC  C067  F113         	movff	?___awdiv+1,_first4decimal+1
  3360                           
  3361                           ;main.c: 179: first5decimal = (resultdata2send % 100000)/10000;
  3362  002BF0  0EA0               	movlw	160
  3363  002BF2  0100               	movlb	0	; () banked
  3364  002BF4  6F64               	movwf	___almod@divisor& (0+255),b
  3365  002BF6  0E86               	movlw	134
  3366  002BF8  6F65               	movwf	(___almod@divisor+1)& (0+255),b
  3367  002BFA  0E01               	movlw	1
  3368  002BFC  6F66               	movwf	(___almod@divisor+2)& (0+255),b
  3369  002BFE  0E00               	movlw	0
  3370  002C00  6F67               	movwf	(___almod@divisor+3)& (0+255),b
  3371  002C02  C11A  F060         	movff	_resultdata2send,___almod@dividend
  3372  002C06  C11B  F061         	movff	_resultdata2send+1,___almod@dividend+1
  3373  002C0A  0E00               	movlw	0
  3374  002C0C  BF61               	btfsc	(___almod@dividend+1)& (0+255),7,b
  3375  002C0E  0EFF               	movlw	-1
  3376  002C10  6F62               	movwf	(___almod@dividend+2)& (0+255),b
  3377  002C12  6F63               	movwf	(___almod@dividend+3)& (0+255),b
  3378  002C14  ECE7  F038         	call	___almod	;wreg free
  3379  002C18  C060  F06A         	movff	?___almod,___aldiv@dividend
  3380  002C1C  C061  F06B         	movff	?___almod+1,___aldiv@dividend+1
  3381  002C20  C062  F06C         	movff	?___almod+2,___aldiv@dividend+2
  3382  002C24  C063  F06D         	movff	?___almod+3,___aldiv@dividend+3
  3383  002C28  0E10               	movlw	16
  3384  002C2A  0100               	movlb	0	; () banked
  3385  002C2C  6F6E               	movwf	___aldiv@divisor& (0+255),b
  3386  002C2E  0E27               	movlw	39
  3387  002C30  6F6F               	movwf	(___aldiv@divisor+1)& (0+255),b
  3388  002C32  0E00               	movlw	0
  3389  002C34  6F70               	movwf	(___aldiv@divisor+2)& (0+255),b
  3390  002C36  0E00               	movlw	0
  3391  002C38  6F71               	movwf	(___aldiv@divisor+3)& (0+255),b
  3392  002C3A  EC65  F037         	call	___aldiv	;wreg free
  3393  002C3E  C06A  F110         	movff	?___aldiv,_first5decimal
  3394  002C42  C06B  F111         	movff	?___aldiv+1,_first5decimal+1
  3395                           
  3396                           ;main.c: 181: char first1decimalc = first1decimal+48;
  3397  002C46  0101               	movlb	1	; () banked
  3398  002C48  5118               	movf	_first1decimal& (0+255),w,b
  3399  002C4A  0F30               	addlw	48
  3400  002C4C  6FF8               	movwf	main@first1decimalc& (0+255),b
  3401                           
  3402                           ; BSR set to: 1
  3403                           ;main.c: 182: char first2decimalc = first2decimal+48;
  3404  002C4E  5116               	movf	_first2decimal& (0+255),w,b
  3405  002C50  0F30               	addlw	48
  3406  002C52  6FF9               	movwf	main@first2decimalc& (0+255),b
  3407                           
  3408                           ; BSR set to: 1
  3409                           ;main.c: 183: char first3decimalc = first3decimal+48;
  3410  002C54  5114               	movf	_first3decimal& (0+255),w,b
  3411  002C56  0F30               	addlw	48
  3412  002C58  6FFA               	movwf	main@first3decimalc& (0+255),b
  3413                           
  3414                           ; BSR set to: 1
  3415                           ;main.c: 184: char first4decimalc = first4decimal+48;
  3416  002C5A  5112               	movf	_first4decimal& (0+255),w,b
  3417  002C5C  0F30               	addlw	48
  3418  002C5E  6FFB               	movwf	main@first4decimalc& (0+255),b
  3419                           
  3420                           ; BSR set to: 1
  3421                           ;main.c: 185: char first5decimalc = first5decimal+48;
  3422  002C60  5110               	movf	_first5decimal& (0+255),w,b
  3423  002C62  0F30               	addlw	48
  3424  002C64  6FFC               	movwf	main@first5decimalc& (0+255),b
  3425                           
  3426                           ; BSR set to: 1
  3427                           ;main.c: 187: tosend[4] = first1decimalc;
  3428  002C66  C1F8  F3B6         	movff	main@first1decimalc,_tosend+4
  3429                           
  3430                           ; BSR set to: 1
  3431                           ;main.c: 188: tosend[3] = first2decimalc;
  3432  002C6A  C1F9  F3B5         	movff	main@first2decimalc,_tosend+3
  3433                           
  3434                           ; BSR set to: 1
  3435                           ;main.c: 189: tosend[2] = first3decimalc;
  3436  002C6E  C1FA  F3B4         	movff	main@first3decimalc,_tosend+2
  3437                           
  3438                           ; BSR set to: 1
  3439                           ;main.c: 190: tosend[1] = first4decimalc;
  3440  002C72  C1FB  F3B3         	movff	main@first4decimalc,_tosend+1
  3441                           
  3442                           ; BSR set to: 1
  3443                           ;main.c: 191: tosend[0] = first5decimalc;
  3444  002C76  C1FC  F3B2         	movff	main@first5decimalc,_tosend
  3445                           
  3446                           ; BSR set to: 1
  3447                           ;main.c: 202: LORAWAN_Send(UNCNF, 2, tosend, 5);
  3448  002C7A  0E02               	movlw	2
  3449  002C7C  0100               	movlb	0	; () banked
  3450  002C7E  6FD3               	movwf	LORAWAN_Send@port& (0+255),b
  3451  002C80  0EB2               	movlw	low _tosend
  3452  002C82  6FD4               	movwf	LORAWAN_Send@buffer& (0+255),b
  3453  002C84  0E03               	movlw	high _tosend
  3454  002C86  6FD5               	movwf	(LORAWAN_Send@buffer+1)& (0+255),b
  3455  002C88  0E05               	movlw	5
  3456  002C8A  6FD6               	movwf	LORAWAN_Send@bufferLength& (0+255),b
  3457  002C8C  0E00               	movlw	0
  3458  002C8E  ECFC  F036         	call	_LORAWAN_Send
  3459                           
  3460                           ;main.c: 204: counter = 0;
  3461  002C92  0E00               	movlw	0
  3462  002C94  0101               	movlb	1	; () banked
  3463  002C96  6F4C               	movwf	_counter& (0+255),b
  3464                           
  3465                           ; BSR set to: 1
  3466                           
  3467                           ; BSR set to: 1
  3468  002C98  D68A               	goto	l2818
  3469  002C9A                     __end_of_main:
  3470                           	opt stack 0
  3471                           tblptru	equ	0xFF8
  3472                           tblptrh	equ	0xFF7
  3473                           tblptrl	equ	0xFF6
  3474                           tablat	equ	0xFF5
  3475                           intcon	equ	0xFF2
  3476                           postinc0	equ	0xFEE
  3477                           wreg	equ	0xFE8
  3478                           postdec2	equ	0xFDD
  3479                           fsr2h	equ	0xFDA
  3480                           fsr2l	equ	0xFD9
  3481                           status	equ	0xFD8
  3482                           
  3483 ;; *************** function ___awmod *****************
  3484 ;; Defined at:
  3485 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awmod.c"
  3486 ;; Parameters:    Size  Location     Type
  3487 ;;  dividend        2    0[BANK0 ] int 
  3488 ;;  divisor         2    2[BANK0 ] int 
  3489 ;; Auto vars:     Size  Location     Type
  3490 ;;  sign            1    5[BANK0 ] unsigned char 
  3491 ;;  counter         1    4[BANK0 ] unsigned char 
  3492 ;; Return value:  Size  Location     Type
  3493 ;;                  2    0[BANK0 ] int 
  3494 ;; Registers used:
  3495 ;;		wreg, status,2, status,0
  3496 ;; Tracked objects:
  3497 ;;		On entry : 0/0
  3498 ;;		On exit  : 0/0
  3499 ;;		Unchanged: 0/0
  3500 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3501 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3502 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3503 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3504 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3505 ;;Total ram usage:        6 bytes
  3506 ;; Hardware stack levels used:    1
  3507 ;; Hardware stack levels required when called:    7
  3508 ;; This function calls:
  3509 ;;		Nothing
  3510 ;; This function is called by:
  3511 ;;		_main
  3512 ;; This function uses a non-reentrant model
  3513 ;;
  3514                           
  3515                           	psect	text1
  3516  007D0E                     __ptext1:
  3517                           	opt stack 0
  3518  007D0E                     ___awmod:
  3519                           	opt stack 23
  3520                           
  3521                           ; BSR set to: 1
  3522                           ;incstack = 0
  3523  007D0E  0E00               	movlw	0
  3524  007D10  0100               	movlb	0	; () banked
  3525  007D12  6F65               	movwf	___awmod@sign& (0+255),b
  3526                           
  3527                           ; BSR set to: 0
  3528  007D14  AF61               	btfss	(___awmod@dividend+1)& (0+255),7,b
  3529  007D16  D006               	goto	l3012
  3530                           
  3531                           ; BSR set to: 0
  3532  007D18  6D60               	negf	___awmod@dividend& (0+255),b
  3533  007D1A  1F61               	comf	(___awmod@dividend+1)& (0+255),f,b
  3534  007D1C  B0D8               	btfsc	status,0,c
  3535  007D1E  2B61               	incf	(___awmod@dividend+1)& (0+255),f,b
  3536                           
  3537                           ; BSR set to: 0
  3538  007D20  0E01               	movlw	1
  3539  007D22  6F65               	movwf	___awmod@sign& (0+255),b
  3540  007D24                     l3012:
  3541                           
  3542                           ; BSR set to: 0
  3543                           
  3544                           ; BSR set to: 0
  3545  007D24  AF63               	btfss	(___awmod@divisor+1)& (0+255),7,b
  3546  007D26  D004               	goto	l3013
  3547                           
  3548                           ; BSR set to: 0
  3549  007D28  6D62               	negf	___awmod@divisor& (0+255),b
  3550  007D2A  1F63               	comf	(___awmod@divisor+1)& (0+255),f,b
  3551  007D2C  B0D8               	btfsc	status,0,c
  3552  007D2E  2B63               	incf	(___awmod@divisor+1)& (0+255),f,b
  3553  007D30                     l3013:
  3554                           
  3555                           ; BSR set to: 0
  3556                           
  3557                           ; BSR set to: 0
  3558  007D30  5162               	movf	___awmod@divisor& (0+255),w,b
  3559  007D32  1163               	iorwf	(___awmod@divisor+1)& (0+255),w,b
  3560  007D34  B4D8               	btfsc	status,2,c
  3561  007D36  D018               	goto	l3020
  3562                           
  3563                           ; BSR set to: 0
  3564  007D38  0E01               	movlw	1
  3565  007D3A  6F64               	movwf	___awmod@counter& (0+255),b
  3566  007D3C  D004               	goto	l3015
  3567  007D3E                     
  3568                           ; BSR set to: 0
  3569                           
  3570                           ; BSR set to: 0
  3571  007D3E  90D8               	bcf	status,0,c
  3572  007D40  3762               	rlcf	___awmod@divisor& (0+255),f,b
  3573  007D42  3763               	rlcf	(___awmod@divisor+1)& (0+255),f,b
  3574  007D44  2B64               	incf	___awmod@counter& (0+255),f,b
  3575  007D46                     l3015:
  3576                           
  3577                           ; BSR set to: 0
  3578                           
  3579                           ; BSR set to: 0
  3580  007D46  AF63               	btfss	(___awmod@divisor+1)& (0+255),7,b
  3581  007D48  D7FA               	goto	l3016
  3582  007D4A                     u14410:
  3583                           
  3584                           ; BSR set to: 0
  3585                           
  3586                           ; BSR set to: 0
  3587                           
  3588                           ; BSR set to: 0
  3589  007D4A  5162               	movf	___awmod@divisor& (0+255),w,b
  3590  007D4C  5D60               	subwf	___awmod@dividend& (0+255),w,b
  3591  007D4E  5163               	movf	(___awmod@divisor+1)& (0+255),w,b
  3592  007D50  5961               	subwfb	(___awmod@dividend+1)& (0+255),w,b
  3593  007D52  A0D8               	btfss	status,0,c
  3594  007D54  D004               	goto	l3019
  3595                           
  3596                           ; BSR set to: 0
  3597  007D56  5162               	movf	___awmod@divisor& (0+255),w,b
  3598  007D58  5F60               	subwf	___awmod@dividend& (0+255),f,b
  3599  007D5A  5163               	movf	(___awmod@divisor+1)& (0+255),w,b
  3600  007D5C  5B61               	subwfb	(___awmod@dividend+1)& (0+255),f,b
  3601  007D5E                     l3019:
  3602                           
  3603                           ; BSR set to: 0
  3604                           
  3605                           ; BSR set to: 0
  3606  007D5E  90D8               	bcf	status,0,c
  3607  007D60  3363               	rrcf	(___awmod@divisor+1)& (0+255),f,b
  3608  007D62  3362               	rrcf	___awmod@divisor& (0+255),f,b
  3609                           
  3610                           ; BSR set to: 0
  3611  007D64  2F64               	decfsz	___awmod@counter& (0+255),f,b
  3612  007D66  D7F1               	goto	u14410
  3613  007D68                     l3020:
  3614                           
  3615                           ; BSR set to: 0
  3616                           
  3617                           ; BSR set to: 0
  3618                           
  3619                           ; BSR set to: 0
  3620  007D68  5165               	movf	___awmod@sign& (0+255),w,b
  3621  007D6A  B4D8               	btfsc	status,2,c
  3622  007D6C  D004               	goto	l3021
  3623                           
  3624                           ; BSR set to: 0
  3625  007D6E  6D60               	negf	___awmod@dividend& (0+255),b
  3626  007D70  1F61               	comf	(___awmod@dividend+1)& (0+255),f,b
  3627  007D72  B0D8               	btfsc	status,0,c
  3628  007D74  2B61               	incf	(___awmod@dividend+1)& (0+255),f,b
  3629  007D76                     l3021:
  3630                           
  3631                           ; BSR set to: 0
  3632                           
  3633                           ; BSR set to: 0
  3634  007D76  C060  F060         	movff	___awmod@dividend,?___awmod
  3635  007D7A  C061  F061         	movff	___awmod@dividend+1,?___awmod+1
  3636  007D7E  0012               	return	
  3637  007D80                     __end_of___awmod:
  3638                           	opt stack 0
  3639                           tblptru	equ	0xFF8
  3640                           tblptrh	equ	0xFF7
  3641                           tblptrl	equ	0xFF6
  3642                           tablat	equ	0xFF5
  3643                           intcon	equ	0xFF2
  3644                           postinc0	equ	0xFEE
  3645                           wreg	equ	0xFE8
  3646                           postdec2	equ	0xFDD
  3647                           fsr2h	equ	0xFDA
  3648                           fsr2l	equ	0xFD9
  3649                           status	equ	0xFD8
  3650                           
  3651 ;; *************** function ___almod *****************
  3652 ;; Defined at:
  3653 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\almod.c"
  3654 ;; Parameters:    Size  Location     Type
  3655 ;;  dividend        4    0[BANK0 ] long 
  3656 ;;  divisor         4    4[BANK0 ] long 
  3657 ;; Auto vars:     Size  Location     Type
  3658 ;;  sign            1    9[BANK0 ] unsigned char 
  3659 ;;  counter         1    8[BANK0 ] unsigned char 
  3660 ;; Return value:  Size  Location     Type
  3661 ;;                  4    0[BANK0 ] long 
  3662 ;; Registers used:
  3663 ;;		wreg, status,2, status,0
  3664 ;; Tracked objects:
  3665 ;;		On entry : 0/0
  3666 ;;		On exit  : 0/0
  3667 ;;		Unchanged: 0/0
  3668 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3669 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3670 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3671 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3672 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3673 ;;Total ram usage:       10 bytes
  3674 ;; Hardware stack levels used:    1
  3675 ;; Hardware stack levels required when called:    7
  3676 ;; This function calls:
  3677 ;;		Nothing
  3678 ;; This function is called by:
  3679 ;;		_main
  3680 ;; This function uses a non-reentrant model
  3681 ;;
  3682                           
  3683                           	psect	text2
  3684  0071CE                     __ptext2:
  3685                           	opt stack 0
  3686  0071CE                     ___almod:
  3687                           	opt stack 23
  3688                           
  3689                           ; BSR set to: 0
  3690                           ;incstack = 0
  3691  0071CE  0E00               	movlw	0
  3692  0071D0  0100               	movlb	0	; () banked
  3693  0071D2  6F69               	movwf	___almod@sign& (0+255),b
  3694                           
  3695                           ; BSR set to: 0
  3696  0071D4  AF63               	btfss	(___almod@dividend+3)& (0+255),7,b
  3697  0071D6  D00A               	goto	l2900
  3698                           
  3699                           ; BSR set to: 0
  3700  0071D8  1F63               	comf	(___almod@dividend+3)& (0+255),f,b
  3701  0071DA  1F62               	comf	(___almod@dividend+2)& (0+255),f,b
  3702  0071DC  1F61               	comf	(___almod@dividend+1)& (0+255),f,b
  3703  0071DE  6D60               	negf	___almod@dividend& (0+255),b
  3704  0071E0  0E00               	movlw	0
  3705  0071E2  2361               	addwfc	(___almod@dividend+1)& (0+255),f,b
  3706  0071E4  2362               	addwfc	(___almod@dividend+2)& (0+255),f,b
  3707  0071E6  2363               	addwfc	(___almod@dividend+3)& (0+255),f,b
  3708                           
  3709                           ; BSR set to: 0
  3710  0071E8  0E01               	movlw	1
  3711  0071EA  6F69               	movwf	___almod@sign& (0+255),b
  3712  0071EC                     l2900:
  3713                           
  3714                           ; BSR set to: 0
  3715                           
  3716                           ; BSR set to: 0
  3717  0071EC  AF67               	btfss	(___almod@divisor+3)& (0+255),7,b
  3718  0071EE  D008               	goto	l2901
  3719                           
  3720                           ; BSR set to: 0
  3721  0071F0  1F67               	comf	(___almod@divisor+3)& (0+255),f,b
  3722  0071F2  1F66               	comf	(___almod@divisor+2)& (0+255),f,b
  3723  0071F4  1F65               	comf	(___almod@divisor+1)& (0+255),f,b
  3724  0071F6  6D64               	negf	___almod@divisor& (0+255),b
  3725  0071F8  0E00               	movlw	0
  3726  0071FA  2365               	addwfc	(___almod@divisor+1)& (0+255),f,b
  3727  0071FC  2366               	addwfc	(___almod@divisor+2)& (0+255),f,b
  3728  0071FE  2367               	addwfc	(___almod@divisor+3)& (0+255),f,b
  3729  007200                     l2901:
  3730                           
  3731                           ; BSR set to: 0
  3732                           
  3733                           ; BSR set to: 0
  3734  007200  5164               	movf	___almod@divisor& (0+255),w,b
  3735  007202  1165               	iorwf	(___almod@divisor+1)& (0+255),w,b
  3736  007204  1166               	iorwf	(___almod@divisor+2)& (0+255),w,b
  3737  007206  1167               	iorwf	(___almod@divisor+3)& (0+255),w,b
  3738  007208  B4D8               	btfsc	status,2,c
  3739  00720A  D024               	goto	l2908
  3740                           
  3741                           ; BSR set to: 0
  3742  00720C  0E01               	movlw	1
  3743  00720E  6F68               	movwf	___almod@counter& (0+255),b
  3744  007210  D006               	goto	l2903
  3745  007212                     
  3746                           ; BSR set to: 0
  3747                           
  3748                           ; BSR set to: 0
  3749  007212  90D8               	bcf	status,0,c
  3750  007214  3764               	rlcf	___almod@divisor& (0+255),f,b
  3751  007216  3765               	rlcf	(___almod@divisor+1)& (0+255),f,b
  3752  007218  3766               	rlcf	(___almod@divisor+2)& (0+255),f,b
  3753  00721A  3767               	rlcf	(___almod@divisor+3)& (0+255),f,b
  3754  00721C  2B68               	incf	___almod@counter& (0+255),f,b
  3755  00721E                     l2903:
  3756                           
  3757                           ; BSR set to: 0
  3758                           
  3759                           ; BSR set to: 0
  3760  00721E  AF67               	btfss	(___almod@divisor+3)& (0+255),7,b
  3761  007220  D7F8               	goto	l2904
  3762  007222                     u14350:
  3763                           
  3764                           ; BSR set to: 0
  3765                           
  3766                           ; BSR set to: 0
  3767                           
  3768                           ; BSR set to: 0
  3769  007222  5164               	movf	___almod@divisor& (0+255),w,b
  3770  007224  5D60               	subwf	___almod@dividend& (0+255),w,b
  3771  007226  5165               	movf	(___almod@divisor+1)& (0+255),w,b
  3772  007228  5961               	subwfb	(___almod@dividend+1)& (0+255),w,b
  3773  00722A  5166               	movf	(___almod@divisor+2)& (0+255),w,b
  3774  00722C  5962               	subwfb	(___almod@dividend+2)& (0+255),w,b
  3775  00722E  5167               	movf	(___almod@divisor+3)& (0+255),w,b
  3776  007230  5963               	subwfb	(___almod@dividend+3)& (0+255),w,b
  3777  007232  A0D8               	btfss	status,0,c
  3778  007234  D008               	goto	l2907
  3779                           
  3780                           ; BSR set to: 0
  3781  007236  5164               	movf	___almod@divisor& (0+255),w,b
  3782  007238  5F60               	subwf	___almod@dividend& (0+255),f,b
  3783  00723A  5165               	movf	(___almod@divisor+1)& (0+255),w,b
  3784  00723C  5B61               	subwfb	(___almod@dividend+1)& (0+255),f,b
  3785  00723E  5166               	movf	(___almod@divisor+2)& (0+255),w,b
  3786  007240  5B62               	subwfb	(___almod@dividend+2)& (0+255),f,b
  3787  007242  5167               	movf	(___almod@divisor+3)& (0+255),w,b
  3788  007244  5B63               	subwfb	(___almod@dividend+3)& (0+255),f,b
  3789  007246                     l2907:
  3790                           
  3791                           ; BSR set to: 0
  3792                           
  3793                           ; BSR set to: 0
  3794  007246  90D8               	bcf	status,0,c
  3795  007248  3367               	rrcf	(___almod@divisor+3)& (0+255),f,b
  3796  00724A  3366               	rrcf	(___almod@divisor+2)& (0+255),f,b
  3797  00724C  3365               	rrcf	(___almod@divisor+1)& (0+255),f,b
  3798  00724E  3364               	rrcf	___almod@divisor& (0+255),f,b
  3799                           
  3800                           ; BSR set to: 0
  3801  007250  2F68               	decfsz	___almod@counter& (0+255),f,b
  3802  007252  D7E7               	goto	u14350
  3803  007254                     l2908:
  3804                           
  3805                           ; BSR set to: 0
  3806                           
  3807                           ; BSR set to: 0
  3808                           
  3809                           ; BSR set to: 0
  3810  007254  5169               	movf	___almod@sign& (0+255),w,b
  3811  007256  B4D8               	btfsc	status,2,c
  3812  007258  D008               	goto	l2909
  3813                           
  3814                           ; BSR set to: 0
  3815  00725A  1F63               	comf	(___almod@dividend+3)& (0+255),f,b
  3816  00725C  1F62               	comf	(___almod@dividend+2)& (0+255),f,b
  3817  00725E  1F61               	comf	(___almod@dividend+1)& (0+255),f,b
  3818  007260  6D60               	negf	___almod@dividend& (0+255),b
  3819  007262  0E00               	movlw	0
  3820  007264  2361               	addwfc	(___almod@dividend+1)& (0+255),f,b
  3821  007266  2362               	addwfc	(___almod@dividend+2)& (0+255),f,b
  3822  007268  2363               	addwfc	(___almod@dividend+3)& (0+255),f,b
  3823  00726A                     l2909:
  3824                           
  3825                           ; BSR set to: 0
  3826                           
  3827                           ; BSR set to: 0
  3828  00726A  C060  F060         	movff	___almod@dividend,?___almod
  3829  00726E  C061  F061         	movff	___almod@dividend+1,?___almod+1
  3830  007272  C062  F062         	movff	___almod@dividend+2,?___almod+2
  3831  007276  C063  F063         	movff	___almod@dividend+3,?___almod+3
  3832  00727A  0012               	return	
  3833  00727C                     __end_of___almod:
  3834                           	opt stack 0
  3835                           tblptru	equ	0xFF8
  3836                           tblptrh	equ	0xFF7
  3837                           tblptrl	equ	0xFF6
  3838                           tablat	equ	0xFF5
  3839                           intcon	equ	0xFF2
  3840                           postinc0	equ	0xFEE
  3841                           wreg	equ	0xFE8
  3842                           postdec2	equ	0xFDD
  3843                           fsr2h	equ	0xFDA
  3844                           fsr2l	equ	0xFD9
  3845                           status	equ	0xFD8
  3846                           
  3847 ;; *************** function ___aldiv *****************
  3848 ;; Defined at:
  3849 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\aldiv.c"
  3850 ;; Parameters:    Size  Location     Type
  3851 ;;  dividend        4   10[BANK0 ] long 
  3852 ;;  divisor         4   14[BANK0 ] long 
  3853 ;; Auto vars:     Size  Location     Type
  3854 ;;  quotient        4   20[BANK0 ] long 
  3855 ;;  sign            1   19[BANK0 ] unsigned char 
  3856 ;;  counter         1   18[BANK0 ] unsigned char 
  3857 ;; Return value:  Size  Location     Type
  3858 ;;                  4   10[BANK0 ] long 
  3859 ;; Registers used:
  3860 ;;		wreg, status,2, status,0
  3861 ;; Tracked objects:
  3862 ;;		On entry : 0/0
  3863 ;;		On exit  : 0/0
  3864 ;;		Unchanged: 0/0
  3865 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3866 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3867 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3868 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3869 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3870 ;;Total ram usage:       14 bytes
  3871 ;; Hardware stack levels used:    1
  3872 ;; Hardware stack levels required when called:    7
  3873 ;; This function calls:
  3874 ;;		Nothing
  3875 ;; This function is called by:
  3876 ;;		_main
  3877 ;; This function uses a non-reentrant model
  3878 ;;
  3879                           
  3880                           	psect	text3
  3881  006ECA                     __ptext3:
  3882                           	opt stack 0
  3883  006ECA                     ___aldiv:
  3884                           	opt stack 23
  3885                           
  3886                           ; BSR set to: 0
  3887                           ;incstack = 0
  3888  006ECA  0E00               	movlw	0
  3889  006ECC  0100               	movlb	0	; () banked
  3890  006ECE  6F73               	movwf	___aldiv@sign& (0+255),b
  3891                           
  3892                           ; BSR set to: 0
  3893  006ED0  AF71               	btfss	(___aldiv@divisor+3)& (0+255),7,b
  3894  006ED2  D00A               	goto	l2887
  3895                           
  3896                           ; BSR set to: 0
  3897  006ED4  1F71               	comf	(___aldiv@divisor+3)& (0+255),f,b
  3898  006ED6  1F70               	comf	(___aldiv@divisor+2)& (0+255),f,b
  3899  006ED8  1F6F               	comf	(___aldiv@divisor+1)& (0+255),f,b
  3900  006EDA  6D6E               	negf	___aldiv@divisor& (0+255),b
  3901  006EDC  0E00               	movlw	0
  3902  006EDE  236F               	addwfc	(___aldiv@divisor+1)& (0+255),f,b
  3903  006EE0  2370               	addwfc	(___aldiv@divisor+2)& (0+255),f,b
  3904  006EE2  2371               	addwfc	(___aldiv@divisor+3)& (0+255),f,b
  3905                           
  3906                           ; BSR set to: 0
  3907  006EE4  0E01               	movlw	1
  3908  006EE6  6F73               	movwf	___aldiv@sign& (0+255),b
  3909  006EE8                     l2887:
  3910                           
  3911                           ; BSR set to: 0
  3912                           
  3913                           ; BSR set to: 0
  3914  006EE8  AF6D               	btfss	(___aldiv@dividend+3)& (0+255),7,b
  3915  006EEA  D00A               	goto	l2888
  3916                           
  3917                           ; BSR set to: 0
  3918  006EEC  1F6D               	comf	(___aldiv@dividend+3)& (0+255),f,b
  3919  006EEE  1F6C               	comf	(___aldiv@dividend+2)& (0+255),f,b
  3920  006EF0  1F6B               	comf	(___aldiv@dividend+1)& (0+255),f,b
  3921  006EF2  6D6A               	negf	___aldiv@dividend& (0+255),b
  3922  006EF4  0E00               	movlw	0
  3923  006EF6  236B               	addwfc	(___aldiv@dividend+1)& (0+255),f,b
  3924  006EF8  236C               	addwfc	(___aldiv@dividend+2)& (0+255),f,b
  3925  006EFA  236D               	addwfc	(___aldiv@dividend+3)& (0+255),f,b
  3926                           
  3927                           ; BSR set to: 0
  3928  006EFC  0E01               	movlw	1
  3929  006EFE  1B73               	xorwf	___aldiv@sign& (0+255),f,b
  3930  006F00                     l2888:
  3931                           
  3932                           ; BSR set to: 0
  3933                           
  3934                           ; BSR set to: 0
  3935  006F00  0E00               	movlw	0
  3936  006F02  6F74               	movwf	___aldiv@quotient& (0+255),b
  3937  006F04  0E00               	movlw	0
  3938  006F06  6F75               	movwf	(___aldiv@quotient+1)& (0+255),b
  3939  006F08  0E00               	movlw	0
  3940  006F0A  6F76               	movwf	(___aldiv@quotient+2)& (0+255),b
  3941  006F0C  0E00               	movlw	0
  3942  006F0E  6F77               	movwf	(___aldiv@quotient+3)& (0+255),b
  3943                           
  3944                           ; BSR set to: 0
  3945  006F10  516E               	movf	___aldiv@divisor& (0+255),w,b
  3946  006F12  116F               	iorwf	(___aldiv@divisor+1)& (0+255),w,b
  3947  006F14  1170               	iorwf	(___aldiv@divisor+2)& (0+255),w,b
  3948  006F16  1171               	iorwf	(___aldiv@divisor+3)& (0+255),w,b
  3949  006F18  B4D8               	btfsc	status,2,c
  3950  006F1A  D02A               	goto	l2895
  3951                           
  3952                           ; BSR set to: 0
  3953  006F1C  0E01               	movlw	1
  3954  006F1E  6F72               	movwf	___aldiv@counter& (0+255),b
  3955  006F20  D006               	goto	l2890
  3956  006F22                     
  3957                           ; BSR set to: 0
  3958                           
  3959                           ; BSR set to: 0
  3960  006F22  90D8               	bcf	status,0,c
  3961  006F24  376E               	rlcf	___aldiv@divisor& (0+255),f,b
  3962  006F26  376F               	rlcf	(___aldiv@divisor+1)& (0+255),f,b
  3963  006F28  3770               	rlcf	(___aldiv@divisor+2)& (0+255),f,b
  3964  006F2A  3771               	rlcf	(___aldiv@divisor+3)& (0+255),f,b
  3965  006F2C  2B72               	incf	___aldiv@counter& (0+255),f,b
  3966  006F2E                     l2890:
  3967                           
  3968                           ; BSR set to: 0
  3969                           
  3970                           ; BSR set to: 0
  3971  006F2E  AF71               	btfss	(___aldiv@divisor+3)& (0+255),7,b
  3972  006F30  D7F8               	goto	l2891
  3973  006F32                     u14290:
  3974                           
  3975                           ; BSR set to: 0
  3976                           
  3977                           ; BSR set to: 0
  3978                           
  3979                           ; BSR set to: 0
  3980  006F32  90D8               	bcf	status,0,c
  3981  006F34  3774               	rlcf	___aldiv@quotient& (0+255),f,b
  3982  006F36  3775               	rlcf	(___aldiv@quotient+1)& (0+255),f,b
  3983  006F38  3776               	rlcf	(___aldiv@quotient+2)& (0+255),f,b
  3984  006F3A  3777               	rlcf	(___aldiv@quotient+3)& (0+255),f,b
  3985                           
  3986                           ; BSR set to: 0
  3987  006F3C  516E               	movf	___aldiv@divisor& (0+255),w,b
  3988  006F3E  5D6A               	subwf	___aldiv@dividend& (0+255),w,b
  3989  006F40  516F               	movf	(___aldiv@divisor+1)& (0+255),w,b
  3990  006F42  596B               	subwfb	(___aldiv@dividend+1)& (0+255),w,b
  3991  006F44  5170               	movf	(___aldiv@divisor+2)& (0+255),w,b
  3992  006F46  596C               	subwfb	(___aldiv@dividend+2)& (0+255),w,b
  3993  006F48  5171               	movf	(___aldiv@divisor+3)& (0+255),w,b
  3994  006F4A  596D               	subwfb	(___aldiv@dividend+3)& (0+255),w,b
  3995  006F4C  A0D8               	btfss	status,0,c
  3996  006F4E  D009               	goto	l2894
  3997                           
  3998                           ; BSR set to: 0
  3999  006F50  516E               	movf	___aldiv@divisor& (0+255),w,b
  4000  006F52  5F6A               	subwf	___aldiv@dividend& (0+255),f,b
  4001  006F54  516F               	movf	(___aldiv@divisor+1)& (0+255),w,b
  4002  006F56  5B6B               	subwfb	(___aldiv@dividend+1)& (0+255),f,b
  4003  006F58  5170               	movf	(___aldiv@divisor+2)& (0+255),w,b
  4004  006F5A  5B6C               	subwfb	(___aldiv@dividend+2)& (0+255),f,b
  4005  006F5C  5171               	movf	(___aldiv@divisor+3)& (0+255),w,b
  4006  006F5E  5B6D               	subwfb	(___aldiv@dividend+3)& (0+255),f,b
  4007                           
  4008                           ; BSR set to: 0
  4009  006F60  8174               	bsf	___aldiv@quotient& (0+255),0,b
  4010  006F62                     l2894:
  4011                           
  4012                           ; BSR set to: 0
  4013                           
  4014                           ; BSR set to: 0
  4015  006F62  90D8               	bcf	status,0,c
  4016  006F64  3371               	rrcf	(___aldiv@divisor+3)& (0+255),f,b
  4017  006F66  3370               	rrcf	(___aldiv@divisor+2)& (0+255),f,b
  4018  006F68  336F               	rrcf	(___aldiv@divisor+1)& (0+255),f,b
  4019  006F6A  336E               	rrcf	___aldiv@divisor& (0+255),f,b
  4020                           
  4021                           ; BSR set to: 0
  4022  006F6C  2F72               	decfsz	___aldiv@counter& (0+255),f,b
  4023  006F6E  D7E1               	goto	u14290
  4024  006F70                     l2895:
  4025                           
  4026                           ; BSR set to: 0
  4027                           
  4028                           ; BSR set to: 0
  4029                           
  4030                           ; BSR set to: 0
  4031  006F70  5173               	movf	___aldiv@sign& (0+255),w,b
  4032  006F72  B4D8               	btfsc	status,2,c
  4033  006F74  D008               	goto	l2896
  4034                           
  4035                           ; BSR set to: 0
  4036  006F76  1F77               	comf	(___aldiv@quotient+3)& (0+255),f,b
  4037  006F78  1F76               	comf	(___aldiv@quotient+2)& (0+255),f,b
  4038  006F7A  1F75               	comf	(___aldiv@quotient+1)& (0+255),f,b
  4039  006F7C  6D74               	negf	___aldiv@quotient& (0+255),b
  4040  006F7E  0E00               	movlw	0
  4041  006F80  2375               	addwfc	(___aldiv@quotient+1)& (0+255),f,b
  4042  006F82  2376               	addwfc	(___aldiv@quotient+2)& (0+255),f,b
  4043  006F84  2377               	addwfc	(___aldiv@quotient+3)& (0+255),f,b
  4044  006F86                     l2896:
  4045                           
  4046                           ; BSR set to: 0
  4047                           
  4048                           ; BSR set to: 0
  4049  006F86  C074  F06A         	movff	___aldiv@quotient,?___aldiv
  4050  006F8A  C075  F06B         	movff	___aldiv@quotient+1,?___aldiv+1
  4051  006F8E  C076  F06C         	movff	___aldiv@quotient+2,?___aldiv+2
  4052  006F92  C077  F06D         	movff	___aldiv@quotient+3,?___aldiv+3
  4053  006F96  0012               	return	
  4054  006F98                     __end_of___aldiv:
  4055                           	opt stack 0
  4056                           tblptru	equ	0xFF8
  4057                           tblptrh	equ	0xFF7
  4058                           tblptrl	equ	0xFF6
  4059                           tablat	equ	0xFF5
  4060                           intcon	equ	0xFF2
  4061                           postinc0	equ	0xFEE
  4062                           wreg	equ	0xFE8
  4063                           postdec2	equ	0xFDD
  4064                           fsr2h	equ	0xFDA
  4065                           fsr2l	equ	0xFD9
  4066                           status	equ	0xFD8
  4067                           
  4068 ;; *************** function _TMR5_HasOverflowOccured *****************
  4069 ;; Defined at:
  4070 ;;		line 151 in file "mcc_generated_files/tmr5.c"
  4071 ;; Parameters:    Size  Location     Type
  4072 ;;		None
  4073 ;; Auto vars:     Size  Location     Type
  4074 ;;		None
  4075 ;; Return value:  Size  Location     Type
  4076 ;;                  1    wreg      unsigned char 
  4077 ;; Registers used:
  4078 ;;		wreg
  4079 ;; Tracked objects:
  4080 ;;		On entry : 0/0
  4081 ;;		On exit  : 0/0
  4082 ;;		Unchanged: 0/0
  4083 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4084 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4085 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4086 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4087 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4088 ;;Total ram usage:        0 bytes
  4089 ;; Hardware stack levels used:    1
  4090 ;; Hardware stack levels required when called:    7
  4091 ;; This function calls:
  4092 ;;		Nothing
  4093 ;; This function is called by:
  4094 ;;		_main
  4095 ;; This function uses a non-reentrant model
  4096 ;;
  4097                           
  4098                           	psect	text4
  4099  00949C                     __ptext4:
  4100                           	opt stack 0
  4101  00949C                     _TMR5_HasOverflowOccured:
  4102                           	opt stack 23
  4103                           
  4104                           ;tmr5.c: 154: return(PIR5bits.TMR5IF);
  4105                           
  4106                           ; BSR set to: 0
  4107                           ;incstack = 0
  4108  00949C  A27E               	btfss	3966,1,c	;volatile
  4109  00949E  D002               	goto	u14250
  4110  0094A0  0E01               	movlw	1
  4111  0094A2  0012               	return	
  4112  0094A4                     u14250:
  4113  0094A4  0E00               	movlw	0
  4114  0094A6  0012               	return	
  4115  0094A8                     __end_of_TMR5_HasOverflowOccured:
  4116                           	opt stack 0
  4117                           tblptru	equ	0xFF8
  4118                           tblptrh	equ	0xFF7
  4119                           tblptrl	equ	0xFF6
  4120                           tablat	equ	0xFF5
  4121                           intcon	equ	0xFF2
  4122                           postinc0	equ	0xFEE
  4123                           wreg	equ	0xFE8
  4124                           postdec2	equ	0xFDD
  4125                           fsr2h	equ	0xFDA
  4126                           fsr2l	equ	0xFD9
  4127                           status	equ	0xFD8
  4128                           
  4129 ;; *************** function _SYSTEM_Initialize *****************
  4130 ;; Defined at:
  4131 ;;		line 50 in file "mcc_generated_files/mcc.c"
  4132 ;; Parameters:    Size  Location     Type
  4133 ;;		None
  4134 ;; Auto vars:     Size  Location     Type
  4135 ;;		None
  4136 ;; Return value:  Size  Location     Type
  4137 ;;                  1    wreg      void 
  4138 ;; Registers used:
  4139 ;;		wreg, status,2, status,0, cstack
  4140 ;; Tracked objects:
  4141 ;;		On entry : 0/0
  4142 ;;		On exit  : 0/0
  4143 ;;		Unchanged: 0/0
  4144 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4145 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4146 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4147 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4148 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4149 ;;Total ram usage:        0 bytes
  4150 ;; Hardware stack levels used:    1
  4151 ;; Hardware stack levels required when called:   10
  4152 ;; This function calls:
  4153 ;;		_EUSART1_Initialize
  4154 ;;		_EXT_INT_Initialize
  4155 ;;		_INTERRUPT_Initialize
  4156 ;;		_LORAWAN_PlatformInit
  4157 ;;		_OSCILLATOR_Initialize
  4158 ;;		_PIN_MANAGER_Initialize
  4159 ;;		_SPI2_Initialize
  4160 ;;		_TMR1_Initialize
  4161 ;;		_TMR5_Initialize
  4162 ;; This function is called by:
  4163 ;;		_main
  4164 ;; This function uses a non-reentrant model
  4165 ;;
  4166                           
  4167                           	psect	text5
  4168  00905E                     __ptext5:
  4169                           	opt stack 0
  4170  00905E                     _SYSTEM_Initialize:
  4171                           	opt stack 20
  4172                           
  4173                           ;mcc.c: 53: INTERRUPT_Initialize();
  4174                           
  4175                           ;incstack = 0
  4176  00905E  ECEB  F04A         	call	_INTERRUPT_Initialize	;wreg free
  4177                           
  4178                           ;mcc.c: 54: PIN_MANAGER_Initialize();
  4179  009062  ECF6  F042         	call	_PIN_MANAGER_Initialize	;wreg free
  4180                           
  4181                           ;mcc.c: 55: OSCILLATOR_Initialize();
  4182  009066  EC40  F04A         	call	_OSCILLATOR_Initialize	;wreg free
  4183                           
  4184                           ;mcc.c: 56: SPI2_Initialize();
  4185  00906A  EC39  F04A         	call	_SPI2_Initialize	;wreg free
  4186                           
  4187                           ;mcc.c: 59: TMR5_Initialize();
  4188  00906E  EC4E  F049         	call	_TMR5_Initialize	;wreg free
  4189                           
  4190                           ;mcc.c: 60: EXT_INT_Initialize();
  4191  009072  EC77  F047         	call	_EXT_INT_Initialize	;wreg free
  4192                           
  4193                           ;mcc.c: 61: TMR1_Initialize();
  4194  009076  EC61  F047         	call	_TMR1_Initialize	;wreg free
  4195                           
  4196                           ;mcc.c: 62: EUSART1_Initialize();
  4197  00907A  EC8D  F03D         	call	_EUSART1_Initialize	;wreg free
  4198                           
  4199                           ;mcc.c: 63: LORAWAN_PlatformInit();
  4200  00907E  EC7A  F048         	call	_LORAWAN_PlatformInit	;wreg free
  4201  009082  0012               	return		;funcret
  4202  009084                     __end_of_SYSTEM_Initialize:
  4203                           	opt stack 0
  4204                           tblptru	equ	0xFF8
  4205                           tblptrh	equ	0xFF7
  4206                           tblptrl	equ	0xFF6
  4207                           tablat	equ	0xFF5
  4208                           intcon	equ	0xFF2
  4209                           postinc0	equ	0xFEE
  4210                           wreg	equ	0xFE8
  4211                           postdec2	equ	0xFDD
  4212                           fsr2h	equ	0xFDA
  4213                           fsr2l	equ	0xFD9
  4214                           status	equ	0xFD8
  4215                           
  4216 ;; *************** function _TMR5_Initialize *****************
  4217 ;; Defined at:
  4218 ;;		line 63 in file "mcc_generated_files/tmr5.c"
  4219 ;; Parameters:    Size  Location     Type
  4220 ;;		None
  4221 ;; Auto vars:     Size  Location     Type
  4222 ;;		None
  4223 ;; Return value:  Size  Location     Type
  4224 ;;                  1    wreg      void 
  4225 ;; Registers used:
  4226 ;;		wreg, status,2
  4227 ;; Tracked objects:
  4228 ;;		On entry : 0/0
  4229 ;;		On exit  : 0/0
  4230 ;;		Unchanged: 0/0
  4231 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4232 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4233 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4234 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4235 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4236 ;;Total ram usage:        0 bytes
  4237 ;; Hardware stack levels used:    1
  4238 ;; Hardware stack levels required when called:    7
  4239 ;; This function calls:
  4240 ;;		Nothing
  4241 ;; This function is called by:
  4242 ;;		_SYSTEM_Initialize
  4243 ;; This function uses a non-reentrant model
  4244 ;;
  4245                           
  4246                           	psect	text6
  4247  00929C                     __ptext6:
  4248                           	opt stack 0
  4249  00929C                     _TMR5_Initialize:
  4250                           	opt stack 22
  4251                           
  4252                           ;tmr5.c: 68: T5GCON = 0x00;
  4253                           
  4254                           ;incstack = 0
  4255  00929C  0E00               	movlw	0
  4256  00929E  010F               	movlb	15	; () banked
  4257  0092A0  6F4D               	movwf	77,b	;volatile
  4258                           
  4259                           ;tmr5.c: 71: TMR5H = 0x10;
  4260  0092A2  0E10               	movlw	16
  4261  0092A4  6F50               	movwf	80,b	;volatile
  4262                           
  4263                           ;tmr5.c: 74: TMR5L = 0x00;
  4264  0092A6  0E00               	movlw	0
  4265  0092A8  6F4F               	movwf	79,b	;volatile
  4266                           
  4267                           ; BSR set to: 15
  4268                           ;tmr5.c: 77: timer5ReloadVal=TMR5;
  4269  0092AA  CF4F F3E3          	movff	3919,_timer5ReloadVal	;volatile
  4270  0092AE  CF50 F3E4          	movff	3920,_timer5ReloadVal+1	;volatile
  4271                           
  4272                           ; BSR set to: 15
  4273                           ;tmr5.c: 80: PIR5bits.TMR5IF = 0;
  4274  0092B2  927E               	bcf	3966,1,c	;volatile
  4275                           
  4276                           ;tmr5.c: 83: T5CON = 0xBD;
  4277  0092B4  0EBD               	movlw	189
  4278  0092B6  6F4E               	movwf	78,b	;volatile
  4279                           
  4280                           ; BSR set to: 15
  4281  0092B8  0012               	return		;funcret
  4282  0092BA                     __end_of_TMR5_Initialize:
  4283                           	opt stack 0
  4284                           tblptru	equ	0xFF8
  4285                           tblptrh	equ	0xFF7
  4286                           tblptrl	equ	0xFF6
  4287                           tablat	equ	0xFF5
  4288                           intcon	equ	0xFF2
  4289                           postinc0	equ	0xFEE
  4290                           wreg	equ	0xFE8
  4291                           postdec2	equ	0xFDD
  4292                           fsr2h	equ	0xFDA
  4293                           fsr2l	equ	0xFD9
  4294                           status	equ	0xFD8
  4295                           
  4296 ;; *************** function _TMR1_Initialize *****************
  4297 ;; Defined at:
  4298 ;;		line 64 in file "mcc_generated_files/tmr1.c"
  4299 ;; Parameters:    Size  Location     Type
  4300 ;;		None
  4301 ;; Auto vars:     Size  Location     Type
  4302 ;;		None
  4303 ;; Return value:  Size  Location     Type
  4304 ;;                  1    wreg      void 
  4305 ;; Registers used:
  4306 ;;		wreg, status,2, status,0, cstack
  4307 ;; Tracked objects:
  4308 ;;		On entry : 0/0
  4309 ;;		On exit  : 0/0
  4310 ;;		Unchanged: 0/0
  4311 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4312 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4313 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4314 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4315 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4316 ;;Total ram usage:        0 bytes
  4317 ;; Hardware stack levels used:    1
  4318 ;; Hardware stack levels required when called:    8
  4319 ;; This function calls:
  4320 ;;		_TMR1_SetInterruptHandler
  4321 ;; This function is called by:
  4322 ;;		_SYSTEM_Initialize
  4323 ;; This function uses a non-reentrant model
  4324 ;;
  4325                           
  4326                           	psect	text7
  4327  008EC2                     __ptext7:
  4328                           	opt stack 0
  4329  008EC2                     _TMR1_Initialize:
  4330                           	opt stack 21
  4331                           
  4332                           ;tmr1.c: 69: T1GCON = 0x00;
  4333                           
  4334                           ; BSR set to: 15
  4335                           ;incstack = 0
  4336  008EC2  0E00               	movlw	0
  4337  008EC4  6ECC               	movwf	4044,c	;volatile
  4338                           
  4339                           ;tmr1.c: 72: TMR1H = 0x00;
  4340  008EC6  0E00               	movlw	0
  4341  008EC8  6ECF               	movwf	4047,c	;volatile
  4342                           
  4343                           ;tmr1.c: 75: TMR1L = 0x00;
  4344  008ECA  0E00               	movlw	0
  4345  008ECC  6ECE               	movwf	4046,c	;volatile
  4346                           
  4347                           ;tmr1.c: 78: timer1ReloadVal=TMR1;
  4348  008ECE  CFCE F1FD          	movff	4046,_timer1ReloadVal	;volatile
  4349  008ED2  CFCF F1FE          	movff	4047,_timer1ReloadVal+1	;volatile
  4350                           
  4351                           ;tmr1.c: 81: PIR1bits.TMR1IF = 0;
  4352  008ED6  909E               	bcf	3998,0,c	;volatile
  4353                           
  4354                           ;tmr1.c: 84: PIE1bits.TMR1IE = 1;
  4355  008ED8  809D               	bsf	3997,0,c	;volatile
  4356                           
  4357                           ;tmr1.c: 87: TMR1_SetInterruptHandler(TMR1_DefaultInterruptHandler);
  4358  008EDA  0EF4               	movlw	low _TMR1_DefaultInterruptHandler
  4359  008EDC  0100               	movlb	0	; () banked
  4360  008EDE  6F60               	movwf	TMR1_SetInterruptHandler@InterruptHandler& (0+255),b
  4361  008EE0  0E95               	movlw	high _TMR1_DefaultInterruptHandler
  4362  008EE2  6F61               	movwf	(TMR1_SetInterruptHandler@InterruptHandler+1)& (0+255),b
  4363  008EE4  EC5A  F04A         	call	_TMR1_SetInterruptHandler	;wreg free
  4364                           
  4365                           ;tmr1.c: 90: T1CON = 0x8D;
  4366  008EE8  0E8D               	movlw	141
  4367  008EEA  6ECD               	movwf	4045,c	;volatile
  4368  008EEC  0012               	return		;funcret
  4369  008EEE                     __end_of_TMR1_Initialize:
  4370                           	opt stack 0
  4371                           tblptru	equ	0xFF8
  4372                           tblptrh	equ	0xFF7
  4373                           tblptrl	equ	0xFF6
  4374                           tablat	equ	0xFF5
  4375                           intcon	equ	0xFF2
  4376                           postinc0	equ	0xFEE
  4377                           wreg	equ	0xFE8
  4378                           postdec2	equ	0xFDD
  4379                           fsr2h	equ	0xFDA
  4380                           fsr2l	equ	0xFD9
  4381                           status	equ	0xFD8
  4382                           
  4383 ;; *************** function _SPI2_Initialize *****************
  4384 ;; Defined at:
  4385 ;;		line 65 in file "mcc_generated_files/spi2.c"
  4386 ;; Parameters:    Size  Location     Type
  4387 ;;		None
  4388 ;; Auto vars:     Size  Location     Type
  4389 ;;		None
  4390 ;; Return value:  Size  Location     Type
  4391 ;;                  1    wreg      void 
  4392 ;; Registers used:
  4393 ;;		wreg, status,2
  4394 ;; Tracked objects:
  4395 ;;		On entry : 0/0
  4396 ;;		On exit  : 0/0
  4397 ;;		Unchanged: 0/0
  4398 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4399 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4400 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4401 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4402 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4403 ;;Total ram usage:        0 bytes
  4404 ;; Hardware stack levels used:    1
  4405 ;; Hardware stack levels required when called:    7
  4406 ;; This function calls:
  4407 ;;		Nothing
  4408 ;; This function is called by:
  4409 ;;		_SYSTEM_Initialize
  4410 ;; This function uses a non-reentrant model
  4411 ;;
  4412                           
  4413                           	psect	text8
  4414  009472                     __ptext8:
  4415                           	opt stack 0
  4416  009472                     _SPI2_Initialize:
  4417                           	opt stack 22
  4418                           
  4419                           ;spi2.c: 70: SSP2STAT = 0x40;
  4420                           
  4421                           ;incstack = 0
  4422  009472  0E40               	movlw	64
  4423  009474  6E6D               	movwf	3949,c	;volatile
  4424                           
  4425                           ;spi2.c: 73: SSP2CON1 = 0x20;
  4426  009476  0E20               	movlw	32
  4427  009478  6E6C               	movwf	3948,c	;volatile
  4428                           
  4429                           ;spi2.c: 76: SSP2ADD = 0x00;
  4430  00947A  0E00               	movlw	0
  4431  00947C  6E6E               	movwf	3950,c	;volatile
  4432  00947E  0012               	return		;funcret
  4433  009480                     __end_of_SPI2_Initialize:
  4434                           	opt stack 0
  4435                           tblptru	equ	0xFF8
  4436                           tblptrh	equ	0xFF7
  4437                           tblptrl	equ	0xFF6
  4438                           tablat	equ	0xFF5
  4439                           intcon	equ	0xFF2
  4440                           postinc0	equ	0xFEE
  4441                           wreg	equ	0xFE8
  4442                           postdec2	equ	0xFDD
  4443                           fsr2h	equ	0xFDA
  4444                           fsr2l	equ	0xFD9
  4445                           status	equ	0xFD8
  4446                           
  4447 ;; *************** function _PIN_MANAGER_Initialize *****************
  4448 ;; Defined at:
  4449 ;;		line 57 in file "mcc_generated_files/pin_manager.c"
  4450 ;; Parameters:    Size  Location     Type
  4451 ;;		None
  4452 ;; Auto vars:     Size  Location     Type
  4453 ;;		None
  4454 ;; Return value:  Size  Location     Type
  4455 ;;                  1    wreg      void 
  4456 ;; Registers used:
  4457 ;;		wreg, status,2, status,0, cstack
  4458 ;; Tracked objects:
  4459 ;;		On entry : 0/0
  4460 ;;		On exit  : 0/0
  4461 ;;		Unchanged: 0/0
  4462 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4463 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4464 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4465 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4466 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4467 ;;Total ram usage:        0 bytes
  4468 ;; Hardware stack levels used:    1
  4469 ;; Hardware stack levels required when called:    8
  4470 ;; This function calls:
  4471 ;;		_IOCB4_SetInterruptHandler
  4472 ;; This function is called by:
  4473 ;;		_SYSTEM_Initialize
  4474 ;; This function uses a non-reentrant model
  4475 ;;
  4476                           
  4477                           	psect	text9
  4478  0085EC                     __ptext9:
  4479                           	opt stack 0
  4480  0085EC                     _PIN_MANAGER_Initialize:
  4481                           	opt stack 21
  4482                           
  4483                           ;pin_manager.c: 62: LATE = 0x00;
  4484                           
  4485                           ;incstack = 0
  4486  0085EC  0E00               	movlw	0
  4487  0085EE  6E8D               	movwf	3981,c	;volatile
  4488                           
  4489                           ;pin_manager.c: 63: LATD = 0x00;
  4490  0085F0  0E00               	movlw	0
  4491  0085F2  6E8C               	movwf	3980,c	;volatile
  4492                           
  4493                           ;pin_manager.c: 64: LATA = 0x00;
  4494  0085F4  0E00               	movlw	0
  4495  0085F6  6E89               	movwf	3977,c	;volatile
  4496                           
  4497                           ;pin_manager.c: 65: LATB = 0x00;
  4498  0085F8  0E00               	movlw	0
  4499  0085FA  6E8A               	movwf	3978,c	;volatile
  4500                           
  4501                           ;pin_manager.c: 66: LATC = 0x00;
  4502  0085FC  0E00               	movlw	0
  4503  0085FE  6E8B               	movwf	3979,c	;volatile
  4504                           
  4505                           ;pin_manager.c: 71: TRISE = 0x07;
  4506  008600  0E07               	movlw	7
  4507  008602  6E96               	movwf	3990,c	;volatile
  4508                           
  4509                           ;pin_manager.c: 72: TRISA = 0xFF;
  4510  008604  6892               	setf	3986,c	;volatile
  4511                           
  4512                           ;pin_manager.c: 73: TRISB = 0xFF;
  4513  008606  6893               	setf	3987,c	;volatile
  4514                           
  4515                           ;pin_manager.c: 74: TRISC = 0xBE;
  4516  008608  0EBE               	movlw	190
  4517  00860A  6E94               	movwf	3988,c	;volatile
  4518                           
  4519                           ;pin_manager.c: 75: TRISD = 0xE6;
  4520  00860C  0EE6               	movlw	230
  4521  00860E  6E95               	movwf	3989,c	;volatile
  4522                           
  4523                           ;pin_manager.c: 80: ANSELD = 0xE4;
  4524  008610  0EE4               	movlw	228
  4525  008612  010F               	movlb	15	; () banked
  4526  008614  6F3B               	movwf	59,b	;volatile
  4527                           
  4528                           ;pin_manager.c: 81: ANSELC = 0x38;
  4529  008616  0E38               	movlw	56
  4530  008618  6F3A               	movwf	58,b	;volatile
  4531                           
  4532                           ;pin_manager.c: 82: ANSELB = 0x28;
  4533  00861A  0E28               	movlw	40
  4534  00861C  6F39               	movwf	57,b	;volatile
  4535                           
  4536                           ;pin_manager.c: 83: ANSELE = 0x07;
  4537  00861E  0E07               	movlw	7
  4538  008620  6F3C               	movwf	60,b	;volatile
  4539                           
  4540                           ;pin_manager.c: 84: ANSELA = 0x2F;
  4541  008622  0E2F               	movlw	47
  4542  008624  6F38               	movwf	56,b	;volatile
  4543                           
  4544                           ;pin_manager.c: 89: WPUB = 0x00;
  4545  008626  0E00               	movlw	0
  4546  008628  6E61               	movwf	3937,c	;volatile
  4547                           
  4548                           ; BSR set to: 15
  4549                           ;pin_manager.c: 90: INTCON2bits.nRBPU = 1;
  4550  00862A  8EF1               	bsf	intcon2,7,c	;volatile
  4551                           
  4552                           ; BSR set to: 15
  4553                           ;pin_manager.c: 98: IOCBbits.IOCB4 = 1;
  4554  00862C  8862               	bsf	3938,4,c	;volatile
  4555                           
  4556                           ; BSR set to: 15
  4557                           ;pin_manager.c: 103: IOCB4_SetInterruptHandler(IOCB4_DefaultInterruptHandler);
  4558  00862E  0EF6               	movlw	low _IOCB4_DefaultInterruptHandler
  4559  008630  0100               	movlb	0	; () banked
  4560  008632  6F60               	movwf	IOCB4_SetInterruptHandler@InterruptHandler& (0+255),b
  4561  008634  0E95               	movlw	high _IOCB4_DefaultInterruptHandler
  4562  008636  6F61               	movwf	(IOCB4_SetInterruptHandler@InterruptHandler+1)& (0+255),b
  4563  008638  EC5F  F04A         	call	_IOCB4_SetInterruptHandler	;wreg free
  4564                           
  4565                           ;pin_manager.c: 106: INTCONbits.RBIE = 1;
  4566  00863C  86F2               	bsf	intcon,3,c	;volatile
  4567  00863E  0012               	return		;funcret
  4568  008640                     __end_of_PIN_MANAGER_Initialize:
  4569                           	opt stack 0
  4570                           tblptru	equ	0xFF8
  4571                           tblptrh	equ	0xFF7
  4572                           tblptrl	equ	0xFF6
  4573                           tablat	equ	0xFF5
  4574                           intcon	equ	0xFF2
  4575                           intcon2	equ	0xFF1
  4576                           postinc0	equ	0xFEE
  4577                           wreg	equ	0xFE8
  4578                           postdec2	equ	0xFDD
  4579                           fsr2h	equ	0xFDA
  4580                           fsr2l	equ	0xFD9
  4581                           status	equ	0xFD8
  4582                           
  4583 ;; *************** function _OSCILLATOR_Initialize *****************
  4584 ;; Defined at:
  4585 ;;		line 66 in file "mcc_generated_files/mcc.c"
  4586 ;; Parameters:    Size  Location     Type
  4587 ;;		None
  4588 ;; Auto vars:     Size  Location     Type
  4589 ;;		None
  4590 ;; Return value:  Size  Location     Type
  4591 ;;                  1    wreg      void 
  4592 ;; Registers used:
  4593 ;;		wreg, status,2
  4594 ;; Tracked objects:
  4595 ;;		On entry : 0/0
  4596 ;;		On exit  : 0/0
  4597 ;;		Unchanged: 0/0
  4598 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4599 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4600 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4601 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4602 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4603 ;;Total ram usage:        0 bytes
  4604 ;; Hardware stack levels used:    1
  4605 ;; Hardware stack levels required when called:    7
  4606 ;; This function calls:
  4607 ;;		Nothing
  4608 ;; This function is called by:
  4609 ;;		_SYSTEM_Initialize
  4610 ;; This function uses a non-reentrant model
  4611 ;;
  4612                           
  4613                           	psect	text10
  4614  009480                     __ptext10:
  4615                           	opt stack 0
  4616  009480                     _OSCILLATOR_Initialize:
  4617                           	opt stack 22
  4618                           
  4619                           ;mcc.c: 69: OSCCON = 0x70;
  4620                           
  4621                           ;incstack = 0
  4622  009480  0E70               	movlw	112
  4623  009482  6ED3               	movwf	4051,c	;volatile
  4624                           
  4625                           ;mcc.c: 71: OSCCON2 = 0x04;
  4626  009484  0E04               	movlw	4
  4627  009486  6ED2               	movwf	4050,c	;volatile
  4628                           
  4629                           ;mcc.c: 73: OSCTUNE = 0x00;
  4630  009488  0E00               	movlw	0
  4631  00948A  6E9B               	movwf	3995,c	;volatile
  4632  00948C  0012               	return		;funcret
  4633  00948E                     __end_of_OSCILLATOR_Initialize:
  4634                           	opt stack 0
  4635                           tblptru	equ	0xFF8
  4636                           tblptrh	equ	0xFF7
  4637                           tblptrl	equ	0xFF6
  4638                           tablat	equ	0xFF5
  4639                           intcon	equ	0xFF2
  4640                           intcon2	equ	0xFF1
  4641                           postinc0	equ	0xFEE
  4642                           wreg	equ	0xFE8
  4643                           postdec2	equ	0xFDD
  4644                           fsr2h	equ	0xFDA
  4645                           fsr2l	equ	0xFD9
  4646                           status	equ	0xFD8
  4647                           
  4648 ;; *************** function _LORAWAN_PlatformInit *****************
  4649 ;; Defined at:
  4650 ;;		line 73 in file "mcc_generated_files/LoRaWAN/lorawan_init.c"
  4651 ;; Parameters:    Size  Location     Type
  4652 ;;		None
  4653 ;; Auto vars:     Size  Location     Type
  4654 ;;		None
  4655 ;; Return value:  Size  Location     Type
  4656 ;;                  1    wreg      void 
  4657 ;; Registers used:
  4658 ;;		wreg, status,2, status,0, cstack
  4659 ;; Tracked objects:
  4660 ;;		On entry : 0/0
  4661 ;;		On exit  : 0/0
  4662 ;;		Unchanged: 0/0
  4663 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4664 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4665 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4666 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4667 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4668 ;;Total ram usage:        0 bytes
  4669 ;; Hardware stack levels used:    1
  4670 ;; Hardware stack levels required when called:    9
  4671 ;; This function calls:
  4672 ;;		_DIO0_ISR_Lora_Init
  4673 ;;		_DIO1_ISR_Lora_Init
  4674 ;;		_DIO2_ISR_Lora_Init
  4675 ;;		_DIO3_ISR_Lora_Init
  4676 ;;		_DIO4_ISR_Lora_Init
  4677 ;;		_DIO5_ISR_Lora_Init
  4678 ;;		_SystemTimerInit
  4679 ;;		_TMR_ISR_Lora_Init
  4680 ;; This function is called by:
  4681 ;;		_SYSTEM_Initialize
  4682 ;; This function uses a non-reentrant model
  4683 ;;
  4684                           
  4685                           	psect	text11
  4686  0090F4                     __ptext11:
  4687                           	opt stack 0
  4688  0090F4                     _LORAWAN_PlatformInit:
  4689                           	opt stack 20
  4690                           
  4691                           ;lorawan_init.c: 75: TMR_ISR_Lora_Init();
  4692                           
  4693                           ;incstack = 0
  4694  0090F4  EC11  F04A         	call	_TMR_ISR_Lora_Init	;wreg free
  4695                           
  4696                           ;lorawan_init.c: 76: DIO0_ISR_Lora_Init();
  4697  0090F8  EC29  F04A         	call	_DIO0_ISR_Lora_Init	;wreg free
  4698                           
  4699                           ;lorawan_init.c: 77: DIO1_ISR_Lora_Init();
  4700  0090FC  EC21  F04A         	call	_DIO1_ISR_Lora_Init	;wreg free
  4701                           
  4702                           ;lorawan_init.c: 78: DIO2_ISR_Lora_Init();
  4703  009100  EC19  F04A         	call	_DIO2_ISR_Lora_Init	;wreg free
  4704                           
  4705                           ;lorawan_init.c: 79: DIO3_ISR_Lora_Init();
  4706  009104  ECF7  F04A         	call	_DIO3_ISR_Lora_Init	;wreg free
  4707                           
  4708                           ;lorawan_init.c: 80: DIO4_ISR_Lora_Init();
  4709  009108  ECF6  F04A         	call	_DIO4_ISR_Lora_Init	;wreg free
  4710                           
  4711                           ;lorawan_init.c: 81: DIO5_ISR_Lora_Init();
  4712  00910C  ECF5  F04A         	call	_DIO5_ISR_Lora_Init	;wreg free
  4713                           
  4714                           ;lorawan_init.c: 82: SystemTimerInit();
  4715  009110  ECC3  F04A         	call	_SystemTimerInit	;wreg free
  4716  009114  0012               	return		;funcret
  4717  009116                     __end_of_LORAWAN_PlatformInit:
  4718                           	opt stack 0
  4719                           tblptru	equ	0xFF8
  4720                           tblptrh	equ	0xFF7
  4721                           tblptrl	equ	0xFF6
  4722                           tablat	equ	0xFF5
  4723                           intcon	equ	0xFF2
  4724                           intcon2	equ	0xFF1
  4725                           postinc0	equ	0xFEE
  4726                           wreg	equ	0xFE8
  4727                           postdec2	equ	0xFDD
  4728                           fsr2h	equ	0xFDA
  4729                           fsr2l	equ	0xFD9
  4730                           status	equ	0xFD8
  4731                           
  4732 ;; *************** function _TMR_ISR_Lora_Init *****************
  4733 ;; Defined at:
  4734 ;;		line 54 in file "mcc_generated_files/LoRaWAN/tmr_lora_addons.c"
  4735 ;; Parameters:    Size  Location     Type
  4736 ;;		None
  4737 ;; Auto vars:     Size  Location     Type
  4738 ;;		None
  4739 ;; Return value:  Size  Location     Type
  4740 ;;                  1    wreg      void 
  4741 ;; Registers used:
  4742 ;;		wreg, status,2, status,0, cstack
  4743 ;; Tracked objects:
  4744 ;;		On entry : 0/0
  4745 ;;		On exit  : 0/0
  4746 ;;		Unchanged: 0/0
  4747 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4748 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4749 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4750 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4751 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4752 ;;Total ram usage:        0 bytes
  4753 ;; Hardware stack levels used:    1
  4754 ;; Hardware stack levels required when called:    8
  4755 ;; This function calls:
  4756 ;;		_TMR1_SetInterruptHandler
  4757 ;; This function is called by:
  4758 ;;		_LORAWAN_PlatformInit
  4759 ;; This function uses a non-reentrant model
  4760 ;;
  4761                           
  4762                           	psect	text12
  4763  009422                     __ptext12:
  4764                           	opt stack 0
  4765  009422                     _TMR_ISR_Lora_Init:
  4766                           	opt stack 20
  4767                           
  4768                           ;tmr_lora_addons.c: 56: TMR1_SetInterruptHandler(TMR_ISR_lora);
  4769                           
  4770                           ;incstack = 0
  4771  009422  0E3E               	movlw	low _TMR_ISR_lora
  4772  009424  0100               	movlb	0	; () banked
  4773  009426  6F60               	movwf	TMR1_SetInterruptHandler@InterruptHandler& (0+255),b
  4774  009428  0E85               	movlw	high _TMR_ISR_lora
  4775  00942A  6F61               	movwf	(TMR1_SetInterruptHandler@InterruptHandler+1)& (0+255),b
  4776  00942C  EC5A  F04A         	call	_TMR1_SetInterruptHandler	;wreg free
  4777  009430  0012               	return		;funcret
  4778  009432                     __end_of_TMR_ISR_Lora_Init:
  4779                           	opt stack 0
  4780                           tblptru	equ	0xFF8
  4781                           tblptrh	equ	0xFF7
  4782                           tblptrl	equ	0xFF6
  4783                           tablat	equ	0xFF5
  4784                           intcon	equ	0xFF2
  4785                           intcon2	equ	0xFF1
  4786                           postinc0	equ	0xFEE
  4787                           wreg	equ	0xFE8
  4788                           postdec2	equ	0xFDD
  4789                           fsr2h	equ	0xFDA
  4790                           fsr2l	equ	0xFD9
  4791                           status	equ	0xFD8
  4792                           
  4793 ;; *************** function _TMR1_SetInterruptHandler *****************
  4794 ;; Defined at:
  4795 ;;		line 179 in file "mcc_generated_files/tmr1.c"
  4796 ;; Parameters:    Size  Location     Type
  4797 ;;  InterruptHan    2    0[BANK0 ] PTR FTN()void 
  4798 ;;		 -> TMR1_DefaultInterruptHandler(1), TMR_ISR_lora(1), 
  4799 ;; Auto vars:     Size  Location     Type
  4800 ;;		None
  4801 ;; Return value:  Size  Location     Type
  4802 ;;                  1    wreg      void 
  4803 ;; Registers used:
  4804 ;;		wreg, status,2, status,0
  4805 ;; Tracked objects:
  4806 ;;		On entry : 0/0
  4807 ;;		On exit  : 0/0
  4808 ;;		Unchanged: 0/0
  4809 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4810 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4811 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4812 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4813 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4814 ;;Total ram usage:        2 bytes
  4815 ;; Hardware stack levels used:    1
  4816 ;; Hardware stack levels required when called:    7
  4817 ;; This function calls:
  4818 ;;		Nothing
  4819 ;; This function is called by:
  4820 ;;		_TMR_ISR_Lora_Init
  4821 ;;		_TMR1_Initialize
  4822 ;; This function uses a non-reentrant model
  4823 ;;
  4824                           
  4825                           	psect	text13
  4826  0094B4                     __ptext13:
  4827                           	opt stack 0
  4828  0094B4                     _TMR1_SetInterruptHandler:
  4829                           	opt stack 21
  4830                           
  4831                           ;tmr1.c: 180: TMR1_InterruptHandler = InterruptHandler;
  4832                           
  4833                           ;incstack = 0
  4834  0094B4  C060  F3E5         	movff	TMR1_SetInterruptHandler@InterruptHandler,_TMR1_InterruptHandler
  4835  0094B8  C061  F3E6         	movff	TMR1_SetInterruptHandler@InterruptHandler+1,_TMR1_InterruptHandler+1
  4836  0094BC  0012               	return		;funcret
  4837  0094BE                     __end_of_TMR1_SetInterruptHandler:
  4838                           	opt stack 0
  4839                           tblptru	equ	0xFF8
  4840                           tblptrh	equ	0xFF7
  4841                           tblptrl	equ	0xFF6
  4842                           tablat	equ	0xFF5
  4843                           intcon	equ	0xFF2
  4844                           intcon2	equ	0xFF1
  4845                           postinc0	equ	0xFEE
  4846                           wreg	equ	0xFE8
  4847                           postdec2	equ	0xFDD
  4848                           fsr2h	equ	0xFDA
  4849                           fsr2l	equ	0xFD9
  4850                           status	equ	0xFD8
  4851                           
  4852 ;; *************** function _SystemTimerInit *****************
  4853 ;; Defined at:
  4854 ;;		line 135 in file "mcc_generated_files/LoRaWAN/sw_timer.c"
  4855 ;; Parameters:    Size  Location     Type
  4856 ;;		None
  4857 ;; Auto vars:     Size  Location     Type
  4858 ;;		None
  4859 ;; Return value:  Size  Location     Type
  4860 ;;                  1    wreg      void 
  4861 ;; Registers used:
  4862 ;;		wreg, status,2
  4863 ;; Tracked objects:
  4864 ;;		On entry : 0/0
  4865 ;;		On exit  : 0/0
  4866 ;;		Unchanged: 0/0
  4867 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4868 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4869 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4870 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4871 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4872 ;;Total ram usage:        0 bytes
  4873 ;; Hardware stack levels used:    1
  4874 ;; Hardware stack levels required when called:    7
  4875 ;; This function calls:
  4876 ;;		Nothing
  4877 ;; This function is called by:
  4878 ;;		_LORAWAN_PlatformInit
  4879 ;; This function uses a non-reentrant model
  4880 ;;
  4881                           
  4882                           	psect	text14
  4883  009586                     __ptext14:
  4884                           	opt stack 0
  4885  009586                     _SystemTimerInit:
  4886                           	opt stack 21
  4887                           
  4888                           ;sw_timer.c: 137: allocatedTimers = 0;
  4889                           
  4890                           ;incstack = 0
  4891  009586  0E00               	movlw	0
  4892  009588  0101               	movlb	1	; () banked
  4893  00958A  6F54               	movwf	_allocatedTimers& (0+255),b	;volatile
  4894                           
  4895                           ; BSR set to: 1
  4896  00958C  0012               	return		;funcret
  4897  00958E                     __end_of_SystemTimerInit:
  4898                           	opt stack 0
  4899                           tblptru	equ	0xFF8
  4900                           tblptrh	equ	0xFF7
  4901                           tblptrl	equ	0xFF6
  4902                           tablat	equ	0xFF5
  4903                           intcon	equ	0xFF2
  4904                           intcon2	equ	0xFF1
  4905                           postinc0	equ	0xFEE
  4906                           wreg	equ	0xFE8
  4907                           postdec2	equ	0xFDD
  4908                           fsr2h	equ	0xFDA
  4909                           fsr2l	equ	0xFD9
  4910                           status	equ	0xFD8
  4911                           
  4912 ;; *************** function _DIO5_ISR_Lora_Init *****************
  4913 ;; Defined at:
  4914 ;;		line 67 in file "mcc_generated_files/LoRaWAN/lorawan_init.c"
  4915 ;; Parameters:    Size  Location     Type
  4916 ;;		None
  4917 ;; Auto vars:     Size  Location     Type
  4918 ;;		None
  4919 ;; Return value:  Size  Location     Type
  4920 ;;                  1    wreg      void 
  4921 ;; Registers used:
  4922 ;;		None
  4923 ;; Tracked objects:
  4924 ;;		On entry : 0/0
  4925 ;;		On exit  : 0/0
  4926 ;;		Unchanged: 0/0
  4927 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4928 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4929 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4930 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4931 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4932 ;;Total ram usage:        0 bytes
  4933 ;; Hardware stack levels used:    1
  4934 ;; Hardware stack levels required when called:    7
  4935 ;; This function calls:
  4936 ;;		Nothing
  4937 ;; This function is called by:
  4938 ;;		_LORAWAN_PlatformInit
  4939 ;; This function uses a non-reentrant model
  4940 ;;
  4941                           
  4942                           	psect	text15
  4943  0095EA                     __ptext15:
  4944                           	opt stack 0
  4945  0095EA                     _DIO5_ISR_Lora_Init:
  4946                           	opt stack 21
  4947                           
  4948                           ; BSR set to: 1
  4949                           ;incstack = 0
  4950  0095EA  0012               	return		;funcret
  4951  0095EC                     __end_of_DIO5_ISR_Lora_Init:
  4952                           	opt stack 0
  4953                           tblptru	equ	0xFF8
  4954                           tblptrh	equ	0xFF7
  4955                           tblptrl	equ	0xFF6
  4956                           tablat	equ	0xFF5
  4957                           intcon	equ	0xFF2
  4958                           intcon2	equ	0xFF1
  4959                           postinc0	equ	0xFEE
  4960                           wreg	equ	0xFE8
  4961                           postdec2	equ	0xFDD
  4962                           fsr2h	equ	0xFDA
  4963                           fsr2l	equ	0xFD9
  4964                           status	equ	0xFD8
  4965                           
  4966 ;; *************** function _DIO4_ISR_Lora_Init *****************
  4967 ;; Defined at:
  4968 ;;		line 63 in file "mcc_generated_files/LoRaWAN/lorawan_init.c"
  4969 ;; Parameters:    Size  Location     Type
  4970 ;;		None
  4971 ;; Auto vars:     Size  Location     Type
  4972 ;;		None
  4973 ;; Return value:  Size  Location     Type
  4974 ;;                  1    wreg      void 
  4975 ;; Registers used:
  4976 ;;		None
  4977 ;; Tracked objects:
  4978 ;;		On entry : 0/0
  4979 ;;		On exit  : 0/0
  4980 ;;		Unchanged: 0/0
  4981 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4982 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4983 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4984 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4985 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4986 ;;Total ram usage:        0 bytes
  4987 ;; Hardware stack levels used:    1
  4988 ;; Hardware stack levels required when called:    7
  4989 ;; This function calls:
  4990 ;;		Nothing
  4991 ;; This function is called by:
  4992 ;;		_LORAWAN_PlatformInit
  4993 ;; This function uses a non-reentrant model
  4994 ;;
  4995                           
  4996                           	psect	text16
  4997  0095EC                     __ptext16:
  4998                           	opt stack 0
  4999  0095EC                     _DIO4_ISR_Lora_Init:
  5000                           	opt stack 21
  5001                           
  5002                           ;incstack = 0
  5003  0095EC  0012               	return		;funcret
  5004  0095EE                     __end_of_DIO4_ISR_Lora_Init:
  5005                           	opt stack 0
  5006                           tblptru	equ	0xFF8
  5007                           tblptrh	equ	0xFF7
  5008                           tblptrl	equ	0xFF6
  5009                           tablat	equ	0xFF5
  5010                           intcon	equ	0xFF2
  5011                           intcon2	equ	0xFF1
  5012                           postinc0	equ	0xFEE
  5013                           wreg	equ	0xFE8
  5014                           postdec2	equ	0xFDD
  5015                           fsr2h	equ	0xFDA
  5016                           fsr2l	equ	0xFD9
  5017                           status	equ	0xFD8
  5018                           
  5019 ;; *************** function _DIO3_ISR_Lora_Init *****************
  5020 ;; Defined at:
  5021 ;;		line 59 in file "mcc_generated_files/LoRaWAN/lorawan_init.c"
  5022 ;; Parameters:    Size  Location     Type
  5023 ;;		None
  5024 ;; Auto vars:     Size  Location     Type
  5025 ;;		None
  5026 ;; Return value:  Size  Location     Type
  5027 ;;                  1    wreg      void 
  5028 ;; Registers used:
  5029 ;;		None
  5030 ;; Tracked objects:
  5031 ;;		On entry : 0/0
  5032 ;;		On exit  : 0/0
  5033 ;;		Unchanged: 0/0
  5034 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5035 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5036 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5037 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5038 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5039 ;;Total ram usage:        0 bytes
  5040 ;; Hardware stack levels used:    1
  5041 ;; Hardware stack levels required when called:    7
  5042 ;; This function calls:
  5043 ;;		Nothing
  5044 ;; This function is called by:
  5045 ;;		_LORAWAN_PlatformInit
  5046 ;; This function uses a non-reentrant model
  5047 ;;
  5048                           
  5049                           	psect	text17
  5050  0095EE                     __ptext17:
  5051                           	opt stack 0
  5052  0095EE                     _DIO3_ISR_Lora_Init:
  5053                           	opt stack 21
  5054                           
  5055                           ;incstack = 0
  5056  0095EE  0012               	return		;funcret
  5057  0095F0                     __end_of_DIO3_ISR_Lora_Init:
  5058                           	opt stack 0
  5059                           tblptru	equ	0xFF8
  5060                           tblptrh	equ	0xFF7
  5061                           tblptrl	equ	0xFF6
  5062                           tablat	equ	0xFF5
  5063                           intcon	equ	0xFF2
  5064                           intcon2	equ	0xFF1
  5065                           postinc0	equ	0xFEE
  5066                           wreg	equ	0xFE8
  5067                           postdec2	equ	0xFDD
  5068                           fsr2h	equ	0xFDA
  5069                           fsr2l	equ	0xFD9
  5070                           status	equ	0xFD8
  5071                           
  5072 ;; *************** function _DIO2_ISR_Lora_Init *****************
  5073 ;; Defined at:
  5074 ;;		line 54 in file "mcc_generated_files/LoRaWAN/lorawan_init.c"
  5075 ;; Parameters:    Size  Location     Type
  5076 ;;		None
  5077 ;; Auto vars:     Size  Location     Type
  5078 ;;		None
  5079 ;; Return value:  Size  Location     Type
  5080 ;;                  1    wreg      void 
  5081 ;; Registers used:
  5082 ;;		wreg, status,2, status,0, cstack
  5083 ;; Tracked objects:
  5084 ;;		On entry : 0/0
  5085 ;;		On exit  : 0/0
  5086 ;;		Unchanged: 0/0
  5087 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5088 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5089 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5090 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5091 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5092 ;;Total ram usage:        0 bytes
  5093 ;; Hardware stack levels used:    1
  5094 ;; Hardware stack levels required when called:    8
  5095 ;; This function calls:
  5096 ;;		_IOCB4_SetInterruptHandler
  5097 ;; This function is called by:
  5098 ;;		_LORAWAN_PlatformInit
  5099 ;; This function uses a non-reentrant model
  5100 ;;
  5101                           
  5102                           	psect	text18
  5103  009432                     __ptext18:
  5104                           	opt stack 0
  5105  009432                     _DIO2_ISR_Lora_Init:
  5106                           	opt stack 20
  5107                           
  5108                           ;lorawan_init.c: 56: IOCB4_SetInterruptHandler(DIO2_ISR_Lora);
  5109                           
  5110                           ;incstack = 0
  5111  009432  0EB0               	movlw	low _DIO2_ISR_Lora
  5112  009434  0100               	movlb	0	; () banked
  5113  009436  6F60               	movwf	IOCB4_SetInterruptHandler@InterruptHandler& (0+255),b
  5114  009438  0E95               	movlw	high _DIO2_ISR_Lora
  5115  00943A  6F61               	movwf	(IOCB4_SetInterruptHandler@InterruptHandler+1)& (0+255),b
  5116  00943C  EC5F  F04A         	call	_IOCB4_SetInterruptHandler	;wreg free
  5117  009440  0012               	return		;funcret
  5118  009442                     __end_of_DIO2_ISR_Lora_Init:
  5119                           	opt stack 0
  5120                           tblptru	equ	0xFF8
  5121                           tblptrh	equ	0xFF7
  5122                           tblptrl	equ	0xFF6
  5123                           tablat	equ	0xFF5
  5124                           intcon	equ	0xFF2
  5125                           intcon2	equ	0xFF1
  5126                           postinc0	equ	0xFEE
  5127                           wreg	equ	0xFE8
  5128                           postdec2	equ	0xFDD
  5129                           fsr2h	equ	0xFDA
  5130                           fsr2l	equ	0xFD9
  5131                           status	equ	0xFD8
  5132                           
  5133 ;; *************** function _IOCB4_SetInterruptHandler *****************
  5134 ;; Defined at:
  5135 ;;		line 138 in file "mcc_generated_files/pin_manager.c"
  5136 ;; Parameters:    Size  Location     Type
  5137 ;;  InterruptHan    2    0[BANK0 ] PTR FTN()void 
  5138 ;;		 -> IOCB4_DefaultInterruptHandler(1), DIO2_ISR_Lora(1), 
  5139 ;; Auto vars:     Size  Location     Type
  5140 ;;		None
  5141 ;; Return value:  Size  Location     Type
  5142 ;;                  1    wreg      void 
  5143 ;; Registers used:
  5144 ;;		wreg, status,2, status,0
  5145 ;; Tracked objects:
  5146 ;;		On entry : 0/0
  5147 ;;		On exit  : 0/0
  5148 ;;		Unchanged: 0/0
  5149 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5150 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5151 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5152 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5153 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5154 ;;Total ram usage:        2 bytes
  5155 ;; Hardware stack levels used:    1
  5156 ;; Hardware stack levels required when called:    7
  5157 ;; This function calls:
  5158 ;;		Nothing
  5159 ;; This function is called by:
  5160 ;;		_DIO2_ISR_Lora_Init
  5161 ;;		_PIN_MANAGER_Initialize
  5162 ;; This function uses a non-reentrant model
  5163 ;;
  5164                           
  5165                           	psect	text19
  5166  0094BE                     __ptext19:
  5167                           	opt stack 0
  5168  0094BE                     _IOCB4_SetInterruptHandler:
  5169                           	opt stack 21
  5170                           
  5171                           ;pin_manager.c: 139: IOCB4_InterruptHandler = InterruptHandler;
  5172                           
  5173                           ;incstack = 0
  5174  0094BE  C060  F3ED         	movff	IOCB4_SetInterruptHandler@InterruptHandler,_IOCB4_InterruptHandler
  5175  0094C2  C061  F3EE         	movff	IOCB4_SetInterruptHandler@InterruptHandler+1,_IOCB4_InterruptHandler+1
  5176  0094C6  0012               	return		;funcret
  5177  0094C8                     __end_of_IOCB4_SetInterruptHandler:
  5178                           	opt stack 0
  5179                           tblptru	equ	0xFF8
  5180                           tblptrh	equ	0xFF7
  5181                           tblptrl	equ	0xFF6
  5182                           tablat	equ	0xFF5
  5183                           intcon	equ	0xFF2
  5184                           intcon2	equ	0xFF1
  5185                           postinc0	equ	0xFEE
  5186                           wreg	equ	0xFE8
  5187                           postdec2	equ	0xFDD
  5188                           fsr2h	equ	0xFDA
  5189                           fsr2l	equ	0xFD9
  5190                           status	equ	0xFD8
  5191                           
  5192 ;; *************** function _DIO1_ISR_Lora_Init *****************
  5193 ;; Defined at:
  5194 ;;		line 49 in file "mcc_generated_files/LoRaWAN/lorawan_init.c"
  5195 ;; Parameters:    Size  Location     Type
  5196 ;;		None
  5197 ;; Auto vars:     Size  Location     Type
  5198 ;;		None
  5199 ;; Return value:  Size  Location     Type
  5200 ;;                  1    wreg      void 
  5201 ;; Registers used:
  5202 ;;		wreg, status,2, status,0, cstack
  5203 ;; Tracked objects:
  5204 ;;		On entry : 0/0
  5205 ;;		On exit  : 0/0
  5206 ;;		Unchanged: 0/0
  5207 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5208 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5209 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5210 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5211 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5212 ;;Total ram usage:        0 bytes
  5213 ;; Hardware stack levels used:    1
  5214 ;; Hardware stack levels required when called:    8
  5215 ;; This function calls:
  5216 ;;		_INT2_SetInterruptHandler
  5217 ;; This function is called by:
  5218 ;;		_LORAWAN_PlatformInit
  5219 ;; This function uses a non-reentrant model
  5220 ;;
  5221                           
  5222                           	psect	text20
  5223  009442                     __ptext20:
  5224                           	opt stack 0
  5225  009442                     _DIO1_ISR_Lora_Init:
  5226                           	opt stack 20
  5227                           
  5228                           ;lorawan_init.c: 51: INT2_SetInterruptHandler(DIO1_ISR_Lora);
  5229                           
  5230                           ;incstack = 0
  5231  009442  0EB6               	movlw	low _DIO1_ISR_Lora
  5232  009444  0100               	movlb	0	; () banked
  5233  009446  6F60               	movwf	INT2_SetInterruptHandler@InterruptHandler& (0+255),b
  5234  009448  0E95               	movlw	high _DIO1_ISR_Lora
  5235  00944A  6F61               	movwf	(INT2_SetInterruptHandler@InterruptHandler+1)& (0+255),b
  5236  00944C  EC64  F04A         	call	_INT2_SetInterruptHandler	;wreg free
  5237  009450  0012               	return		;funcret
  5238  009452                     __end_of_DIO1_ISR_Lora_Init:
  5239                           	opt stack 0
  5240                           tblptru	equ	0xFF8
  5241                           tblptrh	equ	0xFF7
  5242                           tblptrl	equ	0xFF6
  5243                           tablat	equ	0xFF5
  5244                           intcon	equ	0xFF2
  5245                           intcon2	equ	0xFF1
  5246                           postinc0	equ	0xFEE
  5247                           wreg	equ	0xFE8
  5248                           postdec2	equ	0xFDD
  5249                           fsr2h	equ	0xFDA
  5250                           fsr2l	equ	0xFD9
  5251                           status	equ	0xFD8
  5252                           
  5253 ;; *************** function _DIO0_ISR_Lora_Init *****************
  5254 ;; Defined at:
  5255 ;;		line 44 in file "mcc_generated_files/LoRaWAN/lorawan_init.c"
  5256 ;; Parameters:    Size  Location     Type
  5257 ;;		None
  5258 ;; Auto vars:     Size  Location     Type
  5259 ;;		None
  5260 ;; Return value:  Size  Location     Type
  5261 ;;                  1    wreg      void 
  5262 ;; Registers used:
  5263 ;;		wreg, status,2, status,0, cstack
  5264 ;; Tracked objects:
  5265 ;;		On entry : 0/0
  5266 ;;		On exit  : 0/0
  5267 ;;		Unchanged: 0/0
  5268 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5269 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5270 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5271 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5272 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5273 ;;Total ram usage:        0 bytes
  5274 ;; Hardware stack levels used:    1
  5275 ;; Hardware stack levels required when called:    8
  5276 ;; This function calls:
  5277 ;;		_INT1_SetInterruptHandler
  5278 ;; This function is called by:
  5279 ;;		_LORAWAN_PlatformInit
  5280 ;; This function uses a non-reentrant model
  5281 ;;
  5282                           
  5283                           	psect	text21
  5284  009452                     __ptext21:
  5285                           	opt stack 0
  5286  009452                     _DIO0_ISR_Lora_Init:
  5287                           	opt stack 20
  5288                           
  5289                           ;lorawan_init.c: 46: INT1_SetInterruptHandler(DIO0_ISR_Lora);
  5290                           
  5291                           ;incstack = 0
  5292  009452  0EBC               	movlw	low _DIO0_ISR_Lora
  5293  009454  0100               	movlb	0	; () banked
  5294  009456  6F60               	movwf	INT1_SetInterruptHandler@InterruptHandler& (0+255),b
  5295  009458  0E95               	movlw	high _DIO0_ISR_Lora
  5296  00945A  6F61               	movwf	(INT1_SetInterruptHandler@InterruptHandler+1)& (0+255),b
  5297  00945C  EC69  F04A         	call	_INT1_SetInterruptHandler	;wreg free
  5298  009460  0012               	return		;funcret
  5299  009462                     __end_of_DIO0_ISR_Lora_Init:
  5300                           	opt stack 0
  5301                           tblptru	equ	0xFF8
  5302                           tblptrh	equ	0xFF7
  5303                           tblptrl	equ	0xFF6
  5304                           tablat	equ	0xFF5
  5305                           intcon	equ	0xFF2
  5306                           intcon2	equ	0xFF1
  5307                           postinc0	equ	0xFEE
  5308                           wreg	equ	0xFE8
  5309                           postdec2	equ	0xFDD
  5310                           fsr2h	equ	0xFDA
  5311                           fsr2l	equ	0xFD9
  5312                           status	equ	0xFD8
  5313                           
  5314 ;; *************** function _INTERRUPT_Initialize *****************
  5315 ;; Defined at:
  5316 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
  5317 ;; Parameters:    Size  Location     Type
  5318 ;;		None
  5319 ;; Auto vars:     Size  Location     Type
  5320 ;;		None
  5321 ;; Return value:  Size  Location     Type
  5322 ;;                  1    wreg      void 
  5323 ;; Registers used:
  5324 ;;		None
  5325 ;; Tracked objects:
  5326 ;;		On entry : 0/0
  5327 ;;		On exit  : 0/0
  5328 ;;		Unchanged: 0/0
  5329 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5330 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5331 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5332 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5333 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5334 ;;Total ram usage:        0 bytes
  5335 ;; Hardware stack levels used:    1
  5336 ;; Hardware stack levels required when called:    7
  5337 ;; This function calls:
  5338 ;;		Nothing
  5339 ;; This function is called by:
  5340 ;;		_SYSTEM_Initialize
  5341 ;; This function uses a non-reentrant model
  5342 ;;
  5343                           
  5344                           	psect	text22
  5345  0095D6                     __ptext22:
  5346                           	opt stack 0
  5347  0095D6                     _INTERRUPT_Initialize:
  5348                           	opt stack 22
  5349                           
  5350                           ;interrupt_manager.c: 55: RCONbits.IPEN = 0;
  5351                           
  5352                           ;incstack = 0
  5353  0095D6  9ED0               	bcf	4048,7,c	;volatile
  5354  0095D8  0012               	return		;funcret
  5355  0095DA                     __end_of_INTERRUPT_Initialize:
  5356                           	opt stack 0
  5357                           tblptru	equ	0xFF8
  5358                           tblptrh	equ	0xFF7
  5359                           tblptrl	equ	0xFF6
  5360                           tablat	equ	0xFF5
  5361                           intcon	equ	0xFF2
  5362                           intcon2	equ	0xFF1
  5363                           postinc0	equ	0xFEE
  5364                           wreg	equ	0xFE8
  5365                           postdec2	equ	0xFDD
  5366                           fsr2h	equ	0xFDA
  5367                           fsr2l	equ	0xFD9
  5368                           status	equ	0xFD8
  5369                           
  5370 ;; *************** function _EXT_INT_Initialize *****************
  5371 ;; Defined at:
  5372 ;;		line 86 in file "mcc_generated_files/ext_int.c"
  5373 ;; Parameters:    Size  Location     Type
  5374 ;;		None
  5375 ;; Auto vars:     Size  Location     Type
  5376 ;;		None
  5377 ;; Return value:  Size  Location     Type
  5378 ;;                  1    wreg      void 
  5379 ;; Registers used:
  5380 ;;		wreg, status,2, status,0, cstack
  5381 ;; Tracked objects:
  5382 ;;		On entry : 0/0
  5383 ;;		On exit  : 0/0
  5384 ;;		Unchanged: 0/0
  5385 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5386 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5387 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5388 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5389 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5390 ;;Total ram usage:        0 bytes
  5391 ;; Hardware stack levels used:    1
  5392 ;; Hardware stack levels required when called:    8
  5393 ;; This function calls:
  5394 ;;		_INT1_SetInterruptHandler
  5395 ;;		_INT2_SetInterruptHandler
  5396 ;; This function is called by:
  5397 ;;		_SYSTEM_Initialize
  5398 ;; This function uses a non-reentrant model
  5399 ;;
  5400                           
  5401                           	psect	text23
  5402  008EEE                     __ptext23:
  5403                           	opt stack 0
  5404  008EEE                     _EXT_INT_Initialize:
  5405                           	opt stack 21
  5406                           
  5407                           ;ext_int.c: 91: (INTCON3bits.INT1IF = 0);
  5408                           
  5409                           ;incstack = 0
  5410  008EEE  90F0               	bcf	intcon3,0,c	;volatile
  5411                           
  5412                           ;ext_int.c: 92: (INTCON2bits.INTEDG1 = 1);
  5413  008EF0  8AF1               	bsf	intcon2,5,c	;volatile
  5414                           
  5415                           ;ext_int.c: 94: INT1_SetInterruptHandler(INT1_DefaultInterruptHandler);
  5416  008EF2  0EFA               	movlw	low _INT1_DefaultInterruptHandler
  5417  008EF4  0100               	movlb	0	; () banked
  5418  008EF6  6F60               	movwf	INT1_SetInterruptHandler@InterruptHandler& (0+255),b
  5419  008EF8  0E95               	movlw	high _INT1_DefaultInterruptHandler
  5420  008EFA  6F61               	movwf	(INT1_SetInterruptHandler@InterruptHandler+1)& (0+255),b
  5421  008EFC  EC69  F04A         	call	_INT1_SetInterruptHandler	;wreg free
  5422                           
  5423                           ;ext_int.c: 95: (INTCON3bits.INT1IE = 1);
  5424  008F00  86F0               	bsf	intcon3,3,c	;volatile
  5425                           
  5426                           ;ext_int.c: 100: (INTCON3bits.INT2IF = 0);
  5427  008F02  92F0               	bcf	intcon3,1,c	;volatile
  5428                           
  5429                           ;ext_int.c: 101: (INTCON2bits.INTEDG2 = 1);
  5430  008F04  88F1               	bsf	intcon2,4,c	;volatile
  5431                           
  5432                           ;ext_int.c: 103: INT2_SetInterruptHandler(INT2_DefaultInterruptHandler);
  5433  008F06  0EF8               	movlw	low _INT2_DefaultInterruptHandler
  5434  008F08  0100               	movlb	0	; () banked
  5435  008F0A  6F60               	movwf	INT2_SetInterruptHandler@InterruptHandler& (0+255),b
  5436  008F0C  0E95               	movlw	high _INT2_DefaultInterruptHandler
  5437  008F0E  6F61               	movwf	(INT2_SetInterruptHandler@InterruptHandler+1)& (0+255),b
  5438  008F10  EC64  F04A         	call	_INT2_SetInterruptHandler	;wreg free
  5439                           
  5440                           ;ext_int.c: 104: (INTCON3bits.INT2IE = 1);
  5441  008F14  88F0               	bsf	intcon3,4,c	;volatile
  5442  008F16  0012               	return		;funcret
  5443  008F18                     __end_of_EXT_INT_Initialize:
  5444                           	opt stack 0
  5445                           tblptru	equ	0xFF8
  5446                           tblptrh	equ	0xFF7
  5447                           tblptrl	equ	0xFF6
  5448                           tablat	equ	0xFF5
  5449                           intcon	equ	0xFF2
  5450                           intcon2	equ	0xFF1
  5451                           intcon3	equ	0xFF0
  5452                           postinc0	equ	0xFEE
  5453                           wreg	equ	0xFE8
  5454                           postdec2	equ	0xFDD
  5455                           fsr2h	equ	0xFDA
  5456                           fsr2l	equ	0xFD9
  5457                           status	equ	0xFD8
  5458                           
  5459 ;; *************** function _INT2_SetInterruptHandler *****************
  5460 ;; Defined at:
  5461 ;;		line 77 in file "mcc_generated_files/ext_int.c"
  5462 ;; Parameters:    Size  Location     Type
  5463 ;;  InterruptHan    2    0[BANK0 ] PTR FTN()void 
  5464 ;;		 -> INT2_DefaultInterruptHandler(1), DIO1_ISR_Lora(1), 
  5465 ;; Auto vars:     Size  Location     Type
  5466 ;;		None
  5467 ;; Return value:  Size  Location     Type
  5468 ;;                  1    wreg      void 
  5469 ;; Registers used:
  5470 ;;		wreg, status,2, status,0
  5471 ;; Tracked objects:
  5472 ;;		On entry : 0/0
  5473 ;;		On exit  : 0/0
  5474 ;;		Unchanged: 0/0
  5475 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5476 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5477 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5478 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5479 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5480 ;;Total ram usage:        2 bytes
  5481 ;; Hardware stack levels used:    1
  5482 ;; Hardware stack levels required when called:    7
  5483 ;; This function calls:
  5484 ;;		Nothing
  5485 ;; This function is called by:
  5486 ;;		_DIO1_ISR_Lora_Init
  5487 ;;		_EXT_INT_Initialize
  5488 ;; This function uses a non-reentrant model
  5489 ;;
  5490                           
  5491                           	psect	text24
  5492  0094C8                     __ptext24:
  5493                           	opt stack 0
  5494  0094C8                     _INT2_SetInterruptHandler:
  5495                           	opt stack 20
  5496                           
  5497                           ;ext_int.c: 78: INT2_InterruptHandler = InterruptHandler;
  5498                           
  5499                           ;incstack = 0
  5500  0094C8  C060  F3F3         	movff	INT2_SetInterruptHandler@InterruptHandler,_INT2_InterruptHandler
  5501  0094CC  C061  F3F4         	movff	INT2_SetInterruptHandler@InterruptHandler+1,_INT2_InterruptHandler+1
  5502  0094D0  0012               	return		;funcret
  5503  0094D2                     __end_of_INT2_SetInterruptHandler:
  5504                           	opt stack 0
  5505                           tblptru	equ	0xFF8
  5506                           tblptrh	equ	0xFF7
  5507                           tblptrl	equ	0xFF6
  5508                           tablat	equ	0xFF5
  5509                           intcon	equ	0xFF2
  5510                           intcon2	equ	0xFF1
  5511                           intcon3	equ	0xFF0
  5512                           postinc0	equ	0xFEE
  5513                           wreg	equ	0xFE8
  5514                           postdec2	equ	0xFDD
  5515                           fsr2h	equ	0xFDA
  5516                           fsr2l	equ	0xFD9
  5517                           status	equ	0xFD8
  5518                           
  5519 ;; *************** function _INT1_SetInterruptHandler *****************
  5520 ;; Defined at:
  5521 ;;		line 51 in file "mcc_generated_files/ext_int.c"
  5522 ;; Parameters:    Size  Location     Type
  5523 ;;  InterruptHan    2    0[BANK0 ] PTR FTN()void 
  5524 ;;		 -> INT1_DefaultInterruptHandler(1), DIO0_ISR_Lora(1), 
  5525 ;; Auto vars:     Size  Location     Type
  5526 ;;		None
  5527 ;; Return value:  Size  Location     Type
  5528 ;;                  1    wreg      void 
  5529 ;; Registers used:
  5530 ;;		wreg, status,2, status,0
  5531 ;; Tracked objects:
  5532 ;;		On entry : 0/0
  5533 ;;		On exit  : 0/0
  5534 ;;		Unchanged: 0/0
  5535 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5536 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5537 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5538 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5539 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5540 ;;Total ram usage:        2 bytes
  5541 ;; Hardware stack levels used:    1
  5542 ;; Hardware stack levels required when called:    7
  5543 ;; This function calls:
  5544 ;;		Nothing
  5545 ;; This function is called by:
  5546 ;;		_DIO0_ISR_Lora_Init
  5547 ;;		_EXT_INT_Initialize
  5548 ;; This function uses a non-reentrant model
  5549 ;;
  5550                           
  5551                           	psect	text25
  5552  0094D2                     __ptext25:
  5553                           	opt stack 0
  5554  0094D2                     _INT1_SetInterruptHandler:
  5555                           	opt stack 20
  5556                           
  5557                           ;ext_int.c: 52: INT1_InterruptHandler = InterruptHandler;
  5558                           
  5559                           ;incstack = 0
  5560  0094D2  C060  F3F5         	movff	INT1_SetInterruptHandler@InterruptHandler,_INT1_InterruptHandler
  5561  0094D6  C061  F3F6         	movff	INT1_SetInterruptHandler@InterruptHandler+1,_INT1_InterruptHandler+1
  5562  0094DA  0012               	return		;funcret
  5563  0094DC                     __end_of_INT1_SetInterruptHandler:
  5564                           	opt stack 0
  5565                           tblptru	equ	0xFF8
  5566                           tblptrh	equ	0xFF7
  5567                           tblptrl	equ	0xFF6
  5568                           tablat	equ	0xFF5
  5569                           intcon	equ	0xFF2
  5570                           intcon2	equ	0xFF1
  5571                           intcon3	equ	0xFF0
  5572                           postinc0	equ	0xFEE
  5573                           wreg	equ	0xFE8
  5574                           postdec2	equ	0xFDD
  5575                           fsr2h	equ	0xFDA
  5576                           fsr2l	equ	0xFD9
  5577                           status	equ	0xFD8
  5578                           
  5579 ;; *************** function _EUSART1_Initialize *****************
  5580 ;; Defined at:
  5581 ;;		line 115 in file "mcc_generated_files/eusart1.c"
  5582 ;; Parameters:    Size  Location     Type
  5583 ;;		None
  5584 ;; Auto vars:     Size  Location     Type
  5585 ;;		None
  5586 ;; Return value:  Size  Location     Type
  5587 ;;                  1    wreg      void 
  5588 ;; Registers used:
  5589 ;;		wreg, status,2, status,0, cstack
  5590 ;; Tracked objects:
  5591 ;;		On entry : 0/0
  5592 ;;		On exit  : 0/0
  5593 ;;		Unchanged: 0/0
  5594 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5595 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5596 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5597 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5598 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5599 ;;Total ram usage:        0 bytes
  5600 ;; Hardware stack levels used:    1
  5601 ;; Hardware stack levels required when called:    8
  5602 ;; This function calls:
  5603 ;;		_EUSART1_SetErrorHandler
  5604 ;;		_EUSART1_SetFramingErrorHandler
  5605 ;;		_EUSART1_SetOverrunErrorHandler
  5606 ;;		_EUSART1_SetRxInterruptHandler
  5607 ;;		_EUSART1_SetTxInterruptHandler
  5608 ;; This function is called by:
  5609 ;;		_SYSTEM_Initialize
  5610 ;; This function uses a non-reentrant model
  5611 ;;
  5612                           
  5613                           	psect	text26
  5614  007B1A                     __ptext26:
  5615                           	opt stack 0
  5616  007B1A                     _EUSART1_Initialize:
  5617                           	opt stack 21
  5618                           
  5619                           ;eusart1.c: 118: PIE1bits.RC1IE = 0;
  5620                           
  5621                           ;incstack = 0
  5622  007B1A  9A9D               	bcf	3997,5,c	;volatile
  5623                           
  5624                           ;eusart1.c: 119: EUSART1_SetRxInterruptHandler(EUSART1_Receive_ISR);
  5625  007B1C  0EBC               	movlw	low _EUSART1_Receive_ISR
  5626  007B1E  0100               	movlb	0	; () banked
  5627  007B20  6F60               	movwf	EUSART1_SetRxInterruptHandler@interruptHandler& (0+255),b
  5628  007B22  0E3D               	movlw	high _EUSART1_Receive_ISR
  5629  007B24  6F61               	movwf	(EUSART1_SetRxInterruptHandler@interruptHandler+1)& (0+255),b
  5630  007B26  EC73  F04A         	call	_EUSART1_SetRxInterruptHandler	;wreg free
  5631                           
  5632                           ;eusart1.c: 120: PIE1bits.TX1IE = 0;
  5633  007B2A  989D               	bcf	3997,4,c	;volatile
  5634                           
  5635                           ;eusart1.c: 121: EUSART1_SetTxInterruptHandler(EUSART1_Transmit_ISR);
  5636  007B2C  0EDC               	movlw	low _EUSART1_Transmit_ISR
  5637  007B2E  0100               	movlb	0	; () banked
  5638  007B30  6F60               	movwf	EUSART1_SetTxInterruptHandler@interruptHandler& (0+255),b
  5639  007B32  0E8D               	movlw	high _EUSART1_Transmit_ISR
  5640  007B34  6F61               	movwf	(EUSART1_SetTxInterruptHandler@interruptHandler+1)& (0+255),b
  5641  007B36  EC6E  F04A         	call	_EUSART1_SetTxInterruptHandler	;wreg free
  5642                           
  5643                           ;eusart1.c: 125: BAUDCON1 = 0x08;
  5644  007B3A  0E08               	movlw	8
  5645  007B3C  6EB8               	movwf	4024,c	;volatile
  5646                           
  5647                           ;eusart1.c: 128: RCSTA1 = 0x90;
  5648  007B3E  0E90               	movlw	144
  5649  007B40  6EAB               	movwf	4011,c	;volatile
  5650                           
  5651                           ;eusart1.c: 131: TXSTA1 = 0x24;
  5652  007B42  0E24               	movlw	36
  5653  007B44  6EAC               	movwf	4012,c	;volatile
  5654                           
  5655                           ;eusart1.c: 139: SPBRG1 = 0xA0;
  5656  007B46  0EA0               	movlw	160
  5657  007B48  6EAF               	movwf	4015,c	;volatile
  5658                           
  5659                           ;eusart1.c: 140: SPBRGH1 = 0x01;
  5660  007B4A  0E01               	movlw	1
  5661  007B4C  6EB0               	movwf	4016,c	;volatile
  5662                           
  5663                           ;eusart1.c: 142: EUSART1_SetFramingErrorHandler(EUSART1_DefaultFramingErrorHandler);
  5664  007B4E  0EFC               	movlw	low _EUSART1_DefaultFramingErrorHandler
  5665  007B50  0100               	movlb	0	; () banked
  5666  007B52  6F60               	movwf	EUSART1_SetFramingErrorHandler@interruptHandler& (0+255),b
  5667  007B54  0E95               	movlw	high _EUSART1_DefaultFramingErrorHandler
  5668  007B56  6F61               	movwf	(EUSART1_SetFramingErrorHandler@interruptHandler+1)& (0+255),b
  5669  007B58  EC7D  F04A         	call	_EUSART1_SetFramingErrorHandler	;wreg free
  5670                           
  5671                           ;eusart1.c: 143: EUSART1_SetOverrunErrorHandler(EUSART1_DefaultOverrunErrorHandler);
  5672  007B5C  0EC2               	movlw	low _EUSART1_DefaultOverrunErrorHandler
  5673  007B5E  0100               	movlb	0	; () banked
  5674  007B60  6F60               	movwf	EUSART1_SetOverrunErrorHandler@interruptHandler& (0+255),b
  5675  007B62  0E95               	movlw	high _EUSART1_DefaultOverrunErrorHandler
  5676  007B64  6F61               	movwf	(EUSART1_SetOverrunErrorHandler@interruptHandler+1)& (0+255),b
  5677  007B66  EC78  F04A         	call	_EUSART1_SetOverrunErrorHandler	;wreg free
  5678                           
  5679                           ;eusart1.c: 144: EUSART1_SetErrorHandler(EUSART1_DefaultErrorHandler);
  5680  007B6A  0EC8               	movlw	low _EUSART1_DefaultErrorHandler
  5681  007B6C  0100               	movlb	0	; () banked
  5682  007B6E  6F60               	movwf	EUSART1_SetErrorHandler@interruptHandler& (0+255),b
  5683  007B70  0E95               	movlw	high _EUSART1_DefaultErrorHandler
  5684  007B72  6F61               	movwf	(EUSART1_SetErrorHandler@interruptHandler+1)& (0+255),b
  5685  007B74  EC82  F04A         	call	_EUSART1_SetErrorHandler	;wreg free
  5686                           
  5687                           ;eusart1.c: 146: eusart1RxLastError.status = 0;
  5688  007B78  0E00               	movlw	0
  5689  007B7A  0101               	movlb	1	; () banked
  5690  007B7C  6F4E               	movwf	_eusart1RxLastError& (0+255),b	;volatile
  5691                           
  5692                           ;eusart1.c: 149: eusart1TxHead = 0;
  5693  007B7E  0E00               	movlw	0
  5694  007B80  6E51               	movwf	_eusart1TxHead,c	;volatile
  5695                           
  5696                           ;eusart1.c: 150: eusart1TxTail = 0;
  5697  007B82  0E00               	movlw	0
  5698  007B84  6F52               	movwf	_eusart1TxTail& (0+255),b	;volatile
  5699                           
  5700                           ;eusart1.c: 151: eusart1TxBufferRemaining = sizeof(eusart1TxBuffer);
  5701  007B86  0E01               	movlw	1
  5702  007B88  6FFF               	movwf	_eusart1TxBufferRemaining& (0+255),b	;volatile
  5703                           
  5704                           ;eusart1.c: 153: eusart1RxHead = 0;
  5705  007B8A  0E00               	movlw	0
  5706  007B8C  6E50               	movwf	_eusart1RxHead,c	;volatile
  5707                           
  5708                           ;eusart1.c: 154: eusart1RxTail = 0;
  5709  007B8E  0E00               	movlw	0
  5710  007B90  6E4F               	movwf	_eusart1RxTail,c	;volatile
  5711                           
  5712                           ;eusart1.c: 155: eusart1RxCount = 0;
  5713  007B92  0E00               	movlw	0
  5714  007B94  6F4F               	movwf	_eusart1RxCount& (0+255),b	;volatile
  5715                           
  5716                           ; BSR set to: 1
  5717                           ;eusart1.c: 158: PIE1bits.RC1IE = 1;
  5718  007B96  8A9D               	bsf	3997,5,c	;volatile
  5719                           
  5720                           ; BSR set to: 1
  5721  007B98  0012               	return		;funcret
  5722  007B9A                     __end_of_EUSART1_Initialize:
  5723                           	opt stack 0
  5724                           tblptru	equ	0xFF8
  5725                           tblptrh	equ	0xFF7
  5726                           tblptrl	equ	0xFF6
  5727                           tablat	equ	0xFF5
  5728                           intcon	equ	0xFF2
  5729                           intcon2	equ	0xFF1
  5730                           intcon3	equ	0xFF0
  5731                           postinc0	equ	0xFEE
  5732                           wreg	equ	0xFE8
  5733                           postdec2	equ	0xFDD
  5734                           fsr2h	equ	0xFDA
  5735                           fsr2l	equ	0xFD9
  5736                           status	equ	0xFD8
  5737                           
  5738 ;; *************** function _EUSART1_SetTxInterruptHandler *****************
  5739 ;; Defined at:
  5740 ;;		line 333 in file "mcc_generated_files/eusart1.c"
  5741 ;; Parameters:    Size  Location     Type
  5742 ;;  interruptHan    2    0[BANK0 ] PTR FTN()void 
  5743 ;;		 -> EUSART1_Transmit_ISR(1), 
  5744 ;; Auto vars:     Size  Location     Type
  5745 ;;		None
  5746 ;; Return value:  Size  Location     Type
  5747 ;;                  1    wreg      void 
  5748 ;; Registers used:
  5749 ;;		wreg, status,2, status,0
  5750 ;; Tracked objects:
  5751 ;;		On entry : 0/0
  5752 ;;		On exit  : 0/0
  5753 ;;		Unchanged: 0/0
  5754 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5755 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5756 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5757 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5758 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5759 ;;Total ram usage:        2 bytes
  5760 ;; Hardware stack levels used:    1
  5761 ;; Hardware stack levels required when called:    7
  5762 ;; This function calls:
  5763 ;;		Nothing
  5764 ;; This function is called by:
  5765 ;;		_EUSART1_Initialize
  5766 ;; This function uses a non-reentrant model
  5767 ;;
  5768                           
  5769                           	psect	text27
  5770  0094DC                     __ptext27:
  5771                           	opt stack 0
  5772  0094DC                     _EUSART1_SetTxInterruptHandler:
  5773                           	opt stack 21
  5774                           
  5775                           ;eusart1.c: 334: EUSART1_TxDefaultInterruptHandler = interruptHandler;
  5776                           
  5777                           ; BSR set to: 1
  5778                           ;incstack = 0
  5779  0094DC  C060  F3F1         	movff	EUSART1_SetTxInterruptHandler@interruptHandler,_EUSART1_TxDefaultInterruptHandler
  5780  0094E0  C061  F3F2         	movff	EUSART1_SetTxInterruptHandler@interruptHandler+1,_EUSART1_TxDefaultInterruptHandl
      +                          er+1
  5781  0094E4  0012               	return		;funcret
  5782  0094E6                     __end_of_EUSART1_SetTxInterruptHandler:
  5783                           	opt stack 0
  5784                           tblptru	equ	0xFF8
  5785                           tblptrh	equ	0xFF7
  5786                           tblptrl	equ	0xFF6
  5787                           tablat	equ	0xFF5
  5788                           intcon	equ	0xFF2
  5789                           intcon2	equ	0xFF1
  5790                           intcon3	equ	0xFF0
  5791                           postinc0	equ	0xFEE
  5792                           wreg	equ	0xFE8
  5793                           postdec2	equ	0xFDD
  5794                           fsr2h	equ	0xFDA
  5795                           fsr2l	equ	0xFD9
  5796                           status	equ	0xFD8
  5797                           
  5798 ;; *************** function _EUSART1_SetRxInterruptHandler *****************
  5799 ;; Defined at:
  5800 ;;		line 337 in file "mcc_generated_files/eusart1.c"
  5801 ;; Parameters:    Size  Location     Type
  5802 ;;  interruptHan    2    0[BANK0 ] PTR FTN()void 
  5803 ;;		 -> EUSART1_Receive_ISR(1), 
  5804 ;; Auto vars:     Size  Location     Type
  5805 ;;		None
  5806 ;; Return value:  Size  Location     Type
  5807 ;;                  1    wreg      void 
  5808 ;; Registers used:
  5809 ;;		wreg, status,2, status,0
  5810 ;; Tracked objects:
  5811 ;;		On entry : 0/0
  5812 ;;		On exit  : 0/0
  5813 ;;		Unchanged: 0/0
  5814 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5815 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5816 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5817 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5818 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5819 ;;Total ram usage:        2 bytes
  5820 ;; Hardware stack levels used:    1
  5821 ;; Hardware stack levels required when called:    7
  5822 ;; This function calls:
  5823 ;;		Nothing
  5824 ;; This function is called by:
  5825 ;;		_EUSART1_Initialize
  5826 ;; This function uses a non-reentrant model
  5827 ;;
  5828                           
  5829                           	psect	text28
  5830  0094E6                     __ptext28:
  5831                           	opt stack 0
  5832  0094E6                     _EUSART1_SetRxInterruptHandler:
  5833                           	opt stack 21
  5834                           
  5835                           ;eusart1.c: 338: EUSART1_RxDefaultInterruptHandler = interruptHandler;
  5836                           
  5837                           ;incstack = 0
  5838  0094E6  C060  F3EF         	movff	EUSART1_SetRxInterruptHandler@interruptHandler,_EUSART1_RxDefaultInterruptHandler
  5839  0094EA  C061  F3F0         	movff	EUSART1_SetRxInterruptHandler@interruptHandler+1,_EUSART1_RxDefaultInterruptHandl
      +                          er+1
  5840  0094EE  0012               	return		;funcret
  5841  0094F0                     __end_of_EUSART1_SetRxInterruptHandler:
  5842                           	opt stack 0
  5843                           tblptru	equ	0xFF8
  5844                           tblptrh	equ	0xFF7
  5845                           tblptrl	equ	0xFF6
  5846                           tablat	equ	0xFF5
  5847                           intcon	equ	0xFF2
  5848                           intcon2	equ	0xFF1
  5849                           intcon3	equ	0xFF0
  5850                           postinc0	equ	0xFEE
  5851                           wreg	equ	0xFE8
  5852                           postdec2	equ	0xFDD
  5853                           fsr2h	equ	0xFDA
  5854                           fsr2l	equ	0xFD9
  5855                           status	equ	0xFD8
  5856                           
  5857 ;; *************** function _EUSART1_SetOverrunErrorHandler *****************
  5858 ;; Defined at:
  5859 ;;		line 325 in file "mcc_generated_files/eusart1.c"
  5860 ;; Parameters:    Size  Location     Type
  5861 ;;  interruptHan    2    0[BANK0 ] PTR FTN()void 
  5862 ;;		 -> EUSART1_DefaultOverrunErrorHandler(1), 
  5863 ;; Auto vars:     Size  Location     Type
  5864 ;;		None
  5865 ;; Return value:  Size  Location     Type
  5866 ;;                  1    wreg      void 
  5867 ;; Registers used:
  5868 ;;		wreg, status,2, status,0
  5869 ;; Tracked objects:
  5870 ;;		On entry : 0/0
  5871 ;;		On exit  : 0/0
  5872 ;;		Unchanged: 0/0
  5873 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5874 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5875 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5876 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5877 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5878 ;;Total ram usage:        2 bytes
  5879 ;; Hardware stack levels used:    1
  5880 ;; Hardware stack levels required when called:    7
  5881 ;; This function calls:
  5882 ;;		Nothing
  5883 ;; This function is called by:
  5884 ;;		_EUSART1_Initialize
  5885 ;; This function uses a non-reentrant model
  5886 ;;
  5887                           
  5888                           	psect	text29
  5889  0094F0                     __ptext29:
  5890                           	opt stack 0
  5891  0094F0                     _EUSART1_SetOverrunErrorHandler:
  5892                           	opt stack 21
  5893                           
  5894                           ;eusart1.c: 326: EUSART1_OverrunErrorHandler = interruptHandler;
  5895                           
  5896                           ;incstack = 0
  5897  0094F0  C060  F3E9         	movff	EUSART1_SetOverrunErrorHandler@interruptHandler,_EUSART1_OverrunErrorHandler
  5898  0094F4  C061  F3EA         	movff	EUSART1_SetOverrunErrorHandler@interruptHandler+1,_EUSART1_OverrunErrorHandler+1
  5899  0094F8  0012               	return		;funcret
  5900  0094FA                     __end_of_EUSART1_SetOverrunErrorHandler:
  5901                           	opt stack 0
  5902                           tblptru	equ	0xFF8
  5903                           tblptrh	equ	0xFF7
  5904                           tblptrl	equ	0xFF6
  5905                           tablat	equ	0xFF5
  5906                           intcon	equ	0xFF2
  5907                           intcon2	equ	0xFF1
  5908                           intcon3	equ	0xFF0
  5909                           postinc0	equ	0xFEE
  5910                           wreg	equ	0xFE8
  5911                           postdec2	equ	0xFDD
  5912                           fsr2h	equ	0xFDA
  5913                           fsr2l	equ	0xFD9
  5914                           status	equ	0xFD8
  5915                           
  5916 ;; *************** function _EUSART1_SetFramingErrorHandler *****************
  5917 ;; Defined at:
  5918 ;;		line 321 in file "mcc_generated_files/eusart1.c"
  5919 ;; Parameters:    Size  Location     Type
  5920 ;;  interruptHan    2    0[BANK0 ] PTR FTN()void 
  5921 ;;		 -> EUSART1_DefaultFramingErrorHandler(1), 
  5922 ;; Auto vars:     Size  Location     Type
  5923 ;;		None
  5924 ;; Return value:  Size  Location     Type
  5925 ;;                  1    wreg      void 
  5926 ;; Registers used:
  5927 ;;		wreg, status,2, status,0
  5928 ;; Tracked objects:
  5929 ;;		On entry : 0/0
  5930 ;;		On exit  : 0/0
  5931 ;;		Unchanged: 0/0
  5932 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5933 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5934 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5935 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5936 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5937 ;;Total ram usage:        2 bytes
  5938 ;; Hardware stack levels used:    1
  5939 ;; Hardware stack levels required when called:    7
  5940 ;; This function calls:
  5941 ;;		Nothing
  5942 ;; This function is called by:
  5943 ;;		_EUSART1_Initialize
  5944 ;; This function uses a non-reentrant model
  5945 ;;
  5946                           
  5947                           	psect	text30
  5948  0094FA                     __ptext30:
  5949                           	opt stack 0
  5950  0094FA                     _EUSART1_SetFramingErrorHandler:
  5951                           	opt stack 21
  5952                           
  5953                           ;eusart1.c: 322: EUSART1_FramingErrorHandler = interruptHandler;
  5954                           
  5955                           ;incstack = 0
  5956  0094FA  C060  F3EB         	movff	EUSART1_SetFramingErrorHandler@interruptHandler,_EUSART1_FramingErrorHandler
  5957  0094FE  C061  F3EC         	movff	EUSART1_SetFramingErrorHandler@interruptHandler+1,_EUSART1_FramingErrorHandler+1
  5958  009502  0012               	return		;funcret
  5959  009504                     __end_of_EUSART1_SetFramingErrorHandler:
  5960                           	opt stack 0
  5961                           tblptru	equ	0xFF8
  5962                           tblptrh	equ	0xFF7
  5963                           tblptrl	equ	0xFF6
  5964                           tablat	equ	0xFF5
  5965                           intcon	equ	0xFF2
  5966                           intcon2	equ	0xFF1
  5967                           intcon3	equ	0xFF0
  5968                           postinc0	equ	0xFEE
  5969                           wreg	equ	0xFE8
  5970                           postdec2	equ	0xFDD
  5971                           fsr2h	equ	0xFDA
  5972                           fsr2l	equ	0xFD9
  5973                           status	equ	0xFD8
  5974                           
  5975 ;; *************** function _EUSART1_SetErrorHandler *****************
  5976 ;; Defined at:
  5977 ;;		line 329 in file "mcc_generated_files/eusart1.c"
  5978 ;; Parameters:    Size  Location     Type
  5979 ;;  interruptHan    2    0[BANK0 ] PTR FTN()void 
  5980 ;;		 -> EUSART1_DefaultErrorHandler(1), 
  5981 ;; Auto vars:     Size  Location     Type
  5982 ;;		None
  5983 ;; Return value:  Size  Location     Type
  5984 ;;                  1    wreg      void 
  5985 ;; Registers used:
  5986 ;;		wreg, status,2, status,0
  5987 ;; Tracked objects:
  5988 ;;		On entry : 0/0
  5989 ;;		On exit  : 0/0
  5990 ;;		Unchanged: 0/0
  5991 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5992 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5993 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5994 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5995 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5996 ;;Total ram usage:        2 bytes
  5997 ;; Hardware stack levels used:    1
  5998 ;; Hardware stack levels required when called:    7
  5999 ;; This function calls:
  6000 ;;		Nothing
  6001 ;; This function is called by:
  6002 ;;		_EUSART1_Initialize
  6003 ;; This function uses a non-reentrant model
  6004 ;;
  6005                           
  6006                           	psect	text31
  6007  009504                     __ptext31:
  6008                           	opt stack 0
  6009  009504                     _EUSART1_SetErrorHandler:
  6010                           	opt stack 21
  6011                           
  6012                           ;eusart1.c: 330: EUSART1_ErrorHandler = interruptHandler;
  6013                           
  6014                           ;incstack = 0
  6015  009504  C060  F3E7         	movff	EUSART1_SetErrorHandler@interruptHandler,_EUSART1_ErrorHandler
  6016  009508  C061  F3E8         	movff	EUSART1_SetErrorHandler@interruptHandler+1,_EUSART1_ErrorHandler+1
  6017  00950C  0012               	return		;funcret
  6018  00950E                     __end_of_EUSART1_SetErrorHandler:
  6019                           	opt stack 0
  6020                           tblptru	equ	0xFF8
  6021                           tblptrh	equ	0xFF7
  6022                           tblptrl	equ	0xFF6
  6023                           tablat	equ	0xFF5
  6024                           intcon	equ	0xFF2
  6025                           intcon2	equ	0xFF1
  6026                           intcon3	equ	0xFF0
  6027                           postinc0	equ	0xFEE
  6028                           wreg	equ	0xFE8
  6029                           postdec2	equ	0xFDD
  6030                           fsr2h	equ	0xFDA
  6031                           fsr2l	equ	0xFD9
  6032                           status	equ	0xFD8
  6033                           
  6034 ;; *************** function _LORAWAN_SetNetworkSessionKey *****************
  6035 ;; Defined at:
  6036 ;;		line 379 in file "mcc_generated_files/LoRaWAN/lorawan.c"
  6037 ;; Parameters:    Size  Location     Type
  6038 ;;  networkSessi    2   11[BANK0 ] PTR unsigned char 
  6039 ;;		 -> nwkSKey(16), 
  6040 ;; Auto vars:     Size  Location     Type
  6041 ;;		None
  6042 ;; Return value:  Size  Location     Type
  6043 ;;                  1    wreg      void 
  6044 ;; Registers used:
  6045 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6046 ;; Tracked objects:
  6047 ;;		On entry : 0/0
  6048 ;;		On exit  : 0/0
  6049 ;;		Unchanged: 0/0
  6050 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6051 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6052 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6053 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6054 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6055 ;;Total ram usage:        2 bytes
  6056 ;; Hardware stack levels used:    1
  6057 ;; Hardware stack levels required when called:    8
  6058 ;; This function calls:
  6059 ;;		_memcpy
  6060 ;; This function is called by:
  6061 ;;		_main
  6062 ;; This function uses a non-reentrant model
  6063 ;;
  6064                           
  6065                           	psect	text32
  6066  008E0C                     __ptext32:
  6067                           	opt stack 0
  6068  008E0C                     _LORAWAN_SetNetworkSessionKey:
  6069                           	opt stack 22
  6070                           
  6071                           ;lorawan.c: 381: if (networkSessionKeyNew != (0))
  6072                           
  6073                           ;incstack = 0
  6074  008E0C  0100               	movlb	0	; () banked
  6075  008E0E  516B               	movf	LORAWAN_SetNetworkSessionKey@networkSessionKeyNew& (0+255),w,b
  6076  008E10  116C               	iorwf	(LORAWAN_SetNetworkSessionKey@networkSessionKeyNew+1)& (0+255),w,b
  6077  008E12  B4D8               	btfsc	status,2,c
  6078  008E14  0012               	return	
  6079                           
  6080                           ; BSR set to: 0
  6081                           ;lorawan.c: 382: {
  6082                           ;lorawan.c: 383: memcpy(loRa.activationParameters.networkSessionKey, networkSessionKeyNe
      +                          w, 16);
  6083  008E16  0E28               	movlw	low (_loRa+34)
  6084  008E18  6F60               	movwf	memcpy@d1& (0+255),b
  6085  008E1A  0E02               	movlw	high (_loRa+34)
  6086  008E1C  6F61               	movwf	(memcpy@d1+1)& (0+255),b
  6087  008E1E  C06B  F062         	movff	LORAWAN_SetNetworkSessionKey@networkSessionKeyNew,memcpy@s1
  6088  008E22  C06C  F063         	movff	LORAWAN_SetNetworkSessionKey@networkSessionKeyNew+1,memcpy@s1+1
  6089  008E26  0E00               	movlw	0
  6090  008E28  6F65               	movwf	(memcpy@n+1)& (0+255),b
  6091  008E2A  0E10               	movlw	16
  6092  008E2C  6F64               	movwf	memcpy@n& (0+255),b
  6093  008E2E  EC5D  F041         	call	_memcpy	;wreg free
  6094                           
  6095                           ;lorawan.c: 384: loRa.macKeys.networkSessionKey = 1;
  6096  008E32  0102               	movlb	2	; () banked
  6097  008E34  89AB               	bsf	(_loRa+165)& (0+255),4,b
  6098                           
  6099                           ; BSR set to: 2
  6100                           ;lorawan.c: 385: loRa.macStatus.networkJoined = 0;
  6101  008E36  9908               	bcf	(_loRa+2)& (0+255),4,b
  6102  008E38  0012               	return	
  6103  008E3A                     __end_of_LORAWAN_SetNetworkSessionKey:
  6104                           	opt stack 0
  6105                           tblptru	equ	0xFF8
  6106                           tblptrh	equ	0xFF7
  6107                           tblptrl	equ	0xFF6
  6108                           tablat	equ	0xFF5
  6109                           intcon	equ	0xFF2
  6110                           intcon2	equ	0xFF1
  6111                           intcon3	equ	0xFF0
  6112                           postinc0	equ	0xFEE
  6113                           wreg	equ	0xFE8
  6114                           postdec2	equ	0xFDD
  6115                           fsr2h	equ	0xFDA
  6116                           fsr2l	equ	0xFD9
  6117                           status	equ	0xFD8
  6118                           
  6119 ;; *************** function _LORAWAN_SetDeviceAddress *****************
  6120 ;; Defined at:
  6121 ;;		line 367 in file "mcc_generated_files/LoRaWAN/lorawan.c"
  6122 ;; Parameters:    Size  Location     Type
  6123 ;;  deviceAddres    4    0[BANK0 ] unsigned long 
  6124 ;; Auto vars:     Size  Location     Type
  6125 ;;		None
  6126 ;; Return value:  Size  Location     Type
  6127 ;;                  1    wreg      void 
  6128 ;; Registers used:
  6129 ;;		None
  6130 ;; Tracked objects:
  6131 ;;		On entry : 0/0
  6132 ;;		On exit  : 0/0
  6133 ;;		Unchanged: 0/0
  6134 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6135 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6136 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6137 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6138 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6139 ;;Total ram usage:        4 bytes
  6140 ;; Hardware stack levels used:    1
  6141 ;; Hardware stack levels required when called:    7
  6142 ;; This function calls:
  6143 ;;		Nothing
  6144 ;; This function is called by:
  6145 ;;		_main
  6146 ;; This function uses a non-reentrant model
  6147 ;;
  6148                           
  6149                           	psect	text33
  6150  009342                     __ptext33:
  6151                           	opt stack 0
  6152  009342                     _LORAWAN_SetDeviceAddress:
  6153                           	opt stack 23
  6154                           
  6155                           ;lorawan.c: 369: loRa.activationParameters.deviceAddress.value = deviceAddressNew;
  6156                           
  6157                           ;incstack = 0
  6158  009342  C060  F224         	movff	LORAWAN_SetDeviceAddress@deviceAddressNew,_loRa+30
  6159  009346  C061  F225         	movff	LORAWAN_SetDeviceAddress@deviceAddressNew+1,_loRa+31
  6160  00934A  C062  F226         	movff	LORAWAN_SetDeviceAddress@deviceAddressNew+2,_loRa+32
  6161  00934E  C063  F227         	movff	LORAWAN_SetDeviceAddress@deviceAddressNew+3,_loRa+33
  6162                           
  6163                           ;lorawan.c: 370: loRa.macKeys.deviceAddress = 1;
  6164  009352  0102               	movlb	2	; () banked
  6165  009354  85AB               	bsf	(_loRa+165)& (0+255),2,b
  6166                           
  6167                           ;lorawan.c: 371: loRa.macStatus.networkJoined = 0;
  6168  009356  9908               	bcf	(_loRa+2)& (0+255),4,b
  6169                           
  6170                           ; BSR set to: 2
  6171  009358  0012               	return		;funcret
  6172  00935A                     __end_of_LORAWAN_SetDeviceAddress:
  6173                           	opt stack 0
  6174                           tblptru	equ	0xFF8
  6175                           tblptrh	equ	0xFF7
  6176                           tblptrl	equ	0xFF6
  6177                           tablat	equ	0xFF5
  6178                           intcon	equ	0xFF2
  6179                           intcon2	equ	0xFF1
  6180                           intcon3	equ	0xFF0
  6181                           postinc0	equ	0xFEE
  6182                           wreg	equ	0xFE8
  6183                           postdec2	equ	0xFDD
  6184                           fsr2h	equ	0xFDA
  6185                           fsr2l	equ	0xFD9
  6186                           status	equ	0xFD8
  6187                           
  6188 ;; *************** function _LORAWAN_SetApplicationSessionKey *****************
  6189 ;; Defined at:
  6190 ;;		line 394 in file "mcc_generated_files/LoRaWAN/lorawan.c"
  6191 ;; Parameters:    Size  Location     Type
  6192 ;;  applicationS    2   11[BANK0 ] PTR unsigned char 
  6193 ;;		 -> appSKey(16), 
  6194 ;; Auto vars:     Size  Location     Type
  6195 ;;		None
  6196 ;; Return value:  Size  Location     Type
  6197 ;;                  1    wreg      void 
  6198 ;; Registers used:
  6199 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6200 ;; Tracked objects:
  6201 ;;		On entry : 0/0
  6202 ;;		On exit  : 0/0
  6203 ;;		Unchanged: 0/0
  6204 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6205 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6206 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6207 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6208 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6209 ;;Total ram usage:        2 bytes
  6210 ;; Hardware stack levels used:    1
  6211 ;; Hardware stack levels required when called:    8
  6212 ;; This function calls:
  6213 ;;		_memcpy
  6214 ;; This function is called by:
  6215 ;;		_main
  6216 ;; This function uses a non-reentrant model
  6217 ;;
  6218                           
  6219                           	psect	text34
  6220  008E3A                     __ptext34:
  6221                           	opt stack 0
  6222  008E3A                     _LORAWAN_SetApplicationSessionKey:
  6223                           	opt stack 22
  6224                           
  6225                           ;lorawan.c: 396: if (applicationSessionKeyNew != (0))
  6226                           
  6227                           ; BSR set to: 2
  6228                           ;incstack = 0
  6229  008E3A  0100               	movlb	0	; () banked
  6230  008E3C  516B               	movf	LORAWAN_SetApplicationSessionKey@applicationSessionKeyNew& (0+255),w,b
  6231  008E3E  116C               	iorwf	(LORAWAN_SetApplicationSessionKey@applicationSessionKeyNew+1)& (0+255),w,b
  6232  008E40  B4D8               	btfsc	status,2,c
  6233  008E42  0012               	return	
  6234                           
  6235                           ; BSR set to: 0
  6236                           ;lorawan.c: 397: {
  6237                           ;lorawan.c: 398: memcpy( loRa.activationParameters.applicationSessionKey, applicationSes
      +                          sionKeyNew, 16);
  6238  008E44  0E38               	movlw	low (_loRa+50)
  6239  008E46  6F60               	movwf	memcpy@d1& (0+255),b
  6240  008E48  0E02               	movlw	high (_loRa+50)
  6241  008E4A  6F61               	movwf	(memcpy@d1+1)& (0+255),b
  6242  008E4C  C06B  F062         	movff	LORAWAN_SetApplicationSessionKey@applicationSessionKeyNew,memcpy@s1
  6243  008E50  C06C  F063         	movff	LORAWAN_SetApplicationSessionKey@applicationSessionKeyNew+1,memcpy@s1+1
  6244  008E54  0E00               	movlw	0
  6245  008E56  6F65               	movwf	(memcpy@n+1)& (0+255),b
  6246  008E58  0E10               	movlw	16
  6247  008E5A  6F64               	movwf	memcpy@n& (0+255),b
  6248  008E5C  EC5D  F041         	call	_memcpy	;wreg free
  6249                           
  6250                           ;lorawan.c: 399: loRa.macKeys.applicationSessionKey = 1;
  6251  008E60  0102               	movlb	2	; () banked
  6252  008E62  8BAB               	bsf	(_loRa+165)& (0+255),5,b
  6253                           
  6254                           ; BSR set to: 2
  6255                           ;lorawan.c: 400: loRa.macStatus.networkJoined = 0;
  6256  008E64  9908               	bcf	(_loRa+2)& (0+255),4,b
  6257  008E66  0012               	return	
  6258  008E68                     __end_of_LORAWAN_SetApplicationSessionKey:
  6259                           	opt stack 0
  6260                           tblptru	equ	0xFF8
  6261                           tblptrh	equ	0xFF7
  6262                           tblptrl	equ	0xFF6
  6263                           tablat	equ	0xFF5
  6264                           intcon	equ	0xFF2
  6265                           intcon2	equ	0xFF1
  6266                           intcon3	equ	0xFF0
  6267                           postinc0	equ	0xFEE
  6268                           wreg	equ	0xFE8
  6269                           postdec2	equ	0xFDD
  6270                           fsr2h	equ	0xFDA
  6271                           fsr2l	equ	0xFD9
  6272                           status	equ	0xFD8
  6273                           
  6274 ;; *************** function _LORAWAN_Mainloop *****************
  6275 ;; Defined at:
  6276 ;;		line 2238 in file "mcc_generated_files/LoRaWAN/lorawan.c"
  6277 ;; Parameters:    Size  Location     Type
  6278 ;;		None
  6279 ;; Auto vars:     Size  Location     Type
  6280 ;;		None
  6281 ;; Return value:  Size  Location     Type
  6282 ;;                  1    wreg      void 
  6283 ;; Registers used:
  6284 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, btemp, btemp+1, btemp+2, btemp+4, btemp+
      +5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6285 ;; Tracked objects:
  6286 ;;		On entry : 0/0
  6287 ;;		On exit  : 0/0
  6288 ;;		Unchanged: 0/0
  6289 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6290 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6291 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6292 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6293 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6294 ;;Total ram usage:        0 bytes
  6295 ;; Hardware stack levels used:    1
  6296 ;; Hardware stack levels required when called:   18
  6297 ;; This function calls:
  6298 ;;		_INTERRUPT_GetDioStatus
  6299 ;;		_RADIO_DIO0
  6300 ;;		_RADIO_DIO1
  6301 ;;		_RADIO_DIO2
  6302 ;;		_RADIO_DIO3
  6303 ;;		_RADIO_DIO4
  6304 ;;		_RADIO_DIO5
  6305 ;;		_SwTimersExecute
  6306 ;; This function is called by:
  6307 ;;		_main
  6308 ;; This function uses a non-reentrant model
  6309 ;;
  6310                           
  6311                           	psect	text35
  6312  008B98                     __ptext35:
  6313                           	opt stack 0
  6314  008B98                     _LORAWAN_Mainloop:
  6315                           	opt stack 12
  6316                           
  6317                           ;lorawan.c: 2240: SwTimersExecute();
  6318                           
  6319                           ;incstack = 0
  6320  008B98  EC5A  F034         	call	_SwTimersExecute	;wreg free
  6321                           
  6322                           ;lorawan.c: 2243: localDioStatus = INTERRUPT_GetDioStatus();
  6323  008B9C  ECDA  F049         	call	_INTERRUPT_GetDioStatus	;wreg free
  6324  008BA0  0101               	movlb	1	; () banked
  6325  008BA2  6F55               	movwf	_localDioStatus& (0+255),b
  6326                           
  6327                           ; BSR set to: 1
  6328                           ;lorawan.c: 2245: if ((localDioStatus & 0x01) != 0)
  6329  008BA4  B155               	btfsc	_localDioStatus& (0+255),0,b
  6330                           
  6331                           ; BSR set to: 1
  6332                           ;lorawan.c: 2246: {
  6333                           ;lorawan.c: 2247: RADIO_DIO0();
  6334  008BA6  EC25  F03B         	call	_RADIO_DIO0	;wreg free
  6335                           
  6336                           ;lorawan.c: 2248: }
  6337                           ;lorawan.c: 2249: if ((localDioStatus & 0x02) != 0)
  6338  008BAA  0101               	movlb	1	; () banked
  6339  008BAC  B355               	btfsc	_localDioStatus& (0+255),1,b
  6340                           
  6341                           ; BSR set to: 1
  6342                           ;lorawan.c: 2250: {
  6343                           ;lorawan.c: 2251: RADIO_DIO1();
  6344  008BAE  ECC5  F043         	call	_RADIO_DIO1	;wreg free
  6345                           
  6346                           ;lorawan.c: 2252: }
  6347                           ;lorawan.c: 2253: if ((localDioStatus & 0x04) != 0)
  6348  008BB2  0101               	movlb	1	; () banked
  6349  008BB4  B555               	btfsc	_localDioStatus& (0+255),2,b
  6350                           
  6351                           ; BSR set to: 1
  6352                           ;lorawan.c: 2254: {
  6353                           ;lorawan.c: 2255: RADIO_DIO2();
  6354  008BB6  ECCB  F042         	call	_RADIO_DIO2	;wreg free
  6355                           
  6356                           ;lorawan.c: 2256: }
  6357                           ;lorawan.c: 2257: if ((localDioStatus & 0x08) != 0)
  6358  008BBA  0101               	movlb	1	; () banked
  6359  008BBC  B755               	btfsc	_localDioStatus& (0+255),3,b
  6360                           
  6361                           ; BSR set to: 1
  6362                           ;lorawan.c: 2258: {
  6363                           ;lorawan.c: 2259: RADIO_DIO3();
  6364  008BBE  EC8B  F048         	call	_RADIO_DIO3	;wreg free
  6365                           
  6366                           ;lorawan.c: 2260: }
  6367                           ;lorawan.c: 2261: if ((localDioStatus & 0x10) != 0)
  6368  008BC2  0101               	movlb	1	; () banked
  6369  008BC4  B955               	btfsc	_localDioStatus& (0+255),4,b
  6370                           
  6371                           ; BSR set to: 1
  6372                           ;lorawan.c: 2262: {
  6373                           ;lorawan.c: 2263: RADIO_DIO4();
  6374  008BC6  EC43  F046         	call	_RADIO_DIO4	;wreg free
  6375                           
  6376                           ;lorawan.c: 2264: }
  6377                           ;lorawan.c: 2265: if ((localDioStatus & 0x20) != 0)
  6378  008BCA  0101               	movlb	1	; () banked
  6379  008BCC  AB55               	btfss	_localDioStatus& (0+255),5,b
  6380  008BCE  0012               	return	
  6381                           
  6382                           ; BSR set to: 1
  6383                           ;lorawan.c: 2266: {
  6384                           ;lorawan.c: 2267: RADIO_DIO5();
  6385  008BD0  ECCB  F047         	call	_RADIO_DIO5	;wreg free
  6386  008BD4  0012               	return	
  6387  008BD6                     __end_of_LORAWAN_Mainloop:
  6388                           	opt stack 0
  6389                           tblptru	equ	0xFF8
  6390                           tblptrh	equ	0xFF7
  6391                           tblptrl	equ	0xFF6
  6392                           tablat	equ	0xFF5
  6393                           intcon	equ	0xFF2
  6394                           intcon2	equ	0xFF1
  6395                           intcon3	equ	0xFF0
  6396                           postinc0	equ	0xFEE
  6397                           wreg	equ	0xFE8
  6398                           postdec2	equ	0xFDD
  6399                           fsr2h	equ	0xFDA
  6400                           fsr2l	equ	0xFD9
  6401                           status	equ	0xFD8
  6402                           
  6403 ;; *************** function _SwTimersExecute *****************
  6404 ;; Defined at:
  6405 ;;		line 260 in file "mcc_generated_files/LoRaWAN/sw_timer.c"
  6406 ;; Parameters:    Size  Location     Type
  6407 ;;		None
  6408 ;; Auto vars:     Size  Location     Type
  6409 ;;  i               1  126[BANK0 ] unsigned char 
  6410 ;; Return value:  Size  Location     Type
  6411 ;;                  1    wreg      void 
  6412 ;; Registers used:
  6413 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, btemp, btemp+1, btemp+2, btemp+4, btemp+
      +5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6414 ;; Tracked objects:
  6415 ;;		On entry : 0/0
  6416 ;;		On exit  : 0/0
  6417 ;;		Unchanged: 0/0
  6418 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6419 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6420 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6421 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6422 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6423 ;;Total ram usage:        5 bytes
  6424 ;; Hardware stack levels used:    1
  6425 ;; Hardware stack levels required when called:   17
  6426 ;; This function calls:
  6427 ;;		Absolute function
  6428 ;;		_AckRetransmissionCallback
  6429 ;;		_AutomaticReplyCallback
  6430 ;;		_DutyCycleCallback
  6431 ;;		_LORAWAN_LinkCheckCallback
  6432 ;;		_LORAWAN_ReceiveWindow1Callback
  6433 ;;		_LORAWAN_ReceiveWindow2Callback
  6434 ;;		_RADIO_RxFSKTimeout
  6435 ;;		_RADIO_WatchdogTimeout
  6436 ;;		_UnconfirmedTransmissionCallback
  6437 ;;		_UpdateJoinSuccessState
  6438 ;; This function is called by:
  6439 ;;		_LORAWAN_Mainloop
  6440 ;; This function uses a non-reentrant model
  6441 ;;
  6442                           
  6443                           	psect	text36
  6444  0068B4                     __ptext36:
  6445                           	opt stack 0
  6446  0068B4                     _SwTimersExecute:
  6447                           	opt stack 12
  6448                           
  6449                           ;sw_timer.c: 262: uint8_t i;
  6450                           ;sw_timer.c: 264: (INTCONbits.GIE = 0);
  6451                           
  6452                           ;incstack = 0
  6453  0068B4  9EF2               	bcf	intcon,7,c	;volatile
  6454                           
  6455                           ;sw_timer.c: 265: for (i = 0; i < allocatedTimers; i++)
  6456  0068B6  0E00               	movlw	0
  6457  0068B8  0100               	movlb	0	; () banked
  6458  0068BA  6FDE               	movwf	SwTimersExecute@i& (0+255),b
  6459  0068BC  D068               	goto	l1583
  6460  0068BE                     
  6461                           ; BSR set to: 0
  6462                           ;sw_timer.c: 266: {
  6463                           ;sw_timer.c: 269: if (swTimers[i].running == 1)
  6464                           
  6465                           ; BSR set to: 0
  6466  0068BE  51DE               	movf	SwTimersExecute@i& (0+255),w,b
  6467  0068C0  0D08               	mullw	8
  6468  0068C2  0E04               	movlw	4
  6469  0068C4  26F3               	addwf	prodl,f,c
  6470  0068C6  0E00               	movlw	0
  6471  0068C8  22F4               	addwfc	prodh,f,c
  6472  0068CA  0E00               	movlw	low _swTimers
  6473  0068CC  24F3               	addwf	prodl,w,c
  6474  0068CE  6ED9               	movwf	fsr2l,c
  6475  0068D0  0E03               	movlw	high _swTimers
  6476  0068D2  20F4               	addwfc	prodh,w,c
  6477  0068D4  6EDA               	movwf	fsr2h,c
  6478  0068D6  04DE               	decf	postinc2,w,c
  6479  0068D8  A4D8               	btfss	status,2,c
  6480  0068DA  D057               	goto	l1587
  6481                           
  6482                           ; BSR set to: 0
  6483                           ;sw_timer.c: 270: {
  6484                           ;sw_timer.c: 271: if (0 == swTimers[i].ticksRemaining)
  6485  0068DC  51DE               	movf	SwTimersExecute@i& (0+255),w,b
  6486  0068DE  0D08               	mullw	8
  6487  0068E0  0E00               	movlw	low _swTimers
  6488  0068E2  24F3               	addwf	prodl,w,c
  6489  0068E4  6ED9               	movwf	fsr2l,c
  6490  0068E6  0E03               	movlw	high _swTimers
  6491  0068E8  20F4               	addwfc	prodh,w,c
  6492  0068EA  6EDA               	movwf	fsr2h,c
  6493  0068EC  50DE               	movf	postinc2,w,c
  6494  0068EE  10DE               	iorwf	postinc2,w,c
  6495  0068F0  10DE               	iorwf	postinc2,w,c
  6496  0068F2  10DE               	iorwf	postinc2,w,c
  6497  0068F4  A4D8               	btfss	status,2,c
  6498  0068F6  D049               	goto	l1587
  6499                           
  6500                           ; BSR set to: 0
  6501                           ;sw_timer.c: 272: {
  6502                           ;sw_timer.c: 273: swTimers[i].running = 0;
  6503  0068F8  51DE               	movf	SwTimersExecute@i& (0+255),w,b
  6504  0068FA  0D08               	mullw	8
  6505  0068FC  0E04               	movlw	4
  6506  0068FE  26F3               	addwf	prodl,f,c
  6507  006900  0E00               	movlw	0
  6508  006902  22F4               	addwfc	prodh,f,c
  6509  006904  0E00               	movlw	low _swTimers
  6510  006906  24F3               	addwf	prodl,w,c
  6511  006908  6ED9               	movwf	fsr2l,c
  6512  00690A  0E03               	movlw	high _swTimers
  6513  00690C  20F4               	addwfc	prodh,w,c
  6514  00690E  6EDA               	movwf	fsr2h,c
  6515  006910  0E00               	movlw	0
  6516  006912  6EDF               	movwf	indf2,c
  6517                           
  6518                           ;sw_timer.c: 274: if ((0) != swTimers[i].callback)
  6519  006914  51DE               	movf	SwTimersExecute@i& (0+255),w,b
  6520  006916  0D08               	mullw	8
  6521  006918  0E06               	movlw	6
  6522  00691A  26F3               	addwf	prodl,f,c
  6523  00691C  0E00               	movlw	0
  6524  00691E  22F4               	addwfc	prodh,f,c
  6525  006920  0E00               	movlw	low _swTimers
  6526  006922  24F3               	addwf	prodl,w,c
  6527  006924  6ED9               	movwf	fsr2l,c
  6528  006926  0E03               	movlw	high _swTimers
  6529  006928  20F4               	addwfc	prodh,w,c
  6530  00692A  6EDA               	movwf	fsr2h,c
  6531  00692C  50DE               	movf	postinc2,w,c
  6532  00692E  10DE               	iorwf	postinc2,w,c
  6533  006930  B4D8               	btfsc	status,2,c
  6534  006932  D02B               	goto	l1587
  6535                           
  6536                           ; BSR set to: 0
  6537                           ;sw_timer.c: 275: {
  6538                           ;sw_timer.c: 276: (INTCONbits.GIE = 1);
  6539  006934  8EF2               	bsf	intcon,7,c	;volatile
  6540                           
  6541                           ; BSR set to: 0
  6542                           ;sw_timer.c: 277: swTimers[i].callback(swTimers[i].callbackParameter);
  6543  006936  51DE               	movf	SwTimersExecute@i& (0+255),w,b
  6544  006938  0D08               	mullw	8
  6545  00693A  0E05               	movlw	5
  6546  00693C  26F3               	addwf	prodl,f,c
  6547  00693E  0E00               	movlw	0
  6548  006940  22F4               	addwfc	prodh,f,c
  6549  006942  0E00               	movlw	low _swTimers
  6550  006944  24F3               	addwf	prodl,w,c
  6551  006946  6ED9               	movwf	fsr2l,c
  6552  006948  0E03               	movlw	high _swTimers
  6553  00694A  20F4               	addwfc	prodh,w,c
  6554  00694C  6EDA               	movwf	fsr2h,c
  6555  00694E  50DF               	movf	indf2,w,c
  6556  006950  6EE6               	movwf	postinc1,c
  6557  006952  51DE               	movf	SwTimersExecute@i& (0+255),w,b
  6558  006954  0D08               	mullw	8
  6559  006956  0E06               	movlw	6
  6560  006958  26F3               	addwf	prodl,f,c
  6561  00695A  0E00               	movlw	0
  6562  00695C  22F4               	addwfc	prodh,f,c
  6563  00695E  0E00               	movlw	low _swTimers
  6564  006960  24F3               	addwf	prodl,w,c
  6565  006962  6ED9               	movwf	fsr2l,c
  6566  006964  0E03               	movlw	high _swTimers
  6567  006966  20F4               	addwfc	prodh,w,c
  6568  006968  6EDA               	movwf	fsr2h,c
  6569  00696A  CFDE F0DA          	movff	postinc2,??_SwTimersExecute
  6570  00696E  CFDD F0DB          	movff	postdec2,??_SwTimersExecute+1
  6571  006972  D801               	call	u16728
  6572  006974  D009               	goto	u16729
  6573  006976                     u16728:
  6574  006976  0005               	push	
  6575  006978  6EFA               	movwf	pclath,c
  6576  00697A  51DA               	movf	??_SwTimersExecute& (0+255),w,b
  6577  00697C  6EFD               	movwf	tosl,c
  6578  00697E  51DB               	movf	(??_SwTimersExecute+1)& (0+255),w,b
  6579  006980  6EFE               	movwf	tosh,c
  6580  006982  6AFF               	clrf	tosu,c
  6581  006984  50FA               	movf	pclath,w,c
  6582  006986  0012               	return		;indir
  6583  006988                     u16729:
  6584                           
  6585                           ;sw_timer.c: 278: (INTCONbits.GIE = 0);
  6586  006988  9EF2               	bcf	intcon,7,c	;volatile
  6587  00698A                     l1587:
  6588  00698A  0100               	movlb	0	; () banked
  6589  00698C  2BDE               	incf	SwTimersExecute@i& (0+255),f,b
  6590  00698E                     l1583:
  6591                           
  6592                           ; BSR set to: 0
  6593                           
  6594                           ; BSR set to: 0
  6595  00698E  0101               	movlb	1	; () banked
  6596  006990  5154               	movf	_allocatedTimers& (0+255),w,b	;volatile
  6597  006992  0100               	movlb	0	; () banked
  6598  006994  5DDE               	subwf	SwTimersExecute@i& (0+255),w,b
  6599  006996  A0D8               	btfss	status,0,c
  6600  006998  D792               	goto	l1584
  6601                           
  6602                           ; BSR set to: 0
  6603                           ;sw_timer.c: 279: }
  6604                           ;sw_timer.c: 280: }
  6605                           ;sw_timer.c: 281: }
  6606                           ;sw_timer.c: 282: }
  6607                           ;sw_timer.c: 283: (INTCONbits.GIE = 1);
  6608  00699A  8EF2               	bsf	intcon,7,c	;volatile
  6609                           
  6610                           ; BSR set to: 0
  6611  00699C  0012               	return		;funcret
  6612  00699E                     __end_of_SwTimersExecute:
  6613                           	opt stack 0
  6614                           tosu	equ	0xFFF
  6615                           tosh	equ	0xFFE
  6616                           tosl	equ	0xFFD
  6617                           pclath	equ	0xFFA
  6618                           tblptru	equ	0xFF8
  6619                           tblptrh	equ	0xFF7
  6620                           tblptrl	equ	0xFF6
  6621                           tablat	equ	0xFF5
  6622                           prodh	equ	0xFF4
  6623                           prodl	equ	0xFF3
  6624                           intcon	equ	0xFF2
  6625                           intcon2	equ	0xFF1
  6626                           intcon3	equ	0xFF0
  6627                           postinc0	equ	0xFEE
  6628                           wreg	equ	0xFE8
  6629                           postinc1	equ	0xFE6
  6630                           indf2	equ	0xFDF
  6631                           postinc2	equ	0xFDE
  6632                           postdec2	equ	0xFDD
  6633                           fsr2h	equ	0xFDA
  6634                           fsr2l	equ	0xFD9
  6635                           status	equ	0xFD8
  6636                           
  6637 ;; *************** function _DutyCycleCallback *****************
  6638 ;; Defined at:
  6639 ;;		line 1221 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
  6640 ;; Parameters:    Size  Location     Type
  6641 ;;  param           1  [STACK] unsigned char 
  6642 ;; Auto vars:     Size  Location     Type
  6643 ;;  minim           4  [STACK] unsigned long 
  6644 ;;  i               1  [STACK] unsigned char 
  6645 ;;  found           1  [STACK] unsigned char 
  6646 ;; Return value:  Size  Location     Type
  6647 ;;                  1  [STACK] void 
  6648 ;; Registers used:
  6649 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+4, btemp+5, btemp+6, btemp+7, btemp+8, btemp+9, b
      +temp+10, btemp+11, prodl, prodh, cstack
  6650 ;; Tracked objects:
  6651 ;;		On entry : 3F/0
  6652 ;;		On exit  : 0/0
  6653 ;;		Unchanged: 0/0
  6654 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6655 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6656 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6657 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6658 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6659 ;;Total ram usage:        0 bytes
  6660 ;; Hardware stack levels used:    1
  6661 ;; Hardware stack levels required when called:   11
  6662 ;; This function calls:
  6663 ;;		_SwTimerSetTimeout
  6664 ;;		_SwTimerStart
  6665 ;;		___lldiv
  6666 ;; This function is called by:
  6667 ;;		_SetCallbackSoftwareTimers
  6668 ;;		_SwTimersExecute
  6669 ;; This function uses a reentrant model
  6670 ;;
  6671                           
  6672                           	psect	text37
  6673  002FE4                     __ptext37:
  6674                           	opt stack 0
  6675  002FE4                     _DutyCycleCallback:
  6676                           	opt stack 0
  6677                           
  6678                           ; BSR set to: 0
  6679                           ; autosize = 10, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, argsize = 1 va
      +                          rgsize = 0, retsize = 0
  6680  002FE4  0E0A               	movlw	10
  6681  002FE6  26E1               	addwf	fsr1l,f,c
  6682  002FE8  0E00               	movlw	0
  6683  002FEA  22E2               	addwfc	fsr1h,f,c
  6684                           
  6685                           ;lorawan_eu.c: 1223: uint32_t minim = (4294967295UL);
  6686                           
  6687                           ;incstack = 0
  6688  002FEC  0EFF               	movlw	255
  6689  002FEE  6E46               	movwf	btemp+8,c
  6690  002FF0  0EFF               	movlw	255
  6691  002FF2  6E47               	movwf	btemp+9,c
  6692  002FF4  0EFF               	movlw	255
  6693  002FF6  6E48               	movwf	btemp+10,c
  6694  002FF8  0EFF               	movlw	255
  6695  002FFA  6E49               	movwf	btemp+11,c
  6696                           
  6697                           ;stkvar	DutyCycleCallback@minim @ sp[(-10)+4]
  6698  002FFC  0EFA               	movlw	-6
  6699  002FFE  C046  FFE3         	movff	btemp+8,plusw1
  6700  003002  0EFB               	movlw	-5
  6701  003004  C047  FFE3         	movff	btemp+9,plusw1
  6702  003008  0EFC               	movlw	-4
  6703  00300A  C048  FFE3         	movff	btemp+10,plusw1
  6704  00300E  0EFD               	movlw	-3
  6705  003010  C049  FFE3         	movff	btemp+11,plusw1
  6706                           
  6707                           ;lorawan_eu.c: 1224: bool found = 0;
  6708                           ;stkvar	DutyCycleCallback@found @ sp[(-10)+9]
  6709  003014  0EFF               	movlw	-1
  6710  003016  6AE3               	clrf	plusw1,c
  6711                           
  6712                           ;lorawan_eu.c: 1225: uint8_t i;
  6713                           ;lorawan_eu.c: 1227: for (i=0; i < 16; i++)
  6714                           ;stkvar	DutyCycleCallback@i @ sp[(-10)+8]
  6715  003018  0EFE               	movlw	-2
  6716  00301A  6AE3               	clrf	plusw1,c
  6717  00301C                     l12237:
  6718                           
  6719                           ;lorawan_eu.c: 1228: {
  6720                           ;lorawan_eu.c: 1230: if ((Channels[i].status == 1) && ( Channels[i].channelTimer != 0 ))
  6721                           ;stkvar	DutyCycleCallback@i @ sp[(-10)+8]
  6722  00301C  0EFE               	movlw	-2
  6723  00301E  50E3               	movf	plusw1,w,c
  6724  003020  0D0E               	mullw	14
  6725  003022  0E04               	movlw	low (_Channels+4)
  6726  003024  24F3               	addwf	prodl,w,c
  6727  003026  6ED9               	movwf	fsr2l,c
  6728  003028  0E04               	movlw	high (_Channels+4)
  6729  00302A  20F4               	addwfc	prodh,w,c
  6730  00302C  6EDA               	movwf	fsr2h,c
  6731  00302E  04DE               	decf	postinc2,w,c
  6732  003030  A4D8               	btfss	status,2,c
  6733  003032  D0AD               	goto	l12255
  6734                           
  6735                           ;stkvar	DutyCycleCallback@i @ sp[(-10)+8]
  6736  003034  0EFE               	movlw	-2
  6737  003036  50E3               	movf	plusw1,w,c
  6738  003038  0D0E               	mullw	14
  6739  00303A  0E08               	movlw	low (_Channels+8)
  6740  00303C  24F3               	addwf	prodl,w,c
  6741  00303E  6ED9               	movwf	fsr2l,c
  6742  003040  0E04               	movlw	high (_Channels+8)
  6743  003042  20F4               	addwfc	prodh,w,c
  6744  003044  6EDA               	movwf	fsr2h,c
  6745  003046  50DE               	movf	postinc2,w,c
  6746  003048  10DE               	iorwf	postinc2,w,c
  6747  00304A  10DE               	iorwf	postinc2,w,c
  6748  00304C  10DE               	iorwf	postinc2,w,c
  6749  00304E  B4D8               	btfsc	status,2,c
  6750  003050  D09E               	goto	l12255
  6751                           
  6752                           ;lorawan_eu.c: 1231: {
  6753                           ;lorawan_eu.c: 1232: if ( Channels[i].channelTimer > loRa.lastTimerValue )
  6754                           ;stkvar	DutyCycleCallback@i @ sp[(-10)+8]
  6755  003052  0EFE               	movlw	-2
  6756  003054  50E3               	movf	plusw1,w,c
  6757  003056  0D0E               	mullw	14
  6758  003058  0E08               	movlw	low (_Channels+8)
  6759  00305A  24F3               	addwf	prodl,w,c
  6760  00305C  6ED9               	movwf	fsr2l,c
  6761  00305E  0E04               	movlw	high (_Channels+8)
  6762  003060  20F4               	addwfc	prodh,w,c
  6763  003062  6EDA               	movwf	fsr2h,c
  6764  003064  50DE               	movf	postinc2,w,c
  6765  003066  0102               	movlb	2	; () banked
  6766  003068  5DCE               	subwf	(_loRa+200)& (0+255),w,b
  6767  00306A  50DE               	movf	postinc2,w,c
  6768  00306C  59CF               	subwfb	(_loRa+201)& (0+255),w,b
  6769  00306E  50DE               	movf	postinc2,w,c
  6770  003070  59D0               	subwfb	(_loRa+202)& (0+255),w,b
  6771  003072  50DE               	movf	postinc2,w,c
  6772  003074  59D1               	subwfb	(_loRa+203)& (0+255),w,b
  6773  003076  B0D8               	btfsc	status,0,c
  6774  003078  D02F               	goto	l12245
  6775                           
  6776                           ; BSR set to: 2
  6777                           ;lorawan_eu.c: 1233: {
  6778                           ;lorawan_eu.c: 1234: Channels[i].channelTimer = Channels[i].channelTimer - loRa.lastTime
      +                          rValue;
  6779                           ;stkvar	DutyCycleCallback@i @ sp[(-10)+8]
  6780  00307A  0EFE               	movlw	-2
  6781  00307C  50E3               	movf	plusw1,w,c
  6782  00307E  0D0E               	mullw	14
  6783  003080  0E08               	movlw	low (_Channels+8)
  6784  003082  24F3               	addwf	prodl,w,c
  6785  003084  6ED9               	movwf	fsr2l,c
  6786  003086  0E04               	movlw	high (_Channels+8)
  6787  003088  20F4               	addwfc	prodh,w,c
  6788  00308A  6EDA               	movwf	fsr2h,c
  6789  00308C  CFDE F046          	movff	postinc2,btemp+8
  6790  003090  CFDE F047          	movff	postinc2,btemp+9
  6791  003094  CFDE F048          	movff	postinc2,btemp+10
  6792  003098  CFDE F049          	movff	postinc2,btemp+11
  6793  00309C  51CE               	movf	(_loRa+200)& (0+255),w,b
  6794  00309E  5C46               	subwf	btemp+8,w,c
  6795  0030A0  6E42               	movwf	btemp+4,c
  6796  0030A2  51CF               	movf	(_loRa+201)& (0+255),w,b
  6797  0030A4  5847               	subwfb	btemp+9,w,c
  6798  0030A6  6E43               	movwf	btemp+5,c
  6799  0030A8  51D0               	movf	(_loRa+202)& (0+255),w,b
  6800  0030AA  5848               	subwfb	btemp+10,w,c
  6801  0030AC  6E44               	movwf	btemp+6,c
  6802  0030AE  51D1               	movf	(_loRa+203)& (0+255),w,b
  6803  0030B0  5849               	subwfb	btemp+11,w,c
  6804  0030B2  6E45               	movwf	btemp+7,c
  6805                           
  6806                           ;stkvar	DutyCycleCallback@i @ sp[(-10)+8]
  6807  0030B4  0EFE               	movlw	-2
  6808  0030B6  50E3               	movf	plusw1,w,c
  6809  0030B8  0D0E               	mullw	14
  6810  0030BA  0E08               	movlw	low (_Channels+8)
  6811  0030BC  24F3               	addwf	prodl,w,c
  6812  0030BE  6ED9               	movwf	fsr2l,c
  6813  0030C0  0E04               	movlw	high (_Channels+8)
  6814  0030C2  20F4               	addwfc	prodh,w,c
  6815  0030C4  6EDA               	movwf	fsr2h,c
  6816  0030C6  C042  FFDE         	movff	btemp+4,postinc2
  6817  0030CA  C043  FFDE         	movff	btemp+5,postinc2
  6818  0030CE  C044  FFDE         	movff	btemp+6,postinc2
  6819  0030D2  C045  FFDE         	movff	btemp+7,postinc2
  6820                           
  6821                           ;lorawan_eu.c: 1235: }
  6822  0030D6  D00D               	goto	l12247
  6823  0030D8                     l12245:
  6824                           
  6825                           ; BSR set to: 2
  6826                           ;lorawan_eu.c: 1236: else
  6827                           ;lorawan_eu.c: 1237: {
  6828                           ;lorawan_eu.c: 1238: Channels[i].channelTimer = 0;
  6829                           ;stkvar	DutyCycleCallback@i @ sp[(-10)+8]
  6830  0030D8  0EFE               	movlw	-2
  6831  0030DA  50E3               	movf	plusw1,w,c
  6832  0030DC  0D0E               	mullw	14
  6833  0030DE  0E08               	movlw	low (_Channels+8)
  6834  0030E0  24F3               	addwf	prodl,w,c
  6835  0030E2  6ED9               	movwf	fsr2l,c
  6836  0030E4  0E04               	movlw	high (_Channels+8)
  6837  0030E6  20F4               	addwfc	prodh,w,c
  6838  0030E8  6EDA               	movwf	fsr2h,c
  6839  0030EA  6ADE               	clrf	postinc2,c
  6840  0030EC  6ADE               	clrf	postinc2,c
  6841  0030EE  6ADE               	clrf	postinc2,c
  6842  0030F0  6ADD               	clrf	postdec2,c
  6843  0030F2                     l12247:
  6844                           
  6845                           ; BSR set to: 2
  6846                           ;lorawan_eu.c: 1239: }
  6847                           ;lorawan_eu.c: 1240: if ( (Channels[i].channelTimer <= minim) && (Channels[i].channelTim
      +                          er != 0) )
  6848                           ;stkvar	DutyCycleCallback@i @ sp[(-10)+8]
  6849  0030F2  0EFE               	movlw	-2
  6850  0030F4  50E3               	movf	plusw1,w,c
  6851  0030F6  0D0E               	mullw	14
  6852  0030F8  0E08               	movlw	low (_Channels+8)
  6853  0030FA  24F3               	addwf	prodl,w,c
  6854  0030FC  6ED9               	movwf	fsr2l,c
  6855  0030FE  0E04               	movlw	high (_Channels+8)
  6856  003100  20F4               	addwfc	prodh,w,c
  6857  003102  6EDA               	movwf	fsr2h,c
  6858                           
  6859                           ;stkvar	DutyCycleCallback@minim @ sp[(-10)+4]
  6860  003104  0EFA               	movlw	-6
  6861  003106  CFE3 F03E          	movff	plusw1,btemp
  6862  00310A  50DE               	movf	postinc2,w,c
  6863  00310C  5C3E               	subwf	btemp,w,c
  6864  00310E  0EFB               	movlw	-5
  6865  003110  CFE3 F03E          	movff	plusw1,btemp
  6866  003114  50DE               	movf	postinc2,w,c
  6867  003116  583E               	subwfb	btemp,w,c
  6868  003118  0EFC               	movlw	-4
  6869  00311A  CFE3 F03E          	movff	plusw1,btemp
  6870  00311E  50DE               	movf	postinc2,w,c
  6871  003120  583E               	subwfb	btemp,w,c
  6872  003122  0EFD               	movlw	-3
  6873  003124  CFE3 F03E          	movff	plusw1,btemp
  6874  003128  50DE               	movf	postinc2,w,c
  6875  00312A  583E               	subwfb	btemp,w,c
  6876  00312C  A0D8               	btfss	status,0,c
  6877  00312E  D02F               	goto	l12255
  6878                           
  6879                           ; BSR set to: 2
  6880                           ;stkvar	DutyCycleCallback@i @ sp[(-10)+8]
  6881  003130  0EFE               	movlw	-2
  6882  003132  50E3               	movf	plusw1,w,c
  6883  003134  0D0E               	mullw	14
  6884  003136  0E08               	movlw	low (_Channels+8)
  6885  003138  24F3               	addwf	prodl,w,c
  6886  00313A  6ED9               	movwf	fsr2l,c
  6887  00313C  0E04               	movlw	high (_Channels+8)
  6888  00313E  20F4               	addwfc	prodh,w,c
  6889  003140  6EDA               	movwf	fsr2h,c
  6890  003142  50DE               	movf	postinc2,w,c
  6891  003144  10DE               	iorwf	postinc2,w,c
  6892  003146  10DE               	iorwf	postinc2,w,c
  6893  003148  10DE               	iorwf	postinc2,w,c
  6894  00314A  B4D8               	btfsc	status,2,c
  6895  00314C  D020               	goto	l12255
  6896                           
  6897                           ; BSR set to: 2
  6898                           ;lorawan_eu.c: 1241: {
  6899                           ;lorawan_eu.c: 1242: minim = Channels[i].channelTimer;
  6900                           ;stkvar	DutyCycleCallback@i @ sp[(-10)+8]
  6901  00314E  0EFE               	movlw	-2
  6902  003150  50E3               	movf	plusw1,w,c
  6903  003152  0D0E               	mullw	14
  6904  003154  0E08               	movlw	low (_Channels+8)
  6905  003156  24F3               	addwf	prodl,w,c
  6906  003158  6ED9               	movwf	fsr2l,c
  6907  00315A  0E04               	movlw	high (_Channels+8)
  6908  00315C  20F4               	addwfc	prodh,w,c
  6909  00315E  6EDA               	movwf	fsr2h,c
  6910  003160  CFDE F046          	movff	postinc2,btemp+8
  6911  003164  CFDE F047          	movff	postinc2,btemp+9
  6912  003168  CFDE F048          	movff	postinc2,btemp+10
  6913  00316C  CFDE F049          	movff	postinc2,btemp+11
  6914                           
  6915                           ;stkvar	DutyCycleCallback@minim @ sp[(-10)+4]
  6916  003170  0EFA               	movlw	-6
  6917  003172  C046  FFE3         	movff	btemp+8,plusw1
  6918  003176  0EFB               	movlw	-5
  6919  003178  C047  FFE3         	movff	btemp+9,plusw1
  6920  00317C  0EFC               	movlw	-4
  6921  00317E  C048  FFE3         	movff	btemp+10,plusw1
  6922  003182  0EFD               	movlw	-3
  6923  003184  C049  FFE3         	movff	btemp+11,plusw1
  6924                           
  6925                           ; BSR set to: 2
  6926                           ;lorawan_eu.c: 1243: found = 1;
  6927                           ;stkvar	DutyCycleCallback@found @ sp[(-10)+9]
  6928  003188  0EFF               	movlw	-1
  6929  00318A  6AE3               	clrf	plusw1,c
  6930  00318C  2AE3               	incf	plusw1,f,c
  6931  00318E                     l12255:
  6932                           
  6933                           ;stkvar	DutyCycleCallback@i @ sp[(-10)+8]
  6934  00318E  0EFE               	movlw	-2
  6935  003190  2AE3               	incf	plusw1,f,c
  6936                           
  6937                           ;stkvar	DutyCycleCallback@i @ sp[(-10)+8]
  6938  003192  0EFE               	movlw	-2
  6939  003194  CFE3 F03E          	movff	plusw1,btemp
  6940  003198  0E0F               	movlw	15
  6941  00319A  643E               	cpfsgt	btemp,c
  6942  00319C  D73F               	goto	l12237
  6943                           
  6944                           ;lorawan_eu.c: 1244: }
  6945                           ;lorawan_eu.c: 1245: }
  6946                           ;lorawan_eu.c: 1246: }
  6947                           ;lorawan_eu.c: 1247: if ( found == 1 )
  6948                           ;stkvar	DutyCycleCallback@found @ sp[(-10)+9]
  6949  00319E  0EFF               	movlw	-1
  6950  0031A0  04E3               	decf	plusw1,w,c
  6951  0031A2  A4D8               	btfss	status,2,c
  6952  0031A4  D09D               	goto	l2143
  6953                           
  6954                           ;lorawan_eu.c: 1248: {
  6955                           ;lorawan_eu.c: 1249: loRa.lastTimerValue = minim;
  6956                           ;stkvar	DutyCycleCallback@minim @ sp[(-10)+4]
  6957  0031A6  50E1               	movf	fsr1l,w,c
  6958  0031A8  0FFA               	addlw	-6
  6959  0031AA  6ED9               	movwf	fsr2l,c
  6960  0031AC  50E2               	movf	fsr1h,w,c
  6961  0031AE  6EDA               	movwf	fsr2h,c
  6962  0031B0  0EFF               	movlw	255
  6963  0031B2  22DA               	addwfc	fsr2h,f,c
  6964  0031B4  CFDE F2CE          	movff	postinc2,_loRa+200
  6965  0031B8  CFDE F2CF          	movff	postinc2,_loRa+201
  6966  0031BC  CFDE F2D0          	movff	postinc2,_loRa+202
  6967  0031C0  CFDE F2D1          	movff	postinc2,_loRa+203
  6968                           
  6969                           ;lorawan_eu.c: 1250: SwTimerSetTimeout (loRa.dutyCycleTimerId, ((minim) < 0x000FFFFFUL ?
      +                           ( (((uint32_t)(minim)) << (12)) / 125UL ) : ( (((uint32_t)(minim)) / 125UL) << (12) ) )
      +                          );
  6970                           ;stkvar	DutyCycleCallback@minim @ sp[(-10)+4]
  6971  0031C4  0EFD               	movlw	-3
  6972  0031C6  50E3               	movf	plusw1,w,c
  6973  0031C8  E10E               	bnz	u13440
  6974  0031CA  0EFA               	movlw	-6
  6975  0031CC  28E3               	incf	plusw1,w,c
  6976  0031CE  0EFB               	movlw	-5
  6977  0031D0  CFE3 F03E          	movff	plusw1,btemp
  6978  0031D4  0EFF               	movlw	255
  6979  0031D6  5A3E               	subwfb	btemp,f,c
  6980  0031D8  0EFC               	movlw	-4
  6981  0031DA  CFE3 F03E          	movff	plusw1,btemp
  6982  0031DE  0E0F               	movlw	15
  6983  0031E0  5A3E               	subwfb	btemp,f,c
  6984  0031E2  A0D8               	btfss	status,0,c
  6985  0031E4  D02B               	goto	l12267
  6986  0031E6                     u13440:
  6987                           
  6988                           ;stkvar	DutyCycleCallback@minim @ sp[(-10)+4]
  6989  0031E6  50E1               	movf	fsr1l,w,c
  6990  0031E8  0FFA               	addlw	-6
  6991  0031EA  6ED9               	movwf	fsr2l,c
  6992  0031EC  50E2               	movf	fsr1h,w,c
  6993  0031EE  6EDA               	movwf	fsr2h,c
  6994  0031F0  0EFF               	movlw	255
  6995  0031F2  22DA               	addwfc	fsr2h,f,c
  6996  0031F4  CFDE F060          	movff	postinc2,___lldiv@dividend
  6997  0031F8  CFDE F061          	movff	postinc2,___lldiv@dividend+1
  6998  0031FC  CFDE F062          	movff	postinc2,___lldiv@dividend+2
  6999  003200  CFDE F063          	movff	postinc2,___lldiv@dividend+3
  7000  003204  0E7D               	movlw	125
  7001  003206  0100               	movlb	0	; () banked
  7002  003208  6F64               	movwf	___lldiv@divisor& (0+255),b
  7003  00320A  0E00               	movlw	0
  7004  00320C  6F65               	movwf	(___lldiv@divisor+1)& (0+255),b
  7005  00320E  0E00               	movlw	0
  7006  003210  6F66               	movwf	(___lldiv@divisor+2)& (0+255),b
  7007  003212  0E00               	movlw	0
  7008  003214  6F67               	movwf	(___lldiv@divisor+3)& (0+255),b
  7009  003216  EC0A  F03D         	call	___lldiv	;wreg free
  7010  00321A  C060  F046         	movff	?___lldiv,btemp+8
  7011  00321E  C061  F047         	movff	?___lldiv+1,btemp+9
  7012  003222  C062  F048         	movff	?___lldiv+2,btemp+10
  7013  003226  C063  F049         	movff	?___lldiv+3,btemp+11
  7014  00322A  0E0C               	movlw	12
  7015  00322C                     u13455:
  7016  00322C  90D8               	bcf	status,0,c
  7017  00322E  3646               	rlcf	btemp+8,f,c
  7018  003230  3647               	rlcf	btemp+9,f,c
  7019  003232  3648               	rlcf	btemp+10,f,c
  7020  003234  3649               	rlcf	btemp+11,f,c
  7021  003236  2EE8               	decfsz	wreg,f,c
  7022  003238  D7F9               	goto	u13455
  7023  00323A  D02F               	goto	L1
  7024  00323C                     l12267:
  7025                           
  7026                           ;stkvar	DutyCycleCallback@minim @ sp[(-10)+4]
  7027  00323C  0EFA               	movlw	-6
  7028  00323E  CFE3 F046          	movff	plusw1,btemp+8
  7029  003242  0EFB               	movlw	-5
  7030  003244  CFE3 F047          	movff	plusw1,btemp+9
  7031  003248  0EFC               	movlw	-4
  7032  00324A  CFE3 F048          	movff	plusw1,btemp+10
  7033  00324E  0EFD               	movlw	-3
  7034  003250  CFE3 F049          	movff	plusw1,btemp+11
  7035  003254  0E0C               	movlw	12
  7036  003256                     u13465:
  7037  003256  90D8               	bcf	status,0,c
  7038  003258  3646               	rlcf	btemp+8,f,c
  7039  00325A  3647               	rlcf	btemp+9,f,c
  7040  00325C  3648               	rlcf	btemp+10,f,c
  7041  00325E  3649               	rlcf	btemp+11,f,c
  7042  003260  2EE8               	decfsz	wreg,f,c
  7043  003262  D7F9               	goto	u13465
  7044  003264  C046  F060         	movff	btemp+8,___lldiv@dividend
  7045  003268  C047  F061         	movff	btemp+9,___lldiv@dividend+1
  7046  00326C  C048  F062         	movff	btemp+10,___lldiv@dividend+2
  7047  003270  C049  F063         	movff	btemp+11,___lldiv@dividend+3
  7048  003274  0E7D               	movlw	125
  7049  003276  0100               	movlb	0	; () banked
  7050  003278  6F64               	movwf	___lldiv@divisor& (0+255),b
  7051  00327A  0E00               	movlw	0
  7052  00327C  6F65               	movwf	(___lldiv@divisor+1)& (0+255),b
  7053  00327E  0E00               	movlw	0
  7054  003280  6F66               	movwf	(___lldiv@divisor+2)& (0+255),b
  7055  003282  0E00               	movlw	0
  7056  003284  6F67               	movwf	(___lldiv@divisor+3)& (0+255),b
  7057  003286  EC0A  F03D         	call	___lldiv	;wreg free
  7058  00328A  C060  F046         	movff	?___lldiv,btemp+8
  7059  00328E  C061  F047         	movff	?___lldiv+1,btemp+9
  7060  003292  C062  F048         	movff	?___lldiv+2,btemp+10
  7061  003296  C063  F049         	movff	?___lldiv+3,btemp+11
  7062  00329A                     L1:
  7063                           
  7064                           ;stkvar	_DutyCycleCallback$2817 @ sp[(-10)+0]
  7065  00329A  0EF6               	movlw	-10
  7066  00329C  C046  FFE3         	movff	btemp+8,plusw1
  7067  0032A0  0EF7               	movlw	-9
  7068  0032A2  C047  FFE3         	movff	btemp+9,plusw1
  7069  0032A6  0EF8               	movlw	-8
  7070  0032A8  C048  FFE3         	movff	btemp+10,plusw1
  7071  0032AC  0EF9               	movlw	-7
  7072  0032AE  C049  FFE3         	movff	btemp+11,plusw1
  7073                           
  7074                           ;stkvar	_DutyCycleCallback$2817 @ sp[(-10)+0]
  7075  0032B2  50E1               	movf	fsr1l,w,c
  7076  0032B4  0FF6               	addlw	-10
  7077  0032B6  6ED9               	movwf	fsr2l,c
  7078  0032B8  50E2               	movf	fsr1h,w,c
  7079  0032BA  6EDA               	movwf	fsr2h,c
  7080  0032BC  0EFF               	movlw	255
  7081  0032BE  22DA               	addwfc	fsr2h,f,c
  7082  0032C0  CFDE F06D          	movff	postinc2,SwTimerSetTimeout@timeout
  7083  0032C4  CFDE F06E          	movff	postinc2,SwTimerSetTimeout@timeout+1
  7084  0032C8  CFDE F06F          	movff	postinc2,SwTimerSetTimeout@timeout+2
  7085  0032CC  CFDE F070          	movff	postinc2,SwTimerSetTimeout@timeout+3
  7086  0032D0  0102               	movlb	2	; () banked
  7087  0032D2  51EF               	movf	(_loRa+233)& (0+255),w,b
  7088  0032D4  EC27  F045         	call	_SwTimerSetTimeout
  7089                           
  7090                           ;lorawan_eu.c: 1251: SwTimerStart (loRa.dutyCycleTimerId);
  7091  0032D8  0102               	movlb	2	; () banked
  7092  0032DA  51EF               	movf	(_loRa+233)& (0+255),w,b
  7093  0032DC  ECDA  F03A         	call	_SwTimerStart
  7094  0032E0                     l2143:
  7095                           
  7096                           ; _DutyCycleCallback: autosize = 10, savesize = 0, parsavesize = 0, tempsize = 0 parsize
      +                           = 1, argsize = 1, vargsize = 0
  7097  0032E0  0EF5               	movlw	245
  7098  0032E2  26E1               	addwf	fsr1l,f,c
  7099  0032E4  0EFF               	movlw	255
  7100  0032E6  22E2               	addwfc	fsr1h,f,c
  7101  0032E8  0012               	return		;funcret
  7102  0032EA                     __end_of_DutyCycleCallback:
  7103                           	opt stack 0
  7104                           tosu	equ	0xFFF
  7105                           tosh	equ	0xFFE
  7106                           tosl	equ	0xFFD
  7107                           pclath	equ	0xFFA
  7108                           tblptru	equ	0xFF8
  7109                           tblptrh	equ	0xFF7
  7110                           tblptrl	equ	0xFF6
  7111                           tablat	equ	0xFF5
  7112                           prodh	equ	0xFF4
  7113                           prodl	equ	0xFF3
  7114                           intcon	equ	0xFF2
  7115                           intcon2	equ	0xFF1
  7116                           intcon3	equ	0xFF0
  7117                           postinc0	equ	0xFEE
  7118                           wreg	equ	0xFE8
  7119                           postinc1	equ	0xFE6
  7120                           plusw1	equ	0xFE3
  7121                           fsr1h	equ	0xFE2
  7122                           fsr1l	equ	0xFE1
  7123                           indf2	equ	0xFDF
  7124                           postinc2	equ	0xFDE
  7125                           postdec2	equ	0xFDD
  7126                           fsr2h	equ	0xFDA
  7127                           fsr2l	equ	0xFD9
  7128                           status	equ	0xFD8
  7129                           
  7130 ;; *************** function _UpdateJoinSuccessState *****************
  7131 ;; Defined at:
  7132 ;;		line 1041 in file "mcc_generated_files/LoRaWAN/lorawan.c"
  7133 ;; Parameters:    Size  Location     Type
  7134 ;;  param           1  [STACK] unsigned char 
  7135 ;; Auto vars:     Size  Location     Type
  7136 ;;		None
  7137 ;; Return value:  Size  Location     Type
  7138 ;;                  1  [STACK] void 
  7139 ;; Registers used:
  7140 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, btemp+8, btemp+9, btemp+10, btemp+11, tosl, prodl, pro
      +dh, cstack
  7141 ;; Tracked objects:
  7142 ;;		On entry : 0/0
  7143 ;;		On exit  : 0/0
  7144 ;;		Unchanged: 0/0
  7145 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7146 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7147 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7148 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7149 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7150 ;;Total ram usage:        0 bytes
  7151 ;; Hardware stack levels used:    1
  7152 ;; Hardware stack levels required when called:   11
  7153 ;; This function calls:
  7154 ;;		_RxJoinResponse
  7155 ;;		_SwTimerSetTimeout
  7156 ;;		_SwTimerStart
  7157 ;;		___lldiv
  7158 ;; This function is called by:
  7159 ;;		_LORAWAN_RxDone
  7160 ;;		_SetCallbackSoftwareTimers
  7161 ;;		_SwTimersExecute
  7162 ;; This function uses a reentrant model
  7163 ;;
  7164                           
  7165                           	psect	text38
  7166  005C08                     __ptext38:
  7167                           	opt stack 0
  7168  005C08                     _UpdateJoinSuccessState:
  7169                           	opt stack 0
  7170                           
  7171                           ; autosize = 4, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, argsize = 1 var
      +                          gsize = 0, retsize = 0
  7172  005C08  52E6               	movf	postinc1,f,c
  7173  005C0A  52E6               	movf	postinc1,f,c
  7174  005C0C  52E6               	movf	postinc1,f,c
  7175  005C0E  52E6               	movf	postinc1,f,c
  7176                           
  7177                           ;lorawan.c: 1043: loRa.lorawanMacStatus.joining = 0;
  7178                           
  7179                           ;incstack = 0
  7180  005C10  0102               	movlb	2	; () banked
  7181  005C12  9506               	bcf	_loRa& (0+255),2,b
  7182                           
  7183                           ;lorawan.c: 1044: loRa.macStatus.networkJoined = 1;
  7184  005C14  8908               	bsf	(_loRa+2)& (0+255),4,b
  7185                           
  7186                           ; BSR set to: 2
  7187                           ;lorawan.c: 1045: loRa.macStatus.macState = IDLE;
  7188  005C16  0EF0               	movlw	-16
  7189  005C18  1708               	andwf	(_loRa+2)& (0+255),f,b
  7190                           
  7191                           ; BSR set to: 2
  7192                           ;lorawan.c: 1047: loRa.adrAckCnt = 0;
  7193  005C1A  6BD6               	clrf	(_loRa+208)& (0+255),b
  7194  005C1C  6BD7               	clrf	(_loRa+209)& (0+255),b
  7195                           
  7196                           ; BSR set to: 2
  7197                           ;lorawan.c: 1048: loRa.counterAdrAckDelay = 0;
  7198  005C1E  6BF4               	clrf	(_loRa+238)& (0+255),b
  7199                           
  7200                           ; BSR set to: 2
  7201                           ;lorawan.c: 1051: if (loRa.macStatus.linkCheck == 1)
  7202  005C20  A509               	btfss	(_loRa+3)& (0+255),2,b
  7203  005C22  D07B               	goto	l10829
  7204                           
  7205                           ; BSR set to: 2
  7206                           ;lorawan.c: 1052: {
  7207                           ;lorawan.c: 1053: SwTimerSetTimeout(loRa.linkCheckTimerId, ((loRa.periodForLinkCheck) < 
      +                          0x000FFFFFUL ? ( (((uint32_t)(loRa.periodForLinkCheck)) << (12)) / 125UL ) : ( (((uint32
      +                          _t)(loRa.periodForLinkCheck)) / 125UL) << (12) ) ));
  7208  005C24  51D5               	movf	(_loRa+207)& (0+255),w,b
  7209  005C26  E107               	bnz	u10790
  7210  005C28  29D2               	incf	(_loRa+204)& (0+255),w,b
  7211  005C2A  0EFF               	movlw	255
  7212  005C2C  59D3               	subwfb	(_loRa+205)& (0+255),w,b
  7213  005C2E  0E0F               	movlw	15
  7214  005C30  59D4               	subwfb	(_loRa+206)& (0+255),w,b
  7215  005C32  A0D8               	btfss	status,0,c
  7216  005C34  D024               	goto	l10823
  7217  005C36                     u10790:
  7218                           
  7219                           ; BSR set to: 2
  7220  005C36  C2D2  F060         	movff	_loRa+204,___lldiv@dividend
  7221  005C3A  C2D3  F061         	movff	_loRa+205,___lldiv@dividend+1
  7222  005C3E  C2D4  F062         	movff	_loRa+206,___lldiv@dividend+2
  7223  005C42  C2D5  F063         	movff	_loRa+207,___lldiv@dividend+3
  7224  005C46  0E7D               	movlw	125
  7225  005C48  0100               	movlb	0	; () banked
  7226  005C4A  6F64               	movwf	___lldiv@divisor& (0+255),b
  7227  005C4C  0E00               	movlw	0
  7228  005C4E  6F65               	movwf	(___lldiv@divisor+1)& (0+255),b
  7229  005C50  0E00               	movlw	0
  7230  005C52  6F66               	movwf	(___lldiv@divisor+2)& (0+255),b
  7231  005C54  0E00               	movlw	0
  7232  005C56  6F67               	movwf	(___lldiv@divisor+3)& (0+255),b
  7233  005C58  EC0A  F03D         	call	___lldiv	;wreg free
  7234  005C5C  C060  F046         	movff	?___lldiv,btemp+8
  7235  005C60  C061  F047         	movff	?___lldiv+1,btemp+9
  7236  005C64  C062  F048         	movff	?___lldiv+2,btemp+10
  7237  005C68  C063  F049         	movff	?___lldiv+3,btemp+11
  7238  005C6C  0E0C               	movlw	12
  7239  005C6E                     u10805:
  7240  005C6E  90D8               	bcf	status,0,c
  7241  005C70  3646               	rlcf	btemp+8,f,c
  7242  005C72  3647               	rlcf	btemp+9,f,c
  7243  005C74  3648               	rlcf	btemp+10,f,c
  7244  005C76  3649               	rlcf	btemp+11,f,c
  7245  005C78  2EE8               	decfsz	wreg,f,c
  7246  005C7A  D7F9               	goto	u10805
  7247  005C7C  D02B               	goto	L2
  7248  005C7E                     l10823:
  7249                           
  7250                           ; BSR set to: 2
  7251  005C7E  C2D2  F046         	movff	_loRa+204,btemp+8
  7252  005C82  C2D3  F047         	movff	_loRa+205,btemp+9
  7253  005C86  C2D4  F048         	movff	_loRa+206,btemp+10
  7254  005C8A  C2D5  F049         	movff	_loRa+207,btemp+11
  7255  005C8E  0E0C               	movlw	12
  7256  005C90                     u10815:
  7257  005C90  90D8               	bcf	status,0,c
  7258  005C92  3646               	rlcf	btemp+8,f,c
  7259  005C94  3647               	rlcf	btemp+9,f,c
  7260  005C96  3648               	rlcf	btemp+10,f,c
  7261  005C98  3649               	rlcf	btemp+11,f,c
  7262  005C9A  2EE8               	decfsz	wreg,f,c
  7263  005C9C  D7F9               	goto	u10815
  7264  005C9E  C046  F060         	movff	btemp+8,___lldiv@dividend
  7265  005CA2  C047  F061         	movff	btemp+9,___lldiv@dividend+1
  7266  005CA6  C048  F062         	movff	btemp+10,___lldiv@dividend+2
  7267  005CAA  C049  F063         	movff	btemp+11,___lldiv@dividend+3
  7268  005CAE  0E7D               	movlw	125
  7269  005CB0  0100               	movlb	0	; () banked
  7270  005CB2  6F64               	movwf	___lldiv@divisor& (0+255),b
  7271  005CB4  0E00               	movlw	0
  7272  005CB6  6F65               	movwf	(___lldiv@divisor+1)& (0+255),b
  7273  005CB8  0E00               	movlw	0
  7274  005CBA  6F66               	movwf	(___lldiv@divisor+2)& (0+255),b
  7275  005CBC  0E00               	movlw	0
  7276  005CBE  6F67               	movwf	(___lldiv@divisor+3)& (0+255),b
  7277  005CC0  EC0A  F03D         	call	___lldiv	;wreg free
  7278  005CC4  C060  F046         	movff	?___lldiv,btemp+8
  7279  005CC8  C061  F047         	movff	?___lldiv+1,btemp+9
  7280  005CCC  C062  F048         	movff	?___lldiv+2,btemp+10
  7281  005CD0  C063  F049         	movff	?___lldiv+3,btemp+11
  7282  005CD4                     L2:
  7283                           
  7284                           ;stkvar	_UpdateJoinSuccessState$1545 @ sp[(-4)+0]
  7285  005CD4  0EFC               	movlw	-4
  7286  005CD6  C046  FFE3         	movff	btemp+8,plusw1
  7287  005CDA  0EFD               	movlw	-3
  7288  005CDC  C047  FFE3         	movff	btemp+9,plusw1
  7289  005CE0  0EFE               	movlw	-2
  7290  005CE2  C048  FFE3         	movff	btemp+10,plusw1
  7291  005CE6  0EFF               	movlw	-1
  7292  005CE8  C049  FFE3         	movff	btemp+11,plusw1
  7293                           
  7294                           ;stkvar	_UpdateJoinSuccessState$1545 @ sp[(-4)+0]
  7295  005CEC  50E1               	movf	fsr1l,w,c
  7296  005CEE  0FFC               	addlw	-4
  7297  005CF0  6ED9               	movwf	fsr2l,c
  7298  005CF2  50E2               	movf	fsr1h,w,c
  7299  005CF4  6EDA               	movwf	fsr2h,c
  7300  005CF6  0EFF               	movlw	255
  7301  005CF8  22DA               	addwfc	fsr2h,f,c
  7302  005CFA  CFDE F06D          	movff	postinc2,SwTimerSetTimeout@timeout
  7303  005CFE  CFDE F06E          	movff	postinc2,SwTimerSetTimeout@timeout+1
  7304  005D02  CFDE F06F          	movff	postinc2,SwTimerSetTimeout@timeout+2
  7305  005D06  CFDE F070          	movff	postinc2,SwTimerSetTimeout@timeout+3
  7306  005D0A  0102               	movlb	2	; () banked
  7307  005D0C  51ED               	movf	(_loRa+231)& (0+255),w,b
  7308  005D0E  EC27  F045         	call	_SwTimerSetTimeout
  7309                           
  7310                           ;lorawan.c: 1054: SwTimerStart(loRa.linkCheckTimerId);
  7311  005D12  0102               	movlb	2	; () banked
  7312  005D14  51ED               	movf	(_loRa+231)& (0+255),w,b
  7313  005D16  ECDA  F03A         	call	_SwTimerStart
  7314  005D1A                     l10829:
  7315                           
  7316                           ;lorawan.c: 1055: }
  7317                           ;lorawan.c: 1057: if (rxPayload.RxJoinResponse != (0))
  7318  005D1A  0101               	movlb	1	; () banked
  7319  005D1C  510E               	movf	(_rxPayload+2)& (0+255),w,b
  7320  005D1E  110F               	iorwf	(_rxPayload+3)& (0+255),w,b
  7321  005D20  B4D8               	btfsc	status,2,c
  7322  005D22  D00C               	goto	u10839
  7323                           
  7324                           ; BSR set to: 1
  7325                           ;lorawan.c: 1058: {
  7326                           ;lorawan.c: 1059: rxPayload.RxJoinResponse(1);
  7327  005D24  D801               	call	u10838
  7328  005D26  D00A               	goto	u10839
  7329  005D28                     u10838:
  7330  005D28  0005               	push	
  7331  005D2A  6EFA               	movwf	pclath,c
  7332  005D2C  510E               	movf	(_rxPayload+2)& (0+255),w,b
  7333  005D2E  6EFD               	movwf	tosl,c
  7334  005D30  510F               	movf	(_rxPayload+3)& (0+255),w,b
  7335  005D32  6EFE               	movwf	tosh,c
  7336  005D34  6AFF               	clrf	tosu,c
  7337  005D36  50FA               	movf	pclath,w,c
  7338  005D38  0E01               	movlw	1
  7339  005D3A  0012               	return		;indir
  7340  005D3C                     u10839:
  7341                           
  7342                           ; _UpdateJoinSuccessState: autosize = 4, savesize = 0, parsavesize = 0, tempsize = 0 par
      +                          size = 1, argsize = 1, vargsize = 0
  7343  005D3C  0EFB               	movlw	251
  7344  005D3E  26E1               	addwf	fsr1l,f,c
  7345  005D40  0EFF               	movlw	255
  7346  005D42  22E2               	addwfc	fsr1h,f,c
  7347  005D44  0012               	return		;funcret
  7348  005D46                     __end_of_UpdateJoinSuccessState:
  7349                           	opt stack 0
  7350                           tosu	equ	0xFFF
  7351                           tosh	equ	0xFFE
  7352                           tosl	equ	0xFFD
  7353                           pclath	equ	0xFFA
  7354                           tblptru	equ	0xFF8
  7355                           tblptrh	equ	0xFF7
  7356                           tblptrl	equ	0xFF6
  7357                           tablat	equ	0xFF5
  7358                           prodh	equ	0xFF4
  7359                           prodl	equ	0xFF3
  7360                           intcon	equ	0xFF2
  7361                           intcon2	equ	0xFF1
  7362                           intcon3	equ	0xFF0
  7363                           postinc0	equ	0xFEE
  7364                           wreg	equ	0xFE8
  7365                           postinc1	equ	0xFE6
  7366                           plusw1	equ	0xFE3
  7367                           fsr1h	equ	0xFE2
  7368                           fsr1l	equ	0xFE1
  7369                           indf2	equ	0xFDF
  7370                           postinc2	equ	0xFDE
  7371                           postdec2	equ	0xFDD
  7372                           fsr2h	equ	0xFDA
  7373                           fsr2l	equ	0xFD9
  7374                           status	equ	0xFD8
  7375                           
  7376 ;; *************** function _AutomaticReplyCallback *****************
  7377 ;; Defined at:
  7378 ;;		line 1017 in file "mcc_generated_files/LoRaWAN/lorawan.c"
  7379 ;; Parameters:    Size  Location     Type
  7380 ;;  param           1  [STACK] unsigned char 
  7381 ;; Auto vars:     Size  Location     Type
  7382 ;;		None
  7383 ;; Return value:  Size  Location     Type
  7384 ;;                  1  [STACK] void 
  7385 ;; Registers used:
  7386 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7387 ;; Tracked objects:
  7388 ;;		On entry : 3F/0
  7389 ;;		On exit  : 3F/2
  7390 ;;		Unchanged: 0/0
  7391 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7392 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7393 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7394 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7395 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7396 ;;Total ram usage:        0 bytes
  7397 ;; Hardware stack levels used:    1
  7398 ;; Hardware stack levels required when called:   14
  7399 ;; This function calls:
  7400 ;;		_LORAWAN_Send
  7401 ;; This function is called by:
  7402 ;;		_SetCallbackSoftwareTimers
  7403 ;;		_SwTimersExecute
  7404 ;; This function uses a reentrant model
  7405 ;;
  7406                           
  7407                           	psect	text39
  7408  009084                     __ptext39:
  7409                           	opt stack 0
  7410  009084                     _AutomaticReplyCallback:
  7411                           	opt stack 14
  7412                           
  7413                           ;lorawan.c: 1019: loRa.macStatus.macState = IDLE;
  7414                           
  7415                           ; autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, argsize = 1 var
      +                          gsize = 0, retsize = 0
  7416                           ;incstack = 0
  7417  009084  0EF0               	movlw	-16
  7418  009086  0102               	movlb	2	; () banked
  7419  009088  1708               	andwf	(_loRa+2)& (0+255),f,b
  7420                           
  7421                           ; BSR set to: 2
  7422                           ;lorawan.c: 1020: LORAWAN_Send (0, 0, 0, 0);
  7423  00908A  0E00               	movlw	0
  7424  00908C  0100               	movlb	0	; () banked
  7425  00908E  6FD3               	movwf	LORAWAN_Send@port& (0+255),b
  7426  009090  0E00               	movlw	0
  7427  009092  6FD4               	movwf	LORAWAN_Send@buffer& (0+255),b
  7428  009094  0E00               	movlw	0
  7429  009096  6FD5               	movwf	(LORAWAN_Send@buffer+1)& (0+255),b
  7430  009098  0E00               	movlw	0
  7431  00909A  6FD6               	movwf	LORAWAN_Send@bufferLength& (0+255),b
  7432  00909C  0E00               	movlw	0
  7433  00909E  ECFC  F036         	call	_LORAWAN_Send
  7434                           
  7435                           ;lorawan.c: 1021: loRa.lorawanMacStatus.fPending = 0;
  7436  0090A2  0102               	movlb	2	; () banked
  7437  0090A4  9706               	bcf	_loRa& (0+255),3,b
  7438                           
  7439                           ; BSR set to: 2
  7440                           ; _AutomaticReplyCallback: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 par
      +                          size = 1, argsize = 1, vargsize = 0
  7441  0090A6  52E5               	movf	postdec1,f,c
  7442  0090A8  0012               	return		;funcret
  7443  0090AA                     __end_of_AutomaticReplyCallback:
  7444                           	opt stack 0
  7445                           tosu	equ	0xFFF
  7446                           tosh	equ	0xFFE
  7447                           tosl	equ	0xFFD
  7448                           pclath	equ	0xFFA
  7449                           tblptru	equ	0xFF8
  7450                           tblptrh	equ	0xFF7
  7451                           tblptrl	equ	0xFF6
  7452                           tablat	equ	0xFF5
  7453                           prodh	equ	0xFF4
  7454                           prodl	equ	0xFF3
  7455                           intcon	equ	0xFF2
  7456                           intcon2	equ	0xFF1
  7457                           intcon3	equ	0xFF0
  7458                           postinc0	equ	0xFEE
  7459                           wreg	equ	0xFE8
  7460                           postinc1	equ	0xFE6
  7461                           postdec1	equ	0xFE5
  7462                           plusw1	equ	0xFE3
  7463                           fsr1h	equ	0xFE2
  7464                           fsr1l	equ	0xFE1
  7465                           indf2	equ	0xFDF
  7466                           postinc2	equ	0xFDE
  7467                           postdec2	equ	0xFDD
  7468                           fsr2h	equ	0xFDA
  7469                           fsr2l	equ	0xFD9
  7470                           status	equ	0xFD8
  7471                           
  7472 ;; *************** function _AckRetransmissionCallback *****************
  7473 ;; Defined at:
  7474 ;;		line 934 in file "mcc_generated_files/LoRaWAN/lorawan.c"
  7475 ;; Parameters:    Size  Location     Type
  7476 ;;  param           1  [STACK] unsigned char 
  7477 ;; Auto vars:     Size  Location     Type
  7478 ;;  maximumPacke    1  [STACK] unsigned char 
  7479 ;; Return value:  Size  Location     Type
  7480 ;;                  1  [STACK] void 
  7481 ;; Registers used:
  7482 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, btemp+1, btemp+2, btemp+10, btemp+11, to
      +sl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7483 ;; Tracked objects:
  7484 ;;		On entry : 3F/0
  7485 ;;		On exit  : 0/0
  7486 ;;		Unchanged: 0/0
  7487 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7488 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7489 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7490 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7491 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7492 ;;Total ram usage:        0 bytes
  7493 ;; Hardware stack levels used:    1
  7494 ;; Hardware stack levels required when called:   13
  7495 ;; This function calls:
  7496 ;;		_FindSmallestDataRate
  7497 ;;		_LORAWAN_GetMaxPayloadSize
  7498 ;;		_RADIO_Transmit
  7499 ;;		_ResetParametersForConfirmedTransmission
  7500 ;;		_RxData
  7501 ;;		_SelectChannelForTransmission
  7502 ;;		_UpdateRetransmissionAckTimeoutState
  7503 ;; This function is called by:
  7504 ;;		_SetCallbackSoftwareTimers
  7505 ;;		_SwTimersExecute
  7506 ;; This function uses a reentrant model
  7507 ;;
  7508                           
  7509                           	psect	text40
  7510  0060C4                     __ptext40:
  7511                           	opt stack 0
  7512  0060C4                     _AckRetransmissionCallback:
  7513                           	opt stack 0
  7514                           
  7515                           ; BSR set to: 2
  7516                           ; autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, argsize = 1 var
      +                          gsize = 0, retsize = 0
  7517  0060C4  52E6               	movf	postinc1,f,c
  7518                           
  7519                           ;lorawan.c: 936: uint8_t maximumPacketSize;
  7520                           ;lorawan.c: 938: if (loRa.macStatus.macPause == 0)
  7521                           
  7522                           ;incstack = 0
  7523  0060C6  0102               	movlb	2	; () banked
  7524  0060C8  B109               	btfsc	(_loRa+3)& (0+255),0,b
  7525  0060CA  D086               	goto	l12139
  7526                           
  7527                           ; BSR set to: 2
  7528                           ;lorawan.c: 939: {
  7529                           ;lorawan.c: 940: if (loRa.counterRepetitionsConfirmedUplink <= loRa.maxRepetitionsConfir
      +                          medUplink)
  7530  0060CC  51DF               	movf	(_loRa+217)& (0+255),w,b
  7531  0060CE  5DDD               	subwf	(_loRa+215)& (0+255),w,b
  7532  0060D0  A0D8               	btfss	status,0,c
  7533  0060D2  D061               	goto	l12129
  7534                           
  7535                           ; BSR set to: 2
  7536                           ;lorawan.c: 941: {
  7537                           ;lorawan.c: 942: maximumPacketSize = LORAWAN_GetMaxPayloadSize () + 13;
  7538  0060D4  EC2D  F041         	call	_LORAWAN_GetMaxPayloadSize	;wreg free
  7539  0060D8  6E49               	movwf	btemp+11,c
  7540  0060DA  0E0D               	movlw	13
  7541  0060DC  2649               	addwf	btemp+11,f,c
  7542                           
  7543                           ;stkvar	AckRetransmissionCallback@maximumPacketSize @ sp[(-1)+0]
  7544  0060DE  0EFF               	movlw	-1
  7545  0060E0  C049  FFE3         	movff	btemp+11,plusw1
  7546                           
  7547                           ;lorawan.c: 945: if (loRa.lastPacketLength <= maximumPacketSize)
  7548                           ;stkvar	AckRetransmissionCallback@maximumPacketSize @ sp[(-1)+0]
  7549  0060E4  0EFF               	movlw	-1
  7550  0060E6  50E3               	movf	plusw1,w,c
  7551  0060E8  6E3F               	movwf	btemp+1,c
  7552  0060EA  6A40               	clrf	btemp+2,c
  7553  0060EC  0102               	movlb	2	; () banked
  7554  0060EE  51DA               	movf	(_loRa+212)& (0+255),w,b
  7555  0060F0  5C3F               	subwf	btemp+1,w,c
  7556  0060F2  51DB               	movf	(_loRa+213)& (0+255),w,b
  7557  0060F4  5840               	subwfb	btemp+2,w,c
  7558  0060F6  A0D8               	btfss	status,0,c
  7559  0060F8  D039               	goto	l12123
  7560                           
  7561                           ; BSR set to: 2
  7562                           ;lorawan.c: 946: {
  7563                           ;lorawan.c: 947: if (SelectChannelForTransmission (1) == OK)
  7564  0060FA  0E01               	movlw	1
  7565  0060FC  EC2F  F03F         	call	_SelectChannelForTransmission
  7566  006100  0900               	iorlw	0
  7567  006102  A4D8               	btfss	status,2,c
  7568  006104  D030               	goto	l12119
  7569                           
  7570                           ;lorawan.c: 948: {
  7571                           ;lorawan.c: 950: if (RADIO_Transmit (&macBuffer[16], loRa.lastPacketLength) == OK)
  7572  006106  0E9F               	movlw	low (_macBuffer+16)
  7573  006108  0100               	movlb	0	; () banked
  7574  00610A  6FB1               	movwf	RADIO_Transmit@buffer& (0+255),b
  7575  00610C  0E06               	movlw	high (_macBuffer+16)
  7576  00610E  6FB2               	movwf	(RADIO_Transmit@buffer+1)& (0+255),b
  7577  006110  C2DA  F0B3         	movff	_loRa+212,RADIO_Transmit@bufferLen
  7578  006114  EC11  F020         	call	_RADIO_Transmit	;wreg free
  7579  006118  C0B1  F03F         	movff	?_RADIO_Transmit,btemp+1
  7580  00611C  C0B2  F040         	movff	?_RADIO_Transmit+1,btemp+2
  7581  006120  503F               	movf	btemp+1,w,c
  7582  006122  1040               	iorwf	btemp+2,w,c
  7583  006124  A4D8               	btfss	status,2,c
  7584  006126  D01F               	goto	l12119
  7585                           
  7586                           ;lorawan.c: 951: {
  7587                           ;lorawan.c: 952: loRa.macStatus.macState = TRANSMISSION_OCCURRING;
  7588  006128  0102               	movlb	2	; () banked
  7589  00612A  5108               	movf	(_loRa+2)& (0+255),w,b
  7590  00612C  0BF0               	andlw	-16
  7591  00612E  0901               	iorlw	1
  7592  006130  6F08               	movwf	(_loRa+2)& (0+255),b
  7593                           
  7594                           ; BSR set to: 2
  7595                           ;lorawan.c: 953: loRa.counterRepetitionsConfirmedUplink ++ ;
  7596  006132  2BDF               	incf	(_loRa+217)& (0+255),f,b
  7597                           
  7598                           ; BSR set to: 2
  7599                           ;lorawan.c: 956: if ( ( (loRa.counterRepetitionsConfirmedUplink % 2) == 0) && (loRa.curr
      +                          entDataRate != 0) && (loRa.counterRepetitionsConfirmedUplink != (loRa.maxRepetitionsConf
      +                          irmedUplink + 1) ) )
  7600  006134  B1DF               	btfsc	(_loRa+217)& (0+255),0,b
  7601  006136  D052               	goto	l1094
  7602                           
  7603                           ; BSR set to: 2
  7604  006138  51E5               	movf	(_loRa+223)& (0+255),w,b
  7605  00613A  B4D8               	btfsc	status,2,c
  7606  00613C  D04F               	goto	l1094
  7607                           
  7608                           ; BSR set to: 2
  7609  00613E  51DF               	movf	(_loRa+217)& (0+255),w,b
  7610  006140  6E3F               	movwf	btemp+1,c
  7611  006142  6A40               	clrf	btemp+2,c
  7612  006144  51DD               	movf	(_loRa+215)& (0+255),w,b
  7613  006146  6E48               	movwf	btemp+10,c
  7614  006148  6A49               	clrf	btemp+11,c
  7615  00614A  0E01               	movlw	1
  7616  00614C  2648               	addwf	btemp+10,f,c
  7617  00614E  0E00               	movlw	0
  7618  006150  2249               	addwfc	btemp+11,f,c
  7619  006152  503F               	movf	btemp+1,w,c
  7620  006154  1848               	xorwf	btemp+10,w,c
  7621  006156  E104               	bnz	u13170
  7622  006158  5040               	movf	btemp+2,w,c
  7623  00615A  1849               	xorwf	btemp+11,w,c
  7624  00615C  B4D8               	btfsc	status,2,c
  7625  00615E  D03E               	goto	l1094
  7626  006160                     u13170:
  7627                           
  7628                           ; BSR set to: 2
  7629                           ;lorawan.c: 957: {
  7630                           ;lorawan.c: 958: FindSmallestDataRate();
  7631  006160  ECB2  F035         	call	_FindSmallestDataRate	;wreg free
  7632  006164  D03B               	goto	l1094
  7633  006166                     l12119:
  7634                           
  7635                           ;lorawan.c: 961: else
  7636                           ;lorawan.c: 962: {
  7637                           ;lorawan.c: 964: UpdateRetransmissionAckTimeoutState ();
  7638  006166  ECC0  F03E         	call	_UpdateRetransmissionAckTimeoutState	;wreg free
  7639  00616A  D038               	goto	l1094
  7640  00616C                     l12123:
  7641                           
  7642                           ; BSR set to: 2
  7643                           ;lorawan.c: 973: else
  7644                           ;lorawan.c: 974: {
  7645                           ;lorawan.c: 975: ResetParametersForConfirmedTransmission ();
  7646  00616C  ECF7  F049         	call	_ResetParametersForConfirmedTransmission	;wreg free
  7647                           
  7648                           ;lorawan.c: 976: if (rxPayload.RxAppData != (0))
  7649  006170  0101               	movlb	1	; () banked
  7650  006172  510C               	movf	_rxPayload& (0+255),w,b
  7651  006174  110D               	iorwf	(_rxPayload+1)& (0+255),w,b
  7652  006176  B4D8               	btfsc	status,2,c
  7653  006178  D031               	goto	l1094
  7654                           
  7655                           ; BSR set to: 1
  7656                           ;lorawan.c: 977: {
  7657                           ;lorawan.c: 978: rxPayload.RxAppData((0), 0, INVALID_BUFFER_LEN);
  7658  00617A  0E00               	movlw	0
  7659  00617C  0100               	movlb	0	; () banked
  7660  00617E  6F60               	movwf	RxData@pData& (0+255),b
  7661  006180  0E00               	movlw	0
  7662  006182  6F61               	movwf	(RxData@pData+1)& (0+255),b
  7663  006184  0E00               	movlw	0
  7664  006186  6F62               	movwf	RxData@dataLength& (0+255),b
  7665  006188  0E04               	movlw	4
  7666  00618A  6F63               	movwf	RxData@status& (0+255),b
  7667  00618C  D801               	call	u13198
  7668  00618E  D026               	goto	l1094
  7669  006190                     u13198:
  7670  006190  0005               	push	
  7671  006192  6EFA               	movwf	pclath,c
  7672  006194  D019               	goto	L3
  7673  006196                     l12129:
  7674                           
  7675                           ; BSR set to: 2
  7676                           ;lorawan.c: 982: else if ( (loRa.counterRepetitionsConfirmedUplink > loRa.maxRepetitions
      +                          ConfirmedUplink) && (loRa.macStatus.macPause == 0) )
  7677  006196  51DF               	movf	(_loRa+217)& (0+255),w,b
  7678  006198  5DDD               	subwf	(_loRa+215)& (0+255),w,b
  7679  00619A  A0D8               	btfss	status,0,c
  7680                           
  7681                           ; BSR set to: 2
  7682  00619C  B109               	btfsc	(_loRa+3)& (0+255),0,b
  7683  00619E  D01E               	goto	l1094
  7684                           
  7685                           ; BSR set to: 2
  7686                           ;lorawan.c: 983: {
  7687                           ;lorawan.c: 984: ResetParametersForConfirmedTransmission ();
  7688  0061A0  ECF7  F049         	call	_ResetParametersForConfirmedTransmission	;wreg free
  7689                           
  7690                           ;lorawan.c: 985: if (rxPayload.RxAppData != (0))
  7691  0061A4  0101               	movlb	1	; () banked
  7692  0061A6  510C               	movf	_rxPayload& (0+255),w,b
  7693  0061A8  110D               	iorwf	(_rxPayload+1)& (0+255),w,b
  7694  0061AA  B4D8               	btfsc	status,2,c
  7695  0061AC  D017               	goto	l1094
  7696                           
  7697                           ; BSR set to: 1
  7698                           ;lorawan.c: 986: {
  7699                           ;lorawan.c: 987: rxPayload.RxAppData((0), 0, MAC_NOT_OK);
  7700  0061AE  0E00               	movlw	0
  7701  0061B0  0100               	movlb	0	; () banked
  7702  0061B2  6F60               	movwf	RxData@pData& (0+255),b
  7703  0061B4  0E00               	movlw	0
  7704  0061B6  6F61               	movwf	(RxData@pData+1)& (0+255),b
  7705  0061B8  0E00               	movlw	0
  7706  0061BA  6F62               	movwf	RxData@dataLength& (0+255),b
  7707  0061BC  0E00               	movlw	0
  7708  0061BE  6F63               	movwf	RxData@status& (0+255),b
  7709  0061C0  D801               	call	u13238
  7710  0061C2  D00C               	goto	l1094
  7711  0061C4                     u13238:
  7712  0061C4  0005               	push	
  7713  0061C6  6EFA               	movwf	pclath,c
  7714  0061C8                     L3:
  7715  0061C8  0101               	movlb	1	; () banked
  7716  0061CA  510C               	movf	_rxPayload& (0+255),w,b
  7717  0061CC  6EFD               	movwf	tosl,c
  7718  0061CE  510D               	movf	(_rxPayload+1)& (0+255),w,b
  7719  0061D0  6EFE               	movwf	tosh,c
  7720  0061D2  6AFF               	clrf	tosu,c
  7721  0061D4  50FA               	movf	pclath,w,c
  7722  0061D6  0012               	return		;indir
  7723  0061D8                     l12139:
  7724                           
  7725                           ; BSR set to: 2
  7726                           ;lorawan.c: 991: else
  7727                           ;lorawan.c: 992: {
  7728                           ;lorawan.c: 993: ResetParametersForConfirmedTransmission ();
  7729  0061D8  ECF7  F049         	call	_ResetParametersForConfirmedTransmission	;wreg free
  7730  0061DC                     l1094:
  7731                           
  7732                           ; _AckRetransmissionCallback: autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 
      +                          parsize = 1, argsize = 1, vargsize = 0
  7733  0061DC  52E5               	movf	postdec1,f,c
  7734  0061DE  52E5               	movf	postdec1,f,c
  7735  0061E0  0012               	return		;funcret
  7736  0061E2                     __end_of_AckRetransmissionCallback:
  7737                           	opt stack 0
  7738                           tosu	equ	0xFFF
  7739                           tosh	equ	0xFFE
  7740                           tosl	equ	0xFFD
  7741                           pclath	equ	0xFFA
  7742                           tblptru	equ	0xFF8
  7743                           tblptrh	equ	0xFF7
  7744                           tblptrl	equ	0xFF6
  7745                           tablat	equ	0xFF5
  7746                           prodh	equ	0xFF4
  7747                           prodl	equ	0xFF3
  7748                           intcon	equ	0xFF2
  7749                           intcon2	equ	0xFF1
  7750                           intcon3	equ	0xFF0
  7751                           postinc0	equ	0xFEE
  7752                           wreg	equ	0xFE8
  7753                           postinc1	equ	0xFE6
  7754                           postdec1	equ	0xFE5
  7755                           plusw1	equ	0xFE3
  7756                           fsr1h	equ	0xFE2
  7757                           fsr1l	equ	0xFE1
  7758                           indf2	equ	0xFDF
  7759                           postinc2	equ	0xFDE
  7760                           postdec2	equ	0xFDD
  7761                           fsr2h	equ	0xFDA
  7762                           fsr2l	equ	0xFD9
  7763                           status	equ	0xFD8
  7764                           
  7765 ;; *************** function _LORAWAN_LinkCheckCallback *****************
  7766 ;; Defined at:
  7767 ;;		line 881 in file "mcc_generated_files/LoRaWAN/lorawan.c"
  7768 ;; Parameters:    Size  Location     Type
  7769 ;;  param           1  [STACK] unsigned char 
  7770 ;; Auto vars:     Size  Location     Type
  7771 ;;  iCtr            1  [STACK] unsigned char 
  7772 ;; Return value:  Size  Location     Type
  7773 ;;                  1  [STACK] void 
  7774 ;; Registers used:
  7775 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+8, btemp+9, btemp+10, btemp+11, prodl, prodh, cst
      +ack
  7776 ;; Tracked objects:
  7777 ;;		On entry : 3F/0
  7778 ;;		On exit  : 0/0
  7779 ;;		Unchanged: 0/0
  7780 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7781 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7782 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7783 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7784 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7785 ;;Total ram usage:        0 bytes
  7786 ;; Hardware stack levels used:    1
  7787 ;; Hardware stack levels required when called:   11
  7788 ;; This function calls:
  7789 ;;		_SwTimerSetTimeout
  7790 ;;		_SwTimerStart
  7791 ;;		___lldiv
  7792 ;; This function is called by:
  7793 ;;		_SetCallbackSoftwareTimers
  7794 ;;		_SwTimersExecute
  7795 ;; This function uses a reentrant model
  7796 ;;
  7797                           
  7798                           	psect	text41
  7799  00526E                     __ptext41:
  7800                           	opt stack 0
  7801  00526E                     _LORAWAN_LinkCheckCallback:
  7802                           	opt stack 0
  7803                           
  7804                           ; autosize = 5, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, argsize = 1 var
      +                          gsize = 0, retsize = 0
  7805  00526E  0E05               	movlw	5
  7806  005270  26E1               	addwf	fsr1l,f,c
  7807  005272  0E00               	movlw	0
  7808  005274  22E2               	addwfc	fsr1h,f,c
  7809                           
  7810                           ;lorawan.c: 885: if ((loRa.macStatus.macPause == 0) && (loRa.macStatus.linkCheck == 1))
  7811                           
  7812                           ;incstack = 0
  7813  005276  0102               	movlb	2	; () banked
  7814  005278  A109               	btfss	(_loRa+3)& (0+255),0,b
  7815                           
  7816                           ; BSR set to: 2
  7817  00527A  A509               	btfss	(_loRa+3)& (0+255),2,b
  7818  00527C  D02C               	goto	l12083
  7819                           
  7820                           ; BSR set to: 2
  7821                           ;lorawan.c: 886: {
  7822                           ;lorawan.c: 888: for(iCtr = 0; iCtr < loRa.crtMacCmdIndex; iCtr ++)
  7823                           ;stkvar	LORAWAN_LinkCheckCallback@iCtr @ sp[(-5)+4]
  7824  00527E  0EFF               	movlw	-1
  7825  005280  6AE3               	clrf	plusw1,c
  7826  005282  D00F               	goto	l12073
  7827  005284                     l12067:
  7828                           
  7829                           ; BSR set to: 2
  7830                           ;lorawan.c: 889: {
  7831                           ;lorawan.c: 890: if(loRa.macCommands[iCtr].receivedCid == LINK_CHECK_CID)
  7832                           ;stkvar	LORAWAN_LinkCheckCallback@iCtr @ sp[(-5)+4]
  7833  005284  0EFF               	movlw	-1
  7834  005286  50E3               	movf	plusw1,w,c
  7835  005288  0D02               	mullw	2
  7836  00528A  0EAE               	movlw	low (_loRa+168)
  7837  00528C  24F3               	addwf	prodl,w,c
  7838  00528E  6ED9               	movwf	fsr2l,c
  7839  005290  0E02               	movlw	high (_loRa+168)
  7840  005292  20F4               	addwfc	prodh,w,c
  7841  005294  6EDA               	movwf	fsr2h,c
  7842  005296  0E02               	movlw	2
  7843  005298  18DE               	xorwf	postinc2,w,c
  7844  00529A  B4D8               	btfsc	status,2,c
  7845  00529C  D009               	goto	u13030
  7846                           
  7847                           ; BSR set to: 2
  7848                           ;stkvar	LORAWAN_LinkCheckCallback@iCtr @ sp[(-5)+4]
  7849  00529E  0EFF               	movlw	-1
  7850  0052A0  2AE3               	incf	plusw1,f,c
  7851  0052A2                     l12073:
  7852                           
  7853                           ; BSR set to: 2
  7854                           ;stkvar	LORAWAN_LinkCheckCallback@iCtr @ sp[(-5)+4]
  7855  0052A2  0EFF               	movlw	-1
  7856  0052A4  CFE3 F03E          	movff	plusw1,btemp
  7857  0052A8  51AD               	movf	(_loRa+167)& (0+255),w,b
  7858  0052AA  5C3E               	subwf	btemp,w,c
  7859  0052AC  A0D8               	btfss	status,0,c
  7860  0052AE  D7EA               	goto	l12067
  7861  0052B0                     u13030:
  7862                           
  7863                           ; BSR set to: 2
  7864                           ;lorawan.c: 893: }
  7865                           ;lorawan.c: 894: }
  7866                           ;lorawan.c: 896: if(iCtr == loRa.crtMacCmdIndex)
  7867                           ;stkvar	LORAWAN_LinkCheckCallback@iCtr @ sp[(-5)+4]
  7868  0052B0  0EFF               	movlw	-1
  7869  0052B2  50E3               	movf	plusw1,w,c
  7870  0052B4  19AD               	xorwf	(_loRa+167)& (0+255),w,b
  7871  0052B6  A4D8               	btfss	status,2,c
  7872  0052B8  D00E               	goto	l12083
  7873                           
  7874                           ; BSR set to: 2
  7875                           ;lorawan.c: 897: {
  7876                           ;lorawan.c: 898: loRa.macCommands[loRa.crtMacCmdIndex].receivedCid = LINK_CHECK_CID;
  7877  0052BA  51AD               	movf	(_loRa+167)& (0+255),w,b
  7878  0052BC  0D02               	mullw	2
  7879  0052BE  0EAE               	movlw	low (_loRa+168)
  7880  0052C0  24F3               	addwf	prodl,w,c
  7881  0052C2  6ED9               	movwf	fsr2l,c
  7882  0052C4  0E02               	movlw	high (_loRa+168)
  7883  0052C6  20F4               	addwfc	prodh,w,c
  7884  0052C8  6EDA               	movwf	fsr2h,c
  7885  0052CA  0E02               	movlw	2
  7886  0052CC  6EDF               	movwf	indf2,c
  7887                           
  7888                           ; BSR set to: 2
  7889                           ;lorawan.c: 900: if(loRa.crtMacCmdIndex < 16)
  7890  0052CE  0E10               	movlw	16
  7891  0052D0  61AD               	cpfslt	(_loRa+167)& (0+255),b
  7892  0052D2  D001               	goto	l12083
  7893                           
  7894                           ; BSR set to: 2
  7895                           ;lorawan.c: 901: {
  7896                           ;lorawan.c: 902: loRa.crtMacCmdIndex ++;
  7897  0052D4  2BAD               	incf	(_loRa+167)& (0+255),f,b
  7898  0052D6                     l12083:
  7899                           
  7900                           ; BSR set to: 2
  7901                           ;lorawan.c: 903: }
  7902                           ;lorawan.c: 904: }
  7903                           ;lorawan.c: 905: }
  7904                           ;lorawan.c: 908: if (loRa.macStatus.linkCheck == 1)
  7905  0052D6  A509               	btfss	(_loRa+3)& (0+255),2,b
  7906  0052D8  D07B               	goto	l1072
  7907                           
  7908                           ; BSR set to: 2
  7909                           ;lorawan.c: 909: {
  7910                           ;lorawan.c: 910: SwTimerSetTimeout(loRa.linkCheckTimerId, ((loRa.periodForLinkCheck) < 0
      +                          x000FFFFFUL ? ( (((uint32_t)(loRa.periodForLinkCheck)) << (12)) / 125UL ) : ( (((uint32_
      +                          t)(loRa.periodForLinkCheck)) / 125UL) << (12) ) ));
  7911  0052DA  51D5               	movf	(_loRa+207)& (0+255),w,b
  7912  0052DC  E107               	bnz	u13070
  7913  0052DE  29D2               	incf	(_loRa+204)& (0+255),w,b
  7914  0052E0  0EFF               	movlw	255
  7915  0052E2  59D3               	subwfb	(_loRa+205)& (0+255),w,b
  7916  0052E4  0E0F               	movlw	15
  7917  0052E6  59D4               	subwfb	(_loRa+206)& (0+255),w,b
  7918  0052E8  A0D8               	btfss	status,0,c
  7919  0052EA  D024               	goto	l12089
  7920  0052EC                     u13070:
  7921                           
  7922                           ; BSR set to: 2
  7923  0052EC  C2D2  F060         	movff	_loRa+204,___lldiv@dividend
  7924  0052F0  C2D3  F061         	movff	_loRa+205,___lldiv@dividend+1
  7925  0052F4  C2D4  F062         	movff	_loRa+206,___lldiv@dividend+2
  7926  0052F8  C2D5  F063         	movff	_loRa+207,___lldiv@dividend+3
  7927  0052FC  0E7D               	movlw	125
  7928  0052FE  0100               	movlb	0	; () banked
  7929  005300  6F64               	movwf	___lldiv@divisor& (0+255),b
  7930  005302  0E00               	movlw	0
  7931  005304  6F65               	movwf	(___lldiv@divisor+1)& (0+255),b
  7932  005306  0E00               	movlw	0
  7933  005308  6F66               	movwf	(___lldiv@divisor+2)& (0+255),b
  7934  00530A  0E00               	movlw	0
  7935  00530C  6F67               	movwf	(___lldiv@divisor+3)& (0+255),b
  7936  00530E  EC0A  F03D         	call	___lldiv	;wreg free
  7937  005312  C060  F046         	movff	?___lldiv,btemp+8
  7938  005316  C061  F047         	movff	?___lldiv+1,btemp+9
  7939  00531A  C062  F048         	movff	?___lldiv+2,btemp+10
  7940  00531E  C063  F049         	movff	?___lldiv+3,btemp+11
  7941  005322  0E0C               	movlw	12
  7942  005324                     u13085:
  7943  005324  90D8               	bcf	status,0,c
  7944  005326  3646               	rlcf	btemp+8,f,c
  7945  005328  3647               	rlcf	btemp+9,f,c
  7946  00532A  3648               	rlcf	btemp+10,f,c
  7947  00532C  3649               	rlcf	btemp+11,f,c
  7948  00532E  2EE8               	decfsz	wreg,f,c
  7949  005330  D7F9               	goto	u13085
  7950  005332  D02B               	goto	L4
  7951  005334                     l12089:
  7952                           
  7953                           ; BSR set to: 2
  7954  005334  C2D2  F046         	movff	_loRa+204,btemp+8
  7955  005338  C2D3  F047         	movff	_loRa+205,btemp+9
  7956  00533C  C2D4  F048         	movff	_loRa+206,btemp+10
  7957  005340  C2D5  F049         	movff	_loRa+207,btemp+11
  7958  005344  0E0C               	movlw	12
  7959  005346                     u13095:
  7960  005346  90D8               	bcf	status,0,c
  7961  005348  3646               	rlcf	btemp+8,f,c
  7962  00534A  3647               	rlcf	btemp+9,f,c
  7963  00534C  3648               	rlcf	btemp+10,f,c
  7964  00534E  3649               	rlcf	btemp+11,f,c
  7965  005350  2EE8               	decfsz	wreg,f,c
  7966  005352  D7F9               	goto	u13095
  7967  005354  C046  F060         	movff	btemp+8,___lldiv@dividend
  7968  005358  C047  F061         	movff	btemp+9,___lldiv@dividend+1
  7969  00535C  C048  F062         	movff	btemp+10,___lldiv@dividend+2
  7970  005360  C049  F063         	movff	btemp+11,___lldiv@dividend+3
  7971  005364  0E7D               	movlw	125
  7972  005366  0100               	movlb	0	; () banked
  7973  005368  6F64               	movwf	___lldiv@divisor& (0+255),b
  7974  00536A  0E00               	movlw	0
  7975  00536C  6F65               	movwf	(___lldiv@divisor+1)& (0+255),b
  7976  00536E  0E00               	movlw	0
  7977  005370  6F66               	movwf	(___lldiv@divisor+2)& (0+255),b
  7978  005372  0E00               	movlw	0
  7979  005374  6F67               	movwf	(___lldiv@divisor+3)& (0+255),b
  7980  005376  EC0A  F03D         	call	___lldiv	;wreg free
  7981  00537A  C060  F046         	movff	?___lldiv,btemp+8
  7982  00537E  C061  F047         	movff	?___lldiv+1,btemp+9
  7983  005382  C062  F048         	movff	?___lldiv+2,btemp+10
  7984  005386  C063  F049         	movff	?___lldiv+3,btemp+11
  7985  00538A                     L4:
  7986                           
  7987                           ;stkvar	_LORAWAN_LinkCheckCallback$1528 @ sp[(-5)+0]
  7988  00538A  0EFB               	movlw	-5
  7989  00538C  C046  FFE3         	movff	btemp+8,plusw1
  7990  005390  0EFC               	movlw	-4
  7991  005392  C047  FFE3         	movff	btemp+9,plusw1
  7992  005396  0EFD               	movlw	-3
  7993  005398  C048  FFE3         	movff	btemp+10,plusw1
  7994  00539C  0EFE               	movlw	-2
  7995  00539E  C049  FFE3         	movff	btemp+11,plusw1
  7996                           
  7997                           ;stkvar	_LORAWAN_LinkCheckCallback$1528 @ sp[(-5)+0]
  7998  0053A2  50E1               	movf	fsr1l,w,c
  7999  0053A4  0FFB               	addlw	-5
  8000  0053A6  6ED9               	movwf	fsr2l,c
  8001  0053A8  50E2               	movf	fsr1h,w,c
  8002  0053AA  6EDA               	movwf	fsr2h,c
  8003  0053AC  0EFF               	movlw	255
  8004  0053AE  22DA               	addwfc	fsr2h,f,c
  8005  0053B0  CFDE F06D          	movff	postinc2,SwTimerSetTimeout@timeout
  8006  0053B4  CFDE F06E          	movff	postinc2,SwTimerSetTimeout@timeout+1
  8007  0053B8  CFDE F06F          	movff	postinc2,SwTimerSetTimeout@timeout+2
  8008  0053BC  CFDE F070          	movff	postinc2,SwTimerSetTimeout@timeout+3
  8009  0053C0  0102               	movlb	2	; () banked
  8010  0053C2  51ED               	movf	(_loRa+231)& (0+255),w,b
  8011  0053C4  EC27  F045         	call	_SwTimerSetTimeout
  8012                           
  8013                           ;lorawan.c: 911: SwTimerStart(loRa.linkCheckTimerId);
  8014  0053C8  0102               	movlb	2	; () banked
  8015  0053CA  51ED               	movf	(_loRa+231)& (0+255),w,b
  8016  0053CC  ECDA  F03A         	call	_SwTimerStart
  8017  0053D0                     l1072:
  8018                           
  8019                           ; _LORAWAN_LinkCheckCallback: autosize = 5, savesize = 0, parsavesize = 0, tempsize = 0 
      +                          parsize = 1, argsize = 1, vargsize = 0
  8020  0053D0  0EFA               	movlw	250
  8021  0053D2  26E1               	addwf	fsr1l,f,c
  8022  0053D4  0EFF               	movlw	255
  8023  0053D6  22E2               	addwfc	fsr1h,f,c
  8024  0053D8  0012               	return		;funcret
  8025  0053DA                     __end_of_LORAWAN_LinkCheckCallback:
  8026                           	opt stack 0
  8027                           tosu	equ	0xFFF
  8028                           tosh	equ	0xFFE
  8029                           tosl	equ	0xFFD
  8030                           pclath	equ	0xFFA
  8031                           tblptru	equ	0xFF8
  8032                           tblptrh	equ	0xFF7
  8033                           tblptrl	equ	0xFF6
  8034                           tablat	equ	0xFF5
  8035                           prodh	equ	0xFF4
  8036                           prodl	equ	0xFF3
  8037                           intcon	equ	0xFF2
  8038                           intcon2	equ	0xFF1
  8039                           intcon3	equ	0xFF0
  8040                           postinc0	equ	0xFEE
  8041                           wreg	equ	0xFE8
  8042                           postinc1	equ	0xFE6
  8043                           postdec1	equ	0xFE5
  8044                           plusw1	equ	0xFE3
  8045                           fsr1h	equ	0xFE2
  8046                           fsr1l	equ	0xFE1
  8047                           indf2	equ	0xFDF
  8048                           postinc2	equ	0xFDE
  8049                           postdec2	equ	0xFDD
  8050                           fsr2h	equ	0xFDA
  8051                           fsr2l	equ	0xFD9
  8052                           status	equ	0xFD8
  8053                           
  8054 ;; *************** function _LORAWAN_ReceiveWindow2Callback *****************
  8055 ;; Defined at:
  8056 ;;		line 827 in file "mcc_generated_files/LoRaWAN/lorawan.c"
  8057 ;; Parameters:    Size  Location     Type
  8058 ;;  param           1  [STACK] unsigned char 
  8059 ;; Auto vars:     Size  Location     Type
  8060 ;;		None
  8061 ;; Return value:  Size  Location     Type
  8062 ;;                  1  [STACK] void 
  8063 ;; Registers used:
  8064 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, btemp+1, btemp+2, btemp+11, tosl, tblptrl, tblptrh, tb
      +lptru, prodl, prodh, cstack
  8065 ;; Tracked objects:
  8066 ;;		On entry : 3D/0
  8067 ;;		On exit  : 0/0
  8068 ;;		Unchanged: 0/0
  8069 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8070 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8071 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8072 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8073 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8074 ;;Total ram usage:        0 bytes
  8075 ;; Hardware stack levels used:    1
  8076 ;; Hardware stack levels required when called:   14
  8077 ;; This function calls:
  8078 ;;		_ConfigureRadioRx
  8079 ;;		_LORAWAN_EnterContinuousReceive
  8080 ;;		_RADIO_GetStatus
  8081 ;;		_RADIO_ReceiveStart
  8082 ;;		_RADIO_ReceiveStop
  8083 ;;		_RADIO_ReleaseData
  8084 ;;		_ResetParametersForConfirmedTransmission
  8085 ;;		_ResetParametersForUnconfirmedTransmission
  8086 ;;		_RxData
  8087 ;; This function is called by:
  8088 ;;		_LORAWAN_RxTimeout
  8089 ;;		_SetCallbackSoftwareTimers
  8090 ;;		_SwTimersExecute
  8091 ;; This function uses a reentrant model
  8092 ;;
  8093                           
  8094                           	psect	text42
  8095  006D20                     __ptext42:
  8096                           	opt stack 0
  8097  006D20                     _LORAWAN_ReceiveWindow2Callback:
  8098                           	opt stack 12
  8099                           
  8100                           ;lorawan.c: 830: if (loRa.macStatus.macPause == 0)
  8101                           
  8102                           ; autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, argsize = 1 var
      +                          gsize = 0, retsize = 0
  8103                           ;incstack = 0
  8104  006D20  0102               	movlb	2	; () banked
  8105  006D22  B109               	btfsc	(_loRa+3)& (0+255),0,b
  8106  006D24  D05F               	goto	l1048
  8107                           
  8108                           ; BSR set to: 2
  8109                           ;lorawan.c: 831: {
  8110                           ;lorawan.c: 832: if((RADIO_GetStatus() & (1 << (1))) == 0)
  8111  006D26  ECD2  F04A         	call	_RADIO_GetStatus	;wreg free
  8112  006D2A  6E49               	movwf	btemp+11,c
  8113  006D2C  B249               	btfsc	btemp+11,1,c
  8114  006D2E  D056               	goto	l10797
  8115                           
  8116                           ;lorawan.c: 833: {
  8117                           ;lorawan.c: 834: loRa.macStatus.macState = RX2_OPEN;
  8118  006D30  0102               	movlb	2	; () banked
  8119  006D32  5108               	movf	(_loRa+2)& (0+255),w,b
  8120  006D34  0BF0               	andlw	-16
  8121  006D36  0905               	iorlw	5
  8122  006D38  6F08               	movwf	(_loRa+2)& (0+255),b
  8123                           
  8124                           ; BSR set to: 2
  8125                           ;lorawan.c: 836: RADIO_ReceiveStop();
  8126  006D3A  ECCE  F048         	call	_RADIO_ReceiveStop	;wreg free
  8127                           
  8128                           ;lorawan.c: 837: RADIO_ReleaseData();
  8129  006D3E  ECD5  F04A         	call	_RADIO_ReleaseData	;wreg free
  8130                           
  8131                           ;lorawan.c: 839: ConfigureRadioRx(loRa.receiveWindow2Parameters.dataRate, loRa.receiveWi
      +                          ndow2Parameters.frequency);
  8132  006D42  C21E  F073         	movff	_loRa+24,ConfigureRadioRx@freq
  8133  006D46  C21F  F074         	movff	_loRa+25,ConfigureRadioRx@freq+1
  8134  006D4A  C220  F075         	movff	_loRa+26,ConfigureRadioRx@freq+2
  8135  006D4E  C221  F076         	movff	_loRa+27,ConfigureRadioRx@freq+3
  8136  006D52  0102               	movlb	2	; () banked
  8137  006D54  5122               	movf	(_loRa+28)& (0+255),w,b
  8138  006D56  ECB6  F047         	call	_ConfigureRadioRx
  8139                           
  8140                           ;lorawan.c: 841: if (CLASS_A == loRa.deviceClass)
  8141  006D5A  0102               	movlb	2	; () banked
  8142  006D5C  5118               	movf	(_loRa+18)& (0+255),w,b
  8143  006D5E  A4D8               	btfss	status,2,c
  8144  006D60  D036               	goto	l10793
  8145                           
  8146                           ; BSR set to: 2
  8147                           ;lorawan.c: 842: {
  8148                           ;lorawan.c: 843: if (RADIO_ReceiveStart(rxWindowSize[loRa.receiveWindow2Parameters.dataR
      +                          ate]) != OK)
  8149  006D62  0E7F               	movlw	low _rxWindowSize
  8150  006D64  2522               	addwf	(_loRa+28)& (0+255),w,b
  8151  006D66  6EF6               	movwf	tblptrl,c
  8152  006D68  6AF7               	clrf	tblptrh,c
  8153  006D6A  0EFF               	movlw	high _rxWindowSize
  8154  006D6C  22F7               	addwfc	tblptrh,f,c
  8155  006D6E                     	if	1	;There are 3 active tblptr bytes
  8156  006D6E  6AF8               	clrf	tblptru,c
  8157  006D70  0E00               	movlw	low (__mediumconst shr (0+16))
  8158  006D72  22F8               	addwfc	tblptru,f,c
  8159  006D74                     	endif
  8160  006D74  0008               	tblrd		*
  8161  006D76  50F5               	movf	tablat,w,c
  8162  006D78  0100               	movlb	0	; () banked
  8163  006D7A  6FB1               	movwf	RADIO_ReceiveStart@rxWindowSize& (0+255),b
  8164  006D7C  6BB2               	clrf	(RADIO_ReceiveStart@rxWindowSize+1)& (0+255),b
  8165  006D7E  EC2D  F021         	call	_RADIO_ReceiveStart	;wreg free
  8166  006D82  C0B1  F03F         	movff	?_RADIO_ReceiveStart,btemp+1
  8167  006D86  C0B2  F040         	movff	?_RADIO_ReceiveStart+1,btemp+2
  8168  006D8A  503F               	movf	btemp+1,w,c
  8169  006D8C  1040               	iorwf	btemp+2,w,c
  8170  006D8E  B4D8               	btfsc	status,2,c
  8171  006D90  D031               	goto	l1057
  8172                           
  8173                           ;lorawan.c: 844: {
  8174                           ;lorawan.c: 845: ResetParametersForConfirmedTransmission ();
  8175  006D92  ECF7  F049         	call	_ResetParametersForConfirmedTransmission	;wreg free
  8176                           
  8177                           ;lorawan.c: 846: ResetParametersForUnconfirmedTransmission ();
  8178  006D96  ECD0  F049         	call	_ResetParametersForUnconfirmedTransmission	;wreg free
  8179                           
  8180                           ;lorawan.c: 847: if (rxPayload.RxAppData != (0))
  8181  006D9A  0101               	movlb	1	; () banked
  8182  006D9C  510C               	movf	_rxPayload& (0+255),w,b
  8183  006D9E  110D               	iorwf	(_rxPayload+1)& (0+255),w,b
  8184  006DA0  B4D8               	btfsc	status,2,c
  8185  006DA2  D028               	goto	l1057
  8186                           
  8187                           ; BSR set to: 1
  8188                           ;lorawan.c: 848: {
  8189                           ;lorawan.c: 849: rxPayload.RxAppData ((0), 0, MAC_NOT_OK);
  8190  006DA4  0E00               	movlw	0
  8191  006DA6  0100               	movlb	0	; () banked
  8192  006DA8  6F60               	movwf	RxData@pData& (0+255),b
  8193  006DAA  0E00               	movlw	0
  8194  006DAC  6F61               	movwf	(RxData@pData+1)& (0+255),b
  8195  006DAE  0E00               	movlw	0
  8196  006DB0  6F62               	movwf	RxData@dataLength& (0+255),b
  8197  006DB2  0E00               	movlw	0
  8198  006DB4  6F63               	movwf	RxData@status& (0+255),b
  8199  006DB6  D801               	call	u10758
  8200  006DB8  D01D               	goto	l1057
  8201  006DBA                     u10758:
  8202  006DBA  0005               	push	
  8203  006DBC  6EFA               	movwf	pclath,c
  8204  006DBE  0101               	movlb	1	; () banked
  8205  006DC0  510C               	movf	_rxPayload& (0+255),w,b
  8206  006DC2  6EFD               	movwf	tosl,c
  8207  006DC4  510D               	movf	(_rxPayload+1)& (0+255),w,b
  8208  006DC6  6EFE               	movwf	tosh,c
  8209  006DC8  6AFF               	clrf	tosu,c
  8210  006DCA  50FA               	movf	pclath,w,c
  8211  006DCC  0012               	return		;indir
  8212  006DCE                     l10793:
  8213                           
  8214                           ; BSR set to: 2
  8215                           ;lorawan.c: 853: else
  8216                           ;lorawan.c: 854: {
  8217                           ;lorawan.c: 855: loRa.macStatus.macState = CLASS_C_RX2_2_OPEN;
  8218  006DCE  5108               	movf	(_loRa+2)& (0+255),w,b
  8219  006DD0  0BF0               	andlw	-16
  8220  006DD2  0909               	iorlw	9
  8221  006DD4  6F08               	movwf	(_loRa+2)& (0+255),b
  8222                           
  8223                           ; BSR set to: 2
  8224                           ;lorawan.c: 856: LORAWAN_EnterContinuousReceive();
  8225  006DD6  EC0C  F03E         	call	_LORAWAN_EnterContinuousReceive	;wreg free
  8226  006DDA  D00C               	goto	l1057
  8227  006DDC                     l10797:
  8228                           
  8229                           ;lorawan.c: 859: else
  8230                           ;lorawan.c: 860: {
  8231                           ;lorawan.c: 863: loRa.rx2DelayExpired = 1;
  8232  006DDC  0E01               	movlw	1
  8233  006DDE  0102               	movlb	2	; () banked
  8234  006DE0  6FF7               	movwf	(_loRa+241)& (0+255),b
  8235                           
  8236                           ; BSR set to: 1
  8237                           ;lorawan.c: 864: }
  8238                           ;lorawan.c: 865: }
  8239  006DE2  D008               	goto	l1057
  8240  006DE4                     l1048:
  8241                           
  8242                           ; BSR set to: 2
  8243                           ;lorawan.c: 866: else
  8244                           ;lorawan.c: 867: {
  8245                           ;lorawan.c: 870: if (loRa.lorawanMacStatus.joining == 1)
  8246  006DE4  A506               	btfss	_loRa& (0+255),2,b
  8247  006DE6  D002               	goto	l10801
  8248                           
  8249                           ; BSR set to: 2
  8250                           ;lorawan.c: 871: {
  8251                           ;lorawan.c: 872: loRa.lorawanMacStatus.joining = 0;
  8252  006DE8  9506               	bcf	_loRa& (0+255),2,b
  8253                           
  8254                           ;lorawan.c: 873: loRa.macStatus.networkJoined = 0;
  8255  006DEA  9908               	bcf	(_loRa+2)& (0+255),4,b
  8256  006DEC                     l10801:
  8257                           
  8258                           ; BSR set to: 2
  8259                           ;lorawan.c: 874: }
  8260                           ;lorawan.c: 876: ResetParametersForUnconfirmedTransmission();
  8261  006DEC  ECD0  F049         	call	_ResetParametersForUnconfirmedTransmission	;wreg free
  8262                           
  8263                           ;lorawan.c: 877: ResetParametersForConfirmedTransmission();
  8264  006DF0  ECF7  F049         	call	_ResetParametersForConfirmedTransmission	;wreg free
  8265  006DF4                     l1057:
  8266                           
  8267                           ; _LORAWAN_ReceiveWindow2Callback: autosize = 0, savesize = 0, parsavesize = 0, tempsize
      +                           = 0 parsize = 1, argsize = 1, vargsize = 0
  8268  006DF4  52E5               	movf	postdec1,f,c
  8269  006DF6  0012               	return		;funcret
  8270  006DF8                     __end_of_LORAWAN_ReceiveWindow2Callback:
  8271                           	opt stack 0
  8272                           tosu	equ	0xFFF
  8273                           tosh	equ	0xFFE
  8274                           tosl	equ	0xFFD
  8275                           pclath	equ	0xFFA
  8276                           tblptru	equ	0xFF8
  8277                           tblptrh	equ	0xFF7
  8278                           tblptrl	equ	0xFF6
  8279                           tablat	equ	0xFF5
  8280                           prodh	equ	0xFF4
  8281                           prodl	equ	0xFF3
  8282                           intcon	equ	0xFF2
  8283                           intcon2	equ	0xFF1
  8284                           intcon3	equ	0xFF0
  8285                           postinc0	equ	0xFEE
  8286                           wreg	equ	0xFE8
  8287                           postinc1	equ	0xFE6
  8288                           postdec1	equ	0xFE5
  8289                           plusw1	equ	0xFE3
  8290                           fsr1h	equ	0xFE2
  8291                           fsr1l	equ	0xFE1
  8292                           indf2	equ	0xFDF
  8293                           postinc2	equ	0xFDE
  8294                           postdec2	equ	0xFDD
  8295                           fsr2h	equ	0xFDA
  8296                           fsr2l	equ	0xFD9
  8297                           status	equ	0xFD8
  8298                           
  8299 ;; *************** function _LORAWAN_ReceiveWindow1Callback *****************
  8300 ;; Defined at:
  8301 ;;		line 796 in file "mcc_generated_files/LoRaWAN/lorawan.c"
  8302 ;; Parameters:    Size  Location     Type
  8303 ;;  param           1  [STACK] unsigned char 
  8304 ;; Auto vars:     Size  Location     Type
  8305 ;;  freq            4  [STACK] unsigned long 
  8306 ;; Return value:  Size  Location     Type
  8307 ;;                  1  [STACK] void 
  8308 ;; Registers used:
  8309 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp+8, btemp+9, btemp+10, btemp+11, tblptrl, t
      +blptrh, tblptru, prodl, prodh, cstack
  8310 ;; Tracked objects:
  8311 ;;		On entry : 3F/0
  8312 ;;		On exit  : 0/0
  8313 ;;		Unchanged: 0/0
  8314 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8315 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8316 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8317 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8318 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8319 ;;Total ram usage:        0 bytes
  8320 ;; Hardware stack levels used:    1
  8321 ;; Hardware stack levels required when called:   13
  8322 ;; This function calls:
  8323 ;;		_ConfigureRadioRx
  8324 ;;		_GetRx1Freq
  8325 ;;		_RADIO_ReceiveStart
  8326 ;;		_RADIO_ReceiveStop
  8327 ;;		_RADIO_ReleaseData
  8328 ;; This function is called by:
  8329 ;;		_SetCallbackSoftwareTimers
  8330 ;;		_SwTimersExecute
  8331 ;; This function uses a reentrant model
  8332 ;;
  8333                           
  8334                           	psect	text43
  8335  007062                     __ptext43:
  8336                           	opt stack 0
  8337  007062                     _LORAWAN_ReceiveWindow1Callback:
  8338                           	opt stack 0
  8339                           
  8340                           ; autosize = 4, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, argsize = 1 var
      +                          gsize = 0, retsize = 0
  8341  007062  52E6               	movf	postinc1,f,c
  8342  007064  52E6               	movf	postinc1,f,c
  8343  007066  52E6               	movf	postinc1,f,c
  8344  007068  52E6               	movf	postinc1,f,c
  8345                           
  8346                           ;lorawan.c: 798: uint32_t freq;
  8347                           ;lorawan.c: 800: if(loRa.macStatus.macPause == 0)
  8348                           
  8349                           ;incstack = 0
  8350  00706A  0102               	movlb	2	; () banked
  8351  00706C  B109               	btfsc	(_loRa+3)& (0+255),0,b
  8352  00706E  D050               	goto	l1045
  8353                           
  8354                           ; BSR set to: 2
  8355                           ;lorawan.c: 801: {
  8356                           ;lorawan.c: 802: if (CLASS_C == loRa.deviceClass)
  8357  007070  0E02               	movlw	2
  8358  007072  1918               	xorwf	(_loRa+18)& (0+255),w,b
  8359  007074  B4D8               	btfsc	status,2,c
  8360                           
  8361                           ; BSR set to: 2
  8362                           ;lorawan.c: 803: {
  8363                           ;lorawan.c: 804: RADIO_ReceiveStop();
  8364  007076  ECCE  F048         	call	_RADIO_ReceiveStop	;wreg free
  8365                           
  8366                           ;lorawan.c: 805: }
  8367                           ;lorawan.c: 806: if (loRa.receiveWindow1Parameters.dataRate >= loRa.offset)
  8368  00707A  0102               	movlb	2	; () banked
  8369  00707C  51F5               	movf	(_loRa+239)& (0+255),w,b
  8370  00707E  5D1D               	subwf	(_loRa+23)& (0+255),w,b
  8371  007080  A0D8               	btfss	status,0,c
  8372  007082  D004               	goto	l1043
  8373                           
  8374                           ; BSR set to: 2
  8375                           ;lorawan.c: 807: {
  8376                           ;lorawan.c: 808: loRa.receiveWindow1Parameters.dataRate = loRa.receiveWindow1Parameters.
      +                          dataRate - loRa.offset;
  8377  007084  51F5               	movf	(_loRa+239)& (0+255),w,b
  8378  007086  5D1D               	subwf	(_loRa+23)& (0+255),w,b
  8379  007088  6F1D               	movwf	(_loRa+23)& (0+255),b
  8380                           
  8381                           ;lorawan.c: 809: }
  8382  00708A  D001               	goto	l12049
  8383  00708C                     l1043:
  8384                           
  8385                           ; BSR set to: 2
  8386                           ;lorawan.c: 810: else
  8387                           ;lorawan.c: 811: {
  8388                           ;lorawan.c: 812: loRa.receiveWindow1Parameters.dataRate = 0;
  8389  00708C  6B1D               	clrf	(_loRa+23)& (0+255),b
  8390  00708E                     l12049:
  8391                           
  8392                           ; BSR set to: 2
  8393                           ;lorawan.c: 813: }
  8394                           ;lorawan.c: 815: freq = GetRx1Freq();
  8395  00708E  ECEE  F049         	call	_GetRx1Freq	;wreg free
  8396  007092  C060  F046         	movff	?_GetRx1Freq,btemp+8
  8397  007096  C061  F047         	movff	?_GetRx1Freq+1,btemp+9
  8398  00709A  C062  F048         	movff	?_GetRx1Freq+2,btemp+10
  8399  00709E  C063  F049         	movff	?_GetRx1Freq+3,btemp+11
  8400                           
  8401                           ;stkvar	LORAWAN_ReceiveWindow1Callback@freq @ sp[(-4)+0]
  8402  0070A2  0EFC               	movlw	-4
  8403  0070A4  C046  FFE3         	movff	btemp+8,plusw1
  8404  0070A8  0EFD               	movlw	-3
  8405  0070AA  C047  FFE3         	movff	btemp+9,plusw1
  8406  0070AE  0EFE               	movlw	-2
  8407  0070B0  C048  FFE3         	movff	btemp+10,plusw1
  8408  0070B4  0EFF               	movlw	-1
  8409  0070B6  C049  FFE3         	movff	btemp+11,plusw1
  8410                           
  8411                           ;lorawan.c: 817: loRa.macStatus.macState = RX1_OPEN;
  8412  0070BA  0102               	movlb	2	; () banked
  8413  0070BC  5108               	movf	(_loRa+2)& (0+255),w,b
  8414  0070BE  0BF0               	andlw	-16
  8415  0070C0  0903               	iorlw	3
  8416  0070C2  6F08               	movwf	(_loRa+2)& (0+255),b
  8417                           
  8418                           ; BSR set to: 2
  8419                           ;lorawan.c: 819: RADIO_ReleaseData();
  8420  0070C4  ECD5  F04A         	call	_RADIO_ReleaseData	;wreg free
  8421                           
  8422                           ;lorawan.c: 821: ConfigureRadioRx(loRa.receiveWindow1Parameters.dataRate, freq);
  8423                           ;stkvar	LORAWAN_ReceiveWindow1Callback@freq @ sp[(-4)+0]
  8424  0070C8  50E1               	movf	fsr1l,w,c
  8425  0070CA  0FFC               	addlw	-4
  8426  0070CC  6ED9               	movwf	fsr2l,c
  8427  0070CE  50E2               	movf	fsr1h,w,c
  8428  0070D0  6EDA               	movwf	fsr2h,c
  8429  0070D2  0EFF               	movlw	255
  8430  0070D4  22DA               	addwfc	fsr2h,f,c
  8431  0070D6  CFDE F073          	movff	postinc2,ConfigureRadioRx@freq
  8432  0070DA  CFDE F074          	movff	postinc2,ConfigureRadioRx@freq+1
  8433  0070DE  CFDE F075          	movff	postinc2,ConfigureRadioRx@freq+2
  8434  0070E2  CFDE F076          	movff	postinc2,ConfigureRadioRx@freq+3
  8435  0070E6  0102               	movlb	2	; () banked
  8436  0070E8  511D               	movf	(_loRa+23)& (0+255),w,b
  8437  0070EA  ECB6  F047         	call	_ConfigureRadioRx
  8438                           
  8439                           ;lorawan.c: 823: RADIO_ReceiveStart(rxWindowSize[loRa.receiveWindow1Parameters.dataRate]
      +                          );
  8440  0070EE  0E7F               	movlw	low _rxWindowSize
  8441  0070F0  0102               	movlb	2	; () banked
  8442  0070F2  251D               	addwf	(_loRa+23)& (0+255),w,b
  8443  0070F4  6EF6               	movwf	tblptrl,c
  8444  0070F6  6AF7               	clrf	tblptrh,c
  8445  0070F8  0EFF               	movlw	high _rxWindowSize
  8446  0070FA  22F7               	addwfc	tblptrh,f,c
  8447  0070FC                     	if	1	;There are 3 active tblptr bytes
  8448  0070FC  6AF8               	clrf	tblptru,c
  8449  0070FE  0E00               	movlw	low (__mediumconst shr (0+16))
  8450  007100  22F8               	addwfc	tblptru,f,c
  8451  007102                     	endif
  8452  007102  0008               	tblrd		*
  8453  007104  50F5               	movf	tablat,w,c
  8454  007106  0100               	movlb	0	; () banked
  8455  007108  6FB1               	movwf	RADIO_ReceiveStart@rxWindowSize& (0+255),b
  8456  00710A  6BB2               	clrf	(RADIO_ReceiveStart@rxWindowSize+1)& (0+255),b
  8457  00710C  EC2D  F021         	call	_RADIO_ReceiveStart	;wreg free
  8458  007110                     l1045:
  8459                           
  8460                           ; _LORAWAN_ReceiveWindow1Callback: autosize = 4, savesize = 0, parsavesize = 0, tempsize
      +                           = 0 parsize = 1, argsize = 1, vargsize = 0
  8461  007110  0EFB               	movlw	251
  8462  007112  26E1               	addwf	fsr1l,f,c
  8463  007114  0EFF               	movlw	255
  8464  007116  22E2               	addwfc	fsr1h,f,c
  8465  007118  0012               	return		;funcret
  8466  00711A                     __end_of_LORAWAN_ReceiveWindow1Callback:
  8467                           	opt stack 0
  8468                           tosu	equ	0xFFF
  8469                           tosh	equ	0xFFE
  8470                           tosl	equ	0xFFD
  8471                           pclath	equ	0xFFA
  8472                           tblptru	equ	0xFF8
  8473                           tblptrh	equ	0xFF7
  8474                           tblptrl	equ	0xFF6
  8475                           tablat	equ	0xFF5
  8476                           prodh	equ	0xFF4
  8477                           prodl	equ	0xFF3
  8478                           intcon	equ	0xFF2
  8479                           intcon2	equ	0xFF1
  8480                           intcon3	equ	0xFF0
  8481                           postinc0	equ	0xFEE
  8482                           wreg	equ	0xFE8
  8483                           postinc1	equ	0xFE6
  8484                           postdec1	equ	0xFE5
  8485                           plusw1	equ	0xFE3
  8486                           fsr1h	equ	0xFE2
  8487                           fsr1l	equ	0xFE1
  8488                           indf2	equ	0xFDF
  8489                           postinc2	equ	0xFDE
  8490                           postdec2	equ	0xFDD
  8491                           fsr2h	equ	0xFDA
  8492                           fsr2l	equ	0xFD9
  8493                           status	equ	0xFD8
  8494                           
  8495 ;; *************** function _RADIO_WatchdogTimeout *****************
  8496 ;; Defined at:
  8497 ;;		line 1408 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
  8498 ;; Parameters:    Size  Location     Type
  8499 ;;  param           1  [STACK] unsigned char 
  8500 ;; Auto vars:     Size  Location     Type
  8501 ;;		None
  8502 ;; Return value:  Size  Location     Type
  8503 ;;                  1  [STACK] void 
  8504 ;; Registers used:
  8505 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, btemp+1, btemp+2, btemp+11, tosl, tblptrl, tblptrh, tb
      +lptru, prodl, prodh, cstack
  8506 ;; Tracked objects:
  8507 ;;		On entry : 3F/0
  8508 ;;		On exit  : 0/0
  8509 ;;		Unchanged: 0/0
  8510 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8511 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8512 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8513 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8514 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8515 ;;Total ram usage:        0 bytes
  8516 ;; Hardware stack levels used:    1
  8517 ;; Hardware stack levels required when called:   16
  8518 ;; This function calls:
  8519 ;;		_LORAWAN_RxTimeout
  8520 ;;		_LORAWAN_TxDone
  8521 ;;		_RADIO_WriteMode
  8522 ;; This function is called by:
  8523 ;;		_RADIO_Init
  8524 ;;		_SwTimersExecute
  8525 ;; This function uses a reentrant model
  8526 ;;
  8527                           
  8528                           	psect	text44
  8529  00886C                     __ptext44:
  8530                           	opt stack 0
  8531  00886C                     _RADIO_WatchdogTimeout:
  8532                           	opt stack 12
  8533                           
  8534                           ;radio_driver_SX1276.c: 1410: RADIO_WriteMode(MODE_STANDBY, RadioConfiguration.modulatio
      +                          n, 1);
  8535                           
  8536                           ; autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, argsize = 1 var
      +                          gsize = 0, retsize = 0
  8537                           ;incstack = 0
  8538  00886C  C16F  F065         	movff	_RadioConfiguration+24,RADIO_WriteMode@newModulation
  8539  008870  0E01               	movlw	1
  8540  008872  0100               	movlb	0	; () banked
  8541  008874  6F66               	movwf	RADIO_WriteMode@blocking& (0+255),b
  8542  008876  0E01               	movlw	1
  8543  008878  ECF4  F031         	call	_RADIO_WriteMode
  8544                           
  8545                           ;radio_driver_SX1276.c: 1411: RADIO_WriteMode(MODE_SLEEP, RadioConfiguration.modulation,
      +                           0);
  8546  00887C  C16F  F065         	movff	_RadioConfiguration+24,RADIO_WriteMode@newModulation
  8547  008880  0E00               	movlw	0
  8548  008882  0100               	movlb	0	; () banked
  8549  008884  6F66               	movwf	RADIO_WriteMode@blocking& (0+255),b
  8550  008886  0E00               	movlw	0
  8551  008888  ECF4  F031         	call	_RADIO_WriteMode
  8552                           
  8553                           ;radio_driver_SX1276.c: 1412: RadioConfiguration.flags |= (1 << (4));
  8554  00888C  0101               	movlb	1	; () banked
  8555  00888E  897A               	bsf	(_RadioConfiguration+35)& (0+255),4,b
  8556                           
  8557                           ; BSR set to: 1
  8558                           ;radio_driver_SX1276.c: 1413: if ((RadioConfiguration.flags & (1 << (1))) != 0)
  8559  008890  A37A               	btfss	(_RadioConfiguration+35)& (0+255),1,b
  8560  008892  D004               	goto	l455
  8561                           
  8562                           ; BSR set to: 1
  8563                           ;radio_driver_SX1276.c: 1414: {
  8564                           ;radio_driver_SX1276.c: 1415: RadioConfiguration.flags &= ~(1 << (1));
  8565  008894  937A               	bcf	(_RadioConfiguration+35)& (0+255),1,b
  8566                           
  8567                           ; BSR set to: 1
  8568                           ;radio_driver_SX1276.c: 1416: LORAWAN_RxTimeout();
  8569  008896  ECF4  F012         	call	_LORAWAN_RxTimeout	;wreg free
  8570                           
  8571                           ;radio_driver_SX1276.c: 1417: }
  8572  00889A  D009               	goto	l458
  8573  00889C                     l455:
  8574                           
  8575                           ; BSR set to: 1
  8576                           ;radio_driver_SX1276.c: 1418: else if ((RadioConfiguration.flags & (1 << (0))) != 0)
  8577  00889C  A17A               	btfss	(_RadioConfiguration+35)& (0+255),0,b
  8578  00889E  D007               	goto	l458
  8579                           
  8580                           ; BSR set to: 1
  8581                           ;radio_driver_SX1276.c: 1419: {
  8582                           ;radio_driver_SX1276.c: 1420: RadioConfiguration.flags &= ~(1 << (0));
  8583  0088A0  917A               	bcf	(_RadioConfiguration+35)& (0+255),0,b
  8584                           
  8585                           ; BSR set to: 1
  8586                           ;radio_driver_SX1276.c: 1425: LORAWAN_TxDone(RadioConfiguration.watchdogTimerTimeout);
  8587  0088A2  C181  F0BB         	movff	_RadioConfiguration+42,LORAWAN_TxDone@timeOnAir
  8588  0088A6  C182  F0BC         	movff	_RadioConfiguration+43,LORAWAN_TxDone@timeOnAir+1
  8589  0088AA  ECBD  F006         	call	_LORAWAN_TxDone	;wreg free
  8590  0088AE                     l458:
  8591                           
  8592                           ; _RADIO_WatchdogTimeout: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 pars
      +                          ize = 1, argsize = 1, vargsize = 0
  8593  0088AE  52E5               	movf	postdec1,f,c
  8594  0088B0  0012               	return		;funcret
  8595  0088B2                     __end_of_RADIO_WatchdogTimeout:
  8596                           	opt stack 0
  8597                           tosu	equ	0xFFF
  8598                           tosh	equ	0xFFE
  8599                           tosl	equ	0xFFD
  8600                           pclath	equ	0xFFA
  8601                           tblptru	equ	0xFF8
  8602                           tblptrh	equ	0xFF7
  8603                           tblptrl	equ	0xFF6
  8604                           tablat	equ	0xFF5
  8605                           prodh	equ	0xFF4
  8606                           prodl	equ	0xFF3
  8607                           intcon	equ	0xFF2
  8608                           intcon2	equ	0xFF1
  8609                           intcon3	equ	0xFF0
  8610                           postinc0	equ	0xFEE
  8611                           wreg	equ	0xFE8
  8612                           postinc1	equ	0xFE6
  8613                           postdec1	equ	0xFE5
  8614                           plusw1	equ	0xFE3
  8615                           fsr1h	equ	0xFE2
  8616                           fsr1l	equ	0xFE1
  8617                           indf2	equ	0xFDF
  8618                           postinc2	equ	0xFDE
  8619                           postdec2	equ	0xFDD
  8620                           fsr2h	equ	0xFDA
  8621                           fsr2l	equ	0xFD9
  8622                           status	equ	0xFD8
  8623                           
  8624 ;; *************** function _RADIO_RxFSKTimeout *****************
  8625 ;; Defined at:
  8626 ;;		line 1392 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
  8627 ;; Parameters:    Size  Location     Type
  8628 ;;  param           1  [STACK] unsigned char 
  8629 ;; Auto vars:     Size  Location     Type
  8630 ;;  irqFlags        1  [STACK] unsigned char 
  8631 ;; Return value:  Size  Location     Type
  8632 ;;                  1  [STACK] void 
  8633 ;; Registers used:
  8634 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, btemp+1, btemp+2, btemp+11, tosl, tblptr
      +l, tblptrh, tblptru, prodl, prodh, cstack
  8635 ;; Tracked objects:
  8636 ;;		On entry : 3F/0
  8637 ;;		On exit  : 0/0
  8638 ;;		Unchanged: 0/0
  8639 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8640 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8641 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8642 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8643 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8644 ;;Total ram usage:        0 bytes
  8645 ;; Hardware stack levels used:    1
  8646 ;; Hardware stack levels required when called:   16
  8647 ;; This function calls:
  8648 ;;		_LORAWAN_RxTimeout
  8649 ;;		_RADIO_RegisterRead
  8650 ;;		_RADIO_WriteMode
  8651 ;;		_SwTimerStop
  8652 ;; This function is called by:
  8653 ;;		_RADIO_Init
  8654 ;;		_SwTimersExecute
  8655 ;; This function uses a reentrant model
  8656 ;;
  8657                           
  8658                           	psect	text45
  8659  008C14                     __ptext45:
  8660                           	opt stack 0
  8661  008C14                     _RADIO_RxFSKTimeout:
  8662                           	opt stack 0
  8663                           
  8664                           ; autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, argsize = 1 var
      +                          gsize = 0, retsize = 0
  8665  008C14  52E6               	movf	postinc1,f,c
  8666                           
  8667                           ;radio_driver_SX1276.c: 1394: uint8_t irqFlags;
  8668                           ;radio_driver_SX1276.c: 1395: irqFlags = RADIO_RegisterRead(0x3E);
  8669                           
  8670                           ;incstack = 0
  8671  008C16  0E3E               	movlw	62
  8672  008C18  EC07  F048         	call	_RADIO_RegisterRead
  8673  008C1C  6E49               	movwf	btemp+11,c
  8674                           
  8675                           ;stkvar	RADIO_RxFSKTimeout@irqFlags @ sp[(-1)+0]
  8676  008C1E  0EFF               	movlw	-1
  8677  008C20  C049  FFE3         	movff	btemp+11,plusw1
  8678                           
  8679                           ;radio_driver_SX1276.c: 1396: if (0 == (irqFlags & (1<<(0))))
  8680                           ;stkvar	RADIO_RxFSKTimeout@irqFlags @ sp[(-1)+0]
  8681  008C24  0EFF               	movlw	-1
  8682  008C26  B0E3               	btfsc	plusw1,0,c
  8683  008C28  D010               	goto	l452
  8684                           
  8685                           ;radio_driver_SX1276.c: 1397: {
  8686                           ;radio_driver_SX1276.c: 1399: RADIO_WriteMode(MODE_SLEEP, RadioConfiguration.modulation,
      +                           0);
  8687  008C2A  C16F  F065         	movff	_RadioConfiguration+24,RADIO_WriteMode@newModulation
  8688  008C2E  0E00               	movlw	0
  8689  008C30  0100               	movlb	0	; () banked
  8690  008C32  6F66               	movwf	RADIO_WriteMode@blocking& (0+255),b
  8691  008C34  0E00               	movlw	0
  8692  008C36  ECF4  F031         	call	_RADIO_WriteMode
  8693                           
  8694                           ;radio_driver_SX1276.c: 1401: SwTimerStop(RadioConfiguration.watchdogTimerId);
  8695  008C3A  0101               	movlb	1	; () banked
  8696  008C3C  5180               	movf	(_RadioConfiguration+41)& (0+255),w,b
  8697  008C3E  EC1B  F048         	call	_SwTimerStop
  8698                           
  8699                           ;radio_driver_SX1276.c: 1402: RadioConfiguration.flags &= ~(1 << (1));
  8700  008C42  0101               	movlb	1	; () banked
  8701  008C44  937A               	bcf	(_RadioConfiguration+35)& (0+255),1,b
  8702                           
  8703                           ; BSR set to: 1
  8704                           ;radio_driver_SX1276.c: 1403: LORAWAN_RxTimeout();
  8705  008C46  ECF4  F012         	call	_LORAWAN_RxTimeout	;wreg free
  8706  008C4A                     l452:
  8707                           
  8708                           ; _RADIO_RxFSKTimeout: autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize
      +                           = 1, argsize = 1, vargsize = 0
  8709  008C4A  52E5               	movf	postdec1,f,c
  8710  008C4C  52E5               	movf	postdec1,f,c
  8711  008C4E  0012               	return		;funcret
  8712  008C50                     __end_of_RADIO_RxFSKTimeout:
  8713                           	opt stack 0
  8714                           tosu	equ	0xFFF
  8715                           tosh	equ	0xFFE
  8716                           tosl	equ	0xFFD
  8717                           pclath	equ	0xFFA
  8718                           tblptru	equ	0xFF8
  8719                           tblptrh	equ	0xFF7
  8720                           tblptrl	equ	0xFF6
  8721                           tablat	equ	0xFF5
  8722                           prodh	equ	0xFF4
  8723                           prodl	equ	0xFF3
  8724                           intcon	equ	0xFF2
  8725                           intcon2	equ	0xFF1
  8726                           intcon3	equ	0xFF0
  8727                           postinc0	equ	0xFEE
  8728                           wreg	equ	0xFE8
  8729                           postinc1	equ	0xFE6
  8730                           postdec1	equ	0xFE5
  8731                           plusw1	equ	0xFE3
  8732                           fsr1h	equ	0xFE2
  8733                           fsr1l	equ	0xFE1
  8734                           indf2	equ	0xFDF
  8735                           postinc2	equ	0xFDE
  8736                           postdec2	equ	0xFDD
  8737                           fsr2h	equ	0xFDA
  8738                           fsr2l	equ	0xFD9
  8739                           status	equ	0xFD8
  8740                           
  8741 ;; *************** function _UnconfirmedTransmissionCallback *****************
  8742 ;; Defined at:
  8743 ;;		line 997 in file "mcc_generated_files/LoRaWAN/lorawan.c"
  8744 ;; Parameters:    Size  Location     Type
  8745 ;;  param           1  [STACK] unsigned char 
  8746 ;; Auto vars:     Size  Location     Type
  8747 ;;		None
  8748 ;; Return value:  Size  Location     Type
  8749 ;;                  1  [STACK] void 
  8750 ;; Registers used:
  8751 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, btemp+1, btemp+2, tosl, tblptrl, tblptrh, tblptru, pro
      +dl, prodh, cstack
  8752 ;; Tracked objects:
  8753 ;;		On entry : 3F/0
  8754 ;;		On exit  : 0/0
  8755 ;;		Unchanged: 0/0
  8756 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8757 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8758 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8759 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8760 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8761 ;;Total ram usage:        0 bytes
  8762 ;; Hardware stack levels used:    1
  8763 ;; Hardware stack levels required when called:   13
  8764 ;; This function calls:
  8765 ;;		_RADIO_Transmit
  8766 ;;		_ResetParametersForUnconfirmedTransmission
  8767 ;;		_RxData
  8768 ;;		_SelectChannelForTransmission
  8769 ;; This function is called by:
  8770 ;;		_SetCallbackSoftwareTimers
  8771 ;;		_SwTimersExecute
  8772 ;; This function uses a reentrant model
  8773 ;;
  8774                           
  8775                           	psect	text46
  8776  007C96                     __ptext46:
  8777                           	opt stack 0
  8778  007C96                     _UnconfirmedTransmissionCallback:
  8779                           	opt stack 15
  8780                           
  8781                           ;lorawan.c: 1000: if ( (SelectChannelForTransmission (1) == OK) && (RADIO_Transmit (&mac
      +                          Buffer[16], loRa.lastPacketLength) == OK) )
  8782                           
  8783                           ; autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, argsize = 1 var
      +                          gsize = 0, retsize = 0
  8784                           ;incstack = 0
  8785  007C96  0E01               	movlw	1
  8786  007C98  EC2F  F03F         	call	_SelectChannelForTransmission
  8787  007C9C  0900               	iorlw	0
  8788  007C9E  A4D8               	btfss	status,2,c
  8789  007CA0  D018               	goto	l12149
  8790  007CA2  0E9F               	movlw	low (_macBuffer+16)
  8791  007CA4  0100               	movlb	0	; () banked
  8792  007CA6  6FB1               	movwf	RADIO_Transmit@buffer& (0+255),b
  8793  007CA8  0E06               	movlw	high (_macBuffer+16)
  8794  007CAA  6FB2               	movwf	(RADIO_Transmit@buffer+1)& (0+255),b
  8795  007CAC  C2DA  F0B3         	movff	_loRa+212,RADIO_Transmit@bufferLen
  8796  007CB0  EC11  F020         	call	_RADIO_Transmit	;wreg free
  8797  007CB4  C0B1  F03F         	movff	?_RADIO_Transmit,btemp+1
  8798  007CB8  C0B2  F040         	movff	?_RADIO_Transmit+1,btemp+2
  8799  007CBC  503F               	movf	btemp+1,w,c
  8800  007CBE  1040               	iorwf	btemp+2,w,c
  8801  007CC0  A4D8               	btfss	status,2,c
  8802  007CC2  D007               	goto	l12149
  8803                           
  8804                           ;lorawan.c: 1001: {
  8805                           ;lorawan.c: 1002: loRa.counterRepetitionsUnconfirmedUplink ++ ;
  8806  007CC4  0102               	movlb	2	; () banked
  8807  007CC6  2BDE               	incf	(_loRa+216)& (0+255),f,b
  8808                           
  8809                           ; BSR set to: 2
  8810                           ;lorawan.c: 1003: loRa.macStatus.macState = TRANSMISSION_OCCURRING;
  8811  007CC8  5108               	movf	(_loRa+2)& (0+255),w,b
  8812  007CCA  0BF0               	andlw	-16
  8813  007CCC  0901               	iorlw	1
  8814  007CCE  6F08               	movwf	(_loRa+2)& (0+255),b
  8815                           
  8816                           ;lorawan.c: 1005: }
  8817  007CD0  D01C               	goto	u13279
  8818  007CD2                     l12149:
  8819                           
  8820                           ;lorawan.c: 1006: else
  8821                           ;lorawan.c: 1008: {
  8822                           ;lorawan.c: 1009: ResetParametersForUnconfirmedTransmission ();
  8823  007CD2  ECD0  F049         	call	_ResetParametersForUnconfirmedTransmission	;wreg free
  8824                           
  8825                           ;lorawan.c: 1010: if (rxPayload.RxAppData != (0))
  8826  007CD6  0101               	movlb	1	; () banked
  8827  007CD8  510C               	movf	_rxPayload& (0+255),w,b
  8828  007CDA  110D               	iorwf	(_rxPayload+1)& (0+255),w,b
  8829  007CDC  B4D8               	btfsc	status,2,c
  8830  007CDE  D015               	goto	u13279
  8831                           
  8832                           ; BSR set to: 1
  8833                           ;lorawan.c: 1011: {
  8834                           ;lorawan.c: 1012: rxPayload.RxAppData((0), 0, MAC_NOT_OK);
  8835  007CE0  0E00               	movlw	0
  8836  007CE2  0100               	movlb	0	; () banked
  8837  007CE4  6F60               	movwf	RxData@pData& (0+255),b
  8838  007CE6  0E00               	movlw	0
  8839  007CE8  6F61               	movwf	(RxData@pData+1)& (0+255),b
  8840  007CEA  0E00               	movlw	0
  8841  007CEC  6F62               	movwf	RxData@dataLength& (0+255),b
  8842  007CEE  0E00               	movlw	0
  8843  007CF0  6F63               	movwf	RxData@status& (0+255),b
  8844  007CF2  D801               	call	u13278
  8845  007CF4  D00A               	goto	u13279
  8846  007CF6                     u13278:
  8847  007CF6  0005               	push	
  8848  007CF8  6EFA               	movwf	pclath,c
  8849  007CFA  0101               	movlb	1	; () banked
  8850  007CFC  510C               	movf	_rxPayload& (0+255),w,b
  8851  007CFE  6EFD               	movwf	tosl,c
  8852  007D00  510D               	movf	(_rxPayload+1)& (0+255),w,b
  8853  007D02  6EFE               	movwf	tosh,c
  8854  007D04  6AFF               	clrf	tosu,c
  8855  007D06  50FA               	movf	pclath,w,c
  8856  007D08  0012               	return		;indir
  8857  007D0A                     u13279:
  8858                           
  8859                           ; _UnconfirmedTransmissionCallback: autosize = 0, savesize = 0, parsavesize = 0, tempsiz
      +                          e = 0 parsize = 1, argsize = 1, vargsize = 0
  8860  007D0A  52E5               	movf	postdec1,f,c
  8861  007D0C  0012               	return		;funcret
  8862  007D0E                     __end_of_UnconfirmedTransmissionCallback:
  8863                           	opt stack 0
  8864                           tosu	equ	0xFFF
  8865                           tosh	equ	0xFFE
  8866                           tosl	equ	0xFFD
  8867                           pclath	equ	0xFFA
  8868                           tblptru	equ	0xFF8
  8869                           tblptrh	equ	0xFF7
  8870                           tblptrl	equ	0xFF6
  8871                           tablat	equ	0xFF5
  8872                           prodh	equ	0xFF4
  8873                           prodl	equ	0xFF3
  8874                           intcon	equ	0xFF2
  8875                           intcon2	equ	0xFF1
  8876                           intcon3	equ	0xFF0
  8877                           postinc0	equ	0xFEE
  8878                           wreg	equ	0xFE8
  8879                           postinc1	equ	0xFE6
  8880                           postdec1	equ	0xFE5
  8881                           plusw1	equ	0xFE3
  8882                           fsr1h	equ	0xFE2
  8883                           fsr1l	equ	0xFE1
  8884                           indf2	equ	0xFDF
  8885                           postinc2	equ	0xFDE
  8886                           postdec2	equ	0xFDD
  8887                           fsr2h	equ	0xFDA
  8888                           fsr2l	equ	0xFD9
  8889                           status	equ	0xFD8
  8890                           
  8891 ;; *************** function _GetRx1Freq *****************
  8892 ;; Defined at:
  8893 ;;		line 883 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
  8894 ;; Parameters:    Size  Location     Type
  8895 ;;		None
  8896 ;; Auto vars:     Size  Location     Type
  8897 ;;		None
  8898 ;; Return value:  Size  Location     Type
  8899 ;;                  4    0[BANK0 ] unsigned long 
  8900 ;; Registers used:
  8901 ;;		None
  8902 ;; Tracked objects:
  8903 ;;		On entry : 0/0
  8904 ;;		On exit  : 0/0
  8905 ;;		Unchanged: 0/0
  8906 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8907 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8908 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8909 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8910 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8911 ;;Total ram usage:        4 bytes
  8912 ;; Hardware stack levels used:    1
  8913 ;; Hardware stack levels required when called:    7
  8914 ;; This function calls:
  8915 ;;		Nothing
  8916 ;; This function is called by:
  8917 ;;		_LORAWAN_ReceiveWindow1Callback
  8918 ;; This function uses a non-reentrant model
  8919 ;;
  8920                           
  8921                           	psect	text47
  8922  0093DC                     __ptext47:
  8923                           	opt stack 0
  8924  0093DC                     _GetRx1Freq:
  8925                           	opt stack 20
  8926                           
  8927                           ;lorawan_eu.c: 885: return loRa.receiveWindow1Parameters.frequency;
  8928                           
  8929                           ;incstack = 0
  8930  0093DC  C219  F060         	movff	_loRa+19,?_GetRx1Freq
  8931  0093E0  C21A  F061         	movff	_loRa+20,?_GetRx1Freq+1
  8932  0093E4  C21B  F062         	movff	_loRa+21,?_GetRx1Freq+2
  8933  0093E8  C21C  F063         	movff	_loRa+22,?_GetRx1Freq+3
  8934  0093EC  0012               	return		;funcret
  8935  0093EE                     __end_of_GetRx1Freq:
  8936                           	opt stack 0
  8937                           tosu	equ	0xFFF
  8938                           tosh	equ	0xFFE
  8939                           tosl	equ	0xFFD
  8940                           pclath	equ	0xFFA
  8941                           tblptru	equ	0xFF8
  8942                           tblptrh	equ	0xFF7
  8943                           tblptrl	equ	0xFF6
  8944                           tablat	equ	0xFF5
  8945                           prodh	equ	0xFF4
  8946                           prodl	equ	0xFF3
  8947                           intcon	equ	0xFF2
  8948                           intcon2	equ	0xFF1
  8949                           intcon3	equ	0xFF0
  8950                           postinc0	equ	0xFEE
  8951                           wreg	equ	0xFE8
  8952                           postinc1	equ	0xFE6
  8953                           postdec1	equ	0xFE5
  8954                           plusw1	equ	0xFE3
  8955                           fsr1h	equ	0xFE2
  8956                           fsr1l	equ	0xFE1
  8957                           indf2	equ	0xFDF
  8958                           postinc2	equ	0xFDE
  8959                           postdec2	equ	0xFDD
  8960                           fsr2h	equ	0xFDA
  8961                           fsr2l	equ	0xFD9
  8962                           status	equ	0xFD8
  8963                           
  8964 ;; *************** function _RADIO_DIO5 *****************
  8965 ;; Defined at:
  8966 ;;		line 1344 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
  8967 ;; Parameters:    Size  Location     Type
  8968 ;;		None
  8969 ;; Auto vars:     Size  Location     Type
  8970 ;;  dioMapping      1    6[BANK0 ] unsigned char 
  8971 ;; Return value:  Size  Location     Type
  8972 ;;                  1    wreg      void 
  8973 ;; Registers used:
  8974 ;;		wreg, status,2, status,0, cstack
  8975 ;; Tracked objects:
  8976 ;;		On entry : 0/0
  8977 ;;		On exit  : 0/0
  8978 ;;		Unchanged: 0/0
  8979 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8980 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8981 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8982 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8983 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8984 ;;Total ram usage:        2 bytes
  8985 ;; Hardware stack levels used:    1
  8986 ;; Hardware stack levels required when called:   11
  8987 ;; This function calls:
  8988 ;;		_RADIO_RegisterRead
  8989 ;;		_RADIO_UnhandledInterrupt
  8990 ;; This function is called by:
  8991 ;;		_LORAWAN_Mainloop
  8992 ;; This function uses a non-reentrant model
  8993 ;;
  8994                           
  8995                           	psect	text48
  8996  008F96                     __ptext48:
  8997                           	opt stack 0
  8998  008F96                     _RADIO_DIO5:
  8999                           	opt stack 18
  9000                           
  9001                           ;radio_driver_SX1276.c: 1347: uint8_t dioMapping;
  9002                           ;radio_driver_SX1276.c: 1348: dioMapping = (RADIO_RegisterRead(0x41) & 0x30) >> (4);
  9003                           
  9004                           ;incstack = 0
  9005  008F96  0E41               	movlw	65
  9006  008F98  EC07  F048         	call	_RADIO_RegisterRead
  9007  008F9C  0100               	movlb	0	; () banked
  9008  008F9E  6F65               	movwf	??_RADIO_DIO5& (0+255),b
  9009  008FA0  3965               	swapf	??_RADIO_DIO5& (0+255),w,b
  9010  008FA2  0B0F               	andlw	15
  9011  008FA4  0B03               	andlw	3
  9012  008FA6  6F66               	movwf	RADIO_DIO5@dioMapping& (0+255),b
  9013                           
  9014                           ;radio_driver_SX1276.c: 1350: if ((RADIO_RegisterRead(0x01) & 0x80) != 0)
  9015  008FA8  0E01               	movlw	1
  9016  008FAA  EC07  F048         	call	_RADIO_RegisterRead
  9017  008FAE  0100               	movlb	0	; () banked
  9018  008FB0  6F65               	movwf	??_RADIO_DIO5& (0+255),b
  9019  008FB2  AF65               	btfss	??_RADIO_DIO5& (0+255),7,b
  9020  008FB4  0012               	return	
  9021                           
  9022                           ;radio_driver_SX1276.c: 1356: RADIO_UnhandledInterrupt(MODULATION_LORA);
  9023                           
  9024                           ; BSR set to: 0
  9025                           
  9026                           ;radio_driver_SX1276.c: 1354: {
  9027                           ;radio_driver_SX1276.c: 1355: default:
  9028                           
  9029                           ; BSR set to: 0
  9030                           ;radio_driver_SX1276.c: 1351: {
  9031                           ;radio_driver_SX1276.c: 1353: switch (dioMapping)
  9032  008FB6  0E01               	movlw	1
  9033  008FB8  EC5C  F046         	call	_RADIO_UnhandledInterrupt
  9034                           
  9035                           ;radio_driver_SX1276.c: 1358: }
  9036                           
  9037                           ;radio_driver_SX1276.c: 1357: break;
  9038  008FBC  0012               	return	
  9039  008FBE                     __end_of_RADIO_DIO5:
  9040                           	opt stack 0
  9041                           tosu	equ	0xFFF
  9042                           tosh	equ	0xFFE
  9043                           tosl	equ	0xFFD
  9044                           pclath	equ	0xFFA
  9045                           tblptru	equ	0xFF8
  9046                           tblptrh	equ	0xFF7
  9047                           tblptrl	equ	0xFF6
  9048                           tablat	equ	0xFF5
  9049                           prodh	equ	0xFF4
  9050                           prodl	equ	0xFF3
  9051                           intcon	equ	0xFF2
  9052                           intcon2	equ	0xFF1
  9053                           intcon3	equ	0xFF0
  9054                           postinc0	equ	0xFEE
  9055                           wreg	equ	0xFE8
  9056                           postinc1	equ	0xFE6
  9057                           postdec1	equ	0xFE5
  9058                           plusw1	equ	0xFE3
  9059                           fsr1h	equ	0xFE2
  9060                           fsr1l	equ	0xFE1
  9061                           indf2	equ	0xFDF
  9062                           postinc2	equ	0xFDE
  9063                           postdec2	equ	0xFDD
  9064                           fsr2h	equ	0xFDA
  9065                           fsr2l	equ	0xFD9
  9066                           status	equ	0xFD8
  9067                           
  9068 ;; *************** function _RADIO_DIO4 *****************
  9069 ;; Defined at:
  9070 ;;		line 1321 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
  9071 ;; Parameters:    Size  Location     Type
  9072 ;;		None
  9073 ;; Auto vars:     Size  Location     Type
  9074 ;;  dioMapping      1    7[BANK0 ] unsigned char 
  9075 ;; Return value:  Size  Location     Type
  9076 ;;                  1    wreg      void 
  9077 ;; Registers used:
  9078 ;;		wreg, status,2, status,0, cstack
  9079 ;; Tracked objects:
  9080 ;;		On entry : 0/0
  9081 ;;		On exit  : 0/0
  9082 ;;		Unchanged: 0/0
  9083 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9084 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9085 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9086 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9087 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9088 ;;Total ram usage:        3 bytes
  9089 ;; Hardware stack levels used:    1
  9090 ;; Hardware stack levels required when called:   11
  9091 ;; This function calls:
  9092 ;;		_RADIO_RegisterRead
  9093 ;;		_RADIO_UnhandledInterrupt
  9094 ;; This function is called by:
  9095 ;;		_LORAWAN_Mainloop
  9096 ;; This function uses a non-reentrant model
  9097 ;;
  9098                           
  9099                           	psect	text49
  9100  008C86                     __ptext49:
  9101                           	opt stack 0
  9102  008C86                     _RADIO_DIO4:
  9103                           	opt stack 18
  9104                           
  9105                           ;radio_driver_SX1276.c: 1324: uint8_t dioMapping;
  9106                           ;radio_driver_SX1276.c: 1325: dioMapping = (RADIO_RegisterRead(0x41) & 0xC0) >> (6);
  9107                           
  9108                           ;incstack = 0
  9109  008C86  0E41               	movlw	65
  9110  008C88  EC07  F048         	call	_RADIO_RegisterRead
  9111  008C8C  0100               	movlb	0	; () banked
  9112  008C8E  6F65               	movwf	??_RADIO_DIO4& (0+255),b
  9113  008C90  0E06               	movlw	6
  9114  008C92  6F66               	movwf	(??_RADIO_DIO4+1)& (0+255),b
  9115  008C94                     u13565:
  9116  008C94  90D8               	bcf	status,0,c
  9117  008C96  3365               	rrcf	??_RADIO_DIO4& (0+255),f,b
  9118  008C98  2F66               	decfsz	(??_RADIO_DIO4+1)& (0+255),f,b
  9119  008C9A  D7FC               	goto	u13565
  9120  008C9C  5165               	movf	??_RADIO_DIO4& (0+255),w,b
  9121  008C9E  0B03               	andlw	3
  9122  008CA0  6F67               	movwf	RADIO_DIO4@dioMapping& (0+255),b
  9123                           
  9124                           ;radio_driver_SX1276.c: 1327: if ((RADIO_RegisterRead(0x01) & 0x80) != 0)
  9125  008CA2  0E01               	movlw	1
  9126  008CA4  EC07  F048         	call	_RADIO_RegisterRead
  9127  008CA8  0100               	movlb	0	; () banked
  9128  008CAA  6F65               	movwf	??_RADIO_DIO4& (0+255),b
  9129  008CAC  AF65               	btfss	??_RADIO_DIO4& (0+255),7,b
  9130  008CAE  0012               	return	
  9131                           
  9132                           ;radio_driver_SX1276.c: 1333: RADIO_UnhandledInterrupt(MODULATION_LORA);
  9133                           
  9134                           ; BSR set to: 0
  9135                           
  9136                           ;radio_driver_SX1276.c: 1331: {
  9137                           ;radio_driver_SX1276.c: 1332: default:
  9138                           
  9139                           ; BSR set to: 0
  9140                           ;radio_driver_SX1276.c: 1328: {
  9141                           ;radio_driver_SX1276.c: 1330: switch (dioMapping)
  9142  008CB0  0E01               	movlw	1
  9143  008CB2  EC5C  F046         	call	_RADIO_UnhandledInterrupt
  9144                           
  9145                           ;radio_driver_SX1276.c: 1335: }
  9146                           
  9147                           ;radio_driver_SX1276.c: 1334: break;
  9148  008CB6  0012               	return	
  9149  008CB8                     __end_of_RADIO_DIO4:
  9150                           	opt stack 0
  9151                           tosu	equ	0xFFF
  9152                           tosh	equ	0xFFE
  9153                           tosl	equ	0xFFD
  9154                           pclath	equ	0xFFA
  9155                           tblptru	equ	0xFF8
  9156                           tblptrh	equ	0xFF7
  9157                           tblptrl	equ	0xFF6
  9158                           tablat	equ	0xFF5
  9159                           prodh	equ	0xFF4
  9160                           prodl	equ	0xFF3
  9161                           intcon	equ	0xFF2
  9162                           intcon2	equ	0xFF1
  9163                           intcon3	equ	0xFF0
  9164                           postinc0	equ	0xFEE
  9165                           wreg	equ	0xFE8
  9166                           postinc1	equ	0xFE6
  9167                           postdec1	equ	0xFE5
  9168                           plusw1	equ	0xFE3
  9169                           fsr1h	equ	0xFE2
  9170                           fsr1l	equ	0xFE1
  9171                           indf2	equ	0xFDF
  9172                           postinc2	equ	0xFDE
  9173                           postdec2	equ	0xFDD
  9174                           fsr2h	equ	0xFDA
  9175                           fsr2l	equ	0xFD9
  9176                           status	equ	0xFD8
  9177                           
  9178 ;; *************** function _RADIO_DIO3 *****************
  9179 ;; Defined at:
  9180 ;;		line 1298 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
  9181 ;; Parameters:    Size  Location     Type
  9182 ;;		None
  9183 ;; Auto vars:     Size  Location     Type
  9184 ;;  dioMapping      1    6[BANK0 ] unsigned char 
  9185 ;; Return value:  Size  Location     Type
  9186 ;;                  1    wreg      void 
  9187 ;; Registers used:
  9188 ;;		wreg, status,2, status,0, cstack
  9189 ;; Tracked objects:
  9190 ;;		On entry : 0/0
  9191 ;;		On exit  : 0/0
  9192 ;;		Unchanged: 0/0
  9193 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9194 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9195 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9196 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9197 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9198 ;;Total ram usage:        2 bytes
  9199 ;; Hardware stack levels used:    1
  9200 ;; Hardware stack levels required when called:   11
  9201 ;; This function calls:
  9202 ;;		_RADIO_RegisterRead
  9203 ;;		_RADIO_UnhandledInterrupt
  9204 ;; This function is called by:
  9205 ;;		_LORAWAN_Mainloop
  9206 ;; This function uses a non-reentrant model
  9207 ;;
  9208                           
  9209                           	psect	text50
  9210  009116                     __ptext50:
  9211                           	opt stack 0
  9212  009116                     _RADIO_DIO3:
  9213                           	opt stack 18
  9214                           
  9215                           ;radio_driver_SX1276.c: 1301: uint8_t dioMapping;
  9216                           ;radio_driver_SX1276.c: 1302: dioMapping = RADIO_RegisterRead(0x40) & 0x03;
  9217                           
  9218                           ;incstack = 0
  9219  009116  0E40               	movlw	64
  9220  009118  EC07  F048         	call	_RADIO_RegisterRead
  9221  00911C  0B03               	andlw	3
  9222  00911E  0100               	movlb	0	; () banked
  9223  009120  6F66               	movwf	RADIO_DIO3@dioMapping& (0+255),b
  9224                           
  9225                           ;radio_driver_SX1276.c: 1304: if ((RADIO_RegisterRead(0x01) & 0x80) != 0)
  9226  009122  0E01               	movlw	1
  9227  009124  EC07  F048         	call	_RADIO_RegisterRead
  9228  009128  0100               	movlb	0	; () banked
  9229  00912A  6F65               	movwf	??_RADIO_DIO3& (0+255),b
  9230  00912C  AF65               	btfss	??_RADIO_DIO3& (0+255),7,b
  9231  00912E  0012               	return	
  9232                           
  9233                           ;radio_driver_SX1276.c: 1310: RADIO_UnhandledInterrupt(MODULATION_LORA);
  9234                           
  9235                           ; BSR set to: 0
  9236                           
  9237                           ;radio_driver_SX1276.c: 1308: {
  9238                           ;radio_driver_SX1276.c: 1309: default:
  9239                           
  9240                           ; BSR set to: 0
  9241                           ;radio_driver_SX1276.c: 1305: {
  9242                           ;radio_driver_SX1276.c: 1307: switch (dioMapping)
  9243  009130  0E01               	movlw	1
  9244  009132  EC5C  F046         	call	_RADIO_UnhandledInterrupt
  9245                           
  9246                           ;radio_driver_SX1276.c: 1312: }
  9247                           
  9248                           ;radio_driver_SX1276.c: 1311: break;
  9249  009136  0012               	return	
  9250  009138                     __end_of_RADIO_DIO3:
  9251                           	opt stack 0
  9252                           tosu	equ	0xFFF
  9253                           tosh	equ	0xFFE
  9254                           tosl	equ	0xFFD
  9255                           pclath	equ	0xFFA
  9256                           tblptru	equ	0xFF8
  9257                           tblptrh	equ	0xFF7
  9258                           tblptrl	equ	0xFF6
  9259                           tablat	equ	0xFF5
  9260                           prodh	equ	0xFF4
  9261                           prodl	equ	0xFF3
  9262                           intcon	equ	0xFF2
  9263                           intcon2	equ	0xFF1
  9264                           intcon3	equ	0xFF0
  9265                           postinc0	equ	0xFEE
  9266                           wreg	equ	0xFE8
  9267                           postinc1	equ	0xFE6
  9268                           postdec1	equ	0xFE5
  9269                           plusw1	equ	0xFE3
  9270                           fsr1h	equ	0xFE2
  9271                           fsr1l	equ	0xFE1
  9272                           indf2	equ	0xFDF
  9273                           postinc2	equ	0xFDE
  9274                           postdec2	equ	0xFDD
  9275                           fsr2h	equ	0xFDA
  9276                           fsr2l	equ	0xFD9
  9277                           status	equ	0xFD8
  9278                           
  9279 ;; *************** function _RADIO_DIO2 *****************
  9280 ;; Defined at:
  9281 ;;		line 1268 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
  9282 ;; Parameters:    Size  Location     Type
  9283 ;;		None
  9284 ;; Auto vars:     Size  Location     Type
  9285 ;;  dioMapping      1   28[BANK0 ] unsigned char 
  9286 ;;  opMode          1   27[BANK0 ] unsigned char 
  9287 ;; Return value:  Size  Location     Type
  9288 ;;                  1    wreg      void 
  9289 ;; Registers used:
  9290 ;;		wreg, status,2, status,0, cstack
  9291 ;; Tracked objects:
  9292 ;;		On entry : 0/0
  9293 ;;		On exit  : 0/0
  9294 ;;		Unchanged: 0/0
  9295 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9296 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9297 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9298 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9299 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9300 ;;Total ram usage:        3 bytes
  9301 ;; Hardware stack levels used:    1
  9302 ;; Hardware stack levels required when called:   12
  9303 ;; This function calls:
  9304 ;;		_RADIO_FHSSChangeChannel
  9305 ;;		_RADIO_RegisterRead
  9306 ;;		_RADIO_UnhandledInterrupt
  9307 ;; This function is called by:
  9308 ;;		_LORAWAN_Mainloop
  9309 ;; This function uses a non-reentrant model
  9310 ;;
  9311                           
  9312                           	psect	text51
  9313  008596                     __ptext51:
  9314                           	opt stack 0
  9315  008596                     _RADIO_DIO2:
  9316                           	opt stack 17
  9317                           
  9318                           ;radio_driver_SX1276.c: 1271: uint8_t dioMapping;
  9319                           ;radio_driver_SX1276.c: 1272: uint8_t opMode;
  9320                           ;radio_driver_SX1276.c: 1273: dioMapping = (RADIO_RegisterRead(0x40) & 0x0C) >> (2);
  9321                           
  9322                           ;incstack = 0
  9323  008596  0E40               	movlw	64
  9324  008598  EC07  F048         	call	_RADIO_RegisterRead
  9325  00859C  0100               	movlb	0	; () banked
  9326  00859E  6F7A               	movwf	??_RADIO_DIO2& (0+255),b
  9327  0085A0  90D8               	bcf	status,0,c
  9328  0085A2  337A               	rrcf	??_RADIO_DIO2& (0+255),f,b
  9329  0085A4  90D8               	bcf	status,0,c
  9330  0085A6  317A               	rrcf	??_RADIO_DIO2& (0+255),w,b
  9331  0085A8  0B03               	andlw	3
  9332  0085AA  6F7C               	movwf	RADIO_DIO2@dioMapping& (0+255),b
  9333                           
  9334                           ;radio_driver_SX1276.c: 1274: opMode = RADIO_RegisterRead(0x01);
  9335  0085AC  0E01               	movlw	1
  9336  0085AE  EC07  F048         	call	_RADIO_RegisterRead
  9337  0085B2  0100               	movlb	0	; () banked
  9338  0085B4  6F7B               	movwf	RADIO_DIO2@opMode& (0+255),b
  9339                           
  9340                           ;radio_driver_SX1276.c: 1276: if ((RADIO_RegisterRead(0x01) & 0x80) != 0)
  9341  0085B6  0E01               	movlw	1
  9342  0085B8  EC07  F048         	call	_RADIO_RegisterRead
  9343  0085BC  0100               	movlb	0	; () banked
  9344  0085BE  6F7A               	movwf	??_RADIO_DIO2& (0+255),b
  9345  0085C0  AF7A               	btfss	??_RADIO_DIO2& (0+255),7,b
  9346  0085C2  0012               	return	
  9347  0085C4  D007               	goto	l412
  9348  0085C6                     
  9349                           ; BSR set to: 0
  9350                           ;radio_driver_SX1276.c: 1283: case 0x01:
  9351                           ;radio_driver_SX1276.c: 1284: case 0x02:
  9352                           ;radio_driver_SX1276.c: 1285: RADIO_FHSSChangeChannel();
  9353                           
  9354                           ; BSR set to: 0
  9355                           
  9356                           ; BSR set to: 0
  9357                           
  9358                           ; BSR set to: 0
  9359  0085C6  EC8C  F045         	call	_RADIO_FHSSChangeChannel	;wreg free
  9360                           
  9361                           ;radio_driver_SX1276.c: 1286: break;
  9362  0085CA  0012               	return	
  9363  0085CC                     
  9364                           ;radio_driver_SX1276.c: 1288: RADIO_UnhandledInterrupt(MODULATION_LORA);
  9365  0085CC  0E01               	movlw	1
  9366  0085CE  EC5C  F046         	call	_RADIO_UnhandledInterrupt
  9367                           
  9368                           ;radio_driver_SX1276.c: 1290: }
  9369                           
  9370                           ;radio_driver_SX1276.c: 1289: break;
  9371  0085D2  0012               	return	
  9372  0085D4                     l412:
  9373  0085D4  0100               	movlb	0	; () banked
  9374  0085D6  517C               	movf	RADIO_DIO2@dioMapping& (0+255),w,b
  9375                           
  9376                           ; Switch size 1, requested type "space"
  9377                           ; Number of cases is 3, Range of values is 0 to 2
  9378                           ; switch strategies available:
  9379                           ; Name         Instructions Cycles
  9380                           ; simple_byte           10     6 (average)
  9381                           ;	Chosen strategy is simple_byte
  9382  0085D8  0A00               	xorlw	0	; case 0
  9383  0085DA  B4D8               	btfsc	status,2,c
  9384  0085DC  D7F4               	goto	l413
  9385  0085DE  0A01               	xorlw	1	; case 1
  9386  0085E0  B4D8               	btfsc	status,2,c
  9387  0085E2  D7F1               	goto	l413
  9388  0085E4  0A03               	xorlw	3	; case 2
  9389  0085E6  B4D8               	btfsc	status,2,c
  9390  0085E8  D7EE               	goto	l413
  9391  0085EA  D7F0               	goto	l417
  9392  0085EC                     __end_of_RADIO_DIO2:
  9393                           	opt stack 0
  9394                           tosu	equ	0xFFF
  9395                           tosh	equ	0xFFE
  9396                           tosl	equ	0xFFD
  9397                           pclath	equ	0xFFA
  9398                           tblptru	equ	0xFF8
  9399                           tblptrh	equ	0xFF7
  9400                           tblptrl	equ	0xFF6
  9401                           tablat	equ	0xFF5
  9402                           prodh	equ	0xFF4
  9403                           prodl	equ	0xFF3
  9404                           intcon	equ	0xFF2
  9405                           intcon2	equ	0xFF1
  9406                           intcon3	equ	0xFF0
  9407                           postinc0	equ	0xFEE
  9408                           wreg	equ	0xFE8
  9409                           postinc1	equ	0xFE6
  9410                           postdec1	equ	0xFE5
  9411                           plusw1	equ	0xFE3
  9412                           fsr1h	equ	0xFE2
  9413                           fsr1l	equ	0xFE1
  9414                           indf2	equ	0xFDF
  9415                           postinc2	equ	0xFDE
  9416                           postdec2	equ	0xFDD
  9417                           fsr2h	equ	0xFDA
  9418                           fsr2l	equ	0xFD9
  9419                           status	equ	0xFD8
  9420                           
  9421 ;; *************** function _RADIO_DIO1 *****************
  9422 ;; Defined at:
  9423 ;;		line 1231 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
  9424 ;; Parameters:    Size  Location     Type
  9425 ;;		None
  9426 ;; Auto vars:     Size  Location     Type
  9427 ;;  dioMapping      1  108[BANK0 ] unsigned char 
  9428 ;; Return value:  Size  Location     Type
  9429 ;;                  1    wreg      void 
  9430 ;; Registers used:
  9431 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, btemp+1, btemp+2, btemp+11, tosl, tblptrl, tblptrh, tb
      +lptru, prodl, prodh, cstack
  9432 ;; Tracked objects:
  9433 ;;		On entry : 0/0
  9434 ;;		On exit  : 0/0
  9435 ;;		Unchanged: 0/0
  9436 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9437 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9438 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9439 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9440 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9441 ;;Total ram usage:        2 bytes
  9442 ;; Hardware stack levels used:    1
  9443 ;; Hardware stack levels required when called:   17
  9444 ;; This function calls:
  9445 ;;		_RADIO_FHSSChangeChannel
  9446 ;;		_RADIO_RegisterRead
  9447 ;;		_RADIO_RxTimeout
  9448 ;;		_RADIO_UnhandledInterrupt
  9449 ;; This function is called by:
  9450 ;;		_LORAWAN_Mainloop
  9451 ;; This function uses a non-reentrant model
  9452 ;;
  9453                           
  9454                           	psect	text52
  9455  00878A                     __ptext52:
  9456                           	opt stack 0
  9457  00878A                     _RADIO_DIO1:
  9458                           	opt stack 12
  9459                           
  9460                           ;radio_driver_SX1276.c: 1234: uint8_t dioMapping;
  9461                           ;radio_driver_SX1276.c: 1235: dioMapping = (RADIO_RegisterRead(0x40) & 0x30) >> (4);
  9462                           
  9463                           ;incstack = 0
  9464  00878A  0E40               	movlw	64
  9465  00878C  EC07  F048         	call	_RADIO_RegisterRead
  9466  008790  0100               	movlb	0	; () banked
  9467  008792  6FCB               	movwf	??_RADIO_DIO1& (0+255),b
  9468  008794  39CB               	swapf	??_RADIO_DIO1& (0+255),w,b
  9469  008796  0B0F               	andlw	15
  9470  008798  0B03               	andlw	3
  9471  00879A  6FCC               	movwf	RADIO_DIO1@dioMapping& (0+255),b
  9472                           
  9473                           ;radio_driver_SX1276.c: 1237: if ((RADIO_RegisterRead(0x01) & 0x80) != 0)
  9474  00879C  0E01               	movlw	1
  9475  00879E  EC07  F048         	call	_RADIO_RegisterRead
  9476  0087A2  0100               	movlb	0	; () banked
  9477  0087A4  6FCB               	movwf	??_RADIO_DIO1& (0+255),b
  9478  0087A6  BFCB               	btfsc	??_RADIO_DIO1& (0+255),7,b
  9479  0087A8  D00B               	goto	l398
  9480  0087AA  D013               	goto	l404
  9481  0087AC                     
  9482                           ; BSR set to: 0
  9483                           ;radio_driver_SX1276.c: 1243: RADIO_RxTimeout();
  9484                           
  9485                           ; BSR set to: 0
  9486  0087AC  EC34  F047         	call	_RADIO_RxTimeout	;wreg free
  9487                           
  9488                           ;radio_driver_SX1276.c: 1244: break;
  9489  0087B0  0012               	return	
  9490  0087B2                     
  9491                           ;radio_driver_SX1276.c: 1246: RADIO_FHSSChangeChannel();
  9492  0087B2  EC8C  F045         	call	_RADIO_FHSSChangeChannel	;wreg free
  9493                           
  9494                           ;radio_driver_SX1276.c: 1247: break;
  9495  0087B6  0012               	return	
  9496  0087B8                     
  9497                           ;radio_driver_SX1276.c: 1249: RADIO_UnhandledInterrupt(MODULATION_LORA);
  9498  0087B8  0E01               	movlw	1
  9499  0087BA  EC5C  F046         	call	_RADIO_UnhandledInterrupt
  9500                           
  9501                           ;radio_driver_SX1276.c: 1251: }
  9502                           
  9503                           ;radio_driver_SX1276.c: 1250: break;
  9504  0087BE  0012               	return	
  9505  0087C0                     l398:
  9506  0087C0  0100               	movlb	0	; () banked
  9507  0087C2  51CC               	movf	RADIO_DIO1@dioMapping& (0+255),w,b
  9508                           
  9509                           ; Switch size 1, requested type "space"
  9510                           ; Number of cases is 2, Range of values is 0 to 1
  9511                           ; switch strategies available:
  9512                           ; Name         Instructions Cycles
  9513                           ; simple_byte            7     4 (average)
  9514                           ;	Chosen strategy is simple_byte
  9515  0087C4  0A00               	xorlw	0	; case 0
  9516  0087C6  B4D8               	btfsc	status,2,c
  9517  0087C8  D7F1               	goto	l399
  9518  0087CA  0A01               	xorlw	1	; case 1
  9519  0087CC  B4D8               	btfsc	status,2,c
  9520  0087CE  D7F1               	goto	l401
  9521  0087D0  D7F3               	goto	l402
  9522  0087D2                     l404:
  9523                           
  9524                           ; BSR set to: 0
  9525                           
  9526                           ; BSR set to: 0
  9527  0087D2  51CC               	movf	RADIO_DIO1@dioMapping& (0+255),w,b
  9528                           
  9529                           ; Switch size 1, requested type "space"
  9530                           ; Number of cases is 1, Range of values is 0 to 0
  9531                           ; switch strategies available:
  9532                           ; Name         Instructions Cycles
  9533                           ; simple_byte            4     3 (average)
  9534                           ;	Chosen strategy is simple_byte
  9535  0087D4  0A00               	xorlw	0	; case 0
  9536                           
  9537                           ; BSR set to: 0
  9538  0087D6  0012               	return	
  9539  0087D8                     __end_of_RADIO_DIO1:
  9540                           	opt stack 0
  9541                           tosu	equ	0xFFF
  9542                           tosh	equ	0xFFE
  9543                           tosl	equ	0xFFD
  9544                           pclath	equ	0xFFA
  9545                           tblptru	equ	0xFF8
  9546                           tblptrh	equ	0xFF7
  9547                           tblptrl	equ	0xFF6
  9548                           tablat	equ	0xFF5
  9549                           prodh	equ	0xFF4
  9550                           prodl	equ	0xFF3
  9551                           intcon	equ	0xFF2
  9552                           intcon2	equ	0xFF1
  9553                           intcon3	equ	0xFF0
  9554                           postinc0	equ	0xFEE
  9555                           wreg	equ	0xFE8
  9556                           postinc1	equ	0xFE6
  9557                           postdec1	equ	0xFE5
  9558                           plusw1	equ	0xFE3
  9559                           fsr1h	equ	0xFE2
  9560                           fsr1l	equ	0xFE1
  9561                           indf2	equ	0xFDF
  9562                           postinc2	equ	0xFDE
  9563                           postdec2	equ	0xFDD
  9564                           fsr2h	equ	0xFDA
  9565                           fsr2l	equ	0xFD9
  9566                           status	equ	0xFD8
  9567                           
  9568 ;; *************** function _RADIO_RxTimeout *****************
  9569 ;; Defined at:
  9570 ;;		line 1066 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
  9571 ;; Parameters:    Size  Location     Type
  9572 ;;		None
  9573 ;; Auto vars:     Size  Location     Type
  9574 ;;		None
  9575 ;; Return value:  Size  Location     Type
  9576 ;;                  1    wreg      void 
  9577 ;; Registers used:
  9578 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, btemp+1, btemp+2, btemp+11, tosl, tblptrl, tblptrh, tb
      +lptru, prodl, prodh, cstack
  9579 ;; Tracked objects:
  9580 ;;		On entry : 0/0
  9581 ;;		On exit  : 0/0
  9582 ;;		Unchanged: 0/0
  9583 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9584 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9585 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9586 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9587 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9588 ;;Total ram usage:        0 bytes
  9589 ;; Hardware stack levels used:    1
  9590 ;; Hardware stack levels required when called:   16
  9591 ;; This function calls:
  9592 ;;		_LORAWAN_RxTimeout
  9593 ;;		_RADIO_RegisterWrite
  9594 ;;		_RADIO_WriteMode
  9595 ;;		_SwTimerStop
  9596 ;; This function is called by:
  9597 ;;		_RADIO_DIO1
  9598 ;; This function uses a non-reentrant model
  9599 ;;
  9600                           
  9601                           	psect	text53
  9602  008E68                     __ptext53:
  9603                           	opt stack 0
  9604  008E68                     _RADIO_RxTimeout:
  9605                           	opt stack 12
  9606                           
  9607                           ;radio_driver_SX1276.c: 1069: SwTimerStop(RadioConfiguration.watchdogTimerId);
  9608                           
  9609                           ;incstack = 0
  9610  008E68  0101               	movlb	1	; () banked
  9611  008E6A  5180               	movf	(_RadioConfiguration+41)& (0+255),w,b
  9612  008E6C  EC1B  F048         	call	_SwTimerStop
  9613                           
  9614                           ;radio_driver_SX1276.c: 1070: RADIO_RegisterWrite(0x12, 1<<(7));
  9615  008E70  0E80               	movlw	128
  9616  008E72  0100               	movlb	0	; () banked
  9617  008E74  6F62               	movwf	RADIO_RegisterWrite@value& (0+255),b
  9618  008E76  0E12               	movlw	18
  9619  008E78  ECDE  F048         	call	_RADIO_RegisterWrite
  9620                           
  9621                           ;radio_driver_SX1276.c: 1072: RADIO_WriteMode(MODE_SLEEP, RadioConfiguration.modulation,
      +                           0);
  9622  008E7C  C16F  F065         	movff	_RadioConfiguration+24,RADIO_WriteMode@newModulation
  9623  008E80  0E00               	movlw	0
  9624  008E82  0100               	movlb	0	; () banked
  9625  008E84  6F66               	movwf	RADIO_WriteMode@blocking& (0+255),b
  9626  008E86  0E00               	movlw	0
  9627  008E88  ECF4  F031         	call	_RADIO_WriteMode
  9628                           
  9629                           ;radio_driver_SX1276.c: 1073: RadioConfiguration.flags &= ~(1 << (1));
  9630  008E8C  0101               	movlb	1	; () banked
  9631  008E8E  937A               	bcf	(_RadioConfiguration+35)& (0+255),1,b
  9632                           
  9633                           ; BSR set to: 1
  9634                           ;radio_driver_SX1276.c: 1075: LORAWAN_RxTimeout ();
  9635  008E90  ECF4  F012         	call	_LORAWAN_RxTimeout	;wreg free
  9636  008E94  0012               	return		;funcret
  9637  008E96                     __end_of_RADIO_RxTimeout:
  9638                           	opt stack 0
  9639                           tosu	equ	0xFFF
  9640                           tosh	equ	0xFFE
  9641                           tosl	equ	0xFFD
  9642                           pclath	equ	0xFFA
  9643                           tblptru	equ	0xFF8
  9644                           tblptrh	equ	0xFF7
  9645                           tblptrl	equ	0xFF6
  9646                           tablat	equ	0xFF5
  9647                           prodh	equ	0xFF4
  9648                           prodl	equ	0xFF3
  9649                           intcon	equ	0xFF2
  9650                           intcon2	equ	0xFF1
  9651                           intcon3	equ	0xFF0
  9652                           postinc0	equ	0xFEE
  9653                           wreg	equ	0xFE8
  9654                           postinc1	equ	0xFE6
  9655                           postdec1	equ	0xFE5
  9656                           plusw1	equ	0xFE3
  9657                           fsr1h	equ	0xFE2
  9658                           fsr1l	equ	0xFE1
  9659                           indf2	equ	0xFDF
  9660                           postinc2	equ	0xFDE
  9661                           postdec2	equ	0xFDD
  9662                           fsr2h	equ	0xFDA
  9663                           fsr2l	equ	0xFD9
  9664                           status	equ	0xFD8
  9665                           
  9666 ;; *************** function _RADIO_FHSSChangeChannel *****************
  9667 ;; Defined at:
  9668 ;;		line 1158 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
  9669 ;; Parameters:    Size  Location     Type
  9670 ;;		None
  9671 ;; Auto vars:     Size  Location     Type
  9672 ;;  irqFlags        1   25[BANK0 ] unsigned char 
  9673 ;; Return value:  Size  Location     Type
  9674 ;;                  1    wreg      void 
  9675 ;; Registers used:
  9676 ;;		wreg, status,2, status,0, cstack
  9677 ;; Tracked objects:
  9678 ;;		On entry : 0/0
  9679 ;;		On exit  : 0/0
  9680 ;;		Unchanged: 0/0
  9681 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9682 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9683 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9684 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9685 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9686 ;;Total ram usage:        1 bytes
  9687 ;; Hardware stack levels used:    1
  9688 ;; Hardware stack levels required when called:   11
  9689 ;; This function calls:
  9690 ;;		_RADIO_RegisterRead
  9691 ;;		_RADIO_RegisterWrite
  9692 ;;		_RADIO_WriteFrequency
  9693 ;; This function is called by:
  9694 ;;		_RADIO_DIO1
  9695 ;;		_RADIO_DIO2
  9696 ;; This function uses a non-reentrant model
  9697 ;;
  9698                           
  9699                           	psect	text54
  9700  008B18                     __ptext54:
  9701                           	opt stack 0
  9702  008B18                     _RADIO_FHSSChangeChannel:
  9703                           	opt stack 17
  9704                           
  9705                           ;radio_driver_SX1276.c: 1160: uint8_t irqFlags;
  9706                           ;radio_driver_SX1276.c: 1161: irqFlags = RADIO_RegisterRead(0x12);
  9707                           
  9708                           ;incstack = 0
  9709  008B18  0E12               	movlw	18
  9710  008B1A  EC07  F048         	call	_RADIO_RegisterRead
  9711  008B1E  0100               	movlb	0	; () banked
  9712  008B20  6F79               	movwf	RADIO_FHSSChangeChannel@irqFlags& (0+255),b
  9713                           
  9714                           ; BSR set to: 0
  9715                           ;radio_driver_SX1276.c: 1163: if ((0) != RadioConfiguration.frequencyHopPeriod)
  9716  008B22  0101               	movlb	1	; () banked
  9717  008B24  5175               	movf	(_RadioConfiguration+30)& (0+255),w,b
  9718  008B26  1176               	iorwf	(_RadioConfiguration+31)& (0+255),w,b
  9719  008B28  B4D8               	btfsc	status,2,c
  9720  008B2A  D00F               	goto	l375
  9721                           
  9722                           ; BSR set to: 1
  9723                           ;radio_driver_SX1276.c: 1164: {
  9724                           ;radio_driver_SX1276.c: 1165: if ((0) != RadioConfiguration.fhssNextFrequency)
  9725  008B2C  5186               	movf	(_RadioConfiguration+47)& (0+255),w,b
  9726  008B2E  1187               	iorwf	(_RadioConfiguration+48)& (0+255),w,b
  9727  008B30  B4D8               	btfsc	status,2,c
  9728  008B32  D00B               	goto	l375
  9729                           
  9730                           ; BSR set to: 1
  9731                           ;radio_driver_SX1276.c: 1166: {
  9732                           ;radio_driver_SX1276.c: 1167: RADIO_WriteFrequency(RadioConfiguration.fhssNextFrequency(
      +                          ));
  9733  008B34  0E00               	movlw	0
  9734  008B36  0100               	movlb	0	; () banked
  9735  008B38  6F6D               	movwf	RADIO_WriteFrequency@frequency& (0+255),b
  9736  008B3A  0E00               	movlw	0
  9737  008B3C  6F6E               	movwf	(RADIO_WriteFrequency@frequency+1)& (0+255),b
  9738  008B3E  0E00               	movlw	0
  9739  008B40  6F6F               	movwf	(RADIO_WriteFrequency@frequency+2)& (0+255),b
  9740  008B42  0E00               	movlw	0
  9741  008B44  6F70               	movwf	(RADIO_WriteFrequency@frequency+3)& (0+255),b
  9742  008B46  ECE2  F033         	call	_RADIO_WriteFrequency	;wreg free
  9743  008B4A                     l375:
  9744                           
  9745                           ;radio_driver_SX1276.c: 1168: }
  9746                           ;radio_driver_SX1276.c: 1169: }
  9747                           ;radio_driver_SX1276.c: 1172: RADIO_RegisterWrite(0x12, 1<<(1));
  9748  008B4A  0E02               	movlw	2
  9749  008B4C  0100               	movlb	0	; () banked
  9750  008B4E  6F62               	movwf	RADIO_RegisterWrite@value& (0+255),b
  9751  008B50  0E12               	movlw	18
  9752  008B52  ECDE  F048         	call	_RADIO_RegisterWrite
  9753  008B56  0012               	return		;funcret
  9754  008B58                     __end_of_RADIO_FHSSChangeChannel:
  9755                           	opt stack 0
  9756                           tosu	equ	0xFFF
  9757                           tosh	equ	0xFFE
  9758                           tosl	equ	0xFFD
  9759                           pclath	equ	0xFFA
  9760                           tblptru	equ	0xFF8
  9761                           tblptrh	equ	0xFF7
  9762                           tblptrl	equ	0xFF6
  9763                           tablat	equ	0xFF5
  9764                           prodh	equ	0xFF4
  9765                           prodl	equ	0xFF3
  9766                           intcon	equ	0xFF2
  9767                           intcon2	equ	0xFF1
  9768                           intcon3	equ	0xFF0
  9769                           postinc0	equ	0xFEE
  9770                           wreg	equ	0xFE8
  9771                           postinc1	equ	0xFE6
  9772                           postdec1	equ	0xFE5
  9773                           plusw1	equ	0xFE3
  9774                           fsr1h	equ	0xFE2
  9775                           fsr1l	equ	0xFE1
  9776                           indf2	equ	0xFDF
  9777                           postinc2	equ	0xFDE
  9778                           postdec2	equ	0xFDD
  9779                           fsr2h	equ	0xFDA
  9780                           fsr2l	equ	0xFD9
  9781                           status	equ	0xFD8
  9782                           
  9783 ;; *************** function _RADIO_DIO0 *****************
  9784 ;; Defined at:
  9785 ;;		line 1176 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
  9786 ;; Parameters:    Size  Location     Type
  9787 ;;		None
  9788 ;; Auto vars:     Size  Location     Type
  9789 ;;  opMode          1  152[BANK0 ] unsigned char 
  9790 ;;  dioMapping      1  151[BANK0 ] unsigned char 
  9791 ;; Return value:  Size  Location     Type
  9792 ;;                  1    wreg      void 
  9793 ;; Registers used:
  9794 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, btemp+1, btemp+2, btemp+8, btemp+9, btem
      +p+10, btemp+11, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9795 ;; Tracked objects:
  9796 ;;		On entry : 0/0
  9797 ;;		On exit  : 0/0
  9798 ;;		Unchanged: 0/0
  9799 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9800 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9801 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9802 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9803 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9804 ;;Total ram usage:        4 bytes
  9805 ;; Hardware stack levels used:    1
  9806 ;; Hardware stack levels required when called:   17
  9807 ;; This function calls:
  9808 ;;		_RADIO_FSKPacketSent
  9809 ;;		_RADIO_FSKPayloadReady
  9810 ;;		_RADIO_RegisterRead
  9811 ;;		_RADIO_RxDone
  9812 ;;		_RADIO_TxDone
  9813 ;;		_RADIO_UnhandledInterrupt
  9814 ;; This function is called by:
  9815 ;;		_LORAWAN_Mainloop
  9816 ;; This function uses a non-reentrant model
  9817 ;;
  9818                           
  9819                           	psect	text55
  9820  00764A                     __ptext55:
  9821                           	opt stack 0
  9822  00764A                     _RADIO_DIO0:
  9823                           	opt stack 12
  9824                           
  9825                           ;radio_driver_SX1276.c: 1179: uint8_t dioMapping;
  9826                           ;radio_driver_SX1276.c: 1180: uint8_t opMode;
  9827                           ;radio_driver_SX1276.c: 1181: dioMapping = (RADIO_RegisterRead(0x40) & 0xC0) >> (6);
  9828                           
  9829                           ;incstack = 0
  9830  00764A  0E40               	movlw	64
  9831  00764C  EC07  F048         	call	_RADIO_RegisterRead
  9832  007650  0100               	movlb	0	; () banked
  9833  007652  6FF5               	movwf	??_RADIO_DIO0& (0+255),b
  9834  007654  0E06               	movlw	6
  9835  007656  6FF6               	movwf	(??_RADIO_DIO0+1)& (0+255),b
  9836  007658                     u13495:
  9837  007658  90D8               	bcf	status,0,c
  9838  00765A  33F5               	rrcf	??_RADIO_DIO0& (0+255),f,b
  9839  00765C  2FF6               	decfsz	(??_RADIO_DIO0+1)& (0+255),f,b
  9840  00765E  D7FC               	goto	u13495
  9841  007660  51F5               	movf	??_RADIO_DIO0& (0+255),w,b
  9842  007662  0B03               	andlw	3
  9843  007664  6FF7               	movwf	RADIO_DIO0@dioMapping& (0+255),b
  9844                           
  9845                           ;radio_driver_SX1276.c: 1182: opMode = RADIO_RegisterRead(0x01);
  9846  007666  0E01               	movlw	1
  9847  007668  EC07  F048         	call	_RADIO_RegisterRead
  9848  00766C  0100               	movlb	0	; () banked
  9849  00766E  6FF8               	movwf	RADIO_DIO0@opMode& (0+255),b
  9850                           
  9851                           ; BSR set to: 0
  9852                           ;radio_driver_SX1276.c: 1184: if ((opMode & 0x80) != 0)
  9853  007670  BFF8               	btfsc	RADIO_DIO0@opMode& (0+255),7,b
  9854  007672  D00B               	goto	l380
  9855  007674  D02C               	goto	l386
  9856  007676                     
  9857                           ; BSR set to: 0
  9858                           ;radio_driver_SX1276.c: 1190: RADIO_RxDone();
  9859                           
  9860                           ; BSR set to: 0
  9861  007676  ECCF  F034         	call	_RADIO_RxDone	;wreg free
  9862                           
  9863                           ;radio_driver_SX1276.c: 1191: break;
  9864  00767A  0012               	return	
  9865  00767C                     
  9866                           ;radio_driver_SX1276.c: 1193: RADIO_TxDone();
  9867  00767C  ECCF  F02F         	call	_RADIO_TxDone	;wreg free
  9868                           
  9869                           ;radio_driver_SX1276.c: 1194: break;
  9870  007680  0012               	return	
  9871  007682                     
  9872                           ;radio_driver_SX1276.c: 1196: RADIO_UnhandledInterrupt(MODULATION_LORA);
  9873  007682  0E01               	movlw	1
  9874  007684  EC5C  F046         	call	_RADIO_UnhandledInterrupt
  9875                           
  9876                           ;radio_driver_SX1276.c: 1198: }
  9877                           
  9878                           ;radio_driver_SX1276.c: 1197: break;
  9879  007688  0012               	return	
  9880  00768A                     l380:
  9881  00768A  0100               	movlb	0	; () banked
  9882  00768C  51F7               	movf	RADIO_DIO0@dioMapping& (0+255),w,b
  9883                           
  9884                           ; Switch size 1, requested type "space"
  9885                           ; Number of cases is 2, Range of values is 0 to 1
  9886                           ; switch strategies available:
  9887                           ; Name         Instructions Cycles
  9888                           ; simple_byte            7     4 (average)
  9889                           ;	Chosen strategy is simple_byte
  9890  00768E  0A00               	xorlw	0	; case 0
  9891  007690  B4D8               	btfsc	status,2,c
  9892  007692  D7F1               	goto	l381
  9893  007694  0A01               	xorlw	1	; case 1
  9894  007696  B4D8               	btfsc	status,2,c
  9895  007698  D7F1               	goto	l383
  9896  00769A  D7F3               	goto	l384
  9897  00769C                     
  9898                           ; BSR set to: 0
  9899                           ;radio_driver_SX1276.c: 1207: opMode &= 0x07;
  9900                           
  9901                           ; BSR set to: 0
  9902  00769C  0E07               	movlw	7
  9903  00769E  17F8               	andwf	RADIO_DIO0@opMode& (0+255),f,b
  9904                           
  9905                           ;radio_driver_SX1276.c: 1208: if (MODE_TX == opMode)
  9906  0076A0  0E03               	movlw	3
  9907  0076A2  19F8               	xorwf	RADIO_DIO0@opMode& (0+255),w,b
  9908  0076A4  A4D8               	btfss	status,2,c
  9909  0076A6  D003               	goto	l388
  9910                           
  9911                           ; BSR set to: 0
  9912                           ;radio_driver_SX1276.c: 1209: {
  9913                           ;radio_driver_SX1276.c: 1211: RADIO_FSKPacketSent();
  9914  0076A8  ECA3  F02E         	call	_RADIO_FSKPacketSent	;wreg free
  9915                           
  9916                           ;radio_driver_SX1276.c: 1212: }
  9917  0076AC  0012               	return	
  9918  0076AE                     l388:
  9919                           
  9920                           ;radio_driver_SX1276.c: 1213: else if (MODE_RXCONT == opMode)
  9921  0076AE  0E05               	movlw	5
  9922  0076B0  0100               	movlb	0	; () banked
  9923  0076B2  19F8               	xorwf	RADIO_DIO0@opMode& (0+255),w,b
  9924  0076B4  A4D8               	btfss	status,2,c
  9925  0076B6  D003               	goto	l390
  9926                           
  9927                           ; BSR set to: 0
  9928                           ;radio_driver_SX1276.c: 1214: {
  9929                           ;radio_driver_SX1276.c: 1216: RADIO_FSKPayloadReady();
  9930  0076B8  EC8D  F038         	call	_RADIO_FSKPayloadReady	;wreg free
  9931                           
  9932                           ;radio_driver_SX1276.c: 1217: }
  9933  0076BC  0012               	return	
  9934  0076BE                     l390:
  9935                           
  9936                           ;radio_driver_SX1276.c: 1218: else
  9937                           ;radio_driver_SX1276.c: 1219: {
  9938                           ;radio_driver_SX1276.c: 1220: RADIO_UnhandledInterrupt(MODULATION_FSK);
  9939  0076BE  0E00               	movlw	0
  9940  0076C0  EC5C  F046         	call	_RADIO_UnhandledInterrupt
  9941                           
  9942                           ;radio_driver_SX1276.c: 1221: }
  9943                           ;radio_driver_SX1276.c: 1222: break;
  9944  0076C4  0012               	return	
  9945  0076C6                     
  9946                           ;radio_driver_SX1276.c: 1224: RADIO_UnhandledInterrupt(MODULATION_FSK);
  9947  0076C6  0E00               	movlw	0
  9948  0076C8  EC5C  F046         	call	_RADIO_UnhandledInterrupt
  9949                           
  9950                           ;radio_driver_SX1276.c: 1226: }
  9951                           
  9952                           ;radio_driver_SX1276.c: 1225: break;
  9953  0076CC  0012               	return	
  9954  0076CE                     l386:
  9955  0076CE  0100               	movlb	0	; () banked
  9956  0076D0  51F7               	movf	RADIO_DIO0@dioMapping& (0+255),w,b
  9957                           
  9958                           ; Switch size 1, requested type "space"
  9959                           ; Number of cases is 1, Range of values is 0 to 0
  9960                           ; switch strategies available:
  9961                           ; Name         Instructions Cycles
  9962                           ; simple_byte            4     3 (average)
  9963                           ;	Chosen strategy is simple_byte
  9964  0076D2  0A00               	xorlw	0	; case 0
  9965  0076D4  B4D8               	btfsc	status,2,c
  9966  0076D6  D7E2               	goto	l387
  9967  0076D8  D7F6               	goto	l393
  9968  0076DA                     __end_of_RADIO_DIO0:
  9969                           	opt stack 0
  9970                           tosu	equ	0xFFF
  9971                           tosh	equ	0xFFE
  9972                           tosl	equ	0xFFD
  9973                           pclath	equ	0xFFA
  9974                           tblptru	equ	0xFF8
  9975                           tblptrh	equ	0xFF7
  9976                           tblptrl	equ	0xFF6
  9977                           tablat	equ	0xFF5
  9978                           prodh	equ	0xFF4
  9979                           prodl	equ	0xFF3
  9980                           intcon	equ	0xFF2
  9981                           intcon2	equ	0xFF1
  9982                           intcon3	equ	0xFF0
  9983                           postinc0	equ	0xFEE
  9984                           wreg	equ	0xFE8
  9985                           postinc1	equ	0xFE6
  9986                           postdec1	equ	0xFE5
  9987                           plusw1	equ	0xFE3
  9988                           fsr1h	equ	0xFE2
  9989                           fsr1l	equ	0xFE1
  9990                           indf2	equ	0xFDF
  9991                           postinc2	equ	0xFDE
  9992                           postdec2	equ	0xFDD
  9993                           fsr2h	equ	0xFDA
  9994                           fsr2l	equ	0xFD9
  9995                           status	equ	0xFD8
  9996                           
  9997 ;; *************** function _RADIO_UnhandledInterrupt *****************
  9998 ;; Defined at:
  9999 ;;		line 1139 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 10000 ;; Parameters:    Size  Location     Type
 10001 ;;  modulation      1    wreg     enum E6984
 10002 ;; Auto vars:     Size  Location     Type
 10003 ;;  modulation      1    4[BANK0 ] enum E6984
 10004 ;; Return value:  Size  Location     Type
 10005 ;;                  1    wreg      void 
 10006 ;; Registers used:
 10007 ;;		wreg, status,2, status,0, cstack
 10008 ;; Tracked objects:
 10009 ;;		On entry : 0/0
 10010 ;;		On exit  : 0/0
 10011 ;;		Unchanged: 0/0
 10012 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10013 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10014 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10015 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10016 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10017 ;;Total ram usage:        1 bytes
 10018 ;; Hardware stack levels used:    1
 10019 ;; Hardware stack levels required when called:   10
 10020 ;; This function calls:
 10021 ;;		_RADIO_RegisterWrite
 10022 ;; This function is called by:
 10023 ;;		_RADIO_DIO0
 10024 ;;		_RADIO_DIO1
 10025 ;;		_RADIO_DIO2
 10026 ;;		_RADIO_DIO3
 10027 ;;		_RADIO_DIO4
 10028 ;;		_RADIO_DIO5
 10029 ;; This function uses a non-reentrant model
 10030 ;;
 10031                           
 10032                           	psect	text56
 10033  008CB8                     __ptext56:
 10034                           	opt stack 0
 10035  008CB8                     _RADIO_UnhandledInterrupt:
 10036                           	opt stack 18
 10037                           
 10038                           ;incstack = 0
 10039                           ;RADIO_UnhandledInterrupt@modulation stored from wreg
 10040  008CB8  0100               	movlb	0	; () banked
 10041  008CBA  6F64               	movwf	RADIO_UnhandledInterrupt@modulation& (0+255),b
 10042                           
 10043                           ;radio_driver_SX1276.c: 1144: if (MODULATION_LORA == modulation)
 10044  008CBC  0100               	movlb	0	; () banked
 10045  008CBE  0564               	decf	RADIO_UnhandledInterrupt@modulation& (0+255),w,b
 10046  008CC0  A4D8               	btfss	status,2,c
 10047  008CC2  D006               	goto	l369
 10048                           
 10049                           ; BSR set to: 0
 10050                           ;radio_driver_SX1276.c: 1145: {
 10051                           ;radio_driver_SX1276.c: 1146: RADIO_RegisterWrite(0x12, 0xFF);
 10052  008CC4  0EFF               	movlw	255
 10053  008CC6  6F62               	movwf	RADIO_RegisterWrite@value& (0+255),b
 10054  008CC8  0E12               	movlw	18
 10055  008CCA  ECDE  F048         	call	_RADIO_RegisterWrite
 10056                           
 10057                           ;radio_driver_SX1276.c: 1147: }
 10058  008CCE  0012               	return	
 10059  008CD0                     l369:
 10060                           
 10061                           ;radio_driver_SX1276.c: 1148: else
 10062                           ;radio_driver_SX1276.c: 1149: {
 10063                           ;radio_driver_SX1276.c: 1152: RADIO_RegisterWrite(0x3E, 0xFF);
 10064  008CD0  0EFF               	movlw	255
 10065  008CD2  0100               	movlb	0	; () banked
 10066  008CD4  6F62               	movwf	RADIO_RegisterWrite@value& (0+255),b
 10067  008CD6  0E3E               	movlw	62
 10068  008CD8  ECDE  F048         	call	_RADIO_RegisterWrite
 10069                           
 10070                           ;radio_driver_SX1276.c: 1153: RADIO_RegisterWrite(0x3F, 0xFF);
 10071  008CDC  0EFF               	movlw	255
 10072  008CDE  0100               	movlb	0	; () banked
 10073  008CE0  6F62               	movwf	RADIO_RegisterWrite@value& (0+255),b
 10074  008CE2  0E3F               	movlw	63
 10075  008CE4  ECDE  F048         	call	_RADIO_RegisterWrite
 10076  008CE8  0012               	return	
 10077  008CEA                     __end_of_RADIO_UnhandledInterrupt:
 10078                           	opt stack 0
 10079                           tosu	equ	0xFFF
 10080                           tosh	equ	0xFFE
 10081                           tosl	equ	0xFFD
 10082                           pclath	equ	0xFFA
 10083                           tblptru	equ	0xFF8
 10084                           tblptrh	equ	0xFF7
 10085                           tblptrl	equ	0xFF6
 10086                           tablat	equ	0xFF5
 10087                           prodh	equ	0xFF4
 10088                           prodl	equ	0xFF3
 10089                           intcon	equ	0xFF2
 10090                           intcon2	equ	0xFF1
 10091                           intcon3	equ	0xFF0
 10092                           postinc0	equ	0xFEE
 10093                           wreg	equ	0xFE8
 10094                           postinc1	equ	0xFE6
 10095                           postdec1	equ	0xFE5
 10096                           plusw1	equ	0xFE3
 10097                           fsr1h	equ	0xFE2
 10098                           fsr1l	equ	0xFE1
 10099                           indf2	equ	0xFDF
 10100                           postinc2	equ	0xFDE
 10101                           postdec2	equ	0xFDD
 10102                           fsr2h	equ	0xFDA
 10103                           fsr2l	equ	0xFD9
 10104                           status	equ	0xFD8
 10105                           
 10106 ;; *************** function _RADIO_TxDone *****************
 10107 ;; Defined at:
 10108 ;;		line 1078 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 10109 ;; Parameters:    Size  Location     Type
 10110 ;;		None
 10111 ;; Auto vars:     Size  Location     Type
 10112 ;;  timeOnAir       4  135[BANK0 ] unsigned long 
 10113 ;; Return value:  Size  Location     Type
 10114 ;;                  1    wreg      void 
 10115 ;; Registers used:
 10116 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10117 ;; Tracked objects:
 10118 ;;		On entry : 0/0
 10119 ;;		On exit  : 0/0
 10120 ;;		Unchanged: 0/0
 10121 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10122 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10123 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10124 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10125 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10126 ;;Total ram usage:       12 bytes
 10127 ;; Hardware stack levels used:    1
 10128 ;; Hardware stack levels required when called:   15
 10129 ;; This function calls:
 10130 ;;		_LORAWAN_TxDone
 10131 ;;		_RADIO_RegisterWrite
 10132 ;;		_RADIO_WriteMode
 10133 ;;		_SwTimerReadValue
 10134 ;;		_SwTimerStop
 10135 ;;		___lmul
 10136 ;; This function is called by:
 10137 ;;		_RADIO_DIO0
 10138 ;; This function uses a non-reentrant model
 10139 ;;
 10140                           
 10141                           	psect	text57
 10142  005F9E                     __ptext57:
 10143                           	opt stack 0
 10144  005F9E                     _RADIO_TxDone:
 10145                           	opt stack 13
 10146                           
 10147                           ;radio_driver_SX1276.c: 1080: uint32_t timeOnAir;
 10148                           ;radio_driver_SX1276.c: 1082: SwTimerStop(RadioConfiguration.watchdogTimerId);
 10149                           
 10150                           ;incstack = 0
 10151  005F9E  0101               	movlb	1	; () banked
 10152  005FA0  5180               	movf	(_RadioConfiguration+41)& (0+255),w,b
 10153  005FA2  EC1B  F048         	call	_SwTimerStop
 10154                           
 10155                           ;radio_driver_SX1276.c: 1083: RADIO_RegisterWrite(0x12, 1<<(3));
 10156  005FA6  0E08               	movlw	8
 10157  005FA8  0100               	movlb	0	; () banked
 10158  005FAA  6F62               	movwf	RADIO_RegisterWrite@value& (0+255),b
 10159  005FAC  0E12               	movlw	18
 10160  005FAE  ECDE  F048         	call	_RADIO_RegisterWrite
 10161                           
 10162                           ;radio_driver_SX1276.c: 1084: RADIO_WriteMode(MODE_SLEEP, RadioConfiguration.modulation,
      +                           0);
 10163  005FB2  C16F  F065         	movff	_RadioConfiguration+24,RADIO_WriteMode@newModulation
 10164  005FB6  0E00               	movlw	0
 10165  005FB8  0100               	movlb	0	; () banked
 10166  005FBA  6F66               	movwf	RADIO_WriteMode@blocking& (0+255),b
 10167  005FBC  0E00               	movlw	0
 10168  005FBE  ECF4  F031         	call	_RADIO_WriteMode
 10169                           
 10170                           ;radio_driver_SX1276.c: 1085: RadioConfiguration.flags &= ~(1 << (0));
 10171  005FC2  0101               	movlb	1	; () banked
 10172  005FC4  917A               	bcf	(_RadioConfiguration+35)& (0+255),0,b
 10173                           
 10174                           ; BSR set to: 1
 10175                           ;radio_driver_SX1276.c: 1086: if ((RadioConfiguration.flags & (1 << (4))) == 0)
 10176  005FC6  B97A               	btfsc	(_RadioConfiguration+35)& (0+255),4,b
 10177  005FC8  0012               	return	
 10178                           
 10179                           ; BSR set to: 1
 10180                           ;radio_driver_SX1276.c: 1087: {
 10181                           ;radio_driver_SX1276.c: 1088: timeOnAir = ((uint32_t)20000) - ((SwTimerReadValue(RadioCo
      +                          nfiguration.timeOnAirTimerId)) < 0x00DFAC1FUL ? ( (((uint32_t)(SwTimerReadValue(RadioCon
      +                          figuration.timeOnAirTimerId))) * 125UL) >> (12) ) : ( (((uint32_t)(SwTimerReadValue(Radi
      +                          oConfiguration.t
 10182  005FCA  517E               	movf	(_RadioConfiguration+39)& (0+255),w,b
 10183  005FCC  ECAC  F045         	call	_SwTimerReadValue
 10184  005FD0  0100               	movlb	0	; () banked
 10185  005FD2  5194               	movf	(?_SwTimerReadValue+3)& (0+255),w,b
 10186  005FD4  E108               	bnz	u12760
 10187  005FD6  0E1F               	movlw	31
 10188  005FD8  5D91               	subwf	?_SwTimerReadValue& (0+255),w,b
 10189  005FDA  0EAC               	movlw	172
 10190  005FDC  5992               	subwfb	(?_SwTimerReadValue+1)& (0+255),w,b
 10191  005FDE  0EDF               	movlw	223
 10192  005FE0  5993               	subwfb	(?_SwTimerReadValue+2)& (0+255),w,b
 10193  005FE2  A0D8               	btfss	status,0,c
 10194  005FE4  D021               	goto	l344
 10195  005FE6                     u12760:
 10196                           
 10197                           ; BSR set to: 0
 10198  005FE6  0101               	movlb	1	; () banked
 10199  005FE8  517E               	movf	(_RadioConfiguration+39)& (0+255),w,b
 10200  005FEA  ECAC  F045         	call	_SwTimerReadValue
 10201  005FEE  0E0D               	movlw	13
 10202  005FF0  D006               	goto	u12770
 10203  005FF2                     u12775:
 10204  005FF2  0100               	movlb	0	; () banked
 10205  005FF4  90D8               	bcf	status,0,c
 10206  005FF6  3394               	rrcf	(?_SwTimerReadValue+3)& (0+255),f,b
 10207  005FF8  3393               	rrcf	(?_SwTimerReadValue+2)& (0+255),f,b
 10208  005FFA  3392               	rrcf	(?_SwTimerReadValue+1)& (0+255),f,b
 10209  005FFC  3391               	rrcf	?_SwTimerReadValue& (0+255),f,b
 10210  005FFE                     u12770:
 10211  005FFE  2EE8               	decfsz	wreg,f,c
 10212  006000  D7F8               	goto	u12775
 10213  006002  C091  F09A         	movff	?_SwTimerReadValue,___lmul@multiplier
 10214  006006  C092  F09B         	movff	?_SwTimerReadValue+1,___lmul@multiplier+1
 10215  00600A  C093  F09C         	movff	?_SwTimerReadValue+2,___lmul@multiplier+2
 10216  00600E  C094  F09D         	movff	?_SwTimerReadValue+3,___lmul@multiplier+3
 10217  006012  0E7D               	movlw	125
 10218  006014  6F9E               	movwf	___lmul@multiplicand& (0+255),b
 10219  006016  0E00               	movlw	0
 10220  006018  6F9F               	movwf	(___lmul@multiplicand+1)& (0+255),b
 10221  00601A  0E00               	movlw	0
 10222  00601C  6FA0               	movwf	(___lmul@multiplicand+2)& (0+255),b
 10223  00601E  0E00               	movlw	0
 10224  006020  6FA1               	movwf	(___lmul@multiplicand+3)& (0+255),b
 10225  006022  EC73  F042         	call	___lmul	;wreg free
 10226  006026  D021               	goto	L5
 10227  006028                     l344:
 10228  006028  0101               	movlb	1	; () banked
 10229  00602A  517E               	movf	(_RadioConfiguration+39)& (0+255),w,b
 10230  00602C  ECAC  F045         	call	_SwTimerReadValue
 10231  006030  C091  F09A         	movff	?_SwTimerReadValue,___lmul@multiplier
 10232  006034  C092  F09B         	movff	?_SwTimerReadValue+1,___lmul@multiplier+1
 10233  006038  C093  F09C         	movff	?_SwTimerReadValue+2,___lmul@multiplier+2
 10234  00603C  C094  F09D         	movff	?_SwTimerReadValue+3,___lmul@multiplier+3
 10235  006040  0E7D               	movlw	125
 10236  006042  0100               	movlb	0	; () banked
 10237  006044  6F9E               	movwf	___lmul@multiplicand& (0+255),b
 10238  006046  0E00               	movlw	0
 10239  006048  6F9F               	movwf	(___lmul@multiplicand+1)& (0+255),b
 10240  00604A  0E00               	movlw	0
 10241  00604C  6FA0               	movwf	(___lmul@multiplicand+2)& (0+255),b
 10242  00604E  0E00               	movlw	0
 10243  006050  6FA1               	movwf	(___lmul@multiplicand+3)& (0+255),b
 10244  006052  EC73  F042         	call	___lmul	;wreg free
 10245  006056  0E0D               	movlw	13
 10246  006058  D006               	goto	u12780
 10247  00605A                     u12785:
 10248  00605A  0100               	movlb	0	; () banked
 10249  00605C  90D8               	bcf	status,0,c
 10250  00605E  339D               	rrcf	(?___lmul+3)& (0+255),f,b
 10251  006060  339C               	rrcf	(?___lmul+2)& (0+255),f,b
 10252  006062  339B               	rrcf	(?___lmul+1)& (0+255),f,b
 10253  006064  339A               	rrcf	?___lmul& (0+255),f,b
 10254  006066                     u12780:
 10255  006066  2EE8               	decfsz	wreg,f,c
 10256  006068  D7F8               	goto	u12785
 10257  00606A                     L5:
 10258  00606A  C09A  F0EB         	movff	?___lmul,_RADIO_TxDone$532
 10259  00606E  C09B  F0EC         	movff	?___lmul+1,_RADIO_TxDone$532+1
 10260  006072  C09C  F0ED         	movff	?___lmul+2,_RADIO_TxDone$532+2
 10261  006076  C09D  F0EE         	movff	?___lmul+3,_RADIO_TxDone$532+3
 10262                           
 10263                           ; BSR set to: 0
 10264  00607A  C0EB  F0E3         	movff	_RADIO_TxDone$532,??_RADIO_TxDone
 10265  00607E  C0EC  F0E4         	movff	_RADIO_TxDone$532+1,??_RADIO_TxDone+1
 10266  006082  C0ED  F0E5         	movff	_RADIO_TxDone$532+2,??_RADIO_TxDone+2
 10267  006086  C0EE  F0E6         	movff	_RADIO_TxDone$532+3,??_RADIO_TxDone+3
 10268  00608A  0100               	movlb	0	; () banked
 10269  00608C  1FE3               	comf	??_RADIO_TxDone& (0+255),f,b
 10270  00608E  1FE4               	comf	(??_RADIO_TxDone+1)& (0+255),f,b
 10271  006090  1FE5               	comf	(??_RADIO_TxDone+2)& (0+255),f,b
 10272  006092  1FE6               	comf	(??_RADIO_TxDone+3)& (0+255),f,b
 10273  006094  2BE3               	incf	??_RADIO_TxDone& (0+255),f,b
 10274  006096  0E00               	movlw	0
 10275  006098  23E4               	addwfc	(??_RADIO_TxDone+1)& (0+255),f,b
 10276  00609A  23E5               	addwfc	(??_RADIO_TxDone+2)& (0+255),f,b
 10277  00609C  23E6               	addwfc	(??_RADIO_TxDone+3)& (0+255),f,b
 10278  00609E  0E20               	movlw	32
 10279  0060A0  25E3               	addwf	??_RADIO_TxDone& (0+255),w,b
 10280  0060A2  6FE7               	movwf	RADIO_TxDone@timeOnAir& (0+255),b
 10281  0060A4  0E4E               	movlw	78
 10282  0060A6  21E4               	addwfc	(??_RADIO_TxDone+1)& (0+255),w,b
 10283  0060A8  6FE8               	movwf	(RADIO_TxDone@timeOnAir+1)& (0+255),b
 10284  0060AA  0E00               	movlw	0
 10285  0060AC  21E5               	addwfc	(??_RADIO_TxDone+2)& (0+255),w,b
 10286  0060AE  6FE9               	movwf	(RADIO_TxDone@timeOnAir+2)& (0+255),b
 10287  0060B0  0E00               	movlw	0
 10288  0060B2  21E6               	addwfc	(??_RADIO_TxDone+3)& (0+255),w,b
 10289  0060B4  6FEA               	movwf	(RADIO_TxDone@timeOnAir+3)& (0+255),b
 10290                           
 10291                           ; BSR set to: 0
 10292                           ;radio_driver_SX1276.c: 1089: LORAWAN_TxDone((uint16_t)timeOnAir);
 10293  0060B6  C0E7  F0BB         	movff	RADIO_TxDone@timeOnAir,LORAWAN_TxDone@timeOnAir
 10294  0060BA  C0E8  F0BC         	movff	RADIO_TxDone@timeOnAir+1,LORAWAN_TxDone@timeOnAir+1
 10295  0060BE  ECBD  F006         	call	_LORAWAN_TxDone	;wreg free
 10296  0060C2  0012               	return	
 10297  0060C4                     __end_of_RADIO_TxDone:
 10298                           	opt stack 0
 10299                           tosu	equ	0xFFF
 10300                           tosh	equ	0xFFE
 10301                           tosl	equ	0xFFD
 10302                           pclath	equ	0xFFA
 10303                           tblptru	equ	0xFF8
 10304                           tblptrh	equ	0xFF7
 10305                           tblptrl	equ	0xFF6
 10306                           tablat	equ	0xFF5
 10307                           prodh	equ	0xFF4
 10308                           prodl	equ	0xFF3
 10309                           intcon	equ	0xFF2
 10310                           intcon2	equ	0xFF1
 10311                           intcon3	equ	0xFF0
 10312                           postinc0	equ	0xFEE
 10313                           wreg	equ	0xFE8
 10314                           postinc1	equ	0xFE6
 10315                           postdec1	equ	0xFE5
 10316                           plusw1	equ	0xFE3
 10317                           fsr1h	equ	0xFE2
 10318                           fsr1l	equ	0xFE1
 10319                           indf2	equ	0xFDF
 10320                           postinc2	equ	0xFDE
 10321                           postdec2	equ	0xFDD
 10322                           fsr2h	equ	0xFDA
 10323                           fsr2l	equ	0xFD9
 10324                           status	equ	0xFD8
 10325                           
 10326 ;; *************** function _RADIO_RxDone *****************
 10327 ;; Defined at:
 10328 ;;		line 961 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 10329 ;; Parameters:    Size  Location     Type
 10330 ;;		None
 10331 ;; Auto vars:     Size  Location     Type
 10332 ;;  i               1  148[BANK0 ] unsigned char 
 10333 ;;  irqFlags        1  147[BANK0 ] unsigned char 
 10334 ;; Return value:  Size  Location     Type
 10335 ;;                  1    wreg      void 
 10336 ;; Registers used:
 10337 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, btemp+8, btemp+9, btemp+10, btemp+11, to
      +sl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10338 ;; Tracked objects:
 10339 ;;		On entry : 0/0
 10340 ;;		On exit  : 0/0
 10341 ;;		Unchanged: 0/0
 10342 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10343 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10344 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10345 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10346 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10347 ;;Total ram usage:        2 bytes
 10348 ;; Hardware stack levels used:    1
 10349 ;; Hardware stack levels required when called:   16
 10350 ;; This function calls:
 10351 ;;		_HALSPICSAssert
 10352 ;;		_HALSPICSDeassert
 10353 ;;		_HALSPISend
 10354 ;;		_LORAWAN_RxDone
 10355 ;;		_RADIO_RegisterRead
 10356 ;;		_RADIO_RegisterWrite
 10357 ;;		_RADIO_WriteMode
 10358 ;;		_SwTimerStop
 10359 ;;		___abdiv
 10360 ;; This function is called by:
 10361 ;;		_RADIO_DIO0
 10362 ;; This function uses a non-reentrant model
 10363 ;;
 10364                           
 10365                           	psect	text58
 10366  00699E                     __ptext58:
 10367                           	opt stack 0
 10368  00699E                     _RADIO_RxDone:
 10369                           	opt stack 12
 10370                           
 10371                           ;radio_driver_SX1276.c: 963: uint8_t i, irqFlags;
 10372                           ;radio_driver_SX1276.c: 964: irqFlags = RADIO_RegisterRead(0x12);
 10373                           
 10374                           ;incstack = 0
 10375  00699E  0E12               	movlw	18
 10376  0069A0  EC07  F048         	call	_RADIO_RegisterRead
 10377  0069A4  0100               	movlb	0	; () banked
 10378  0069A6  6FF3               	movwf	RADIO_RxDone@irqFlags& (0+255),b
 10379                           
 10380                           ;radio_driver_SX1276.c: 967: RADIO_RegisterWrite(0x12, (1<<(6)) | (1<<(5)) | (1<<(4)));
 10381  0069A8  0E70               	movlw	112
 10382  0069AA  6F62               	movwf	RADIO_RegisterWrite@value& (0+255),b
 10383  0069AC  0E12               	movlw	18
 10384  0069AE  ECDE  F048         	call	_RADIO_RegisterWrite
 10385                           
 10386                           ;radio_driver_SX1276.c: 968: if (((1<<(6)) | (1<<(4))) == (irqFlags & ((1<<(6)) | (1<<(4
      +                          )))))
 10387  0069B2  0100               	movlb	0	; () banked
 10388  0069B4  51F3               	movf	RADIO_RxDone@irqFlags& (0+255),w,b
 10389  0069B6  0B50               	andlw	80
 10390  0069B8  0A50               	xorlw	80
 10391  0069BA  A4D8               	btfss	status,2,c
 10392  0069BC  0012               	return	
 10393                           
 10394                           ; BSR set to: 0
 10395                           ;radio_driver_SX1276.c: 969: {
 10396                           ;radio_driver_SX1276.c: 971: SwTimerStop(RadioConfiguration.watchdogTimerId);
 10397  0069BE  0101               	movlb	1	; () banked
 10398  0069C0  5180               	movf	(_RadioConfiguration+41)& (0+255),w,b
 10399  0069C2  EC1B  F048         	call	_SwTimerStop
 10400                           
 10401                           ;radio_driver_SX1276.c: 974: i = RADIO_RegisterRead(0x1C);
 10402  0069C6  0E1C               	movlw	28
 10403  0069C8  EC07  F048         	call	_RADIO_RegisterRead
 10404  0069CC  0100               	movlb	0	; () banked
 10405  0069CE  6FF4               	movwf	RADIO_RxDone@i& (0+255),b
 10406                           
 10407                           ; BSR set to: 0
 10408                           ;radio_driver_SX1276.c: 975: if ((0 == RadioConfiguration.crcOn) || ((0 == (irqFlags & (
      +                          1<<(5)))) && (0 != (i & (1<<(6))))))
 10409  0069D0  0101               	movlb	1	; () banked
 10410  0069D2  5173               	movf	(_RadioConfiguration+28)& (0+255),w,b
 10411  0069D4  B4D8               	btfsc	status,2,c
 10412  0069D6  D004               	goto	u12680
 10413                           
 10414                           ; BSR set to: 1
 10415  0069D8  0100               	movlb	0	; () banked
 10416  0069DA  ABF3               	btfss	RADIO_RxDone@irqFlags& (0+255),5,b
 10417                           
 10418                           ; BSR set to: 0
 10419  0069DC  ADF4               	btfss	RADIO_RxDone@i& (0+255),6,b
 10420  0069DE  D03C               	goto	l316
 10421  0069E0                     u12680:
 10422                           
 10423                           ;radio_driver_SX1276.c: 976: {
 10424                           ;radio_driver_SX1276.c: 984: RadioConfiguration.dataBufferLen = RADIO_RegisterRead(0x13)
      +                          ;
 10425                           
 10426                           ; BSR set to: 0
 10427  0069E0  0E13               	movlw	19
 10428  0069E2  EC07  F048         	call	_RADIO_RegisterRead
 10429  0069E6  0101               	movlb	1	; () banked
 10430  0069E8  6F7B               	movwf	(_RadioConfiguration+36)& (0+255),b
 10431                           
 10432                           ;radio_driver_SX1276.c: 985: RADIO_RegisterWrite(0x0D, 0x00);
 10433  0069EA  0E00               	movlw	0
 10434  0069EC  0100               	movlb	0	; () banked
 10435  0069EE  6F62               	movwf	RADIO_RegisterWrite@value& (0+255),b
 10436  0069F0  0E0D               	movlw	13
 10437  0069F2  ECDE  F048         	call	_RADIO_RegisterWrite
 10438                           
 10439                           ;radio_driver_SX1276.c: 987: HALSPICSAssert();
 10440  0069F6  ECEF  F04A         	call	_HALSPICSAssert	;wreg free
 10441                           
 10442                           ;radio_driver_SX1276.c: 988: HALSPISend(0x00);
 10443  0069FA  0E00               	movlw	0
 10444  0069FC  EC47  F04A         	call	_HALSPISend
 10445                           
 10446                           ;radio_driver_SX1276.c: 989: for (i = 0; i < RadioConfiguration.dataBufferLen; i++)
 10447  006A00  0E00               	movlw	0
 10448  006A02  0100               	movlb	0	; () banked
 10449  006A04  6FF4               	movwf	RADIO_RxDone@i& (0+255),b
 10450  006A06  D00F               	goto	l319
 10451  006A08                     
 10452                           ; BSR set to: 0
 10453                           ;radio_driver_SX1276.c: 990: {
 10454                           ;radio_driver_SX1276.c: 991: RadioConfiguration.dataBuffer[i] = HALSPISend(0xFF);
 10455                           
 10456                           ; BSR set to: 0
 10457  006A08  51F4               	movf	RADIO_RxDone@i& (0+255),w,b
 10458  006A0A  0D01               	mullw	1
 10459  006A0C  50F3               	movf	prodl,w,c
 10460  006A0E  0101               	movlb	1	; () banked
 10461  006A10  257C               	addwf	(_RadioConfiguration+37)& (0+255),w,b
 10462  006A12  6ED9               	movwf	fsr2l,c
 10463  006A14  50F4               	movf	prodh,w,c
 10464  006A16  217D               	addwfc	(_RadioConfiguration+38)& (0+255),w,b
 10465  006A18  6EDA               	movwf	fsr2h,c
 10466  006A1A  0EFF               	movlw	255
 10467  006A1C  EC47  F04A         	call	_HALSPISend
 10468  006A20  6EDF               	movwf	indf2,c
 10469  006A22  0100               	movlb	0	; () banked
 10470  006A24  2BF4               	incf	RADIO_RxDone@i& (0+255),f,b
 10471  006A26                     l319:
 10472                           
 10473                           ; BSR set to: 0
 10474                           
 10475                           ; BSR set to: 0
 10476  006A26  0101               	movlb	1	; () banked
 10477  006A28  517B               	movf	(_RadioConfiguration+36)& (0+255),w,b
 10478  006A2A  0100               	movlb	0	; () banked
 10479  006A2C  5DF4               	subwf	RADIO_RxDone@i& (0+255),w,b
 10480  006A2E  A0D8               	btfss	status,0,c
 10481  006A30  D7EB               	goto	l320
 10482                           
 10483                           ; BSR set to: 0
 10484                           ;radio_driver_SX1276.c: 992: }
 10485                           ;radio_driver_SX1276.c: 993: HALSPICSDeassert();
 10486                           
 10487                           ; BSR set to: 0
 10488  006A32  ECED  F04A         	call	_HALSPICSDeassert	;wreg free
 10489                           
 10490                           ;radio_driver_SX1276.c: 994: RadioConfiguration.flags |= (1 << (2));
 10491  006A36  0101               	movlb	1	; () banked
 10492  006A38  857A               	bsf	(_RadioConfiguration+35)& (0+255),2,b
 10493                           
 10494                           ; BSR set to: 1
 10495                           ;radio_driver_SX1276.c: 996: RadioConfiguration.packetSNR = RADIO_RegisterRead(0x19);
 10496  006A3A  0E19               	movlw	25
 10497  006A3C  EC07  F048         	call	_RADIO_RegisterRead
 10498  006A40  0101               	movlb	1	; () banked
 10499  006A42  6F89               	movwf	(_RadioConfiguration+50)& (0+255),b
 10500                           
 10501                           ; BSR set to: 1
 10502                           ;radio_driver_SX1276.c: 997: RadioConfiguration.packetSNR /= (int8_t)4;
 10503  006A44  0E04               	movlw	4
 10504  006A46  0100               	movlb	0	; () banked
 10505  006A48  6F60               	movwf	___abdiv@divisor& (0+255),b
 10506  006A4A  0101               	movlb	1	; () banked
 10507  006A4C  5189               	movf	(_RadioConfiguration+50)& (0+255),w,b
 10508  006A4E  EC02  F040         	call	___abdiv
 10509  006A52  0101               	movlb	1	; () banked
 10510  006A54  6F89               	movwf	(_RadioConfiguration+50)& (0+255),b
 10511                           
 10512                           ;radio_driver_SX1276.c: 998: }
 10513  006A56  D002               	goto	l322
 10514  006A58                     l316:
 10515                           
 10516                           ;radio_driver_SX1276.c: 999: else
 10517                           ;radio_driver_SX1276.c: 1000: {
 10518                           ;radio_driver_SX1276.c: 1002: RadioConfiguration.flags |= (1 << (3));
 10519                           
 10520                           ; BSR set to: 1
 10521  006A58  0101               	movlb	1	; () banked
 10522  006A5A  877A               	bsf	(_RadioConfiguration+35)& (0+255),3,b
 10523  006A5C                     l322:
 10524                           
 10525                           ; BSR set to: 1
 10526                           ;radio_driver_SX1276.c: 1003: }
 10527                           ;radio_driver_SX1276.c: 1004: RADIO_WriteMode(MODE_SLEEP, RadioConfiguration.modulation,
      +                           0);
 10528                           
 10529                           ; BSR set to: 1
 10530  006A5C  C16F  F065         	movff	_RadioConfiguration+24,RADIO_WriteMode@newModulation
 10531  006A60  0E00               	movlw	0
 10532  006A62  0100               	movlb	0	; () banked
 10533  006A64  6F66               	movwf	RADIO_WriteMode@blocking& (0+255),b
 10534  006A66  0E00               	movlw	0
 10535  006A68  ECF4  F031         	call	_RADIO_WriteMode
 10536                           
 10537                           ;radio_driver_SX1276.c: 1005: RadioConfiguration.flags &= ~(1 << (1));
 10538  006A6C  0101               	movlb	1	; () banked
 10539  006A6E  937A               	bcf	(_RadioConfiguration+35)& (0+255),1,b
 10540                           
 10541                           ; BSR set to: 1
 10542                           ;radio_driver_SX1276.c: 1006: LORAWAN_RxDone(RadioConfiguration.dataBuffer, RadioConfigu
      +                          ration.dataBufferLen);
 10543  006A70  C17C  F1F5         	movff	_RadioConfiguration+37,LORAWAN_RxDone@buffer
 10544  006A74  C17D  F1F6         	movff	_RadioConfiguration+38,LORAWAN_RxDone@buffer+1
 10545  006A78  C17B  F1F7         	movff	_RadioConfiguration+36,LORAWAN_RxDone@bufferLength
 10546  006A7C  EC6A  F000         	call	_LORAWAN_RxDone	;wreg free
 10547  006A80  0012               	return	
 10548  006A82                     __end_of_RADIO_RxDone:
 10549                           	opt stack 0
 10550                           tosu	equ	0xFFF
 10551                           tosh	equ	0xFFE
 10552                           tosl	equ	0xFFD
 10553                           pclath	equ	0xFFA
 10554                           tblptru	equ	0xFF8
 10555                           tblptrh	equ	0xFF7
 10556                           tblptrl	equ	0xFF6
 10557                           tablat	equ	0xFF5
 10558                           prodh	equ	0xFF4
 10559                           prodl	equ	0xFF3
 10560                           intcon	equ	0xFF2
 10561                           intcon2	equ	0xFF1
 10562                           intcon3	equ	0xFF0
 10563                           postinc0	equ	0xFEE
 10564                           wreg	equ	0xFE8
 10565                           postinc1	equ	0xFE6
 10566                           postdec1	equ	0xFE5
 10567                           plusw1	equ	0xFE3
 10568                           fsr1h	equ	0xFE2
 10569                           fsr1l	equ	0xFE1
 10570                           indf2	equ	0xFDF
 10571                           postinc2	equ	0xFDE
 10572                           postdec2	equ	0xFDD
 10573                           fsr2h	equ	0xFDA
 10574                           fsr2l	equ	0xFD9
 10575                           status	equ	0xFD8
 10576                           
 10577 ;; *************** function ___abdiv *****************
 10578 ;; Defined at:
 10579 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\abdiv.c"
 10580 ;; Parameters:    Size  Location     Type
 10581 ;;  dividend        1    wreg     char 
 10582 ;;  divisor         1    0[BANK0 ] char 
 10583 ;; Auto vars:     Size  Location     Type
 10584 ;;  dividend        1    6[BANK0 ] char 
 10585 ;;  quotient        1    5[BANK0 ] char 
 10586 ;;  sign            1    4[BANK0 ] unsigned char 
 10587 ;;  counter         1    3[BANK0 ] unsigned char 
 10588 ;; Return value:  Size  Location     Type
 10589 ;;                  1    wreg      char 
 10590 ;; Registers used:
 10591 ;;		wreg, status,2, status,0
 10592 ;; Tracked objects:
 10593 ;;		On entry : 0/0
 10594 ;;		On exit  : 0/0
 10595 ;;		Unchanged: 0/0
 10596 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10597 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10598 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10599 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10600 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10601 ;;Total ram usage:        7 bytes
 10602 ;; Hardware stack levels used:    1
 10603 ;; Hardware stack levels required when called:    7
 10604 ;; This function calls:
 10605 ;;		Nothing
 10606 ;; This function is called by:
 10607 ;;		_RADIO_RxDone
 10608 ;; This function uses a non-reentrant model
 10609 ;;
 10610                           
 10611                           	psect	text59
 10612  008004                     __ptext59:
 10613                           	opt stack 0
 10614  008004                     ___abdiv:
 10615                           	opt stack 20
 10616                           
 10617                           ;incstack = 0
 10618                           ;___abdiv@dividend stored from wreg
 10619  008004  0100               	movlb	0	; () banked
 10620  008006  6F66               	movwf	___abdiv@dividend& (0+255),b
 10621  008008  0E00               	movlw	0
 10622  00800A  0100               	movlb	0	; () banked
 10623  00800C  6F64               	movwf	___abdiv@sign& (0+255),b
 10624                           
 10625                           ; BSR set to: 0
 10626  00800E  AF60               	btfss	___abdiv@divisor& (0+255),7,b
 10627  008010  D003               	goto	l2855
 10628                           
 10629                           ; BSR set to: 0
 10630  008012  6D60               	negf	___abdiv@divisor& (0+255),b
 10631                           
 10632                           ; BSR set to: 0
 10633  008014  0E01               	movlw	1
 10634  008016  6F64               	movwf	___abdiv@sign& (0+255),b
 10635  008018                     l2855:
 10636                           
 10637                           ; BSR set to: 0
 10638                           
 10639                           ; BSR set to: 0
 10640  008018  AF66               	btfss	___abdiv@dividend& (0+255),7,b
 10641  00801A  D003               	goto	l2856
 10642                           
 10643                           ; BSR set to: 0
 10644  00801C  6D66               	negf	___abdiv@dividend& (0+255),b
 10645                           
 10646                           ; BSR set to: 0
 10647  00801E  0E01               	movlw	1
 10648  008020  1B64               	xorwf	___abdiv@sign& (0+255),f,b
 10649  008022                     l2856:
 10650                           
 10651                           ; BSR set to: 0
 10652                           
 10653                           ; BSR set to: 0
 10654  008022  0E00               	movlw	0
 10655  008024  6F65               	movwf	___abdiv@quotient& (0+255),b
 10656                           
 10657                           ; BSR set to: 0
 10658  008026  5160               	movf	___abdiv@divisor& (0+255),w,b
 10659  008028  B4D8               	btfsc	status,2,c
 10660  00802A  D01A               	goto	l2863
 10661                           
 10662                           ; BSR set to: 0
 10663  00802C  0E01               	movlw	1
 10664  00802E  6F63               	movwf	___abdiv@counter& (0+255),b
 10665  008030  D003               	goto	l2858
 10666  008032                     
 10667                           ; BSR set to: 0
 10668                           
 10669                           ; BSR set to: 0
 10670  008032  90D8               	bcf	status,0,c
 10671  008034  3760               	rlcf	___abdiv@divisor& (0+255),f,b
 10672                           
 10673                           ; BSR set to: 0
 10674  008036  2B63               	incf	___abdiv@counter& (0+255),f,b
 10675  008038                     l2858:
 10676                           
 10677                           ; BSR set to: 0
 10678                           
 10679                           ; BSR set to: 0
 10680  008038  C060  F061         	movff	___abdiv@divisor,??___abdiv
 10681  00803C  6B62               	clrf	(??___abdiv+1)& (0+255),b
 10682  00803E  BF61               	btfsc	??___abdiv& (0+255),7,b
 10683  008040  0762               	decf	(??___abdiv+1)& (0+255),f,b
 10684  008042  AF61               	btfss	??___abdiv& (0+255),7,b
 10685  008044  D7F6               	goto	l2859
 10686  008046                     u12550:
 10687                           
 10688                           ; BSR set to: 0
 10689                           
 10690                           ; BSR set to: 0
 10691                           
 10692                           ; BSR set to: 0
 10693  008046  90D8               	bcf	status,0,c
 10694  008048  3765               	rlcf	___abdiv@quotient& (0+255),f,b
 10695  00804A  5160               	movf	___abdiv@divisor& (0+255),w,b
 10696  00804C  5D66               	subwf	___abdiv@dividend& (0+255),w,b
 10697  00804E  A0D8               	btfss	status,0,c
 10698  008050  D003               	goto	l2862
 10699                           
 10700                           ; BSR set to: 0
 10701  008052  5160               	movf	___abdiv@divisor& (0+255),w,b
 10702  008054  5F66               	subwf	___abdiv@dividend& (0+255),f,b
 10703                           
 10704                           ; BSR set to: 0
 10705  008056  8165               	bsf	___abdiv@quotient& (0+255),0,b
 10706  008058                     l2862:
 10707                           
 10708                           ; BSR set to: 0
 10709                           
 10710                           ; BSR set to: 0
 10711  008058  90D8               	bcf	status,0,c
 10712  00805A  3360               	rrcf	___abdiv@divisor& (0+255),f,b
 10713                           
 10714                           ; BSR set to: 0
 10715  00805C  2F63               	decfsz	___abdiv@counter& (0+255),f,b
 10716  00805E  D7F3               	goto	u12550
 10717  008060                     l2863:
 10718                           
 10719                           ; BSR set to: 0
 10720                           
 10721                           ; BSR set to: 0
 10722                           
 10723                           ; BSR set to: 0
 10724  008060  5164               	movf	___abdiv@sign& (0+255),w,b
 10725  008062  A4D8               	btfss	status,2,c
 10726                           
 10727                           ; BSR set to: 0
 10728  008064  6D65               	negf	___abdiv@quotient& (0+255),b
 10729                           
 10730                           ; BSR set to: 0
 10731                           
 10732                           ; BSR set to: 0
 10733  008066  5165               	movf	___abdiv@quotient& (0+255),w,b
 10734  008068  0012               	return	
 10735  00806A                     __end_of___abdiv:
 10736                           	opt stack 0
 10737                           tosu	equ	0xFFF
 10738                           tosh	equ	0xFFE
 10739                           tosl	equ	0xFFD
 10740                           pclath	equ	0xFFA
 10741                           tblptru	equ	0xFF8
 10742                           tblptrh	equ	0xFF7
 10743                           tblptrl	equ	0xFF6
 10744                           tablat	equ	0xFF5
 10745                           prodh	equ	0xFF4
 10746                           prodl	equ	0xFF3
 10747                           intcon	equ	0xFF2
 10748                           intcon2	equ	0xFF1
 10749                           intcon3	equ	0xFF0
 10750                           postinc0	equ	0xFEE
 10751                           wreg	equ	0xFE8
 10752                           postinc1	equ	0xFE6
 10753                           postdec1	equ	0xFE5
 10754                           plusw1	equ	0xFE3
 10755                           fsr1h	equ	0xFE2
 10756                           fsr1l	equ	0xFE1
 10757                           indf2	equ	0xFDF
 10758                           postinc2	equ	0xFDE
 10759                           postdec2	equ	0xFDD
 10760                           fsr2h	equ	0xFDA
 10761                           fsr2l	equ	0xFD9
 10762                           status	equ	0xFD8
 10763                           
 10764 ;; *************** function _RADIO_FSKPayloadReady *****************
 10765 ;; Defined at:
 10766 ;;		line 1010 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 10767 ;; Parameters:    Size  Location     Type
 10768 ;;		None
 10769 ;; Auto vars:     Size  Location     Type
 10770 ;;  i               1  148[BANK0 ] unsigned char 
 10771 ;;  irqFlags        1  147[BANK0 ] unsigned char 
 10772 ;; Return value:  Size  Location     Type
 10773 ;;                  1    wreg      void 
 10774 ;; Registers used:
 10775 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, btemp+1, btemp+2, btemp+8, btemp+9, btem
      +p+10, btemp+11, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10776 ;; Tracked objects:
 10777 ;;		On entry : 0/0
 10778 ;;		On exit  : 0/0
 10779 ;;		Unchanged: 0/0
 10780 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10781 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10782 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10783 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10784 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10785 ;;Total ram usage:        2 bytes
 10786 ;; Hardware stack levels used:    1
 10787 ;; Hardware stack levels required when called:   16
 10788 ;; This function calls:
 10789 ;;		_HALSPICSAssert
 10790 ;;		_HALSPICSDeassert
 10791 ;;		_HALSPISend
 10792 ;;		_LORAWAN_RxDone
 10793 ;;		_LORAWAN_RxTimeout
 10794 ;;		_RADIO_RegisterRead
 10795 ;;		_RADIO_WriteMode
 10796 ;;		_SwTimerStop
 10797 ;; This function is called by:
 10798 ;;		_RADIO_DIO0
 10799 ;; This function uses a non-reentrant model
 10800 ;;
 10801                           
 10802                           	psect	text60
 10803  00711A                     __ptext60:
 10804                           	opt stack 0
 10805  00711A                     _RADIO_FSKPayloadReady:
 10806                           	opt stack 12
 10807                           
 10808                           ;radio_driver_SX1276.c: 1012: uint8_t irqFlags;
 10809                           ;radio_driver_SX1276.c: 1013: uint8_t i;
 10810                           ;radio_driver_SX1276.c: 1015: irqFlags = RADIO_RegisterRead(0x3F);
 10811                           
 10812                           ; BSR set to: 0
 10813                           ;incstack = 0
 10814  00711A  0E3F               	movlw	63
 10815  00711C  EC07  F048         	call	_RADIO_RegisterRead
 10816  007120  0100               	movlb	0	; () banked
 10817  007122  6FF3               	movwf	RADIO_FSKPayloadReady@irqFlags& (0+255),b
 10818                           
 10819                           ; BSR set to: 0
 10820                           ;radio_driver_SX1276.c: 1016: if ((1<<(2)) == (irqFlags & (1<<(2))))
 10821  007124  A5F3               	btfss	RADIO_FSKPayloadReady@irqFlags& (0+255),2,b
 10822  007126  0012               	return	
 10823                           
 10824                           ; BSR set to: 0
 10825                           ;radio_driver_SX1276.c: 1017: {
 10826                           ;radio_driver_SX1276.c: 1022: SwTimerStop(RadioConfiguration.watchdogTimerId);
 10827  007128  0101               	movlb	1	; () banked
 10828  00712A  5180               	movf	(_RadioConfiguration+41)& (0+255),w,b
 10829  00712C  EC1B  F048         	call	_SwTimerStop
 10830                           
 10831                           ;radio_driver_SX1276.c: 1023: SwTimerStop(RadioConfiguration.fskRxWindowTimerId);
 10832  007130  0101               	movlb	1	; () banked
 10833  007132  517F               	movf	(_RadioConfiguration+40)& (0+255),w,b
 10834  007134  EC1B  F048         	call	_SwTimerStop
 10835                           
 10836                           ;radio_driver_SX1276.c: 1025: HALSPICSAssert();
 10837  007138  ECEF  F04A         	call	_HALSPICSAssert	;wreg free
 10838                           
 10839                           ;radio_driver_SX1276.c: 1026: HALSPISend(0x00);
 10840  00713C  0E00               	movlw	0
 10841  00713E  EC47  F04A         	call	_HALSPISend
 10842                           
 10843                           ;radio_driver_SX1276.c: 1027: RadioConfiguration.dataBufferLen = HALSPISend(0xFF);
 10844  007142  0EFF               	movlw	255
 10845  007144  EC47  F04A         	call	_HALSPISend
 10846  007148  0101               	movlb	1	; () banked
 10847  00714A  6F7B               	movwf	(_RadioConfiguration+36)& (0+255),b
 10848                           
 10849                           ; BSR set to: 1
 10850                           ;radio_driver_SX1276.c: 1028: for (i = 0; i < RadioConfiguration.dataBufferLen; i++)
 10851  00714C  0E00               	movlw	0
 10852  00714E  0100               	movlb	0	; () banked
 10853  007150  6FF4               	movwf	RADIO_FSKPayloadReady@i& (0+255),b
 10854  007152  D00F               	goto	l327
 10855  007154                     
 10856                           ; BSR set to: 0
 10857                           ;radio_driver_SX1276.c: 1029: {
 10858                           ;radio_driver_SX1276.c: 1030: RadioConfiguration.dataBuffer[i] = HALSPISend(0xFF);
 10859                           
 10860                           ; BSR set to: 0
 10861  007154  51F4               	movf	RADIO_FSKPayloadReady@i& (0+255),w,b
 10862  007156  0D01               	mullw	1
 10863  007158  50F3               	movf	prodl,w,c
 10864  00715A  0101               	movlb	1	; () banked
 10865  00715C  257C               	addwf	(_RadioConfiguration+37)& (0+255),w,b
 10866  00715E  6ED9               	movwf	fsr2l,c
 10867  007160  50F4               	movf	prodh,w,c
 10868  007162  217D               	addwfc	(_RadioConfiguration+38)& (0+255),w,b
 10869  007164  6EDA               	movwf	fsr2h,c
 10870  007166  0EFF               	movlw	255
 10871  007168  EC47  F04A         	call	_HALSPISend
 10872  00716C  6EDF               	movwf	indf2,c
 10873  00716E  0100               	movlb	0	; () banked
 10874  007170  2BF4               	incf	RADIO_FSKPayloadReady@i& (0+255),f,b
 10875  007172                     l327:
 10876                           
 10877                           ; BSR set to: 0
 10878                           
 10879                           ; BSR set to: 0
 10880  007172  0101               	movlb	1	; () banked
 10881  007174  517B               	movf	(_RadioConfiguration+36)& (0+255),w,b
 10882  007176  0100               	movlb	0	; () banked
 10883  007178  5DF4               	subwf	RADIO_FSKPayloadReady@i& (0+255),w,b
 10884  00717A  A0D8               	btfss	status,0,c
 10885  00717C  D7EB               	goto	l328
 10886                           
 10887                           ; BSR set to: 0
 10888                           ;radio_driver_SX1276.c: 1031: }
 10889                           ;radio_driver_SX1276.c: 1032: HALSPICSDeassert();
 10890                           
 10891                           ; BSR set to: 0
 10892  00717E  ECED  F04A         	call	_HALSPICSDeassert	;wreg free
 10893                           
 10894                           ;radio_driver_SX1276.c: 1034: RADIO_WriteMode(MODE_SLEEP, RadioConfiguration.modulation,
      +                           0);
 10895  007182  C16F  F065         	movff	_RadioConfiguration+24,RADIO_WriteMode@newModulation
 10896  007186  0E00               	movlw	0
 10897  007188  0100               	movlb	0	; () banked
 10898  00718A  6F66               	movwf	RADIO_WriteMode@blocking& (0+255),b
 10899  00718C  0E00               	movlw	0
 10900  00718E  ECF4  F031         	call	_RADIO_WriteMode
 10901                           
 10902                           ;radio_driver_SX1276.c: 1035: RadioConfiguration.flags &= ~(1 << (1));
 10903  007192  0101               	movlb	1	; () banked
 10904  007194  937A               	bcf	(_RadioConfiguration+35)& (0+255),1,b
 10905                           
 10906                           ; BSR set to: 1
 10907                           ;radio_driver_SX1276.c: 1037: RadioConfiguration.packetSNR = -128;
 10908  007196  0E80               	movlw	128
 10909  007198  6F89               	movwf	(_RadioConfiguration+50)& (0+255),b
 10910                           
 10911                           ; BSR set to: 1
 10912                           ;radio_driver_SX1276.c: 1039: if (1 == RadioConfiguration.crcOn)
 10913  00719A  0573               	decf	(_RadioConfiguration+28)& (0+255),w,b
 10914  00719C  A4D8               	btfss	status,2,c
 10915  00719E  D008               	goto	l330
 10916                           
 10917                           ; BSR set to: 1
 10918                           ;radio_driver_SX1276.c: 1040: {
 10919                           ;radio_driver_SX1276.c: 1041: if ((1<<(1)) == (irqFlags & (1<<(1))))
 10920  0071A0  0100               	movlb	0	; () banked
 10921  0071A2  A3F3               	btfss	RADIO_FSKPayloadReady@irqFlags& (0+255),1,b
 10922  0071A4  D002               	goto	l331
 10923                           
 10924                           ; BSR set to: 0
 10925                           ;radio_driver_SX1276.c: 1042: {
 10926                           ;radio_driver_SX1276.c: 1043: RadioConfiguration.flags |= (1 << (2));
 10927  0071A6  0101               	movlb	1	; () banked
 10928  0071A8  D003               	goto	l330
 10929  0071AA                     l331:
 10930                           
 10931                           ;radio_driver_SX1276.c: 1045: else
 10932                           ;radio_driver_SX1276.c: 1046: {
 10933                           ;radio_driver_SX1276.c: 1047: RadioConfiguration.flags &= ~(1 << (2));
 10934                           
 10935                           ; BSR set to: 1
 10936  0071AA  0101               	movlb	1	; () banked
 10937  0071AC  957A               	bcf	(_RadioConfiguration+35)& (0+255),2,b
 10938                           
 10939                           ; BSR set to: 1
 10940                           ;radio_driver_SX1276.c: 1048: }
 10941                           ;radio_driver_SX1276.c: 1049: }
 10942  0071AE  D001               	goto	l333
 10943  0071B0                     l330:
 10944                           
 10945                           ; BSR set to: 1
 10946                           ;radio_driver_SX1276.c: 1050: else
 10947                           ;radio_driver_SX1276.c: 1051: {
 10948                           ;radio_driver_SX1276.c: 1052: RadioConfiguration.flags |= (1 << (2));
 10949                           
 10950                           ; BSR set to: 1
 10951  0071B0  857A               	bsf	(_RadioConfiguration+35)& (0+255),2,b
 10952  0071B2                     l333:
 10953                           
 10954                           ; BSR set to: 1
 10955                           ;radio_driver_SX1276.c: 1053: }
 10956                           ;radio_driver_SX1276.c: 1055: if ((RadioConfiguration.flags & (1 << (2))) != 0)
 10957                           
 10958                           ; BSR set to: 1
 10959  0071B2  A57A               	btfss	(_RadioConfiguration+35)& (0+255),2,b
 10960  0071B4  D009               	goto	l334
 10961                           
 10962                           ; BSR set to: 1
 10963                           ;radio_driver_SX1276.c: 1056: {
 10964                           ;radio_driver_SX1276.c: 1057: LORAWAN_RxDone(RadioConfiguration.dataBuffer, RadioConfigu
      +                          ration.dataBufferLen);
 10965  0071B6  C17C  F1F5         	movff	_RadioConfiguration+37,LORAWAN_RxDone@buffer
 10966  0071BA  C17D  F1F6         	movff	_RadioConfiguration+38,LORAWAN_RxDone@buffer+1
 10967  0071BE  C17B  F1F7         	movff	_RadioConfiguration+36,LORAWAN_RxDone@bufferLength
 10968  0071C2  EC6A  F000         	call	_LORAWAN_RxDone	;wreg free
 10969                           
 10970                           ;radio_driver_SX1276.c: 1058: }
 10971  0071C6  0012               	return	
 10972  0071C8                     l334:
 10973                           
 10974                           ;radio_driver_SX1276.c: 1059: else
 10975                           ;radio_driver_SX1276.c: 1060: {
 10976                           ;radio_driver_SX1276.c: 1061: LORAWAN_RxTimeout();
 10977  0071C8  ECF4  F012         	call	_LORAWAN_RxTimeout	;wreg free
 10978  0071CC  0012               	return	
 10979  0071CE                     __end_of_RADIO_FSKPayloadReady:
 10980                           	opt stack 0
 10981                           tosu	equ	0xFFF
 10982                           tosh	equ	0xFFE
 10983                           tosl	equ	0xFFD
 10984                           pclath	equ	0xFFA
 10985                           tblptru	equ	0xFF8
 10986                           tblptrh	equ	0xFF7
 10987                           tblptrl	equ	0xFF6
 10988                           tablat	equ	0xFF5
 10989                           prodh	equ	0xFF4
 10990                           prodl	equ	0xFF3
 10991                           intcon	equ	0xFF2
 10992                           intcon2	equ	0xFF1
 10993                           intcon3	equ	0xFF0
 10994                           postinc0	equ	0xFEE
 10995                           wreg	equ	0xFE8
 10996                           postinc1	equ	0xFE6
 10997                           postdec1	equ	0xFE5
 10998                           plusw1	equ	0xFE3
 10999                           fsr1h	equ	0xFE2
 11000                           fsr1l	equ	0xFE1
 11001                           indf2	equ	0xFDF
 11002                           postinc2	equ	0xFDE
 11003                           postdec2	equ	0xFDD
 11004                           fsr2h	equ	0xFDA
 11005                           fsr2l	equ	0xFD9
 11006                           status	equ	0xFD8
 11007                           
 11008 ;; *************** function _LORAWAN_RxTimeout *****************
 11009 ;; Defined at:
 11010 ;;		line 464 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 11011 ;; Parameters:    Size  Location     Type
 11012 ;;		None
 11013 ;; Auto vars:     Size  Location     Type
 11014 ;;  minim           4  102[BANK0 ] unsigned long 
 11015 ;;  i               1  106[BANK0 ] unsigned char 
 11016 ;; Return value:  Size  Location     Type
 11017 ;;                  1    wreg      void 
 11018 ;; Registers used:
 11019 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, btemp+1, btemp+2, btemp+11, tosl, tblptrl, tblptrh, tb
      +lptru, prodl, prodh, cstack
 11020 ;; Tracked objects:
 11021 ;;		On entry : 0/0
 11022 ;;		On exit  : 0/0
 11023 ;;		Unchanged: 0/0
 11024 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11025 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11026 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11027 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11028 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11029 ;;Total ram usage:        9 bytes
 11030 ;; Hardware stack levels used:    1
 11031 ;; Hardware stack levels required when called:   15
 11032 ;; This function calls:
 11033 ;;		_LORAWAN_ReceiveWindow2Callback
 11034 ;;		_RADIO_Transmit
 11035 ;;		_ResetParametersForConfirmedTransmission
 11036 ;;		_ResetParametersForUnconfirmedTransmission
 11037 ;;		_RxData
 11038 ;;		_SelectChannelForTransmission
 11039 ;;		_SetJoinFailState
 11040 ;;		_SwTimerSetTimeout
 11041 ;;		_SwTimerStart
 11042 ;;		___lldiv
 11043 ;; This function is called by:
 11044 ;;		_RADIO_FSKPayloadReady
 11045 ;;		_RADIO_RxTimeout
 11046 ;;		_RADIO_RxFSKTimeout
 11047 ;;		_RADIO_WatchdogTimeout
 11048 ;; This function uses a non-reentrant model
 11049 ;;
 11050                           
 11051                           	psect	text61
 11052  0025E8                     __ptext61:
 11053                           	opt stack 0
 11054  0025E8                     _LORAWAN_RxTimeout:
 11055                           	opt stack 12
 11056                           
 11057                           ;lorawan_eu.c: 466: uint8_t i;
 11058                           ;lorawan_eu.c: 467: uint32_t minim = (4294967295UL);
 11059                           
 11060                           ;incstack = 0
 11061  0025E8  0100               	movlb	0	; () banked
 11062  0025EA  69C6               	setf	LORAWAN_RxTimeout@minim& (0+255),b
 11063  0025EC  69C7               	setf	(LORAWAN_RxTimeout@minim+1)& (0+255),b
 11064  0025EE  69C8               	setf	(LORAWAN_RxTimeout@minim+2)& (0+255),b
 11065  0025F0  69C9               	setf	(LORAWAN_RxTimeout@minim+3)& (0+255),b
 11066                           
 11067                           ;lorawan_eu.c: 469: if (loRa.macStatus.macPause == 0)
 11068  0025F2  0102               	movlb	2	; () banked
 11069  0025F4  B109               	btfsc	(_loRa+3)& (0+255),0,b
 11070  0025F6  D190               	goto	l1894
 11071                           
 11072                           ; BSR set to: 2
 11073                           ;lorawan_eu.c: 470: {
 11074                           ;lorawan_eu.c: 472: if ( loRa.macStatus.macState == RX1_OPEN )
 11075  0025F8  5108               	movf	(_loRa+2)& (0+255),w,b
 11076  0025FA  0B0F               	andlw	15
 11077  0025FC  0A03               	xorlw	3
 11078  0025FE  A4D8               	btfss	status,2,c
 11079  002600  D011               	goto	l1895
 11080                           
 11081                           ; BSR set to: 2
 11082                           ;lorawan_eu.c: 473: {
 11083                           ;lorawan_eu.c: 474: if (CLASS_A == loRa.deviceClass)
 11084  002602  5118               	movf	(_loRa+18)& (0+255),w,b
 11085  002604  A4D8               	btfss	status,2,c
 11086  002606  D005               	goto	l1896
 11087                           
 11088                           ; BSR set to: 2
 11089                           ;lorawan_eu.c: 475: {
 11090                           ;lorawan_eu.c: 476: loRa.macStatus.macState = BETWEEN_RX1_RX2;
 11091  002608  5108               	movf	(_loRa+2)& (0+255),w,b
 11092  00260A  0BF0               	andlw	-16
 11093  00260C  0904               	iorlw	4
 11094  00260E  6F08               	movwf	(_loRa+2)& (0+255),b
 11095                           
 11096                           ;lorawan_eu.c: 477: }
 11097  002610  0012               	return	
 11098  002612                     l1896:
 11099                           
 11100                           ; BSR set to: 2
 11101                           ;lorawan_eu.c: 478: else if (CLASS_C == loRa.deviceClass)
 11102                           
 11103                           ; BSR set to: 2
 11104  002612  0E02               	movlw	2
 11105  002614  1918               	xorwf	(_loRa+18)& (0+255),w,b
 11106  002616  A4D8               	btfss	status,2,c
 11107  002618  0012               	return	
 11108                           
 11109                           ; BSR set to: 2
 11110                           ;lorawan_eu.c: 479: {
 11111                           ;lorawan_eu.c: 480: LORAWAN_ReceiveWindow2Callback(0);
 11112  00261A  0E00               	movlw	0
 11113  00261C  6EE6               	movwf	postinc1,c
 11114  00261E  EC90  F036         	call	_LORAWAN_ReceiveWindow2Callback	;wreg free
 11115                           
 11116                           ;lorawan_eu.c: 481: }
 11117                           ;lorawan_eu.c: 482: }
 11118  002622  0012               	return	
 11119  002624                     l1895:
 11120                           
 11121                           ; BSR set to: 2
 11122                           ;lorawan_eu.c: 483: else
 11123                           ;lorawan_eu.c: 484: {
 11124                           ;lorawan_eu.c: 486: if (loRa.lorawanMacStatus.joining == 1)
 11125  002624  A506               	btfss	_loRa& (0+255),2,b
 11126  002626  D003               	goto	l1900
 11127                           
 11128                           ; BSR set to: 2
 11129                           ;lorawan_eu.c: 487: {
 11130                           ;lorawan_eu.c: 488: SetJoinFailState();
 11131  002628  EC8E  F046         	call	_SetJoinFailState	;wreg free
 11132                           
 11133                           ;lorawan_eu.c: 489: }
 11134  00262C  0012               	return	
 11135  00262E                     l1900:
 11136                           
 11137                           ; BSR set to: 2
 11138                           ;lorawan_eu.c: 491: else if (loRa.macStatus.networkJoined == 1)
 11139  00262E  A908               	btfss	(_loRa+2)& (0+255),4,b
 11140  002630  0012               	return	
 11141                           
 11142                           ; BSR set to: 2
 11143                           ;lorawan_eu.c: 492: {
 11144                           ;lorawan_eu.c: 493: if (loRa.lorawanMacStatus.ackRequiredFromNextDownlinkMessage == 1)
 11145  002632  A106               	btfss	_loRa& (0+255),0,b
 11146  002634  D058               	goto	l1903
 11147                           
 11148                           ; BSR set to: 2
 11149                           ;lorawan_eu.c: 494: {
 11150                           ;lorawan_eu.c: 495: if (loRa.counterRepetitionsConfirmedUplink <= loRa.maxRepetitionsCon
      +                          firmedUplink)
 11151  002636  51DF               	movf	(_loRa+217)& (0+255),w,b
 11152  002638  5DDD               	subwf	(_loRa+215)& (0+255),w,b
 11153  00263A  A0D8               	btfss	status,0,c
 11154  00263C  D038               	goto	l1904
 11155                           
 11156                           ; BSR set to: 2
 11157                           ;lorawan_eu.c: 496: {
 11158                           ;lorawan_eu.c: 497: loRa.macStatus.macState = RETRANSMISSION_DELAY;
 11159  00263E  5108               	movf	(_loRa+2)& (0+255),w,b
 11160  002640  0BF0               	andlw	-16
 11161  002642  0906               	iorlw	6
 11162  002644  6F08               	movwf	(_loRa+2)& (0+255),b
 11163                           
 11164                           ; BSR set to: 2
 11165                           ;lorawan_eu.c: 498: SwTimerSetTimeout(loRa.ackTimeoutTimerId, ( (((uint32_t)(loRa.protoc
      +                          olParameters.ackTimeout)) << (12)) / 125UL ));
 11166  002646  51A6               	movf	(_loRa+160)& (0+255),w,b
 11167  002648  0100               	movlb	0	; () banked
 11168  00264A  6FC2               	movwf	??_LORAWAN_RxTimeout& (0+255),b
 11169  00264C  0102               	movlb	2	; () banked
 11170  00264E  51A7               	movf	(_loRa+161)& (0+255),w,b
 11171  002650  0100               	movlb	0	; () banked
 11172  002652  6FC3               	movwf	(??_LORAWAN_RxTimeout+1)& (0+255),b
 11173  002654  6BC4               	clrf	(??_LORAWAN_RxTimeout+2)& (0+255),b
 11174  002656  6BC5               	clrf	(??_LORAWAN_RxTimeout+3)& (0+255),b
 11175  002658  0E0C               	movlw	12
 11176  00265A                     u12055:
 11177  00265A  90D8               	bcf	status,0,c
 11178  00265C  37C2               	rlcf	??_LORAWAN_RxTimeout& (0+255),f,b
 11179  00265E  37C3               	rlcf	(??_LORAWAN_RxTimeout+1)& (0+255),f,b
 11180  002660  37C4               	rlcf	(??_LORAWAN_RxTimeout+2)& (0+255),f,b
 11181  002662  37C5               	rlcf	(??_LORAWAN_RxTimeout+3)& (0+255),f,b
 11182  002664  2EE8               	decfsz	wreg,f,c
 11183  002666  D7F9               	goto	u12055
 11184  002668  C0C2  F060         	movff	??_LORAWAN_RxTimeout,___lldiv@dividend
 11185  00266C  C0C3  F061         	movff	??_LORAWAN_RxTimeout+1,___lldiv@dividend+1
 11186  002670  C0C4  F062         	movff	??_LORAWAN_RxTimeout+2,___lldiv@dividend+2
 11187  002674  C0C5  F063         	movff	??_LORAWAN_RxTimeout+3,___lldiv@dividend+3
 11188  002678  0E7D               	movlw	125
 11189  00267A  6F64               	movwf	___lldiv@divisor& (0+255),b
 11190  00267C  0E00               	movlw	0
 11191  00267E  6F65               	movwf	(___lldiv@divisor+1)& (0+255),b
 11192  002680  0E00               	movlw	0
 11193  002682  6F66               	movwf	(___lldiv@divisor+2)& (0+255),b
 11194  002684  0E00               	movlw	0
 11195  002686  6F67               	movwf	(___lldiv@divisor+3)& (0+255),b
 11196  002688  EC0A  F03D         	call	___lldiv	;wreg free
 11197  00268C  C060  F06D         	movff	?___lldiv,SwTimerSetTimeout@timeout
 11198  002690  C061  F06E         	movff	?___lldiv+1,SwTimerSetTimeout@timeout+1
 11199  002694  C062  F06F         	movff	?___lldiv+2,SwTimerSetTimeout@timeout+2
 11200  002698  C063  F070         	movff	?___lldiv+3,SwTimerSetTimeout@timeout+3
 11201  00269C  0102               	movlb	2	; () banked
 11202  00269E  51EE               	movf	(_loRa+232)& (0+255),w,b
 11203  0026A0  EC27  F045         	call	_SwTimerSetTimeout
 11204                           
 11205                           ;lorawan_eu.c: 499: SwTimerStart(loRa.ackTimeoutTimerId);
 11206  0026A4  0102               	movlb	2	; () banked
 11207  0026A6  51EE               	movf	(_loRa+232)& (0+255),w,b
 11208  0026A8  ECDA  F03A         	call	_SwTimerStart
 11209                           
 11210                           ;lorawan_eu.c: 500: }
 11211  0026AC  0012               	return	
 11212  0026AE                     l1904:
 11213                           
 11214                           ;lorawan_eu.c: 501: else
 11215                           ;lorawan_eu.c: 502: {
 11216                           ;lorawan_eu.c: 503: ResetParametersForConfirmedTransmission ();
 11217  0026AE  ECF7  F049         	call	_ResetParametersForConfirmedTransmission	;wreg free
 11218                           
 11219                           ;lorawan_eu.c: 504: if (rxPayload.RxAppData != (0))
 11220  0026B2  0101               	movlb	1	; () banked
 11221  0026B4  510C               	movf	_rxPayload& (0+255),w,b
 11222  0026B6  110D               	iorwf	(_rxPayload+1)& (0+255),w,b
 11223  0026B8  B4D8               	btfsc	status,2,c
 11224  0026BA  0012               	return	
 11225                           
 11226                           ; BSR set to: 1
 11227                           ;lorawan_eu.c: 505: {
 11228                           ;lorawan_eu.c: 506: rxPayload.RxAppData ((0), 0, MAC_NOT_OK);
 11229  0026BC  0E00               	movlw	0
 11230  0026BE  0100               	movlb	0	; () banked
 11231  0026C0  6F60               	movwf	RxData@pData& (0+255),b
 11232  0026C2  0E00               	movlw	0
 11233  0026C4  6F61               	movwf	(RxData@pData+1)& (0+255),b
 11234  0026C6  0E00               	movlw	0
 11235  0026C8  6F62               	movwf	RxData@dataLength& (0+255),b
 11236  0026CA  0E00               	movlw	0
 11237  0026CC  6F63               	movwf	RxData@status& (0+255),b
 11238  0026CE  D801               	call	u12078
 11239  0026D0  0012               	return	
 11240  0026D2                     u12078:
 11241  0026D2  0005               	push	
 11242  0026D4  6EFA               	movwf	pclath,c
 11243  0026D6  0101               	movlb	1	; () banked
 11244  0026D8  510C               	movf	_rxPayload& (0+255),w,b
 11245  0026DA  6EFD               	movwf	tosl,c
 11246  0026DC  510D               	movf	(_rxPayload+1)& (0+255),w,b
 11247  0026DE  6EFE               	movwf	tosh,c
 11248  0026E0  6AFF               	clrf	tosu,c
 11249  0026E2  50FA               	movf	pclath,w,c
 11250  0026E4  0012               	return		;indir
 11251  0026E6                     l1903:
 11252                           
 11253                           ;lorawan_eu.c: 511: else
 11254                           ;lorawan_eu.c: 512: {
 11255                           ;lorawan_eu.c: 513: if (loRa.counterRepetitionsUnconfirmedUplink <= loRa.maxRepetitionsU
      +                          nconfirmedUplink)
 11256  0026E6  0102               	movlb	2	; () banked
 11257  0026E8  51DE               	movf	(_loRa+216)& (0+255),w,b
 11258  0026EA  5DDC               	subwf	(_loRa+214)& (0+255),w,b
 11259  0026EC  A0D8               	btfss	status,0,c
 11260  0026EE  D0F8               	goto	l1908
 11261                           
 11262                           ; BSR set to: 2
 11263                           ;lorawan_eu.c: 514: {
 11264                           ;lorawan_eu.c: 515: loRa.macStatus.macState = RETRANSMISSION_DELAY;
 11265  0026F0  5108               	movf	(_loRa+2)& (0+255),w,b
 11266  0026F2  0BF0               	andlw	-16
 11267  0026F4  0906               	iorlw	6
 11268  0026F6  6F08               	movwf	(_loRa+2)& (0+255),b
 11269                           
 11270                           ; BSR set to: 2
 11271                           ;lorawan_eu.c: 516: if (SelectChannelForTransmission (1) == OK)
 11272  0026F8  0E01               	movlw	1
 11273  0026FA  EC2F  F03F         	call	_SelectChannelForTransmission
 11274  0026FE  0900               	iorlw	0
 11275  002700  A4D8               	btfss	status,2,c
 11276  002702  D031               	goto	l1909
 11277                           
 11278                           ;lorawan_eu.c: 517: {
 11279                           ;lorawan_eu.c: 519: if (RADIO_Transmit (&macBuffer[16], loRa.lastPacketLength) == OK)
 11280  002704  0E9F               	movlw	low (_macBuffer+16)
 11281  002706  0100               	movlb	0	; () banked
 11282  002708  6FB1               	movwf	RADIO_Transmit@buffer& (0+255),b
 11283  00270A  0E06               	movlw	high (_macBuffer+16)
 11284  00270C  6FB2               	movwf	(RADIO_Transmit@buffer+1)& (0+255),b
 11285  00270E  C2DA  F0B3         	movff	_loRa+212,RADIO_Transmit@bufferLen
 11286  002712  EC11  F020         	call	_RADIO_Transmit	;wreg free
 11287  002716  0100               	movlb	0	; () banked
 11288  002718  51B1               	movf	?_RADIO_Transmit& (0+255),w,b
 11289  00271A  11B2               	iorwf	(?_RADIO_Transmit+1)& (0+255),w,b
 11290  00271C  A4D8               	btfss	status,2,c
 11291  00271E  D007               	goto	l1910
 11292                           
 11293                           ; BSR set to: 0
 11294                           ;lorawan_eu.c: 520: {
 11295                           ;lorawan_eu.c: 521: loRa.counterRepetitionsUnconfirmedUplink ++ ;
 11296  002720  0102               	movlb	2	; () banked
 11297  002722  2BDE               	incf	(_loRa+216)& (0+255),f,b
 11298                           
 11299                           ; BSR set to: 2
 11300                           ;lorawan_eu.c: 522: loRa.macStatus.macState = TRANSMISSION_OCCURRING;
 11301  002724  5108               	movf	(_loRa+2)& (0+255),w,b
 11302  002726  0BF0               	andlw	-16
 11303  002728  0901               	iorlw	1
 11304  00272A  6F08               	movwf	(_loRa+2)& (0+255),b
 11305                           
 11306                           ;lorawan_eu.c: 523: }
 11307  00272C  0012               	return	
 11308  00272E                     l1910:
 11309                           
 11310                           ;lorawan_eu.c: 524: else
 11311                           ;lorawan_eu.c: 526: {
 11312                           ;lorawan_eu.c: 527: ResetParametersForUnconfirmedTransmission ();
 11313                           
 11314                           ; BSR set to: 2
 11315  00272E  ECD0  F049         	call	_ResetParametersForUnconfirmedTransmission	;wreg free
 11316                           
 11317                           ;lorawan_eu.c: 528: if (rxPayload.RxAppData != (0))
 11318  002732  0101               	movlb	1	; () banked
 11319  002734  510C               	movf	_rxPayload& (0+255),w,b
 11320  002736  110D               	iorwf	(_rxPayload+1)& (0+255),w,b
 11321  002738  B4D8               	btfsc	status,2,c
 11322  00273A  0012               	return	
 11323                           
 11324                           ; BSR set to: 1
 11325                           ;lorawan_eu.c: 529: {
 11326                           ;lorawan_eu.c: 530: rxPayload.RxAppData((0), 0, MAC_NOT_OK);
 11327  00273C  0E00               	movlw	0
 11328  00273E  0100               	movlb	0	; () banked
 11329  002740  6F60               	movwf	RxData@pData& (0+255),b
 11330  002742  0E00               	movlw	0
 11331  002744  6F61               	movwf	(RxData@pData+1)& (0+255),b
 11332  002746  0E00               	movlw	0
 11333  002748  6F62               	movwf	RxData@dataLength& (0+255),b
 11334  00274A  0E00               	movlw	0
 11335  00274C  6F63               	movwf	RxData@status& (0+255),b
 11336  00274E  D801               	call	u12128
 11337  002750  0012               	return	
 11338  002752                     u12128:
 11339  002752  0005               	push	
 11340  002754  6EFA               	movwf	pclath,c
 11341  002756  0101               	movlb	1	; () banked
 11342  002758  510C               	movf	_rxPayload& (0+255),w,b
 11343  00275A  6EFD               	movwf	tosl,c
 11344  00275C  510D               	movf	(_rxPayload+1)& (0+255),w,b
 11345  00275E  6EFE               	movwf	tosh,c
 11346  002760  6AFF               	clrf	tosu,c
 11347  002762  50FA               	movf	pclath,w,c
 11348  002764  0012               	return		;indir
 11349  002766                     l1909:
 11350                           
 11351                           ;lorawan_eu.c: 534: else
 11352                           ;lorawan_eu.c: 535: {
 11353                           ;lorawan_eu.c: 537: for (i = 0; i <= loRa.maxChannels; i ++)
 11354  002766  0E00               	movlw	0
 11355  002768  0100               	movlb	0	; () banked
 11356  00276A  6FCA               	movwf	LORAWAN_RxTimeout@i& (0+255),b
 11357  00276C  D07C               	goto	l1914
 11358  00276E                     
 11359                           ;lorawan_eu.c: 538: {
 11360                           ;lorawan_eu.c: 539: if ( (Channels[i].status == 1) && (Channels[i].channelTimer != 0) &&
      +                           (Channels[i].channelTimer <= minim) && (loRa.currentDataRate >= Channels[i].dataRange.m
      +                          in) && (loRa.currentDataRate <= Channels[i].dataRange.max) )
 11361                           
 11362                           ; BSR set to: 0
 11363  00276E  0100               	movlb	0	; () banked
 11364  002770  51CA               	movf	LORAWAN_RxTimeout@i& (0+255),w,b
 11365  002772  0D0E               	mullw	14
 11366  002774  0E04               	movlw	4
 11367  002776  26F3               	addwf	prodl,f,c
 11368  002778  0E00               	movlw	0
 11369  00277A  22F4               	addwfc	prodh,f,c
 11370  00277C  0E00               	movlw	low _Channels
 11371  00277E  24F3               	addwf	prodl,w,c
 11372  002780  6ED9               	movwf	fsr2l,c
 11373  002782  0E04               	movlw	high _Channels
 11374  002784  20F4               	addwfc	prodh,w,c
 11375  002786  6EDA               	movwf	fsr2h,c
 11376  002788  04DE               	decf	postinc2,w,c
 11377  00278A  A4D8               	btfss	status,2,c
 11378  00278C  D06A               	goto	l1916
 11379                           
 11380                           ; BSR set to: 0
 11381  00278E  51CA               	movf	LORAWAN_RxTimeout@i& (0+255),w,b
 11382  002790  0D0E               	mullw	14
 11383  002792  0E08               	movlw	8
 11384  002794  26F3               	addwf	prodl,f,c
 11385  002796  0E00               	movlw	0
 11386  002798  22F4               	addwfc	prodh,f,c
 11387  00279A  0E00               	movlw	low _Channels
 11388  00279C  24F3               	addwf	prodl,w,c
 11389  00279E  6ED9               	movwf	fsr2l,c
 11390  0027A0  0E04               	movlw	high _Channels
 11391  0027A2  20F4               	addwfc	prodh,w,c
 11392  0027A4  6EDA               	movwf	fsr2h,c
 11393  0027A6  50DE               	movf	postinc2,w,c
 11394  0027A8  10DE               	iorwf	postinc2,w,c
 11395  0027AA  10DE               	iorwf	postinc2,w,c
 11396  0027AC  10DE               	iorwf	postinc2,w,c
 11397  0027AE  B4D8               	btfsc	status,2,c
 11398  0027B0  D058               	goto	l1916
 11399                           
 11400                           ; BSR set to: 0
 11401  0027B2  51CA               	movf	LORAWAN_RxTimeout@i& (0+255),w,b
 11402  0027B4  0D0E               	mullw	14
 11403  0027B6  0E08               	movlw	8
 11404  0027B8  26F3               	addwf	prodl,f,c
 11405  0027BA  0E00               	movlw	0
 11406  0027BC  22F4               	addwfc	prodh,f,c
 11407  0027BE  0E00               	movlw	low _Channels
 11408  0027C0  24F3               	addwf	prodl,w,c
 11409  0027C2  6ED9               	movwf	fsr2l,c
 11410  0027C4  0E04               	movlw	high _Channels
 11411  0027C6  20F4               	addwfc	prodh,w,c
 11412  0027C8  6EDA               	movwf	fsr2h,c
 11413  0027CA  50DE               	movf	postinc2,w,c
 11414  0027CC  5DC6               	subwf	LORAWAN_RxTimeout@minim& (0+255),w,b
 11415  0027CE  50DE               	movf	postinc2,w,c
 11416  0027D0  59C7               	subwfb	(LORAWAN_RxTimeout@minim+1)& (0+255),w,b
 11417  0027D2  50DE               	movf	postinc2,w,c
 11418  0027D4  59C8               	subwfb	(LORAWAN_RxTimeout@minim+2)& (0+255),w,b
 11419  0027D6  50DE               	movf	postinc2,w,c
 11420  0027D8  59C9               	subwfb	(LORAWAN_RxTimeout@minim+3)& (0+255),w,b
 11421  0027DA  A0D8               	btfss	status,0,c
 11422  0027DC  D042               	goto	l1916
 11423                           
 11424                           ; BSR set to: 0
 11425  0027DE  51CA               	movf	LORAWAN_RxTimeout@i& (0+255),w,b
 11426  0027E0  0D0E               	mullw	14
 11427  0027E2  0E05               	movlw	5
 11428  0027E4  26F3               	addwf	prodl,f,c
 11429  0027E6  0E00               	movlw	0
 11430  0027E8  22F4               	addwfc	prodh,f,c
 11431  0027EA  0E00               	movlw	low _Channels
 11432  0027EC  24F3               	addwf	prodl,w,c
 11433  0027EE  6ED9               	movwf	fsr2l,c
 11434  0027F0  0E04               	movlw	high _Channels
 11435  0027F2  20F4               	addwfc	prodh,w,c
 11436  0027F4  6EDA               	movwf	fsr2h,c
 11437  0027F6  0104               	movlb	4	; () banked
 11438  0027F8  50DF               	movf	223,w,c
 11439  0027FA  0B0F               	andlw	15
 11440  0027FC  0100               	movlb	0	; () banked
 11441  0027FE  6FC2               	movwf	??_LORAWAN_RxTimeout& (0+255),b
 11442  002800  51C2               	movf	??_LORAWAN_RxTimeout& (0+255),w,b
 11443  002802  0102               	movlb	2	; () banked
 11444  002804  5DE5               	subwf	(_loRa+223)& (0+255),w,b
 11445  002806  A0D8               	btfss	status,0,c
 11446  002808  D02C               	goto	l1916
 11447                           
 11448                           ; BSR set to: 2
 11449  00280A  0100               	movlb	0	; () banked
 11450  00280C  51CA               	movf	LORAWAN_RxTimeout@i& (0+255),w,b
 11451  00280E  0D0E               	mullw	14
 11452  002810  0E05               	movlw	5
 11453  002812  26F3               	addwf	prodl,f,c
 11454  002814  0E00               	movlw	0
 11455  002816  22F4               	addwfc	prodh,f,c
 11456  002818  0E00               	movlw	low _Channels
 11457  00281A  24F3               	addwf	prodl,w,c
 11458  00281C  6ED9               	movwf	fsr2l,c
 11459  00281E  0E04               	movlw	high _Channels
 11460  002820  20F4               	addwfc	prodh,w,c
 11461  002822  6EDA               	movwf	fsr2h,c
 11462  002824  0104               	movlb	4	; () banked
 11463  002826  38DF               	swapf	223,w,c
 11464  002828  0B0F               	andlw	15
 11465  00282A  0100               	movlb	0	; () banked
 11466  00282C  6FC2               	movwf	??_LORAWAN_RxTimeout& (0+255),b
 11467  00282E  0102               	movlb	2	; () banked
 11468  002830  51E5               	movf	(_loRa+223)& (0+255),w,b
 11469  002832  0100               	movlb	0	; () banked
 11470  002834  5DC2               	subwf	??_LORAWAN_RxTimeout& (0+255),w,b
 11471  002836  A0D8               	btfss	status,0,c
 11472  002838  D014               	goto	l1916
 11473                           
 11474                           ; BSR set to: 0
 11475                           ;lorawan_eu.c: 540: {
 11476                           ;lorawan_eu.c: 541: minim = Channels[i].channelTimer;
 11477  00283A  51CA               	movf	LORAWAN_RxTimeout@i& (0+255),w,b
 11478  00283C  0D0E               	mullw	14
 11479  00283E  0E08               	movlw	8
 11480  002840  26F3               	addwf	prodl,f,c
 11481  002842  0E00               	movlw	0
 11482  002844  22F4               	addwfc	prodh,f,c
 11483  002846  0E00               	movlw	low _Channels
 11484  002848  24F3               	addwf	prodl,w,c
 11485  00284A  6ED9               	movwf	fsr2l,c
 11486  00284C  0E04               	movlw	high _Channels
 11487  00284E  20F4               	addwfc	prodh,w,c
 11488  002850  6EDA               	movwf	fsr2h,c
 11489  002852  CFDE F0C6          	movff	postinc2,LORAWAN_RxTimeout@minim
 11490  002856  CFDE F0C7          	movff	postinc2,LORAWAN_RxTimeout@minim+1
 11491  00285A  CFDE F0C8          	movff	postinc2,LORAWAN_RxTimeout@minim+2
 11492  00285E  CFDE F0C9          	movff	postinc2,LORAWAN_RxTimeout@minim+3
 11493  002862                     l1916:
 11494                           
 11495                           ; BSR set to: 0
 11496  002862  0100               	movlb	0	; () banked
 11497  002864  2BCA               	incf	LORAWAN_RxTimeout@i& (0+255),f,b
 11498  002866                     l1914:
 11499                           
 11500                           ; BSR set to: 0
 11501                           
 11502                           ; BSR set to: 0
 11503  002866  51CA               	movf	LORAWAN_RxTimeout@i& (0+255),w,b
 11504  002868  0102               	movlb	2	; () banked
 11505  00286A  5DF3               	subwf	(_loRa+237)& (0+255),w,b
 11506  00286C  B0D8               	btfsc	status,0,c
 11507  00286E  D77F               	goto	l1915
 11508                           
 11509                           ; BSR set to: 2
 11510                           ;lorawan_eu.c: 542: }
 11511                           ;lorawan_eu.c: 543: }
 11512                           ;lorawan_eu.c: 544: SwTimerSetTimeout (loRa.unconfirmedRetransmisionTimerId, ( (((uint32
      +                          _t)(minim + 50)) << (12)) / 125UL ) );
 11513                           
 11514                           ; BSR set to: 2
 11515  002870  C0C6  F0C2         	movff	LORAWAN_RxTimeout@minim,??_LORAWAN_RxTimeout
 11516  002874  C0C7  F0C3         	movff	LORAWAN_RxTimeout@minim+1,??_LORAWAN_RxTimeout+1
 11517  002878  C0C8  F0C4         	movff	LORAWAN_RxTimeout@minim+2,??_LORAWAN_RxTimeout+2
 11518  00287C  C0C9  F0C5         	movff	LORAWAN_RxTimeout@minim+3,??_LORAWAN_RxTimeout+3
 11519  002880  0E0C               	movlw	12
 11520  002882                     u12195:
 11521  002882  90D8               	bcf	status,0,c
 11522  002884  0100               	movlb	0	; () banked
 11523  002886  37C2               	rlcf	??_LORAWAN_RxTimeout& (0+255),f,b
 11524  002888  37C3               	rlcf	(??_LORAWAN_RxTimeout+1)& (0+255),f,b
 11525  00288A  37C4               	rlcf	(??_LORAWAN_RxTimeout+2)& (0+255),f,b
 11526  00288C  37C5               	rlcf	(??_LORAWAN_RxTimeout+3)& (0+255),f,b
 11527  00288E  2EE8               	decfsz	wreg,f,c
 11528  002890  D7F8               	goto	u12195
 11529  002892  0E00               	movlw	0
 11530  002894  25C2               	addwf	??_LORAWAN_RxTimeout& (0+255),w,b
 11531  002896  6F60               	movwf	___lldiv@dividend& (0+255),b
 11532  002898  0E20               	movlw	32
 11533  00289A  21C3               	addwfc	(??_LORAWAN_RxTimeout+1)& (0+255),w,b
 11534  00289C  6F61               	movwf	(___lldiv@dividend+1)& (0+255),b
 11535  00289E  0E03               	movlw	3
 11536  0028A0  21C4               	addwfc	(??_LORAWAN_RxTimeout+2)& (0+255),w,b
 11537  0028A2  6F62               	movwf	(___lldiv@dividend+2)& (0+255),b
 11538  0028A4  0E00               	movlw	0
 11539  0028A6  21C5               	addwfc	(??_LORAWAN_RxTimeout+3)& (0+255),w,b
 11540  0028A8  6F63               	movwf	(___lldiv@dividend+3)& (0+255),b
 11541  0028AA  0E7D               	movlw	125
 11542  0028AC  6F64               	movwf	___lldiv@divisor& (0+255),b
 11543  0028AE  0E00               	movlw	0
 11544  0028B0  6F65               	movwf	(___lldiv@divisor+1)& (0+255),b
 11545  0028B2  0E00               	movlw	0
 11546  0028B4  6F66               	movwf	(___lldiv@divisor+2)& (0+255),b
 11547  0028B6  0E00               	movlw	0
 11548  0028B8  6F67               	movwf	(___lldiv@divisor+3)& (0+255),b
 11549  0028BA  EC0A  F03D         	call	___lldiv	;wreg free
 11550  0028BE  C060  F06D         	movff	?___lldiv,SwTimerSetTimeout@timeout
 11551  0028C2  C061  F06E         	movff	?___lldiv+1,SwTimerSetTimeout@timeout+1
 11552  0028C6  C062  F06F         	movff	?___lldiv+2,SwTimerSetTimeout@timeout+2
 11553  0028CA  C063  F070         	movff	?___lldiv+3,SwTimerSetTimeout@timeout+3
 11554  0028CE  0102               	movlb	2	; () banked
 11555  0028D0  51F0               	movf	(_loRa+234)& (0+255),w,b
 11556  0028D2  EC27  F045         	call	_SwTimerSetTimeout
 11557                           
 11558                           ;lorawan_eu.c: 545: SwTimerStart (loRa.unconfirmedRetransmisionTimerId);
 11559  0028D6  0102               	movlb	2	; () banked
 11560  0028D8  51F0               	movf	(_loRa+234)& (0+255),w,b
 11561  0028DA  ECDA  F03A         	call	_SwTimerStart
 11562                           
 11563                           ;lorawan_eu.c: 546: }
 11564                           ;lorawan_eu.c: 547: }
 11565  0028DE  0012               	return	
 11566  0028E0                     l1908:
 11567                           
 11568                           ;lorawan_eu.c: 548: else
 11569                           ;lorawan_eu.c: 549: {
 11570                           ;lorawan_eu.c: 550: ResetParametersForUnconfirmedTransmission ();
 11571  0028E0  ECD0  F049         	call	_ResetParametersForUnconfirmedTransmission	;wreg free
 11572                           
 11573                           ;lorawan_eu.c: 551: if (rxPayload.RxAppData != (0))
 11574  0028E4  0101               	movlb	1	; () banked
 11575  0028E6  510C               	movf	_rxPayload& (0+255),w,b
 11576  0028E8  110D               	iorwf	(_rxPayload+1)& (0+255),w,b
 11577  0028EA  B4D8               	btfsc	status,2,c
 11578  0028EC  0012               	return	
 11579                           
 11580                           ; BSR set to: 1
 11581                           ;lorawan_eu.c: 552: {
 11582                           ;lorawan_eu.c: 553: rxPayload.RxAppData((0), 0, MAC_OK);
 11583  0028EE  0E00               	movlw	0
 11584  0028F0  0100               	movlb	0	; () banked
 11585  0028F2  6F60               	movwf	RxData@pData& (0+255),b
 11586  0028F4  0E00               	movlw	0
 11587  0028F6  6F61               	movwf	(RxData@pData+1)& (0+255),b
 11588  0028F8  0E00               	movlw	0
 11589  0028FA  6F62               	movwf	RxData@dataLength& (0+255),b
 11590  0028FC  0E01               	movlw	1
 11591  0028FE  6F63               	movwf	RxData@status& (0+255),b
 11592  002900  D801               	call	u12218
 11593  002902  0012               	return	
 11594  002904                     u12218:
 11595  002904  0005               	push	
 11596  002906  6EFA               	movwf	pclath,c
 11597  002908  0101               	movlb	1	; () banked
 11598  00290A  510C               	movf	_rxPayload& (0+255),w,b
 11599  00290C  6EFD               	movwf	tosl,c
 11600  00290E  510D               	movf	(_rxPayload+1)& (0+255),w,b
 11601  002910  6EFE               	movwf	tosh,c
 11602  002912  6AFF               	clrf	tosu,c
 11603  002914  50FA               	movf	pclath,w,c
 11604  002916  0012               	return		;indir
 11605  002918                     l1894:
 11606                           
 11607                           ;lorawan_eu.c: 560: else
 11608                           ;lorawan_eu.c: 561: {
 11609                           ;lorawan_eu.c: 563: if (rxPayload.RxAppData != (0))
 11610  002918  0101               	movlb	1	; () banked
 11611  00291A  510C               	movf	_rxPayload& (0+255),w,b
 11612  00291C  110D               	iorwf	(_rxPayload+1)& (0+255),w,b
 11613  00291E  B4D8               	btfsc	status,2,c
 11614  002920  0012               	return	
 11615                           
 11616                           ; BSR set to: 1
 11617                           ;lorawan_eu.c: 564: {
 11618                           ;lorawan_eu.c: 565: rxPayload.RxAppData((0), 0, RADIO_NOT_OK);
 11619  002922  0E00               	movlw	0
 11620  002924  0100               	movlb	0	; () banked
 11621  002926  6F60               	movwf	RxData@pData& (0+255),b
 11622  002928  0E00               	movlw	0
 11623  00292A  6F61               	movwf	(RxData@pData+1)& (0+255),b
 11624  00292C  0E00               	movlw	0
 11625  00292E  6F62               	movwf	RxData@dataLength& (0+255),b
 11626  002930  0E02               	movlw	2
 11627  002932  6F63               	movwf	RxData@status& (0+255),b
 11628  002934  D801               	call	u12238
 11629  002936  0012               	return	
 11630  002938                     u12238:
 11631  002938  0005               	push	
 11632  00293A  6EFA               	movwf	pclath,c
 11633  00293C  0101               	movlb	1	; () banked
 11634  00293E  510C               	movf	_rxPayload& (0+255),w,b
 11635  002940  6EFD               	movwf	tosl,c
 11636  002942  510D               	movf	(_rxPayload+1)& (0+255),w,b
 11637  002944  6EFE               	movwf	tosh,c
 11638  002946  6AFF               	clrf	tosu,c
 11639  002948  50FA               	movf	pclath,w,c
 11640  00294A  0012               	return		;indir
 11641  00294C                     __end_of_LORAWAN_RxTimeout:
 11642                           	opt stack 0
 11643                           tosu	equ	0xFFF
 11644                           tosh	equ	0xFFE
 11645                           tosl	equ	0xFFD
 11646                           pclath	equ	0xFFA
 11647                           tblptru	equ	0xFF8
 11648                           tblptrh	equ	0xFF7
 11649                           tblptrl	equ	0xFF6
 11650                           tablat	equ	0xFF5
 11651                           prodh	equ	0xFF4
 11652                           prodl	equ	0xFF3
 11653                           intcon	equ	0xFF2
 11654                           intcon2	equ	0xFF1
 11655                           intcon3	equ	0xFF0
 11656                           postinc0	equ	0xFEE
 11657                           wreg	equ	0xFE8
 11658                           postinc1	equ	0xFE6
 11659                           postdec1	equ	0xFE5
 11660                           plusw1	equ	0xFE3
 11661                           fsr1h	equ	0xFE2
 11662                           fsr1l	equ	0xFE1
 11663                           indf2	equ	0xFDF
 11664                           postinc2	equ	0xFDE
 11665                           postdec2	equ	0xFDD
 11666                           fsr2h	equ	0xFDA
 11667                           fsr2l	equ	0xFD9
 11668                           status	equ	0xFD8
 11669                           
 11670 ;; *************** function _LORAWAN_RxDone *****************
 11671 ;; Defined at:
 11672 ;;		line 1121 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 11673 ;; Parameters:    Size  Location     Type
 11674 ;;  buffer          2  102[BANK1 ] PTR unsigned char 
 11675 ;;		 -> radioBuffer(271), LORAWAN_RxDone@hdr(2), 
 11676 ;;  bufferLength    1  104[BANK1 ] unsigned char 
 11677 ;; Auto vars:     Size  Location     Type
 11678 ;;  hdr             2  145[BANK0 ] PTR struct .
 11679 ;;		 -> radioBuffer(271), LORAWAN_RxDone@hdr(2), 
 11680 ;;  joinAccept      2  142[BANK0 ] PTR struct .
 11681 ;;		 -> radioBuffer(271), LORAWAN_RxDone@hdr(2), 
 11682 ;;  computedMic     4  138[BANK0 ] unsigned long 
 11683 ;;  extractedMic    4  130[BANK0 ] unsigned long 
 11684 ;;  packet          2  136[BANK0 ] PTR unsigned char 
 11685 ;;		 -> radioBuffer(271), LORAWAN_RxDone@hdr(2), NULL(0), 
 11686 ;;  frmPayloadLe    1  144[BANK0 ] unsigned char 
 11687 ;;  temp            1  135[BANK0 ] unsigned char 
 11688 ;;  bufferIndex     1  134[BANK0 ] unsigned char 
 11689 ;;  mhdr            1  129[BANK0 ] struct .
 11690 ;;  channelIndex    1  128[BANK0 ] unsigned char 
 11691 ;;  fPort           1  127[BANK0 ] unsigned char 
 11692 ;; Return value:  Size  Location     Type
 11693 ;;                  1    wreg      enum E7426
 11694 ;; Registers used:
 11695 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, btemp+8, btemp+9, btemp+10, btemp+11, to
      +sl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11696 ;; Tracked objects:
 11697 ;;		On entry : 0/0
 11698 ;;		On exit  : 0/0
 11699 ;;		Unchanged: 0/0
 11700 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11701 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11702 ;;      Locals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11703 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11704 ;;      Totals:         0      25       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11705 ;;Total ram usage:       28 bytes
 11706 ;; Hardware stack levels used:    1
 11707 ;; Hardware stack levels required when called:   15
 11708 ;; This function calls:
 11709 ;;		_AESCmac
 11710 ;;		_AESEncodeLoRa
 11711 ;;		_AssembleEncryptionBlock
 11712 ;;		_CheckFlags
 11713 ;;		_CheckMcastFlags
 11714 ;;		_ComputeMic
 11715 ;;		_ComputeSessionKeys
 11716 ;;		_EncryptFRMPayload
 11717 ;;		_ExtractMic
 11718 ;;		_LORAWAN_EnterContinuousReceive
 11719 ;;		_LORAWAN_Send
 11720 ;;		_MacExecuteCommands
 11721 ;;		_RADIO_GetStatus
 11722 ;;		_RADIO_ReleaseData
 11723 ;;		_RxData
 11724 ;;		_SearchAvailableChannel
 11725 ;;		_SetJoinFailState
 11726 ;;		_SetReceptionNotOkState
 11727 ;;		_StartReTxTimer
 11728 ;;		_SwTimerStop
 11729 ;;		_UpdateCfList
 11730 ;;		_UpdateDLSettings
 11731 ;;		_UpdateJoinSuccessState
 11732 ;;		_UpdateReceiveDelays
 11733 ;;		_UpdateRetransmissionAckTimeoutState
 11734 ;;		_memcpy
 11735 ;; This function is called by:
 11736 ;;		_RADIO_RxDone
 11737 ;;		_RADIO_FSKPayloadReady
 11738 ;; This function uses a non-reentrant model
 11739 ;;
 11740                           
 11741                           	psect	text62
 11742  0000D4                     __ptext62:
 11743                           	opt stack 0
 11744  0000D4                     _LORAWAN_RxDone:
 11745                           	opt stack 12
 11746                           
 11747                           ;lorawan.c: 1123: uint32_t computedMic, extractedMic;
 11748                           ;lorawan.c: 1124: Mhdr_t mhdr;
 11749                           ;lorawan.c: 1125: uint8_t fPort, bufferIndex, channelIndex;
 11750                           ;lorawan.c: 1126: uint8_t frmPayloadLength;
 11751                           ;lorawan.c: 1127: uint8_t *packet;
 11752                           ;lorawan.c: 1128: uint8_t temp;
 11753                           ;lorawan.c: 1130: RADIO_ReleaseData();
 11754                           
 11755                           ;incstack = 0
 11756  0000D4  ECD5  F04A         	call	_RADIO_ReleaseData	;wreg free
 11757                           
 11758                           ;lorawan.c: 1132: if (loRa.macStatus.macPause == 0)
 11759  0000D8  0102               	movlb	2	; () banked
 11760  0000DA  B109               	btfsc	(_loRa+3)& (0+255),0,b
 11761  0000DC  EF89  F006         	goto	l1148
 11762                           
 11763                           ; BSR set to: 2
 11764                           ;lorawan.c: 1133: {
 11765                           ;lorawan.c: 1134: mhdr.value = buffer[0];
 11766  0000E0  C1F5  FFD9         	movff	LORAWAN_RxDone@buffer,fsr2l
 11767  0000E4  C1F6  FFDA         	movff	LORAWAN_RxDone@buffer+1,fsr2h
 11768  0000E8  50DF               	movf	indf2,w,c
 11769  0000EA  0100               	movlb	0	; () banked
 11770  0000EC  6FE1               	movwf	LORAWAN_RxDone@mhdr& (0+255),b
 11771                           
 11772                           ; BSR set to: 0
 11773                           ;lorawan.c: 1135: if ( (mhdr.bits.mType == FRAME_TYPE_JOIN_ACCEPT) && (loRa.activationPa
      +                          rameters.activationType == 0) )
 11774  0000EE  39E1               	swapf	LORAWAN_RxDone@mhdr& (0+255),w,b
 11775  0000F0  32E8               	rrcf	wreg,f,c
 11776  0000F2  0B07               	andlw	7
 11777  0000F4  06E8               	decf	wreg,f,c
 11778  0000F6  A4D8               	btfss	status,2,c
 11779  0000F8  D0D8               	goto	l1149
 11780                           
 11781                           ; BSR set to: 0
 11782  0000FA  0102               	movlb	2	; () banked
 11783  0000FC  5123               	movf	(_loRa+29)& (0+255),w,b
 11784  0000FE  A4D8               	btfss	status,2,c
 11785  000100  D0D4               	goto	l1149
 11786                           
 11787                           ; BSR set to: 2
 11788                           ;lorawan.c: 1136: {
 11789                           ;lorawan.c: 1137: temp = bufferLength - 1;
 11790  000102  0101               	movlb	1	; () banked
 11791  000104  05F7               	decf	LORAWAN_RxDone@bufferLength& (0+255),w,b
 11792  000106  0100               	movlb	0	; () banked
 11793  000108  D028               	goto	L6
 11794  00010A                     
 11795                           ; BSR set to: 0
 11796                           ;lorawan.c: 1139: {
 11797                           ;lorawan.c: 1141: AESEncodeLoRa (&buffer[bufferLength - temp], loRa.activationParameters
      +                          .applicationKey);
 11798                           
 11799                           ; BSR set to: 0
 11800  00010A  51E7               	movf	LORAWAN_RxDone@temp& (0+255),w,b
 11801  00010C  6FDA               	movwf	??_LORAWAN_RxDone& (0+255),b
 11802  00010E  6BDB               	clrf	(??_LORAWAN_RxDone+1)& (0+255),b
 11803  000110  1FDA               	comf	??_LORAWAN_RxDone& (0+255),f,b
 11804  000112  1FDB               	comf	(??_LORAWAN_RxDone+1)& (0+255),f,b
 11805  000114  4BDA               	infsnz	??_LORAWAN_RxDone& (0+255),f,b
 11806  000116  2BDB               	incf	(??_LORAWAN_RxDone+1)& (0+255),f,b
 11807  000118  0101               	movlb	1	; () banked
 11808  00011A  51F7               	movf	LORAWAN_RxDone@bufferLength& (0+255),w,b
 11809  00011C  0100               	movlb	0	; () banked
 11810  00011E  6FDC               	movwf	(??_LORAWAN_RxDone+2)& (0+255),b
 11811  000120  6BDD               	clrf	(??_LORAWAN_RxDone+3)& (0+255),b
 11812  000122  51DA               	movf	??_LORAWAN_RxDone& (0+255),w,b
 11813  000124  27DC               	addwf	(??_LORAWAN_RxDone+2)& (0+255),f,b
 11814  000126  51DB               	movf	(??_LORAWAN_RxDone+1)& (0+255),w,b
 11815  000128  23DD               	addwfc	(??_LORAWAN_RxDone+3)& (0+255),f,b
 11816  00012A  51DC               	movf	(??_LORAWAN_RxDone+2)& (0+255),w,b
 11817  00012C  0101               	movlb	1	; () banked
 11818  00012E  25F5               	addwf	LORAWAN_RxDone@buffer& (0+255),w,b
 11819  000130  0100               	movlb	0	; () banked
 11820  000132  6F7D               	movwf	AESEncodeLoRa@block& (0+255),b
 11821  000134  51DD               	movf	(??_LORAWAN_RxDone+3)& (0+255),w,b
 11822  000136  0101               	movlb	1	; () banked
 11823  000138  21F6               	addwfc	(LORAWAN_RxDone@buffer+1)& (0+255),w,b
 11824  00013A  0100               	movlb	0	; () banked
 11825  00013C  6F7E               	movwf	(AESEncodeLoRa@block+1)& (0+255),b
 11826  00013E  0E48               	movlw	low (_loRa+66)
 11827  000140  6F7F               	movwf	AESEncodeLoRa@key& (0+255),b
 11828  000142  0E02               	movlw	high (_loRa+66)
 11829  000144  6F80               	movwf	(AESEncodeLoRa@key+1)& (0+255),b
 11830  000146  EC28  F046         	call	_AESEncodeLoRa	;wreg free
 11831                           
 11832                           ;lorawan.c: 1142: if (temp > 16)
 11833  00014A  0E10               	movlw	16
 11834  00014C  0100               	movlb	0	; () banked
 11835  00014E  65E7               	cpfsgt	LORAWAN_RxDone@temp& (0+255),b
 11836  000150  D003               	goto	l1152
 11837                           
 11838                           ; BSR set to: 0
 11839                           ;lorawan.c: 1143: {
 11840                           ;lorawan.c: 1144: temp -= 16;
 11841  000152  0E10               	movlw	16
 11842  000154  5FE7               	subwf	LORAWAN_RxDone@temp& (0+255),f,b
 11843                           
 11844                           ;lorawan.c: 1145: }
 11845  000156  D002               	goto	l1153
 11846  000158                     l1152:
 11847                           
 11848                           ; BSR set to: 0
 11849                           ;lorawan.c: 1146: else
 11850                           ;lorawan.c: 1147: {
 11851                           ;lorawan.c: 1148: temp = 0;
 11852                           
 11853                           ; BSR set to: 0
 11854  000158  0E00               	movlw	0
 11855  00015A                     L6:
 11856  00015A  6FE7               	movwf	LORAWAN_RxDone@temp& (0+255),b
 11857  00015C                     l1153:
 11858                           
 11859                           ; BSR set to: 0
 11860                           
 11861                           ; BSR set to: 0
 11862  00015C  51E7               	movf	LORAWAN_RxDone@temp& (0+255),w,b
 11863  00015E  A4D8               	btfss	status,2,c
 11864  000160  D7D4               	goto	l1151
 11865                           
 11866                           ; BSR set to: 0
 11867                           ;lorawan.c: 1149: }
 11868                           ;lorawan.c: 1150: }
 11869                           ;lorawan.c: 1153: computedMic = ComputeMic (loRa.activationParameters.applicationKey, bu
      +                          ffer, bufferLength - sizeof(extractedMic));
 11870                           
 11871                           ; BSR set to: 0
 11872  000162  0E48               	movlw	low (_loRa+66)
 11873  000164  6FC7               	movwf	ComputeMic@key& (0+255),b
 11874  000166  0E02               	movlw	high (_loRa+66)
 11875  000168  6FC8               	movwf	(ComputeMic@key+1)& (0+255),b
 11876  00016A  C1F5  F0C9         	movff	LORAWAN_RxDone@buffer,ComputeMic@buffer
 11877  00016E  C1F6  F0CA         	movff	LORAWAN_RxDone@buffer+1,ComputeMic@buffer+1
 11878  000172  0101               	movlb	1	; () banked
 11879  000174  51F7               	movf	LORAWAN_RxDone@bufferLength& (0+255),w,b
 11880  000176  0FFC               	addlw	252
 11881  000178  0100               	movlb	0	; () banked
 11882  00017A  6FCB               	movwf	ComputeMic@bufferLength& (0+255),b
 11883  00017C  EC9A  F040         	call	_ComputeMic	;wreg free
 11884  000180  C0C7  F0EA         	movff	?_ComputeMic,LORAWAN_RxDone@computedMic
 11885  000184  C0C8  F0EB         	movff	?_ComputeMic+1,LORAWAN_RxDone@computedMic+1
 11886  000188  C0C9  F0EC         	movff	?_ComputeMic+2,LORAWAN_RxDone@computedMic+2
 11887  00018C  C0CA  F0ED         	movff	?_ComputeMic+3,LORAWAN_RxDone@computedMic+3
 11888                           
 11889                           ;lorawan.c: 1154: extractedMic = ExtractMic (buffer, bufferLength);
 11890  000190  C1F5  F06B         	movff	LORAWAN_RxDone@buffer,ExtractMic@buffer
 11891  000194  C1F6  F06C         	movff	LORAWAN_RxDone@buffer+1,ExtractMic@buffer+1
 11892  000198  C1F7  F06D         	movff	LORAWAN_RxDone@bufferLength,ExtractMic@bufferLength
 11893  00019C  EC46  F042         	call	_ExtractMic	;wreg free
 11894  0001A0  C06B  F0E2         	movff	?_ExtractMic,LORAWAN_RxDone@extractedMic
 11895  0001A4  C06C  F0E3         	movff	?_ExtractMic+1,LORAWAN_RxDone@extractedMic+1
 11896  0001A8  C06D  F0E4         	movff	?_ExtractMic+2,LORAWAN_RxDone@extractedMic+2
 11897  0001AC  C06E  F0E5         	movff	?_ExtractMic+3,LORAWAN_RxDone@extractedMic+3
 11898                           
 11899                           ;lorawan.c: 1155: if (extractedMic != computedMic)
 11900  0001B0  0100               	movlb	0	; () banked
 11901  0001B2  51EA               	movf	LORAWAN_RxDone@computedMic& (0+255),w,b
 11902  0001B4  19E2               	xorwf	LORAWAN_RxDone@extractedMic& (0+255),w,b
 11903  0001B6  E10A               	bnz	u11290
 11904  0001B8  51EB               	movf	(LORAWAN_RxDone@computedMic+1)& (0+255),w,b
 11905  0001BA  19E3               	xorwf	(LORAWAN_RxDone@extractedMic+1)& (0+255),w,b
 11906  0001BC  E107               	bnz	u11290
 11907  0001BE  51EC               	movf	(LORAWAN_RxDone@computedMic+2)& (0+255),w,b
 11908  0001C0  19E4               	xorwf	(LORAWAN_RxDone@extractedMic+2)& (0+255),w,b
 11909  0001C2  E104               	bnz	u11290
 11910  0001C4  51ED               	movf	(LORAWAN_RxDone@computedMic+3)& (0+255),w,b
 11911  0001C6  19E5               	xorwf	(LORAWAN_RxDone@extractedMic+3)& (0+255),w,b
 11912  0001C8  B4D8               	btfsc	status,2,c
 11913  0001CA  D011               	goto	l1155
 11914  0001CC                     u11290:
 11915                           
 11916                           ; BSR set to: 0
 11917                           ;lorawan.c: 1156: {
 11918                           ;lorawan.c: 1157: if ((loRa.macStatus.macState == RX2_OPEN) || ((loRa.macStatus.macState
      +                           == RX1_OPEN) && (loRa.rx2DelayExpired)))
 11919  0001CC  0102               	movlb	2	; () banked
 11920  0001CE  5108               	movf	(_loRa+2)& (0+255),w,b
 11921  0001D0  0B0F               	andlw	15
 11922  0001D2  0A05               	xorlw	5
 11923  0001D4  B4D8               	btfsc	status,2,c
 11924  0001D6  D008               	goto	u11320
 11925                           
 11926                           ; BSR set to: 2
 11927  0001D8  5108               	movf	(_loRa+2)& (0+255),w,b
 11928  0001DA  0B0F               	andlw	15
 11929  0001DC  0A03               	xorlw	3
 11930  0001DE  A4D8               	btfss	status,2,c
 11931  0001E0  0012               	return	
 11932                           
 11933                           ; BSR set to: 2
 11934  0001E2  51F7               	movf	(_loRa+241)& (0+255),w,b
 11935  0001E4  B4D8               	btfsc	status,2,c
 11936  0001E6  0012               	return	
 11937  0001E8                     u11320:
 11938                           
 11939                           ; BSR set to: 2
 11940                           ;lorawan.c: 1158: {
 11941                           ;lorawan.c: 1159: SetJoinFailState();
 11942                           
 11943                           ; BSR set to: 2
 11944  0001E8  EC8E  F046         	call	_SetJoinFailState	;wreg free
 11945                           
 11946                           ;lorawan.c: 1160: }
 11947                           ;lorawan.c: 1162: return INVALID_PARAMETER;
 11948                           ;	Return value of _LORAWAN_RxDone is never used
 11949  0001EC  0012               	return	
 11950  0001EE                     l1155:
 11951                           
 11952                           ;lorawan.c: 1163: }
 11953                           ;lorawan.c: 1166: if (loRa.macStatus.macState == RX1_OPEN)
 11954  0001EE  0102               	movlb	2	; () banked
 11955  0001F0  5108               	movf	(_loRa+2)& (0+255),w,b
 11956  0001F2  0B0F               	andlw	15
 11957  0001F4  0A03               	xorlw	3
 11958  0001F6  A4D8               	btfss	status,2,c
 11959  0001F8  D003               	goto	l1160
 11960                           
 11961                           ; BSR set to: 2
 11962                           ;lorawan.c: 1167: {
 11963                           ;lorawan.c: 1168: SwTimerStop (loRa.joinAccept2TimerId);
 11964  0001FA  51E9               	movf	(_loRa+227)& (0+255),w,b
 11965  0001FC  EC1B  F048         	call	_SwTimerStop
 11966  000200                     l1160:
 11967                           
 11968                           ;lorawan.c: 1169: }
 11969                           ;lorawan.c: 1171: JoinAccept_t *joinAccept;
 11970                           ;lorawan.c: 1172: joinAccept = (JoinAccept_t*)buffer;
 11971  000200  C1F5  F0EE         	movff	LORAWAN_RxDone@buffer,LORAWAN_RxDone@joinAccept
 11972  000204  C1F6  F0EF         	movff	LORAWAN_RxDone@buffer+1,LORAWAN_RxDone@joinAccept+1
 11973                           
 11974                           ;lorawan.c: 1174: loRa.activationParameters.deviceAddress.value = joinAccept->members.de
      +                          viceAddress.value;
 11975  000208  0100               	movlb	0	; () banked
 11976  00020A  EE20 F007          	lfsr	2,7
 11977  00020E  51EE               	movf	LORAWAN_RxDone@joinAccept& (0+255),w,b
 11978  000210  26D9               	addwf	fsr2l,f,c
 11979  000212  51EF               	movf	(LORAWAN_RxDone@joinAccept+1)& (0+255),w,b
 11980  000214  22DA               	addwfc	fsr2h,f,c
 11981  000216  CFDE F224          	movff	postinc2,_loRa+30
 11982  00021A  CFDE F225          	movff	postinc2,_loRa+31
 11983  00021E  CFDE F226          	movff	postinc2,_loRa+32
 11984  000222  CFDE F227          	movff	postinc2,_loRa+33
 11985                           
 11986                           ; BSR set to: 0
 11987                           ;lorawan.c: 1176: UpdateReceiveDelays (joinAccept->members.rxDelay & 0x0F);
 11988  000226  EE20 F00C          	lfsr	2,12
 11989  00022A  51EE               	movf	LORAWAN_RxDone@joinAccept& (0+255),w,b
 11990  00022C  26D9               	addwf	fsr2l,f,c
 11991  00022E  51EF               	movf	(LORAWAN_RxDone@joinAccept+1)& (0+255),w,b
 11992  000230  22DA               	addwfc	fsr2h,f,c
 11993  000232  50DF               	movf	indf2,w,c
 11994  000234  0B0F               	andlw	15
 11995  000236  EC6B  F045         	call	_UpdateReceiveDelays
 11996                           
 11997                           ;lorawan.c: 1178: UpdateDLSettings(joinAccept->members.DLSettings.bits.rx2DataRate, join
      +                          Accept->members.DLSettings.bits.rx1DROffset);
 11998  00023A  0100               	movlb	0	; () banked
 11999  00023C  EE20 F00B          	lfsr	2,11
 12000  000240  51EE               	movf	LORAWAN_RxDone@joinAccept& (0+255),w,b
 12001  000242  26D9               	addwf	fsr2l,f,c
 12002  000244  51EF               	movf	(LORAWAN_RxDone@joinAccept+1)& (0+255),w,b
 12003  000246  22DA               	addwfc	fsr2h,f,c
 12004  000248  38DF               	swapf	223,w,c
 12005  00024A  0B07               	andlw	7
 12006  00024C  6F60               	movwf	UpdateDLSettings@dlRx1DrOffset& (0+255),b
 12007  00024E  EE20 F00B          	lfsr	2,11
 12008  000252  51EE               	movf	LORAWAN_RxDone@joinAccept& (0+255),w,b
 12009  000254  26D9               	addwf	fsr2l,f,c
 12010  000256  51EF               	movf	(LORAWAN_RxDone@joinAccept+1)& (0+255),w,b
 12011  000258  22DA               	addwfc	fsr2h,f,c
 12012  00025A  50DF               	movf	223,w,c
 12013  00025C  0B0F               	andlw	15
 12014  00025E  EC5D  F049         	call	_UpdateDLSettings
 12015                           
 12016                           ;lorawan.c: 1180: UpdateCfList (bufferLength, joinAccept);
 12017  000262  C0EE  F0A6         	movff	LORAWAN_RxDone@joinAccept,UpdateCfList@joinAccept
 12018  000266  C0EF  F0A7         	movff	LORAWAN_RxDone@joinAccept+1,UpdateCfList@joinAccept+1
 12019  00026A  0101               	movlb	1	; () banked
 12020  00026C  51F7               	movf	LORAWAN_RxDone@bufferLength& (0+255),w,b
 12021  00026E  EC4F  F023         	call	_UpdateCfList
 12022                           
 12023                           ;lorawan.c: 1182: ComputeSessionKeys (joinAccept);
 12024  000272  C0EE  F091         	movff	LORAWAN_RxDone@joinAccept,ComputeSessionKeys@joinAcceptBuffer
 12025  000276  C0EF  F092         	movff	LORAWAN_RxDone@joinAccept+1,ComputeSessionKeys@joinAcceptBuffer+1
 12026  00027A  ECC7  F03C         	call	_ComputeSessionKeys	;wreg free
 12027                           
 12028                           ;lorawan.c: 1184: UpdateJoinSuccessState(0);
 12029  00027E  0E00               	movlw	0
 12030  000280  6EE6               	movwf	postinc1,c
 12031  000282  EC04  F02E         	call	_UpdateJoinSuccessState	;wreg free
 12032                           
 12033                           ;lorawan.c: 1186: loRa.fCntUp.value = 0;
 12034  000286  0E00               	movlw	0
 12035  000288  0102               	movlb	2	; () banked
 12036  00028A  6F0C               	movwf	(_loRa+6)& (0+255),b
 12037  00028C  0E00               	movlw	0
 12038  00028E  6F0D               	movwf	(_loRa+7)& (0+255),b
 12039  000290  0E00               	movlw	0
 12040  000292  6F0E               	movwf	(_loRa+8)& (0+255),b
 12041  000294  0E00               	movlw	0
 12042  000296  6F0F               	movwf	(_loRa+9)& (0+255),b
 12043                           
 12044                           ; BSR set to: 2
 12045                           ;lorawan.c: 1187: loRa.fCntDown.value = 0;
 12046  000298  0E00               	movlw	0
 12047  00029A  6F10               	movwf	(_loRa+10)& (0+255),b
 12048  00029C  0E00               	movlw	0
 12049  00029E  6F11               	movwf	(_loRa+11)& (0+255),b
 12050  0002A0  0E00               	movlw	0
 12051  0002A2  6F12               	movwf	(_loRa+12)& (0+255),b
 12052  0002A4  0E00               	movlw	0
 12053  0002A6  6F13               	movwf	(_loRa+13)& (0+255),b
 12054                           
 12055                           ; BSR set to: 2
 12056                           ;lorawan.c: 1190: }
 12057                           
 12058                           ; BSR set to: 2
 12059                           ;lorawan.c: 1189: return OK;
 12060                           ;	Return value of _LORAWAN_RxDone is never used
 12061  0002A8  0012               	return	
 12062  0002AA                     l1149:
 12063                           
 12064                           ;lorawan.c: 1191: else if ( (mhdr.bits.mType == FRAME_TYPE_DATA_UNCONFIRMED_DOWN) || (mh
      +                          dr.bits.mType == FRAME_TYPE_DATA_CONFIRMED_DOWN) )
 12065                           
 12066                           ; BSR set to: 2
 12067  0002AA  0100               	movlb	0	; () banked
 12068  0002AC  39E1               	swapf	LORAWAN_RxDone@mhdr& (0+255),w,b
 12069  0002AE  32E8               	rrcf	wreg,f,c
 12070  0002B0  0B07               	andlw	7
 12071  0002B2  0A03               	xorlw	3
 12072  0002B4  B4D8               	btfsc	status,2,c
 12073  0002B6  D007               	goto	u11350
 12074                           
 12075                           ; BSR set to: 0
 12076  0002B8  39E1               	swapf	LORAWAN_RxDone@mhdr& (0+255),w,b
 12077  0002BA  32E8               	rrcf	wreg,f,c
 12078  0002BC  0B07               	andlw	7
 12079  0002BE  0A05               	xorlw	5
 12080  0002C0  A4D8               	btfss	status,2,c
 12081  0002C2  EF86  F006         	goto	l1162
 12082  0002C6                     u11350:
 12083                           
 12084                           ; BSR set to: 0
 12085                           ;lorawan.c: 1192: {
 12086                           ;lorawan.c: 1193: loRa.crtMacCmdIndex = 0;
 12087                           
 12088                           ; BSR set to: 0
 12089  0002C6  0E00               	movlw	0
 12090  0002C8  0102               	movlb	2	; () banked
 12091  0002CA  6FAD               	movwf	(_loRa+167)& (0+255),b
 12092                           
 12093                           ; BSR set to: 2
 12094                           ;lorawan.c: 1195: Hdr_t *hdr;
 12095                           ;lorawan.c: 1196: hdr=(Hdr_t*)buffer;
 12096  0002CC  C1F5  F0F1         	movff	LORAWAN_RxDone@buffer,LORAWAN_RxDone@hdr
 12097  0002D0  C1F6  F0F2         	movff	LORAWAN_RxDone@buffer+1,LORAWAN_RxDone@hdr+1
 12098                           
 12099                           ; BSR set to: 2
 12100                           ;lorawan.c: 1199: if ( (CLASS_C == loRa.deviceClass) && (hdr->members.devAddr.value == l
      +                          oRa.activationParameters.mcastDeviceAddress.value) && (1 == loRa.macStatus.mcastEnable) 
      +                          )
 12101  0002D4  0E02               	movlw	2
 12102  0002D6  1918               	xorwf	(_loRa+18)& (0+255),w,b
 12103  0002D8  A4D8               	btfss	status,2,c
 12104  0002DA  D210               	goto	l1165
 12105                           
 12106                           ; BSR set to: 2
 12107  0002DC  0100               	movlb	0	; () banked
 12108  0002DE  EE20 F001          	lfsr	2,1
 12109  0002E2  51F1               	movf	LORAWAN_RxDone@hdr& (0+255),w,b
 12110  0002E4  26D9               	addwf	fsr2l,f,c
 12111  0002E6  51F2               	movf	(LORAWAN_RxDone@hdr+1)& (0+255),w,b
 12112  0002E8  22DA               	addwfc	fsr2h,f,c
 12113  0002EA  0102               	movlb	2	; () banked
 12114  0002EC  5168               	movf	(_loRa+98)& (0+255),w,b
 12115  0002EE  18DE               	xorwf	postinc2,w,c
 12116  0002F0  E109               	bnz	u11371
 12117  0002F2  5169               	movf	(_loRa+99)& (0+255),w,b
 12118  0002F4  18DE               	xorwf	postinc2,w,c
 12119  0002F6  E106               	bnz	u11371
 12120  0002F8  516A               	movf	(_loRa+100)& (0+255),w,b
 12121  0002FA  18DE               	xorwf	postinc2,w,c
 12122  0002FC  E103               	bnz	u11371
 12123  0002FE  516B               	movf	(_loRa+101)& (0+255),w,b
 12124  000300  18DE               	xorwf	postinc2,w,c
 12125  000302  A4D8               	btfss	status,2,c
 12126  000304                     u11371:
 12127  000304  D1FB               	goto	l1165
 12128                           
 12129                           ; BSR set to: 2
 12130  000306  A50A               	btfss	(_loRa+4)& (0+255),2,b
 12131  000308  D1F9               	goto	l1165
 12132                           
 12133                           ; BSR set to: 2
 12134                           ;lorawan.c: 1200: {
 12135                           ;lorawan.c: 1202: if (0 == CheckMcastFlags(hdr))
 12136  00030A  C0F1  F060         	movff	LORAWAN_RxDone@hdr,CheckMcastFlags@hdr
 12137  00030E  C0F2  F061         	movff	LORAWAN_RxDone@hdr+1,CheckMcastFlags@hdr+1
 12138  000312  EC4C  F03D         	call	_CheckMcastFlags	;wreg free
 12139  000316  0900               	iorlw	0
 12140  000318  A4D8               	btfss	status,2,c
 12141  00031A  D008               	goto	l1166
 12142                           
 12143                           ;lorawan.c: 1203: {
 12144                           ;lorawan.c: 1204: loRa.macStatus.macState = CLASS_C_RX2_2_OPEN;
 12145  00031C  0102               	movlb	2	; () banked
 12146  00031E  5108               	movf	(_loRa+2)& (0+255),w,b
 12147  000320  0BF0               	andlw	-16
 12148  000322  0909               	iorlw	9
 12149  000324  6F08               	movwf	(_loRa+2)& (0+255),b
 12150                           
 12151                           ; BSR set to: 2
 12152                           ;lorawan.c: 1205: LORAWAN_EnterContinuousReceive();
 12153  000326  EC0C  F03E         	call	_LORAWAN_EnterContinuousReceive	;wreg free
 12154                           
 12155                           ;lorawan.c: 1206: return MCAST_MSG_ERROR;
 12156                           ;	Return value of _LORAWAN_RxDone is never used
 12157  00032A  0012               	return	
 12158  00032C                     l1166:
 12159                           
 12160                           ;lorawan.c: 1207: }
 12161                           ;lorawan.c: 1209: AssembleEncryptionBlock (1, hdr->members.fCnt, bufferLength - sizeof (
      +                          computedMic), 0x49, 1);
 12162  00032C  0100               	movlb	0	; () banked
 12163  00032E  EE20 F006          	lfsr	2,6
 12164  000332  51F1               	movf	LORAWAN_RxDone@hdr& (0+255),w,b
 12165  000334  26D9               	addwf	fsr2l,f,c
 12166  000336  51F2               	movf	(LORAWAN_RxDone@hdr+1)& (0+255),w,b
 12167  000338  22DA               	addwfc	fsr2h,f,c
 12168  00033A  CFDE F0DA          	movff	postinc2,??_LORAWAN_RxDone
 12169  00033E  CFDD F0DB          	movff	postdec2,??_LORAWAN_RxDone+1
 12170  000342  C0DA  F06B         	movff	??_LORAWAN_RxDone,AssembleEncryptionBlock@frameCounter
 12171  000346  C0DB  F06C         	movff	??_LORAWAN_RxDone+1,AssembleEncryptionBlock@frameCounter+1
 12172  00034A  6B6D               	clrf	(AssembleEncryptionBlock@frameCounter+2)& (0+255),b
 12173  00034C  6B6E               	clrf	(AssembleEncryptionBlock@frameCounter+3)& (0+255),b
 12174  00034E  0101               	movlb	1	; () banked
 12175  000350  51F7               	movf	LORAWAN_RxDone@bufferLength& (0+255),w,b
 12176  000352  0FFC               	addlw	252
 12177  000354  0100               	movlb	0	; () banked
 12178  000356  6F6F               	movwf	AssembleEncryptionBlock@blockId& (0+255),b
 12179  000358  0E49               	movlw	73
 12180  00035A  6F70               	movwf	AssembleEncryptionBlock@firstByte& (0+255),b
 12181  00035C  0E01               	movlw	1
 12182  00035E  6F71               	movwf	AssembleEncryptionBlock@multicastStatus& (0+255),b
 12183  000360  0E01               	movlw	1
 12184  000362  ECF0  F032         	call	_AssembleEncryptionBlock
 12185                           
 12186                           ;lorawan.c: 1210: memcpy (&radioBuffer[0], aesBuffer, sizeof (aesBuffer));
 12187  000366  0E80               	movlw	low _radioBuffer
 12188  000368  0100               	movlb	0	; () banked
 12189  00036A  6F60               	movwf	memcpy@d1& (0+255),b
 12190  00036C  0E05               	movlw	high _radioBuffer
 12191  00036E  6F61               	movwf	(memcpy@d1+1)& (0+255),b
 12192  000370  0EA2               	movlw	low _aesBuffer
 12193  000372  6F62               	movwf	memcpy@s1& (0+255),b
 12194  000374  0E03               	movlw	high _aesBuffer
 12195  000376  6F63               	movwf	(memcpy@s1+1)& (0+255),b
 12196  000378  0E00               	movlw	0
 12197  00037A  6F65               	movwf	(memcpy@n+1)& (0+255),b
 12198  00037C  0E10               	movlw	16
 12199  00037E  6F64               	movwf	memcpy@n& (0+255),b
 12200  000380  EC5D  F041         	call	_memcpy	;wreg free
 12201                           
 12202                           ;lorawan.c: 1211: memcpy (&radioBuffer[16], buffer, bufferLength-sizeof(computedMic));
 12203  000384  0E90               	movlw	low (_radioBuffer+16)
 12204  000386  0100               	movlb	0	; () banked
 12205  000388  6F60               	movwf	memcpy@d1& (0+255),b
 12206  00038A  0E05               	movlw	high (_radioBuffer+16)
 12207  00038C  6F61               	movwf	(memcpy@d1+1)& (0+255),b
 12208  00038E  C1F5  F062         	movff	LORAWAN_RxDone@buffer,memcpy@s1
 12209  000392  C1F6  F063         	movff	LORAWAN_RxDone@buffer+1,memcpy@s1+1
 12210  000396  0EFC               	movlw	252
 12211  000398  0101               	movlb	1	; () banked
 12212  00039A  25F7               	addwf	LORAWAN_RxDone@bufferLength& (0+255),w,b
 12213  00039C  0100               	movlb	0	; () banked
 12214  00039E  6F64               	movwf	memcpy@n& (0+255),b
 12215  0003A0  6B65               	clrf	(memcpy@n+1)& (0+255),b
 12216  0003A2  0EFF               	movlw	255
 12217  0003A4  2365               	addwfc	(memcpy@n+1)& (0+255),f,b
 12218  0003A6  EC5D  F041         	call	_memcpy	;wreg free
 12219                           
 12220                           ;lorawan.c: 1212: AESCmac(loRa.activationParameters.mcastNetworkSessionKey, aesBuffer, &
      +                          radioBuffer[0], bufferLength - sizeof(computedMic) + sizeof (aesBuffer));
 12221  0003AA  0E6C               	movlw	low (_loRa+102)
 12222  0003AC  0100               	movlb	0	; () banked
 12223  0003AE  6FB9               	movwf	AESCmac@key& (0+255),b
 12224  0003B0  0E02               	movlw	high (_loRa+102)
 12225  0003B2  6FBA               	movwf	(AESCmac@key+1)& (0+255),b
 12226  0003B4  0EA2               	movlw	low _aesBuffer
 12227  0003B6  6FBB               	movwf	AESCmac@output& (0+255),b
 12228  0003B8  0E03               	movlw	high _aesBuffer
 12229  0003BA  6FBC               	movwf	(AESCmac@output+1)& (0+255),b
 12230  0003BC  0E80               	movlw	low _radioBuffer
 12231  0003BE  6FBD               	movwf	AESCmac@input& (0+255),b
 12232  0003C0  0E05               	movlw	high _radioBuffer
 12233  0003C2  6FBE               	movwf	(AESCmac@input+1)& (0+255),b
 12234  0003C4  0101               	movlb	1	; () banked
 12235  0003C6  51F7               	movf	LORAWAN_RxDone@bufferLength& (0+255),w,b
 12236  0003C8  0F0C               	addlw	12
 12237  0003CA  0100               	movlb	0	; () banked
 12238  0003CC  6FBF               	movwf	AESCmac@size& (0+255),b
 12239  0003CE  EC1F  F011         	call	_AESCmac	;wreg free
 12240                           
 12241                           ;lorawan.c: 1214: memcpy(&computedMic, aesBuffer, sizeof(computedMic));
 12242  0003D2  0EEA               	movlw	low LORAWAN_RxDone@computedMic
 12243  0003D4  0100               	movlb	0	; () banked
 12244  0003D6  6F60               	movwf	memcpy@d1& (0+255),b
 12245  0003D8  0E00               	movlw	high LORAWAN_RxDone@computedMic
 12246  0003DA  6F61               	movwf	(memcpy@d1+1)& (0+255),b
 12247  0003DC  0EA2               	movlw	low _aesBuffer
 12248  0003DE  6F62               	movwf	memcpy@s1& (0+255),b
 12249  0003E0  0E03               	movlw	high _aesBuffer
 12250  0003E2  6F63               	movwf	(memcpy@s1+1)& (0+255),b
 12251  0003E4  0E00               	movlw	0
 12252  0003E6  6F65               	movwf	(memcpy@n+1)& (0+255),b
 12253  0003E8  0E04               	movlw	4
 12254  0003EA  6F64               	movwf	memcpy@n& (0+255),b
 12255  0003EC  EC5D  F041         	call	_memcpy	;wreg free
 12256                           
 12257                           ;lorawan.c: 1215: extractedMic = ExtractMic (&buffer[0], bufferLength);
 12258  0003F0  C1F5  F06B         	movff	LORAWAN_RxDone@buffer,ExtractMic@buffer
 12259  0003F4  C1F6  F06C         	movff	LORAWAN_RxDone@buffer+1,ExtractMic@buffer+1
 12260  0003F8  C1F7  F06D         	movff	LORAWAN_RxDone@bufferLength,ExtractMic@bufferLength
 12261  0003FC  EC46  F042         	call	_ExtractMic	;wreg free
 12262  000400  C06B  F0E2         	movff	?_ExtractMic,LORAWAN_RxDone@extractedMic
 12263  000404  C06C  F0E3         	movff	?_ExtractMic+1,LORAWAN_RxDone@extractedMic+1
 12264  000408  C06D  F0E4         	movff	?_ExtractMic+2,LORAWAN_RxDone@extractedMic+2
 12265  00040C  C06E  F0E5         	movff	?_ExtractMic+3,LORAWAN_RxDone@extractedMic+3
 12266                           
 12267                           ;lorawan.c: 1217: if (computedMic != extractedMic)
 12268  000410  0100               	movlb	0	; () banked
 12269  000412  51E2               	movf	LORAWAN_RxDone@extractedMic& (0+255),w,b
 12270  000414  19EA               	xorwf	LORAWAN_RxDone@computedMic& (0+255),w,b
 12271  000416  E10A               	bnz	u11400
 12272  000418  51E3               	movf	(LORAWAN_RxDone@extractedMic+1)& (0+255),w,b
 12273  00041A  19EB               	xorwf	(LORAWAN_RxDone@computedMic+1)& (0+255),w,b
 12274  00041C  E107               	bnz	u11400
 12275  00041E  51E4               	movf	(LORAWAN_RxDone@extractedMic+2)& (0+255),w,b
 12276  000420  19EC               	xorwf	(LORAWAN_RxDone@computedMic+2)& (0+255),w,b
 12277  000422  E104               	bnz	u11400
 12278  000424  51E5               	movf	(LORAWAN_RxDone@extractedMic+3)& (0+255),w,b
 12279  000426  19ED               	xorwf	(LORAWAN_RxDone@computedMic+3)& (0+255),w,b
 12280  000428  B4D8               	btfsc	status,2,c
 12281  00042A  D008               	goto	l1167
 12282  00042C                     u11400:
 12283                           
 12284                           ; BSR set to: 0
 12285                           ;lorawan.c: 1218: {
 12286                           ;lorawan.c: 1219: loRa.macStatus.macState = CLASS_C_RX2_2_OPEN;
 12287  00042C  0102               	movlb	2	; () banked
 12288  00042E  5108               	movf	(_loRa+2)& (0+255),w,b
 12289  000430  0BF0               	andlw	-16
 12290  000432  0909               	iorlw	9
 12291  000434  6F08               	movwf	(_loRa+2)& (0+255),b
 12292                           
 12293                           ; BSR set to: 2
 12294                           ;lorawan.c: 1220: LORAWAN_EnterContinuousReceive();
 12295  000436  EC0C  F03E         	call	_LORAWAN_EnterContinuousReceive	;wreg free
 12296                           
 12297                           ;lorawan.c: 1221: return MCAST_MSG_ERROR;
 12298                           ;	Return value of _LORAWAN_RxDone is never used
 12299  00043A  0012               	return	
 12300  00043C                     l1167:
 12301                           
 12302                           ;lorawan.c: 1222: }
 12303                           ;lorawan.c: 1224: if (hdr->members.fCnt >= loRa.fMcastCntDown.members.valueLow)
 12304  00043C  0100               	movlb	0	; () banked
 12305  00043E  EE20 F006          	lfsr	2,6
 12306  000442  51F1               	movf	LORAWAN_RxDone@hdr& (0+255),w,b
 12307  000444  26D9               	addwf	fsr2l,f,c
 12308  000446  51F2               	movf	(LORAWAN_RxDone@hdr+1)& (0+255),w,b
 12309  000448  22DA               	addwfc	fsr2h,f,c
 12310  00044A  0102               	movlb	2	; () banked
 12311  00044C  5114               	movf	(_loRa+14)& (0+255),w,b
 12312  00044E  5CDE               	subwf	postinc2,w,c
 12313  000450  5115               	movf	(_loRa+15)& (0+255),w,b
 12314  000452  58DE               	subwfb	postinc2,w,c
 12315  000454  A0D8               	btfss	status,0,c
 12316  000456  D050               	goto	l1168
 12317                           
 12318                           ; BSR set to: 2
 12319                           ;lorawan.c: 1225: {
 12320                           ;lorawan.c: 1226: if ( (hdr->members.fCnt - loRa.fMcastCntDown.members.valueLow) > loRa.
      +                          protocolParameters.maxMultiFcntGap )
 12321  000458  0100               	movlb	0	; () banked
 12322  00045A  EE20 F006          	lfsr	2,6
 12323  00045E  51F1               	movf	LORAWAN_RxDone@hdr& (0+255),w,b
 12324  000460  26D9               	addwf	fsr2l,f,c
 12325  000462  51F2               	movf	(LORAWAN_RxDone@hdr+1)& (0+255),w,b
 12326  000464  22DA               	addwfc	fsr2h,f,c
 12327  000466  CFDE F0DA          	movff	postinc2,??_LORAWAN_RxDone
 12328  00046A  CFDD F0DB          	movff	postdec2,??_LORAWAN_RxDone+1
 12329  00046E  EE22  F014         	lfsr	2,_loRa+14
 12330  000472  CFDE F0DC          	movff	postinc2,??_LORAWAN_RxDone+2
 12331  000476  CFDD F0DD          	movff	postdec2,??_LORAWAN_RxDone+3
 12332  00047A  1FDC               	comf	(??_LORAWAN_RxDone+2)& (0+255),f,b
 12333  00047C  1FDD               	comf	(??_LORAWAN_RxDone+3)& (0+255),f,b
 12334  00047E  4BDC               	infsnz	(??_LORAWAN_RxDone+2)& (0+255),f,b
 12335  000480  2BDD               	incf	(??_LORAWAN_RxDone+3)& (0+255),f,b
 12336  000482  51DA               	movf	??_LORAWAN_RxDone& (0+255),w,b
 12337  000484  27DC               	addwf	(??_LORAWAN_RxDone+2)& (0+255),f,b
 12338  000486  51DB               	movf	(??_LORAWAN_RxDone+1)& (0+255),w,b
 12339  000488  23DD               	addwfc	(??_LORAWAN_RxDone+3)& (0+255),f,b
 12340  00048A  51DC               	movf	(??_LORAWAN_RxDone+2)& (0+255),w,b
 12341  00048C  0102               	movlb	2	; () banked
 12342  00048E  5DA4               	subwf	(_loRa+158)& (0+255),w,b
 12343  000490  0100               	movlb	0	; () banked
 12344  000492  51DD               	movf	(??_LORAWAN_RxDone+3)& (0+255),w,b
 12345  000494  0102               	movlb	2	; () banked
 12346  000496  59A5               	subwfb	(_loRa+159)& (0+255),w,b
 12347  000498  B0D8               	btfsc	status,0,c
 12348  00049A  D022               	goto	l1169
 12349                           
 12350                           ; BSR set to: 2
 12351                           ;lorawan.c: 1227: {
 12352                           ;lorawan.c: 1228: if (rxPayload.RxAppData != (0))
 12353  00049C  0101               	movlb	1	; () banked
 12354  00049E  510C               	movf	_rxPayload& (0+255),w,b
 12355  0004A0  110D               	iorwf	(_rxPayload+1)& (0+255),w,b
 12356  0004A2  B4D8               	btfsc	status,2,c
 12357  0004A4  D015               	goto	u11449
 12358                           
 12359                           ; BSR set to: 1
 12360                           ;lorawan.c: 1229: {
 12361                           ;lorawan.c: 1230: rxPayload.RxAppData ((0), 0, MCAST_RE_KEYING_NEEDED);
 12362  0004A6  0E00               	movlw	0
 12363  0004A8  0100               	movlb	0	; () banked
 12364  0004AA  6F60               	movwf	RxData@pData& (0+255),b
 12365  0004AC  0E00               	movlw	0
 12366  0004AE  6F61               	movwf	(RxData@pData+1)& (0+255),b
 12367  0004B0  0E00               	movlw	0
 12368  0004B2  6F62               	movwf	RxData@dataLength& (0+255),b
 12369  0004B4  0E05               	movlw	5
 12370  0004B6  6F63               	movwf	RxData@status& (0+255),b
 12371  0004B8  D801               	call	u11448
 12372  0004BA  D00A               	goto	u11449
 12373  0004BC                     u11448:
 12374  0004BC  0005               	push	
 12375  0004BE  6EFA               	movwf	pclath,c
 12376  0004C0  0101               	movlb	1	; () banked
 12377  0004C2  510C               	movf	_rxPayload& (0+255),w,b
 12378  0004C4  6EFD               	movwf	tosl,c
 12379  0004C6  510D               	movf	(_rxPayload+1)& (0+255),w,b
 12380  0004C8  6EFE               	movwf	tosh,c
 12381  0004CA  6AFF               	clrf	tosu,c
 12382  0004CC  50FA               	movf	pclath,w,c
 12383  0004CE  0012               	return		;indir
 12384  0004D0                     u11449:
 12385                           
 12386                           ;lorawan.c: 1231: }
 12387                           ;lorawan.c: 1233: loRa.macStatus.macState = CLASS_C_RX2_2_OPEN;
 12388  0004D0  0102               	movlb	2	; () banked
 12389  0004D2  5108               	movf	(_loRa+2)& (0+255),w,b
 12390  0004D4  0BF0               	andlw	-16
 12391  0004D6  0909               	iorlw	9
 12392  0004D8  6F08               	movwf	(_loRa+2)& (0+255),b
 12393                           
 12394                           ; BSR set to: 2
 12395                           ;lorawan.c: 1234: LORAWAN_EnterContinuousReceive();
 12396  0004DA  EC0C  F03E         	call	_LORAWAN_EnterContinuousReceive	;wreg free
 12397                           
 12398                           ;lorawan.c: 1235: return MCAST_MSG_ERROR;
 12399                           ;	Return value of _LORAWAN_RxDone is never used
 12400  0004DE  0012               	return	
 12401  0004E0                     l1169:
 12402                           
 12403                           ;lorawan.c: 1237: else
 12404                           ;lorawan.c: 1238: {
 12405                           ;lorawan.c: 1239: loRa.fMcastCntDown.members.valueLow = hdr->members.fCnt;
 12406  0004E0  0100               	movlb	0	; () banked
 12407  0004E2  EE20 F006          	lfsr	2,6
 12408  0004E6  51F1               	movf	LORAWAN_RxDone@hdr& (0+255),w,b
 12409  0004E8  26D9               	addwf	fsr2l,f,c
 12410  0004EA  51F2               	movf	(LORAWAN_RxDone@hdr+1)& (0+255),w,b
 12411  0004EC  22DA               	addwfc	fsr2h,f,c
 12412  0004EE  CFDE F214          	movff	postinc2,_loRa+14
 12413  0004F2  CFDD F215          	movff	postdec2,_loRa+15
 12414                           
 12415                           ; BSR set to: 0
 12416                           ;lorawan.c: 1240: }
 12417                           ;lorawan.c: 1241: }
 12418  0004F6  D03A               	goto	l1174
 12419  0004F8                     l1168:
 12420                           
 12421                           ;lorawan.c: 1242: else
 12422                           ;lorawan.c: 1243: {
 12423                           ;lorawan.c: 1244: if ( (0 == hdr->members.fCnt) && (0xFFFF == loRa.fMcastCntDown.members
      +                          .valueLow) )
 12424                           
 12425                           ; BSR set to: 0
 12426  0004F8  0100               	movlb	0	; () banked
 12427  0004FA  EE20 F006          	lfsr	2,6
 12428  0004FE  51F1               	movf	LORAWAN_RxDone@hdr& (0+255),w,b
 12429  000500  26D9               	addwf	fsr2l,f,c
 12430  000502  51F2               	movf	(LORAWAN_RxDone@hdr+1)& (0+255),w,b
 12431  000504  22DA               	addwfc	fsr2h,f,c
 12432  000506  50DE               	movf	postinc2,w,c
 12433  000508  10DE               	iorwf	postinc2,w,c
 12434  00050A  A4D8               	btfss	status,2,c
 12435  00050C  D00D               	goto	l1173
 12436                           
 12437                           ; BSR set to: 0
 12438  00050E  0102               	movlb	2	; () banked
 12439  000510  2914               	incf	(_loRa+14)& (0+255),w,b
 12440  000512  E10A               	bnz	l11245
 12441  000514  2915               	incf	(_loRa+15)& (0+255),w,b
 12442  000516  A4D8               	btfss	status,2,c
 12443  000518  D007               	goto	l1173
 12444                           
 12445                           ; BSR set to: 2
 12446                           ;lorawan.c: 1245: {
 12447                           ;lorawan.c: 1246: loRa.fMcastCntDown.members.valueLow = 0;
 12448  00051A  0E00               	movlw	0
 12449  00051C  6F15               	movwf	(_loRa+15)& (0+255),b
 12450  00051E  0E00               	movlw	0
 12451  000520  6F14               	movwf	(_loRa+14)& (0+255),b
 12452                           
 12453                           ; BSR set to: 2
 12454                           ;lorawan.c: 1247: loRa.fMcastCntDown.members.valueHigh ++;
 12455  000522  4B16               	infsnz	(_loRa+16)& (0+255),f,b
 12456  000524  2B17               	incf	(_loRa+17)& (0+255),f,b
 12457                           
 12458                           ;lorawan.c: 1248: }
 12459  000526  D022               	goto	l1174
 12460  000528                     l1173:
 12461  000528                     l11245:
 12462                           
 12463                           ;lorawan.c: 1249: else
 12464                           ;lorawan.c: 1250: {
 12465                           ;lorawan.c: 1251: if (rxPayload.RxAppData != (0))
 12466  000528  0101               	movlb	1	; () banked
 12467  00052A  510C               	movf	_rxPayload& (0+255),w,b
 12468  00052C  110D               	iorwf	(_rxPayload+1)& (0+255),w,b
 12469  00052E  B4D8               	btfsc	status,2,c
 12470  000530  D015               	goto	u11489
 12471                           
 12472                           ; BSR set to: 1
 12473                           ;lorawan.c: 1252: {
 12474                           ;lorawan.c: 1253: rxPayload.RxAppData ((0), 0, MCAST_RE_KEYING_NEEDED);
 12475  000532  0E00               	movlw	0
 12476  000534  0100               	movlb	0	; () banked
 12477  000536  6F60               	movwf	RxData@pData& (0+255),b
 12478  000538  0E00               	movlw	0
 12479  00053A  6F61               	movwf	(RxData@pData+1)& (0+255),b
 12480  00053C  0E00               	movlw	0
 12481  00053E  6F62               	movwf	RxData@dataLength& (0+255),b
 12482  000540  0E05               	movlw	5
 12483  000542  6F63               	movwf	RxData@status& (0+255),b
 12484  000544  D801               	call	u11488
 12485  000546  D00A               	goto	u11489
 12486  000548                     u11488:
 12487  000548  0005               	push	
 12488  00054A  6EFA               	movwf	pclath,c
 12489  00054C  0101               	movlb	1	; () banked
 12490  00054E  510C               	movf	_rxPayload& (0+255),w,b
 12491  000550  6EFD               	movwf	tosl,c
 12492  000552  510D               	movf	(_rxPayload+1)& (0+255),w,b
 12493  000554  6EFE               	movwf	tosh,c
 12494  000556  6AFF               	clrf	tosu,c
 12495  000558  50FA               	movf	pclath,w,c
 12496  00055A  0012               	return		;indir
 12497  00055C                     u11489:
 12498                           
 12499                           ;lorawan.c: 1254: }
 12500                           ;lorawan.c: 1256: loRa.macStatus.macState = CLASS_C_RX2_2_OPEN;
 12501  00055C  0102               	movlb	2	; () banked
 12502  00055E  5108               	movf	(_loRa+2)& (0+255),w,b
 12503  000560  0BF0               	andlw	-16
 12504  000562  0909               	iorlw	9
 12505  000564  6F08               	movwf	(_loRa+2)& (0+255),b
 12506                           
 12507                           ; BSR set to: 2
 12508                           ;lorawan.c: 1257: LORAWAN_EnterContinuousReceive();
 12509  000566  EC0C  F03E         	call	_LORAWAN_EnterContinuousReceive	;wreg free
 12510                           
 12511                           ;lorawan.c: 1258: return MCAST_MSG_ERROR;
 12512                           ;	Return value of _LORAWAN_RxDone is never used
 12513  00056A  0012               	return	
 12514  00056C                     l1174:
 12515                           
 12516                           ;lorawan.c: 1259: }
 12517                           ;lorawan.c: 1260: }
 12518                           ;lorawan.c: 1262: if (loRa.fMcastCntDown.value == (4294967295UL))
 12519  00056C  0102               	movlb	2	; () banked
 12520  00056E  2914               	incf	(_loRa+14)& (0+255),w,b
 12521  000570  E129               	bnz	l11267
 12522  000572  2915               	incf	(_loRa+15)& (0+255),w,b
 12523  000574  E127               	bnz	l11267
 12524  000576  2916               	incf	(_loRa+16)& (0+255),w,b
 12525  000578  E125               	bnz	l11267
 12526  00057A  2917               	incf	(_loRa+17)& (0+255),w,b
 12527  00057C  A4D8               	btfss	status,2,c
 12528  00057E  D022               	goto	l1176
 12529                           
 12530                           ; BSR set to: 2
 12531                           ;lorawan.c: 1263: {
 12532                           ;lorawan.c: 1264: if (rxPayload.RxAppData != (0))
 12533  000580  0101               	movlb	1	; () banked
 12534  000582  510C               	movf	_rxPayload& (0+255),w,b
 12535  000584  110D               	iorwf	(_rxPayload+1)& (0+255),w,b
 12536  000586  B4D8               	btfsc	status,2,c
 12537  000588  D015               	goto	u11519
 12538                           
 12539                           ; BSR set to: 1
 12540                           ;lorawan.c: 1265: {
 12541                           ;lorawan.c: 1266: rxPayload.RxAppData ((0), 0, MCAST_RE_KEYING_NEEDED);
 12542  00058A  0E00               	movlw	0
 12543  00058C  0100               	movlb	0	; () banked
 12544  00058E  6F60               	movwf	RxData@pData& (0+255),b
 12545  000590  0E00               	movlw	0
 12546  000592  6F61               	movwf	(RxData@pData+1)& (0+255),b
 12547  000594  0E00               	movlw	0
 12548  000596  6F62               	movwf	RxData@dataLength& (0+255),b
 12549  000598  0E05               	movlw	5
 12550  00059A  6F63               	movwf	RxData@status& (0+255),b
 12551  00059C  D801               	call	u11518
 12552  00059E  D00A               	goto	u11519
 12553  0005A0                     u11518:
 12554  0005A0  0005               	push	
 12555  0005A2  6EFA               	movwf	pclath,c
 12556  0005A4  0101               	movlb	1	; () banked
 12557  0005A6  510C               	movf	_rxPayload& (0+255),w,b
 12558  0005A8  6EFD               	movwf	tosl,c
 12559  0005AA  510D               	movf	(_rxPayload+1)& (0+255),w,b
 12560  0005AC  6EFE               	movwf	tosh,c
 12561  0005AE  6AFF               	clrf	tosu,c
 12562  0005B0  50FA               	movf	pclath,w,c
 12563  0005B2  0012               	return		;indir
 12564  0005B4                     u11519:
 12565                           
 12566                           ;lorawan.c: 1267: }
 12567                           ;lorawan.c: 1269: loRa.macStatus.macState = CLASS_C_RX2_2_OPEN;
 12568  0005B4  0102               	movlb	2	; () banked
 12569  0005B6  5108               	movf	(_loRa+2)& (0+255),w,b
 12570  0005B8  0BF0               	andlw	-16
 12571  0005BA  0909               	iorlw	9
 12572  0005BC  6F08               	movwf	(_loRa+2)& (0+255),b
 12573                           
 12574                           ; BSR set to: 2
 12575                           ;lorawan.c: 1270: LORAWAN_EnterContinuousReceive();
 12576  0005BE  EC0C  F03E         	call	_LORAWAN_EnterContinuousReceive	;wreg free
 12577                           
 12578                           ;lorawan.c: 1271: return FRAME_COUNTER_ERROR_REJOIN_NEEDED;
 12579                           ;	Return value of _LORAWAN_RxDone is never used
 12580  0005C2  0012               	return	
 12581  0005C4                     l1176:
 12582  0005C4                     l11267:
 12583                           
 12584                           ;lorawan.c: 1272: }
 12585                           ;lorawan.c: 1274: if (CLASS_C_RX2_1_OPEN == loRa.macStatus.macState)
 12586  0005C4  0102               	movlb	2	; () banked
 12587  0005C6  5108               	movf	(_loRa+2)& (0+255),w,b
 12588  0005C8  0B0F               	andlw	15
 12589  0005CA  0A08               	xorlw	8
 12590  0005CC  A4D8               	btfss	status,2,c
 12591  0005CE  D008               	goto	l1178
 12592                           
 12593                           ; BSR set to: 2
 12594                           ;lorawan.c: 1275: {
 12595                           ;lorawan.c: 1276: SwTimerStop (loRa.receiveWindow1TimerId);
 12596  0005D0  51EA               	movf	(_loRa+228)& (0+255),w,b
 12597  0005D2  EC1B  F048         	call	_SwTimerStop
 12598                           
 12599                           ;lorawan.c: 1277: SwTimerStop (loRa.receiveWindow2TimerId);
 12600  0005D6  0102               	movlb	2	; () banked
 12601  0005D8  51EB               	movf	(_loRa+229)& (0+255),w,b
 12602  0005DA  EC1B  F048         	call	_SwTimerStop
 12603                           
 12604                           ;lorawan.c: 1278: }
 12605  0005DE  D009               	goto	l1180
 12606  0005E0                     l1178:
 12607                           
 12608                           ;lorawan.c: 1279: else if (RX1_OPEN == loRa.macStatus.macState)
 12609  0005E0  0102               	movlb	2	; () banked
 12610  0005E2  5108               	movf	(_loRa+2)& (0+255),w,b
 12611  0005E4  0B0F               	andlw	15
 12612  0005E6  0A03               	xorlw	3
 12613  0005E8  A4D8               	btfss	status,2,c
 12614  0005EA  D003               	goto	l1180
 12615                           
 12616                           ; BSR set to: 2
 12617                           ;lorawan.c: 1280: {
 12618                           ;lorawan.c: 1281: SwTimerStop (loRa.receiveWindow2TimerId);
 12619  0005EC  51EB               	movf	(_loRa+229)& (0+255),w,b
 12620  0005EE  EC1B  F048         	call	_SwTimerStop
 12621  0005F2                     l1180:
 12622                           
 12623                           ;lorawan.c: 1282: }
 12624                           ;lorawan.c: 1284: buffer = buffer + 8;
 12625  0005F2  0E08               	movlw	8
 12626  0005F4  0101               	movlb	1	; () banked
 12627  0005F6  25F5               	addwf	LORAWAN_RxDone@buffer& (0+255),w,b
 12628  0005F8  6FF5               	movwf	LORAWAN_RxDone@buffer& (0+255),b
 12629  0005FA  0E00               	movlw	0
 12630  0005FC  21F6               	addwfc	(LORAWAN_RxDone@buffer+1)& (0+255),w,b
 12631  0005FE  6FF6               	movwf	(LORAWAN_RxDone@buffer+1)& (0+255),b
 12632                           
 12633                           ; BSR set to: 1
 12634                           ;lorawan.c: 1286: if ( (sizeof(extractedMic) + hdr->members.fCtrl.fOptsLen + 8) != buffe
      +                          rLength)
 12635  000600  51F7               	movf	LORAWAN_RxDone@bufferLength& (0+255),w,b
 12636  000602  0100               	movlb	0	; () banked
 12637  000604  6FDA               	movwf	??_LORAWAN_RxDone& (0+255),b
 12638  000606  6BDB               	clrf	(??_LORAWAN_RxDone+1)& (0+255),b
 12639  000608  EE20 F005          	lfsr	2,5
 12640  00060C  51F1               	movf	LORAWAN_RxDone@hdr& (0+255),w,b
 12641  00060E  26D9               	addwf	fsr2l,f,c
 12642  000610  51F2               	movf	(LORAWAN_RxDone@hdr+1)& (0+255),w,b
 12643  000612  22DA               	addwfc	fsr2h,f,c
 12644  000614  50DF               	movf	223,w,c
 12645  000616  0B0F               	andlw	15
 12646  000618  6FDC               	movwf	(??_LORAWAN_RxDone+2)& (0+255),b
 12647  00061A  6BDD               	clrf	(??_LORAWAN_RxDone+3)& (0+255),b
 12648  00061C  0E0C               	movlw	12
 12649  00061E  27DC               	addwf	(??_LORAWAN_RxDone+2)& (0+255),f,b
 12650  000620  0E00               	movlw	0
 12651  000622  23DD               	addwfc	(??_LORAWAN_RxDone+3)& (0+255),f,b
 12652  000624  51DA               	movf	??_LORAWAN_RxDone& (0+255),w,b
 12653  000626  19DC               	xorwf	(??_LORAWAN_RxDone+2)& (0+255),w,b
 12654  000628  E104               	bnz	u11540
 12655  00062A  51DB               	movf	(??_LORAWAN_RxDone+1)& (0+255),w,b
 12656  00062C  19DD               	xorwf	(??_LORAWAN_RxDone+3)& (0+255),w,b
 12657  00062E  B4D8               	btfsc	status,2,c
 12658  000630  D037               	goto	l1181
 12659  000632                     u11540:
 12660                           
 12661                           ; BSR set to: 0
 12662                           ;lorawan.c: 1287: {
 12663                           ;lorawan.c: 1288: fPort = *(buffer++);
 12664  000632  C1F5  FFD9         	movff	LORAWAN_RxDone@buffer,fsr2l
 12665  000636  C1F6  FFDA         	movff	LORAWAN_RxDone@buffer+1,fsr2h
 12666  00063A  50DF               	movf	indf2,w,c
 12667  00063C  6FDF               	movwf	LORAWAN_RxDone@fPort& (0+255),b
 12668                           
 12669                           ; BSR set to: 0
 12670  00063E  0101               	movlb	1	; () banked
 12671  000640  4BF5               	infsnz	LORAWAN_RxDone@buffer& (0+255),f,b
 12672  000642  2BF6               	incf	(LORAWAN_RxDone@buffer+1)& (0+255),f,b
 12673                           
 12674                           ; BSR set to: 1
 12675                           ;lorawan.c: 1290: frmPayloadLength = bufferLength - 8 - sizeof (extractedMic);
 12676  000644  51F7               	movf	LORAWAN_RxDone@bufferLength& (0+255),w,b
 12677  000646  0FF4               	addlw	244
 12678  000648  0100               	movlb	0	; () banked
 12679  00064A  6FF0               	movwf	LORAWAN_RxDone@frmPayloadLength& (0+255),b
 12680                           
 12681                           ; BSR set to: 0
 12682                           ;lorawan.c: 1291: bufferIndex = 16 + 9;
 12683  00064C  0E19               	movlw	25
 12684  00064E  6FE6               	movwf	LORAWAN_RxDone@bufferIndex& (0+255),b
 12685                           
 12686                           ; BSR set to: 0
 12687                           ;lorawan.c: 1293: EncryptFRMPayload (buffer, frmPayloadLength - 1, 1, loRa.fMcastCntDown
      +                          .value, loRa.activationParameters.mcastApplicationSessionKey, bufferIndex, radioBuffer, 
      +                          1);
 12688  000650  C1F5  F091         	movff	LORAWAN_RxDone@buffer,EncryptFRMPayload@buffer
 12689  000654  C1F6  F092         	movff	LORAWAN_RxDone@buffer+1,EncryptFRMPayload@buffer+1
 12690  000658  05F0               	decf	LORAWAN_RxDone@frmPayloadLength& (0+255),w,b
 12691  00065A  6F93               	movwf	EncryptFRMPayload@bufferLength& (0+255),b
 12692  00065C  0E01               	movlw	1
 12693  00065E  6F94               	movwf	EncryptFRMPayload@dir& (0+255),b
 12694  000660  C214  F095         	movff	_loRa+14,EncryptFRMPayload@frameCounter
 12695  000664  C215  F096         	movff	_loRa+15,EncryptFRMPayload@frameCounter+1
 12696  000668  C216  F097         	movff	_loRa+16,EncryptFRMPayload@frameCounter+2
 12697  00066C  C217  F098         	movff	_loRa+17,EncryptFRMPayload@frameCounter+3
 12698  000670  0E7C               	movlw	low (_loRa+118)
 12699  000672  6F99               	movwf	EncryptFRMPayload@key& (0+255),b
 12700  000674  0E02               	movlw	high (_loRa+118)
 12701  000676  6F9A               	movwf	(EncryptFRMPayload@key+1)& (0+255),b
 12702  000678  C0E6  F09B         	movff	LORAWAN_RxDone@bufferIndex,EncryptFRMPayload@macBufferIndex
 12703  00067C  0E80               	movlw	low _radioBuffer
 12704  00067E  6F9C               	movwf	EncryptFRMPayload@bufferToBeEncrypted& (0+255),b
 12705  000680  0E05               	movlw	high _radioBuffer
 12706  000682  6F9D               	movwf	(EncryptFRMPayload@bufferToBeEncrypted+1)& (0+255),b
 12707  000684  0E01               	movlw	1
 12708  000686  6F9E               	movwf	EncryptFRMPayload@multicastStatus& (0+255),b
 12709  000688  ECB0  F027         	call	_EncryptFRMPayload	;wreg free
 12710                           
 12711                           ;lorawan.c: 1294: packet = buffer - 1;
 12712  00068C  0EFF               	movlw	255
 12713  00068E  0101               	movlb	1	; () banked
 12714  000690  25F5               	addwf	LORAWAN_RxDone@buffer& (0+255),w,b
 12715  000692  0100               	movlb	0	; () banked
 12716  000694  6FE8               	movwf	LORAWAN_RxDone@packet& (0+255),b
 12717  000696  0EFF               	movlw	255
 12718  000698  0101               	movlb	1	; () banked
 12719  00069A  21F6               	addwfc	(LORAWAN_RxDone@buffer+1)& (0+255),w,b
 12720  00069C  0100               	movlb	0	; () banked
 12721  00069E  D005               	goto	L7
 12722  0006A0                     l1181:
 12723                           
 12724                           ; BSR set to: 0
 12725                           ;lorawan.c: 1296: else
 12726                           ;lorawan.c: 1297: {
 12727                           ;lorawan.c: 1298: frmPayloadLength = 0;
 12728                           
 12729                           ; BSR set to: 0
 12730  0006A0  0E00               	movlw	0
 12731  0006A2  6FF0               	movwf	LORAWAN_RxDone@frmPayloadLength& (0+255),b
 12732                           
 12733                           ; BSR set to: 0
 12734                           ;lorawan.c: 1299: packet = (0);
 12735  0006A4  0E00               	movlw	0
 12736  0006A6  6FE8               	movwf	LORAWAN_RxDone@packet& (0+255),b
 12737  0006A8  0E00               	movlw	0
 12738  0006AA                     L7:
 12739  0006AA  6FE9               	movwf	(LORAWAN_RxDone@packet+1)& (0+255),b
 12740                           
 12741                           ; BSR set to: 0
 12742                           ;lorawan.c: 1300: }
 12743                           ;lorawan.c: 1302: loRa.macStatus.rxDone = 1;
 12744                           
 12745                           ; BSR set to: 0
 12746  0006AC  0102               	movlb	2	; () banked
 12747  0006AE  8309               	bsf	(_loRa+3)& (0+255),1,b
 12748                           
 12749                           ; BSR set to: 2
 12750                           ;lorawan.c: 1303: loRa.macStatus.macState = IDLE;
 12751  0006B0  9108               	bcf	(_loRa+2)& (0+255),0,b
 12752  0006B2  9308               	bcf	(_loRa+2)& (0+255),1,b
 12753  0006B4  9508               	bcf	(_loRa+2)& (0+255),2,b
 12754  0006B6  9708               	bcf	(_loRa+2)& (0+255),3,b
 12755                           
 12756                           ; BSR set to: 2
 12757                           ;lorawan.c: 1305: if (rxPayload.RxAppData != (0))
 12758  0006B8  0101               	movlb	1	; () banked
 12759  0006BA  510C               	movf	_rxPayload& (0+255),w,b
 12760  0006BC  110D               	iorwf	(_rxPayload+1)& (0+255),w,b
 12761  0006BE  B4D8               	btfsc	status,2,c
 12762  0006C0  D015               	goto	u11569
 12763                           
 12764                           ; BSR set to: 1
 12765                           ;lorawan.c: 1306: {
 12766                           ;lorawan.c: 1307: rxPayload.RxAppData (packet, frmPayloadLength, MAC_OK);
 12767  0006C2  C0E8  F060         	movff	LORAWAN_RxDone@packet,RxData@pData
 12768  0006C6  C0E9  F061         	movff	LORAWAN_RxDone@packet+1,RxData@pData+1
 12769  0006CA  C0F0  F062         	movff	LORAWAN_RxDone@frmPayloadLength,RxData@dataLength
 12770  0006CE  0E01               	movlw	1
 12771  0006D0  0100               	movlb	0	; () banked
 12772  0006D2  6F63               	movwf	RxData@status& (0+255),b
 12773  0006D4  D801               	call	u11568
 12774  0006D6  D00A               	goto	u11569
 12775  0006D8                     u11568:
 12776  0006D8  0005               	push	
 12777  0006DA  6EFA               	movwf	pclath,c
 12778  0006DC  0101               	movlb	1	; () banked
 12779  0006DE  510C               	movf	_rxPayload& (0+255),w,b
 12780  0006E0  6EFD               	movwf	tosl,c
 12781  0006E2  510D               	movf	(_rxPayload+1)& (0+255),w,b
 12782  0006E4  6EFE               	movwf	tosh,c
 12783  0006E6  6AFF               	clrf	tosu,c
 12784  0006E8  50FA               	movf	pclath,w,c
 12785  0006EA  0012               	return		;indir
 12786  0006EC                     u11569:
 12787                           
 12788                           ;lorawan.c: 1308: }
 12789                           ;lorawan.c: 1310: loRa.macStatus.macState = CLASS_C_RX2_2_OPEN;
 12790  0006EC  0102               	movlb	2	; () banked
 12791  0006EE  5108               	movf	(_loRa+2)& (0+255),w,b
 12792  0006F0  0BF0               	andlw	-16
 12793  0006F2  0909               	iorlw	9
 12794  0006F4  6F08               	movwf	(_loRa+2)& (0+255),b
 12795                           
 12796                           ; BSR set to: 2
 12797                           ;lorawan.c: 1311: LORAWAN_EnterContinuousReceive();
 12798  0006F6  EC0C  F03E         	call	_LORAWAN_EnterContinuousReceive	;wreg free
 12799                           
 12800                           ;lorawan.c: 1312: return MAC_OK;
 12801                           ;	Return value of _LORAWAN_RxDone is never used
 12802  0006FA  0012               	return	
 12803  0006FC                     l1165:
 12804                           
 12805                           ;lorawan.c: 1313: }
 12806                           ;lorawan.c: 1316: if (hdr->members.devAddr.value != loRa.activationParameters.deviceAddr
      +                          ess.value)
 12807  0006FC  0100               	movlb	0	; () banked
 12808  0006FE  EE20 F001          	lfsr	2,1
 12809  000702  51F1               	movf	LORAWAN_RxDone@hdr& (0+255),w,b
 12810  000704  26D9               	addwf	fsr2l,f,c
 12811  000706  51F2               	movf	(LORAWAN_RxDone@hdr+1)& (0+255),w,b
 12812  000708  22DA               	addwfc	fsr2h,f,c
 12813  00070A  0102               	movlb	2	; () banked
 12814  00070C  5124               	movf	(_loRa+30)& (0+255),w,b
 12815  00070E  18DE               	xorwf	postinc2,w,c
 12816  000710  E10A               	bnz	u11570
 12817  000712  5125               	movf	(_loRa+31)& (0+255),w,b
 12818  000714  18DE               	xorwf	postinc2,w,c
 12819  000716  E107               	bnz	u11570
 12820  000718  5126               	movf	(_loRa+32)& (0+255),w,b
 12821  00071A  18DE               	xorwf	postinc2,w,c
 12822  00071C  E104               	bnz	u11570
 12823  00071E  5127               	movf	(_loRa+33)& (0+255),w,b
 12824  000720  18DE               	xorwf	postinc2,w,c
 12825  000722  B4D8               	btfsc	status,2,c
 12826  000724  D00E               	goto	l1184
 12827  000726                     u11570:
 12828                           
 12829                           ; BSR set to: 2
 12830                           ;lorawan.c: 1317: {
 12831                           ;lorawan.c: 1318: SetReceptionNotOkState();
 12832  000726  ECCD  F03D         	call	_SetReceptionNotOkState	;wreg free
 12833                           
 12834                           ;lorawan.c: 1319: if (CLASS_C == loRa.deviceClass)
 12835  00072A  0E02               	movlw	2
 12836  00072C  0102               	movlb	2	; () banked
 12837  00072E  1918               	xorwf	(_loRa+18)& (0+255),w,b
 12838  000730  A4D8               	btfss	status,2,c
 12839  000732  0012               	return	
 12840                           
 12841                           ; BSR set to: 2
 12842                           ;lorawan.c: 1320: {
 12843                           ;lorawan.c: 1321: loRa.macStatus.macState = CLASS_C_RX2_2_OPEN;
 12844  000734  5108               	movf	(_loRa+2)& (0+255),w,b
 12845  000736  0BF0               	andlw	-16
 12846  000738  0909               	iorlw	9
 12847  00073A  6F08               	movwf	(_loRa+2)& (0+255),b
 12848                           
 12849                           ; BSR set to: 2
 12850                           ;lorawan.c: 1322: LORAWAN_EnterContinuousReceive();
 12851  00073C  EC0C  F03E         	call	_LORAWAN_EnterContinuousReceive	;wreg free
 12852                           
 12853                           ;lorawan.c: 1323: }
 12854                           ;lorawan.c: 1324: return INVALID_PARAMETER;
 12855                           ;	Return value of _LORAWAN_RxDone is never used
 12856  000740  0012               	return	
 12857  000742                     l1184:
 12858                           
 12859                           ;lorawan.c: 1325: }
 12860                           ;lorawan.c: 1327: AssembleEncryptionBlock (1, hdr->members.fCnt, bufferLength - sizeof (
      +                          computedMic), 0x49, 0);
 12861  000742  0100               	movlb	0	; () banked
 12862  000744  EE20 F006          	lfsr	2,6
 12863  000748  51F1               	movf	LORAWAN_RxDone@hdr& (0+255),w,b
 12864  00074A  26D9               	addwf	fsr2l,f,c
 12865  00074C  51F2               	movf	(LORAWAN_RxDone@hdr+1)& (0+255),w,b
 12866  00074E  22DA               	addwfc	fsr2h,f,c
 12867  000750  CFDE F0DA          	movff	postinc2,??_LORAWAN_RxDone
 12868  000754  CFDD F0DB          	movff	postdec2,??_LORAWAN_RxDone+1
 12869  000758  C0DA  F06B         	movff	??_LORAWAN_RxDone,AssembleEncryptionBlock@frameCounter
 12870  00075C  C0DB  F06C         	movff	??_LORAWAN_RxDone+1,AssembleEncryptionBlock@frameCounter+1
 12871  000760  6B6D               	clrf	(AssembleEncryptionBlock@frameCounter+2)& (0+255),b
 12872  000762  6B6E               	clrf	(AssembleEncryptionBlock@frameCounter+3)& (0+255),b
 12873  000764  0101               	movlb	1	; () banked
 12874  000766  51F7               	movf	LORAWAN_RxDone@bufferLength& (0+255),w,b
 12875  000768  0FFC               	addlw	252
 12876  00076A  0100               	movlb	0	; () banked
 12877  00076C  6F6F               	movwf	AssembleEncryptionBlock@blockId& (0+255),b
 12878  00076E  0E49               	movlw	73
 12879  000770  6F70               	movwf	AssembleEncryptionBlock@firstByte& (0+255),b
 12880  000772  0E00               	movlw	0
 12881  000774  6F71               	movwf	AssembleEncryptionBlock@multicastStatus& (0+255),b
 12882  000776  0E01               	movlw	1
 12883  000778  ECF0  F032         	call	_AssembleEncryptionBlock
 12884                           
 12885                           ;lorawan.c: 1328: memcpy (&radioBuffer[0], aesBuffer, sizeof (aesBuffer));
 12886  00077C  0E80               	movlw	low _radioBuffer
 12887  00077E  0100               	movlb	0	; () banked
 12888  000780  6F60               	movwf	memcpy@d1& (0+255),b
 12889  000782  0E05               	movlw	high _radioBuffer
 12890  000784  6F61               	movwf	(memcpy@d1+1)& (0+255),b
 12891  000786  0EA2               	movlw	low _aesBuffer
 12892  000788  6F62               	movwf	memcpy@s1& (0+255),b
 12893  00078A  0E03               	movlw	high _aesBuffer
 12894  00078C  6F63               	movwf	(memcpy@s1+1)& (0+255),b
 12895  00078E  0E00               	movlw	0
 12896  000790  6F65               	movwf	(memcpy@n+1)& (0+255),b
 12897  000792  0E10               	movlw	16
 12898  000794  6F64               	movwf	memcpy@n& (0+255),b
 12899  000796  EC5D  F041         	call	_memcpy	;wreg free
 12900                           
 12901                           ;lorawan.c: 1329: memcpy (&radioBuffer[16], buffer, bufferLength-sizeof(computedMic));
 12902  00079A  0E90               	movlw	low (_radioBuffer+16)
 12903  00079C  0100               	movlb	0	; () banked
 12904  00079E  6F60               	movwf	memcpy@d1& (0+255),b
 12905  0007A0  0E05               	movlw	high (_radioBuffer+16)
 12906  0007A2  6F61               	movwf	(memcpy@d1+1)& (0+255),b
 12907  0007A4  C1F5  F062         	movff	LORAWAN_RxDone@buffer,memcpy@s1
 12908  0007A8  C1F6  F063         	movff	LORAWAN_RxDone@buffer+1,memcpy@s1+1
 12909  0007AC  0EFC               	movlw	252
 12910  0007AE  0101               	movlb	1	; () banked
 12911  0007B0  25F7               	addwf	LORAWAN_RxDone@bufferLength& (0+255),w,b
 12912  0007B2  0100               	movlb	0	; () banked
 12913  0007B4  6F64               	movwf	memcpy@n& (0+255),b
 12914  0007B6  6B65               	clrf	(memcpy@n+1)& (0+255),b
 12915  0007B8  0EFF               	movlw	255
 12916  0007BA  2365               	addwfc	(memcpy@n+1)& (0+255),f,b
 12917  0007BC  EC5D  F041         	call	_memcpy	;wreg free
 12918                           
 12919                           ;lorawan.c: 1330: AESCmac(loRa.activationParameters.networkSessionKey, aesBuffer, &radio
      +                          Buffer[0], bufferLength - sizeof(computedMic) + sizeof (aesBuffer));
 12920  0007C0  0E28               	movlw	low (_loRa+34)
 12921  0007C2  0100               	movlb	0	; () banked
 12922  0007C4  6FB9               	movwf	AESCmac@key& (0+255),b
 12923  0007C6  0E02               	movlw	high (_loRa+34)
 12924  0007C8  6FBA               	movwf	(AESCmac@key+1)& (0+255),b
 12925  0007CA  0EA2               	movlw	low _aesBuffer
 12926  0007CC  6FBB               	movwf	AESCmac@output& (0+255),b
 12927  0007CE  0E03               	movlw	high _aesBuffer
 12928  0007D0  6FBC               	movwf	(AESCmac@output+1)& (0+255),b
 12929  0007D2  0E80               	movlw	low _radioBuffer
 12930  0007D4  6FBD               	movwf	AESCmac@input& (0+255),b
 12931  0007D6  0E05               	movlw	high _radioBuffer
 12932  0007D8  6FBE               	movwf	(AESCmac@input+1)& (0+255),b
 12933  0007DA  0101               	movlb	1	; () banked
 12934  0007DC  51F7               	movf	LORAWAN_RxDone@bufferLength& (0+255),w,b
 12935  0007DE  0F0C               	addlw	12
 12936  0007E0  0100               	movlb	0	; () banked
 12937  0007E2  6FBF               	movwf	AESCmac@size& (0+255),b
 12938  0007E4  EC1F  F011         	call	_AESCmac	;wreg free
 12939                           
 12940                           ;lorawan.c: 1332: memcpy(&computedMic, aesBuffer, sizeof(computedMic));
 12941  0007E8  0EEA               	movlw	low LORAWAN_RxDone@computedMic
 12942  0007EA  0100               	movlb	0	; () banked
 12943  0007EC  6F60               	movwf	memcpy@d1& (0+255),b
 12944  0007EE  0E00               	movlw	high LORAWAN_RxDone@computedMic
 12945  0007F0  6F61               	movwf	(memcpy@d1+1)& (0+255),b
 12946  0007F2  0EA2               	movlw	low _aesBuffer
 12947  0007F4  6F62               	movwf	memcpy@s1& (0+255),b
 12948  0007F6  0E03               	movlw	high _aesBuffer
 12949  0007F8  6F63               	movwf	(memcpy@s1+1)& (0+255),b
 12950  0007FA  0E00               	movlw	0
 12951  0007FC  6F65               	movwf	(memcpy@n+1)& (0+255),b
 12952  0007FE  0E04               	movlw	4
 12953  000800  6F64               	movwf	memcpy@n& (0+255),b
 12954  000802  EC5D  F041         	call	_memcpy	;wreg free
 12955                           
 12956                           ;lorawan.c: 1333: extractedMic = ExtractMic (&buffer[0], bufferLength);
 12957  000806  C1F5  F06B         	movff	LORAWAN_RxDone@buffer,ExtractMic@buffer
 12958  00080A  C1F6  F06C         	movff	LORAWAN_RxDone@buffer+1,ExtractMic@buffer+1
 12959  00080E  C1F7  F06D         	movff	LORAWAN_RxDone@bufferLength,ExtractMic@bufferLength
 12960  000812  EC46  F042         	call	_ExtractMic	;wreg free
 12961  000816  C06B  F0E2         	movff	?_ExtractMic,LORAWAN_RxDone@extractedMic
 12962  00081A  C06C  F0E3         	movff	?_ExtractMic+1,LORAWAN_RxDone@extractedMic+1
 12963  00081E  C06D  F0E4         	movff	?_ExtractMic+2,LORAWAN_RxDone@extractedMic+2
 12964  000822  C06E  F0E5         	movff	?_ExtractMic+3,LORAWAN_RxDone@extractedMic+3
 12965                           
 12966                           ;lorawan.c: 1336: if (computedMic != extractedMic)
 12967  000826  0100               	movlb	0	; () banked
 12968  000828  51E2               	movf	LORAWAN_RxDone@extractedMic& (0+255),w,b
 12969  00082A  19EA               	xorwf	LORAWAN_RxDone@computedMic& (0+255),w,b
 12970  00082C  E10A               	bnz	u11590
 12971  00082E  51E3               	movf	(LORAWAN_RxDone@extractedMic+1)& (0+255),w,b
 12972  000830  19EB               	xorwf	(LORAWAN_RxDone@computedMic+1)& (0+255),w,b
 12973  000832  E107               	bnz	u11590
 12974  000834  51E4               	movf	(LORAWAN_RxDone@extractedMic+2)& (0+255),w,b
 12975  000836  19EC               	xorwf	(LORAWAN_RxDone@computedMic+2)& (0+255),w,b
 12976  000838  E104               	bnz	u11590
 12977  00083A  51E5               	movf	(LORAWAN_RxDone@extractedMic+3)& (0+255),w,b
 12978  00083C  19ED               	xorwf	(LORAWAN_RxDone@computedMic+3)& (0+255),w,b
 12979  00083E  B4D8               	btfsc	status,2,c
 12980  000840  D00E               	goto	l1186
 12981  000842                     u11590:
 12982                           
 12983                           ; BSR set to: 0
 12984                           ;lorawan.c: 1337: {
 12985                           ;lorawan.c: 1338: SetReceptionNotOkState();
 12986  000842  ECCD  F03D         	call	_SetReceptionNotOkState	;wreg free
 12987                           
 12988                           ;lorawan.c: 1339: if (CLASS_C == loRa.deviceClass)
 12989  000846  0E02               	movlw	2
 12990  000848  0102               	movlb	2	; () banked
 12991  00084A  1918               	xorwf	(_loRa+18)& (0+255),w,b
 12992  00084C  A4D8               	btfss	status,2,c
 12993  00084E  0012               	return	
 12994                           
 12995                           ; BSR set to: 2
 12996                           ;lorawan.c: 1340: {
 12997                           ;lorawan.c: 1341: loRa.macStatus.macState = CLASS_C_RX2_2_OPEN;
 12998  000850  5108               	movf	(_loRa+2)& (0+255),w,b
 12999  000852  0BF0               	andlw	-16
 13000  000854  0909               	iorlw	9
 13001  000856  6F08               	movwf	(_loRa+2)& (0+255),b
 13002                           
 13003                           ; BSR set to: 2
 13004                           ;lorawan.c: 1342: LORAWAN_EnterContinuousReceive();
 13005  000858  EC0C  F03E         	call	_LORAWAN_EnterContinuousReceive	;wreg free
 13006                           
 13007                           ;lorawan.c: 1343: }
 13008                           ;lorawan.c: 1344: return INVALID_PARAMETER;
 13009                           ;	Return value of _LORAWAN_RxDone is never used
 13010  00085C  0012               	return	
 13011  00085E                     l1186:
 13012                           
 13013                           ;lorawan.c: 1345: }
 13014                           ;lorawan.c: 1348: if (hdr->members.fCnt >= loRa.fCntDown.members.valueLow)
 13015  00085E  0100               	movlb	0	; () banked
 13016  000860  EE20 F006          	lfsr	2,6
 13017  000864  51F1               	movf	LORAWAN_RxDone@hdr& (0+255),w,b
 13018  000866  26D9               	addwf	fsr2l,f,c
 13019  000868  51F2               	movf	(LORAWAN_RxDone@hdr+1)& (0+255),w,b
 13020  00086A  22DA               	addwfc	fsr2h,f,c
 13021  00086C  0102               	movlb	2	; () banked
 13022  00086E  5110               	movf	(_loRa+10)& (0+255),w,b
 13023  000870  5CDE               	subwf	postinc2,w,c
 13024  000872  5111               	movf	(_loRa+11)& (0+255),w,b
 13025  000874  58DE               	subwfb	postinc2,w,c
 13026  000876  A0D8               	btfss	status,0,c
 13027  000878  D05D               	goto	l1188
 13028                           
 13029                           ; BSR set to: 2
 13030                           ;lorawan.c: 1349: {
 13031                           ;lorawan.c: 1350: if ((hdr->members.fCnt - loRa.fCntDown.members.valueLow) > loRa.protoc
      +                          olParameters.maxFcntGap)
 13032  00087A  0100               	movlb	0	; () banked
 13033  00087C  EE20 F006          	lfsr	2,6
 13034  000880  51F1               	movf	LORAWAN_RxDone@hdr& (0+255),w,b
 13035  000882  26D9               	addwf	fsr2l,f,c
 13036  000884  51F2               	movf	(LORAWAN_RxDone@hdr+1)& (0+255),w,b
 13037  000886  22DA               	addwfc	fsr2h,f,c
 13038  000888  CFDE F0DA          	movff	postinc2,??_LORAWAN_RxDone
 13039  00088C  CFDD F0DB          	movff	postdec2,??_LORAWAN_RxDone+1
 13040  000890  EE22  F010         	lfsr	2,_loRa+10
 13041  000894  CFDE F0DC          	movff	postinc2,??_LORAWAN_RxDone+2
 13042  000898  CFDD F0DD          	movff	postdec2,??_LORAWAN_RxDone+3
 13043  00089C  1FDC               	comf	(??_LORAWAN_RxDone+2)& (0+255),f,b
 13044  00089E  1FDD               	comf	(??_LORAWAN_RxDone+3)& (0+255),f,b
 13045  0008A0  4BDC               	infsnz	(??_LORAWAN_RxDone+2)& (0+255),f,b
 13046  0008A2  2BDD               	incf	(??_LORAWAN_RxDone+3)& (0+255),f,b
 13047  0008A4  51DA               	movf	??_LORAWAN_RxDone& (0+255),w,b
 13048  0008A6  27DC               	addwf	(??_LORAWAN_RxDone+2)& (0+255),f,b
 13049  0008A8  51DB               	movf	(??_LORAWAN_RxDone+1)& (0+255),w,b
 13050  0008AA  23DD               	addwfc	(??_LORAWAN_RxDone+3)& (0+255),f,b
 13051  0008AC  51DC               	movf	(??_LORAWAN_RxDone+2)& (0+255),w,b
 13052  0008AE  0102               	movlb	2	; () banked
 13053  0008B0  5DA2               	subwf	(_loRa+156)& (0+255),w,b
 13054  0008B2  0100               	movlb	0	; () banked
 13055  0008B4  51DD               	movf	(??_LORAWAN_RxDone+3)& (0+255),w,b
 13056  0008B6  0102               	movlb	2	; () banked
 13057  0008B8  59A3               	subwfb	(_loRa+157)& (0+255),w,b
 13058  0008BA  B0D8               	btfsc	status,0,c
 13059  0008BC  D02F               	goto	l1189
 13060                           
 13061                           ; BSR set to: 2
 13062                           ;lorawan.c: 1351: {
 13063                           ;lorawan.c: 1352: loRa.lorawanMacStatus.ackRequiredFromNextDownlinkMessage = 0;
 13064  0008BE  9106               	bcf	_loRa& (0+255),0,b
 13065                           
 13066                           ;lorawan.c: 1353: loRa.macStatus.macState = IDLE;
 13067  0008C0  9108               	bcf	(_loRa+2)& (0+255),0,b
 13068  0008C2  9308               	bcf	(_loRa+2)& (0+255),1,b
 13069  0008C4  9508               	bcf	(_loRa+2)& (0+255),2,b
 13070  0008C6  9708               	bcf	(_loRa+2)& (0+255),3,b
 13071                           
 13072                           ; BSR set to: 2
 13073                           ;lorawan.c: 1354: if (rxPayload.RxAppData != (0))
 13074  0008C8  0101               	movlb	1	; () banked
 13075  0008CA  510C               	movf	_rxPayload& (0+255),w,b
 13076  0008CC  110D               	iorwf	(_rxPayload+1)& (0+255),w,b
 13077  0008CE  B4D8               	btfsc	status,2,c
 13078  0008D0  D017               	goto	u11649
 13079                           
 13080                           ; BSR set to: 1
 13081                           ;lorawan.c: 1355: {
 13082                           ;lorawan.c: 1356: loRa.lorawanMacStatus.synchronization = 0;
 13083  0008D2  0102               	movlb	2	; () banked
 13084  0008D4  9B06               	bcf	_loRa& (0+255),5,b
 13085                           
 13086                           ; BSR set to: 2
 13087                           ;lorawan.c: 1357: rxPayload.RxAppData ((0), 0, MAC_NOT_OK);
 13088  0008D6  0E00               	movlw	0
 13089  0008D8  0100               	movlb	0	; () banked
 13090  0008DA  6F60               	movwf	RxData@pData& (0+255),b
 13091  0008DC  0E00               	movlw	0
 13092  0008DE  6F61               	movwf	(RxData@pData+1)& (0+255),b
 13093  0008E0  0E00               	movlw	0
 13094  0008E2  6F62               	movwf	RxData@dataLength& (0+255),b
 13095  0008E4  0E00               	movlw	0
 13096  0008E6  6F63               	movwf	RxData@status& (0+255),b
 13097  0008E8  D801               	call	u11648
 13098  0008EA  D00A               	goto	u11649
 13099  0008EC                     u11648:
 13100  0008EC  0005               	push	
 13101  0008EE  6EFA               	movwf	pclath,c
 13102  0008F0  0101               	movlb	1	; () banked
 13103  0008F2  510C               	movf	_rxPayload& (0+255),w,b
 13104  0008F4  6EFD               	movwf	tosl,c
 13105  0008F6  510D               	movf	(_rxPayload+1)& (0+255),w,b
 13106  0008F8  6EFE               	movwf	tosh,c
 13107  0008FA  6AFF               	clrf	tosu,c
 13108  0008FC  50FA               	movf	pclath,w,c
 13109  0008FE  0012               	return		;indir
 13110  000900                     u11649:
 13111                           
 13112                           ;lorawan.c: 1358: }
 13113                           ;lorawan.c: 1359: loRa.macStatus.rxDone = 0;
 13114  000900  0102               	movlb	2	; () banked
 13115  000902  9309               	bcf	(_loRa+3)& (0+255),1,b
 13116                           
 13117                           ; BSR set to: 2
 13118                           ;lorawan.c: 1362: loRa.macStatus.rejoinNeeded = 1;
 13119  000904  830A               	bsf	(_loRa+4)& (0+255),1,b
 13120                           
 13121                           ; BSR set to: 2
 13122                           ;lorawan.c: 1363: if (CLASS_C == loRa.deviceClass)
 13123  000906  0E02               	movlw	2
 13124  000908  1918               	xorwf	(_loRa+18)& (0+255),w,b
 13125  00090A  A4D8               	btfss	status,2,c
 13126  00090C  0012               	return	
 13127                           
 13128                           ; BSR set to: 2
 13129                           ;lorawan.c: 1364: {
 13130                           ;lorawan.c: 1365: loRa.macStatus.macState = CLASS_C_RX2_2_OPEN;
 13131  00090E  5108               	movf	(_loRa+2)& (0+255),w,b
 13132  000910  0BF0               	andlw	-16
 13133  000912  0909               	iorlw	9
 13134  000914  6F08               	movwf	(_loRa+2)& (0+255),b
 13135                           
 13136                           ; BSR set to: 2
 13137                           ;lorawan.c: 1366: LORAWAN_EnterContinuousReceive();
 13138  000916  EC0C  F03E         	call	_LORAWAN_EnterContinuousReceive	;wreg free
 13139                           
 13140                           ;lorawan.c: 1367: }
 13141                           ;lorawan.c: 1368: return FRAME_COUNTER_ERROR_REJOIN_NEEDED;
 13142                           ;	Return value of _LORAWAN_RxDone is never used
 13143  00091A  0012               	return	
 13144  00091C                     l1189:
 13145                           
 13146                           ;lorawan.c: 1370: else
 13147                           ;lorawan.c: 1371: {
 13148                           ;lorawan.c: 1372: loRa.fCntDown.members.valueLow = hdr->members.fCnt;
 13149  00091C  0100               	movlb	0	; () banked
 13150  00091E  EE20 F006          	lfsr	2,6
 13151  000922  51F1               	movf	LORAWAN_RxDone@hdr& (0+255),w,b
 13152  000924  26D9               	addwf	fsr2l,f,c
 13153  000926  51F2               	movf	(LORAWAN_RxDone@hdr+1)& (0+255),w,b
 13154  000928  22DA               	addwfc	fsr2h,f,c
 13155  00092A  CFDE F210          	movff	postinc2,_loRa+10
 13156  00092E  CFDD F211          	movff	postdec2,_loRa+11
 13157                           
 13158                           ; BSR set to: 0
 13159                           ;lorawan.c: 1373: }
 13160                           ;lorawan.c: 1374: }
 13161  000932  D02E               	goto	l1195
 13162  000934                     l1188:
 13163                           
 13164                           ;lorawan.c: 1375: else
 13165                           ;lorawan.c: 1376: {
 13166                           ;lorawan.c: 1377: if((hdr->members.fCnt == 0) && (loRa.fCntDown.members.valueLow == 0xFF
      +                          FF))
 13167                           
 13168                           ; BSR set to: 0
 13169  000934  0100               	movlb	0	; () banked
 13170  000936  EE20 F006          	lfsr	2,6
 13171  00093A  51F1               	movf	LORAWAN_RxDone@hdr& (0+255),w,b
 13172  00093C  26D9               	addwf	fsr2l,f,c
 13173  00093E  51F2               	movf	(LORAWAN_RxDone@hdr+1)& (0+255),w,b
 13174  000940  22DA               	addwfc	fsr2h,f,c
 13175  000942  50DE               	movf	postinc2,w,c
 13176  000944  10DE               	iorwf	postinc2,w,c
 13177  000946  A4D8               	btfss	status,2,c
 13178  000948  D015               	goto	l1194
 13179                           
 13180                           ; BSR set to: 0
 13181  00094A  0102               	movlb	2	; () banked
 13182  00094C  2910               	incf	(_loRa+10)& (0+255),w,b
 13183  00094E  E112               	bnz	l11379
 13184  000950  2911               	incf	(_loRa+11)& (0+255),w,b
 13185  000952  A4D8               	btfss	status,2,c
 13186  000954  D00F               	goto	l1194
 13187                           
 13188                           ; BSR set to: 2
 13189                           ;lorawan.c: 1378: {
 13190                           ;lorawan.c: 1380: loRa.fCntDown.members.valueLow = hdr->members.fCnt;
 13191  000956  0100               	movlb	0	; () banked
 13192  000958  EE20 F006          	lfsr	2,6
 13193  00095C  51F1               	movf	LORAWAN_RxDone@hdr& (0+255),w,b
 13194  00095E  26D9               	addwf	fsr2l,f,c
 13195  000960  51F2               	movf	(LORAWAN_RxDone@hdr+1)& (0+255),w,b
 13196  000962  22DA               	addwfc	fsr2h,f,c
 13197  000964  CFDE F210          	movff	postinc2,_loRa+10
 13198  000968  CFDD F211          	movff	postdec2,_loRa+11
 13199                           
 13200                           ; BSR set to: 0
 13201                           ;lorawan.c: 1381: loRa.fCntDown.members.valueHigh ++;
 13202  00096C  0102               	movlb	2	; () banked
 13203  00096E  4B12               	infsnz	(_loRa+12)& (0+255),f,b
 13204  000970  2B13               	incf	(_loRa+13)& (0+255),f,b
 13205                           
 13206                           ;lorawan.c: 1382: }
 13207  000972  D00E               	goto	l1195
 13208  000974                     l1194:
 13209  000974                     l11379:
 13210                           
 13211                           ;lorawan.c: 1383: else
 13212                           ;lorawan.c: 1384: {
 13213                           ;lorawan.c: 1385: SetReceptionNotOkState();
 13214  000974  ECCD  F03D         	call	_SetReceptionNotOkState	;wreg free
 13215                           
 13216                           ;lorawan.c: 1386: if (CLASS_C == loRa.deviceClass)
 13217  000978  0E02               	movlw	2
 13218  00097A  0102               	movlb	2	; () banked
 13219  00097C  1918               	xorwf	(_loRa+18)& (0+255),w,b
 13220  00097E  A4D8               	btfss	status,2,c
 13221  000980  0012               	return	
 13222                           
 13223                           ; BSR set to: 2
 13224                           ;lorawan.c: 1387: {
 13225                           ;lorawan.c: 1388: loRa.macStatus.macState = CLASS_C_RX2_2_OPEN;
 13226  000982  5108               	movf	(_loRa+2)& (0+255),w,b
 13227  000984  0BF0               	andlw	-16
 13228  000986  0909               	iorlw	9
 13229  000988  6F08               	movwf	(_loRa+2)& (0+255),b
 13230                           
 13231                           ; BSR set to: 2
 13232                           ;lorawan.c: 1389: LORAWAN_EnterContinuousReceive();
 13233  00098A  EC0C  F03E         	call	_LORAWAN_EnterContinuousReceive	;wreg free
 13234                           
 13235                           ;lorawan.c: 1390: }
 13236                           ;lorawan.c: 1392: return INVALID_PARAMETER;
 13237                           ;	Return value of _LORAWAN_RxDone is never used
 13238  00098E  0012               	return	
 13239  000990                     l1195:
 13240                           
 13241                           ;lorawan.c: 1393: }
 13242                           ;lorawan.c: 1394: }
 13243                           ;lorawan.c: 1396: if (loRa.fCntDown.value == (4294967295UL))
 13244  000990  0102               	movlb	2	; () banked
 13245  000992  2910               	incf	(_loRa+10)& (0+255),w,b
 13246  000994  E113               	bnz	l11401
 13247  000996  2911               	incf	(_loRa+11)& (0+255),w,b
 13248  000998  E111               	bnz	l11401
 13249  00099A  2912               	incf	(_loRa+12)& (0+255),w,b
 13250  00099C  E10F               	bnz	l11401
 13251  00099E  2913               	incf	(_loRa+13)& (0+255),w,b
 13252  0009A0  A4D8               	btfss	status,2,c
 13253  0009A2  D00C               	goto	l1197
 13254                           
 13255                           ; BSR set to: 2
 13256                           ;lorawan.c: 1397: {
 13257                           ;lorawan.c: 1400: loRa.macStatus.rejoinNeeded = 1;
 13258  0009A4  830A               	bsf	(_loRa+4)& (0+255),1,b
 13259                           
 13260                           ; BSR set to: 2
 13261                           ;lorawan.c: 1401: if (CLASS_C == loRa.deviceClass)
 13262  0009A6  0E02               	movlw	2
 13263  0009A8  1918               	xorwf	(_loRa+18)& (0+255),w,b
 13264  0009AA  A4D8               	btfss	status,2,c
 13265  0009AC  0012               	return	
 13266                           
 13267                           ; BSR set to: 2
 13268                           ;lorawan.c: 1402: {
 13269                           ;lorawan.c: 1403: loRa.macStatus.macState = CLASS_C_RX2_2_OPEN;
 13270  0009AE  5108               	movf	(_loRa+2)& (0+255),w,b
 13271  0009B0  0BF0               	andlw	-16
 13272  0009B2  0909               	iorlw	9
 13273  0009B4  6F08               	movwf	(_loRa+2)& (0+255),b
 13274                           
 13275                           ; BSR set to: 2
 13276                           ;lorawan.c: 1404: LORAWAN_EnterContinuousReceive();
 13277  0009B6  EC0C  F03E         	call	_LORAWAN_EnterContinuousReceive	;wreg free
 13278                           
 13279                           ;lorawan.c: 1405: }
 13280                           ;lorawan.c: 1406: return FRAME_COUNTER_ERROR_REJOIN_NEEDED;
 13281                           ;	Return value of _LORAWAN_RxDone is never used
 13282  0009BA  0012               	return	
 13283  0009BC                     l1197:
 13284  0009BC                     l11401:
 13285                           
 13286                           ;lorawan.c: 1407: }
 13287                           ;lorawan.c: 1410: if (loRa.macStatus.macState == RX1_OPEN)
 13288  0009BC  0102               	movlb	2	; () banked
 13289  0009BE  5108               	movf	(_loRa+2)& (0+255),w,b
 13290  0009C0  0B0F               	andlw	15
 13291  0009C2  0A03               	xorlw	3
 13292  0009C4  A4D8               	btfss	status,2,c
 13293  0009C6  D003               	goto	l1199
 13294                           
 13295                           ; BSR set to: 2
 13296                           ;lorawan.c: 1411: {
 13297                           ;lorawan.c: 1412: SwTimerStop (loRa.receiveWindow2TimerId);
 13298  0009C8  51EB               	movf	(_loRa+229)& (0+255),w,b
 13299  0009CA  EC1B  F048         	call	_SwTimerStop
 13300  0009CE                     l1199:
 13301                           
 13302                           ;lorawan.c: 1413: }
 13303                           ;lorawan.c: 1415: loRa.counterRepetitionsUnconfirmedUplink = 1;
 13304  0009CE  0E01               	movlw	1
 13305  0009D0  0102               	movlb	2	; () banked
 13306  0009D2  6FDE               	movwf	(_loRa+216)& (0+255),b
 13307                           
 13308                           ; BSR set to: 2
 13309                           ;lorawan.c: 1417: CheckFlags (hdr);
 13310  0009D4  C0F1  F060         	movff	LORAWAN_RxDone@hdr,CheckFlags@hdr
 13311  0009D8  C0F2  F061         	movff	LORAWAN_RxDone@hdr+1,CheckFlags@hdr+1
 13312  0009DC  ECBC  F041         	call	_CheckFlags	;wreg free
 13313                           
 13314                           ;lorawan.c: 1419: if (hdr->members.fCtrl.fOptsLen != 0)
 13315  0009E0  0100               	movlb	0	; () banked
 13316  0009E2  EE20 F005          	lfsr	2,5
 13317  0009E6  51F1               	movf	LORAWAN_RxDone@hdr& (0+255),w,b
 13318  0009E8  26D9               	addwf	fsr2l,f,c
 13319  0009EA  51F2               	movf	(LORAWAN_RxDone@hdr+1)& (0+255),w,b
 13320  0009EC  22DA               	addwfc	fsr2h,f,c
 13321  0009EE  50DF               	movf	223,w,c
 13322  0009F0  0B0F               	andlw	15
 13323  0009F2  0900               	iorlw	0
 13324  0009F4  B4D8               	btfsc	status,2,c
 13325  0009F6  D016               	goto	l1200
 13326                           
 13327                           ; BSR set to: 0
 13328                           ;lorawan.c: 1420: {
 13329                           ;lorawan.c: 1421: buffer = MacExecuteCommands(hdr->members.MacCommands, hdr->members.fCt
      +                          rl.fOptsLen);
 13330  0009F8  0E08               	movlw	8
 13331  0009FA  25F1               	addwf	LORAWAN_RxDone@hdr& (0+255),w,b
 13332  0009FC  6FB0               	movwf	MacExecuteCommands@buffer& (0+255),b
 13333  0009FE  0E00               	movlw	0
 13334  000A00  21F2               	addwfc	(LORAWAN_RxDone@hdr+1)& (0+255),w,b
 13335  000A02  6FB1               	movwf	(MacExecuteCommands@buffer+1)& (0+255),b
 13336  000A04  EE20 F005          	lfsr	2,5
 13337  000A08  51F1               	movf	LORAWAN_RxDone@hdr& (0+255),w,b
 13338  000A0A  26D9               	addwf	fsr2l,f,c
 13339  000A0C  51F2               	movf	(LORAWAN_RxDone@hdr+1)& (0+255),w,b
 13340  000A0E  22DA               	addwfc	fsr2h,f,c
 13341  000A10  50DF               	movf	223,w,c
 13342  000A12  0B0F               	andlw	15
 13343  000A14  6FB2               	movwf	MacExecuteCommands@fOptsLen& (0+255),b
 13344  000A16  EC75  F019         	call	_MacExecuteCommands	;wreg free
 13345  000A1A  C0B0  F1F5         	movff	?_MacExecuteCommands,LORAWAN_RxDone@buffer
 13346  000A1E  C0B1  F1F6         	movff	?_MacExecuteCommands+1,LORAWAN_RxDone@buffer+1
 13347                           
 13348                           ;lorawan.c: 1422: }
 13349  000A22  D007               	goto	l1201
 13350  000A24                     l1200:
 13351                           
 13352                           ;lorawan.c: 1423: else
 13353                           ;lorawan.c: 1424: {
 13354                           ;lorawan.c: 1425: buffer = buffer + 8;
 13355  000A24  0E08               	movlw	8
 13356  000A26  0101               	movlb	1	; () banked
 13357  000A28  25F5               	addwf	LORAWAN_RxDone@buffer& (0+255),w,b
 13358  000A2A  6FF5               	movwf	LORAWAN_RxDone@buffer& (0+255),b
 13359  000A2C  0E00               	movlw	0
 13360  000A2E  21F6               	addwfc	(LORAWAN_RxDone@buffer+1)& (0+255),w,b
 13361  000A30  6FF6               	movwf	(LORAWAN_RxDone@buffer+1)& (0+255),b
 13362  000A32                     l1201:
 13363                           
 13364                           ;lorawan.c: 1426: }
 13365                           ;lorawan.c: 1427: if ( (sizeof(extractedMic) + hdr->members.fCtrl.fOptsLen + 8) != buffe
      +                          rLength)
 13366                           
 13367                           ; BSR set to: 1
 13368  000A32  0101               	movlb	1	; () banked
 13369  000A34  51F7               	movf	LORAWAN_RxDone@bufferLength& (0+255),w,b
 13370  000A36  0100               	movlb	0	; () banked
 13371  000A38  6FDA               	movwf	??_LORAWAN_RxDone& (0+255),b
 13372  000A3A  6BDB               	clrf	(??_LORAWAN_RxDone+1)& (0+255),b
 13373  000A3C  EE20 F005          	lfsr	2,5
 13374  000A40  51F1               	movf	LORAWAN_RxDone@hdr& (0+255),w,b
 13375  000A42  26D9               	addwf	fsr2l,f,c
 13376  000A44  51F2               	movf	(LORAWAN_RxDone@hdr+1)& (0+255),w,b
 13377  000A46  22DA               	addwfc	fsr2h,f,c
 13378  000A48  50DF               	movf	223,w,c
 13379  000A4A  0B0F               	andlw	15
 13380  000A4C  6FDC               	movwf	(??_LORAWAN_RxDone+2)& (0+255),b
 13381  000A4E  6BDD               	clrf	(??_LORAWAN_RxDone+3)& (0+255),b
 13382  000A50  0E0C               	movlw	12
 13383  000A52  27DC               	addwf	(??_LORAWAN_RxDone+2)& (0+255),f,b
 13384  000A54  0E00               	movlw	0
 13385  000A56  23DD               	addwfc	(??_LORAWAN_RxDone+3)& (0+255),f,b
 13386  000A58  51DA               	movf	??_LORAWAN_RxDone& (0+255),w,b
 13387  000A5A  19DC               	xorwf	(??_LORAWAN_RxDone+2)& (0+255),w,b
 13388  000A5C  E104               	bnz	u11730
 13389  000A5E  51DB               	movf	(??_LORAWAN_RxDone+1)& (0+255),w,b
 13390  000A60  19DD               	xorwf	(??_LORAWAN_RxDone+3)& (0+255),w,b
 13391  000A62  B4D8               	btfsc	status,2,c
 13392  000A64  D098               	goto	l1202
 13393  000A66                     u11730:
 13394                           
 13395                           ; BSR set to: 0
 13396                           ;lorawan.c: 1428: {
 13397                           ;lorawan.c: 1429: fPort = *(buffer++);
 13398  000A66  C1F5  FFD9         	movff	LORAWAN_RxDone@buffer,fsr2l
 13399  000A6A  C1F6  FFDA         	movff	LORAWAN_RxDone@buffer+1,fsr2h
 13400  000A6E  50DF               	movf	indf2,w,c
 13401  000A70  6FDF               	movwf	LORAWAN_RxDone@fPort& (0+255),b
 13402                           
 13403                           ; BSR set to: 0
 13404  000A72  0101               	movlb	1	; () banked
 13405  000A74  4BF5               	infsnz	LORAWAN_RxDone@buffer& (0+255),f,b
 13406  000A76  2BF6               	incf	(LORAWAN_RxDone@buffer+1)& (0+255),f,b
 13407                           
 13408                           ; BSR set to: 1
 13409                           ;lorawan.c: 1431: frmPayloadLength = bufferLength - 8 - hdr->members.fCtrl.fOptsLen - si
      +                          zeof (extractedMic);
 13410  000A78  0100               	movlb	0	; () banked
 13411  000A7A  EE20 F005          	lfsr	2,5
 13412  000A7E  51F1               	movf	LORAWAN_RxDone@hdr& (0+255),w,b
 13413  000A80  26D9               	addwf	fsr2l,f,c
 13414  000A82  51F2               	movf	(LORAWAN_RxDone@hdr+1)& (0+255),w,b
 13415  000A84  22DA               	addwfc	fsr2h,f,c
 13416  000A86  50DF               	movf	223,w,c
 13417  000A88  0B0F               	andlw	15
 13418  000A8A  0800               	sublw	0
 13419  000A8C  0101               	movlb	1	; () banked
 13420  000A8E  25F7               	addwf	LORAWAN_RxDone@bufferLength& (0+255),w,b
 13421  000A90  0FF4               	addlw	244
 13422  000A92  0100               	movlb	0	; () banked
 13423  000A94  6FF0               	movwf	LORAWAN_RxDone@frmPayloadLength& (0+255),b
 13424                           
 13425                           ; BSR set to: 0
 13426                           ;lorawan.c: 1432: bufferIndex = 16 + 8 + hdr->members.fCtrl.fOptsLen + sizeof (fPort);
 13427  000A96  EE20 F005          	lfsr	2,5
 13428  000A9A  51F1               	movf	LORAWAN_RxDone@hdr& (0+255),w,b
 13429  000A9C  26D9               	addwf	fsr2l,f,c
 13430  000A9E  51F2               	movf	(LORAWAN_RxDone@hdr+1)& (0+255),w,b
 13431  000AA0  22DA               	addwfc	fsr2h,f,c
 13432  000AA2  50DF               	movf	223,w,c
 13433  000AA4  0B0F               	andlw	15
 13434  000AA6  0F19               	addlw	25
 13435  000AA8  6FE6               	movwf	LORAWAN_RxDone@bufferIndex& (0+255),b
 13436                           
 13437                           ; BSR set to: 0
 13438                           ;lorawan.c: 1434: if (fPort != 0)
 13439  000AAA  51DF               	movf	LORAWAN_RxDone@fPort& (0+255),w,b
 13440  000AAC  B4D8               	btfsc	status,2,c
 13441  000AAE  D028               	goto	l1203
 13442                           
 13443                           ; BSR set to: 0
 13444                           ;lorawan.c: 1435: {
 13445                           ;lorawan.c: 1436: EncryptFRMPayload (buffer, frmPayloadLength - 1, 1, loRa.fCntDown.valu
      +                          e, loRa.activationParameters.applicationSessionKey, bufferIndex, radioBuffer, 0);
 13446  000AB0  C1F5  F091         	movff	LORAWAN_RxDone@buffer,EncryptFRMPayload@buffer
 13447  000AB4  C1F6  F092         	movff	LORAWAN_RxDone@buffer+1,EncryptFRMPayload@buffer+1
 13448  000AB8  05F0               	decf	LORAWAN_RxDone@frmPayloadLength& (0+255),w,b
 13449  000ABA  6F93               	movwf	EncryptFRMPayload@bufferLength& (0+255),b
 13450  000ABC  0E01               	movlw	1
 13451  000ABE  6F94               	movwf	EncryptFRMPayload@dir& (0+255),b
 13452  000AC0  C210  F095         	movff	_loRa+10,EncryptFRMPayload@frameCounter
 13453  000AC4  C211  F096         	movff	_loRa+11,EncryptFRMPayload@frameCounter+1
 13454  000AC8  C212  F097         	movff	_loRa+12,EncryptFRMPayload@frameCounter+2
 13455  000ACC  C213  F098         	movff	_loRa+13,EncryptFRMPayload@frameCounter+3
 13456  000AD0  0E38               	movlw	low (_loRa+50)
 13457  000AD2  6F99               	movwf	EncryptFRMPayload@key& (0+255),b
 13458  000AD4  0E02               	movlw	high (_loRa+50)
 13459  000AD6  6F9A               	movwf	(EncryptFRMPayload@key+1)& (0+255),b
 13460  000AD8  C0E6  F09B         	movff	LORAWAN_RxDone@bufferIndex,EncryptFRMPayload@macBufferIndex
 13461  000ADC  0E80               	movlw	low _radioBuffer
 13462  000ADE  6F9C               	movwf	EncryptFRMPayload@bufferToBeEncrypted& (0+255),b
 13463  000AE0  0E05               	movlw	high _radioBuffer
 13464  000AE2  6F9D               	movwf	(EncryptFRMPayload@bufferToBeEncrypted+1)& (0+255),b
 13465  000AE4  0E00               	movlw	0
 13466  000AE6  6F9E               	movwf	EncryptFRMPayload@multicastStatus& (0+255),b
 13467  000AE8  ECB0  F027         	call	_EncryptFRMPayload	;wreg free
 13468                           
 13469                           ;lorawan.c: 1437: packet = buffer - 1;
 13470  000AEC  0EFF               	movlw	255
 13471  000AEE  0101               	movlb	1	; () banked
 13472  000AF0  25F5               	addwf	LORAWAN_RxDone@buffer& (0+255),w,b
 13473  000AF2  0100               	movlb	0	; () banked
 13474  000AF4  6FE8               	movwf	LORAWAN_RxDone@packet& (0+255),b
 13475  000AF6  0EFF               	movlw	255
 13476  000AF8  0101               	movlb	1	; () banked
 13477  000AFA  21F6               	addwfc	(LORAWAN_RxDone@buffer+1)& (0+255),w,b
 13478  000AFC  0100               	movlb	0	; () banked
 13479  000AFE  D050               	goto	L29
 13480  000B00                     l1203:
 13481                           
 13482                           ; BSR set to: 0
 13483                           ;lorawan.c: 1439: else
 13484                           ;lorawan.c: 1440: {
 13485                           ;lorawan.c: 1442: if(bufferLength > (13 + hdr->members.fCtrl.fOptsLen))
 13486                           
 13487                           ; BSR set to: 0
 13488  000B00  0101               	movlb	1	; () banked
 13489  000B02  51F7               	movf	LORAWAN_RxDone@bufferLength& (0+255),w,b
 13490  000B04  0100               	movlb	0	; () banked
 13491  000B06  6FDA               	movwf	??_LORAWAN_RxDone& (0+255),b
 13492  000B08  6BDB               	clrf	(??_LORAWAN_RxDone+1)& (0+255),b
 13493  000B0A  EE20 F005          	lfsr	2,5
 13494  000B0E  51F1               	movf	LORAWAN_RxDone@hdr& (0+255),w,b
 13495  000B10  26D9               	addwf	fsr2l,f,c
 13496  000B12  51F2               	movf	(LORAWAN_RxDone@hdr+1)& (0+255),w,b
 13497  000B14  22DA               	addwfc	fsr2h,f,c
 13498  000B16  50DF               	movf	223,w,c
 13499  000B18  0B0F               	andlw	15
 13500  000B1A  6FDC               	movwf	(??_LORAWAN_RxDone+2)& (0+255),b
 13501  000B1C  6BDD               	clrf	(??_LORAWAN_RxDone+3)& (0+255),b
 13502  000B1E  0E0D               	movlw	13
 13503  000B20  27DC               	addwf	(??_LORAWAN_RxDone+2)& (0+255),f,b
 13504  000B22  0E00               	movlw	0
 13505  000B24  23DD               	addwfc	(??_LORAWAN_RxDone+3)& (0+255),f,b
 13506  000B26  51DA               	movf	??_LORAWAN_RxDone& (0+255),w,b
 13507  000B28  5DDC               	subwf	(??_LORAWAN_RxDone+2)& (0+255),w,b
 13508  000B2A  51DD               	movf	(??_LORAWAN_RxDone+3)& (0+255),w,b
 13509  000B2C  0A80               	xorlw	128
 13510  000B2E  6FDE               	movwf	(??_LORAWAN_RxDone+4)& (0+255),b
 13511  000B30  51DB               	movf	(??_LORAWAN_RxDone+1)& (0+255),w,b
 13512  000B32  0A80               	xorlw	128
 13513  000B34  59DE               	subwfb	(??_LORAWAN_RxDone+4)& (0+255),w,b
 13514  000B36  B0D8               	btfsc	status,0,c
 13515  000B38  D02B               	goto	l1205
 13516                           
 13517                           ; BSR set to: 0
 13518                           ;lorawan.c: 1443: {
 13519                           ;lorawan.c: 1445: EncryptFRMPayload (buffer, frmPayloadLength - 1, 1, loRa.fCntDown.valu
      +                          e, loRa.activationParameters.networkSessionKey, bufferIndex, radioBuffer, 0);
 13520  000B3A  C1F5  F091         	movff	LORAWAN_RxDone@buffer,EncryptFRMPayload@buffer
 13521  000B3E  C1F6  F092         	movff	LORAWAN_RxDone@buffer+1,EncryptFRMPayload@buffer+1
 13522  000B42  05F0               	decf	LORAWAN_RxDone@frmPayloadLength& (0+255),w,b
 13523  000B44  6F93               	movwf	EncryptFRMPayload@bufferLength& (0+255),b
 13524  000B46  0E01               	movlw	1
 13525  000B48  6F94               	movwf	EncryptFRMPayload@dir& (0+255),b
 13526  000B4A  C210  F095         	movff	_loRa+10,EncryptFRMPayload@frameCounter
 13527  000B4E  C211  F096         	movff	_loRa+11,EncryptFRMPayload@frameCounter+1
 13528  000B52  C212  F097         	movff	_loRa+12,EncryptFRMPayload@frameCounter+2
 13529  000B56  C213  F098         	movff	_loRa+13,EncryptFRMPayload@frameCounter+3
 13530  000B5A  0E28               	movlw	low (_loRa+34)
 13531  000B5C  6F99               	movwf	EncryptFRMPayload@key& (0+255),b
 13532  000B5E  0E02               	movlw	high (_loRa+34)
 13533  000B60  6F9A               	movwf	(EncryptFRMPayload@key+1)& (0+255),b
 13534  000B62  C0E6  F09B         	movff	LORAWAN_RxDone@bufferIndex,EncryptFRMPayload@macBufferIndex
 13535  000B66  0E80               	movlw	low _radioBuffer
 13536  000B68  6F9C               	movwf	EncryptFRMPayload@bufferToBeEncrypted& (0+255),b
 13537  000B6A  0E05               	movlw	high _radioBuffer
 13538  000B6C  6F9D               	movwf	(EncryptFRMPayload@bufferToBeEncrypted+1)& (0+255),b
 13539  000B6E  0E00               	movlw	0
 13540  000B70  6F9E               	movwf	EncryptFRMPayload@multicastStatus& (0+255),b
 13541  000B72  ECB0  F027         	call	_EncryptFRMPayload	;wreg free
 13542                           
 13543                           ;lorawan.c: 1446: buffer = MacExecuteCommands(buffer, frmPayloadLength - 1 );
 13544  000B76  C1F5  F0B0         	movff	LORAWAN_RxDone@buffer,MacExecuteCommands@buffer
 13545  000B7A  C1F6  F0B1         	movff	LORAWAN_RxDone@buffer+1,MacExecuteCommands@buffer+1
 13546  000B7E  0100               	movlb	0	; () banked
 13547  000B80  05F0               	decf	LORAWAN_RxDone@frmPayloadLength& (0+255),w,b
 13548  000B82  6FB2               	movwf	MacExecuteCommands@fOptsLen& (0+255),b
 13549  000B84  EC75  F019         	call	_MacExecuteCommands	;wreg free
 13550  000B88  C0B0  F1F5         	movff	?_MacExecuteCommands,LORAWAN_RxDone@buffer
 13551  000B8C  C0B1  F1F6         	movff	?_MacExecuteCommands+1,LORAWAN_RxDone@buffer+1
 13552  000B90                     l1205:
 13553                           
 13554                           ;lorawan.c: 1447: }
 13555                           ;lorawan.c: 1449: frmPayloadLength = 0;
 13556  000B90  0E00               	movlw	0
 13557  000B92  0100               	movlb	0	; () banked
 13558  000B94  D001               	goto	L9
 13559  000B96                     l1202:
 13560                           
 13561                           ; BSR set to: 0
 13562                           ;lorawan.c: 1453: else
 13563                           ;lorawan.c: 1454: {
 13564                           ;lorawan.c: 1455: frmPayloadLength = 0;
 13565                           
 13566                           ; BSR set to: 0
 13567  000B96  0E00               	movlw	0
 13568  000B98                     L9:
 13569  000B98  6FF0               	movwf	LORAWAN_RxDone@frmPayloadLength& (0+255),b
 13570                           
 13571                           ; BSR set to: 0
 13572                           ;lorawan.c: 1456: packet = (0);
 13573  000B9A  0E00               	movlw	0
 13574  000B9C  6FE8               	movwf	LORAWAN_RxDone@packet& (0+255),b
 13575  000B9E  0E00               	movlw	0
 13576  000BA0                     L29:
 13577  000BA0  6FE9               	movwf	(LORAWAN_RxDone@packet+1)& (0+255),b
 13578                           
 13579                           ; BSR set to: 0
 13580                           ;lorawan.c: 1457: }
 13581                           ;lorawan.c: 1459: loRa.counterRepetitionsUnconfirmedUplink = 1;
 13582                           
 13583                           ; BSR set to: 0
 13584  000BA2  0E01               	movlw	1
 13585  000BA4  0102               	movlb	2	; () banked
 13586  000BA6  6FDE               	movwf	(_loRa+216)& (0+255),b
 13587                           
 13588                           ; BSR set to: 2
 13589                           ;lorawan.c: 1461: loRa.adrAckCnt = 0;
 13590  000BA8  0E00               	movlw	0
 13591  000BAA  6FD7               	movwf	(_loRa+209)& (0+255),b
 13592  000BAC  0E00               	movlw	0
 13593  000BAE  6FD6               	movwf	(_loRa+208)& (0+255),b
 13594                           
 13595                           ; BSR set to: 2
 13596                           ;lorawan.c: 1462: loRa.counterAdrAckDelay = 0;
 13597  000BB0  0E00               	movlw	0
 13598  000BB2  6FF4               	movwf	(_loRa+238)& (0+255),b
 13599                           
 13600                           ; BSR set to: 2
 13601                           ;lorawan.c: 1463: loRa.lorawanMacStatus.adrAckRequest = 0;
 13602  000BB4  9906               	bcf	_loRa& (0+255),4,b
 13603                           
 13604                           ; BSR set to: 2
 13605                           ;lorawan.c: 1465: loRa.macStatus.rxDone = 1;
 13606  000BB6  8309               	bsf	(_loRa+3)& (0+255),1,b
 13607                           
 13608                           ; BSR set to: 2
 13609                           ;lorawan.c: 1467: if ( loRa.lorawanMacStatus.ackRequiredFromNextDownlinkMessage == 1 )
 13610  000BB8  A106               	btfss	_loRa& (0+255),0,b
 13611  000BBA  D055               	goto	l1207
 13612                           
 13613                           ; BSR set to: 2
 13614                           ;lorawan.c: 1468: {
 13615                           ;lorawan.c: 1469: if (hdr->members.fCtrl.ack == 1)
 13616  000BBC  0100               	movlb	0	; () banked
 13617  000BBE  EE20 F005          	lfsr	2,5
 13618  000BC2  51F1               	movf	LORAWAN_RxDone@hdr& (0+255),w,b
 13619  000BC4  26D9               	addwf	fsr2l,f,c
 13620  000BC6  51F2               	movf	(LORAWAN_RxDone@hdr+1)& (0+255),w,b
 13621  000BC8  22DA               	addwfc	fsr2h,f,c
 13622  000BCA  AADF               	btfss	indf2,5,c
 13623  000BCC  D049               	goto	l1208
 13624                           
 13625                           ; BSR set to: 0
 13626                           ;lorawan.c: 1470: {
 13627                           ;lorawan.c: 1471: loRa.lorawanMacStatus.ackRequiredFromNextDownlinkMessage = 0;
 13628  000BCE  0102               	movlb	2	; () banked
 13629  000BD0  9106               	bcf	_loRa& (0+255),0,b
 13630                           
 13631                           ;lorawan.c: 1472: loRa.macStatus.macState = IDLE;
 13632  000BD2  9108               	bcf	(_loRa+2)& (0+255),0,b
 13633  000BD4  9308               	bcf	(_loRa+2)& (0+255),1,b
 13634  000BD6  9508               	bcf	(_loRa+2)& (0+255),2,b
 13635  000BD8  9708               	bcf	(_loRa+2)& (0+255),3,b
 13636                           
 13637                           ; BSR set to: 2
 13638                           ;lorawan.c: 1473: if (rxPayload.RxAppData != (0))
 13639  000BDA  0101               	movlb	1	; () banked
 13640  000BDC  510C               	movf	_rxPayload& (0+255),w,b
 13641  000BDE  110D               	iorwf	(_rxPayload+1)& (0+255),w,b
 13642  000BE0  B4D8               	btfsc	status,2,c
 13643  000BE2  D017               	goto	u11799
 13644                           
 13645                           ; BSR set to: 1
 13646                           ;lorawan.c: 1474: {
 13647                           ;lorawan.c: 1475: loRa.lorawanMacStatus.synchronization = 0;
 13648  000BE4  0102               	movlb	2	; () banked
 13649  000BE6  9B06               	bcf	_loRa& (0+255),5,b
 13650                           
 13651                           ; BSR set to: 2
 13652                           ;lorawan.c: 1476: rxPayload.RxAppData (packet, frmPayloadLength, MAC_OK);
 13653  000BE8  C0E8  F060         	movff	LORAWAN_RxDone@packet,RxData@pData
 13654  000BEC  C0E9  F061         	movff	LORAWAN_RxDone@packet+1,RxData@pData+1
 13655  000BF0  C0F0  F062         	movff	LORAWAN_RxDone@frmPayloadLength,RxData@dataLength
 13656  000BF4  0E01               	movlw	1
 13657  000BF6  0100               	movlb	0	; () banked
 13658  000BF8  6F63               	movwf	RxData@status& (0+255),b
 13659  000BFA  D801               	call	u11798
 13660  000BFC  D00A               	goto	u11799
 13661  000BFE                     u11798:
 13662  000BFE  0005               	push	
 13663  000C00  6EFA               	movwf	pclath,c
 13664  000C02  0101               	movlb	1	; () banked
 13665  000C04  510C               	movf	_rxPayload& (0+255),w,b
 13666  000C06  6EFD               	movwf	tosl,c
 13667  000C08  510D               	movf	(_rxPayload+1)& (0+255),w,b
 13668  000C0A  6EFE               	movwf	tosh,c
 13669  000C0C  6AFF               	clrf	tosu,c
 13670  000C0E  50FA               	movf	pclath,w,c
 13671  000C10  0012               	return		;indir
 13672  000C12                     u11799:
 13673                           
 13674                           ;lorawan.c: 1477: }
 13675                           ;lorawan.c: 1478: loRa.macStatus.rxDone = 0;
 13676  000C12  0102               	movlb	2	; () banked
 13677  000C14  9309               	bcf	(_loRa+3)& (0+255),1,b
 13678                           
 13679                           ; BSR set to: 2
 13680                           ;lorawan.c: 1479: if ( (loRa.macStatus.automaticReply == 1) && (loRa.lorawanMacStatus.sy
      +                          nchronization == 0) && ( (loRa.lorawanMacStatus.ackRequiredFromNextUplinkMessage == 1) |
      +                          | (loRa.lorawanMacStatus.fPending == 1) ) )
 13681  000C16  BB08               	btfsc	(_loRa+2)& (0+255),5,b
 13682                           
 13683                           ; BSR set to: 2
 13684  000C18  BB06               	btfsc	_loRa& (0+255),5,b
 13685  000C1A  D06C               	goto	l1222
 13686                           
 13687                           ; BSR set to: 2
 13688  000C1C  B306               	btfsc	_loRa& (0+255),1,b
 13689  000C1E  D002               	goto	u11830
 13690                           
 13691                           ; BSR set to: 2
 13692  000C20  A706               	btfss	_loRa& (0+255),3,b
 13693  000C22  D068               	goto	l1222
 13694  000C24                     u11830:
 13695                           
 13696                           ; BSR set to: 2
 13697                           ;lorawan.c: 1480: {
 13698                           ;lorawan.c: 1481: if (SearchAvailableChannel (loRa.maxChannels, 1, &channelIndex) == OK)
 13699                           
 13700                           ; BSR set to: 2
 13701  000C24  0E01               	movlw	1
 13702  000C26  0100               	movlb	0	; () banked
 13703  000C28  6FAF               	movwf	SearchAvailableChannel@transmissionType& (0+255),b
 13704  000C2A  0EE0               	movlw	low LORAWAN_RxDone@channelIndex
 13705  000C2C  6FB0               	movwf	SearchAvailableChannel@channelIndex& (0+255),b
 13706  000C2E  0E00               	movlw	high LORAWAN_RxDone@channelIndex
 13707  000C30  6FB1               	movwf	(SearchAvailableChannel@channelIndex+1)& (0+255),b
 13708  000C32  0102               	movlb	2	; () banked
 13709  000C34  51F3               	movf	(_loRa+237)& (0+255),w,b
 13710  000C36  EC3A  F02F         	call	_SearchAvailableChannel
 13711  000C3A  0900               	iorlw	0
 13712  000C3C  A4D8               	btfss	status,2,c
 13713  000C3E  D00D               	goto	l1213
 13714                           
 13715                           ;lorawan.c: 1482: {
 13716                           ;lorawan.c: 1483: LORAWAN_Send (0, 0, 0, 0);
 13717  000C40  0E00               	movlw	0
 13718  000C42  0100               	movlb	0	; () banked
 13719  000C44  6FD3               	movwf	LORAWAN_Send@port& (0+255),b
 13720  000C46  0E00               	movlw	0
 13721  000C48  6FD4               	movwf	LORAWAN_Send@buffer& (0+255),b
 13722  000C4A  0E00               	movlw	0
 13723  000C4C  6FD5               	movwf	(LORAWAN_Send@buffer+1)& (0+255),b
 13724  000C4E  0E00               	movlw	0
 13725  000C50  6FD6               	movwf	LORAWAN_Send@bufferLength& (0+255),b
 13726  000C52  0E00               	movlw	0
 13727  000C54  ECFC  F036         	call	_LORAWAN_Send
 13728  000C58  D048               	goto	l11505
 13729  000C5A                     l1213:
 13730                           
 13731                           ;lorawan.c: 1486: else
 13732                           ;lorawan.c: 1487: {
 13733                           ;lorawan.c: 1489: StartReTxTimer();
 13734                           
 13735                           ; BSR set to: 2
 13736  000C5A  EC76  F028         	call	_StartReTxTimer	;wreg free
 13737                           
 13738                           ;lorawan.c: 1490: }
 13739                           ;lorawan.c: 1491: }
 13740                           ;lorawan.c: 1492: }
 13741  000C5E  D04A               	goto	l1222
 13742  000C60                     l1208:
 13743                           
 13744                           ;lorawan.c: 1494: else
 13745                           ;lorawan.c: 1495: {
 13746                           ;lorawan.c: 1496: UpdateRetransmissionAckTimeoutState ();
 13747  000C60  ECC0  F03E         	call	_UpdateRetransmissionAckTimeoutState	;wreg free
 13748                           
 13749                           ;lorawan.c: 1497: }
 13750                           ;lorawan.c: 1498: }
 13751  000C64  D047               	goto	l1222
 13752  000C66                     l1207:
 13753                           
 13754                           ; BSR set to: 2
 13755                           ;lorawan.c: 1499: else
 13756                           ;lorawan.c: 1500: {
 13757                           ;lorawan.c: 1501: loRa.macStatus.macState = IDLE;
 13758  000C66  9108               	bcf	(_loRa+2)& (0+255),0,b
 13759  000C68  9308               	bcf	(_loRa+2)& (0+255),1,b
 13760  000C6A  9508               	bcf	(_loRa+2)& (0+255),2,b
 13761  000C6C  9708               	bcf	(_loRa+2)& (0+255),3,b
 13762                           
 13763                           ; BSR set to: 2
 13764                           ;lorawan.c: 1503: if (rxPayload.RxAppData != (0))
 13765  000C6E  0101               	movlb	1	; () banked
 13766  000C70  510C               	movf	_rxPayload& (0+255),w,b
 13767  000C72  110D               	iorwf	(_rxPayload+1)& (0+255),w,b
 13768  000C74  B4D8               	btfsc	status,2,c
 13769  000C76  D017               	goto	u11869
 13770                           
 13771                           ; BSR set to: 1
 13772                           ;lorawan.c: 1504: {
 13773                           ;lorawan.c: 1505: loRa.lorawanMacStatus.synchronization = 0;
 13774  000C78  0102               	movlb	2	; () banked
 13775  000C7A  9B06               	bcf	_loRa& (0+255),5,b
 13776                           
 13777                           ; BSR set to: 2
 13778                           ;lorawan.c: 1506: rxPayload.RxAppData (packet, frmPayloadLength, MAC_OK);
 13779  000C7C  C0E8  F060         	movff	LORAWAN_RxDone@packet,RxData@pData
 13780  000C80  C0E9  F061         	movff	LORAWAN_RxDone@packet+1,RxData@pData+1
 13781  000C84  C0F0  F062         	movff	LORAWAN_RxDone@frmPayloadLength,RxData@dataLength
 13782  000C88  0E01               	movlw	1
 13783  000C8A  0100               	movlb	0	; () banked
 13784  000C8C  6F63               	movwf	RxData@status& (0+255),b
 13785  000C8E  D801               	call	u11868
 13786  000C90  D00A               	goto	u11869
 13787  000C92                     u11868:
 13788  000C92  0005               	push	
 13789  000C94  6EFA               	movwf	pclath,c
 13790  000C96  0101               	movlb	1	; () banked
 13791  000C98  510C               	movf	_rxPayload& (0+255),w,b
 13792  000C9A  6EFD               	movwf	tosl,c
 13793  000C9C  510D               	movf	(_rxPayload+1)& (0+255),w,b
 13794  000C9E  6EFE               	movwf	tosh,c
 13795  000CA0  6AFF               	clrf	tosu,c
 13796  000CA2  50FA               	movf	pclath,w,c
 13797  000CA4  0012               	return		;indir
 13798  000CA6                     u11869:
 13799                           
 13800                           ;lorawan.c: 1507: }
 13801                           ;lorawan.c: 1509: if ( (loRa.macStatus.automaticReply == 1) && (loRa.lorawanMacStatus.sy
      +                          nchronization == 0) && ( (loRa.lorawanMacStatus.ackRequiredFromNextUplinkMessage == 1) |
      +                          | (loRa.lorawanMacStatus.fPending == 1) ) )
 13802  000CA6  0102               	movlb	2	; () banked
 13803  000CA8  BB08               	btfsc	(_loRa+2)& (0+255),5,b
 13804                           
 13805                           ; BSR set to: 2
 13806  000CAA  BB06               	btfsc	_loRa& (0+255),5,b
 13807  000CAC  D023               	goto	l1222
 13808                           
 13809                           ; BSR set to: 2
 13810  000CAE  B306               	btfsc	_loRa& (0+255),1,b
 13811  000CB0  D002               	goto	u11900
 13812                           
 13813                           ; BSR set to: 2
 13814  000CB2  A706               	btfss	_loRa& (0+255),3,b
 13815  000CB4  D01F               	goto	l1222
 13816  000CB6                     u11900:
 13817                           
 13818                           ; BSR set to: 2
 13819                           ;lorawan.c: 1510: {
 13820                           ;lorawan.c: 1511: if (SearchAvailableChannel (loRa.maxChannels, 1, &channelIndex) == OK)
 13821                           
 13822                           ; BSR set to: 2
 13823  000CB6  0E01               	movlw	1
 13824  000CB8  0100               	movlb	0	; () banked
 13825  000CBA  6FAF               	movwf	SearchAvailableChannel@transmissionType& (0+255),b
 13826  000CBC  0EE0               	movlw	low LORAWAN_RxDone@channelIndex
 13827  000CBE  6FB0               	movwf	SearchAvailableChannel@channelIndex& (0+255),b
 13828  000CC0  0E00               	movlw	high LORAWAN_RxDone@channelIndex
 13829  000CC2  6FB1               	movwf	(SearchAvailableChannel@channelIndex+1)& (0+255),b
 13830  000CC4  0102               	movlb	2	; () banked
 13831  000CC6  51F3               	movf	(_loRa+237)& (0+255),w,b
 13832  000CC8  EC3A  F02F         	call	_SearchAvailableChannel
 13833  000CCC  0900               	iorlw	0
 13834  000CCE  A4D8               	btfss	status,2,c
 13835  000CD0  D00F               	goto	l1221
 13836                           
 13837                           ;lorawan.c: 1512: {
 13838                           ;lorawan.c: 1513: LORAWAN_Send (0, 0, 0, 0);
 13839  000CD2  0E00               	movlw	0
 13840  000CD4  0100               	movlb	0	; () banked
 13841  000CD6  6FD3               	movwf	LORAWAN_Send@port& (0+255),b
 13842  000CD8  0E00               	movlw	0
 13843  000CDA  6FD4               	movwf	LORAWAN_Send@buffer& (0+255),b
 13844  000CDC  0E00               	movlw	0
 13845  000CDE  6FD5               	movwf	(LORAWAN_Send@buffer+1)& (0+255),b
 13846  000CE0  0E00               	movlw	0
 13847  000CE2  6FD6               	movwf	LORAWAN_Send@bufferLength& (0+255),b
 13848  000CE4  0E00               	movlw	0
 13849  000CE6  ECFC  F036         	call	_LORAWAN_Send
 13850  000CEA                     l11505:
 13851                           
 13852                           ;lorawan.c: 1514: loRa.lorawanMacStatus.fPending = 0;
 13853  000CEA  0102               	movlb	2	; () banked
 13854  000CEC  9706               	bcf	_loRa& (0+255),3,b
 13855                           
 13856                           ;lorawan.c: 1515: }
 13857  000CEE  D002               	goto	l1222
 13858  000CF0                     l1221:
 13859                           
 13860                           ;lorawan.c: 1516: else
 13861                           ;lorawan.c: 1517: {
 13862                           ;lorawan.c: 1519: StartReTxTimer();
 13863                           
 13864                           ; BSR set to: 2
 13865  000CF0  EC76  F028         	call	_StartReTxTimer	;wreg free
 13866  000CF4                     l1222:
 13867                           
 13868                           ;lorawan.c: 1520: }
 13869                           ;lorawan.c: 1521: }
 13870                           ;lorawan.c: 1522: }
 13871                           ;lorawan.c: 1524: if (CLASS_C == loRa.deviceClass)
 13872  000CF4  0E02               	movlw	2
 13873  000CF6  0102               	movlb	2	; () banked
 13874  000CF8  1918               	xorwf	(_loRa+18)& (0+255),w,b
 13875  000CFA  A4D8               	btfss	status,2,c
 13876  000CFC  0012               	return	
 13877                           
 13878                           ; BSR set to: 2
 13879                           ;lorawan.c: 1525: {
 13880                           ;lorawan.c: 1526: loRa.macStatus.macState = CLASS_C_RX2_2_OPEN;
 13881  000CFE  5108               	movf	(_loRa+2)& (0+255),w,b
 13882  000D00  0BF0               	andlw	-16
 13883  000D02  0909               	iorlw	9
 13884  000D04  6F08               	movwf	(_loRa+2)& (0+255),b
 13885                           
 13886                           ; BSR set to: 2
 13887                           ;lorawan.c: 1527: LORAWAN_EnterContinuousReceive();
 13888  000D06  EC0C  F03E         	call	_LORAWAN_EnterContinuousReceive	;wreg free
 13889                           
 13890                           ;lorawan.c: 1528: }
 13891                           ;lorawan.c: 1529: }
 13892  000D0A  0012               	return	
 13893  000D0C                     l1162:
 13894                           
 13895                           ;lorawan.c: 1530: else
 13896                           ;lorawan.c: 1531: {
 13897                           ;lorawan.c: 1533: SetReceptionNotOkState ();
 13898  000D0C  ECCD  F03D         	call	_SetReceptionNotOkState	;wreg free
 13899                           
 13900                           ;lorawan.c: 1535: }
 13901                           ;lorawan.c: 1536: }
 13902                           
 13903                           ;lorawan.c: 1534: return INVALID_PARAMETER;
 13904                           ;	Return value of _LORAWAN_RxDone is never used
 13905  000D10  0012               	return	
 13906  000D12                     l1148:
 13907                           
 13908                           ;lorawan.c: 1537: else
 13909                           ;lorawan.c: 1538: {
 13910                           ;lorawan.c: 1540: if ( rxPayload.RxAppData != (0) )
 13911  000D12  0101               	movlb	1	; () banked
 13912  000D14  510C               	movf	_rxPayload& (0+255),w,b
 13913  000D16  110D               	iorwf	(_rxPayload+1)& (0+255),w,b
 13914  000D18  B4D8               	btfsc	status,2,c
 13915  000D1A  0012               	return	
 13916                           
 13917                           ; BSR set to: 1
 13918                           ;lorawan.c: 1541: {
 13919                           ;lorawan.c: 1542: if ((RADIO_GetStatus() & (1 << (3))) == 0)
 13920  000D1C  ECD2  F04A         	call	_RADIO_GetStatus	;wreg free
 13921  000D20  0100               	movlb	0	; () banked
 13922  000D22  6FDA               	movwf	??_LORAWAN_RxDone& (0+255),b
 13923  000D24  B7DA               	btfsc	??_LORAWAN_RxDone& (0+255),3,b
 13924  000D26  D014               	goto	l1227
 13925                           
 13926                           ; BSR set to: 0
 13927                           ;lorawan.c: 1543: {
 13928                           ;lorawan.c: 1544: rxPayload.RxAppData(buffer, bufferLength, RADIO_OK);
 13929  000D28  C1F5  F060         	movff	LORAWAN_RxDone@buffer,RxData@pData
 13930  000D2C  C1F6  F061         	movff	LORAWAN_RxDone@buffer+1,RxData@pData+1
 13931  000D30  C1F7  F062         	movff	LORAWAN_RxDone@bufferLength,RxData@dataLength
 13932  000D34  0E03               	movlw	3
 13933  000D36  6F63               	movwf	RxData@status& (0+255),b
 13934  000D38  D801               	call	u11958
 13935  000D3A  0012               	return	
 13936  000D3C                     u11958:
 13937  000D3C  0005               	push	
 13938  000D3E  6EFA               	movwf	pclath,c
 13939  000D40  0101               	movlb	1	; () banked
 13940  000D42  510C               	movf	_rxPayload& (0+255),w,b
 13941  000D44  6EFD               	movwf	tosl,c
 13942  000D46  510D               	movf	(_rxPayload+1)& (0+255),w,b
 13943  000D48  6EFE               	movwf	tosh,c
 13944  000D4A  6AFF               	clrf	tosu,c
 13945  000D4C  50FA               	movf	pclath,w,c
 13946  000D4E  0012               	return		;indir
 13947  000D50                     l1227:
 13948                           
 13949                           ;lorawan.c: 1546: else
 13950                           ;lorawan.c: 1547: {
 13951                           ;lorawan.c: 1548: rxPayload.RxAppData(buffer, bufferLength, RADIO_NOT_OK);
 13952  000D50  C1F5  F060         	movff	LORAWAN_RxDone@buffer,RxData@pData
 13953  000D54  C1F6  F061         	movff	LORAWAN_RxDone@buffer+1,RxData@pData+1
 13954  000D58  C1F7  F062         	movff	LORAWAN_RxDone@bufferLength,RxData@dataLength
 13955  000D5C  0E02               	movlw	2
 13956  000D5E  0100               	movlb	0	; () banked
 13957  000D60  6F63               	movwf	RxData@status& (0+255),b
 13958  000D62  D801               	call	u11968
 13959  000D64  0012               	return	
 13960  000D66                     u11968:
 13961  000D66  0005               	push	
 13962  000D68  6EFA               	movwf	pclath,c
 13963  000D6A  0101               	movlb	1	; () banked
 13964  000D6C  510C               	movf	_rxPayload& (0+255),w,b
 13965  000D6E  6EFD               	movwf	tosl,c
 13966  000D70  510D               	movf	(_rxPayload+1)& (0+255),w,b
 13967  000D72  6EFE               	movwf	tosh,c
 13968  000D74  6AFF               	clrf	tosu,c
 13969  000D76  50FA               	movf	pclath,w,c
 13970  000D78  0012               	return		;indir
 13971  000D7A                     __end_of_LORAWAN_RxDone:
 13972                           	opt stack 0
 13973                           tosu	equ	0xFFF
 13974                           tosh	equ	0xFFE
 13975                           tosl	equ	0xFFD
 13976                           pclath	equ	0xFFA
 13977                           tblptru	equ	0xFF8
 13978                           tblptrh	equ	0xFF7
 13979                           tblptrl	equ	0xFF6
 13980                           tablat	equ	0xFF5
 13981                           prodh	equ	0xFF4
 13982                           prodl	equ	0xFF3
 13983                           intcon	equ	0xFF2
 13984                           intcon2	equ	0xFF1
 13985                           intcon3	equ	0xFF0
 13986                           postinc0	equ	0xFEE
 13987                           wreg	equ	0xFE8
 13988                           postinc1	equ	0xFE6
 13989                           postdec1	equ	0xFE5
 13990                           plusw1	equ	0xFE3
 13991                           fsr1h	equ	0xFE2
 13992                           fsr1l	equ	0xFE1
 13993                           indf2	equ	0xFDF
 13994                           postinc2	equ	0xFDE
 13995                           postdec2	equ	0xFDD
 13996                           fsr2h	equ	0xFDA
 13997                           fsr2l	equ	0xFD9
 13998                           status	equ	0xFD8
 13999                           
 14000 ;; *************** function _UpdateRetransmissionAckTimeoutState *****************
 14001 ;; Defined at:
 14002 ;;		line 1034 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 14003 ;; Parameters:    Size  Location     Type
 14004 ;;		None
 14005 ;; Auto vars:     Size  Location     Type
 14006 ;;		None
 14007 ;; Return value:  Size  Location     Type
 14008 ;;                  1    wreg      void 
 14009 ;; Registers used:
 14010 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 14011 ;; Tracked objects:
 14012 ;;		On entry : 0/0
 14013 ;;		On exit  : 0/0
 14014 ;;		Unchanged: 0/0
 14015 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14016 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14017 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14018 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14019 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14020 ;;Total ram usage:        4 bytes
 14021 ;; Hardware stack levels used:    1
 14022 ;; Hardware stack levels required when called:   11
 14023 ;; This function calls:
 14024 ;;		_SwTimerSetTimeout
 14025 ;;		_SwTimerStart
 14026 ;;		___lldiv
 14027 ;; This function is called by:
 14028 ;;		_AckRetransmissionCallback
 14029 ;;		_LORAWAN_RxDone
 14030 ;; This function uses a non-reentrant model
 14031 ;;
 14032                           
 14033                           	psect	text63
 14034  007D80                     __ptext63:
 14035                           	opt stack 0
 14036  007D80                     _UpdateRetransmissionAckTimeoutState:
 14037                           	opt stack 16
 14038                           
 14039                           ;lorawan.c: 1036: loRa.macStatus.macState = RETRANSMISSION_DELAY;
 14040                           
 14041                           ;incstack = 0
 14042  007D80  0102               	movlb	2	; () banked
 14043  007D82  5108               	movf	(_loRa+2)& (0+255),w,b
 14044  007D84  0BF0               	andlw	-16
 14045  007D86  0906               	iorlw	6
 14046  007D88  6F08               	movwf	(_loRa+2)& (0+255),b
 14047                           
 14048                           ; BSR set to: 2
 14049                           ;lorawan.c: 1037: SwTimerSetTimeout(loRa.ackTimeoutTimerId, ( (((uint32_t)(loRa.protocol
      +                          Parameters.ackTimeout)) << (12)) / 125UL ));
 14050  007D8A  51A6               	movf	(_loRa+160)& (0+255),w,b
 14051  007D8C  0100               	movlb	0	; () banked
 14052  007D8E  6F9A               	movwf	??_UpdateRetransmissionAckTimeoutState& (0+255),b
 14053  007D90  0102               	movlb	2	; () banked
 14054  007D92  51A7               	movf	(_loRa+161)& (0+255),w,b
 14055  007D94  0100               	movlb	0	; () banked
 14056  007D96  6F9B               	movwf	(??_UpdateRetransmissionAckTimeoutState+1)& (0+255),b
 14057  007D98  6B9C               	clrf	(??_UpdateRetransmissionAckTimeoutState+2)& (0+255),b
 14058  007D9A  6B9D               	clrf	(??_UpdateRetransmissionAckTimeoutState+3)& (0+255),b
 14059  007D9C  0E0C               	movlw	12
 14060  007D9E                     u10775:
 14061  007D9E  90D8               	bcf	status,0,c
 14062  007DA0  379A               	rlcf	??_UpdateRetransmissionAckTimeoutState& (0+255),f,b
 14063  007DA2  379B               	rlcf	(??_UpdateRetransmissionAckTimeoutState+1)& (0+255),f,b
 14064  007DA4  379C               	rlcf	(??_UpdateRetransmissionAckTimeoutState+2)& (0+255),f,b
 14065  007DA6  379D               	rlcf	(??_UpdateRetransmissionAckTimeoutState+3)& (0+255),f,b
 14066  007DA8  2EE8               	decfsz	wreg,f,c
 14067  007DAA  D7F9               	goto	u10775
 14068  007DAC  C09A  F060         	movff	??_UpdateRetransmissionAckTimeoutState,___lldiv@dividend
 14069  007DB0  C09B  F061         	movff	??_UpdateRetransmissionAckTimeoutState+1,___lldiv@dividend+1
 14070  007DB4  C09C  F062         	movff	??_UpdateRetransmissionAckTimeoutState+2,___lldiv@dividend+2
 14071  007DB8  C09D  F063         	movff	??_UpdateRetransmissionAckTimeoutState+3,___lldiv@dividend+3
 14072  007DBC  0E7D               	movlw	125
 14073  007DBE  6F64               	movwf	___lldiv@divisor& (0+255),b
 14074  007DC0  0E00               	movlw	0
 14075  007DC2  6F65               	movwf	(___lldiv@divisor+1)& (0+255),b
 14076  007DC4  0E00               	movlw	0
 14077  007DC6  6F66               	movwf	(___lldiv@divisor+2)& (0+255),b
 14078  007DC8  0E00               	movlw	0
 14079  007DCA  6F67               	movwf	(___lldiv@divisor+3)& (0+255),b
 14080  007DCC  EC0A  F03D         	call	___lldiv	;wreg free
 14081  007DD0  C060  F06D         	movff	?___lldiv,SwTimerSetTimeout@timeout
 14082  007DD4  C061  F06E         	movff	?___lldiv+1,SwTimerSetTimeout@timeout+1
 14083  007DD8  C062  F06F         	movff	?___lldiv+2,SwTimerSetTimeout@timeout+2
 14084  007DDC  C063  F070         	movff	?___lldiv+3,SwTimerSetTimeout@timeout+3
 14085  007DE0  0102               	movlb	2	; () banked
 14086  007DE2  51EE               	movf	(_loRa+232)& (0+255),w,b
 14087  007DE4  EC27  F045         	call	_SwTimerSetTimeout
 14088                           
 14089                           ;lorawan.c: 1038: SwTimerStart(loRa.ackTimeoutTimerId);
 14090  007DE8  0102               	movlb	2	; () banked
 14091  007DEA  51EE               	movf	(_loRa+232)& (0+255),w,b
 14092  007DEC  ECDA  F03A         	call	_SwTimerStart
 14093  007DF0  0012               	return		;funcret
 14094  007DF2                     __end_of_UpdateRetransmissionAckTimeoutState:
 14095                           	opt stack 0
 14096                           tosu	equ	0xFFF
 14097                           tosh	equ	0xFFE
 14098                           tosl	equ	0xFFD
 14099                           pclath	equ	0xFFA
 14100                           tblptru	equ	0xFF8
 14101                           tblptrh	equ	0xFF7
 14102                           tblptrl	equ	0xFF6
 14103                           tablat	equ	0xFF5
 14104                           prodh	equ	0xFF4
 14105                           prodl	equ	0xFF3
 14106                           intcon	equ	0xFF2
 14107                           intcon2	equ	0xFF1
 14108                           intcon3	equ	0xFF0
 14109                           postinc0	equ	0xFEE
 14110                           wreg	equ	0xFE8
 14111                           postinc1	equ	0xFE6
 14112                           postdec1	equ	0xFE5
 14113                           plusw1	equ	0xFE3
 14114                           fsr1h	equ	0xFE2
 14115                           fsr1l	equ	0xFE1
 14116                           indf2	equ	0xFDF
 14117                           postinc2	equ	0xFDE
 14118                           postdec2	equ	0xFDD
 14119                           fsr2h	equ	0xFDA
 14120                           fsr2l	equ	0xFD9
 14121                           status	equ	0xFD8
 14122                           
 14123 ;; *************** function _UpdateDLSettings *****************
 14124 ;; Defined at:
 14125 ;;		line 888 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 14126 ;; Parameters:    Size  Location     Type
 14127 ;;  dlRx2Dr         1    wreg     unsigned char 
 14128 ;;  dlRx1DrOffse    1    0[BANK0 ] unsigned char 
 14129 ;; Auto vars:     Size  Location     Type
 14130 ;;  dlRx2Dr         1    1[BANK0 ] unsigned char 
 14131 ;; Return value:  Size  Location     Type
 14132 ;;                  1    wreg      void 
 14133 ;; Registers used:
 14134 ;;		wreg, status,2, status,0
 14135 ;; Tracked objects:
 14136 ;;		On entry : 0/0
 14137 ;;		On exit  : 0/0
 14138 ;;		Unchanged: 0/0
 14139 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14140 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14141 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14142 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14143 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14144 ;;Total ram usage:        2 bytes
 14145 ;; Hardware stack levels used:    1
 14146 ;; Hardware stack levels required when called:    7
 14147 ;; This function calls:
 14148 ;;		Nothing
 14149 ;; This function is called by:
 14150 ;;		_LORAWAN_RxDone
 14151 ;; This function uses a non-reentrant model
 14152 ;;
 14153                           
 14154                           	psect	text64
 14155  0092BA                     __ptext64:
 14156                           	opt stack 0
 14157  0092BA                     _UpdateDLSettings:
 14158                           	opt stack 19
 14159                           
 14160                           ;incstack = 0
 14161                           ;UpdateDLSettings@dlRx2Dr stored from wreg
 14162  0092BA  0100               	movlb	0	; () banked
 14163  0092BC  6F61               	movwf	UpdateDLSettings@dlRx2Dr& (0+255),b
 14164                           
 14165                           ;lorawan_eu.c: 890: if (dlRx2Dr <= 7)
 14166  0092BE  0E08               	movlw	8
 14167  0092C0  0100               	movlb	0	; () banked
 14168  0092C2  6161               	cpfslt	UpdateDLSettings@dlRx2Dr& (0+255),b
 14169  0092C4  D002               	goto	l2013
 14170                           
 14171                           ; BSR set to: 0
 14172                           ;lorawan_eu.c: 891: {
 14173                           ;lorawan_eu.c: 892: loRa.receiveWindow2Parameters.dataRate = dlRx2Dr;
 14174  0092C6  C061  F222         	movff	UpdateDLSettings@dlRx2Dr,_loRa+28
 14175  0092CA                     l2013:
 14176                           
 14177                           ; BSR set to: 0
 14178                           ;lorawan_eu.c: 893: }
 14179                           ;lorawan_eu.c: 895: if (dlRx1DrOffset <= 5)
 14180                           
 14181                           ; BSR set to: 0
 14182  0092CA  0E06               	movlw	6
 14183  0092CC  6160               	cpfslt	UpdateDLSettings@dlRx1DrOffset& (0+255),b
 14184  0092CE  0012               	return	
 14185                           
 14186                           ; BSR set to: 0
 14187                           ;lorawan_eu.c: 896: {
 14188                           ;lorawan_eu.c: 898: loRa.offset = dlRx1DrOffset;
 14189  0092D0  C060  F2F5         	movff	UpdateDLSettings@dlRx1DrOffset,_loRa+239
 14190  0092D4  0012               	return	
 14191  0092D6                     __end_of_UpdateDLSettings:
 14192                           	opt stack 0
 14193                           tosu	equ	0xFFF
 14194                           tosh	equ	0xFFE
 14195                           tosl	equ	0xFFD
 14196                           pclath	equ	0xFFA
 14197                           tblptru	equ	0xFF8
 14198                           tblptrh	equ	0xFF7
 14199                           tblptrl	equ	0xFF6
 14200                           tablat	equ	0xFF5
 14201                           prodh	equ	0xFF4
 14202                           prodl	equ	0xFF3
 14203                           intcon	equ	0xFF2
 14204                           intcon2	equ	0xFF1
 14205                           intcon3	equ	0xFF0
 14206                           postinc0	equ	0xFEE
 14207                           wreg	equ	0xFE8
 14208                           postinc1	equ	0xFE6
 14209                           postdec1	equ	0xFE5
 14210                           plusw1	equ	0xFE3
 14211                           fsr1h	equ	0xFE2
 14212                           fsr1l	equ	0xFE1
 14213                           indf2	equ	0xFDF
 14214                           postinc2	equ	0xFDE
 14215                           postdec2	equ	0xFDD
 14216                           fsr2h	equ	0xFDA
 14217                           fsr2l	equ	0xFD9
 14218                           status	equ	0xFD8
 14219                           
 14220 ;; *************** function _UpdateCfList *****************
 14221 ;; Defined at:
 14222 ;;		line 824 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 14223 ;; Parameters:    Size  Location     Type
 14224 ;;  bufferLength    1    wreg     unsigned char 
 14225 ;;  joinAccept      2   70[BANK0 ] PTR struct .
 14226 ;;		 -> radioBuffer(271), LORAWAN_RxDone@hdr(2), 
 14227 ;; Auto vars:     Size  Location     Type
 14228 ;;  bufferLength    1   72[BANK0 ] unsigned char 
 14229 ;;  frequency       4   73[BANK0 ] unsigned long 
 14230 ;;  i               1   78[BANK0 ] unsigned char 
 14231 ;;  channelIndex    1   77[BANK0 ] unsigned char 
 14232 ;; Return value:  Size  Location     Type
 14233 ;;                  1    wreg      void 
 14234 ;; Registers used:
 14235 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14236 ;; Tracked objects:
 14237 ;;		On entry : 0/0
 14238 ;;		On exit  : 0/0
 14239 ;;		Unchanged: 0/0
 14240 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14241 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14242 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14243 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14244 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14245 ;;Total ram usage:        9 bytes
 14246 ;; Hardware stack levels used:    1
 14247 ;; Hardware stack levels required when called:    9
 14248 ;; This function calls:
 14249 ;;		_LORAWAN_SetChannelIdStatus
 14250 ;;		_ValidateFrequency
 14251 ;;		___lmul
 14252 ;;		___wmul
 14253 ;;		_memcpy
 14254 ;; This function is called by:
 14255 ;;		_LORAWAN_RxDone
 14256 ;; This function uses a non-reentrant model
 14257 ;;
 14258                           
 14259                           	psect	text65
 14260  00469E                     __ptext65:
 14261                           	opt stack 0
 14262  00469E                     _UpdateCfList:
 14263                           	opt stack 17
 14264                           
 14265                           ; BSR set to: 0
 14266                           ;incstack = 0
 14267                           ;UpdateCfList@bufferLength stored from wreg
 14268  00469E  0100               	movlb	0	; () banked
 14269  0046A0  6FA8               	movwf	UpdateCfList@bufferLength& (0+255),b
 14270                           
 14271                           ;lorawan_eu.c: 826: uint8_t i;
 14272                           ;lorawan_eu.c: 827: uint32_t frequency;
 14273                           ;lorawan_eu.c: 828: uint8_t channelIndex;
 14274                           ;lorawan_eu.c: 830: if ( (bufferLength == 33) )
 14275  0046A2  0E21               	movlw	33
 14276  0046A4  0100               	movlb	0	; () banked
 14277  0046A6  19A8               	xorwf	UpdateCfList@bufferLength& (0+255),w,b
 14278  0046A8  A4D8               	btfss	status,2,c
 14279  0046AA  0012               	return	
 14280                           
 14281                           ; BSR set to: 0
 14282                           ;lorawan_eu.c: 831: {
 14283                           ;lorawan_eu.c: 833: channelIndex = 3;
 14284  0046AC  0E03               	movlw	3
 14285  0046AE  6FAD               	movwf	UpdateCfList@channelIndex& (0+255),b
 14286                           
 14287                           ;lorawan_eu.c: 835: for (i = 0; i < 5; i++ )
 14288  0046B0  0E00               	movlw	0
 14289  0046B2  6FAE               	movwf	UpdateCfList@i& (0+255),b
 14290  0046B4                     l10869:
 14291                           
 14292                           ; BSR set to: 0
 14293  0046B4  0E04               	movlw	4
 14294  0046B6  65AE               	cpfsgt	UpdateCfList@i& (0+255),b
 14295  0046B8  D001               	goto	l1997
 14296  0046BA  D0E5               	goto	u10920
 14297  0046BC                     l1997:
 14298                           
 14299                           ; BSR set to: 0
 14300                           ;lorawan_eu.c: 836: {
 14301                           ;lorawan_eu.c: 837: frequency = 0;
 14302                           
 14303                           ; BSR set to: 0
 14304  0046BC  0E00               	movlw	0
 14305  0046BE  6FA9               	movwf	UpdateCfList@frequency& (0+255),b
 14306  0046C0  0E00               	movlw	0
 14307  0046C2  6FAA               	movwf	(UpdateCfList@frequency+1)& (0+255),b
 14308  0046C4  0E00               	movlw	0
 14309  0046C6  6FAB               	movwf	(UpdateCfList@frequency+2)& (0+255),b
 14310  0046C8  0E00               	movlw	0
 14311  0046CA  6FAC               	movwf	(UpdateCfList@frequency+3)& (0+255),b
 14312                           
 14313                           ; BSR set to: 0
 14314                           ;lorawan_eu.c: 838: memcpy (&frequency, joinAccept->members.cfList + 3*i, 3);
 14315  0046CC  0EA9               	movlw	low UpdateCfList@frequency
 14316  0046CE  6F60               	movwf	memcpy@d1& (0+255),b
 14317  0046D0  0E00               	movlw	high UpdateCfList@frequency
 14318  0046D2  6F61               	movwf	(memcpy@d1+1)& (0+255),b
 14319  0046D4  51AE               	movf	UpdateCfList@i& (0+255),w,b
 14320  0046D6  0D03               	mullw	3
 14321  0046D8  0E0D               	movlw	13
 14322  0046DA  26F3               	addwf	prodl,f,c
 14323  0046DC  0E00               	movlw	0
 14324  0046DE  22F4               	addwfc	prodh,f,c
 14325  0046E0  50F3               	movf	prodl,w,c
 14326  0046E2  25A6               	addwf	UpdateCfList@joinAccept& (0+255),w,b
 14327  0046E4  6F62               	movwf	memcpy@s1& (0+255),b
 14328  0046E6  50F4               	movf	prodh,w,c
 14329  0046E8  21A7               	addwfc	(UpdateCfList@joinAccept+1)& (0+255),w,b
 14330  0046EA  6F63               	movwf	(memcpy@s1+1)& (0+255),b
 14331  0046EC  0E00               	movlw	0
 14332  0046EE  6F65               	movwf	(memcpy@n+1)& (0+255),b
 14333  0046F0  0E03               	movlw	3
 14334  0046F2  6F64               	movwf	memcpy@n& (0+255),b
 14335  0046F4  EC5D  F041         	call	_memcpy	;wreg free
 14336                           
 14337                           ;lorawan_eu.c: 839: frequency *= 100;
 14338  0046F8  C0A9  F09A         	movff	UpdateCfList@frequency,___lmul@multiplier
 14339  0046FC  C0AA  F09B         	movff	UpdateCfList@frequency+1,___lmul@multiplier+1
 14340  004700  C0AB  F09C         	movff	UpdateCfList@frequency+2,___lmul@multiplier+2
 14341  004704  C0AC  F09D         	movff	UpdateCfList@frequency+3,___lmul@multiplier+3
 14342  004708  0E64               	movlw	100
 14343  00470A  0100               	movlb	0	; () banked
 14344  00470C  6F9E               	movwf	___lmul@multiplicand& (0+255),b
 14345  00470E  0E00               	movlw	0
 14346  004710  6F9F               	movwf	(___lmul@multiplicand+1)& (0+255),b
 14347  004712  0E00               	movlw	0
 14348  004714  6FA0               	movwf	(___lmul@multiplicand+2)& (0+255),b
 14349  004716  0E00               	movlw	0
 14350  004718  6FA1               	movwf	(___lmul@multiplicand+3)& (0+255),b
 14351  00471A  EC73  F042         	call	___lmul	;wreg free
 14352  00471E  C09A  F0A9         	movff	?___lmul,UpdateCfList@frequency
 14353  004722  C09B  F0AA         	movff	?___lmul+1,UpdateCfList@frequency+1
 14354  004726  C09C  F0AB         	movff	?___lmul+2,UpdateCfList@frequency+2
 14355  00472A  C09D  F0AC         	movff	?___lmul+3,UpdateCfList@frequency+3
 14356                           
 14357                           ;lorawan_eu.c: 840: if (frequency != 0)
 14358  00472E  0100               	movlb	0	; () banked
 14359  004730  51A9               	movf	UpdateCfList@frequency& (0+255),w,b
 14360  004732  11AA               	iorwf	(UpdateCfList@frequency+1)& (0+255),w,b
 14361  004734  11AB               	iorwf	(UpdateCfList@frequency+2)& (0+255),w,b
 14362  004736  11AC               	iorwf	(UpdateCfList@frequency+3)& (0+255),w,b
 14363  004738  B4D8               	btfsc	status,2,c
 14364  00473A  D09B               	goto	l1999
 14365                           
 14366                           ; BSR set to: 0
 14367                           ;lorawan_eu.c: 841: {
 14368                           ;lorawan_eu.c: 842: if (ValidateFrequency (frequency) == OK)
 14369  00473C  C0A9  F060         	movff	UpdateCfList@frequency,ValidateFrequency@frequencyNew
 14370  004740  C0AA  F061         	movff	UpdateCfList@frequency+1,ValidateFrequency@frequencyNew+1
 14371  004744  C0AB  F062         	movff	UpdateCfList@frequency+2,ValidateFrequency@frequencyNew+2
 14372  004748  C0AC  F063         	movff	UpdateCfList@frequency+3,ValidateFrequency@frequencyNew+3
 14373  00474C  EC35  F040         	call	_ValidateFrequency	;wreg free
 14374  004750  0900               	iorlw	0
 14375  004752  A4D8               	btfss	status,2,c
 14376  004754  D095               	goto	l2001
 14377                           
 14378                           ;lorawan_eu.c: 843: {
 14379                           ;lorawan_eu.c: 844: Channels[i+channelIndex].frequency = frequency;
 14380  004756  0100               	movlb	0	; () banked
 14381  004758  51AE               	movf	UpdateCfList@i& (0+255),w,b
 14382  00475A  25AD               	addwf	UpdateCfList@channelIndex& (0+255),w,b
 14383  00475C  6F60               	movwf	___wmul@multiplier& (0+255),b
 14384  00475E  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
 14385  004760  3761               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 14386  004762  0E00               	movlw	0
 14387  004764  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 14388  004766  0E0E               	movlw	14
 14389  004768  6F62               	movwf	___wmul@multiplicand& (0+255),b
 14390  00476A  ECF3  F047         	call	___wmul	;wreg free
 14391  00476E  0E00               	movlw	low _Channels
 14392  004770  0100               	movlb	0	; () banked
 14393  004772  2560               	addwf	?___wmul& (0+255),w,b
 14394  004774  6ED9               	movwf	fsr2l,c
 14395  004776  0E04               	movlw	high _Channels
 14396  004778  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 14397  00477A  6EDA               	movwf	fsr2h,c
 14398  00477C  C0A9  FFDE         	movff	UpdateCfList@frequency,postinc2
 14399  004780  C0AA  FFDE         	movff	UpdateCfList@frequency+1,postinc2
 14400  004784  C0AB  FFDE         	movff	UpdateCfList@frequency+2,postinc2
 14401  004788  C0AC  FFDE         	movff	UpdateCfList@frequency+3,postinc2
 14402                           
 14403                           ;lorawan_eu.c: 845: Channels[i+channelIndex].dataRange.max = 5;
 14404  00478C  51AE               	movf	UpdateCfList@i& (0+255),w,b
 14405  00478E  25AD               	addwf	UpdateCfList@channelIndex& (0+255),w,b
 14406  004790  6F60               	movwf	___wmul@multiplier& (0+255),b
 14407  004792  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
 14408  004794  3761               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 14409  004796  0E00               	movlw	0
 14410  004798  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 14411  00479A  0E0E               	movlw	14
 14412  00479C  6F62               	movwf	___wmul@multiplicand& (0+255),b
 14413  00479E  ECF3  F047         	call	___wmul	;wreg free
 14414  0047A2  0E05               	movlw	5
 14415  0047A4  0100               	movlb	0	; () banked
 14416  0047A6  2760               	addwf	?___wmul& (0+255),f,b
 14417  0047A8  0E00               	movlw	0
 14418  0047AA  2361               	addwfc	(?___wmul+1)& (0+255),f,b
 14419  0047AC  0E00               	movlw	low _Channels
 14420  0047AE  2560               	addwf	?___wmul& (0+255),w,b
 14421  0047B0  6ED9               	movwf	fsr2l,c
 14422  0047B2  0E04               	movlw	high _Channels
 14423  0047B4  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 14424  0047B6  6EDA               	movwf	fsr2h,c
 14425  0047B8  0104               	movlb	4	; () banked
 14426  0047BA  50DF               	movf	223,w,c
 14427  0047BC  0B0F               	andlw	-241
 14428  0047BE  0950               	iorlw	80
 14429  0047C0  6EDF               	movwf	223,c
 14430                           
 14431                           ;lorawan_eu.c: 846: Channels[i+channelIndex].dataRange.min = 0;
 14432  0047C2  0100               	movlb	0	; () banked
 14433  0047C4  51AE               	movf	UpdateCfList@i& (0+255),w,b
 14434  0047C6  25AD               	addwf	UpdateCfList@channelIndex& (0+255),w,b
 14435  0047C8  6F60               	movwf	___wmul@multiplier& (0+255),b
 14436  0047CA  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
 14437  0047CC  3761               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 14438  0047CE  0E00               	movlw	0
 14439  0047D0  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 14440  0047D2  0E0E               	movlw	14
 14441  0047D4  6F62               	movwf	___wmul@multiplicand& (0+255),b
 14442  0047D6  ECF3  F047         	call	___wmul	;wreg free
 14443  0047DA  0E05               	movlw	5
 14444  0047DC  0100               	movlb	0	; () banked
 14445  0047DE  2760               	addwf	?___wmul& (0+255),f,b
 14446  0047E0  0E00               	movlw	0
 14447  0047E2  2361               	addwfc	(?___wmul+1)& (0+255),f,b
 14448  0047E4  0E00               	movlw	low _Channels
 14449  0047E6  2560               	addwf	?___wmul& (0+255),w,b
 14450  0047E8  6ED9               	movwf	fsr2l,c
 14451  0047EA  0E04               	movlw	high _Channels
 14452  0047EC  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 14453  0047EE  6EDA               	movwf	fsr2h,c
 14454  0047F0  0104               	movlb	4	; () banked
 14455  0047F2  90DF               	bcf	223,0,c
 14456  0047F4  92DF               	bcf	223,1,c
 14457  0047F6  94DF               	bcf	223,2,c
 14458  0047F8  96DF               	bcf	223,3,c
 14459                           
 14460                           ;lorawan_eu.c: 847: Channels[i+channelIndex].dutyCycle = 999;
 14461  0047FA  0100               	movlb	0	; () banked
 14462  0047FC  51AE               	movf	UpdateCfList@i& (0+255),w,b
 14463  0047FE  25AD               	addwf	UpdateCfList@channelIndex& (0+255),w,b
 14464  004800  6F60               	movwf	___wmul@multiplier& (0+255),b
 14465  004802  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
 14466  004804  3761               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 14467  004806  0E00               	movlw	0
 14468  004808  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 14469  00480A  0E0E               	movlw	14
 14470  00480C  6F62               	movwf	___wmul@multiplicand& (0+255),b
 14471  00480E  ECF3  F047         	call	___wmul	;wreg free
 14472  004812  0E06               	movlw	6
 14473  004814  0100               	movlb	0	; () banked
 14474  004816  2760               	addwf	?___wmul& (0+255),f,b
 14475  004818  0E00               	movlw	0
 14476  00481A  2361               	addwfc	(?___wmul+1)& (0+255),f,b
 14477  00481C  0E00               	movlw	low _Channels
 14478  00481E  2560               	addwf	?___wmul& (0+255),w,b
 14479  004820  6ED9               	movwf	fsr2l,c
 14480  004822  0E04               	movlw	high _Channels
 14481  004824  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 14482  004826  6EDA               	movwf	fsr2h,c
 14483  004828  0EE7               	movlw	231
 14484  00482A  6EDE               	movwf	postinc2,c
 14485  00482C  0E03               	movlw	3
 14486  00482E  6EDD               	movwf	postdec2,c
 14487                           
 14488                           ;lorawan_eu.c: 848: Channels[i+channelIndex].parametersDefined = 0xFF;
 14489  004830  51AE               	movf	UpdateCfList@i& (0+255),w,b
 14490  004832  25AD               	addwf	UpdateCfList@channelIndex& (0+255),w,b
 14491  004834  6F60               	movwf	___wmul@multiplier& (0+255),b
 14492  004836  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
 14493  004838  3761               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 14494  00483A  0E00               	movlw	0
 14495  00483C  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 14496  00483E  0E0E               	movlw	14
 14497  004840  6F62               	movwf	___wmul@multiplicand& (0+255),b
 14498  004842  ECF3  F047         	call	___wmul	;wreg free
 14499  004846  0E0D               	movlw	13
 14500  004848  0100               	movlb	0	; () banked
 14501  00484A  2760               	addwf	?___wmul& (0+255),f,b
 14502  00484C  0E00               	movlw	0
 14503  00484E  2361               	addwfc	(?___wmul+1)& (0+255),f,b
 14504  004850  0E00               	movlw	low _Channels
 14505  004852  2560               	addwf	?___wmul& (0+255),w,b
 14506  004854  6ED9               	movwf	fsr2l,c
 14507  004856  0E04               	movlw	high _Channels
 14508  004858  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 14509  00485A  6EDA               	movwf	fsr2h,c
 14510  00485C  0EFF               	movlw	255
 14511  00485E  6EDF               	movwf	indf2,c
 14512                           
 14513                           ;lorawan_eu.c: 849: LORAWAN_SetChannelIdStatus(i+channelIndex, 1);
 14514  004860  0E01               	movlw	1
 14515  004862  6F64               	movwf	LORAWAN_SetChannelIdStatus@statusNew& (0+255),b
 14516  004864  51AE               	movf	UpdateCfList@i& (0+255),w,b
 14517  004866  25AD               	addwf	UpdateCfList@channelIndex& (0+255),w,b
 14518  004868  EC19  F042         	call	_LORAWAN_SetChannelIdStatus
 14519                           
 14520                           ;lorawan_eu.c: 850: loRa.macStatus.channelsModified = 1;
 14521  00486C  0102               	movlb	2	; () banked
 14522  00486E  8709               	bsf	(_loRa+3)& (0+255),3,b
 14523                           
 14524                           ; BSR set to: 2
 14525                           ;lorawan_eu.c: 851: }
 14526                           ;lorawan_eu.c: 852: }
 14527  004870  D007               	goto	l2001
 14528  004872                     l1999:
 14529                           
 14530                           ;lorawan_eu.c: 853: else
 14531                           ;lorawan_eu.c: 854: {
 14532                           ;lorawan_eu.c: 855: LORAWAN_SetChannelIdStatus(i+channelIndex, 0);
 14533                           
 14534                           ; BSR set to: 2
 14535  004872  0E00               	movlw	0
 14536  004874  0100               	movlb	0	; () banked
 14537  004876  6F64               	movwf	LORAWAN_SetChannelIdStatus@statusNew& (0+255),b
 14538  004878  51AE               	movf	UpdateCfList@i& (0+255),w,b
 14539  00487A  25AD               	addwf	UpdateCfList@channelIndex& (0+255),w,b
 14540  00487C  EC19  F042         	call	_LORAWAN_SetChannelIdStatus
 14541  004880                     l2001:
 14542  004880  0100               	movlb	0	; () banked
 14543  004882  2BAE               	incf	UpdateCfList@i& (0+255),f,b
 14544  004884  D717               	goto	l10869
 14545  004886                     u10920:
 14546                           
 14547                           ; BSR set to: 0
 14548                           ;lorawan_eu.c: 856: }
 14549                           ;lorawan_eu.c: 857: }
 14550                           ;lorawan_eu.c: 859: loRa.macStatus.channelsModified = 1;
 14551  004886  0102               	movlb	2	; () banked
 14552  004888  8709               	bsf	(_loRa+3)& (0+255),3,b
 14553  00488A  0012               	return	
 14554  00488C                     __end_of_UpdateCfList:
 14555                           	opt stack 0
 14556                           tosu	equ	0xFFF
 14557                           tosh	equ	0xFFE
 14558                           tosl	equ	0xFFD
 14559                           pclath	equ	0xFFA
 14560                           tblptru	equ	0xFF8
 14561                           tblptrh	equ	0xFF7
 14562                           tblptrl	equ	0xFF6
 14563                           tablat	equ	0xFF5
 14564                           prodh	equ	0xFF4
 14565                           prodl	equ	0xFF3
 14566                           intcon	equ	0xFF2
 14567                           intcon2	equ	0xFF1
 14568                           intcon3	equ	0xFF0
 14569                           postinc0	equ	0xFEE
 14570                           wreg	equ	0xFE8
 14571                           postinc1	equ	0xFE6
 14572                           postdec1	equ	0xFE5
 14573                           plusw1	equ	0xFE3
 14574                           fsr1h	equ	0xFE2
 14575                           fsr1l	equ	0xFE1
 14576                           indf2	equ	0xFDF
 14577                           postinc2	equ	0xFDE
 14578                           postdec2	equ	0xFDD
 14579                           fsr2h	equ	0xFDA
 14580                           fsr2l	equ	0xFD9
 14581                           status	equ	0xFD8
 14582                           
 14583 ;; *************** function _StartReTxTimer *****************
 14584 ;; Defined at:
 14585 ;;		line 902 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 14586 ;; Parameters:    Size  Location     Type
 14587 ;;		None
 14588 ;; Auto vars:     Size  Location     Type
 14589 ;;  minim           4   62[BANK0 ] unsigned long 
 14590 ;;  i               1   66[BANK0 ] unsigned char 
 14591 ;; Return value:  Size  Location     Type
 14592 ;;                  1    wreg      void 
 14593 ;; Registers used:
 14594 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 14595 ;; Tracked objects:
 14596 ;;		On entry : 0/0
 14597 ;;		On exit  : 0/0
 14598 ;;		Unchanged: 0/0
 14599 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14600 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14601 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14602 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14603 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14604 ;;Total ram usage:        9 bytes
 14605 ;; Hardware stack levels used:    1
 14606 ;; Hardware stack levels required when called:   11
 14607 ;; This function calls:
 14608 ;;		_SwTimerSetTimeout
 14609 ;;		_SwTimerStart
 14610 ;;		___lldiv
 14611 ;; This function is called by:
 14612 ;;		_LORAWAN_RxDone
 14613 ;; This function uses a non-reentrant model
 14614 ;;
 14615                           
 14616                           	psect	text66
 14617  0050EC                     __ptext66:
 14618                           	opt stack 0
 14619  0050EC                     _StartReTxTimer:
 14620                           	opt stack 15
 14621                           
 14622                           ;lorawan_eu.c: 904: uint8_t i;
 14623                           ;lorawan_eu.c: 905: uint32_t minim = (4294967295UL);
 14624                           
 14625                           ;incstack = 0
 14626  0050EC  0100               	movlb	0	; () banked
 14627  0050EE  699E               	setf	StartReTxTimer@minim& (0+255),b
 14628  0050F0  699F               	setf	(StartReTxTimer@minim+1)& (0+255),b
 14629  0050F2  69A0               	setf	(StartReTxTimer@minim+2)& (0+255),b
 14630  0050F4  69A1               	setf	(StartReTxTimer@minim+3)& (0+255),b
 14631                           
 14632                           ; BSR set to: 0
 14633                           ;lorawan_eu.c: 907: for (i = 0; i <= loRa.maxChannels; i++)
 14634  0050F6  0E00               	movlw	0
 14635  0050F8  6FA2               	movwf	StartReTxTimer@i& (0+255),b
 14636  0050FA  D07C               	goto	l2018
 14637  0050FC                     
 14638                           ;lorawan_eu.c: 908: {
 14639                           ;lorawan_eu.c: 909: if ( (Channels[i].status == 1) && (Channels[i].channelTimer != 0) &&
      +                           (Channels[i].channelTimer <= minim) && (loRa.currentDataRate >= Channels[i].dataRange.m
      +                          in) && (loRa.currentDataRate <= Channels[i].dataRange.max) )
 14640                           
 14641                           ; BSR set to: 0
 14642  0050FC  0100               	movlb	0	; () banked
 14643  0050FE  51A2               	movf	StartReTxTimer@i& (0+255),w,b
 14644  005100  0D0E               	mullw	14
 14645  005102  0E04               	movlw	4
 14646  005104  26F3               	addwf	prodl,f,c
 14647  005106  0E00               	movlw	0
 14648  005108  22F4               	addwfc	prodh,f,c
 14649  00510A  0E00               	movlw	low _Channels
 14650  00510C  24F3               	addwf	prodl,w,c
 14651  00510E  6ED9               	movwf	fsr2l,c
 14652  005110  0E04               	movlw	high _Channels
 14653  005112  20F4               	addwfc	prodh,w,c
 14654  005114  6EDA               	movwf	fsr2h,c
 14655  005116  04DE               	decf	postinc2,w,c
 14656  005118  A4D8               	btfss	status,2,c
 14657  00511A  D06A               	goto	l2020
 14658                           
 14659                           ; BSR set to: 0
 14660  00511C  51A2               	movf	StartReTxTimer@i& (0+255),w,b
 14661  00511E  0D0E               	mullw	14
 14662  005120  0E08               	movlw	8
 14663  005122  26F3               	addwf	prodl,f,c
 14664  005124  0E00               	movlw	0
 14665  005126  22F4               	addwfc	prodh,f,c
 14666  005128  0E00               	movlw	low _Channels
 14667  00512A  24F3               	addwf	prodl,w,c
 14668  00512C  6ED9               	movwf	fsr2l,c
 14669  00512E  0E04               	movlw	high _Channels
 14670  005130  20F4               	addwfc	prodh,w,c
 14671  005132  6EDA               	movwf	fsr2h,c
 14672  005134  50DE               	movf	postinc2,w,c
 14673  005136  10DE               	iorwf	postinc2,w,c
 14674  005138  10DE               	iorwf	postinc2,w,c
 14675  00513A  10DE               	iorwf	postinc2,w,c
 14676  00513C  B4D8               	btfsc	status,2,c
 14677  00513E  D058               	goto	l2020
 14678                           
 14679                           ; BSR set to: 0
 14680  005140  51A2               	movf	StartReTxTimer@i& (0+255),w,b
 14681  005142  0D0E               	mullw	14
 14682  005144  0E08               	movlw	8
 14683  005146  26F3               	addwf	prodl,f,c
 14684  005148  0E00               	movlw	0
 14685  00514A  22F4               	addwfc	prodh,f,c
 14686  00514C  0E00               	movlw	low _Channels
 14687  00514E  24F3               	addwf	prodl,w,c
 14688  005150  6ED9               	movwf	fsr2l,c
 14689  005152  0E04               	movlw	high _Channels
 14690  005154  20F4               	addwfc	prodh,w,c
 14691  005156  6EDA               	movwf	fsr2h,c
 14692  005158  50DE               	movf	postinc2,w,c
 14693  00515A  5D9E               	subwf	StartReTxTimer@minim& (0+255),w,b
 14694  00515C  50DE               	movf	postinc2,w,c
 14695  00515E  599F               	subwfb	(StartReTxTimer@minim+1)& (0+255),w,b
 14696  005160  50DE               	movf	postinc2,w,c
 14697  005162  59A0               	subwfb	(StartReTxTimer@minim+2)& (0+255),w,b
 14698  005164  50DE               	movf	postinc2,w,c
 14699  005166  59A1               	subwfb	(StartReTxTimer@minim+3)& (0+255),w,b
 14700  005168  A0D8               	btfss	status,0,c
 14701  00516A  D042               	goto	l2020
 14702                           
 14703                           ; BSR set to: 0
 14704  00516C  51A2               	movf	StartReTxTimer@i& (0+255),w,b
 14705  00516E  0D0E               	mullw	14
 14706  005170  0E05               	movlw	5
 14707  005172  26F3               	addwf	prodl,f,c
 14708  005174  0E00               	movlw	0
 14709  005176  22F4               	addwfc	prodh,f,c
 14710  005178  0E00               	movlw	low _Channels
 14711  00517A  24F3               	addwf	prodl,w,c
 14712  00517C  6ED9               	movwf	fsr2l,c
 14713  00517E  0E04               	movlw	high _Channels
 14714  005180  20F4               	addwfc	prodh,w,c
 14715  005182  6EDA               	movwf	fsr2h,c
 14716  005184  0104               	movlb	4	; () banked
 14717  005186  50DF               	movf	223,w,c
 14718  005188  0B0F               	andlw	15
 14719  00518A  0100               	movlb	0	; () banked
 14720  00518C  6F9A               	movwf	??_StartReTxTimer& (0+255),b
 14721  00518E  519A               	movf	??_StartReTxTimer& (0+255),w,b
 14722  005190  0102               	movlb	2	; () banked
 14723  005192  5DE5               	subwf	(_loRa+223)& (0+255),w,b
 14724  005194  A0D8               	btfss	status,0,c
 14725  005196  D02C               	goto	l2020
 14726                           
 14727                           ; BSR set to: 2
 14728  005198  0100               	movlb	0	; () banked
 14729  00519A  51A2               	movf	StartReTxTimer@i& (0+255),w,b
 14730  00519C  0D0E               	mullw	14
 14731  00519E  0E05               	movlw	5
 14732  0051A0  26F3               	addwf	prodl,f,c
 14733  0051A2  0E00               	movlw	0
 14734  0051A4  22F4               	addwfc	prodh,f,c
 14735  0051A6  0E00               	movlw	low _Channels
 14736  0051A8  24F3               	addwf	prodl,w,c
 14737  0051AA  6ED9               	movwf	fsr2l,c
 14738  0051AC  0E04               	movlw	high _Channels
 14739  0051AE  20F4               	addwfc	prodh,w,c
 14740  0051B0  6EDA               	movwf	fsr2h,c
 14741  0051B2  0104               	movlb	4	; () banked
 14742  0051B4  38DF               	swapf	223,w,c
 14743  0051B6  0B0F               	andlw	15
 14744  0051B8  0100               	movlb	0	; () banked
 14745  0051BA  6F9A               	movwf	??_StartReTxTimer& (0+255),b
 14746  0051BC  0102               	movlb	2	; () banked
 14747  0051BE  51E5               	movf	(_loRa+223)& (0+255),w,b
 14748  0051C0  0100               	movlb	0	; () banked
 14749  0051C2  5D9A               	subwf	??_StartReTxTimer& (0+255),w,b
 14750  0051C4  A0D8               	btfss	status,0,c
 14751  0051C6  D014               	goto	l2020
 14752                           
 14753                           ; BSR set to: 0
 14754                           ;lorawan_eu.c: 910: {
 14755                           ;lorawan_eu.c: 911: minim = Channels[i].channelTimer;
 14756  0051C8  51A2               	movf	StartReTxTimer@i& (0+255),w,b
 14757  0051CA  0D0E               	mullw	14
 14758  0051CC  0E08               	movlw	8
 14759  0051CE  26F3               	addwf	prodl,f,c
 14760  0051D0  0E00               	movlw	0
 14761  0051D2  22F4               	addwfc	prodh,f,c
 14762  0051D4  0E00               	movlw	low _Channels
 14763  0051D6  24F3               	addwf	prodl,w,c
 14764  0051D8  6ED9               	movwf	fsr2l,c
 14765  0051DA  0E04               	movlw	high _Channels
 14766  0051DC  20F4               	addwfc	prodh,w,c
 14767  0051DE  6EDA               	movwf	fsr2h,c
 14768  0051E0  CFDE F09E          	movff	postinc2,StartReTxTimer@minim
 14769  0051E4  CFDE F09F          	movff	postinc2,StartReTxTimer@minim+1
 14770  0051E8  CFDE F0A0          	movff	postinc2,StartReTxTimer@minim+2
 14771  0051EC  CFDE F0A1          	movff	postinc2,StartReTxTimer@minim+3
 14772  0051F0                     l2020:
 14773                           
 14774                           ; BSR set to: 0
 14775  0051F0  0100               	movlb	0	; () banked
 14776  0051F2  2BA2               	incf	StartReTxTimer@i& (0+255),f,b
 14777  0051F4                     l2018:
 14778                           
 14779                           ; BSR set to: 0
 14780                           
 14781                           ; BSR set to: 0
 14782  0051F4  51A2               	movf	StartReTxTimer@i& (0+255),w,b
 14783  0051F6  0102               	movlb	2	; () banked
 14784  0051F8  5DF3               	subwf	(_loRa+237)& (0+255),w,b
 14785  0051FA  B0D8               	btfsc	status,0,c
 14786  0051FC  D77F               	goto	l2019
 14787                           
 14788                           ; BSR set to: 2
 14789                           ;lorawan_eu.c: 912: }
 14790                           ;lorawan_eu.c: 913: }
 14791                           ;lorawan_eu.c: 914: loRa.macStatus.macState = RETRANSMISSION_DELAY;
 14792                           
 14793                           ; BSR set to: 2
 14794  0051FE  5108               	movf	(_loRa+2)& (0+255),w,b
 14795  005200  0BF0               	andlw	-16
 14796  005202  0906               	iorlw	6
 14797  005204  6F08               	movwf	(_loRa+2)& (0+255),b
 14798                           
 14799                           ; BSR set to: 2
 14800                           ;lorawan_eu.c: 915: SwTimerSetTimeout (loRa.automaticReplyTimerId, ( (((uint32_t)(minim)
      +                          ) << (12)) / 125UL ) );
 14801  005206  C09E  F09A         	movff	StartReTxTimer@minim,??_StartReTxTimer
 14802  00520A  C09F  F09B         	movff	StartReTxTimer@minim+1,??_StartReTxTimer+1
 14803  00520E  C0A0  F09C         	movff	StartReTxTimer@minim+2,??_StartReTxTimer+2
 14804  005212  C0A1  F09D         	movff	StartReTxTimer@minim+3,??_StartReTxTimer+3
 14805  005216  0E0C               	movlw	12
 14806  005218                     u11205:
 14807  005218  90D8               	bcf	status,0,c
 14808  00521A  0100               	movlb	0	; () banked
 14809  00521C  379A               	rlcf	??_StartReTxTimer& (0+255),f,b
 14810  00521E  379B               	rlcf	(??_StartReTxTimer+1)& (0+255),f,b
 14811  005220  379C               	rlcf	(??_StartReTxTimer+2)& (0+255),f,b
 14812  005222  379D               	rlcf	(??_StartReTxTimer+3)& (0+255),f,b
 14813  005224  2EE8               	decfsz	wreg,f,c
 14814  005226  D7F8               	goto	u11205
 14815  005228  C09A  F060         	movff	??_StartReTxTimer,___lldiv@dividend
 14816  00522C  C09B  F061         	movff	??_StartReTxTimer+1,___lldiv@dividend+1
 14817  005230  C09C  F062         	movff	??_StartReTxTimer+2,___lldiv@dividend+2
 14818  005234  C09D  F063         	movff	??_StartReTxTimer+3,___lldiv@dividend+3
 14819  005238  0E7D               	movlw	125
 14820  00523A  6F64               	movwf	___lldiv@divisor& (0+255),b
 14821  00523C  0E00               	movlw	0
 14822  00523E  6F65               	movwf	(___lldiv@divisor+1)& (0+255),b
 14823  005240  0E00               	movlw	0
 14824  005242  6F66               	movwf	(___lldiv@divisor+2)& (0+255),b
 14825  005244  0E00               	movlw	0
 14826  005246  6F67               	movwf	(___lldiv@divisor+3)& (0+255),b
 14827  005248  EC0A  F03D         	call	___lldiv	;wreg free
 14828  00524C  C060  F06D         	movff	?___lldiv,SwTimerSetTimeout@timeout
 14829  005250  C061  F06E         	movff	?___lldiv+1,SwTimerSetTimeout@timeout+1
 14830  005254  C062  F06F         	movff	?___lldiv+2,SwTimerSetTimeout@timeout+2
 14831  005258  C063  F070         	movff	?___lldiv+3,SwTimerSetTimeout@timeout+3
 14832  00525C  0102               	movlb	2	; () banked
 14833  00525E  51EC               	movf	(_loRa+230)& (0+255),w,b
 14834  005260  EC27  F045         	call	_SwTimerSetTimeout
 14835                           
 14836                           ;lorawan_eu.c: 916: SwTimerStart (loRa.automaticReplyTimerId);
 14837  005264  0102               	movlb	2	; () banked
 14838  005266  51EC               	movf	(_loRa+230)& (0+255),w,b
 14839  005268  ECDA  F03A         	call	_SwTimerStart
 14840  00526C  0012               	return		;funcret
 14841  00526E                     __end_of_StartReTxTimer:
 14842                           	opt stack 0
 14843                           tosu	equ	0xFFF
 14844                           tosh	equ	0xFFE
 14845                           tosl	equ	0xFFD
 14846                           pclath	equ	0xFFA
 14847                           tblptru	equ	0xFF8
 14848                           tblptrh	equ	0xFF7
 14849                           tblptrl	equ	0xFF6
 14850                           tablat	equ	0xFF5
 14851                           prodh	equ	0xFF4
 14852                           prodl	equ	0xFF3
 14853                           intcon	equ	0xFF2
 14854                           intcon2	equ	0xFF1
 14855                           intcon3	equ	0xFF0
 14856                           postinc0	equ	0xFEE
 14857                           wreg	equ	0xFE8
 14858                           postinc1	equ	0xFE6
 14859                           postdec1	equ	0xFE5
 14860                           plusw1	equ	0xFE3
 14861                           fsr1h	equ	0xFE2
 14862                           fsr1l	equ	0xFE1
 14863                           indf2	equ	0xFDF
 14864                           postinc2	equ	0xFDE
 14865                           postdec2	equ	0xFDD
 14866                           fsr2h	equ	0xFDA
 14867                           fsr2l	equ	0xFD9
 14868                           status	equ	0xFD8
 14869                           
 14870 ;; *************** function _SetReceptionNotOkState *****************
 14871 ;; Defined at:
 14872 ;;		line 1997 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 14873 ;; Parameters:    Size  Location     Type
 14874 ;;		None
 14875 ;; Auto vars:     Size  Location     Type
 14876 ;;		None
 14877 ;; Return value:  Size  Location     Type
 14878 ;;                  1    wreg      void 
 14879 ;; Registers used:
 14880 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14881 ;; Tracked objects:
 14882 ;;		On entry : 0/0
 14883 ;;		On exit  : 0/0
 14884 ;;		Unchanged: 0/0
 14885 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14886 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14887 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14888 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14889 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14890 ;;Total ram usage:        0 bytes
 14891 ;; Hardware stack levels used:    1
 14892 ;; Hardware stack levels required when called:   14
 14893 ;; This function calls:
 14894 ;;		_LORAWAN_EnterContinuousReceive
 14895 ;;		_RxData
 14896 ;; This function is called by:
 14897 ;;		_LORAWAN_RxDone
 14898 ;; This function uses a non-reentrant model
 14899 ;;
 14900                           
 14901                           	psect	text67
 14902  007B9A                     __ptext67:
 14903                           	opt stack 0
 14904  007B9A                     _SetReceptionNotOkState:
 14905                           	opt stack 12
 14906                           
 14907                           ;lorawan.c: 1999: if ( (loRa.macStatus.macState == RX2_OPEN) || ( (loRa.macStatus.macSta
      +                          te == RX1_OPEN) && (loRa.rx2DelayExpired) ) )
 14908                           
 14909                           ;incstack = 0
 14910  007B9A  0102               	movlb	2	; () banked
 14911  007B9C  5108               	movf	(_loRa+2)& (0+255),w,b
 14912  007B9E  0B0F               	andlw	15
 14913  007BA0  0A05               	xorlw	5
 14914  007BA2  B4D8               	btfsc	status,2,c
 14915  007BA4  D008               	goto	u11010
 14916                           
 14917                           ; BSR set to: 2
 14918  007BA6  5108               	movf	(_loRa+2)& (0+255),w,b
 14919  007BA8  0B0F               	andlw	15
 14920  007BAA  0A03               	xorlw	3
 14921  007BAC  A4D8               	btfss	status,2,c
 14922  007BAE  D029               	goto	l1336
 14923                           
 14924                           ; BSR set to: 2
 14925  007BB0  51F7               	movf	(_loRa+241)& (0+255),w,b
 14926  007BB2  B4D8               	btfsc	status,2,c
 14927  007BB4  D026               	goto	l1336
 14928  007BB6                     u11010:
 14929                           
 14930                           ; BSR set to: 2
 14931                           ;lorawan.c: 2000: {
 14932                           ;lorawan.c: 2001: loRa.lorawanMacStatus.ackRequiredFromNextDownlinkMessage = 0;
 14933  007BB6  9106               	bcf	_loRa& (0+255),0,b
 14934                           
 14935                           ;lorawan.c: 2002: loRa.macStatus.macState = IDLE;
 14936  007BB8  9108               	bcf	(_loRa+2)& (0+255),0,b
 14937  007BBA  9308               	bcf	(_loRa+2)& (0+255),1,b
 14938  007BBC  9508               	bcf	(_loRa+2)& (0+255),2,b
 14939  007BBE  9708               	bcf	(_loRa+2)& (0+255),3,b
 14940                           
 14941                           ; BSR set to: 2
 14942                           ;lorawan.c: 2004: if ((loRa.deviceClass == CLASS_A) && (rxPayload.RxAppData != (0)))
 14943  007BC0  5118               	movf	(_loRa+18)& (0+255),w,b
 14944  007BC2  A4D8               	btfss	status,2,c
 14945  007BC4  D01C               	goto	u11049
 14946                           
 14947                           ; BSR set to: 2
 14948  007BC6  0101               	movlb	1	; () banked
 14949  007BC8  510C               	movf	_rxPayload& (0+255),w,b
 14950  007BCA  110D               	iorwf	(_rxPayload+1)& (0+255),w,b
 14951  007BCC  B4D8               	btfsc	status,2,c
 14952  007BCE  D017               	goto	u11049
 14953                           
 14954                           ; BSR set to: 1
 14955                           ;lorawan.c: 2005: {
 14956                           ;lorawan.c: 2006: loRa.lorawanMacStatus.synchronization = 0;
 14957  007BD0  0102               	movlb	2	; () banked
 14958  007BD2  9B06               	bcf	_loRa& (0+255),5,b
 14959                           
 14960                           ; BSR set to: 2
 14961                           ;lorawan.c: 2007: rxPayload.RxAppData ((0), 0, MAC_NOT_OK);
 14962  007BD4  0E00               	movlw	0
 14963  007BD6  0100               	movlb	0	; () banked
 14964  007BD8  6F60               	movwf	RxData@pData& (0+255),b
 14965  007BDA  0E00               	movlw	0
 14966  007BDC  6F61               	movwf	(RxData@pData+1)& (0+255),b
 14967  007BDE  0E00               	movlw	0
 14968  007BE0  6F62               	movwf	RxData@dataLength& (0+255),b
 14969  007BE2  0E00               	movlw	0
 14970  007BE4  6F63               	movwf	RxData@status& (0+255),b
 14971  007BE6  D801               	call	u11048
 14972  007BE8  D00A               	goto	u11049
 14973  007BEA                     u11048:
 14974  007BEA  0005               	push	
 14975  007BEC  6EFA               	movwf	pclath,c
 14976  007BEE  0101               	movlb	1	; () banked
 14977  007BF0  510C               	movf	_rxPayload& (0+255),w,b
 14978  007BF2  6EFD               	movwf	tosl,c
 14979  007BF4  510D               	movf	(_rxPayload+1)& (0+255),w,b
 14980  007BF6  6EFE               	movwf	tosh,c
 14981  007BF8  6AFF               	clrf	tosu,c
 14982  007BFA  50FA               	movf	pclath,w,c
 14983  007BFC  0012               	return		;indir
 14984  007BFE                     u11049:
 14985                           
 14986                           ;lorawan.c: 2008: }
 14987                           ;lorawan.c: 2009: loRa.macStatus.rxDone = 0;
 14988  007BFE  0102               	movlb	2	; () banked
 14989  007C00  9309               	bcf	(_loRa+3)& (0+255),1,b
 14990  007C02                     l1336:
 14991                           
 14992                           ; BSR set to: 2
 14993                           ;lorawan.c: 2010: }
 14994                           ;lorawan.c: 2012: if (loRa.deviceClass == CLASS_C)
 14995                           
 14996                           ; BSR set to: 2
 14997  007C02  0E02               	movlw	2
 14998  007C04  1918               	xorwf	(_loRa+18)& (0+255),w,b
 14999  007C06  A4D8               	btfss	status,2,c
 15000  007C08  0012               	return	
 15001                           
 15002                           ; BSR set to: 2
 15003                           ;lorawan.c: 2013: {
 15004                           ;lorawan.c: 2014: loRa.macStatus.macState = CLASS_C_RX2_2_OPEN;
 15005  007C0A  5108               	movf	(_loRa+2)& (0+255),w,b
 15006  007C0C  0BF0               	andlw	-16
 15007  007C0E  0909               	iorlw	9
 15008  007C10  6F08               	movwf	(_loRa+2)& (0+255),b
 15009                           
 15010                           ; BSR set to: 2
 15011                           ;lorawan.c: 2015: LORAWAN_EnterContinuousReceive();
 15012  007C12  EC0C  F03E         	call	_LORAWAN_EnterContinuousReceive	;wreg free
 15013  007C16  0012               	return	
 15014  007C18                     __end_of_SetReceptionNotOkState:
 15015                           	opt stack 0
 15016                           tosu	equ	0xFFF
 15017                           tosh	equ	0xFFE
 15018                           tosl	equ	0xFFD
 15019                           pclath	equ	0xFFA
 15020                           tblptru	equ	0xFF8
 15021                           tblptrh	equ	0xFF7
 15022                           tblptrl	equ	0xFF6
 15023                           tablat	equ	0xFF5
 15024                           prodh	equ	0xFF4
 15025                           prodl	equ	0xFF3
 15026                           intcon	equ	0xFF2
 15027                           intcon2	equ	0xFF1
 15028                           intcon3	equ	0xFF0
 15029                           postinc0	equ	0xFEE
 15030                           wreg	equ	0xFE8
 15031                           postinc1	equ	0xFE6
 15032                           postdec1	equ	0xFE5
 15033                           plusw1	equ	0xFE3
 15034                           fsr1h	equ	0xFE2
 15035                           fsr1l	equ	0xFE1
 15036                           indf2	equ	0xFDF
 15037                           postinc2	equ	0xFDE
 15038                           postdec2	equ	0xFDD
 15039                           fsr2h	equ	0xFDA
 15040                           fsr2l	equ	0xFD9
 15041                           status	equ	0xFD8
 15042                           
 15043 ;; *************** function _SetJoinFailState *****************
 15044 ;; Defined at:
 15045 ;;		line 1104 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 15046 ;; Parameters:    Size  Location     Type
 15047 ;;		None
 15048 ;; Auto vars:     Size  Location     Type
 15049 ;;		None
 15050 ;; Return value:  Size  Location     Type
 15051 ;;                  1    wreg      void 
 15052 ;; Registers used:
 15053 ;;		wreg, status,2, status,0, pclath, tosl, cstack
 15054 ;; Tracked objects:
 15055 ;;		On entry : 0/0
 15056 ;;		On exit  : 0/0
 15057 ;;		Unchanged: 0/0
 15058 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15059 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15060 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15061 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15062 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15063 ;;Total ram usage:        0 bytes
 15064 ;; Hardware stack levels used:    1
 15065 ;; Hardware stack levels required when called:    8
 15066 ;; This function calls:
 15067 ;;		_RxJoinResponse
 15068 ;; This function is called by:
 15069 ;;		_LORAWAN_RxDone
 15070 ;;		_LORAWAN_RxTimeout
 15071 ;; This function uses a non-reentrant model
 15072 ;;
 15073                           
 15074                           	psect	text68
 15075  008D1C                     __ptext68:
 15076                           	opt stack 0
 15077  008D1C                     _SetJoinFailState:
 15078                           	opt stack 18
 15079                           
 15080                           ;lorawan.c: 1106: loRa.macStatus.networkJoined = 0;
 15081                           
 15082                           ;incstack = 0
 15083  008D1C  0102               	movlb	2	; () banked
 15084  008D1E  9908               	bcf	(_loRa+2)& (0+255),4,b
 15085                           
 15086                           ;lorawan.c: 1107: loRa.lorawanMacStatus.joining = 0;
 15087  008D20  9506               	bcf	_loRa& (0+255),2,b
 15088                           
 15089                           ;lorawan.c: 1108: loRa.macStatus.macState = IDLE;
 15090  008D22  9108               	bcf	(_loRa+2)& (0+255),0,b
 15091  008D24  9308               	bcf	(_loRa+2)& (0+255),1,b
 15092  008D26  9508               	bcf	(_loRa+2)& (0+255),2,b
 15093  008D28  9708               	bcf	(_loRa+2)& (0+255),3,b
 15094                           
 15095                           ; BSR set to: 2
 15096                           ;lorawan.c: 1109: if (rxPayload.RxJoinResponse != (0))
 15097  008D2A  0101               	movlb	1	; () banked
 15098  008D2C  510E               	movf	(_rxPayload+2)& (0+255),w,b
 15099  008D2E  110F               	iorwf	(_rxPayload+3)& (0+255),w,b
 15100  008D30  B4D8               	btfsc	status,2,c
 15101  008D32  0012               	return	
 15102                           
 15103                           ; BSR set to: 1
 15104                           ;lorawan.c: 1110: {
 15105                           ;lorawan.c: 1111: rxPayload.RxJoinResponse(0);
 15106  008D34  D801               	call	u10858
 15107  008D36  0012               	return	
 15108  008D38                     u10858:
 15109  008D38  0005               	push	
 15110  008D3A  6EFA               	movwf	pclath,c
 15111  008D3C  510E               	movf	(_rxPayload+2)& (0+255),w,b
 15112  008D3E  6EFD               	movwf	tosl,c
 15113  008D40  510F               	movf	(_rxPayload+3)& (0+255),w,b
 15114  008D42  6EFE               	movwf	tosh,c
 15115  008D44  6AFF               	clrf	tosu,c
 15116  008D46  50FA               	movf	pclath,w,c
 15117  008D48  0E00               	movlw	0
 15118  008D4A  0012               	return		;indir
 15119  008D4C                     __end_of_SetJoinFailState:
 15120                           	opt stack 0
 15121                           tosu	equ	0xFFF
 15122                           tosh	equ	0xFFE
 15123                           tosl	equ	0xFFD
 15124                           pclath	equ	0xFFA
 15125                           tblptru	equ	0xFF8
 15126                           tblptrh	equ	0xFF7
 15127                           tblptrl	equ	0xFF6
 15128                           tablat	equ	0xFF5
 15129                           prodh	equ	0xFF4
 15130                           prodl	equ	0xFF3
 15131                           intcon	equ	0xFF2
 15132                           intcon2	equ	0xFF1
 15133                           intcon3	equ	0xFF0
 15134                           postinc0	equ	0xFEE
 15135                           wreg	equ	0xFE8
 15136                           postinc1	equ	0xFE6
 15137                           postdec1	equ	0xFE5
 15138                           plusw1	equ	0xFE3
 15139                           fsr1h	equ	0xFE2
 15140                           fsr1l	equ	0xFE1
 15141                           indf2	equ	0xFDF
 15142                           postinc2	equ	0xFDE
 15143                           postdec2	equ	0xFDD
 15144                           fsr2h	equ	0xFDA
 15145                           fsr2l	equ	0xFD9
 15146                           status	equ	0xFD8
 15147                           
 15148 ;; *************** function _RxJoinResponse *****************
 15149 ;; Defined at:
 15150 ;;		line 87 in file "main.c"
 15151 ;; Parameters:    Size  Location     Type
 15152 ;;  status          1    wreg     unsigned char 
 15153 ;; Auto vars:     Size  Location     Type
 15154 ;;  status          1    0[COMRAM] unsigned char 
 15155 ;; Return value:  Size  Location     Type
 15156 ;;                  1    wreg      void 
 15157 ;; Registers used:
 15158 ;;		wreg
 15159 ;; Tracked objects:
 15160 ;;		On entry : 0/0
 15161 ;;		On exit  : 0/0
 15162 ;;		Unchanged: 0/0
 15163 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15164 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15165 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15166 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15167 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15168 ;;Total ram usage:        0 bytes
 15169 ;; Hardware stack levels used:    1
 15170 ;; Hardware stack levels required when called:    7
 15171 ;; This function calls:
 15172 ;;		Nothing
 15173 ;; This function is called by:
 15174 ;;		_main
 15175 ;;		_UpdateJoinSuccessState
 15176 ;;		_SetJoinFailState
 15177 ;; This function uses a non-reentrant model
 15178 ;;
 15179                           
 15180                           	psect	text69
 15181  0095F0                     __ptext69:
 15182                           	opt stack 0
 15183  0095F0                     _RxJoinResponse:
 15184                           	opt stack 20
 15185                           
 15186                           ;incstack = 0
 15187  0095F0  0012               	return		;funcret
 15188  0095F2                     __end_of_RxJoinResponse:
 15189                           	opt stack 0
 15190                           tosu	equ	0xFFF
 15191                           tosh	equ	0xFFE
 15192                           tosl	equ	0xFFD
 15193                           pclath	equ	0xFFA
 15194                           tblptru	equ	0xFF8
 15195                           tblptrh	equ	0xFF7
 15196                           tblptrl	equ	0xFF6
 15197                           tablat	equ	0xFF5
 15198                           prodh	equ	0xFF4
 15199                           prodl	equ	0xFF3
 15200                           intcon	equ	0xFF2
 15201                           intcon2	equ	0xFF1
 15202                           intcon3	equ	0xFF0
 15203                           postinc0	equ	0xFEE
 15204                           wreg	equ	0xFE8
 15205                           postinc1	equ	0xFE6
 15206                           postdec1	equ	0xFE5
 15207                           plusw1	equ	0xFE3
 15208                           fsr1h	equ	0xFE2
 15209                           fsr1l	equ	0xFE1
 15210                           indf2	equ	0xFDF
 15211                           postinc2	equ	0xFDE
 15212                           postdec2	equ	0xFDD
 15213                           fsr2h	equ	0xFDA
 15214                           fsr2l	equ	0xFD9
 15215                           status	equ	0xFD8
 15216                           
 15217 ;; *************** function _MacExecuteCommands *****************
 15218 ;; Defined at:
 15219 ;;		line 1575 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 15220 ;; Parameters:    Size  Location     Type
 15221 ;;  buffer          2   80[BANK0 ] PTR unsigned char 
 15222 ;;		 -> radioBuffer(271), LORAWAN_RxDone@hdr(2), 
 15223 ;;  fOptsLen        1   82[BANK0 ] unsigned char 
 15224 ;; Auto vars:     Size  Location     Type
 15225 ;;  ptr             2   86[BANK0 ] PTR unsigned char 
 15226 ;;		 -> radioBuffer(271), LORAWAN_RxDone@hdr(2), 
 15227 ;;  done            1   85[BANK0 ] unsigned char 
 15228 ;; Return value:  Size  Location     Type
 15229 ;;                  2   80[BANK0 ] PTR unsigned char 
 15230 ;; Registers used:
 15231 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15232 ;; Tracked objects:
 15233 ;;		On entry : 0/0
 15234 ;;		On exit  : 0/0
 15235 ;;		Unchanged: 0/0
 15236 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15237 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15238 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15239 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15240 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15241 ;;Total ram usage:        8 bytes
 15242 ;; Hardware stack levels used:    1
 15243 ;; Hardware stack levels required when called:   11
 15244 ;; This function calls:
 15245 ;;		_ExecuteDevStatus
 15246 ;;		_ExecuteDutyCycle
 15247 ;;		_ExecuteLinkAdr
 15248 ;;		_ExecuteLinkCheck
 15249 ;;		_ExecuteNewChannel
 15250 ;;		_ExecuteRxParamSetupReq
 15251 ;;		_ExecuteRxTimingSetup
 15252 ;; This function is called by:
 15253 ;;		_LORAWAN_RxDone
 15254 ;; This function uses a non-reentrant model
 15255 ;;
 15256                           
 15257                           	psect	text70
 15258  0032EA                     __ptext70:
 15259                           	opt stack 0
 15260  0032EA                     _MacExecuteCommands:
 15261                           	opt stack 15
 15262                           
 15263                           ;lorawan.c: 1577: bool done = 0;
 15264                           
 15265                           ;incstack = 0
 15266  0032EA  0E00               	movlw	0
 15267  0032EC  0100               	movlb	0	; () banked
 15268  0032EE  6FB5               	movwf	MacExecuteCommands@done& (0+255),b
 15269                           
 15270                           ; BSR set to: 0
 15271                           ;lorawan.c: 1578: uint8_t *ptr;
 15272                           ;lorawan.c: 1579: ptr = buffer;
 15273  0032F0  C0B0  F0B6         	movff	MacExecuteCommands@buffer,MacExecuteCommands@ptr
 15274  0032F4  C0B1  F0B7         	movff	MacExecuteCommands@buffer+1,MacExecuteCommands@ptr+1
 15275                           
 15276                           ;lorawan.c: 1580: while ( (ptr < ( buffer + fOptsLen )) && (done == 0) )
 15277  0032F8  D15A               	goto	l1248
 15278  0032FA                     
 15279                           ; BSR set to: 0
 15280                           ;lorawan.c: 1581: {
 15281                           ;lorawan.c: 1583: loRa.macCommands[loRa.crtMacCmdIndex].channelMaskAck = 0;
 15282                           
 15283                           ; BSR set to: 0
 15284  0032FA  0102               	movlb	2	; () banked
 15285  0032FC  51AD               	movf	(_loRa+167)& (0+255),w,b
 15286  0032FE  0D02               	mullw	2
 15287  003300  0E06               	movlw	low _loRa
 15288  003302  0100               	movlb	0	; () banked
 15289  003304  6FB3               	movwf	??_MacExecuteCommands& (0+255),b
 15290  003306  0E02               	movlw	high _loRa
 15291  003308  6FB4               	movwf	(??_MacExecuteCommands+1)& (0+255),b
 15292  00330A  0EA8               	movlw	168
 15293  00330C  27B3               	addwf	??_MacExecuteCommands& (0+255),f,b
 15294  00330E  0E00               	movlw	0
 15295  003310  23B4               	addwfc	(??_MacExecuteCommands+1)& (0+255),f,b
 15296  003312  50F3               	movf	prodl,w,c
 15297  003314  27B3               	addwf	??_MacExecuteCommands& (0+255),f,b
 15298  003316  50F4               	movf	prodh,w,c
 15299  003318  23B4               	addwfc	(??_MacExecuteCommands+1)& (0+255),f,b
 15300  00331A  0E01               	movlw	1
 15301  00331C  25B3               	addwf	??_MacExecuteCommands& (0+255),w,b
 15302  00331E  6ED9               	movwf	fsr2l,c
 15303  003320  0E00               	movlw	0
 15304  003322  21B4               	addwfc	(??_MacExecuteCommands+1)& (0+255),w,b
 15305  003324  6EDA               	movwf	fsr2h,c
 15306  003326  0102               	movlb	2	; () banked
 15307  003328  90DF               	bcf	indf2,0,c
 15308                           
 15309                           ;lorawan.c: 1584: loRa.macCommands[loRa.crtMacCmdIndex].dataRateAck = 0;
 15310  00332A  51AD               	movf	(_loRa+167)& (0+255),w,b
 15311  00332C  0D02               	mullw	2
 15312  00332E  0E06               	movlw	low _loRa
 15313  003330  0100               	movlb	0	; () banked
 15314  003332  6FB3               	movwf	??_MacExecuteCommands& (0+255),b
 15315  003334  0E02               	movlw	high _loRa
 15316  003336  6FB4               	movwf	(??_MacExecuteCommands+1)& (0+255),b
 15317  003338  0EA8               	movlw	168
 15318  00333A  27B3               	addwf	??_MacExecuteCommands& (0+255),f,b
 15319  00333C  0E00               	movlw	0
 15320  00333E  23B4               	addwfc	(??_MacExecuteCommands+1)& (0+255),f,b
 15321  003340  50F3               	movf	prodl,w,c
 15322  003342  27B3               	addwf	??_MacExecuteCommands& (0+255),f,b
 15323  003344  50F4               	movf	prodh,w,c
 15324  003346  23B4               	addwfc	(??_MacExecuteCommands+1)& (0+255),f,b
 15325  003348  0E01               	movlw	1
 15326  00334A  25B3               	addwf	??_MacExecuteCommands& (0+255),w,b
 15327  00334C  6ED9               	movwf	fsr2l,c
 15328  00334E  0E00               	movlw	0
 15329  003350  21B4               	addwfc	(??_MacExecuteCommands+1)& (0+255),w,b
 15330  003352  6EDA               	movwf	fsr2h,c
 15331  003354  0102               	movlb	2	; () banked
 15332  003356  92DF               	bcf	indf2,1,c
 15333                           
 15334                           ;lorawan.c: 1585: loRa.macCommands[loRa.crtMacCmdIndex].powerAck = 0;
 15335  003358  51AD               	movf	(_loRa+167)& (0+255),w,b
 15336  00335A  0D02               	mullw	2
 15337  00335C  0E06               	movlw	low _loRa
 15338  00335E  0100               	movlb	0	; () banked
 15339  003360  6FB3               	movwf	??_MacExecuteCommands& (0+255),b
 15340  003362  0E02               	movlw	high _loRa
 15341  003364  6FB4               	movwf	(??_MacExecuteCommands+1)& (0+255),b
 15342  003366  0EA8               	movlw	168
 15343  003368  27B3               	addwf	??_MacExecuteCommands& (0+255),f,b
 15344  00336A  0E00               	movlw	0
 15345  00336C  23B4               	addwfc	(??_MacExecuteCommands+1)& (0+255),f,b
 15346  00336E  50F3               	movf	prodl,w,c
 15347  003370  27B3               	addwf	??_MacExecuteCommands& (0+255),f,b
 15348  003372  50F4               	movf	prodh,w,c
 15349  003374  23B4               	addwfc	(??_MacExecuteCommands+1)& (0+255),f,b
 15350  003376  0E01               	movlw	1
 15351  003378  25B3               	addwf	??_MacExecuteCommands& (0+255),w,b
 15352  00337A  6ED9               	movwf	fsr2l,c
 15353  00337C  0E00               	movlw	0
 15354  00337E  21B4               	addwfc	(??_MacExecuteCommands+1)& (0+255),w,b
 15355  003380  6EDA               	movwf	fsr2h,c
 15356  003382  0102               	movlb	2	; () banked
 15357  003384  94DF               	bcf	indf2,2,c
 15358                           
 15359                           ;lorawan.c: 1586: loRa.macCommands[loRa.crtMacCmdIndex].channelAck = 0;
 15360  003386  51AD               	movf	(_loRa+167)& (0+255),w,b
 15361  003388  0D02               	mullw	2
 15362  00338A  0E06               	movlw	low _loRa
 15363  00338C  0100               	movlb	0	; () banked
 15364  00338E  6FB3               	movwf	??_MacExecuteCommands& (0+255),b
 15365  003390  0E02               	movlw	high _loRa
 15366  003392  6FB4               	movwf	(??_MacExecuteCommands+1)& (0+255),b
 15367  003394  0EA8               	movlw	168
 15368  003396  27B3               	addwf	??_MacExecuteCommands& (0+255),f,b
 15369  003398  0E00               	movlw	0
 15370  00339A  23B4               	addwfc	(??_MacExecuteCommands+1)& (0+255),f,b
 15371  00339C  50F3               	movf	prodl,w,c
 15372  00339E  27B3               	addwf	??_MacExecuteCommands& (0+255),f,b
 15373  0033A0  50F4               	movf	prodh,w,c
 15374  0033A2  23B4               	addwfc	(??_MacExecuteCommands+1)& (0+255),f,b
 15375  0033A4  0E01               	movlw	1
 15376  0033A6  25B3               	addwf	??_MacExecuteCommands& (0+255),w,b
 15377  0033A8  6ED9               	movwf	fsr2l,c
 15378  0033AA  0E00               	movlw	0
 15379  0033AC  21B4               	addwfc	(??_MacExecuteCommands+1)& (0+255),w,b
 15380  0033AE  6EDA               	movwf	fsr2h,c
 15381  0033B0  0102               	movlb	2	; () banked
 15382  0033B2  96DF               	bcf	indf2,3,c
 15383                           
 15384                           ;lorawan.c: 1587: loRa.macCommands[loRa.crtMacCmdIndex].dataRateReceiveWindowAck = 0;
 15385  0033B4  51AD               	movf	(_loRa+167)& (0+255),w,b
 15386  0033B6  0D02               	mullw	2
 15387  0033B8  0E06               	movlw	low _loRa
 15388  0033BA  0100               	movlb	0	; () banked
 15389  0033BC  6FB3               	movwf	??_MacExecuteCommands& (0+255),b
 15390  0033BE  0E02               	movlw	high _loRa
 15391  0033C0  6FB4               	movwf	(??_MacExecuteCommands+1)& (0+255),b
 15392  0033C2  0EA8               	movlw	168
 15393  0033C4  27B3               	addwf	??_MacExecuteCommands& (0+255),f,b
 15394  0033C6  0E00               	movlw	0
 15395  0033C8  23B4               	addwfc	(??_MacExecuteCommands+1)& (0+255),f,b
 15396  0033CA  50F3               	movf	prodl,w,c
 15397  0033CC  27B3               	addwf	??_MacExecuteCommands& (0+255),f,b
 15398  0033CE  50F4               	movf	prodh,w,c
 15399  0033D0  23B4               	addwfc	(??_MacExecuteCommands+1)& (0+255),f,b
 15400  0033D2  0E01               	movlw	1
 15401  0033D4  25B3               	addwf	??_MacExecuteCommands& (0+255),w,b
 15402  0033D6  6ED9               	movwf	fsr2l,c
 15403  0033D8  0E00               	movlw	0
 15404  0033DA  21B4               	addwfc	(??_MacExecuteCommands+1)& (0+255),w,b
 15405  0033DC  6EDA               	movwf	fsr2h,c
 15406  0033DE  0102               	movlb	2	; () banked
 15407  0033E0  98DF               	bcf	indf2,4,c
 15408                           
 15409                           ;lorawan.c: 1588: loRa.macCommands[loRa.crtMacCmdIndex].rx1DROffestAck = 0;
 15410  0033E2  51AD               	movf	(_loRa+167)& (0+255),w,b
 15411  0033E4  0D02               	mullw	2
 15412  0033E6  0E06               	movlw	low _loRa
 15413  0033E8  0100               	movlb	0	; () banked
 15414  0033EA  6FB3               	movwf	??_MacExecuteCommands& (0+255),b
 15415  0033EC  0E02               	movlw	high _loRa
 15416  0033EE  6FB4               	movwf	(??_MacExecuteCommands+1)& (0+255),b
 15417  0033F0  0EA8               	movlw	168
 15418  0033F2  27B3               	addwf	??_MacExecuteCommands& (0+255),f,b
 15419  0033F4  0E00               	movlw	0
 15420  0033F6  23B4               	addwfc	(??_MacExecuteCommands+1)& (0+255),f,b
 15421  0033F8  50F3               	movf	prodl,w,c
 15422  0033FA  27B3               	addwf	??_MacExecuteCommands& (0+255),f,b
 15423  0033FC  50F4               	movf	prodh,w,c
 15424  0033FE  23B4               	addwfc	(??_MacExecuteCommands+1)& (0+255),f,b
 15425  003400  0E01               	movlw	1
 15426  003402  25B3               	addwf	??_MacExecuteCommands& (0+255),w,b
 15427  003404  6ED9               	movwf	fsr2l,c
 15428  003406  0E00               	movlw	0
 15429  003408  21B4               	addwfc	(??_MacExecuteCommands+1)& (0+255),w,b
 15430  00340A  6EDA               	movwf	fsr2h,c
 15431  00340C  0102               	movlb	2	; () banked
 15432  00340E  9ADF               	bcf	indf2,5,c
 15433                           
 15434                           ;lorawan.c: 1589: loRa.macCommands[loRa.crtMacCmdIndex].dataRateRangeAck = 0;
 15435  003410  51AD               	movf	(_loRa+167)& (0+255),w,b
 15436  003412  0D02               	mullw	2
 15437  003414  0E06               	movlw	low _loRa
 15438  003416  0100               	movlb	0	; () banked
 15439  003418  6FB3               	movwf	??_MacExecuteCommands& (0+255),b
 15440  00341A  0E02               	movlw	high _loRa
 15441  00341C  6FB4               	movwf	(??_MacExecuteCommands+1)& (0+255),b
 15442  00341E  0EA8               	movlw	168
 15443  003420  27B3               	addwf	??_MacExecuteCommands& (0+255),f,b
 15444  003422  0E00               	movlw	0
 15445  003424  23B4               	addwfc	(??_MacExecuteCommands+1)& (0+255),f,b
 15446  003426  50F3               	movf	prodl,w,c
 15447  003428  27B3               	addwf	??_MacExecuteCommands& (0+255),f,b
 15448  00342A  50F4               	movf	prodh,w,c
 15449  00342C  23B4               	addwfc	(??_MacExecuteCommands+1)& (0+255),f,b
 15450  00342E  0E01               	movlw	1
 15451  003430  25B3               	addwf	??_MacExecuteCommands& (0+255),w,b
 15452  003432  6ED9               	movwf	fsr2l,c
 15453  003434  0E00               	movlw	0
 15454  003436  21B4               	addwfc	(??_MacExecuteCommands+1)& (0+255),w,b
 15455  003438  6EDA               	movwf	fsr2h,c
 15456  00343A  0102               	movlb	2	; () banked
 15457  00343C  9CDF               	bcf	indf2,6,c
 15458                           
 15459                           ;lorawan.c: 1590: loRa.macCommands[loRa.crtMacCmdIndex].channelFrequencyAck = 0;
 15460  00343E  51AD               	movf	(_loRa+167)& (0+255),w,b
 15461  003440  0D02               	mullw	2
 15462  003442  0E06               	movlw	low _loRa
 15463  003444  0100               	movlb	0	; () banked
 15464  003446  6FB3               	movwf	??_MacExecuteCommands& (0+255),b
 15465  003448  0E02               	movlw	high _loRa
 15466  00344A  6FB4               	movwf	(??_MacExecuteCommands+1)& (0+255),b
 15467  00344C  0EA8               	movlw	168
 15468  00344E  27B3               	addwf	??_MacExecuteCommands& (0+255),f,b
 15469  003450  0E00               	movlw	0
 15470  003452  23B4               	addwfc	(??_MacExecuteCommands+1)& (0+255),f,b
 15471  003454  50F3               	movf	prodl,w,c
 15472  003456  27B3               	addwf	??_MacExecuteCommands& (0+255),f,b
 15473  003458  50F4               	movf	prodh,w,c
 15474  00345A  23B4               	addwfc	(??_MacExecuteCommands+1)& (0+255),f,b
 15475  00345C  0E01               	movlw	1
 15476  00345E  25B3               	addwf	??_MacExecuteCommands& (0+255),w,b
 15477  003460  6ED9               	movwf	fsr2l,c
 15478  003462  0E00               	movlw	0
 15479  003464  21B4               	addwfc	(??_MacExecuteCommands+1)& (0+255),w,b
 15480  003466  6EDA               	movwf	fsr2h,c
 15481  003468  0102               	movlb	2	; () banked
 15482  00346A  9EDF               	bcf	indf2,7,c
 15483                           
 15484                           ; BSR set to: 2
 15485                           ;lorawan.c: 1593: loRa.macCommands[loRa.crtMacCmdIndex].receivedCid = *ptr;
 15486  00346C  C0B6  FFD9         	movff	MacExecuteCommands@ptr,fsr2l
 15487  003470  C0B7  FFDA         	movff	MacExecuteCommands@ptr+1,fsr2h
 15488  003474  51AD               	movf	(_loRa+167)& (0+255),w,b
 15489  003476  0D02               	mullw	2
 15490  003478  0EAE               	movlw	low (_loRa+168)
 15491  00347A  24F3               	addwf	prodl,w,c
 15492  00347C  6EE9               	movwf	fsr0l,c
 15493  00347E  0E02               	movlw	high (_loRa+168)
 15494  003480  20F4               	addwfc	prodh,w,c
 15495  003482  6EEA               	movwf	fsr0h,c
 15496  003484  CFDF FFEF          	movff	indf2,indf0
 15497                           
 15498                           ;lorawan.c: 1595: switch (*ptr ++)
 15499  003488  D064               	goto	l1238
 15500  00348A                     
 15501                           ;lorawan.c: 1598: {
 15502                           ;lorawan.c: 1599: ptr = ExecuteLinkCheck (ptr );
 15503                           
 15504                           ; BSR set to: 2
 15505  00348A  C0B6  F060         	movff	MacExecuteCommands@ptr,ExecuteLinkCheck@ptr
 15506  00348E  C0B7  F061         	movff	MacExecuteCommands@ptr+1,ExecuteLinkCheck@ptr+1
 15507  003492  EC75  F046         	call	_ExecuteLinkCheck
 15508  003496  C060  F0B6         	movff	?_ExecuteLinkCheck,MacExecuteCommands@ptr
 15509  00349A  C061  F0B7         	movff	?_ExecuteLinkCheck+1,MacExecuteCommands@ptr+1
 15510  00349E  D04D               	goto	l11001
 15511  0034A0                     
 15512                           ;lorawan.c: 1605: {
 15513                           ;lorawan.c: 1606: ptr = ExecuteLinkAdr (ptr );
 15514                           
 15515                           ; BSR set to: 2
 15516  0034A0  C0B6  F06F         	movff	MacExecuteCommands@ptr,ExecuteLinkAdr@ptr
 15517  0034A4  C0B7  F070         	movff	MacExecuteCommands@ptr+1,ExecuteLinkAdr@ptr+1
 15518  0034A8  ECF0  F01A         	call	_ExecuteLinkAdr	;wreg free
 15519  0034AC  C06F  F0B6         	movff	?_ExecuteLinkAdr,MacExecuteCommands@ptr
 15520  0034B0  C070  F0B7         	movff	?_ExecuteLinkAdr+1,MacExecuteCommands@ptr+1
 15521                           
 15522                           ;lorawan.c: 1607: } break;
 15523  0034B4  D06C               	goto	l1240
 15524  0034B6                     
 15525                           ;lorawan.c: 1610: {
 15526                           ;lorawan.c: 1611: ptr = ExecuteDutyCycle(ptr);
 15527  0034B6  C0B6  F060         	movff	MacExecuteCommands@ptr,ExecuteDutyCycle@ptr
 15528  0034BA  C0B7  F061         	movff	MacExecuteCommands@ptr+1,ExecuteDutyCycle@ptr+1
 15529  0034BE  EC20  F043         	call	_ExecuteDutyCycle	;wreg free
 15530  0034C2  C060  F0B6         	movff	?_ExecuteDutyCycle,MacExecuteCommands@ptr
 15531  0034C6  C061  F0B7         	movff	?_ExecuteDutyCycle+1,MacExecuteCommands@ptr+1
 15532                           
 15533                           ;lorawan.c: 1612: } break;
 15534  0034CA  D061               	goto	l1240
 15535  0034CC                     
 15536                           ;lorawan.c: 1615: {
 15537                           ;lorawan.c: 1616: ptr = ExecuteRxParamSetupReq (ptr);
 15538  0034CC  C0B6  F0A6         	movff	MacExecuteCommands@ptr,ExecuteRxParamSetupReq@ptr
 15539  0034D0  C0B7  F0A7         	movff	MacExecuteCommands@ptr+1,ExecuteRxParamSetupReq@ptr+1
 15540  0034D4  EC45  F022         	call	_ExecuteRxParamSetupReq	;wreg free
 15541  0034D8  C0A6  F0B6         	movff	?_ExecuteRxParamSetupReq,MacExecuteCommands@ptr
 15542  0034DC  C0A7  F0B7         	movff	?_ExecuteRxParamSetupReq+1,MacExecuteCommands@ptr+1
 15543                           
 15544                           ;lorawan.c: 1617: } break;
 15545  0034E0  D056               	goto	l1240
 15546  0034E2                     
 15547                           ;lorawan.c: 1620: {
 15548                           ;lorawan.c: 1621: ptr = ExecuteDevStatus (ptr);
 15549  0034E2  C0B6  F060         	movff	MacExecuteCommands@ptr,ExecuteDevStatus@ptr
 15550  0034E6  C0B7  F061         	movff	MacExecuteCommands@ptr+1,ExecuteDevStatus@ptr+1
 15551  0034EA  EC91  F04A         	call	_ExecuteDevStatus	;wreg free
 15552  0034EE  C060  F0B6         	movff	?_ExecuteDevStatus,MacExecuteCommands@ptr
 15553  0034F2  C061  F0B7         	movff	?_ExecuteDevStatus+1,MacExecuteCommands@ptr+1
 15554                           
 15555                           ;lorawan.c: 1622: } break;
 15556  0034F6  D04B               	goto	l1240
 15557  0034F8                     
 15558                           ;lorawan.c: 1625: {
 15559                           ;lorawan.c: 1626: ptr = ExecuteNewChannel (ptr);
 15560  0034F8  C0B6  F0A6         	movff	MacExecuteCommands@ptr,ExecuteNewChannel@ptr
 15561  0034FC  C0B7  F0A7         	movff	MacExecuteCommands@ptr+1,ExecuteNewChannel@ptr+1
 15562  003500  ECA6  F01D         	call	_ExecuteNewChannel	;wreg free
 15563  003504  C0A6  F0B6         	movff	?_ExecuteNewChannel,MacExecuteCommands@ptr
 15564  003508  C0A7  F0B7         	movff	?_ExecuteNewChannel+1,MacExecuteCommands@ptr+1
 15565                           
 15566                           ;lorawan.c: 1628: } break;
 15567  00350C  D040               	goto	l1240
 15568  00350E                     
 15569                           ;lorawan.c: 1631: {
 15570                           ;lorawan.c: 1632: ptr = ExecuteRxTimingSetup (ptr);
 15571  00350E  C0B6  F067         	movff	MacExecuteCommands@ptr,ExecuteRxTimingSetup@ptr
 15572  003512  C0B7  F068         	movff	MacExecuteCommands@ptr+1,ExecuteRxTimingSetup@ptr+1
 15573  003516  ECDF  F047         	call	_ExecuteRxTimingSetup	;wreg free
 15574  00351A  C067  F0B6         	movff	?_ExecuteRxTimingSetup,MacExecuteCommands@ptr
 15575  00351E  C068  F0B7         	movff	?_ExecuteRxTimingSetup+1,MacExecuteCommands@ptr+1
 15576                           
 15577                           ;lorawan.c: 1633: } break;
 15578  003522  D035               	goto	l1240
 15579  003524                     
 15580                           ;lorawan.c: 1636: {
 15581                           ;lorawan.c: 1637: done = 1;
 15582  003524  0E01               	movlw	1
 15583  003526  0100               	movlb	0	; () banked
 15584  003528  6FB5               	movwf	MacExecuteCommands@done& (0+255),b
 15585                           
 15586                           ; BSR set to: 0
 15587                           ;lorawan.c: 1638: ptr = buffer + fOptsLen;
 15588  00352A  51B2               	movf	MacExecuteCommands@fOptsLen& (0+255),w,b
 15589  00352C  0D01               	mullw	1
 15590  00352E  50F3               	movf	prodl,w,c
 15591  003530  25B0               	addwf	MacExecuteCommands@buffer& (0+255),w,b
 15592  003532  6FB6               	movwf	MacExecuteCommands@ptr& (0+255),b
 15593  003534  50F4               	movf	prodh,w,c
 15594  003536  21B1               	addwfc	(MacExecuteCommands@buffer+1)& (0+255),w,b
 15595  003538  6FB7               	movwf	(MacExecuteCommands@ptr+1)& (0+255),b
 15596  00353A                     l11001:
 15597                           
 15598                           ; BSR set to: 0
 15599                           ;lorawan.c: 1639: loRa.macCommands[loRa.crtMacCmdIndex].receivedCid = 0xFF;
 15600  00353A  0102               	movlb	2	; () banked
 15601  00353C  51AD               	movf	(_loRa+167)& (0+255),w,b
 15602  00353E  0D02               	mullw	2
 15603  003540  0EAE               	movlw	low (_loRa+168)
 15604  003542  24F3               	addwf	prodl,w,c
 15605  003544  6ED9               	movwf	fsr2l,c
 15606  003546  0E02               	movlw	high (_loRa+168)
 15607  003548  20F4               	addwfc	prodh,w,c
 15608  00354A  6EDA               	movwf	fsr2h,c
 15609  00354C  0EFF               	movlw	255
 15610  00354E  6EDF               	movwf	indf2,c
 15611                           
 15612                           ; BSR set to: 2
 15613                           ;lorawan.c: 1641: }
 15614                           
 15615                           ;lorawan.c: 1640: } break;
 15616  003550  D01E               	goto	l1240
 15617  003552                     l1238:
 15618                           
 15619                           ; BSR set to: 2
 15620                           
 15621                           ; BSR set to: 2
 15622  003552  C0B6  FFD9         	movff	MacExecuteCommands@ptr,fsr2l
 15623  003556  C0B7  FFDA         	movff	MacExecuteCommands@ptr+1,fsr2h
 15624  00355A  0100               	movlb	0	; () banked
 15625  00355C  4BB6               	infsnz	MacExecuteCommands@ptr& (0+255),f,b
 15626  00355E  2BB7               	incf	(MacExecuteCommands@ptr+1)& (0+255),f,b
 15627  003560  50DF               	movf	indf2,w,c
 15628                           
 15629                           ; Switch size 1, requested type "space"
 15630                           ; Number of cases is 7, Range of values is 2 to 8
 15631                           ; switch strategies available:
 15632                           ; Name         Instructions Cycles
 15633                           ; simple_byte           22    12 (average)
 15634                           ;	Chosen strategy is simple_byte
 15635  003562  0A02               	xorlw	2	; case 2
 15636  003564  B4D8               	btfsc	status,2,c
 15637  003566  D791               	goto	l1239
 15638  003568  0A01               	xorlw	1	; case 3
 15639  00356A  B4D8               	btfsc	status,2,c
 15640  00356C  D799               	goto	l1241
 15641  00356E  0A07               	xorlw	7	; case 4
 15642  003570  B4D8               	btfsc	status,2,c
 15643  003572  D7A1               	goto	l1242
 15644  003574  0A01               	xorlw	1	; case 5
 15645  003576  B4D8               	btfsc	status,2,c
 15646  003578  D7A9               	goto	l1243
 15647  00357A  0A03               	xorlw	3	; case 6
 15648  00357C  B4D8               	btfsc	status,2,c
 15649  00357E  D7B1               	goto	l1244
 15650  003580  0A01               	xorlw	1	; case 7
 15651  003582  B4D8               	btfsc	status,2,c
 15652  003584  D7B9               	goto	l1245
 15653  003586  0A0F               	xorlw	15	; case 8
 15654  003588  B4D8               	btfsc	status,2,c
 15655  00358A  D7C1               	goto	l1246
 15656  00358C  D7CB               	goto	l1247
 15657  00358E                     l1240:
 15658                           
 15659                           ;lorawan.c: 1643: if((loRa.macCommands[loRa.crtMacCmdIndex].receivedCid != 0xFF) &&
 15660                           ;lorawan.c: 1644: (loRa.crtMacCmdIndex < 16))
 15661                           
 15662                           ; BSR set to: 0
 15663  00358E  0102               	movlb	2	; () banked
 15664  003590  51AD               	movf	(_loRa+167)& (0+255),w,b
 15665  003592  0D02               	mullw	2
 15666  003594  0EAE               	movlw	low (_loRa+168)
 15667  003596  24F3               	addwf	prodl,w,c
 15668  003598  6ED9               	movwf	fsr2l,c
 15669  00359A  0E02               	movlw	high (_loRa+168)
 15670  00359C  20F4               	addwfc	prodh,w,c
 15671  00359E  6EDA               	movwf	fsr2h,c
 15672  0035A0  28DE               	incf	postinc2,w,c
 15673  0035A2  B4D8               	btfsc	status,2,c
 15674  0035A4  D004               	goto	l1248
 15675                           
 15676                           ; BSR set to: 2
 15677  0035A6  0E10               	movlw	16
 15678  0035A8  61AD               	cpfslt	(_loRa+167)& (0+255),b
 15679  0035AA  D001               	goto	l1248
 15680                           
 15681                           ; BSR set to: 2
 15682                           ;lorawan.c: 1645: {
 15683                           ;lorawan.c: 1646: loRa.crtMacCmdIndex ++;
 15684  0035AC  2BAD               	incf	(_loRa+167)& (0+255),f,b
 15685  0035AE                     l1248:
 15686                           
 15687                           ; BSR set to: 2
 15688                           
 15689                           ; BSR set to: 2
 15690  0035AE  0100               	movlb	0	; () banked
 15691  0035B0  51B2               	movf	MacExecuteCommands@fOptsLen& (0+255),w,b
 15692  0035B2  0D01               	mullw	1
 15693  0035B4  C0B0  F0B3         	movff	MacExecuteCommands@buffer,??_MacExecuteCommands
 15694  0035B8  C0B1  F0B4         	movff	MacExecuteCommands@buffer+1,??_MacExecuteCommands+1
 15695  0035BC  50F3               	movf	prodl,w,c
 15696  0035BE  27B3               	addwf	??_MacExecuteCommands& (0+255),f,b
 15697  0035C0  50F4               	movf	prodh,w,c
 15698  0035C2  23B4               	addwfc	(??_MacExecuteCommands+1)& (0+255),f,b
 15699  0035C4  51B3               	movf	??_MacExecuteCommands& (0+255),w,b
 15700  0035C6  5DB6               	subwf	MacExecuteCommands@ptr& (0+255),w,b
 15701  0035C8  51B4               	movf	(??_MacExecuteCommands+1)& (0+255),w,b
 15702  0035CA  59B7               	subwfb	(MacExecuteCommands@ptr+1)& (0+255),w,b
 15703  0035CC  B0D8               	btfsc	status,0,c
 15704  0035CE  D003               	goto	u11130
 15705                           
 15706                           ; BSR set to: 0
 15707  0035D0  51B5               	movf	MacExecuteCommands@done& (0+255),w,b
 15708  0035D2  B4D8               	btfsc	status,2,c
 15709  0035D4  D692               	goto	l1237
 15710  0035D6                     u11130:
 15711                           
 15712                           ; BSR set to: 0
 15713                           ;lorawan.c: 1647: }
 15714                           ;lorawan.c: 1648: }
 15715                           ;lorawan.c: 1649: return ptr;
 15716                           
 15717                           ; BSR set to: 0
 15718                           
 15719                           ; BSR set to: 0
 15720  0035D6  C0B6  F0B0         	movff	MacExecuteCommands@ptr,?_MacExecuteCommands
 15721  0035DA  C0B7  F0B1         	movff	MacExecuteCommands@ptr+1,?_MacExecuteCommands+1
 15722  0035DE  0012               	return	
 15723  0035E0                     __end_of_MacExecuteCommands:
 15724                           	opt stack 0
 15725                           tosu	equ	0xFFF
 15726                           tosh	equ	0xFFE
 15727                           tosl	equ	0xFFD
 15728                           pclath	equ	0xFFA
 15729                           tblptru	equ	0xFF8
 15730                           tblptrh	equ	0xFF7
 15731                           tblptrl	equ	0xFF6
 15732                           tablat	equ	0xFF5
 15733                           prodh	equ	0xFF4
 15734                           prodl	equ	0xFF3
 15735                           intcon	equ	0xFF2
 15736                           intcon2	equ	0xFF1
 15737                           intcon3	equ	0xFF0
 15738                           indf0	equ	0xFEF
 15739                           postinc0	equ	0xFEE
 15740                           fsr0h	equ	0xFEA
 15741                           fsr0l	equ	0xFE9
 15742                           wreg	equ	0xFE8
 15743                           postinc1	equ	0xFE6
 15744                           postdec1	equ	0xFE5
 15745                           plusw1	equ	0xFE3
 15746                           fsr1h	equ	0xFE2
 15747                           fsr1l	equ	0xFE1
 15748                           indf2	equ	0xFDF
 15749                           postinc2	equ	0xFDE
 15750                           postdec2	equ	0xFDD
 15751                           fsr2h	equ	0xFDA
 15752                           fsr2l	equ	0xFD9
 15753                           status	equ	0xFD8
 15754                           
 15755 ;; *************** function _ExecuteRxTimingSetup *****************
 15756 ;; Defined at:
 15757 ;;		line 1659 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 15758 ;; Parameters:    Size  Location     Type
 15759 ;;  ptr             2    7[BANK0 ] PTR unsigned char 
 15760 ;;		 -> radioBuffer(271), LORAWAN_RxDone@hdr(2), 
 15761 ;; Auto vars:     Size  Location     Type
 15762 ;;  delay           1    9[BANK0 ] unsigned char 
 15763 ;; Return value:  Size  Location     Type
 15764 ;;                  2    7[BANK0 ] PTR unsigned char 
 15765 ;; Registers used:
 15766 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15767 ;; Tracked objects:
 15768 ;;		On entry : 0/0
 15769 ;;		On exit  : 0/0
 15770 ;;		Unchanged: 0/0
 15771 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15772 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15773 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15774 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15775 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15776 ;;Total ram usage:        3 bytes
 15777 ;; Hardware stack levels used:    1
 15778 ;; Hardware stack levels required when called:    9
 15779 ;; This function calls:
 15780 ;;		_UpdateReceiveDelays
 15781 ;; This function is called by:
 15782 ;;		_MacExecuteCommands
 15783 ;; This function uses a non-reentrant model
 15784 ;;
 15785                           
 15786                           	psect	text71
 15787  008FBE                     __ptext71:
 15788                           	opt stack 0
 15789  008FBE                     _ExecuteRxTimingSetup:
 15790                           	opt stack 16
 15791                           
 15792                           ;lorawan.c: 1661: uint8_t delay;
 15793                           ;lorawan.c: 1663: delay = (*ptr) & 0x0F;
 15794                           
 15795                           ; BSR set to: 0
 15796                           ;incstack = 0
 15797  008FBE  C067  FFD9         	movff	ExecuteRxTimingSetup@ptr,fsr2l
 15798  008FC2  C068  FFDA         	movff	ExecuteRxTimingSetup@ptr+1,fsr2h
 15799  008FC6  50DF               	movf	indf2,w,c
 15800  008FC8  0B0F               	andlw	15
 15801  008FCA  0100               	movlb	0	; () banked
 15802  008FCC  6F69               	movwf	ExecuteRxTimingSetup@delay& (0+255),b
 15803                           
 15804                           ; BSR set to: 0
 15805                           ;lorawan.c: 1664: ptr++;
 15806  008FCE  4B67               	infsnz	ExecuteRxTimingSetup@ptr& (0+255),f,b
 15807  008FD0  2B68               	incf	(ExecuteRxTimingSetup@ptr+1)& (0+255),f,b
 15808                           
 15809                           ; BSR set to: 0
 15810                           ;lorawan.c: 1666: UpdateReceiveDelays (delay);
 15811  008FD2  5169               	movf	ExecuteRxTimingSetup@delay& (0+255),w,b
 15812  008FD4  EC6B  F045         	call	_UpdateReceiveDelays
 15813                           
 15814                           ;lorawan.c: 1667: loRa.macStatus.rxTimingSetup = 1;
 15815  008FD8  0102               	movlb	2	; () banked
 15816  008FDA  810A               	bsf	(_loRa+4)& (0+255),0,b
 15817                           
 15818                           ; BSR set to: 2
 15819                           ;lorawan.c: 1669: return ptr;
 15820  008FDC  C067  F067         	movff	ExecuteRxTimingSetup@ptr,?_ExecuteRxTimingSetup
 15821  008FE0  C068  F068         	movff	ExecuteRxTimingSetup@ptr+1,?_ExecuteRxTimingSetup+1
 15822  008FE4  0012               	return	
 15823  008FE6                     __end_of_ExecuteRxTimingSetup:
 15824                           	opt stack 0
 15825                           tosu	equ	0xFFF
 15826                           tosh	equ	0xFFE
 15827                           tosl	equ	0xFFD
 15828                           pclath	equ	0xFFA
 15829                           tblptru	equ	0xFF8
 15830                           tblptrh	equ	0xFF7
 15831                           tblptrl	equ	0xFF6
 15832                           tablat	equ	0xFF5
 15833                           prodh	equ	0xFF4
 15834                           prodl	equ	0xFF3
 15835                           intcon	equ	0xFF2
 15836                           intcon2	equ	0xFF1
 15837                           intcon3	equ	0xFF0
 15838                           indf0	equ	0xFEF
 15839                           postinc0	equ	0xFEE
 15840                           fsr0h	equ	0xFEA
 15841                           fsr0l	equ	0xFE9
 15842                           wreg	equ	0xFE8
 15843                           postinc1	equ	0xFE6
 15844                           postdec1	equ	0xFE5
 15845                           plusw1	equ	0xFE3
 15846                           fsr1h	equ	0xFE2
 15847                           fsr1l	equ	0xFE1
 15848                           indf2	equ	0xFDF
 15849                           postinc2	equ	0xFDE
 15850                           postdec2	equ	0xFDD
 15851                           fsr2h	equ	0xFDA
 15852                           fsr2l	equ	0xFD9
 15853                           status	equ	0xFD8
 15854                           
 15855 ;; *************** function _UpdateReceiveDelays *****************
 15856 ;; Defined at:
 15857 ;;		line 2026 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 15858 ;; Parameters:    Size  Location     Type
 15859 ;;  delay           1    wreg     unsigned char 
 15860 ;; Auto vars:     Size  Location     Type
 15861 ;;  delay           1    6[BANK0 ] unsigned char 
 15862 ;; Return value:  Size  Location     Type
 15863 ;;                  1    wreg      void 
 15864 ;; Registers used:
 15865 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 15866 ;; Tracked objects:
 15867 ;;		On entry : 0/0
 15868 ;;		On exit  : 0/0
 15869 ;;		Unchanged: 0/0
 15870 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15871 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15872 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15873 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15874 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15875 ;;Total ram usage:        1 bytes
 15876 ;; Hardware stack levels used:    1
 15877 ;; Hardware stack levels required when called:    8
 15878 ;; This function calls:
 15879 ;;		___wmul
 15880 ;; This function is called by:
 15881 ;;		_LORAWAN_RxDone
 15882 ;;		_ExecuteRxTimingSetup
 15883 ;; This function uses a non-reentrant model
 15884 ;;
 15885                           
 15886                           	psect	text72
 15887  008AD6                     __ptext72:
 15888                           	opt stack 0
 15889  008AD6                     _UpdateReceiveDelays:
 15890                           	opt stack 18
 15891                           
 15892                           ; BSR set to: 2
 15893                           ;incstack = 0
 15894                           ;UpdateReceiveDelays@delay stored from wreg
 15895  008AD6  0100               	movlb	0	; () banked
 15896  008AD8  6F66               	movwf	UpdateReceiveDelays@delay& (0+255),b
 15897                           
 15898                           ;lorawan.c: 2028: loRa.protocolParameters.receiveDelay1 = 1000 * delay ;
 15899  008ADA  C066  F060         	movff	UpdateReceiveDelays@delay,___wmul@multiplier
 15900  008ADE  0100               	movlb	0	; () banked
 15901  008AE0  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
 15902  008AE2  0E03               	movlw	3
 15903  008AE4  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 15904  008AE6  0EE8               	movlw	232
 15905  008AE8  6F62               	movwf	___wmul@multiplicand& (0+255),b
 15906  008AEA  ECF3  F047         	call	___wmul	;wreg free
 15907  008AEE  C060  F29A         	movff	?___wmul,_loRa+148
 15908  008AF2  C061  F29B         	movff	?___wmul+1,_loRa+149
 15909                           
 15910                           ;lorawan.c: 2029: if (delay == 0)
 15911  008AF6  0100               	movlb	0	; () banked
 15912  008AF8  5166               	movf	UpdateReceiveDelays@delay& (0+255),w,b
 15913  008AFA  A4D8               	btfss	status,2,c
 15914  008AFC  D005               	goto	l1347
 15915                           
 15916                           ; BSR set to: 0
 15917                           ;lorawan.c: 2030: {
 15918                           ;lorawan.c: 2031: loRa.protocolParameters.receiveDelay1 = 1000;
 15919  008AFE  0E03               	movlw	3
 15920  008B00  0102               	movlb	2	; () banked
 15921  008B02  6F9B               	movwf	(_loRa+149)& (0+255),b
 15922  008B04  0EE8               	movlw	232
 15923  008B06  6F9A               	movwf	(_loRa+148)& (0+255),b
 15924  008B08                     l1347:
 15925                           
 15926                           ;lorawan.c: 2032: }
 15927                           ;lorawan.c: 2034: loRa.protocolParameters.receiveDelay2 = loRa.protocolParameters.receiv
      +                          eDelay1 + 1000;
 15928                           
 15929                           ; BSR set to: 2
 15930  008B08  0EE8               	movlw	232
 15931  008B0A  0102               	movlb	2	; () banked
 15932  008B0C  259A               	addwf	(_loRa+148)& (0+255),w,b
 15933  008B0E  6F9C               	movwf	(_loRa+150)& (0+255),b
 15934  008B10  0E03               	movlw	3
 15935  008B12  219B               	addwfc	(_loRa+149)& (0+255),w,b
 15936  008B14  6F9D               	movwf	(_loRa+151)& (0+255),b
 15937                           
 15938                           ; BSR set to: 2
 15939  008B16  0012               	return		;funcret
 15940  008B18                     __end_of_UpdateReceiveDelays:
 15941                           	opt stack 0
 15942                           tosu	equ	0xFFF
 15943                           tosh	equ	0xFFE
 15944                           tosl	equ	0xFFD
 15945                           pclath	equ	0xFFA
 15946                           tblptru	equ	0xFF8
 15947                           tblptrh	equ	0xFF7
 15948                           tblptrl	equ	0xFF6
 15949                           tablat	equ	0xFF5
 15950                           prodh	equ	0xFF4
 15951                           prodl	equ	0xFF3
 15952                           intcon	equ	0xFF2
 15953                           intcon2	equ	0xFF1
 15954                           intcon3	equ	0xFF0
 15955                           indf0	equ	0xFEF
 15956                           postinc0	equ	0xFEE
 15957                           fsr0h	equ	0xFEA
 15958                           fsr0l	equ	0xFE9
 15959                           wreg	equ	0xFE8
 15960                           postinc1	equ	0xFE6
 15961                           postdec1	equ	0xFE5
 15962                           plusw1	equ	0xFE3
 15963                           fsr1h	equ	0xFE2
 15964                           fsr1l	equ	0xFE1
 15965                           indf2	equ	0xFDF
 15966                           postinc2	equ	0xFDE
 15967                           postdec2	equ	0xFDD
 15968                           fsr2h	equ	0xFDA
 15969                           fsr2l	equ	0xFD9
 15970                           status	equ	0xFD8
 15971                           
 15972 ;; *************** function ___wmul *****************
 15973 ;; Defined at:
 15974 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
 15975 ;; Parameters:    Size  Location     Type
 15976 ;;  multiplier      2    0[BANK0 ] unsigned int 
 15977 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 15978 ;; Auto vars:     Size  Location     Type
 15979 ;;  product         2    4[BANK0 ] unsigned int 
 15980 ;; Return value:  Size  Location     Type
 15981 ;;                  2    0[BANK0 ] unsigned int 
 15982 ;; Registers used:
 15983 ;;		wreg, status,2, status,0, prodl, prodh
 15984 ;; Tracked objects:
 15985 ;;		On entry : 0/0
 15986 ;;		On exit  : 0/0
 15987 ;;		Unchanged: 0/0
 15988 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15989 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15990 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15991 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15992 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15993 ;;Total ram usage:        6 bytes
 15994 ;; Hardware stack levels used:    1
 15995 ;; Hardware stack levels required when called:    7
 15996 ;; This function calls:
 15997 ;;		Nothing
 15998 ;; This function is called by:
 15999 ;;		_UpdateReceiveDelays
 16000 ;;		_UpdateCfList
 16001 ;;		_hexadecimalToDecimal
 16002 ;; This function uses a non-reentrant model
 16003 ;;
 16004                           
 16005                           	psect	text73
 16006  008FE6                     __ptext73:
 16007                           	opt stack 0
 16008  008FE6                     ___wmul:
 16009                           	opt stack 18
 16010                           
 16011                           ; BSR set to: 2
 16012                           ;incstack = 0
 16013  008FE6  0100               	movlb	0	; () banked
 16014  008FE8  5160               	movf	___wmul@multiplier& (0+255),w,b
 16015  008FEA  0362               	mulwf	___wmul@multiplicand& (0+255),b
 16016  008FEC  CFF3 F064          	movff	prodl,___wmul@product
 16017  008FF0  CFF4 F065          	movff	prodh,___wmul@product+1
 16018  008FF4  5160               	movf	___wmul@multiplier& (0+255),w,b
 16019  008FF6  0363               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 16020  008FF8  50F3               	movf	prodl,w,c
 16021  008FFA  2765               	addwf	(___wmul@product+1)& (0+255),f,b
 16022  008FFC  5161               	movf	(___wmul@multiplier+1)& (0+255),w,b
 16023  008FFE  0362               	mulwf	___wmul@multiplicand& (0+255),b
 16024  009000  50F3               	movf	prodl,w,c
 16025  009002  2765               	addwf	(___wmul@product+1)& (0+255),f,b
 16026                           
 16027                           ; BSR set to: 0
 16028  009004  C064  F060         	movff	___wmul@product,?___wmul
 16029  009008  C065  F061         	movff	___wmul@product+1,?___wmul+1
 16030  00900C  0012               	return	
 16031  00900E                     __end_of___wmul:
 16032                           	opt stack 0
 16033                           tosu	equ	0xFFF
 16034                           tosh	equ	0xFFE
 16035                           tosl	equ	0xFFD
 16036                           pclath	equ	0xFFA
 16037                           tblptru	equ	0xFF8
 16038                           tblptrh	equ	0xFF7
 16039                           tblptrl	equ	0xFF6
 16040                           tablat	equ	0xFF5
 16041                           prodh	equ	0xFF4
 16042                           prodl	equ	0xFF3
 16043                           intcon	equ	0xFF2
 16044                           intcon2	equ	0xFF1
 16045                           intcon3	equ	0xFF0
 16046                           indf0	equ	0xFEF
 16047                           postinc0	equ	0xFEE
 16048                           fsr0h	equ	0xFEA
 16049                           fsr0l	equ	0xFE9
 16050                           wreg	equ	0xFE8
 16051                           postinc1	equ	0xFE6
 16052                           postdec1	equ	0xFE5
 16053                           plusw1	equ	0xFE3
 16054                           fsr1h	equ	0xFE2
 16055                           fsr1l	equ	0xFE1
 16056                           indf2	equ	0xFDF
 16057                           postinc2	equ	0xFDE
 16058                           postdec2	equ	0xFDD
 16059                           fsr2h	equ	0xFDA
 16060                           fsr2l	equ	0xFD9
 16061                           status	equ	0xFD8
 16062                           
 16063 ;; *************** function _ExecuteRxParamSetupReq *****************
 16064 ;; Defined at:
 16065 ;;		line 740 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 16066 ;; Parameters:    Size  Location     Type
 16067 ;;  ptr             2   70[BANK0 ] PTR unsigned char 
 16068 ;;		 -> radioBuffer(271), LORAWAN_RxDone@hdr(2), 
 16069 ;; Auto vars:     Size  Location     Type
 16070 ;;  frequency       4   74[BANK0 ] unsigned long 
 16071 ;;  dlSettings      1   78[BANK0 ] struct .
 16072 ;; Return value:  Size  Location     Type
 16073 ;;                  2   70[BANK0 ] PTR unsigned char 
 16074 ;; Registers used:
 16075 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 16076 ;; Tracked objects:
 16077 ;;		On entry : 0/0
 16078 ;;		On exit  : 0/0
 16079 ;;		Unchanged: 0/0
 16080 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16081 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16082 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16083 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16084 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16085 ;;Total ram usage:        9 bytes
 16086 ;; Hardware stack levels used:    1
 16087 ;; Hardware stack levels required when called:    8
 16088 ;; This function calls:
 16089 ;;		_UpdateReceiveWindow2Parameters
 16090 ;;		_ValidateDataRate
 16091 ;;		_ValidateFrequency
 16092 ;;		_ValidateRxOffset
 16093 ;;		___lmul
 16094 ;; This function is called by:
 16095 ;;		_MacExecuteCommands
 16096 ;; This function uses a non-reentrant model
 16097 ;;
 16098                           
 16099                           	psect	text74
 16100  00448A                     __ptext74:
 16101                           	opt stack 0
 16102  00448A                     _ExecuteRxParamSetupReq:
 16103                           	opt stack 17
 16104                           
 16105                           ;lorawan_eu.c: 742: DlSettings_t dlSettings;
 16106                           ;lorawan_eu.c: 743: uint32_t frequency = 0;
 16107                           
 16108                           ; BSR set to: 0
 16109                           ;incstack = 0
 16110  00448A  0E00               	movlw	0
 16111  00448C  0100               	movlb	0	; () banked
 16112  00448E  6FAA               	movwf	ExecuteRxParamSetupReq@frequency& (0+255),b
 16113  004490  0E00               	movlw	0
 16114  004492  6FAB               	movwf	(ExecuteRxParamSetupReq@frequency+1)& (0+255),b
 16115  004494  0E00               	movlw	0
 16116  004496  6FAC               	movwf	(ExecuteRxParamSetupReq@frequency+2)& (0+255),b
 16117  004498  0E00               	movlw	0
 16118  00449A  6FAD               	movwf	(ExecuteRxParamSetupReq@frequency+3)& (0+255),b
 16119                           
 16120                           ; BSR set to: 0
 16121                           ;lorawan_eu.c: 747: dlSettings.value = *(ptr++);
 16122  00449C  C0A6  FFD9         	movff	ExecuteRxParamSetupReq@ptr,fsr2l
 16123  0044A0  C0A7  FFDA         	movff	ExecuteRxParamSetupReq@ptr+1,fsr2h
 16124  0044A4  50DF               	movf	indf2,w,c
 16125  0044A6  6FAE               	movwf	ExecuteRxParamSetupReq@dlSettings& (0+255),b
 16126                           
 16127                           ; BSR set to: 0
 16128  0044A8  4BA6               	infsnz	ExecuteRxParamSetupReq@ptr& (0+255),f,b
 16129  0044AA  2BA7               	incf	(ExecuteRxParamSetupReq@ptr+1)& (0+255),f,b
 16130                           
 16131                           ; BSR set to: 0
 16132                           ;lorawan_eu.c: 749: frequency = (*((uint32_t*)ptr)) & 0x00FFFFFF;
 16133  0044AC  C0A6  FFD9         	movff	ExecuteRxParamSetupReq@ptr,fsr2l
 16134  0044B0  C0A7  FFDA         	movff	ExecuteRxParamSetupReq@ptr+1,fsr2h
 16135  0044B4  0EFF               	movlw	255
 16136  0044B6  14DE               	andwf	postinc2,w,c
 16137  0044B8  6FAA               	movwf	ExecuteRxParamSetupReq@frequency& (0+255),b
 16138  0044BA  0EFF               	movlw	255
 16139  0044BC  14DE               	andwf	postinc2,w,c
 16140  0044BE  6FAB               	movwf	(ExecuteRxParamSetupReq@frequency+1)& (0+255),b
 16141  0044C0  0EFF               	movlw	255
 16142  0044C2  14DE               	andwf	postinc2,w,c
 16143  0044C4  6FAC               	movwf	(ExecuteRxParamSetupReq@frequency+2)& (0+255),b
 16144  0044C6  0E00               	movlw	0
 16145  0044C8  14DE               	andwf	postinc2,w,c
 16146  0044CA  6FAD               	movwf	(ExecuteRxParamSetupReq@frequency+3)& (0+255),b
 16147                           
 16148                           ; BSR set to: 0
 16149                           ;lorawan_eu.c: 750: frequency = frequency * 100;
 16150  0044CC  C0AA  F09A         	movff	ExecuteRxParamSetupReq@frequency,___lmul@multiplier
 16151  0044D0  C0AB  F09B         	movff	ExecuteRxParamSetupReq@frequency+1,___lmul@multiplier+1
 16152  0044D4  C0AC  F09C         	movff	ExecuteRxParamSetupReq@frequency+2,___lmul@multiplier+2
 16153  0044D8  C0AD  F09D         	movff	ExecuteRxParamSetupReq@frequency+3,___lmul@multiplier+3
 16154  0044DC  0E64               	movlw	100
 16155  0044DE  6F9E               	movwf	___lmul@multiplicand& (0+255),b
 16156  0044E0  0E00               	movlw	0
 16157  0044E2  6F9F               	movwf	(___lmul@multiplicand+1)& (0+255),b
 16158  0044E4  0E00               	movlw	0
 16159  0044E6  6FA0               	movwf	(___lmul@multiplicand+2)& (0+255),b
 16160  0044E8  0E00               	movlw	0
 16161  0044EA  6FA1               	movwf	(___lmul@multiplicand+3)& (0+255),b
 16162  0044EC  EC73  F042         	call	___lmul	;wreg free
 16163  0044F0  C09A  F0AA         	movff	?___lmul,ExecuteRxParamSetupReq@frequency
 16164  0044F4  C09B  F0AB         	movff	?___lmul+1,ExecuteRxParamSetupReq@frequency+1
 16165  0044F8  C09C  F0AC         	movff	?___lmul+2,ExecuteRxParamSetupReq@frequency+2
 16166  0044FC  C09D  F0AD         	movff	?___lmul+3,ExecuteRxParamSetupReq@frequency+3
 16167                           
 16168                           ;lorawan_eu.c: 751: ptr = ptr + 3;
 16169  004500  0E03               	movlw	3
 16170  004502  0100               	movlb	0	; () banked
 16171  004504  25A6               	addwf	ExecuteRxParamSetupReq@ptr& (0+255),w,b
 16172  004506  6FA6               	movwf	ExecuteRxParamSetupReq@ptr& (0+255),b
 16173  004508  0E00               	movlw	0
 16174  00450A  21A7               	addwfc	(ExecuteRxParamSetupReq@ptr+1)& (0+255),w,b
 16175  00450C  6FA7               	movwf	(ExecuteRxParamSetupReq@ptr+1)& (0+255),b
 16176                           
 16177                           ; BSR set to: 0
 16178                           ;lorawan_eu.c: 753: if (ValidateFrequency (frequency) == OK)
 16179  00450E  C0AA  F060         	movff	ExecuteRxParamSetupReq@frequency,ValidateFrequency@frequencyNew
 16180  004512  C0AB  F061         	movff	ExecuteRxParamSetupReq@frequency+1,ValidateFrequency@frequencyNew+1
 16181  004516  C0AC  F062         	movff	ExecuteRxParamSetupReq@frequency+2,ValidateFrequency@frequencyNew+2
 16182  00451A  C0AD  F063         	movff	ExecuteRxParamSetupReq@frequency+3,ValidateFrequency@frequencyNew+3
 16183  00451E  EC35  F040         	call	_ValidateFrequency	;wreg free
 16184  004522  0900               	iorlw	0
 16185  004524  A4D8               	btfss	status,2,c
 16186  004526  D018               	goto	l1971
 16187                           
 16188                           ;lorawan_eu.c: 754: {
 16189                           ;lorawan_eu.c: 755: loRa.macCommands[loRa.crtMacCmdIndex].channelAck = 1;
 16190  004528  0102               	movlb	2	; () banked
 16191  00452A  51AD               	movf	(_loRa+167)& (0+255),w,b
 16192  00452C  0D02               	mullw	2
 16193  00452E  0E06               	movlw	low _loRa
 16194  004530  0100               	movlb	0	; () banked
 16195  004532  6FA8               	movwf	??_ExecuteRxParamSetupReq& (0+255),b
 16196  004534  0E02               	movlw	high _loRa
 16197  004536  6FA9               	movwf	(??_ExecuteRxParamSetupReq+1)& (0+255),b
 16198  004538  0EA8               	movlw	168
 16199  00453A  27A8               	addwf	??_ExecuteRxParamSetupReq& (0+255),f,b
 16200  00453C  0E00               	movlw	0
 16201  00453E  23A9               	addwfc	(??_ExecuteRxParamSetupReq+1)& (0+255),f,b
 16202  004540  50F3               	movf	prodl,w,c
 16203  004542  27A8               	addwf	??_ExecuteRxParamSetupReq& (0+255),f,b
 16204  004544  50F4               	movf	prodh,w,c
 16205  004546  23A9               	addwfc	(??_ExecuteRxParamSetupReq+1)& (0+255),f,b
 16206  004548  0E01               	movlw	1
 16207  00454A  25A8               	addwf	??_ExecuteRxParamSetupReq& (0+255),w,b
 16208  00454C  6ED9               	movwf	fsr2l,c
 16209  00454E  0E00               	movlw	0
 16210  004550  21A9               	addwfc	(??_ExecuteRxParamSetupReq+1)& (0+255),w,b
 16211  004552  6EDA               	movwf	fsr2h,c
 16212  004554  0102               	movlb	2	; () banked
 16213  004556  86DF               	bsf	indf2,3,c
 16214  004558                     l1971:
 16215                           
 16216                           ;lorawan_eu.c: 756: }
 16217                           ;lorawan_eu.c: 758: if (ValidateDataRate (dlSettings.bits.rx2DataRate) == OK)
 16218                           
 16219                           ; BSR set to: 2
 16220  004558  0100               	movlb	0	; () banked
 16221  00455A  51AE               	movf	ExecuteRxParamSetupReq@dlSettings& (0+255),w,b
 16222  00455C  0B0F               	andlw	15
 16223  00455E  ECB9  F049         	call	_ValidateDataRate
 16224  004562  0900               	iorlw	0
 16225  004564  A4D8               	btfss	status,2,c
 16226  004566  D018               	goto	l1972
 16227                           
 16228                           ;lorawan_eu.c: 759: {
 16229                           ;lorawan_eu.c: 760: loRa.macCommands[loRa.crtMacCmdIndex].dataRateReceiveWindowAck = 1;
 16230  004568  0102               	movlb	2	; () banked
 16231  00456A  51AD               	movf	(_loRa+167)& (0+255),w,b
 16232  00456C  0D02               	mullw	2
 16233  00456E  0E06               	movlw	low _loRa
 16234  004570  0100               	movlb	0	; () banked
 16235  004572  6FA8               	movwf	??_ExecuteRxParamSetupReq& (0+255),b
 16236  004574  0E02               	movlw	high _loRa
 16237  004576  6FA9               	movwf	(??_ExecuteRxParamSetupReq+1)& (0+255),b
 16238  004578  0EA8               	movlw	168
 16239  00457A  27A8               	addwf	??_ExecuteRxParamSetupReq& (0+255),f,b
 16240  00457C  0E00               	movlw	0
 16241  00457E  23A9               	addwfc	(??_ExecuteRxParamSetupReq+1)& (0+255),f,b
 16242  004580  50F3               	movf	prodl,w,c
 16243  004582  27A8               	addwf	??_ExecuteRxParamSetupReq& (0+255),f,b
 16244  004584  50F4               	movf	prodh,w,c
 16245  004586  23A9               	addwfc	(??_ExecuteRxParamSetupReq+1)& (0+255),f,b
 16246  004588  0E01               	movlw	1
 16247  00458A  25A8               	addwf	??_ExecuteRxParamSetupReq& (0+255),w,b
 16248  00458C  6ED9               	movwf	fsr2l,c
 16249  00458E  0E00               	movlw	0
 16250  004590  21A9               	addwfc	(??_ExecuteRxParamSetupReq+1)& (0+255),w,b
 16251  004592  6EDA               	movwf	fsr2h,c
 16252  004594  0102               	movlb	2	; () banked
 16253  004596  88DF               	bsf	indf2,4,c
 16254  004598                     l1972:
 16255                           
 16256                           ;lorawan_eu.c: 761: }
 16257                           ;lorawan_eu.c: 763: if (ValidateRxOffset (dlSettings.bits.rx1DROffset) == OK)
 16258                           
 16259                           ; BSR set to: 2
 16260  004598  0100               	movlb	0	; () banked
 16261  00459A  39AE               	swapf	ExecuteRxParamSetupReq@dlSettings& (0+255),w,b
 16262  00459C  0B07               	andlw	7
 16263  00459E  ECAD  F049         	call	_ValidateRxOffset
 16264  0045A2  0900               	iorlw	0
 16265  0045A4  A4D8               	btfss	status,2,c
 16266  0045A6  D018               	goto	l1973
 16267                           
 16268                           ;lorawan_eu.c: 764: {
 16269                           ;lorawan_eu.c: 765: loRa.macCommands[loRa.crtMacCmdIndex].rx1DROffestAck = 1;
 16270  0045A8  0102               	movlb	2	; () banked
 16271  0045AA  51AD               	movf	(_loRa+167)& (0+255),w,b
 16272  0045AC  0D02               	mullw	2
 16273  0045AE  0E06               	movlw	low _loRa
 16274  0045B0  0100               	movlb	0	; () banked
 16275  0045B2  6FA8               	movwf	??_ExecuteRxParamSetupReq& (0+255),b
 16276  0045B4  0E02               	movlw	high _loRa
 16277  0045B6  6FA9               	movwf	(??_ExecuteRxParamSetupReq+1)& (0+255),b
 16278  0045B8  0EA8               	movlw	168
 16279  0045BA  27A8               	addwf	??_ExecuteRxParamSetupReq& (0+255),f,b
 16280  0045BC  0E00               	movlw	0
 16281  0045BE  23A9               	addwfc	(??_ExecuteRxParamSetupReq+1)& (0+255),f,b
 16282  0045C0  50F3               	movf	prodl,w,c
 16283  0045C2  27A8               	addwf	??_ExecuteRxParamSetupReq& (0+255),f,b
 16284  0045C4  50F4               	movf	prodh,w,c
 16285  0045C6  23A9               	addwfc	(??_ExecuteRxParamSetupReq+1)& (0+255),f,b
 16286  0045C8  0E01               	movlw	1
 16287  0045CA  25A8               	addwf	??_ExecuteRxParamSetupReq& (0+255),w,b
 16288  0045CC  6ED9               	movwf	fsr2l,c
 16289  0045CE  0E00               	movlw	0
 16290  0045D0  21A9               	addwfc	(??_ExecuteRxParamSetupReq+1)& (0+255),w,b
 16291  0045D2  6EDA               	movwf	fsr2h,c
 16292  0045D4  0102               	movlb	2	; () banked
 16293  0045D6  8ADF               	bsf	indf2,5,c
 16294  0045D8                     l1973:
 16295                           
 16296                           ;lorawan_eu.c: 766: }
 16297                           ;lorawan_eu.c: 768: if ( (loRa.macCommands[loRa.crtMacCmdIndex].dataRateReceiveWindowAck
      +                           == 1) && (loRa.macCommands[loRa.crtMacCmdIndex].channelAck == 1) && (loRa.macCommands[l
      +                          oRa.crtMacCmdIndex].rx1DROffestAck == 1))
 16298  0045D8  0102               	movlb	2	; () banked
 16299  0045DA  51AD               	movf	(_loRa+167)& (0+255),w,b
 16300  0045DC  0D02               	mullw	2
 16301  0045DE  0E06               	movlw	low _loRa
 16302  0045E0  0100               	movlb	0	; () banked
 16303  0045E2  6FA8               	movwf	??_ExecuteRxParamSetupReq& (0+255),b
 16304  0045E4  0E02               	movlw	high _loRa
 16305  0045E6  6FA9               	movwf	(??_ExecuteRxParamSetupReq+1)& (0+255),b
 16306  0045E8  0EA8               	movlw	168
 16307  0045EA  27A8               	addwf	??_ExecuteRxParamSetupReq& (0+255),f,b
 16308  0045EC  0E00               	movlw	0
 16309  0045EE  23A9               	addwfc	(??_ExecuteRxParamSetupReq+1)& (0+255),f,b
 16310  0045F0  50F3               	movf	prodl,w,c
 16311  0045F2  27A8               	addwf	??_ExecuteRxParamSetupReq& (0+255),f,b
 16312  0045F4  50F4               	movf	prodh,w,c
 16313  0045F6  23A9               	addwfc	(??_ExecuteRxParamSetupReq+1)& (0+255),f,b
 16314  0045F8  0E01               	movlw	1
 16315  0045FA  25A8               	addwf	??_ExecuteRxParamSetupReq& (0+255),w,b
 16316  0045FC  6ED9               	movwf	fsr2l,c
 16317  0045FE  0E00               	movlw	0
 16318  004600  21A9               	addwfc	(??_ExecuteRxParamSetupReq+1)& (0+255),w,b
 16319  004602  6EDA               	movwf	fsr2h,c
 16320  004604  0102               	movlb	2	; () banked
 16321  004606  A8DF               	btfss	indf2,4,c
 16322  004608  D045               	goto	l1974
 16323                           
 16324                           ; BSR set to: 2
 16325  00460A  51AD               	movf	(_loRa+167)& (0+255),w,b
 16326  00460C  0D02               	mullw	2
 16327  00460E  0E06               	movlw	low _loRa
 16328  004610  0100               	movlb	0	; () banked
 16329  004612  6FA8               	movwf	??_ExecuteRxParamSetupReq& (0+255),b
 16330  004614  0E02               	movlw	high _loRa
 16331  004616  6FA9               	movwf	(??_ExecuteRxParamSetupReq+1)& (0+255),b
 16332  004618  0EA8               	movlw	168
 16333  00461A  27A8               	addwf	??_ExecuteRxParamSetupReq& (0+255),f,b
 16334  00461C  0E00               	movlw	0
 16335  00461E  23A9               	addwfc	(??_ExecuteRxParamSetupReq+1)& (0+255),f,b
 16336  004620  50F3               	movf	prodl,w,c
 16337  004622  27A8               	addwf	??_ExecuteRxParamSetupReq& (0+255),f,b
 16338  004624  50F4               	movf	prodh,w,c
 16339  004626  23A9               	addwfc	(??_ExecuteRxParamSetupReq+1)& (0+255),f,b
 16340  004628  0E01               	movlw	1
 16341  00462A  25A8               	addwf	??_ExecuteRxParamSetupReq& (0+255),w,b
 16342  00462C  6ED9               	movwf	fsr2l,c
 16343  00462E  0E00               	movlw	0
 16344  004630  21A9               	addwfc	(??_ExecuteRxParamSetupReq+1)& (0+255),w,b
 16345  004632  6EDA               	movwf	fsr2h,c
 16346  004634  0102               	movlb	2	; () banked
 16347  004636  A6DF               	btfss	indf2,3,c
 16348  004638  D02D               	goto	l1974
 16349                           
 16350                           ; BSR set to: 2
 16351  00463A  51AD               	movf	(_loRa+167)& (0+255),w,b
 16352  00463C  0D02               	mullw	2
 16353  00463E  0E06               	movlw	low _loRa
 16354  004640  0100               	movlb	0	; () banked
 16355  004642  6FA8               	movwf	??_ExecuteRxParamSetupReq& (0+255),b
 16356  004644  0E02               	movlw	high _loRa
 16357  004646  6FA9               	movwf	(??_ExecuteRxParamSetupReq+1)& (0+255),b
 16358  004648  0EA8               	movlw	168
 16359  00464A  27A8               	addwf	??_ExecuteRxParamSetupReq& (0+255),f,b
 16360  00464C  0E00               	movlw	0
 16361  00464E  23A9               	addwfc	(??_ExecuteRxParamSetupReq+1)& (0+255),f,b
 16362  004650  50F3               	movf	prodl,w,c
 16363  004652  27A8               	addwf	??_ExecuteRxParamSetupReq& (0+255),f,b
 16364  004654  50F4               	movf	prodh,w,c
 16365  004656  23A9               	addwfc	(??_ExecuteRxParamSetupReq+1)& (0+255),f,b
 16366  004658  0E01               	movlw	1
 16367  00465A  25A8               	addwf	??_ExecuteRxParamSetupReq& (0+255),w,b
 16368  00465C  6ED9               	movwf	fsr2l,c
 16369  00465E  0E00               	movlw	0
 16370  004660  21A9               	addwfc	(??_ExecuteRxParamSetupReq+1)& (0+255),w,b
 16371  004662  6EDA               	movwf	fsr2h,c
 16372  004664  0102               	movlb	2	; () banked
 16373  004666  AADF               	btfss	indf2,5,c
 16374  004668  D015               	goto	l1974
 16375                           
 16376                           ; BSR set to: 2
 16377                           ;lorawan_eu.c: 769: {
 16378                           ;lorawan_eu.c: 770: loRa.offset = dlSettings.bits.rx1DROffset;
 16379  00466A  0100               	movlb	0	; () banked
 16380  00466C  39AE               	swapf	ExecuteRxParamSetupReq@dlSettings& (0+255),w,b
 16381  00466E  0B07               	andlw	7
 16382  004670  0102               	movlb	2	; () banked
 16383  004672  6FF5               	movwf	(_loRa+239)& (0+255),b
 16384                           
 16385                           ; BSR set to: 2
 16386                           ;lorawan_eu.c: 771: UpdateReceiveWindow2Parameters (frequency, dlSettings.bits.rx2DataRa
      +                          te);
 16387  004674  C0AA  F060         	movff	ExecuteRxParamSetupReq@frequency,UpdateReceiveWindow2Parameters@frequency
 16388  004678  C0AB  F061         	movff	ExecuteRxParamSetupReq@frequency+1,UpdateReceiveWindow2Parameters@frequency+1
 16389  00467C  C0AC  F062         	movff	ExecuteRxParamSetupReq@frequency+2,UpdateReceiveWindow2Parameters@frequency+2
 16390  004680  C0AD  F063         	movff	ExecuteRxParamSetupReq@frequency+3,UpdateReceiveWindow2Parameters@frequency+3
 16391  004684  0100               	movlb	0	; () banked
 16392  004686  51AE               	movf	ExecuteRxParamSetupReq@dlSettings& (0+255),w,b
 16393  004688  0B0F               	andlw	15
 16394  00468A  6F64               	movwf	UpdateReceiveWindow2Parameters@dataRate& (0+255),b
 16395  00468C  ECC5  F049         	call	_UpdateReceiveWindow2Parameters	;wreg free
 16396                           
 16397                           ;lorawan_eu.c: 772: loRa.macStatus.secondReceiveWindowModified = 1;
 16398  004690  0102               	movlb	2	; () banked
 16399  004692  8F09               	bsf	(_loRa+3)& (0+255),7,b
 16400  004694                     l1974:
 16401                           
 16402                           ; BSR set to: 2
 16403                           ;lorawan_eu.c: 773: }
 16404                           ;lorawan_eu.c: 775: return ptr;
 16405                           
 16406                           ; BSR set to: 2
 16407  004694  C0A6  F0A6         	movff	ExecuteRxParamSetupReq@ptr,?_ExecuteRxParamSetupReq
 16408  004698  C0A7  F0A7         	movff	ExecuteRxParamSetupReq@ptr+1,?_ExecuteRxParamSetupReq+1
 16409  00469C  0012               	return	
 16410  00469E                     __end_of_ExecuteRxParamSetupReq:
 16411                           	opt stack 0
 16412                           tosu	equ	0xFFF
 16413                           tosh	equ	0xFFE
 16414                           tosl	equ	0xFFD
 16415                           pclath	equ	0xFFA
 16416                           tblptru	equ	0xFF8
 16417                           tblptrh	equ	0xFF7
 16418                           tblptrl	equ	0xFF6
 16419                           tablat	equ	0xFF5
 16420                           prodh	equ	0xFF4
 16421                           prodl	equ	0xFF3
 16422                           intcon	equ	0xFF2
 16423                           intcon2	equ	0xFF1
 16424                           intcon3	equ	0xFF0
 16425                           indf0	equ	0xFEF
 16426                           postinc0	equ	0xFEE
 16427                           fsr0h	equ	0xFEA
 16428                           fsr0l	equ	0xFE9
 16429                           wreg	equ	0xFE8
 16430                           postinc1	equ	0xFE6
 16431                           postdec1	equ	0xFE5
 16432                           plusw1	equ	0xFE3
 16433                           fsr1h	equ	0xFE2
 16434                           fsr1l	equ	0xFE1
 16435                           indf2	equ	0xFDF
 16436                           postinc2	equ	0xFDE
 16437                           postdec2	equ	0xFDD
 16438                           fsr2h	equ	0xFDA
 16439                           fsr2l	equ	0xFD9
 16440                           status	equ	0xFD8
 16441                           
 16442 ;; *************** function _ValidateRxOffset *****************
 16443 ;; Defined at:
 16444 ;;		line 1076 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 16445 ;; Parameters:    Size  Location     Type
 16446 ;;  rxOffset        1    wreg     unsigned char 
 16447 ;; Auto vars:     Size  Location     Type
 16448 ;;  rxOffset        1    0[BANK0 ] unsigned char 
 16449 ;;  result          1    1[BANK0 ] enum E7249
 16450 ;; Return value:  Size  Location     Type
 16451 ;;                  1    wreg      enum E7249
 16452 ;; Registers used:
 16453 ;;		wreg, status,2, status,0
 16454 ;; Tracked objects:
 16455 ;;		On entry : 0/0
 16456 ;;		On exit  : 0/0
 16457 ;;		Unchanged: 0/0
 16458 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16459 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16460 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16461 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16462 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16463 ;;Total ram usage:        2 bytes
 16464 ;; Hardware stack levels used:    1
 16465 ;; Hardware stack levels required when called:    7
 16466 ;; This function calls:
 16467 ;;		Nothing
 16468 ;; This function is called by:
 16469 ;;		_ExecuteRxParamSetupReq
 16470 ;; This function uses a non-reentrant model
 16471 ;;
 16472                           
 16473                           	psect	text75
 16474  00935A                     __ptext75:
 16475                           	opt stack 0
 16476  00935A                     _ValidateRxOffset:
 16477                           	opt stack 17
 16478                           
 16479                           ; BSR set to: 2
 16480                           ;incstack = 0
 16481                           ;ValidateRxOffset@rxOffset stored from wreg
 16482  00935A  0100               	movlb	0	; () banked
 16483  00935C  6F60               	movwf	ValidateRxOffset@rxOffset& (0+255),b
 16484                           
 16485                           ;lorawan_eu.c: 1078: LorawanError_t result = OK;
 16486  00935E  0E00               	movlw	0
 16487  009360  0100               	movlb	0	; () banked
 16488  009362  6F61               	movwf	ValidateRxOffset@result& (0+255),b
 16489                           
 16490                           ; BSR set to: 0
 16491                           ;lorawan_eu.c: 1080: if (rxOffset > 5)
 16492  009364  0E05               	movlw	5
 16493  009366  6560               	cpfsgt	ValidateRxOffset@rxOffset& (0+255),b
 16494  009368  D002               	goto	l2069
 16495                           
 16496                           ; BSR set to: 0
 16497                           ;lorawan_eu.c: 1081: {
 16498                           ;lorawan_eu.c: 1082: result = INVALID_PARAMETER;
 16499  00936A  0E03               	movlw	3
 16500  00936C  6F61               	movwf	ValidateRxOffset@result& (0+255),b
 16501  00936E                     l2069:
 16502                           
 16503                           ; BSR set to: 0
 16504                           ;lorawan_eu.c: 1083: }
 16505                           ;lorawan_eu.c: 1085: return result;
 16506  00936E  5161               	movf	ValidateRxOffset@result& (0+255),w,b
 16507  009370  0012               	return	
 16508  009372                     __end_of_ValidateRxOffset:
 16509                           	opt stack 0
 16510                           tosu	equ	0xFFF
 16511                           tosh	equ	0xFFE
 16512                           tosl	equ	0xFFD
 16513                           pclath	equ	0xFFA
 16514                           tblptru	equ	0xFF8
 16515                           tblptrh	equ	0xFF7
 16516                           tblptrl	equ	0xFF6
 16517                           tablat	equ	0xFF5
 16518                           prodh	equ	0xFF4
 16519                           prodl	equ	0xFF3
 16520                           intcon	equ	0xFF2
 16521                           intcon2	equ	0xFF1
 16522                           intcon3	equ	0xFF0
 16523                           indf0	equ	0xFEF
 16524                           postinc0	equ	0xFEE
 16525                           fsr0h	equ	0xFEA
 16526                           fsr0l	equ	0xFE9
 16527                           wreg	equ	0xFE8
 16528                           postinc1	equ	0xFE6
 16529                           postdec1	equ	0xFE5
 16530                           plusw1	equ	0xFE3
 16531                           fsr1h	equ	0xFE2
 16532                           fsr1l	equ	0xFE1
 16533                           indf2	equ	0xFDF
 16534                           postinc2	equ	0xFDE
 16535                           postdec2	equ	0xFDD
 16536                           fsr2h	equ	0xFDA
 16537                           fsr2l	equ	0xFD9
 16538                           status	equ	0xFD8
 16539                           
 16540 ;; *************** function _UpdateReceiveWindow2Parameters *****************
 16541 ;; Defined at:
 16542 ;;		line 1084 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 16543 ;; Parameters:    Size  Location     Type
 16544 ;;  frequency       4    0[BANK0 ] unsigned long 
 16545 ;;  dataRate        1    4[BANK0 ] unsigned char 
 16546 ;; Auto vars:     Size  Location     Type
 16547 ;;		None
 16548 ;; Return value:  Size  Location     Type
 16549 ;;                  1    wreg      void 
 16550 ;; Registers used:
 16551 ;;		None
 16552 ;; Tracked objects:
 16553 ;;		On entry : 0/0
 16554 ;;		On exit  : 0/0
 16555 ;;		Unchanged: 0/0
 16556 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16557 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16558 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16559 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16560 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16561 ;;Total ram usage:        5 bytes
 16562 ;; Hardware stack levels used:    1
 16563 ;; Hardware stack levels required when called:    7
 16564 ;; This function calls:
 16565 ;;		Nothing
 16566 ;; This function is called by:
 16567 ;;		_ExecuteRxParamSetupReq
 16568 ;;		_LORAWAN_SetReceiveWindow2Parameters
 16569 ;; This function uses a non-reentrant model
 16570 ;;
 16571                           
 16572                           	psect	text76
 16573  00938A                     __ptext76:
 16574                           	opt stack 0
 16575  00938A                     _UpdateReceiveWindow2Parameters:
 16576                           	opt stack 17
 16577                           
 16578                           ;lorawan.c: 1086: loRa.receiveWindow2Parameters.dataRate = dataRate;
 16579                           
 16580                           ; BSR set to: 0
 16581                           ;incstack = 0
 16582  00938A  C064  F222         	movff	UpdateReceiveWindow2Parameters@dataRate,_loRa+28
 16583                           
 16584                           ;lorawan.c: 1087: loRa.receiveWindow2Parameters.frequency = frequency;
 16585  00938E  C060  F21E         	movff	UpdateReceiveWindow2Parameters@frequency,_loRa+24
 16586  009392  C061  F21F         	movff	UpdateReceiveWindow2Parameters@frequency+1,_loRa+25
 16587  009396  C062  F220         	movff	UpdateReceiveWindow2Parameters@frequency+2,_loRa+26
 16588  00939A  C063  F221         	movff	UpdateReceiveWindow2Parameters@frequency+3,_loRa+27
 16589  00939E  0012               	return		;funcret
 16590  0093A0                     __end_of_UpdateReceiveWindow2Parameters:
 16591                           	opt stack 0
 16592                           tosu	equ	0xFFF
 16593                           tosh	equ	0xFFE
 16594                           tosl	equ	0xFFD
 16595                           pclath	equ	0xFFA
 16596                           tblptru	equ	0xFF8
 16597                           tblptrh	equ	0xFF7
 16598                           tblptrl	equ	0xFF6
 16599                           tablat	equ	0xFF5
 16600                           prodh	equ	0xFF4
 16601                           prodl	equ	0xFF3
 16602                           intcon	equ	0xFF2
 16603                           intcon2	equ	0xFF1
 16604                           intcon3	equ	0xFF0
 16605                           indf0	equ	0xFEF
 16606                           postinc0	equ	0xFEE
 16607                           fsr0h	equ	0xFEA
 16608                           fsr0l	equ	0xFE9
 16609                           wreg	equ	0xFE8
 16610                           postinc1	equ	0xFE6
 16611                           postdec1	equ	0xFE5
 16612                           plusw1	equ	0xFE3
 16613                           fsr1h	equ	0xFE2
 16614                           fsr1l	equ	0xFE1
 16615                           indf2	equ	0xFDF
 16616                           postinc2	equ	0xFDE
 16617                           postdec2	equ	0xFDD
 16618                           fsr2h	equ	0xFDA
 16619                           fsr2l	equ	0xFD9
 16620                           status	equ	0xFD8
 16621                           
 16622 ;; *************** function _ExecuteNewChannel *****************
 16623 ;; Defined at:
 16624 ;;		line 677 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 16625 ;; Parameters:    Size  Location     Type
 16626 ;;  ptr             2   70[BANK0 ] PTR unsigned char 
 16627 ;;		 -> radioBuffer(271), LORAWAN_RxDone@hdr(2), 
 16628 ;; Auto vars:     Size  Location     Type
 16629 ;;  frequency       4   75[BANK0 ] unsigned long 
 16630 ;;  channelIndex    1   79[BANK0 ] unsigned char 
 16631 ;;  drRange         1   74[BANK0 ] struct .
 16632 ;; Return value:  Size  Location     Type
 16633 ;;                  2   70[BANK0 ] PTR unsigned char 
 16634 ;; Registers used:
 16635 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 16636 ;; Tracked objects:
 16637 ;;		On entry : 0/0
 16638 ;;		On exit  : 0/0
 16639 ;;		Unchanged: 0/0
 16640 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16641 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16642 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16643 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16644 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16645 ;;Total ram usage:       10 bytes
 16646 ;; Hardware stack levels used:    1
 16647 ;; Hardware stack levels required when called:    9
 16648 ;; This function calls:
 16649 ;;		_LORAWAN_SetChannelIdStatus
 16650 ;;		_UpdateChannelIdStatus
 16651 ;;		_UpdateDataRange
 16652 ;;		_UpdateDutyCycle
 16653 ;;		_UpdateFrequency
 16654 ;;		_ValidateChannelId
 16655 ;;		_ValidateDataRange
 16656 ;;		_ValidateFrequency
 16657 ;;		___lmul
 16658 ;; This function is called by:
 16659 ;;		_MacExecuteCommands
 16660 ;; This function uses a non-reentrant model
 16661 ;;
 16662                           
 16663                           	psect	text77
 16664  003B4C                     __ptext77:
 16665                           	opt stack 0
 16666  003B4C                     _ExecuteNewChannel:
 16667                           	opt stack 16
 16668                           
 16669                           ;lorawan_eu.c: 679: uint8_t channelIndex;
 16670                           ;lorawan_eu.c: 680: DataRange_t drRange;
 16671                           ;lorawan_eu.c: 681: uint32_t frequency = 0;
 16672                           
 16673                           ;incstack = 0
 16674  003B4C  0E00               	movlw	0
 16675  003B4E  0100               	movlb	0	; () banked
 16676  003B50  6FAB               	movwf	ExecuteNewChannel@frequency& (0+255),b
 16677  003B52  0E00               	movlw	0
 16678  003B54  6FAC               	movwf	(ExecuteNewChannel@frequency+1)& (0+255),b
 16679  003B56  0E00               	movlw	0
 16680  003B58  6FAD               	movwf	(ExecuteNewChannel@frequency+2)& (0+255),b
 16681  003B5A  0E00               	movlw	0
 16682  003B5C  6FAE               	movwf	(ExecuteNewChannel@frequency+3)& (0+255),b
 16683                           
 16684                           ; BSR set to: 0
 16685                           ;lorawan_eu.c: 683: channelIndex = *(ptr++);
 16686  003B5E  C0A6  FFD9         	movff	ExecuteNewChannel@ptr,fsr2l
 16687  003B62  C0A7  FFDA         	movff	ExecuteNewChannel@ptr+1,fsr2h
 16688  003B66  50DF               	movf	indf2,w,c
 16689  003B68  6FAF               	movwf	ExecuteNewChannel@channelIndex& (0+255),b
 16690                           
 16691                           ; BSR set to: 0
 16692  003B6A  4BA6               	infsnz	ExecuteNewChannel@ptr& (0+255),f,b
 16693  003B6C  2BA7               	incf	(ExecuteNewChannel@ptr+1)& (0+255),f,b
 16694                           
 16695                           ; BSR set to: 0
 16696                           ;lorawan_eu.c: 685: frequency = (*((uint32_t*)ptr)) & 0x00FFFFFF;
 16697  003B6E  C0A6  FFD9         	movff	ExecuteNewChannel@ptr,fsr2l
 16698  003B72  C0A7  FFDA         	movff	ExecuteNewChannel@ptr+1,fsr2h
 16699  003B76  0EFF               	movlw	255
 16700  003B78  14DE               	andwf	postinc2,w,c
 16701  003B7A  6FAB               	movwf	ExecuteNewChannel@frequency& (0+255),b
 16702  003B7C  0EFF               	movlw	255
 16703  003B7E  14DE               	andwf	postinc2,w,c
 16704  003B80  6FAC               	movwf	(ExecuteNewChannel@frequency+1)& (0+255),b
 16705  003B82  0EFF               	movlw	255
 16706  003B84  14DE               	andwf	postinc2,w,c
 16707  003B86  6FAD               	movwf	(ExecuteNewChannel@frequency+2)& (0+255),b
 16708  003B88  0E00               	movlw	0
 16709  003B8A  14DE               	andwf	postinc2,w,c
 16710  003B8C  6FAE               	movwf	(ExecuteNewChannel@frequency+3)& (0+255),b
 16711                           
 16712                           ; BSR set to: 0
 16713                           ;lorawan_eu.c: 686: frequency = frequency * 100;
 16714  003B8E  C0AB  F09A         	movff	ExecuteNewChannel@frequency,___lmul@multiplier
 16715  003B92  C0AC  F09B         	movff	ExecuteNewChannel@frequency+1,___lmul@multiplier+1
 16716  003B96  C0AD  F09C         	movff	ExecuteNewChannel@frequency+2,___lmul@multiplier+2
 16717  003B9A  C0AE  F09D         	movff	ExecuteNewChannel@frequency+3,___lmul@multiplier+3
 16718  003B9E  0E64               	movlw	100
 16719  003BA0  6F9E               	movwf	___lmul@multiplicand& (0+255),b
 16720  003BA2  0E00               	movlw	0
 16721  003BA4  6F9F               	movwf	(___lmul@multiplicand+1)& (0+255),b
 16722  003BA6  0E00               	movlw	0
 16723  003BA8  6FA0               	movwf	(___lmul@multiplicand+2)& (0+255),b
 16724  003BAA  0E00               	movlw	0
 16725  003BAC  6FA1               	movwf	(___lmul@multiplicand+3)& (0+255),b
 16726  003BAE  EC73  F042         	call	___lmul	;wreg free
 16727  003BB2  C09A  F0AB         	movff	?___lmul,ExecuteNewChannel@frequency
 16728  003BB6  C09B  F0AC         	movff	?___lmul+1,ExecuteNewChannel@frequency+1
 16729  003BBA  C09C  F0AD         	movff	?___lmul+2,ExecuteNewChannel@frequency+2
 16730  003BBE  C09D  F0AE         	movff	?___lmul+3,ExecuteNewChannel@frequency+3
 16731                           
 16732                           ;lorawan_eu.c: 687: ptr = ptr + 3;
 16733  003BC2  0E03               	movlw	3
 16734  003BC4  0100               	movlb	0	; () banked
 16735  003BC6  25A6               	addwf	ExecuteNewChannel@ptr& (0+255),w,b
 16736  003BC8  6FA6               	movwf	ExecuteNewChannel@ptr& (0+255),b
 16737  003BCA  0E00               	movlw	0
 16738  003BCC  21A7               	addwfc	(ExecuteNewChannel@ptr+1)& (0+255),w,b
 16739  003BCE  6FA7               	movwf	(ExecuteNewChannel@ptr+1)& (0+255),b
 16740                           
 16741                           ; BSR set to: 0
 16742                           ;lorawan_eu.c: 689: drRange.value = *(ptr++);
 16743  003BD0  C0A6  FFD9         	movff	ExecuteNewChannel@ptr,fsr2l
 16744  003BD4  C0A7  FFDA         	movff	ExecuteNewChannel@ptr+1,fsr2h
 16745  003BD8  50DF               	movf	indf2,w,c
 16746  003BDA  6FAA               	movwf	ExecuteNewChannel@drRange& (0+255),b
 16747                           
 16748                           ; BSR set to: 0
 16749  003BDC  4BA6               	infsnz	ExecuteNewChannel@ptr& (0+255),f,b
 16750  003BDE  2BA7               	incf	(ExecuteNewChannel@ptr+1)& (0+255),f,b
 16751                           
 16752                           ; BSR set to: 0
 16753                           ;lorawan_eu.c: 691: if (ValidateChannelId (channelIndex, 0) == OK)
 16754  003BE0  0E00               	movlw	0
 16755  003BE2  6F60               	movwf	ValidateChannelId@allowedForDefaultChannels& (0+255),b
 16756  003BE4  51AF               	movf	ExecuteNewChannel@channelIndex& (0+255),w,b
 16757  003BE6  EC68  F048         	call	_ValidateChannelId
 16758  003BEA  0900               	iorlw	0
 16759  003BEC  A4D8               	btfss	status,2,c
 16760  003BEE  D04B               	goto	l1960
 16761                           
 16762                           ;lorawan_eu.c: 692: {
 16763                           ;lorawan_eu.c: 693: if ( (ValidateFrequency (frequency) == OK) || (frequency == 0) )
 16764  003BF0  C0AB  F060         	movff	ExecuteNewChannel@frequency,ValidateFrequency@frequencyNew
 16765  003BF4  C0AC  F061         	movff	ExecuteNewChannel@frequency+1,ValidateFrequency@frequencyNew+1
 16766  003BF8  C0AD  F062         	movff	ExecuteNewChannel@frequency+2,ValidateFrequency@frequencyNew+2
 16767  003BFC  C0AE  F063         	movff	ExecuteNewChannel@frequency+3,ValidateFrequency@frequencyNew+3
 16768  003C00  EC35  F040         	call	_ValidateFrequency	;wreg free
 16769  003C04  0900               	iorlw	0
 16770  003C06  B4D8               	btfsc	status,2,c
 16771  003C08  D007               	goto	u10480
 16772  003C0A  0100               	movlb	0	; () banked
 16773  003C0C  51AB               	movf	ExecuteNewChannel@frequency& (0+255),w,b
 16774  003C0E  11AC               	iorwf	(ExecuteNewChannel@frequency+1)& (0+255),w,b
 16775  003C10  11AD               	iorwf	(ExecuteNewChannel@frequency+2)& (0+255),w,b
 16776  003C12  11AE               	iorwf	(ExecuteNewChannel@frequency+3)& (0+255),w,b
 16777  003C14  A4D8               	btfss	status,2,c
 16778  003C16  D018               	goto	l1957
 16779  003C18                     u10480:
 16780                           
 16781                           ;lorawan_eu.c: 694: {
 16782                           ;lorawan_eu.c: 695: loRa.macCommands[loRa.crtMacCmdIndex].channelFrequencyAck = 1;
 16783                           
 16784                           ; BSR set to: 0
 16785  003C18  0102               	movlb	2	; () banked
 16786  003C1A  51AD               	movf	(_loRa+167)& (0+255),w,b
 16787  003C1C  0D02               	mullw	2
 16788  003C1E  0E06               	movlw	low _loRa
 16789  003C20  0100               	movlb	0	; () banked
 16790  003C22  6FA8               	movwf	??_ExecuteNewChannel& (0+255),b
 16791  003C24  0E02               	movlw	high _loRa
 16792  003C26  6FA9               	movwf	(??_ExecuteNewChannel+1)& (0+255),b
 16793  003C28  0EA8               	movlw	168
 16794  003C2A  27A8               	addwf	??_ExecuteNewChannel& (0+255),f,b
 16795  003C2C  0E00               	movlw	0
 16796  003C2E  23A9               	addwfc	(??_ExecuteNewChannel+1)& (0+255),f,b
 16797  003C30  50F3               	movf	prodl,w,c
 16798  003C32  27A8               	addwf	??_ExecuteNewChannel& (0+255),f,b
 16799  003C34  50F4               	movf	prodh,w,c
 16800  003C36  23A9               	addwfc	(??_ExecuteNewChannel+1)& (0+255),f,b
 16801  003C38  0E01               	movlw	1
 16802  003C3A  25A8               	addwf	??_ExecuteNewChannel& (0+255),w,b
 16803  003C3C  6ED9               	movwf	fsr2l,c
 16804  003C3E  0E00               	movlw	0
 16805  003C40  21A9               	addwfc	(??_ExecuteNewChannel+1)& (0+255),w,b
 16806  003C42  6EDA               	movwf	fsr2h,c
 16807  003C44  0102               	movlb	2	; () banked
 16808  003C46  8EDF               	bsf	indf2,7,c
 16809  003C48                     l1957:
 16810                           
 16811                           ;lorawan_eu.c: 696: }
 16812                           ;lorawan_eu.c: 698: if (ValidateDataRange (drRange.value) == OK)
 16813                           
 16814                           ; BSR set to: 2
 16815  003C48  0100               	movlb	0	; () banked
 16816  003C4A  51AA               	movf	ExecuteNewChannel@drRange& (0+255),w,b
 16817  003C4C  EC59  F044         	call	_ValidateDataRange
 16818  003C50  0900               	iorlw	0
 16819  003C52  A4D8               	btfss	status,2,c
 16820  003C54  D018               	goto	l1960
 16821                           
 16822                           ;lorawan_eu.c: 699: {
 16823                           ;lorawan_eu.c: 700: loRa.macCommands[loRa.crtMacCmdIndex].dataRateRangeAck = 1;
 16824  003C56  0102               	movlb	2	; () banked
 16825  003C58  51AD               	movf	(_loRa+167)& (0+255),w,b
 16826  003C5A  0D02               	mullw	2
 16827  003C5C  0E06               	movlw	low _loRa
 16828  003C5E  0100               	movlb	0	; () banked
 16829  003C60  6FA8               	movwf	??_ExecuteNewChannel& (0+255),b
 16830  003C62  0E02               	movlw	high _loRa
 16831  003C64  6FA9               	movwf	(??_ExecuteNewChannel+1)& (0+255),b
 16832  003C66  0EA8               	movlw	168
 16833  003C68  27A8               	addwf	??_ExecuteNewChannel& (0+255),f,b
 16834  003C6A  0E00               	movlw	0
 16835  003C6C  23A9               	addwfc	(??_ExecuteNewChannel+1)& (0+255),f,b
 16836  003C6E  50F3               	movf	prodl,w,c
 16837  003C70  27A8               	addwf	??_ExecuteNewChannel& (0+255),f,b
 16838  003C72  50F4               	movf	prodh,w,c
 16839  003C74  23A9               	addwfc	(??_ExecuteNewChannel+1)& (0+255),f,b
 16840  003C76  0E01               	movlw	1
 16841  003C78  25A8               	addwf	??_ExecuteNewChannel& (0+255),w,b
 16842  003C7A  6ED9               	movwf	fsr2l,c
 16843  003C7C  0E00               	movlw	0
 16844  003C7E  21A9               	addwfc	(??_ExecuteNewChannel+1)& (0+255),w,b
 16845  003C80  6EDA               	movwf	fsr2h,c
 16846  003C82  0102               	movlb	2	; () banked
 16847  003C84  8CDF               	bsf	indf2,6,c
 16848  003C86                     l1960:
 16849                           
 16850                           ;lorawan_eu.c: 701: }
 16851                           ;lorawan_eu.c: 702: }
 16852                           ;lorawan_eu.c: 704: if ( (loRa.macCommands[loRa.crtMacCmdIndex].channelFrequencyAck == 1
      +                          ) && (loRa.macCommands[loRa.crtMacCmdIndex].dataRateRangeAck == 1) )
 16853                           
 16854                           ; BSR set to: 2
 16855  003C86  0102               	movlb	2	; () banked
 16856  003C88  51AD               	movf	(_loRa+167)& (0+255),w,b
 16857  003C8A  0D02               	mullw	2
 16858  003C8C  0E06               	movlw	low _loRa
 16859  003C8E  0100               	movlb	0	; () banked
 16860  003C90  6FA8               	movwf	??_ExecuteNewChannel& (0+255),b
 16861  003C92  0E02               	movlw	high _loRa
 16862  003C94  6FA9               	movwf	(??_ExecuteNewChannel+1)& (0+255),b
 16863  003C96  0EA8               	movlw	168
 16864  003C98  27A8               	addwf	??_ExecuteNewChannel& (0+255),f,b
 16865  003C9A  0E00               	movlw	0
 16866  003C9C  23A9               	addwfc	(??_ExecuteNewChannel+1)& (0+255),f,b
 16867  003C9E  50F3               	movf	prodl,w,c
 16868  003CA0  27A8               	addwf	??_ExecuteNewChannel& (0+255),f,b
 16869  003CA2  50F4               	movf	prodh,w,c
 16870  003CA4  23A9               	addwfc	(??_ExecuteNewChannel+1)& (0+255),f,b
 16871  003CA6  0E01               	movlw	1
 16872  003CA8  25A8               	addwf	??_ExecuteNewChannel& (0+255),w,b
 16873  003CAA  6ED9               	movwf	fsr2l,c
 16874  003CAC  0E00               	movlw	0
 16875  003CAE  21A9               	addwfc	(??_ExecuteNewChannel+1)& (0+255),w,b
 16876  003CB0  6EDA               	movwf	fsr2h,c
 16877  003CB2  0102               	movlb	2	; () banked
 16878  003CB4  AEDF               	btfss	indf2,7,c
 16879  003CB6  D07D               	goto	l1961
 16880                           
 16881                           ; BSR set to: 2
 16882  003CB8  51AD               	movf	(_loRa+167)& (0+255),w,b
 16883  003CBA  0D02               	mullw	2
 16884  003CBC  0E06               	movlw	low _loRa
 16885  003CBE  0100               	movlb	0	; () banked
 16886  003CC0  6FA8               	movwf	??_ExecuteNewChannel& (0+255),b
 16887  003CC2  0E02               	movlw	high _loRa
 16888  003CC4  6FA9               	movwf	(??_ExecuteNewChannel+1)& (0+255),b
 16889  003CC6  0EA8               	movlw	168
 16890  003CC8  27A8               	addwf	??_ExecuteNewChannel& (0+255),f,b
 16891  003CCA  0E00               	movlw	0
 16892  003CCC  23A9               	addwfc	(??_ExecuteNewChannel+1)& (0+255),f,b
 16893  003CCE  50F3               	movf	prodl,w,c
 16894  003CD0  27A8               	addwf	??_ExecuteNewChannel& (0+255),f,b
 16895  003CD2  50F4               	movf	prodh,w,c
 16896  003CD4  23A9               	addwfc	(??_ExecuteNewChannel+1)& (0+255),f,b
 16897  003CD6  0E01               	movlw	1
 16898  003CD8  25A8               	addwf	??_ExecuteNewChannel& (0+255),w,b
 16899  003CDA  6ED9               	movwf	fsr2l,c
 16900  003CDC  0E00               	movlw	0
 16901  003CDE  21A9               	addwfc	(??_ExecuteNewChannel+1)& (0+255),w,b
 16902  003CE0  6EDA               	movwf	fsr2h,c
 16903  003CE2  0102               	movlb	2	; () banked
 16904  003CE4  ACDF               	btfss	indf2,6,c
 16905  003CE6  D065               	goto	l1961
 16906                           
 16907                           ; BSR set to: 2
 16908                           ;lorawan_eu.c: 705: {
 16909                           ;lorawan_eu.c: 706: if (loRa.lastUsedChannelIndex < 16)
 16910  003CE8  0E10               	movlw	16
 16911  003CEA  61E0               	cpfslt	(_loRa+218)& (0+255),b
 16912  003CEC  D02E               	goto	l1962
 16913                           
 16914                           ; BSR set to: 2
 16915                           ;lorawan_eu.c: 707: {
 16916                           ;lorawan_eu.c: 708: if (frequency != 0)
 16917  003CEE  0100               	movlb	0	; () banked
 16918  003CF0  51AB               	movf	ExecuteNewChannel@frequency& (0+255),w,b
 16919  003CF2  11AC               	iorwf	(ExecuteNewChannel@frequency+1)& (0+255),w,b
 16920  003CF4  11AD               	iorwf	(ExecuteNewChannel@frequency+2)& (0+255),w,b
 16921  003CF6  11AE               	iorwf	(ExecuteNewChannel@frequency+3)& (0+255),w,b
 16922  003CF8  B4D8               	btfsc	status,2,c
 16923  003CFA  D020               	goto	l1963
 16924                           
 16925                           ; BSR set to: 0
 16926                           ;lorawan_eu.c: 709: {
 16927                           ;lorawan_eu.c: 710: UpdateFrequency (channelIndex, frequency);
 16928  003CFC  C0AB  F060         	movff	ExecuteNewChannel@frequency,UpdateFrequency@frequencyNew
 16929  003D00  C0AC  F061         	movff	ExecuteNewChannel@frequency+1,UpdateFrequency@frequencyNew+1
 16930  003D04  C0AD  F062         	movff	ExecuteNewChannel@frequency+2,UpdateFrequency@frequencyNew+2
 16931  003D08  C0AE  F063         	movff	ExecuteNewChannel@frequency+3,UpdateFrequency@frequencyNew+3
 16932  003D0C  51AF               	movf	ExecuteNewChannel@channelIndex& (0+255),w,b
 16933  003D0E  EC9F  F044         	call	_UpdateFrequency
 16934                           
 16935                           ;lorawan_eu.c: 711: UpdateDataRange (channelIndex, drRange.value);
 16936  003D12  C0AA  F060         	movff	ExecuteNewChannel@drRange,UpdateDataRange@dataRangeNew
 16937  003D16  0100               	movlb	0	; () banked
 16938  003D18  51AF               	movf	ExecuteNewChannel@channelIndex& (0+255),w,b
 16939  003D1A  ECB7  F02C         	call	_UpdateDataRange
 16940                           
 16941                           ;lorawan_eu.c: 712: UpdateDutyCycle (channelIndex, 302);
 16942  003D1E  0E01               	movlw	1
 16943  003D20  0100               	movlb	0	; () banked
 16944  003D22  6F61               	movwf	(UpdateDutyCycle@dutyCycleNew+1)& (0+255),b
 16945  003D24  0E2E               	movlw	46
 16946  003D26  6F60               	movwf	UpdateDutyCycle@dutyCycleNew& (0+255),b
 16947  003D28  51AF               	movf	ExecuteNewChannel@channelIndex& (0+255),w,b
 16948  003D2A  ECC1  F044         	call	_UpdateDutyCycle
 16949                           
 16950                           ;lorawan_eu.c: 713: UpdateChannelIdStatus (channelIndex, 1);
 16951  003D2E  0E01               	movlw	1
 16952  003D30  0100               	movlb	0	; () banked
 16953  003D32  6F60               	movwf	UpdateChannelIdStatus@statusNew& (0+255),b
 16954  003D34  51AF               	movf	ExecuteNewChannel@channelIndex& (0+255),w,b
 16955  003D36  ECA3  F02A         	call	_UpdateChannelIdStatus
 16956                           
 16957                           ;lorawan_eu.c: 714: }
 16958  003D3A  D039               	goto	l1967
 16959  003D3C                     l1963:
 16960                           
 16961                           ;lorawan_eu.c: 715: else
 16962                           ;lorawan_eu.c: 716: {
 16963                           ;lorawan_eu.c: 717: LORAWAN_SetChannelIdStatus (channelIndex, 0);
 16964  003D3C  0E00               	movlw	0
 16965  003D3E  0100               	movlb	0	; () banked
 16966  003D40  6F64               	movwf	LORAWAN_SetChannelIdStatus@statusNew& (0+255),b
 16967  003D42  51AF               	movf	ExecuteNewChannel@channelIndex& (0+255),w,b
 16968  003D44  EC19  F042         	call	_LORAWAN_SetChannelIdStatus
 16969                           
 16970                           ;lorawan_eu.c: 718: }
 16971                           ;lorawan_eu.c: 719: }
 16972  003D48  D032               	goto	l1967
 16973  003D4A                     l1962:
 16974                           
 16975                           ;lorawan_eu.c: 720: else
 16976                           ;lorawan_eu.c: 721: {
 16977                           ;lorawan_eu.c: 722: if (frequency != 0)
 16978  003D4A  0100               	movlb	0	; () banked
 16979  003D4C  51AB               	movf	ExecuteNewChannel@frequency& (0+255),w,b
 16980  003D4E  11AC               	iorwf	(ExecuteNewChannel@frequency+1)& (0+255),w,b
 16981  003D50  11AD               	iorwf	(ExecuteNewChannel@frequency+2)& (0+255),w,b
 16982  003D52  11AE               	iorwf	(ExecuteNewChannel@frequency+3)& (0+255),w,b
 16983  003D54  B4D8               	btfsc	status,2,c
 16984  003D56  D024               	goto	l1966
 16985                           
 16986                           ; BSR set to: 0
 16987                           ;lorawan_eu.c: 723: {
 16988                           ;lorawan_eu.c: 724: UpdateFrequency (channelIndex + 16, frequency);
 16989  003D58  C0AB  F060         	movff	ExecuteNewChannel@frequency,UpdateFrequency@frequencyNew
 16990  003D5C  C0AC  F061         	movff	ExecuteNewChannel@frequency+1,UpdateFrequency@frequencyNew+1
 16991  003D60  C0AD  F062         	movff	ExecuteNewChannel@frequency+2,UpdateFrequency@frequencyNew+2
 16992  003D64  C0AE  F063         	movff	ExecuteNewChannel@frequency+3,UpdateFrequency@frequencyNew+3
 16993  003D68  51AF               	movf	ExecuteNewChannel@channelIndex& (0+255),w,b
 16994  003D6A  0F10               	addlw	16
 16995  003D6C  EC9F  F044         	call	_UpdateFrequency
 16996                           
 16997                           ;lorawan_eu.c: 725: UpdateDataRange (channelIndex + 16, drRange.value);
 16998  003D70  C0AA  F060         	movff	ExecuteNewChannel@drRange,UpdateDataRange@dataRangeNew
 16999  003D74  0100               	movlb	0	; () banked
 17000  003D76  51AF               	movf	ExecuteNewChannel@channelIndex& (0+255),w,b
 17001  003D78  0F10               	addlw	16
 17002  003D7A  ECB7  F02C         	call	_UpdateDataRange
 17003                           
 17004                           ;lorawan_eu.c: 726: UpdateDutyCycle (channelIndex + 16, 302);
 17005  003D7E  0E01               	movlw	1
 17006  003D80  0100               	movlb	0	; () banked
 17007  003D82  6F61               	movwf	(UpdateDutyCycle@dutyCycleNew+1)& (0+255),b
 17008  003D84  0E2E               	movlw	46
 17009  003D86  6F60               	movwf	UpdateDutyCycle@dutyCycleNew& (0+255),b
 17010  003D88  51AF               	movf	ExecuteNewChannel@channelIndex& (0+255),w,b
 17011  003D8A  0F10               	addlw	16
 17012  003D8C  ECC1  F044         	call	_UpdateDutyCycle
 17013                           
 17014                           ;lorawan_eu.c: 727: UpdateChannelIdStatus (channelIndex + 16, 1);
 17015  003D90  0E01               	movlw	1
 17016  003D92  0100               	movlb	0	; () banked
 17017  003D94  6F60               	movwf	UpdateChannelIdStatus@statusNew& (0+255),b
 17018  003D96  51AF               	movf	ExecuteNewChannel@channelIndex& (0+255),w,b
 17019  003D98  0F10               	addlw	16
 17020  003D9A  ECA3  F02A         	call	_UpdateChannelIdStatus
 17021                           
 17022                           ;lorawan_eu.c: 728: }
 17023  003D9E  D007               	goto	l1967
 17024  003DA0                     l1966:
 17025                           
 17026                           ;lorawan_eu.c: 729: else
 17027                           ;lorawan_eu.c: 730: {
 17028                           ;lorawan_eu.c: 731: LORAWAN_SetChannelIdStatus (channelIndex + 16, 0);
 17029  003DA0  0E00               	movlw	0
 17030  003DA2  0100               	movlb	0	; () banked
 17031  003DA4  6F64               	movwf	LORAWAN_SetChannelIdStatus@statusNew& (0+255),b
 17032  003DA6  51AF               	movf	ExecuteNewChannel@channelIndex& (0+255),w,b
 17033  003DA8  0F10               	addlw	16
 17034  003DAA  EC19  F042         	call	_LORAWAN_SetChannelIdStatus
 17035  003DAE                     l1967:
 17036                           
 17037                           ;lorawan_eu.c: 732: }
 17038                           ;lorawan_eu.c: 733: }
 17039                           ;lorawan_eu.c: 735: loRa.macStatus.channelsModified = 1;
 17040  003DAE  0102               	movlb	2	; () banked
 17041  003DB0  8709               	bsf	(_loRa+3)& (0+255),3,b
 17042  003DB2                     l1961:
 17043                           
 17044                           ; BSR set to: 2
 17045                           ;lorawan_eu.c: 736: }
 17046                           ;lorawan_eu.c: 737: return ptr;
 17047                           
 17048                           ; BSR set to: 2
 17049  003DB2  C0A6  F0A6         	movff	ExecuteNewChannel@ptr,?_ExecuteNewChannel
 17050  003DB6  C0A7  F0A7         	movff	ExecuteNewChannel@ptr+1,?_ExecuteNewChannel+1
 17051  003DBA  0012               	return	
 17052  003DBC                     __end_of_ExecuteNewChannel:
 17053                           	opt stack 0
 17054                           tosu	equ	0xFFF
 17055                           tosh	equ	0xFFE
 17056                           tosl	equ	0xFFD
 17057                           pclath	equ	0xFFA
 17058                           tblptru	equ	0xFF8
 17059                           tblptrh	equ	0xFF7
 17060                           tblptrl	equ	0xFF6
 17061                           tablat	equ	0xFF5
 17062                           prodh	equ	0xFF4
 17063                           prodl	equ	0xFF3
 17064                           intcon	equ	0xFF2
 17065                           intcon2	equ	0xFF1
 17066                           intcon3	equ	0xFF0
 17067                           indf0	equ	0xFEF
 17068                           postinc0	equ	0xFEE
 17069                           fsr0h	equ	0xFEA
 17070                           fsr0l	equ	0xFE9
 17071                           wreg	equ	0xFE8
 17072                           postinc1	equ	0xFE6
 17073                           postdec1	equ	0xFE5
 17074                           plusw1	equ	0xFE3
 17075                           fsr1h	equ	0xFE2
 17076                           fsr1l	equ	0xFE1
 17077                           indf2	equ	0xFDF
 17078                           postinc2	equ	0xFDE
 17079                           postdec2	equ	0xFDD
 17080                           fsr2h	equ	0xFDA
 17081                           fsr2l	equ	0xFD9
 17082                           status	equ	0xFD8
 17083                           
 17084 ;; *************** function _ValidateFrequency *****************
 17085 ;; Defined at:
 17086 ;;		line 1088 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 17087 ;; Parameters:    Size  Location     Type
 17088 ;;  frequencyNew    4    0[BANK0 ] unsigned long 
 17089 ;; Auto vars:     Size  Location     Type
 17090 ;;  result          1    4[BANK0 ] enum E7249
 17091 ;; Return value:  Size  Location     Type
 17092 ;;                  1    wreg      enum E7249
 17093 ;; Registers used:
 17094 ;;		wreg, status,2, status,0
 17095 ;; Tracked objects:
 17096 ;;		On entry : 0/0
 17097 ;;		On exit  : 0/0
 17098 ;;		Unchanged: 0/0
 17099 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17100 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17101 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17102 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17103 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17104 ;;Total ram usage:        5 bytes
 17105 ;; Hardware stack levels used:    1
 17106 ;; Hardware stack levels required when called:    7
 17107 ;; This function calls:
 17108 ;;		Nothing
 17109 ;; This function is called by:
 17110 ;;		_ExecuteNewChannel
 17111 ;;		_ExecuteRxParamSetupReq
 17112 ;;		_UpdateCfList
 17113 ;;		_LORAWAN_SetReceiveWindow2Parameters
 17114 ;;		_LORAWAN_SetFrequency
 17115 ;; This function uses a non-reentrant model
 17116 ;;
 17117                           
 17118                           	psect	text78
 17119  00806A                     __ptext78:
 17120                           	opt stack 0
 17121  00806A                     _ValidateFrequency:
 17122                           	opt stack 18
 17123                           
 17124                           ;lorawan_eu.c: 1090: LorawanError_t result = OK;
 17125                           
 17126                           ; BSR set to: 2
 17127                           ;incstack = 0
 17128  00806A  0E00               	movlw	0
 17129  00806C  0100               	movlb	0	; () banked
 17130  00806E  6F64               	movwf	ValidateFrequency@result& (0+255),b
 17131                           
 17132                           ;lorawan_eu.c: 1092: if(ISM_EU868 == loRa.ismBand)
 17133  008070  0102               	movlb	2	; () banked
 17134  008072  51AA               	movf	(_loRa+164)& (0+255),w,b
 17135  008074  A4D8               	btfss	status,2,c
 17136  008076  D013               	goto	l2073
 17137                           
 17138                           ; BSR set to: 2
 17139                           ;lorawan_eu.c: 1093: {
 17140                           ;lorawan_eu.c: 1094: if ( (frequencyNew > 870000000) || (frequencyNew < 863000000) )
 17141  008078  0E81               	movlw	129
 17142  00807A  0100               	movlb	0	; () banked
 17143  00807C  5D60               	subwf	ValidateFrequency@frequencyNew& (0+255),w,b
 17144  00807E  0E25               	movlw	37
 17145  008080  5961               	subwfb	(ValidateFrequency@frequencyNew+1)& (0+255),w,b
 17146  008082  0EDB               	movlw	219
 17147  008084  5962               	subwfb	(ValidateFrequency@frequencyNew+2)& (0+255),w,b
 17148  008086  0E33               	movlw	51
 17149  008088  5963               	subwfb	(ValidateFrequency@frequencyNew+3)& (0+255),w,b
 17150  00808A  B0D8               	btfsc	status,0,c
 17151  00808C  D01D               	goto	u9740
 17152                           
 17153                           ; BSR set to: 0
 17154  00808E  0EC0               	movlw	192
 17155  008090  5D60               	subwf	ValidateFrequency@frequencyNew& (0+255),w,b
 17156  008092  0E55               	movlw	85
 17157  008094  5961               	subwfb	(ValidateFrequency@frequencyNew+1)& (0+255),w,b
 17158  008096  0E70               	movlw	112
 17159  008098  5962               	subwfb	(ValidateFrequency@frequencyNew+2)& (0+255),w,b
 17160  00809A  0E33               	movlw	51
 17161  00809C  D012               	goto	L30
 17162  00809E                     l2073:
 17163                           
 17164                           ;lorawan_eu.c: 1099: else
 17165                           ;lorawan_eu.c: 1100: {
 17166                           ;lorawan_eu.c: 1101: if ( (frequencyNew > 434790000) || (frequencyNew < 433050000) )
 17167                           
 17168                           ; BSR set to: 0
 17169  00809E  0E71               	movlw	113
 17170  0080A0  0100               	movlb	0	; () banked
 17171  0080A2  5D60               	subwf	ValidateFrequency@frequencyNew& (0+255),w,b
 17172  0080A4  0E5E               	movlw	94
 17173  0080A6  5961               	subwfb	(ValidateFrequency@frequencyNew+1)& (0+255),w,b
 17174  0080A8  0EEA               	movlw	234
 17175  0080AA  5962               	subwfb	(ValidateFrequency@frequencyNew+2)& (0+255),w,b
 17176  0080AC  0E19               	movlw	25
 17177  0080AE  5963               	subwfb	(ValidateFrequency@frequencyNew+3)& (0+255),w,b
 17178  0080B0  B0D8               	btfsc	status,0,c
 17179  0080B2  D00A               	goto	u9740
 17180                           
 17181                           ; BSR set to: 0
 17182  0080B4  0E90               	movlw	144
 17183  0080B6  5D60               	subwf	ValidateFrequency@frequencyNew& (0+255),w,b
 17184  0080B8  0ED1               	movlw	209
 17185  0080BA  5961               	subwfb	(ValidateFrequency@frequencyNew+1)& (0+255),w,b
 17186  0080BC  0ECF               	movlw	207
 17187  0080BE  5962               	subwfb	(ValidateFrequency@frequencyNew+2)& (0+255),w,b
 17188  0080C0  0E19               	movlw	25
 17189  0080C2                     L30:
 17190  0080C2  5963               	subwfb	(ValidateFrequency@frequencyNew+3)& (0+255),w,b
 17191  0080C4  B0D8               	btfsc	status,0,c
 17192  0080C6  D002               	goto	l2078
 17193  0080C8                     u9740:
 17194                           
 17195                           ; BSR set to: 0
 17196                           ;lorawan_eu.c: 1102: {
 17197                           ;lorawan_eu.c: 1103: result = INVALID_PARAMETER ;
 17198                           
 17199                           ; BSR set to: 0
 17200  0080C8  0E03               	movlw	3
 17201  0080CA  6F64               	movwf	ValidateFrequency@result& (0+255),b
 17202  0080CC                     l2078:
 17203                           
 17204                           ; BSR set to: 0
 17205                           ;lorawan_eu.c: 1104: }
 17206                           ;lorawan_eu.c: 1105: }
 17207                           ;lorawan_eu.c: 1107: return result;
 17208                           
 17209                           ; BSR set to: 0
 17210  0080CC  5164               	movf	ValidateFrequency@result& (0+255),w,b
 17211  0080CE  0012               	return	
 17212  0080D0                     __end_of_ValidateFrequency:
 17213                           	opt stack 0
 17214                           tosu	equ	0xFFF
 17215                           tosh	equ	0xFFE
 17216                           tosl	equ	0xFFD
 17217                           pclath	equ	0xFFA
 17218                           tblptru	equ	0xFF8
 17219                           tblptrh	equ	0xFF7
 17220                           tblptrl	equ	0xFF6
 17221                           tablat	equ	0xFF5
 17222                           prodh	equ	0xFF4
 17223                           prodl	equ	0xFF3
 17224                           intcon	equ	0xFF2
 17225                           intcon2	equ	0xFF1
 17226                           intcon3	equ	0xFF0
 17227                           indf0	equ	0xFEF
 17228                           postinc0	equ	0xFEE
 17229                           fsr0h	equ	0xFEA
 17230                           fsr0l	equ	0xFE9
 17231                           wreg	equ	0xFE8
 17232                           postinc1	equ	0xFE6
 17233                           postdec1	equ	0xFE5
 17234                           plusw1	equ	0xFE3
 17235                           fsr1h	equ	0xFE2
 17236                           fsr1l	equ	0xFE1
 17237                           indf2	equ	0xFDF
 17238                           postinc2	equ	0xFDE
 17239                           postdec2	equ	0xFDD
 17240                           fsr2h	equ	0xFDA
 17241                           fsr2l	equ	0xFD9
 17242                           status	equ	0xFD8
 17243                           
 17244 ;; *************** function _ValidateDataRange *****************
 17245 ;; Defined at:
 17246 ;;		line 1110 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 17247 ;; Parameters:    Size  Location     Type
 17248 ;;  dataRangeNew    1    wreg     unsigned char 
 17249 ;; Auto vars:     Size  Location     Type
 17250 ;;  dataRangeNew    1    3[BANK0 ] unsigned char 
 17251 ;;  dataRateMin     1    5[BANK0 ] unsigned char 
 17252 ;;  dataRateMax     1    4[BANK0 ] unsigned char 
 17253 ;;  result          1    2[BANK0 ] enum E7249
 17254 ;; Return value:  Size  Location     Type
 17255 ;;                  1    wreg      enum E7249
 17256 ;; Registers used:
 17257 ;;		wreg, status,2, status,0, cstack
 17258 ;; Tracked objects:
 17259 ;;		On entry : 0/0
 17260 ;;		On exit  : 0/0
 17261 ;;		Unchanged: 0/0
 17262 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17263 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17264 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17265 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17266 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17267 ;;Total ram usage:        4 bytes
 17268 ;; Hardware stack levels used:    1
 17269 ;; Hardware stack levels required when called:    8
 17270 ;; This function calls:
 17271 ;;		_ValidateDataRate
 17272 ;; This function is called by:
 17273 ;;		_ExecuteNewChannel
 17274 ;;		_LORAWAN_SetDataRange
 17275 ;; This function uses a non-reentrant model
 17276 ;;
 17277                           
 17278                           	psect	text79
 17279  0088B2                     __ptext79:
 17280                           	opt stack 0
 17281  0088B2                     _ValidateDataRange:
 17282                           	opt stack 16
 17283                           
 17284                           ; BSR set to: 0
 17285                           ;incstack = 0
 17286                           ;ValidateDataRange@dataRangeNew stored from wreg
 17287  0088B2  0100               	movlb	0	; () banked
 17288  0088B4  6F63               	movwf	ValidateDataRange@dataRangeNew& (0+255),b
 17289                           
 17290                           ;lorawan_eu.c: 1112: LorawanError_t result = OK;
 17291  0088B6  0E00               	movlw	0
 17292  0088B8  0100               	movlb	0	; () banked
 17293  0088BA  6F62               	movwf	ValidateDataRange@result& (0+255),b
 17294                           
 17295                           ; BSR set to: 0
 17296                           ;lorawan_eu.c: 1113: uint8_t dataRateMax, dataRateMin;
 17297                           ;lorawan_eu.c: 1115: dataRateMin = dataRangeNew & 0x0F;
 17298  0088BC  5163               	movf	ValidateDataRange@dataRangeNew& (0+255),w,b
 17299  0088BE  0B0F               	andlw	15
 17300  0088C0  6F65               	movwf	ValidateDataRange@dataRateMin& (0+255),b
 17301                           
 17302                           ; BSR set to: 0
 17303                           ;lorawan_eu.c: 1116: dataRateMax = (dataRangeNew & 0xF0) >> (4);
 17304  0088C2  3963               	swapf	ValidateDataRange@dataRangeNew& (0+255),w,b
 17305  0088C4  0B0F               	andlw	15
 17306  0088C6  0B0F               	andlw	15
 17307  0088C8  6F64               	movwf	ValidateDataRange@dataRateMax& (0+255),b
 17308                           
 17309                           ; BSR set to: 0
 17310                           ;lorawan_eu.c: 1118: if ( (ValidateDataRate (dataRateMax) != OK) || (ValidateDataRate (d
      +                          ataRateMin) != OK ) || (dataRateMax < dataRateMin) )
 17311  0088CA  5164               	movf	ValidateDataRange@dataRateMax& (0+255),w,b
 17312  0088CC  ECB9  F049         	call	_ValidateDataRate
 17313  0088D0  0900               	iorlw	0
 17314  0088D2  A4D8               	btfss	status,2,c
 17315  0088D4  D00C               	goto	u9770
 17316  0088D6  0100               	movlb	0	; () banked
 17317  0088D8  5165               	movf	ValidateDataRange@dataRateMin& (0+255),w,b
 17318  0088DA  ECB9  F049         	call	_ValidateDataRate
 17319  0088DE  0900               	iorlw	0
 17320  0088E0  A4D8               	btfss	status,2,c
 17321  0088E2  D005               	goto	u9770
 17322  0088E4  0100               	movlb	0	; () banked
 17323  0088E6  5165               	movf	ValidateDataRange@dataRateMin& (0+255),w,b
 17324  0088E8  5D64               	subwf	ValidateDataRange@dataRateMax& (0+255),w,b
 17325  0088EA  B0D8               	btfsc	status,0,c
 17326  0088EC  D003               	goto	l2084
 17327  0088EE                     u9770:
 17328                           
 17329                           ;lorawan_eu.c: 1119: {
 17330                           ;lorawan_eu.c: 1120: result = INVALID_PARAMETER;
 17331                           
 17332                           ; BSR set to: 0
 17333  0088EE  0E03               	movlw	3
 17334  0088F0  0100               	movlb	0	; () banked
 17335  0088F2  6F62               	movwf	ValidateDataRange@result& (0+255),b
 17336  0088F4                     l2084:
 17337                           
 17338                           ; BSR set to: 0
 17339                           ;lorawan_eu.c: 1121: }
 17340                           ;lorawan_eu.c: 1122: return result;
 17341  0088F4  5162               	movf	ValidateDataRange@result& (0+255),w,b
 17342  0088F6  0012               	return	
 17343  0088F8                     __end_of_ValidateDataRange:
 17344                           	opt stack 0
 17345                           tosu	equ	0xFFF
 17346                           tosh	equ	0xFFE
 17347                           tosl	equ	0xFFD
 17348                           pclath	equ	0xFFA
 17349                           tblptru	equ	0xFF8
 17350                           tblptrh	equ	0xFF7
 17351                           tblptrl	equ	0xFF6
 17352                           tablat	equ	0xFF5
 17353                           prodh	equ	0xFF4
 17354                           prodl	equ	0xFF3
 17355                           intcon	equ	0xFF2
 17356                           intcon2	equ	0xFF1
 17357                           intcon3	equ	0xFF0
 17358                           indf0	equ	0xFEF
 17359                           postinc0	equ	0xFEE
 17360                           fsr0h	equ	0xFEA
 17361                           fsr0l	equ	0xFE9
 17362                           wreg	equ	0xFE8
 17363                           postinc1	equ	0xFE6
 17364                           postdec1	equ	0xFE5
 17365                           plusw1	equ	0xFE3
 17366                           fsr1h	equ	0xFE2
 17367                           fsr1l	equ	0xFE1
 17368                           indf2	equ	0xFDF
 17369                           postinc2	equ	0xFDE
 17370                           postdec2	equ	0xFDD
 17371                           fsr2h	equ	0xFDA
 17372                           fsr2l	equ	0xFD9
 17373                           status	equ	0xFD8
 17374                           
 17375 ;; *************** function _UpdateFrequency *****************
 17376 ;; Defined at:
 17377 ;;		line 1154 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 17378 ;; Parameters:    Size  Location     Type
 17379 ;;  channelId       1    wreg     unsigned char 
 17380 ;;  frequencyNew    4    0[BANK0 ] unsigned long 
 17381 ;; Auto vars:     Size  Location     Type
 17382 ;;  channelId       1    4[BANK0 ] unsigned char 
 17383 ;; Return value:  Size  Location     Type
 17384 ;;                  1    wreg      void 
 17385 ;; Registers used:
 17386 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 17387 ;; Tracked objects:
 17388 ;;		On entry : 0/0
 17389 ;;		On exit  : 0/0
 17390 ;;		Unchanged: 0/0
 17391 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17392 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17393 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17394 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17395 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17396 ;;Total ram usage:        5 bytes
 17397 ;; Hardware stack levels used:    1
 17398 ;; Hardware stack levels required when called:    7
 17399 ;; This function calls:
 17400 ;;		Nothing
 17401 ;; This function is called by:
 17402 ;;		_ExecuteNewChannel
 17403 ;;		_LORAWAN_SetFrequency
 17404 ;; This function uses a non-reentrant model
 17405 ;;
 17406                           
 17407                           	psect	text80
 17408  00893E                     __ptext80:
 17409                           	opt stack 0
 17410  00893E                     _UpdateFrequency:
 17411                           	opt stack 17
 17412                           
 17413                           ; BSR set to: 0
 17414                           ;incstack = 0
 17415                           ;UpdateFrequency@channelId stored from wreg
 17416  00893E  0100               	movlb	0	; () banked
 17417  008940  6F64               	movwf	UpdateFrequency@channelId& (0+255),b
 17418                           
 17419                           ;lorawan_eu.c: 1156: Channels[channelId].frequency = frequencyNew;
 17420  008942  0100               	movlb	0	; () banked
 17421  008944  5164               	movf	UpdateFrequency@channelId& (0+255),w,b
 17422  008946  0D0E               	mullw	14
 17423  008948  0E00               	movlw	low _Channels
 17424  00894A  24F3               	addwf	prodl,w,c
 17425  00894C  6ED9               	movwf	fsr2l,c
 17426  00894E  0E04               	movlw	high _Channels
 17427  008950  20F4               	addwfc	prodh,w,c
 17428  008952  6EDA               	movwf	fsr2h,c
 17429  008954  C060  FFDE         	movff	UpdateFrequency@frequencyNew,postinc2
 17430  008958  C061  FFDE         	movff	UpdateFrequency@frequencyNew+1,postinc2
 17431  00895C  C062  FFDE         	movff	UpdateFrequency@frequencyNew+2,postinc2
 17432  008960  C063  FFDE         	movff	UpdateFrequency@frequencyNew+3,postinc2
 17433                           
 17434                           ;lorawan_eu.c: 1157: Channels[channelId].parametersDefined |= 0X01;
 17435  008964  5164               	movf	UpdateFrequency@channelId& (0+255),w,b
 17436  008966  0D0E               	mullw	14
 17437  008968  0E0D               	movlw	13
 17438  00896A  26F3               	addwf	prodl,f,c
 17439  00896C  0E00               	movlw	0
 17440  00896E  22F4               	addwfc	prodh,f,c
 17441  008970  0E00               	movlw	low _Channels
 17442  008972  24F3               	addwf	prodl,w,c
 17443  008974  6ED9               	movwf	fsr2l,c
 17444  008976  0E04               	movlw	high _Channels
 17445  008978  20F4               	addwfc	prodh,w,c
 17446  00897A  6EDA               	movwf	fsr2h,c
 17447  00897C  0E00               	movlw	0
 17448  00897E  80DB               	bsf	plusw2,0,c
 17449                           
 17450                           ; BSR set to: 0
 17451  008980  0012               	return		;funcret
 17452  008982                     __end_of_UpdateFrequency:
 17453                           	opt stack 0
 17454                           tosu	equ	0xFFF
 17455                           tosh	equ	0xFFE
 17456                           tosl	equ	0xFFD
 17457                           pclath	equ	0xFFA
 17458                           tblptru	equ	0xFF8
 17459                           tblptrh	equ	0xFF7
 17460                           tblptrl	equ	0xFF6
 17461                           tablat	equ	0xFF5
 17462                           prodh	equ	0xFF4
 17463                           prodl	equ	0xFF3
 17464                           intcon	equ	0xFF2
 17465                           intcon2	equ	0xFF1
 17466                           intcon3	equ	0xFF0
 17467                           indf0	equ	0xFEF
 17468                           postinc0	equ	0xFEE
 17469                           fsr0h	equ	0xFEA
 17470                           fsr0l	equ	0xFE9
 17471                           wreg	equ	0xFE8
 17472                           postinc1	equ	0xFE6
 17473                           postdec1	equ	0xFE5
 17474                           plusw1	equ	0xFE3
 17475                           fsr1h	equ	0xFE2
 17476                           fsr1l	equ	0xFE1
 17477                           indf2	equ	0xFDF
 17478                           postinc2	equ	0xFDE
 17479                           postdec2	equ	0xFDD
 17480                           plusw2	equ	0xFDB
 17481                           fsr2h	equ	0xFDA
 17482                           fsr2l	equ	0xFD9
 17483                           status	equ	0xFD8
 17484                           
 17485 ;; *************** function _UpdateDutyCycle *****************
 17486 ;; Defined at:
 17487 ;;		line 1160 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 17488 ;; Parameters:    Size  Location     Type
 17489 ;;  channelId       1    wreg     unsigned char 
 17490 ;;  dutyCycleNew    2    0[BANK0 ] unsigned int 
 17491 ;; Auto vars:     Size  Location     Type
 17492 ;;  channelId       1    2[BANK0 ] unsigned char 
 17493 ;; Return value:  Size  Location     Type
 17494 ;;                  1    wreg      void 
 17495 ;; Registers used:
 17496 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 17497 ;; Tracked objects:
 17498 ;;		On entry : 0/0
 17499 ;;		On exit  : 0/0
 17500 ;;		Unchanged: 0/0
 17501 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17502 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17503 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17504 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17505 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17506 ;;Total ram usage:        3 bytes
 17507 ;; Hardware stack levels used:    1
 17508 ;; Hardware stack levels required when called:    7
 17509 ;; This function calls:
 17510 ;;		Nothing
 17511 ;; This function is called by:
 17512 ;;		_ExecuteNewChannel
 17513 ;;		_LORAWAN_SetDutyCycle
 17514 ;; This function uses a non-reentrant model
 17515 ;;
 17516                           
 17517                           	psect	text81
 17518  008982                     __ptext81:
 17519                           	opt stack 0
 17520  008982                     _UpdateDutyCycle:
 17521                           	opt stack 17
 17522                           
 17523                           ; BSR set to: 0
 17524                           ;incstack = 0
 17525                           ;UpdateDutyCycle@channelId stored from wreg
 17526  008982  0100               	movlb	0	; () banked
 17527  008984  6F62               	movwf	UpdateDutyCycle@channelId& (0+255),b
 17528                           
 17529                           ;lorawan_eu.c: 1162: Channels[channelId].dutyCycle = dutyCycleNew;
 17530  008986  0100               	movlb	0	; () banked
 17531  008988  5162               	movf	UpdateDutyCycle@channelId& (0+255),w,b
 17532  00898A  0D0E               	mullw	14
 17533  00898C  0E06               	movlw	6
 17534  00898E  26F3               	addwf	prodl,f,c
 17535  008990  0E00               	movlw	0
 17536  008992  22F4               	addwfc	prodh,f,c
 17537  008994  0E00               	movlw	low _Channels
 17538  008996  24F3               	addwf	prodl,w,c
 17539  008998  6ED9               	movwf	fsr2l,c
 17540  00899A  0E04               	movlw	high _Channels
 17541  00899C  20F4               	addwfc	prodh,w,c
 17542  00899E  6EDA               	movwf	fsr2h,c
 17543  0089A0  C060  FFDE         	movff	UpdateDutyCycle@dutyCycleNew,postinc2
 17544  0089A4  C061  FFDD         	movff	UpdateDutyCycle@dutyCycleNew+1,postdec2
 17545                           
 17546                           ;lorawan_eu.c: 1163: Channels[channelId].parametersDefined |= 0x04;
 17547  0089A8  5162               	movf	UpdateDutyCycle@channelId& (0+255),w,b
 17548  0089AA  0D0E               	mullw	14
 17549  0089AC  0E0D               	movlw	13
 17550  0089AE  26F3               	addwf	prodl,f,c
 17551  0089B0  0E00               	movlw	0
 17552  0089B2  22F4               	addwfc	prodh,f,c
 17553  0089B4  0E00               	movlw	low _Channels
 17554  0089B6  24F3               	addwf	prodl,w,c
 17555  0089B8  6ED9               	movwf	fsr2l,c
 17556  0089BA  0E04               	movlw	high _Channels
 17557  0089BC  20F4               	addwfc	prodh,w,c
 17558  0089BE  6EDA               	movwf	fsr2h,c
 17559  0089C0  0E00               	movlw	0
 17560  0089C2  84DB               	bsf	plusw2,2,c
 17561                           
 17562                           ; BSR set to: 0
 17563  0089C4  0012               	return		;funcret
 17564  0089C6                     __end_of_UpdateDutyCycle:
 17565                           	opt stack 0
 17566                           tosu	equ	0xFFF
 17567                           tosh	equ	0xFFE
 17568                           tosl	equ	0xFFD
 17569                           pclath	equ	0xFFA
 17570                           tblptru	equ	0xFF8
 17571                           tblptrh	equ	0xFF7
 17572                           tblptrl	equ	0xFF6
 17573                           tablat	equ	0xFF5
 17574                           prodh	equ	0xFF4
 17575                           prodl	equ	0xFF3
 17576                           intcon	equ	0xFF2
 17577                           intcon2	equ	0xFF1
 17578                           intcon3	equ	0xFF0
 17579                           indf0	equ	0xFEF
 17580                           postinc0	equ	0xFEE
 17581                           fsr0h	equ	0xFEA
 17582                           fsr0l	equ	0xFE9
 17583                           wreg	equ	0xFE8
 17584                           postinc1	equ	0xFE6
 17585                           postdec1	equ	0xFE5
 17586                           plusw1	equ	0xFE3
 17587                           fsr1h	equ	0xFE2
 17588                           fsr1l	equ	0xFE1
 17589                           indf2	equ	0xFDF
 17590                           postinc2	equ	0xFDE
 17591                           postdec2	equ	0xFDD
 17592                           plusw2	equ	0xFDB
 17593                           fsr2h	equ	0xFDA
 17594                           fsr2l	equ	0xFD9
 17595                           status	equ	0xFD8
 17596                           
 17597 ;; *************** function _UpdateDataRange *****************
 17598 ;; Defined at:
 17599 ;;		line 1009 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 17600 ;; Parameters:    Size  Location     Type
 17601 ;;  channelId       1    wreg     unsigned char 
 17602 ;;  dataRangeNew    1    0[BANK0 ] unsigned char 
 17603 ;; Auto vars:     Size  Location     Type
 17604 ;;  channelId       1    2[BANK0 ] unsigned char 
 17605 ;;  i               1    3[BANK0 ] unsigned char 
 17606 ;; Return value:  Size  Location     Type
 17607 ;;                  1    wreg      void 
 17608 ;; Registers used:
 17609 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 17610 ;; Tracked objects:
 17611 ;;		On entry : 0/0
 17612 ;;		On exit  : 0/0
 17613 ;;		Unchanged: 0/0
 17614 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17615 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17616 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17617 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17618 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17619 ;;Total ram usage:        4 bytes
 17620 ;; Hardware stack levels used:    1
 17621 ;; Hardware stack levels required when called:    7
 17622 ;; This function calls:
 17623 ;;		Nothing
 17624 ;; This function is called by:
 17625 ;;		_ExecuteNewChannel
 17626 ;;		_LORAWAN_SetDataRange
 17627 ;; This function uses a non-reentrant model
 17628 ;;
 17629                           
 17630                           	psect	text82
 17631  00596E                     __ptext82:
 17632                           	opt stack 0
 17633  00596E                     _UpdateDataRange:
 17634                           	opt stack 17
 17635                           
 17636                           ; BSR set to: 0
 17637                           ;incstack = 0
 17638                           ;UpdateDataRange@channelId stored from wreg
 17639  00596E  0100               	movlb	0	; () banked
 17640  005970  6F62               	movwf	UpdateDataRange@channelId& (0+255),b
 17641                           
 17642                           ;lorawan_eu.c: 1011: uint8_t i;
 17643                           ;lorawan_eu.c: 1014: loRa.minDataRate = 7;
 17644  005972  0E07               	movlw	7
 17645  005974  0102               	movlb	2	; () banked
 17646  005976  6FF1               	movwf	(_loRa+235)& (0+255),b
 17647                           
 17648                           ;lorawan_eu.c: 1015: loRa.maxDataRate = 0;
 17649  005978  0E00               	movlw	0
 17650  00597A  6FF2               	movwf	(_loRa+236)& (0+255),b
 17651                           
 17652                           ; BSR set to: 2
 17653                           ;lorawan_eu.c: 1017: Channels[channelId].dataRange.value = dataRangeNew;
 17654  00597C  0100               	movlb	0	; () banked
 17655  00597E  5162               	movf	UpdateDataRange@channelId& (0+255),w,b
 17656  005980  0D0E               	mullw	14
 17657  005982  0E05               	movlw	5
 17658  005984  26F3               	addwf	prodl,f,c
 17659  005986  0E00               	movlw	0
 17660  005988  22F4               	addwfc	prodh,f,c
 17661  00598A  0E00               	movlw	low _Channels
 17662  00598C  24F3               	addwf	prodl,w,c
 17663  00598E  6ED9               	movwf	fsr2l,c
 17664  005990  0E04               	movlw	high _Channels
 17665  005992  20F4               	addwfc	prodh,w,c
 17666  005994  6EDA               	movwf	fsr2h,c
 17667  005996  C060  FFDF         	movff	UpdateDataRange@dataRangeNew,indf2
 17668                           
 17669                           ; BSR set to: 0
 17670                           ;lorawan_eu.c: 1018: Channels[channelId].parametersDefined |= 0X02;
 17671  00599A  5162               	movf	UpdateDataRange@channelId& (0+255),w,b
 17672  00599C  0D0E               	mullw	14
 17673  00599E  0E0D               	movlw	13
 17674  0059A0  26F3               	addwf	prodl,f,c
 17675  0059A2  0E00               	movlw	0
 17676  0059A4  22F4               	addwfc	prodh,f,c
 17677  0059A6  0E00               	movlw	low _Channels
 17678  0059A8  24F3               	addwf	prodl,w,c
 17679  0059AA  6ED9               	movwf	fsr2l,c
 17680  0059AC  0E04               	movlw	high _Channels
 17681  0059AE  20F4               	addwfc	prodh,w,c
 17682  0059B0  6EDA               	movwf	fsr2h,c
 17683  0059B2  0E00               	movlw	0
 17684  0059B4  82DB               	bsf	plusw2,1,c
 17685                           
 17686                           ; BSR set to: 0
 17687                           ;lorawan_eu.c: 1019: for (i=0; i < loRa.maxChannels; i++)
 17688  0059B6  0E00               	movlw	0
 17689  0059B8  6F63               	movwf	UpdateDataRange@i& (0+255),b
 17690  0059BA  D06D               	goto	l2048
 17691  0059BC                     
 17692                           ; BSR set to: 0
 17693                           ;lorawan_eu.c: 1020: {
 17694                           ;lorawan_eu.c: 1021: if ( (Channels[i].dataRange.min < loRa.minDataRate) && (Channels[i]
      +                          .status == 1) )
 17695                           
 17696                           ; BSR set to: 0
 17697  0059BC  5163               	movf	UpdateDataRange@i& (0+255),w,b
 17698  0059BE  0D0E               	mullw	14
 17699  0059C0  0E05               	movlw	5
 17700  0059C2  26F3               	addwf	prodl,f,c
 17701  0059C4  0E00               	movlw	0
 17702  0059C6  22F4               	addwfc	prodh,f,c
 17703  0059C8  0E00               	movlw	low _Channels
 17704  0059CA  24F3               	addwf	prodl,w,c
 17705  0059CC  6ED9               	movwf	fsr2l,c
 17706  0059CE  0E04               	movlw	high _Channels
 17707  0059D0  20F4               	addwfc	prodh,w,c
 17708  0059D2  6EDA               	movwf	fsr2h,c
 17709  0059D4  0104               	movlb	4	; () banked
 17710  0059D6  50DF               	movf	223,w,c
 17711  0059D8  0B0F               	andlw	15
 17712  0059DA  0100               	movlb	0	; () banked
 17713  0059DC  6F61               	movwf	??_UpdateDataRange& (0+255),b
 17714  0059DE  0102               	movlb	2	; () banked
 17715  0059E0  51F1               	movf	(_loRa+235)& (0+255),w,b
 17716  0059E2  0100               	movlb	0	; () banked
 17717  0059E4  5D61               	subwf	??_UpdateDataRange& (0+255),w,b
 17718  0059E6  B0D8               	btfsc	status,0,c
 17719  0059E8  D020               	goto	l2050
 17720                           
 17721                           ; BSR set to: 0
 17722  0059EA  5163               	movf	UpdateDataRange@i& (0+255),w,b
 17723  0059EC  0D0E               	mullw	14
 17724  0059EE  0E04               	movlw	4
 17725  0059F0  26F3               	addwf	prodl,f,c
 17726  0059F2  0E00               	movlw	0
 17727  0059F4  22F4               	addwfc	prodh,f,c
 17728  0059F6  0E00               	movlw	low _Channels
 17729  0059F8  24F3               	addwf	prodl,w,c
 17730  0059FA  6ED9               	movwf	fsr2l,c
 17731  0059FC  0E04               	movlw	high _Channels
 17732  0059FE  20F4               	addwfc	prodh,w,c
 17733  005A00  6EDA               	movwf	fsr2h,c
 17734  005A02  04DE               	decf	postinc2,w,c
 17735  005A04  A4D8               	btfss	status,2,c
 17736  005A06  D011               	goto	l2050
 17737                           
 17738                           ; BSR set to: 0
 17739                           ;lorawan_eu.c: 1022: {
 17740                           ;lorawan_eu.c: 1023: loRa.minDataRate = Channels[i].dataRange.min;
 17741  005A08  5163               	movf	UpdateDataRange@i& (0+255),w,b
 17742  005A0A  0D0E               	mullw	14
 17743  005A0C  0E05               	movlw	5
 17744  005A0E  26F3               	addwf	prodl,f,c
 17745  005A10  0E00               	movlw	0
 17746  005A12  22F4               	addwfc	prodh,f,c
 17747  005A14  0E00               	movlw	low _Channels
 17748  005A16  24F3               	addwf	prodl,w,c
 17749  005A18  6ED9               	movwf	fsr2l,c
 17750  005A1A  0E04               	movlw	high _Channels
 17751  005A1C  20F4               	addwfc	prodh,w,c
 17752  005A1E  6EDA               	movwf	fsr2h,c
 17753  005A20  0104               	movlb	4	; () banked
 17754  005A22  50DF               	movf	223,w,c
 17755  005A24  0B0F               	andlw	15
 17756  005A26  0102               	movlb	2	; () banked
 17757  005A28  6FF1               	movwf	(_loRa+235)& (0+255),b
 17758  005A2A                     l2050:
 17759                           
 17760                           ;lorawan_eu.c: 1024: }
 17761                           ;lorawan_eu.c: 1025: if ( (Channels[i].dataRange.max > loRa.maxDataRate) && (Channels[i]
      +                          .status == 1) )
 17762  005A2A  0100               	movlb	0	; () banked
 17763  005A2C  5163               	movf	UpdateDataRange@i& (0+255),w,b
 17764  005A2E  0D0E               	mullw	14
 17765  005A30  0E05               	movlw	5
 17766  005A32  26F3               	addwf	prodl,f,c
 17767  005A34  0E00               	movlw	0
 17768  005A36  22F4               	addwfc	prodh,f,c
 17769  005A38  0E00               	movlw	low _Channels
 17770  005A3A  24F3               	addwf	prodl,w,c
 17771  005A3C  6ED9               	movwf	fsr2l,c
 17772  005A3E  0E04               	movlw	high _Channels
 17773  005A40  20F4               	addwfc	prodh,w,c
 17774  005A42  6EDA               	movwf	fsr2h,c
 17775  005A44  0104               	movlb	4	; () banked
 17776  005A46  38DF               	swapf	223,w,c
 17777  005A48  0B0F               	andlw	15
 17778  005A4A  0102               	movlb	2	; () banked
 17779  005A4C  61F2               	cpfslt	(_loRa+236)& (0+255),b
 17780  005A4E  D021               	goto	l2051
 17781                           
 17782                           ; BSR set to: 2
 17783  005A50  0100               	movlb	0	; () banked
 17784  005A52  5163               	movf	UpdateDataRange@i& (0+255),w,b
 17785  005A54  0D0E               	mullw	14
 17786  005A56  0E04               	movlw	4
 17787  005A58  26F3               	addwf	prodl,f,c
 17788  005A5A  0E00               	movlw	0
 17789  005A5C  22F4               	addwfc	prodh,f,c
 17790  005A5E  0E00               	movlw	low _Channels
 17791  005A60  24F3               	addwf	prodl,w,c
 17792  005A62  6ED9               	movwf	fsr2l,c
 17793  005A64  0E04               	movlw	high _Channels
 17794  005A66  20F4               	addwfc	prodh,w,c
 17795  005A68  6EDA               	movwf	fsr2h,c
 17796  005A6A  04DE               	decf	postinc2,w,c
 17797  005A6C  A4D8               	btfss	status,2,c
 17798  005A6E  D011               	goto	l2051
 17799                           
 17800                           ; BSR set to: 0
 17801                           ;lorawan_eu.c: 1026: {
 17802                           ;lorawan_eu.c: 1027: loRa.maxDataRate = Channels[i].dataRange.max;
 17803  005A70  5163               	movf	UpdateDataRange@i& (0+255),w,b
 17804  005A72  0D0E               	mullw	14
 17805  005A74  0E05               	movlw	5
 17806  005A76  26F3               	addwf	prodl,f,c
 17807  005A78  0E00               	movlw	0
 17808  005A7A  22F4               	addwfc	prodh,f,c
 17809  005A7C  0E00               	movlw	low _Channels
 17810  005A7E  24F3               	addwf	prodl,w,c
 17811  005A80  6ED9               	movwf	fsr2l,c
 17812  005A82  0E04               	movlw	high _Channels
 17813  005A84  20F4               	addwfc	prodh,w,c
 17814  005A86  6EDA               	movwf	fsr2h,c
 17815  005A88  0104               	movlb	4	; () banked
 17816  005A8A  38DF               	swapf	223,w,c
 17817  005A8C  0B0F               	andlw	15
 17818  005A8E  0102               	movlb	2	; () banked
 17819  005A90  6FF2               	movwf	(_loRa+236)& (0+255),b
 17820  005A92                     l2051:
 17821                           
 17822                           ; BSR set to: 2
 17823  005A92  0100               	movlb	0	; () banked
 17824  005A94  2B63               	incf	UpdateDataRange@i& (0+255),f,b
 17825  005A96                     l2048:
 17826                           
 17827                           ; BSR set to: 0
 17828                           
 17829                           ; BSR set to: 0
 17830  005A96  0102               	movlb	2	; () banked
 17831  005A98  51F3               	movf	(_loRa+237)& (0+255),w,b
 17832  005A9A  0100               	movlb	0	; () banked
 17833  005A9C  5D63               	subwf	UpdateDataRange@i& (0+255),w,b
 17834  005A9E  A0D8               	btfss	status,0,c
 17835  005AA0  D78D               	goto	l2049
 17836                           
 17837                           ; BSR set to: 0
 17838                           ;lorawan_eu.c: 1028: }
 17839                           ;lorawan_eu.c: 1029: }
 17840                           ;lorawan_eu.c: 1031: if (loRa.currentDataRate > loRa.maxDataRate)
 17841                           
 17842                           ; BSR set to: 0
 17843  005AA2  0102               	movlb	2	; () banked
 17844  005AA4  51E5               	movf	(_loRa+223)& (0+255),w,b
 17845  005AA6  5DF2               	subwf	(_loRa+236)& (0+255),w,b
 17846  005AA8  A0D8               	btfss	status,0,c
 17847                           
 17848                           ; BSR set to: 2
 17849                           ;lorawan_eu.c: 1032: {
 17850                           ;lorawan_eu.c: 1033: loRa.currentDataRate = loRa.maxDataRate;
 17851  005AAA  C2F2  F2E5         	movff	_loRa+236,_loRa+223
 17852                           
 17853                           ; BSR set to: 2
 17854                           ;lorawan_eu.c: 1034: }
 17855                           ;lorawan_eu.c: 1036: if (loRa.currentDataRate < loRa.minDataRate)
 17856                           
 17857                           ; BSR set to: 2
 17858  005AAE  51F1               	movf	(_loRa+235)& (0+255),w,b
 17859  005AB0  5DE5               	subwf	(_loRa+223)& (0+255),w,b
 17860  005AB2  B0D8               	btfsc	status,0,c
 17861  005AB4  0012               	return	
 17862                           
 17863                           ; BSR set to: 2
 17864                           ;lorawan_eu.c: 1037: {
 17865                           ;lorawan_eu.c: 1038: loRa.currentDataRate = loRa.minDataRate;
 17866  005AB6  C2F1  F2E5         	movff	_loRa+235,_loRa+223
 17867  005ABA  0012               	return	
 17868  005ABC                     __end_of_UpdateDataRange:
 17869                           	opt stack 0
 17870                           tosu	equ	0xFFF
 17871                           tosh	equ	0xFFE
 17872                           tosl	equ	0xFFD
 17873                           pclath	equ	0xFFA
 17874                           tblptru	equ	0xFF8
 17875                           tblptrh	equ	0xFF7
 17876                           tblptrl	equ	0xFF6
 17877                           tablat	equ	0xFF5
 17878                           prodh	equ	0xFF4
 17879                           prodl	equ	0xFF3
 17880                           intcon	equ	0xFF2
 17881                           intcon2	equ	0xFF1
 17882                           intcon3	equ	0xFF0
 17883                           indf0	equ	0xFEF
 17884                           postinc0	equ	0xFEE
 17885                           fsr0h	equ	0xFEA
 17886                           fsr0l	equ	0xFE9
 17887                           wreg	equ	0xFE8
 17888                           postinc1	equ	0xFE6
 17889                           postdec1	equ	0xFE5
 17890                           plusw1	equ	0xFE3
 17891                           fsr1h	equ	0xFE2
 17892                           fsr1l	equ	0xFE1
 17893                           indf2	equ	0xFDF
 17894                           postinc2	equ	0xFDE
 17895                           postdec2	equ	0xFDD
 17896                           plusw2	equ	0xFDB
 17897                           fsr2h	equ	0xFDA
 17898                           fsr2l	equ	0xFD9
 17899                           status	equ	0xFD8
 17900                           
 17901 ;; *************** function _LORAWAN_SetChannelIdStatus *****************
 17902 ;; Defined at:
 17903 ;;		line 282 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 17904 ;; Parameters:    Size  Location     Type
 17905 ;;  channelId       1    wreg     unsigned char 
 17906 ;;  statusNew       1    4[BANK0 ] unsigned char 
 17907 ;; Auto vars:     Size  Location     Type
 17908 ;;  channelId       1    6[BANK0 ] unsigned char 
 17909 ;;  result          1    5[BANK0 ] enum E7249
 17910 ;; Return value:  Size  Location     Type
 17911 ;;                  1    wreg      enum E7249
 17912 ;; Registers used:
 17913 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 17914 ;; Tracked objects:
 17915 ;;		On entry : 0/0
 17916 ;;		On exit  : 0/0
 17917 ;;		Unchanged: 0/0
 17918 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17919 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17920 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17921 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17922 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17923 ;;Total ram usage:        3 bytes
 17924 ;; Hardware stack levels used:    1
 17925 ;; Hardware stack levels required when called:    8
 17926 ;; This function calls:
 17927 ;;		_UpdateChannelIdStatus
 17928 ;;		_ValidateChannelId
 17929 ;; This function is called by:
 17930 ;;		_ExecuteNewChannel
 17931 ;;		_UpdateCfList
 17932 ;; This function uses a non-reentrant model
 17933 ;;
 17934                           
 17935                           	psect	text83
 17936  008432                     __ptext83:
 17937                           	opt stack 0
 17938  008432                     _LORAWAN_SetChannelIdStatus:
 17939                           	opt stack 17
 17940                           
 17941                           ; BSR set to: 2
 17942                           ;incstack = 0
 17943                           ;LORAWAN_SetChannelIdStatus@channelId stored from wreg
 17944  008432  0100               	movlb	0	; () banked
 17945  008434  6F66               	movwf	LORAWAN_SetChannelIdStatus@channelId& (0+255),b
 17946                           
 17947                           ;lorawan_eu.c: 284: LorawanError_t result = OK;
 17948  008436  0E00               	movlw	0
 17949  008438  0100               	movlb	0	; () banked
 17950  00843A  6F65               	movwf	LORAWAN_SetChannelIdStatus@result& (0+255),b
 17951                           
 17952                           ; BSR set to: 0
 17953                           ;lorawan_eu.c: 287: if (ValidateChannelId (channelId, 1) != OK)
 17954  00843C  0E01               	movlw	1
 17955  00843E  6F60               	movwf	ValidateChannelId@allowedForDefaultChannels& (0+255),b
 17956  008440  5166               	movf	LORAWAN_SetChannelIdStatus@channelId& (0+255),w,b
 17957  008442  EC68  F048         	call	_ValidateChannelId
 17958  008446  0900               	iorlw	0
 17959  008448  B4D8               	btfsc	status,2,c
 17960  00844A  D004               	goto	l1836
 17961                           
 17962                           ;lorawan_eu.c: 288: {
 17963                           ;lorawan_eu.c: 289: result = INVALID_PARAMETER;
 17964  00844C  0E03               	movlw	3
 17965  00844E  0100               	movlb	0	; () banked
 17966  008450  6F65               	movwf	LORAWAN_SetChannelIdStatus@result& (0+255),b
 17967                           
 17968                           ;lorawan_eu.c: 290: }
 17969  008452  0012               	return	
 17970  008454                     l1836:
 17971                           
 17972                           ;lorawan_eu.c: 292: else
 17973                           ;lorawan_eu.c: 293: {
 17974                           ;lorawan_eu.c: 294: if ( (Channels[channelId].parametersDefined & (0X01 | 0X02 | 0x04) )
      +                           == (0X01 | 0X02 | 0x04) )
 17975                           
 17976                           ; BSR set to: 0
 17977  008454  0100               	movlb	0	; () banked
 17978  008456  5166               	movf	LORAWAN_SetChannelIdStatus@channelId& (0+255),w,b
 17979  008458  0D0E               	mullw	14
 17980  00845A  0E0D               	movlw	13
 17981  00845C  26F3               	addwf	prodl,f,c
 17982  00845E  0E00               	movlw	0
 17983  008460  22F4               	addwfc	prodh,f,c
 17984  008462  0E00               	movlw	low _Channels
 17985  008464  24F3               	addwf	prodl,w,c
 17986  008466  6ED9               	movwf	fsr2l,c
 17987  008468  0E04               	movlw	high _Channels
 17988  00846A  20F4               	addwfc	prodh,w,c
 17989  00846C  6EDA               	movwf	fsr2h,c
 17990  00846E  50DF               	movf	indf2,w,c
 17991  008470  0B07               	andlw	7
 17992  008472  0A07               	xorlw	7
 17993  008474  A4D8               	btfss	status,2,c
 17994  008476  D006               	goto	l1838
 17995                           
 17996                           ; BSR set to: 0
 17997                           ;lorawan_eu.c: 295: {
 17998                           ;lorawan_eu.c: 296: UpdateChannelIdStatus (channelId, statusNew);
 17999  008478  C064  F060         	movff	LORAWAN_SetChannelIdStatus@statusNew,UpdateChannelIdStatus@statusNew
 18000  00847C  5166               	movf	LORAWAN_SetChannelIdStatus@channelId& (0+255),w,b
 18001  00847E  ECA3  F02A         	call	_UpdateChannelIdStatus
 18002                           
 18003                           ;lorawan_eu.c: 297: }
 18004  008482  0012               	return	
 18005  008484                     l1838:
 18006                           
 18007                           ;lorawan_eu.c: 298: else
 18008                           ;lorawan_eu.c: 299: {
 18009                           ;lorawan_eu.c: 300: result = INVALID_PARAMETER;
 18010  008484  0E03               	movlw	3
 18011  008486  0100               	movlb	0	; () banked
 18012  008488  6F65               	movwf	LORAWAN_SetChannelIdStatus@result& (0+255),b
 18013                           
 18014                           ; BSR set to: 0
 18015                           
 18016                           ; BSR set to: 0
 18017  00848A  0012               	return	
 18018  00848C                     __end_of_LORAWAN_SetChannelIdStatus:
 18019                           	opt stack 0
 18020                           tosu	equ	0xFFF
 18021                           tosh	equ	0xFFE
 18022                           tosl	equ	0xFFD
 18023                           pclath	equ	0xFFA
 18024                           tblptru	equ	0xFF8
 18025                           tblptrh	equ	0xFF7
 18026                           tblptrl	equ	0xFF6
 18027                           tablat	equ	0xFF5
 18028                           prodh	equ	0xFF4
 18029                           prodl	equ	0xFF3
 18030                           intcon	equ	0xFF2
 18031                           intcon2	equ	0xFF1
 18032                           intcon3	equ	0xFF0
 18033                           indf0	equ	0xFEF
 18034                           postinc0	equ	0xFEE
 18035                           fsr0h	equ	0xFEA
 18036                           fsr0l	equ	0xFE9
 18037                           wreg	equ	0xFE8
 18038                           postinc1	equ	0xFE6
 18039                           postdec1	equ	0xFE5
 18040                           plusw1	equ	0xFE3
 18041                           fsr1h	equ	0xFE2
 18042                           fsr1l	equ	0xFE1
 18043                           indf2	equ	0xFDF
 18044                           postinc2	equ	0xFDE
 18045                           postdec2	equ	0xFDD
 18046                           plusw2	equ	0xFDB
 18047                           fsr2h	equ	0xFDA
 18048                           fsr2l	equ	0xFD9
 18049                           status	equ	0xFD8
 18050                           
 18051 ;; *************** function _ValidateChannelId *****************
 18052 ;; Defined at:
 18053 ;;		line 1125 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 18054 ;; Parameters:    Size  Location     Type
 18055 ;;  channelId       1    wreg     unsigned char 
 18056 ;;  allowedForDe    1    0[BANK0 ] unsigned char 
 18057 ;; Auto vars:     Size  Location     Type
 18058 ;;  channelId       1    2[BANK0 ] unsigned char 
 18059 ;;  result          1    1[BANK0 ] enum E7249
 18060 ;; Return value:  Size  Location     Type
 18061 ;;                  1    wreg      enum E7249
 18062 ;; Registers used:
 18063 ;;		wreg, status,2, status,0
 18064 ;; Tracked objects:
 18065 ;;		On entry : 0/0
 18066 ;;		On exit  : 0/0
 18067 ;;		Unchanged: 0/0
 18068 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18069 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18070 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18071 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18072 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18073 ;;Total ram usage:        3 bytes
 18074 ;; Hardware stack levels used:    1
 18075 ;; Hardware stack levels required when called:    7
 18076 ;; This function calls:
 18077 ;;		Nothing
 18078 ;; This function is called by:
 18079 ;;		_LORAWAN_SetChannelIdStatus
 18080 ;;		_ExecuteNewChannel
 18081 ;;		_LORAWAN_SetDataRange
 18082 ;;		_LORAWAN_GetDataRange
 18083 ;;		_LORAWAN_GetChannelIdStatus
 18084 ;;		_LORAWAN_SetFrequency
 18085 ;;		_LORAWAN_SetDutyCycle
 18086 ;;		_LORAWAN_GetDutyCycle
 18087 ;; This function uses a non-reentrant model
 18088 ;;
 18089                           
 18090                           	psect	text84
 18091  0090D0                     __ptext84:
 18092                           	opt stack 0
 18093  0090D0                     _ValidateChannelId:
 18094                           	opt stack 17
 18095                           
 18096                           ;incstack = 0
 18097                           ;ValidateChannelId@channelId stored from wreg
 18098  0090D0  0100               	movlb	0	; () banked
 18099  0090D2  6F62               	movwf	ValidateChannelId@channelId& (0+255),b
 18100                           
 18101                           ;lorawan_eu.c: 1127: LorawanError_t result = OK;
 18102  0090D4  0E00               	movlw	0
 18103  0090D6  0100               	movlb	0	; () banked
 18104  0090D8  6F61               	movwf	ValidateChannelId@result& (0+255),b
 18105                           
 18106                           ; BSR set to: 0
 18107                           ;lorawan_eu.c: 1129: if ( (channelId >= 16) || ( (allowedForDefaultChannels == 0) && (ch
      +                          annelId < 3) ) )
 18108  0090DA  0E10               	movlw	16
 18109  0090DC  6162               	cpfslt	ValidateChannelId@channelId& (0+255),b
 18110  0090DE  D006               	goto	u8820
 18111                           
 18112                           ; BSR set to: 0
 18113  0090E0  5160               	movf	ValidateChannelId@allowedForDefaultChannels& (0+255),w,b
 18114  0090E2  A4D8               	btfss	status,2,c
 18115  0090E4  D005               	goto	l2090
 18116                           
 18117                           ; BSR set to: 0
 18118  0090E6  0E03               	movlw	3
 18119  0090E8  6162               	cpfslt	ValidateChannelId@channelId& (0+255),b
 18120  0090EA  D002               	goto	l2090
 18121  0090EC                     u8820:
 18122                           
 18123                           ; BSR set to: 0
 18124                           ;lorawan_eu.c: 1130: {
 18125                           ;lorawan_eu.c: 1131: result = INVALID_PARAMETER ;
 18126                           
 18127                           ; BSR set to: 0
 18128  0090EC  0E03               	movlw	3
 18129  0090EE  6F61               	movwf	ValidateChannelId@result& (0+255),b
 18130  0090F0                     l2090:
 18131                           
 18132                           ; BSR set to: 0
 18133                           ;lorawan_eu.c: 1132: }
 18134                           ;lorawan_eu.c: 1134: return result;
 18135  0090F0  5161               	movf	ValidateChannelId@result& (0+255),w,b
 18136  0090F2  0012               	return	
 18137  0090F4                     __end_of_ValidateChannelId:
 18138                           	opt stack 0
 18139                           tosu	equ	0xFFF
 18140                           tosh	equ	0xFFE
 18141                           tosl	equ	0xFFD
 18142                           pclath	equ	0xFFA
 18143                           tblptru	equ	0xFF8
 18144                           tblptrh	equ	0xFF7
 18145                           tblptrl	equ	0xFF6
 18146                           tablat	equ	0xFF5
 18147                           prodh	equ	0xFF4
 18148                           prodl	equ	0xFF3
 18149                           intcon	equ	0xFF2
 18150                           intcon2	equ	0xFF1
 18151                           intcon3	equ	0xFF0
 18152                           indf0	equ	0xFEF
 18153                           postinc0	equ	0xFEE
 18154                           fsr0h	equ	0xFEA
 18155                           fsr0l	equ	0xFE9
 18156                           wreg	equ	0xFE8
 18157                           postinc1	equ	0xFE6
 18158                           postdec1	equ	0xFE5
 18159                           plusw1	equ	0xFE3
 18160                           fsr1h	equ	0xFE2
 18161                           fsr1l	equ	0xFE1
 18162                           indf2	equ	0xFDF
 18163                           postinc2	equ	0xFDE
 18164                           postdec2	equ	0xFDD
 18165                           plusw2	equ	0xFDB
 18166                           fsr2h	equ	0xFDA
 18167                           fsr2l	equ	0xFD9
 18168                           status	equ	0xFD8
 18169                           
 18170 ;; *************** function _ExecuteLinkCheck *****************
 18171 ;; Defined at:
 18172 ;;		line 1652 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 18173 ;; Parameters:    Size  Location     Type
 18174 ;;  ptr             2    0[BANK0 ] PTR unsigned char 
 18175 ;;		 -> radioBuffer(271), LORAWAN_RxDone@hdr(2), 
 18176 ;; Auto vars:     Size  Location     Type
 18177 ;;		None
 18178 ;; Return value:  Size  Location     Type
 18179 ;;                  2    0[BANK0 ] PTR unsigned char 
 18180 ;; Registers used:
 18181 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 18182 ;; Tracked objects:
 18183 ;;		On entry : 0/0
 18184 ;;		On exit  : 0/0
 18185 ;;		Unchanged: 0/0
 18186 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18187 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18188 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18189 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18190 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18191 ;;Total ram usage:        2 bytes
 18192 ;; Hardware stack levels used:    1
 18193 ;; Hardware stack levels required when called:    7
 18194 ;; This function calls:
 18195 ;;		Nothing
 18196 ;; This function is called by:
 18197 ;;		_MacExecuteCommands
 18198 ;; This function uses a non-reentrant model
 18199 ;;
 18200                           
 18201                           	psect	text85
 18202  008CEA                     __ptext85:
 18203                           	opt stack 0
 18204  008CEA                     _ExecuteLinkCheck:
 18205                           	opt stack 18
 18206                           
 18207                           ;lorawan.c: 1654: loRa.linkCheckMargin = *(ptr++);
 18208                           
 18209                           ; BSR set to: 0
 18210                           ;incstack = 0
 18211  008CEA  C060  FFD9         	movff	ExecuteLinkCheck@ptr,fsr2l
 18212  008CEE  C061  FFDA         	movff	ExecuteLinkCheck@ptr+1,fsr2h
 18213  008CF2  50DF               	movf	indf2,w,c
 18214  008CF4  0102               	movlb	2	; () banked
 18215  008CF6  6FE3               	movwf	(_loRa+221)& (0+255),b
 18216                           
 18217                           ; BSR set to: 2
 18218  008CF8  0100               	movlb	0	; () banked
 18219  008CFA  4B60               	infsnz	ExecuteLinkCheck@ptr& (0+255),f,b
 18220  008CFC  2B61               	incf	(ExecuteLinkCheck@ptr+1)& (0+255),f,b
 18221                           
 18222                           ; BSR set to: 0
 18223                           ;lorawan.c: 1655: loRa.linkCheckGwCnt = *(ptr++);
 18224  008CFE  C060  FFD9         	movff	ExecuteLinkCheck@ptr,fsr2l
 18225  008D02  C061  FFDA         	movff	ExecuteLinkCheck@ptr+1,fsr2h
 18226  008D06  50DF               	movf	indf2,w,c
 18227  008D08  0102               	movlb	2	; () banked
 18228  008D0A  6FE4               	movwf	(_loRa+222)& (0+255),b
 18229  008D0C  0100               	movlb	0	; () banked
 18230  008D0E  4B60               	infsnz	ExecuteLinkCheck@ptr& (0+255),f,b
 18231  008D10  2B61               	incf	(ExecuteLinkCheck@ptr+1)& (0+255),f,b
 18232                           
 18233                           ; BSR set to: 0
 18234                           ;lorawan.c: 1656: return ptr;
 18235  008D12  C060  F060         	movff	ExecuteLinkCheck@ptr,?_ExecuteLinkCheck
 18236  008D16  C061  F061         	movff	ExecuteLinkCheck@ptr+1,?_ExecuteLinkCheck+1
 18237  008D1A  0012               	return	
 18238  008D1C                     __end_of_ExecuteLinkCheck:
 18239                           	opt stack 0
 18240                           tosu	equ	0xFFF
 18241                           tosh	equ	0xFFE
 18242                           tosl	equ	0xFFD
 18243                           pclath	equ	0xFFA
 18244                           tblptru	equ	0xFF8
 18245                           tblptrh	equ	0xFF7
 18246                           tblptrl	equ	0xFF6
 18247                           tablat	equ	0xFF5
 18248                           prodh	equ	0xFF4
 18249                           prodl	equ	0xFF3
 18250                           intcon	equ	0xFF2
 18251                           intcon2	equ	0xFF1
 18252                           intcon3	equ	0xFF0
 18253                           indf0	equ	0xFEF
 18254                           postinc0	equ	0xFEE
 18255                           fsr0h	equ	0xFEA
 18256                           fsr0l	equ	0xFE9
 18257                           wreg	equ	0xFE8
 18258                           postinc1	equ	0xFE6
 18259                           postdec1	equ	0xFE5
 18260                           plusw1	equ	0xFE3
 18261                           fsr1h	equ	0xFE2
 18262                           fsr1l	equ	0xFE1
 18263                           indf2	equ	0xFDF
 18264                           postinc2	equ	0xFDE
 18265                           postdec2	equ	0xFDD
 18266                           plusw2	equ	0xFDB
 18267                           fsr2h	equ	0xFDA
 18268                           fsr2l	equ	0xFD9
 18269                           status	equ	0xFD8
 18270                           
 18271 ;; *************** function _ExecuteLinkAdr *****************
 18272 ;; Defined at:
 18273 ;;		line 613 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 18274 ;; Parameters:    Size  Location     Type
 18275 ;;  ptr             2   15[BANK0 ] PTR unsigned char 
 18276 ;;		 -> radioBuffer(271), LORAWAN_RxDone@hdr(2), 
 18277 ;; Auto vars:     Size  Location     Type
 18278 ;;  redundancy      2   22[BANK0 ] PTR struct .
 18279 ;;		 -> radioBuffer(271), LORAWAN_RxDone@hdr(2), 
 18280 ;;  channelMask     2   19[BANK0 ] unsigned int 
 18281 ;;  dataRate        1   24[BANK0 ] unsigned char 
 18282 ;;  txPower         1   21[BANK0 ] unsigned char 
 18283 ;; Return value:  Size  Location     Type
 18284 ;;                  2   15[BANK0 ] PTR unsigned char 
 18285 ;; Registers used:
 18286 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 18287 ;; Tracked objects:
 18288 ;;		On entry : 0/0
 18289 ;;		On exit  : 0/0
 18290 ;;		Unchanged: 0/0
 18291 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18292 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18293 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18294 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18295 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18296 ;;Total ram usage:       10 bytes
 18297 ;; Hardware stack levels used:    1
 18298 ;; Hardware stack levels required when called:   10
 18299 ;; This function calls:
 18300 ;;		_EnableChannels
 18301 ;;		_UpdateCurrentDataRate
 18302 ;;		_UpdateTxPower
 18303 ;;		_ValidateChannelMask
 18304 ;;		_ValidateChannelMaskCntl
 18305 ;;		_ValidateDataRate
 18306 ;;		_ValidateTxPower
 18307 ;; This function is called by:
 18308 ;;		_MacExecuteCommands
 18309 ;; This function uses a non-reentrant model
 18310 ;;
 18311                           
 18312                           	psect	text86
 18313  0035E0                     __ptext86:
 18314                           	opt stack 0
 18315  0035E0                     _ExecuteLinkAdr:
 18316                           	opt stack 15
 18317                           
 18318                           ;lorawan_eu.c: 615: uint8_t txPower, dataRate;
 18319                           ;lorawan_eu.c: 616: uint16_t channelMask;
 18320                           ;lorawan_eu.c: 618: txPower = *(ptr) & 0x0F;
 18321                           
 18322                           ; BSR set to: 0
 18323                           ;incstack = 0
 18324  0035E0  C06F  FFD9         	movff	ExecuteLinkAdr@ptr,fsr2l
 18325  0035E4  C070  FFDA         	movff	ExecuteLinkAdr@ptr+1,fsr2h
 18326  0035E8  50DF               	movf	indf2,w,c
 18327  0035EA  0B0F               	andlw	15
 18328  0035EC  0100               	movlb	0	; () banked
 18329  0035EE  6F75               	movwf	ExecuteLinkAdr@txPower& (0+255),b
 18330                           
 18331                           ;lorawan_eu.c: 619: dataRate = ( *(ptr) & 0xF0 ) >> (4);
 18332  0035F0  C06F  FFD9         	movff	ExecuteLinkAdr@ptr,fsr2l
 18333  0035F4  C070  FFDA         	movff	ExecuteLinkAdr@ptr+1,fsr2h
 18334  0035F8  50DF               	movf	indf2,w,c
 18335  0035FA  6F71               	movwf	??_ExecuteLinkAdr& (0+255),b
 18336  0035FC  3971               	swapf	??_ExecuteLinkAdr& (0+255),w,b
 18337  0035FE  0B0F               	andlw	15
 18338  003600  0B0F               	andlw	15
 18339  003602  6F78               	movwf	ExecuteLinkAdr@dataRate& (0+255),b
 18340                           
 18341                           ; BSR set to: 0
 18342                           ;lorawan_eu.c: 620: ptr++;
 18343  003604  4B6F               	infsnz	ExecuteLinkAdr@ptr& (0+255),f,b
 18344  003606  2B70               	incf	(ExecuteLinkAdr@ptr+1)& (0+255),f,b
 18345                           
 18346                           ; BSR set to: 0
 18347                           ;lorawan_eu.c: 621: channelMask = (*((uint16_t*)ptr));
 18348  003608  C06F  FFD9         	movff	ExecuteLinkAdr@ptr,fsr2l
 18349  00360C  C070  FFDA         	movff	ExecuteLinkAdr@ptr+1,fsr2h
 18350  003610  CFDE F073          	movff	postinc2,ExecuteLinkAdr@channelMask
 18351  003614  CFDD F074          	movff	postdec2,ExecuteLinkAdr@channelMask+1
 18352                           
 18353                           ; BSR set to: 0
 18354                           ;lorawan_eu.c: 622: ptr = ptr + sizeof (channelMask);
 18355  003618  0E02               	movlw	2
 18356  00361A  256F               	addwf	ExecuteLinkAdr@ptr& (0+255),w,b
 18357  00361C  6F6F               	movwf	ExecuteLinkAdr@ptr& (0+255),b
 18358  00361E  0E00               	movlw	0
 18359  003620  2170               	addwfc	(ExecuteLinkAdr@ptr+1)& (0+255),w,b
 18360  003622  6F70               	movwf	(ExecuteLinkAdr@ptr+1)& (0+255),b
 18361                           
 18362                           ; BSR set to: 0
 18363                           ;lorawan_eu.c: 623: Redundancy_t *redundancy;
 18364                           ;lorawan_eu.c: 624: redundancy = (Redundancy_t*)(ptr++);
 18365  003624  C06F  F076         	movff	ExecuteLinkAdr@ptr,ExecuteLinkAdr@redundancy
 18366  003628  C070  F077         	movff	ExecuteLinkAdr@ptr+1,ExecuteLinkAdr@redundancy+1
 18367                           
 18368                           ; BSR set to: 0
 18369  00362C  4B6F               	infsnz	ExecuteLinkAdr@ptr& (0+255),f,b
 18370  00362E  2B70               	incf	(ExecuteLinkAdr@ptr+1)& (0+255),f,b
 18371                           
 18372                           ; BSR set to: 0
 18373                           ;lorawan_eu.c: 626: if (1 == loRa.macStatus.adr)
 18374  003630  0102               	movlb	2	; () banked
 18375  003632  AD08               	btfss	(_loRa+2)& (0+255),6,b
 18376  003634  D0EF               	goto	l1942
 18377                           
 18378                           ; BSR set to: 2
 18379                           ;lorawan_eu.c: 627: {
 18380                           ;lorawan_eu.c: 628: if ( (ValidateChannelMaskCntl(redundancy->chMaskCntl) == OK) && (Val
      +                          idateChannelMask(channelMask) == OK) )
 18381  003636  C076  FFD9         	movff	ExecuteLinkAdr@redundancy,fsr2l
 18382  00363A  C077  FFDA         	movff	ExecuteLinkAdr@redundancy+1,fsr2h
 18383  00363E  0100               	movlb	0	; () banked
 18384  003640  38DF               	swapf	223,w,c
 18385  003642  0B07               	andlw	7
 18386  003644  ECBE  F048         	call	_ValidateChannelMaskCntl
 18387  003648  0900               	iorlw	0
 18388  00364A  A4D8               	btfss	status,2,c
 18389  00364C  D021               	goto	l1943
 18390  00364E  C073  F060         	movff	ExecuteLinkAdr@channelMask,ValidateChannelMask@channelMask
 18391  003652  C074  F061         	movff	ExecuteLinkAdr@channelMask+1,ValidateChannelMask@channelMask+1
 18392  003656  EC8D  F041         	call	_ValidateChannelMask	;wreg free
 18393  00365A  0900               	iorlw	0
 18394  00365C  A4D8               	btfss	status,2,c
 18395  00365E  D018               	goto	l1943
 18396                           
 18397                           ;lorawan_eu.c: 629: {
 18398                           ;lorawan_eu.c: 630: loRa.macCommands[loRa.crtMacCmdIndex].channelMaskAck = 1;
 18399  003660  0102               	movlb	2	; () banked
 18400  003662  51AD               	movf	(_loRa+167)& (0+255),w,b
 18401  003664  0D02               	mullw	2
 18402  003666  0E06               	movlw	low _loRa
 18403  003668  0100               	movlb	0	; () banked
 18404  00366A  6F71               	movwf	??_ExecuteLinkAdr& (0+255),b
 18405  00366C  0E02               	movlw	high _loRa
 18406  00366E  6F72               	movwf	(??_ExecuteLinkAdr+1)& (0+255),b
 18407  003670  0EA8               	movlw	168
 18408  003672  2771               	addwf	??_ExecuteLinkAdr& (0+255),f,b
 18409  003674  0E00               	movlw	0
 18410  003676  2372               	addwfc	(??_ExecuteLinkAdr+1)& (0+255),f,b
 18411  003678  50F3               	movf	prodl,w,c
 18412  00367A  2771               	addwf	??_ExecuteLinkAdr& (0+255),f,b
 18413  00367C  50F4               	movf	prodh,w,c
 18414  00367E  2372               	addwfc	(??_ExecuteLinkAdr+1)& (0+255),f,b
 18415  003680  0E01               	movlw	1
 18416  003682  2571               	addwf	??_ExecuteLinkAdr& (0+255),w,b
 18417  003684  6ED9               	movwf	fsr2l,c
 18418  003686  0E00               	movlw	0
 18419  003688  2172               	addwfc	(??_ExecuteLinkAdr+1)& (0+255),w,b
 18420  00368A  6EDA               	movwf	fsr2h,c
 18421  00368C  0102               	movlb	2	; () banked
 18422  00368E  80DF               	bsf	indf2,0,c
 18423  003690                     l1943:
 18424                           
 18425                           ;lorawan_eu.c: 631: }
 18426                           ;lorawan_eu.c: 633: if ( (ValidateDataRate (dataRate) == OK) && (dataRate >= loRa.minDat
      +                          aRate) && (dataRate <= loRa.maxDataRate) )
 18427                           
 18428                           ; BSR set to: 2
 18429  003690  0100               	movlb	0	; () banked
 18430  003692  5178               	movf	ExecuteLinkAdr@dataRate& (0+255),w,b
 18431  003694  ECB9  F049         	call	_ValidateDataRate
 18432  003698  0900               	iorlw	0
 18433  00369A  A4D8               	btfss	status,2,c
 18434  00369C  D022               	goto	l1944
 18435  00369E  0102               	movlb	2	; () banked
 18436  0036A0  51F1               	movf	(_loRa+235)& (0+255),w,b
 18437  0036A2  0100               	movlb	0	; () banked
 18438  0036A4  5D78               	subwf	ExecuteLinkAdr@dataRate& (0+255),w,b
 18439  0036A6  A0D8               	btfss	status,0,c
 18440  0036A8  D01C               	goto	l1944
 18441                           
 18442                           ; BSR set to: 0
 18443  0036AA  5178               	movf	ExecuteLinkAdr@dataRate& (0+255),w,b
 18444  0036AC  0102               	movlb	2	; () banked
 18445  0036AE  5DF2               	subwf	(_loRa+236)& (0+255),w,b
 18446  0036B0  A0D8               	btfss	status,0,c
 18447  0036B2  D017               	goto	l1944
 18448                           
 18449                           ; BSR set to: 2
 18450                           ;lorawan_eu.c: 634: {
 18451                           ;lorawan_eu.c: 635: loRa.macCommands[loRa.crtMacCmdIndex].dataRateAck = 1;
 18452  0036B4  51AD               	movf	(_loRa+167)& (0+255),w,b
 18453  0036B6  0D02               	mullw	2
 18454  0036B8  0E06               	movlw	low _loRa
 18455  0036BA  0100               	movlb	0	; () banked
 18456  0036BC  6F71               	movwf	??_ExecuteLinkAdr& (0+255),b
 18457  0036BE  0E02               	movlw	high _loRa
 18458  0036C0  6F72               	movwf	(??_ExecuteLinkAdr+1)& (0+255),b
 18459  0036C2  0EA8               	movlw	168
 18460  0036C4  2771               	addwf	??_ExecuteLinkAdr& (0+255),f,b
 18461  0036C6  0E00               	movlw	0
 18462  0036C8  2372               	addwfc	(??_ExecuteLinkAdr+1)& (0+255),f,b
 18463  0036CA  50F3               	movf	prodl,w,c
 18464  0036CC  2771               	addwf	??_ExecuteLinkAdr& (0+255),f,b
 18465  0036CE  50F4               	movf	prodh,w,c
 18466  0036D0  2372               	addwfc	(??_ExecuteLinkAdr+1)& (0+255),f,b
 18467  0036D2  0E01               	movlw	1
 18468  0036D4  2571               	addwf	??_ExecuteLinkAdr& (0+255),w,b
 18469  0036D6  6ED9               	movwf	fsr2l,c
 18470  0036D8  0E00               	movlw	0
 18471  0036DA  2172               	addwfc	(??_ExecuteLinkAdr+1)& (0+255),w,b
 18472  0036DC  6EDA               	movwf	fsr2h,c
 18473  0036DE  0102               	movlb	2	; () banked
 18474  0036E0  82DF               	bsf	indf2,1,c
 18475  0036E2                     l1944:
 18476                           
 18477                           ;lorawan_eu.c: 636: }
 18478                           ;lorawan_eu.c: 638: if (ValidateTxPower (txPower) == OK)
 18479                           
 18480                           ; BSR set to: 2
 18481  0036E2  0100               	movlb	0	; () banked
 18482  0036E4  5175               	movf	ExecuteLinkAdr@txPower& (0+255),w,b
 18483  0036E6  EC8C  F047         	call	_ValidateTxPower
 18484  0036EA  0900               	iorlw	0
 18485  0036EC  A4D8               	btfss	status,2,c
 18486  0036EE  D018               	goto	l1945
 18487                           
 18488                           ;lorawan_eu.c: 639: {
 18489                           ;lorawan_eu.c: 640: loRa.macCommands[loRa.crtMacCmdIndex].powerAck = 1;
 18490  0036F0  0102               	movlb	2	; () banked
 18491  0036F2  51AD               	movf	(_loRa+167)& (0+255),w,b
 18492  0036F4  0D02               	mullw	2
 18493  0036F6  0E06               	movlw	low _loRa
 18494  0036F8  0100               	movlb	0	; () banked
 18495  0036FA  6F71               	movwf	??_ExecuteLinkAdr& (0+255),b
 18496  0036FC  0E02               	movlw	high _loRa
 18497  0036FE  6F72               	movwf	(??_ExecuteLinkAdr+1)& (0+255),b
 18498  003700  0EA8               	movlw	168
 18499  003702  2771               	addwf	??_ExecuteLinkAdr& (0+255),f,b
 18500  003704  0E00               	movlw	0
 18501  003706  2372               	addwfc	(??_ExecuteLinkAdr+1)& (0+255),f,b
 18502  003708  50F3               	movf	prodl,w,c
 18503  00370A  2771               	addwf	??_ExecuteLinkAdr& (0+255),f,b
 18504  00370C  50F4               	movf	prodh,w,c
 18505  00370E  2372               	addwfc	(??_ExecuteLinkAdr+1)& (0+255),f,b
 18506  003710  0E01               	movlw	1
 18507  003712  2571               	addwf	??_ExecuteLinkAdr& (0+255),w,b
 18508  003714  6ED9               	movwf	fsr2l,c
 18509  003716  0E00               	movlw	0
 18510  003718  2172               	addwfc	(??_ExecuteLinkAdr+1)& (0+255),w,b
 18511  00371A  6EDA               	movwf	fsr2h,c
 18512  00371C  0102               	movlb	2	; () banked
 18513  00371E  84DF               	bsf	indf2,2,c
 18514  003720                     l1945:
 18515                           
 18516                           ;lorawan_eu.c: 641: }
 18517                           ;lorawan_eu.c: 643: if ( (loRa.macCommands[loRa.crtMacCmdIndex].powerAck == 1) && (loRa.
      +                          macCommands[loRa.crtMacCmdIndex].dataRateAck == 1) && (loRa.macCommands[loRa.crtMacCmdIn
      +                          dex].channelMaskAck == 1) )
 18518  003720  0102               	movlb	2	; () banked
 18519  003722  51AD               	movf	(_loRa+167)& (0+255),w,b
 18520  003724  0D02               	mullw	2
 18521  003726  0E06               	movlw	low _loRa
 18522  003728  0100               	movlb	0	; () banked
 18523  00372A  6F71               	movwf	??_ExecuteLinkAdr& (0+255),b
 18524  00372C  0E02               	movlw	high _loRa
 18525  00372E  6F72               	movwf	(??_ExecuteLinkAdr+1)& (0+255),b
 18526  003730  0EA8               	movlw	168
 18527  003732  2771               	addwf	??_ExecuteLinkAdr& (0+255),f,b
 18528  003734  0E00               	movlw	0
 18529  003736  2372               	addwfc	(??_ExecuteLinkAdr+1)& (0+255),f,b
 18530  003738  50F3               	movf	prodl,w,c
 18531  00373A  2771               	addwf	??_ExecuteLinkAdr& (0+255),f,b
 18532  00373C  50F4               	movf	prodh,w,c
 18533  00373E  2372               	addwfc	(??_ExecuteLinkAdr+1)& (0+255),f,b
 18534  003740  0E01               	movlw	1
 18535  003742  2571               	addwf	??_ExecuteLinkAdr& (0+255),w,b
 18536  003744  6ED9               	movwf	fsr2l,c
 18537  003746  0E00               	movlw	0
 18538  003748  2172               	addwfc	(??_ExecuteLinkAdr+1)& (0+255),w,b
 18539  00374A  6EDA               	movwf	fsr2h,c
 18540  00374C  0102               	movlb	2	; () banked
 18541  00374E  A4DF               	btfss	indf2,2,c
 18542  003750  D0A6               	goto	l1949
 18543                           
 18544                           ; BSR set to: 2
 18545  003752  51AD               	movf	(_loRa+167)& (0+255),w,b
 18546  003754  0D02               	mullw	2
 18547  003756  0E06               	movlw	low _loRa
 18548  003758  0100               	movlb	0	; () banked
 18549  00375A  6F71               	movwf	??_ExecuteLinkAdr& (0+255),b
 18550  00375C  0E02               	movlw	high _loRa
 18551  00375E  6F72               	movwf	(??_ExecuteLinkAdr+1)& (0+255),b
 18552  003760  0EA8               	movlw	168
 18553  003762  2771               	addwf	??_ExecuteLinkAdr& (0+255),f,b
 18554  003764  0E00               	movlw	0
 18555  003766  2372               	addwfc	(??_ExecuteLinkAdr+1)& (0+255),f,b
 18556  003768  50F3               	movf	prodl,w,c
 18557  00376A  2771               	addwf	??_ExecuteLinkAdr& (0+255),f,b
 18558  00376C  50F4               	movf	prodh,w,c
 18559  00376E  2372               	addwfc	(??_ExecuteLinkAdr+1)& (0+255),f,b
 18560  003770  0E01               	movlw	1
 18561  003772  2571               	addwf	??_ExecuteLinkAdr& (0+255),w,b
 18562  003774  6ED9               	movwf	fsr2l,c
 18563  003776  0E00               	movlw	0
 18564  003778  2172               	addwfc	(??_ExecuteLinkAdr+1)& (0+255),w,b
 18565  00377A  6EDA               	movwf	fsr2h,c
 18566  00377C  0102               	movlb	2	; () banked
 18567  00377E  A2DF               	btfss	indf2,1,c
 18568  003780  D08E               	goto	l1949
 18569                           
 18570                           ; BSR set to: 2
 18571  003782  51AD               	movf	(_loRa+167)& (0+255),w,b
 18572  003784  0D02               	mullw	2
 18573  003786  0E06               	movlw	low _loRa
 18574  003788  0100               	movlb	0	; () banked
 18575  00378A  6F71               	movwf	??_ExecuteLinkAdr& (0+255),b
 18576  00378C  0E02               	movlw	high _loRa
 18577  00378E  6F72               	movwf	(??_ExecuteLinkAdr+1)& (0+255),b
 18578  003790  0EA8               	movlw	168
 18579  003792  2771               	addwf	??_ExecuteLinkAdr& (0+255),f,b
 18580  003794  0E00               	movlw	0
 18581  003796  2372               	addwfc	(??_ExecuteLinkAdr+1)& (0+255),f,b
 18582  003798  50F3               	movf	prodl,w,c
 18583  00379A  2771               	addwf	??_ExecuteLinkAdr& (0+255),f,b
 18584  00379C  50F4               	movf	prodh,w,c
 18585  00379E  2372               	addwfc	(??_ExecuteLinkAdr+1)& (0+255),f,b
 18586  0037A0  0E01               	movlw	1
 18587  0037A2  2571               	addwf	??_ExecuteLinkAdr& (0+255),w,b
 18588  0037A4  6ED9               	movwf	fsr2l,c
 18589  0037A6  0E00               	movlw	0
 18590  0037A8  2172               	addwfc	(??_ExecuteLinkAdr+1)& (0+255),w,b
 18591  0037AA  6EDA               	movwf	fsr2h,c
 18592  0037AC  0102               	movlb	2	; () banked
 18593  0037AE  A0DF               	btfss	indf2,0,c
 18594  0037B0  D076               	goto	l1949
 18595                           
 18596                           ; BSR set to: 2
 18597                           ;lorawan_eu.c: 644: {
 18598                           ;lorawan_eu.c: 645: EnableChannels (channelMask, redundancy->chMaskCntl);
 18599  0037B2  C073  F06C         	movff	ExecuteLinkAdr@channelMask,EnableChannels@channelMask
 18600  0037B6  C074  F06D         	movff	ExecuteLinkAdr@channelMask+1,EnableChannels@channelMask+1
 18601  0037BA  C076  FFD9         	movff	ExecuteLinkAdr@redundancy,fsr2l
 18602  0037BE  C077  FFDA         	movff	ExecuteLinkAdr@redundancy+1,fsr2h
 18603  0037C2  0100               	movlb	0	; () banked
 18604  0037C4  38DF               	swapf	223,w,c
 18605  0037C6  0B07               	andlw	7
 18606  0037C8  6F6E               	movwf	EnableChannels@channelMaskCntl& (0+255),b
 18607  0037CA  EC6B  F049         	call	_EnableChannels	;wreg free
 18608                           
 18609                           ;lorawan_eu.c: 647: UpdateTxPower (txPower);
 18610  0037CE  0100               	movlb	0	; () banked
 18611  0037D0  5175               	movf	ExecuteLinkAdr@txPower& (0+255),w,b
 18612  0037D2  EC87  F04A         	call	_UpdateTxPower
 18613                           
 18614                           ;lorawan_eu.c: 648: loRa.macStatus.txPowerModified = 1;
 18615  0037D6  0102               	movlb	2	; () banked
 18616  0037D8  8909               	bsf	(_loRa+3)& (0+255),4,b
 18617                           
 18618                           ; BSR set to: 2
 18619                           ;lorawan_eu.c: 649: UpdateCurrentDataRate (dataRate);
 18620  0037DA  0100               	movlb	0	; () banked
 18621  0037DC  5178               	movf	ExecuteLinkAdr@dataRate& (0+255),w,b
 18622  0037DE  EC8C  F04A         	call	_UpdateCurrentDataRate
 18623                           
 18624                           ;lorawan_eu.c: 651: if (redundancy->nbRep == 0)
 18625  0037E2  C076  FFD9         	movff	ExecuteLinkAdr@redundancy,fsr2l
 18626  0037E6  C077  FFDA         	movff	ExecuteLinkAdr@redundancy+1,fsr2h
 18627  0037EA  0100               	movlb	0	; () banked
 18628  0037EC  50DF               	movf	223,w,c
 18629  0037EE  0B0F               	andlw	15
 18630  0037F0  0900               	iorlw	0
 18631  0037F2  A4D8               	btfss	status,2,c
 18632  0037F4  D002               	goto	l1947
 18633                           
 18634                           ; BSR set to: 0
 18635                           ;lorawan_eu.c: 652: {
 18636                           ;lorawan_eu.c: 653: loRa.maxRepetitionsUnconfirmedUplink = 0;
 18637  0037F6  0E00               	movlw	0
 18638  0037F8  D009               	goto	L10
 18639  0037FA                     l1947:
 18640                           
 18641                           ;lorawan_eu.c: 655: else
 18642                           ;lorawan_eu.c: 656: {
 18643                           ;lorawan_eu.c: 657: loRa.maxRepetitionsUnconfirmedUplink = redundancy->nbRep - 1;
 18644                           
 18645                           ; BSR set to: 2
 18646  0037FA  C076  FFD9         	movff	ExecuteLinkAdr@redundancy,fsr2l
 18647  0037FE  C077  FFDA         	movff	ExecuteLinkAdr@redundancy+1,fsr2h
 18648  003802  0100               	movlb	0	; () banked
 18649  003804  50DF               	movf	223,w,c
 18650  003806  0B0F               	andlw	15
 18651  003808  6F71               	movwf	??_ExecuteLinkAdr& (0+255),b
 18652  00380A  0571               	decf	??_ExecuteLinkAdr& (0+255),w,b
 18653  00380C                     L10:
 18654  00380C  0102               	movlb	2	; () banked
 18655  00380E  6FDC               	movwf	(_loRa+214)& (0+255),b
 18656                           
 18657                           ; BSR set to: 2
 18658                           ;lorawan_eu.c: 658: }
 18659                           ;lorawan_eu.c: 659: loRa.macStatus.nbRepModified = 1;
 18660                           
 18661                           ; BSR set to: 2
 18662  003810  8B09               	bsf	(_loRa+3)& (0+255),5,b
 18663                           
 18664                           ; BSR set to: 2
 18665                           ;lorawan_eu.c: 660: }
 18666                           ;lorawan_eu.c: 661: }
 18667  003812  D045               	goto	l1949
 18668  003814                     l1942:
 18669                           
 18670                           ; BSR set to: 2
 18671                           ;lorawan_eu.c: 662: else
 18672                           ;lorawan_eu.c: 663: {
 18673                           ;lorawan_eu.c: 664: loRa.macCommands[loRa.crtMacCmdIndex].channelMaskAck = 0;
 18674                           
 18675                           ; BSR set to: 2
 18676  003814  51AD               	movf	(_loRa+167)& (0+255),w,b
 18677  003816  0D02               	mullw	2
 18678  003818  0E06               	movlw	low _loRa
 18679  00381A  0100               	movlb	0	; () banked
 18680  00381C  6F71               	movwf	??_ExecuteLinkAdr& (0+255),b
 18681  00381E  0E02               	movlw	high _loRa
 18682  003820  6F72               	movwf	(??_ExecuteLinkAdr+1)& (0+255),b
 18683  003822  0EA8               	movlw	168
 18684  003824  2771               	addwf	??_ExecuteLinkAdr& (0+255),f,b
 18685  003826  0E00               	movlw	0
 18686  003828  2372               	addwfc	(??_ExecuteLinkAdr+1)& (0+255),f,b
 18687  00382A  50F3               	movf	prodl,w,c
 18688  00382C  2771               	addwf	??_ExecuteLinkAdr& (0+255),f,b
 18689  00382E  50F4               	movf	prodh,w,c
 18690  003830  2372               	addwfc	(??_ExecuteLinkAdr+1)& (0+255),f,b
 18691  003832  0E01               	movlw	1
 18692  003834  2571               	addwf	??_ExecuteLinkAdr& (0+255),w,b
 18693  003836  6ED9               	movwf	fsr2l,c
 18694  003838  0E00               	movlw	0
 18695  00383A  2172               	addwfc	(??_ExecuteLinkAdr+1)& (0+255),w,b
 18696  00383C  6EDA               	movwf	fsr2h,c
 18697  00383E  0102               	movlb	2	; () banked
 18698  003840  90DF               	bcf	indf2,0,c
 18699                           
 18700                           ;lorawan_eu.c: 665: loRa.macCommands[loRa.crtMacCmdIndex].dataRateAck = 0;
 18701  003842  51AD               	movf	(_loRa+167)& (0+255),w,b
 18702  003844  0D02               	mullw	2
 18703  003846  0E06               	movlw	low _loRa
 18704  003848  0100               	movlb	0	; () banked
 18705  00384A  6F71               	movwf	??_ExecuteLinkAdr& (0+255),b
 18706  00384C  0E02               	movlw	high _loRa
 18707  00384E  6F72               	movwf	(??_ExecuteLinkAdr+1)& (0+255),b
 18708  003850  0EA8               	movlw	168
 18709  003852  2771               	addwf	??_ExecuteLinkAdr& (0+255),f,b
 18710  003854  0E00               	movlw	0
 18711  003856  2372               	addwfc	(??_ExecuteLinkAdr+1)& (0+255),f,b
 18712  003858  50F3               	movf	prodl,w,c
 18713  00385A  2771               	addwf	??_ExecuteLinkAdr& (0+255),f,b
 18714  00385C  50F4               	movf	prodh,w,c
 18715  00385E  2372               	addwfc	(??_ExecuteLinkAdr+1)& (0+255),f,b
 18716  003860  0E01               	movlw	1
 18717  003862  2571               	addwf	??_ExecuteLinkAdr& (0+255),w,b
 18718  003864  6ED9               	movwf	fsr2l,c
 18719  003866  0E00               	movlw	0
 18720  003868  2172               	addwfc	(??_ExecuteLinkAdr+1)& (0+255),w,b
 18721  00386A  6EDA               	movwf	fsr2h,c
 18722  00386C  0102               	movlb	2	; () banked
 18723  00386E  92DF               	bcf	indf2,1,c
 18724                           
 18725                           ;lorawan_eu.c: 666: loRa.macCommands[loRa.crtMacCmdIndex].powerAck = 0;
 18726  003870  51AD               	movf	(_loRa+167)& (0+255),w,b
 18727  003872  0D02               	mullw	2
 18728  003874  0E06               	movlw	low _loRa
 18729  003876  0100               	movlb	0	; () banked
 18730  003878  6F71               	movwf	??_ExecuteLinkAdr& (0+255),b
 18731  00387A  0E02               	movlw	high _loRa
 18732  00387C  6F72               	movwf	(??_ExecuteLinkAdr+1)& (0+255),b
 18733  00387E  0EA8               	movlw	168
 18734  003880  2771               	addwf	??_ExecuteLinkAdr& (0+255),f,b
 18735  003882  0E00               	movlw	0
 18736  003884  2372               	addwfc	(??_ExecuteLinkAdr+1)& (0+255),f,b
 18737  003886  50F3               	movf	prodl,w,c
 18738  003888  2771               	addwf	??_ExecuteLinkAdr& (0+255),f,b
 18739  00388A  50F4               	movf	prodh,w,c
 18740  00388C  2372               	addwfc	(??_ExecuteLinkAdr+1)& (0+255),f,b
 18741  00388E  0E01               	movlw	1
 18742  003890  2571               	addwf	??_ExecuteLinkAdr& (0+255),w,b
 18743  003892  6ED9               	movwf	fsr2l,c
 18744  003894  0E00               	movlw	0
 18745  003896  2172               	addwfc	(??_ExecuteLinkAdr+1)& (0+255),w,b
 18746  003898  6EDA               	movwf	fsr2h,c
 18747  00389A  0102               	movlb	2	; () banked
 18748  00389C  94DF               	bcf	indf2,2,c
 18749  00389E                     l1949:
 18750                           
 18751                           ; BSR set to: 2
 18752                           ;lorawan_eu.c: 667: }
 18753                           ;lorawan_eu.c: 669: return ptr;
 18754                           
 18755                           ; BSR set to: 2
 18756  00389E  C06F  F06F         	movff	ExecuteLinkAdr@ptr,?_ExecuteLinkAdr
 18757  0038A2  C070  F070         	movff	ExecuteLinkAdr@ptr+1,?_ExecuteLinkAdr+1
 18758  0038A6  0012               	return	
 18759  0038A8                     __end_of_ExecuteLinkAdr:
 18760                           	opt stack 0
 18761                           tosu	equ	0xFFF
 18762                           tosh	equ	0xFFE
 18763                           tosl	equ	0xFFD
 18764                           pclath	equ	0xFFA
 18765                           tblptru	equ	0xFF8
 18766                           tblptrh	equ	0xFF7
 18767                           tblptrl	equ	0xFF6
 18768                           tablat	equ	0xFF5
 18769                           prodh	equ	0xFF4
 18770                           prodl	equ	0xFF3
 18771                           intcon	equ	0xFF2
 18772                           intcon2	equ	0xFF1
 18773                           intcon3	equ	0xFF0
 18774                           indf0	equ	0xFEF
 18775                           postinc0	equ	0xFEE
 18776                           fsr0h	equ	0xFEA
 18777                           fsr0l	equ	0xFE9
 18778                           wreg	equ	0xFE8
 18779                           postinc1	equ	0xFE6
 18780                           postdec1	equ	0xFE5
 18781                           plusw1	equ	0xFE3
 18782                           fsr1h	equ	0xFE2
 18783                           fsr1l	equ	0xFE1
 18784                           indf2	equ	0xFDF
 18785                           postinc2	equ	0xFDE
 18786                           postdec2	equ	0xFDD
 18787                           plusw2	equ	0xFDB
 18788                           fsr2h	equ	0xFDA
 18789                           fsr2l	equ	0xFD9
 18790                           status	equ	0xFD8
 18791                           
 18792 ;; *************** function _ValidateTxPower *****************
 18793 ;; Defined at:
 18794 ;;		line 582 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 18795 ;; Parameters:    Size  Location     Type
 18796 ;;  txPowerNew      1    wreg     unsigned char 
 18797 ;; Auto vars:     Size  Location     Type
 18798 ;;  txPowerNew      1    1[BANK0 ] unsigned char 
 18799 ;;  result          1    0[BANK0 ] enum E7249
 18800 ;; Return value:  Size  Location     Type
 18801 ;;                  1    wreg      enum E7190
 18802 ;; Registers used:
 18803 ;;		wreg, status,2, status,0
 18804 ;; Tracked objects:
 18805 ;;		On entry : 0/0
 18806 ;;		On exit  : 0/0
 18807 ;;		Unchanged: 0/0
 18808 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18809 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18810 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18811 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18812 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18813 ;;Total ram usage:        2 bytes
 18814 ;; Hardware stack levels used:    1
 18815 ;; Hardware stack levels required when called:    7
 18816 ;; This function calls:
 18817 ;;		Nothing
 18818 ;; This function is called by:
 18819 ;;		_ExecuteLinkAdr
 18820 ;;		_LORAWAN_SetTxPower
 18821 ;; This function uses a non-reentrant model
 18822 ;;
 18823                           
 18824                           	psect	text87
 18825  008F18                     __ptext87:
 18826                           	opt stack 0
 18827  008F18                     _ValidateTxPower:
 18828                           	opt stack 17
 18829                           
 18830                           ; BSR set to: 2
 18831                           ;incstack = 0
 18832                           ;ValidateTxPower@txPowerNew stored from wreg
 18833  008F18  0100               	movlb	0	; () banked
 18834  008F1A  6F61               	movwf	ValidateTxPower@txPowerNew& (0+255),b
 18835                           
 18836                           ;lorawan_eu.c: 584: LorawanError_t result = OK;
 18837  008F1C  0E00               	movlw	0
 18838  008F1E  0100               	movlb	0	; () banked
 18839  008F20  6F60               	movwf	ValidateTxPower@result& (0+255),b
 18840                           
 18841                           ; BSR set to: 0
 18842                           ;lorawan_eu.c: 586: if (((ISM_EU868 == loRa.ismBand) && (0 == txPowerNew)) || (txPowerNe
      +                          w > 5))
 18843  008F22  0102               	movlb	2	; () banked
 18844  008F24  51AA               	movf	(_loRa+164)& (0+255),w,b
 18845  008F26  A4D8               	btfss	status,2,c
 18846  008F28  D004               	goto	u9240
 18847                           
 18848                           ; BSR set to: 2
 18849  008F2A  0100               	movlb	0	; () banked
 18850  008F2C  5161               	movf	ValidateTxPower@txPowerNew& (0+255),w,b
 18851  008F2E  B4D8               	btfsc	status,2,c
 18852  008F30  D004               	goto	u9250
 18853  008F32                     u9240:
 18854                           
 18855                           ; BSR set to: 0
 18856  008F32  0E05               	movlw	5
 18857  008F34  0100               	movlb	0	; () banked
 18858  008F36  6561               	cpfsgt	ValidateTxPower@txPowerNew& (0+255),b
 18859  008F38  D002               	goto	l1929
 18860  008F3A                     u9250:
 18861                           
 18862                           ; BSR set to: 0
 18863                           ;lorawan_eu.c: 587: {
 18864                           ;lorawan_eu.c: 588: result = INVALID_PARAMETER;
 18865                           
 18866                           ; BSR set to: 0
 18867  008F3A  0E03               	movlw	3
 18868  008F3C  6F60               	movwf	ValidateTxPower@result& (0+255),b
 18869  008F3E                     l1929:
 18870                           
 18871                           ; BSR set to: 0
 18872                           ;lorawan_eu.c: 589: }
 18873                           ;lorawan_eu.c: 591: return result;
 18874  008F3E  5160               	movf	ValidateTxPower@result& (0+255),w,b
 18875  008F40  0012               	return	
 18876  008F42                     __end_of_ValidateTxPower:
 18877                           	opt stack 0
 18878                           tosu	equ	0xFFF
 18879                           tosh	equ	0xFFE
 18880                           tosl	equ	0xFFD
 18881                           pclath	equ	0xFFA
 18882                           tblptru	equ	0xFF8
 18883                           tblptrh	equ	0xFF7
 18884                           tblptrl	equ	0xFF6
 18885                           tablat	equ	0xFF5
 18886                           prodh	equ	0xFF4
 18887                           prodl	equ	0xFF3
 18888                           intcon	equ	0xFF2
 18889                           intcon2	equ	0xFF1
 18890                           intcon3	equ	0xFF0
 18891                           indf0	equ	0xFEF
 18892                           postinc0	equ	0xFEE
 18893                           fsr0h	equ	0xFEA
 18894                           fsr0l	equ	0xFE9
 18895                           wreg	equ	0xFE8
 18896                           postinc1	equ	0xFE6
 18897                           postdec1	equ	0xFE5
 18898                           plusw1	equ	0xFE3
 18899                           fsr1h	equ	0xFE2
 18900                           fsr1l	equ	0xFE1
 18901                           indf2	equ	0xFDF
 18902                           postinc2	equ	0xFDE
 18903                           postdec2	equ	0xFDD
 18904                           plusw2	equ	0xFDB
 18905                           fsr2h	equ	0xFDA
 18906                           fsr2l	equ	0xFD9
 18907                           status	equ	0xFD8
 18908                           
 18909 ;; *************** function _ValidateDataRate *****************
 18910 ;; Defined at:
 18911 ;;		line 570 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 18912 ;; Parameters:    Size  Location     Type
 18913 ;;  dataRate        1    wreg     unsigned char 
 18914 ;; Auto vars:     Size  Location     Type
 18915 ;;  dataRate        1    0[BANK0 ] unsigned char 
 18916 ;;  result          1    1[BANK0 ] enum E7249
 18917 ;; Return value:  Size  Location     Type
 18918 ;;                  1    wreg      enum E7190
 18919 ;; Registers used:
 18920 ;;		wreg, status,2, status,0
 18921 ;; Tracked objects:
 18922 ;;		On entry : 0/0
 18923 ;;		On exit  : 0/0
 18924 ;;		Unchanged: 0/0
 18925 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18926 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18927 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18928 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18929 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18930 ;;Total ram usage:        2 bytes
 18931 ;; Hardware stack levels used:    1
 18932 ;; Hardware stack levels required when called:    7
 18933 ;; This function calls:
 18934 ;;		Nothing
 18935 ;; This function is called by:
 18936 ;;		_ExecuteLinkAdr
 18937 ;;		_ExecuteRxParamSetupReq
 18938 ;;		_ValidateDataRange
 18939 ;;		_LORAWAN_SetCurrentDataRate
 18940 ;;		_LORAWAN_SetReceiveWindow2Parameters
 18941 ;; This function uses a non-reentrant model
 18942 ;;
 18943                           
 18944                           	psect	text88
 18945  009372                     __ptext88:
 18946                           	opt stack 0
 18947  009372                     _ValidateDataRate:
 18948                           	opt stack 17
 18949                           
 18950                           ; BSR set to: 0
 18951                           ;incstack = 0
 18952                           ;ValidateDataRate@dataRate stored from wreg
 18953  009372  0100               	movlb	0	; () banked
 18954  009374  6F60               	movwf	ValidateDataRate@dataRate& (0+255),b
 18955                           
 18956                           ;lorawan_eu.c: 572: LorawanError_t result = OK;
 18957  009376  0E00               	movlw	0
 18958  009378  0100               	movlb	0	; () banked
 18959  00937A  6F61               	movwf	ValidateDataRate@result& (0+255),b
 18960                           
 18961                           ; BSR set to: 0
 18962                           ;lorawan_eu.c: 574: if ( dataRate > 7 )
 18963  00937C  0E07               	movlw	7
 18964  00937E  6560               	cpfsgt	ValidateDataRate@dataRate& (0+255),b
 18965  009380  D002               	goto	l1925
 18966                           
 18967                           ; BSR set to: 0
 18968                           ;lorawan_eu.c: 575: {
 18969                           ;lorawan_eu.c: 576: result = INVALID_PARAMETER;
 18970  009382  0E03               	movlw	3
 18971  009384  6F61               	movwf	ValidateDataRate@result& (0+255),b
 18972  009386                     l1925:
 18973                           
 18974                           ; BSR set to: 0
 18975                           ;lorawan_eu.c: 577: }
 18976                           ;lorawan_eu.c: 579: return result;
 18977  009386  5161               	movf	ValidateDataRate@result& (0+255),w,b
 18978  009388  0012               	return	
 18979  00938A                     __end_of_ValidateDataRate:
 18980                           	opt stack 0
 18981                           tosu	equ	0xFFF
 18982                           tosh	equ	0xFFE
 18983                           tosl	equ	0xFFD
 18984                           pclath	equ	0xFFA
 18985                           tblptru	equ	0xFF8
 18986                           tblptrh	equ	0xFF7
 18987                           tblptrl	equ	0xFF6
 18988                           tablat	equ	0xFF5
 18989                           prodh	equ	0xFF4
 18990                           prodl	equ	0xFF3
 18991                           intcon	equ	0xFF2
 18992                           intcon2	equ	0xFF1
 18993                           intcon3	equ	0xFF0
 18994                           indf0	equ	0xFEF
 18995                           postinc0	equ	0xFEE
 18996                           fsr0h	equ	0xFEA
 18997                           fsr0l	equ	0xFE9
 18998                           wreg	equ	0xFE8
 18999                           postinc1	equ	0xFE6
 19000                           postdec1	equ	0xFE5
 19001                           plusw1	equ	0xFE3
 19002                           fsr1h	equ	0xFE2
 19003                           fsr1l	equ	0xFE1
 19004                           indf2	equ	0xFDF
 19005                           postinc2	equ	0xFDE
 19006                           postdec2	equ	0xFDD
 19007                           plusw2	equ	0xFDB
 19008                           fsr2h	equ	0xFDA
 19009                           fsr2l	equ	0xFD9
 19010                           status	equ	0xFD8
 19011                           
 19012 ;; *************** function _ValidateChannelMaskCntl *****************
 19013 ;; Defined at:
 19014 ;;		line 1137 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 19015 ;; Parameters:    Size  Location     Type
 19016 ;;  channelMaskC    1    wreg     unsigned char 
 19017 ;; Auto vars:     Size  Location     Type
 19018 ;;  channelMaskC    1    1[BANK0 ] unsigned char 
 19019 ;;  result          1    0[BANK0 ] enum E7249
 19020 ;; Return value:  Size  Location     Type
 19021 ;;                  1    wreg      enum E7249
 19022 ;; Registers used:
 19023 ;;		wreg, status,2, status,0
 19024 ;; Tracked objects:
 19025 ;;		On entry : 0/0
 19026 ;;		On exit  : 0/0
 19027 ;;		Unchanged: 0/0
 19028 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19029 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19030 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19031 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19032 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19033 ;;Total ram usage:        2 bytes
 19034 ;; Hardware stack levels used:    1
 19035 ;; Hardware stack levels required when called:    7
 19036 ;; This function calls:
 19037 ;;		Nothing
 19038 ;; This function is called by:
 19039 ;;		_ExecuteLinkAdr
 19040 ;; This function uses a non-reentrant model
 19041 ;;
 19042                           
 19043                           	psect	text89
 19044  00917C                     __ptext89:
 19045                           	opt stack 0
 19046  00917C                     _ValidateChannelMaskCntl:
 19047                           	opt stack 17
 19048                           
 19049                           ; BSR set to: 0
 19050                           ;incstack = 0
 19051                           ;ValidateChannelMaskCntl@channelMaskCntl stored from wreg
 19052  00917C  0100               	movlb	0	; () banked
 19053  00917E  6F61               	movwf	ValidateChannelMaskCntl@channelMaskCntl& (0+255),b
 19054                           
 19055                           ;lorawan_eu.c: 1139: LorawanError_t result = OK;
 19056  009180  0E00               	movlw	0
 19057  009182  0100               	movlb	0	; () banked
 19058  009184  6F60               	movwf	ValidateChannelMaskCntl@result& (0+255),b
 19059                           
 19060                           ; BSR set to: 0
 19061                           ;lorawan_eu.c: 1141: if ( (channelMaskCntl != 0) && (channelMaskCntl != 6) )
 19062  009186  5161               	movf	ValidateChannelMaskCntl@channelMaskCntl& (0+255),w,b
 19063  009188  B4D8               	btfsc	status,2,c
 19064  00918A  D006               	goto	l2096
 19065                           
 19066                           ; BSR set to: 0
 19067  00918C  0E06               	movlw	6
 19068  00918E  1961               	xorwf	ValidateChannelMaskCntl@channelMaskCntl& (0+255),w,b
 19069  009190  B4D8               	btfsc	status,2,c
 19070  009192  D002               	goto	l2096
 19071                           
 19072                           ; BSR set to: 0
 19073                           ;lorawan_eu.c: 1142: {
 19074                           ;lorawan_eu.c: 1143: result = INVALID_PARAMETER;
 19075  009194  0E03               	movlw	3
 19076  009196  6F60               	movwf	ValidateChannelMaskCntl@result& (0+255),b
 19077  009198                     l2096:
 19078                           
 19079                           ; BSR set to: 0
 19080                           ;lorawan_eu.c: 1144: }
 19081                           ;lorawan_eu.c: 1146: return result;
 19082  009198  5160               	movf	ValidateChannelMaskCntl@result& (0+255),w,b
 19083  00919A  0012               	return	
 19084  00919C                     __end_of_ValidateChannelMaskCntl:
 19085                           	opt stack 0
 19086                           tosu	equ	0xFFF
 19087                           tosh	equ	0xFFE
 19088                           tosl	equ	0xFFD
 19089                           pclath	equ	0xFFA
 19090                           tblptru	equ	0xFF8
 19091                           tblptrh	equ	0xFF7
 19092                           tblptrl	equ	0xFF6
 19093                           tablat	equ	0xFF5
 19094                           prodh	equ	0xFF4
 19095                           prodl	equ	0xFF3
 19096                           intcon	equ	0xFF2
 19097                           intcon2	equ	0xFF1
 19098                           intcon3	equ	0xFF0
 19099                           indf0	equ	0xFEF
 19100                           postinc0	equ	0xFEE
 19101                           fsr0h	equ	0xFEA
 19102                           fsr0l	equ	0xFE9
 19103                           wreg	equ	0xFE8
 19104                           postinc1	equ	0xFE6
 19105                           postdec1	equ	0xFE5
 19106                           plusw1	equ	0xFE3
 19107                           fsr1h	equ	0xFE2
 19108                           fsr1l	equ	0xFE1
 19109                           indf2	equ	0xFDF
 19110                           postinc2	equ	0xFDE
 19111                           postdec2	equ	0xFDD
 19112                           plusw2	equ	0xFDB
 19113                           fsr2h	equ	0xFDA
 19114                           fsr2l	equ	0xFD9
 19115                           status	equ	0xFD8
 19116                           
 19117 ;; *************** function _ValidateChannelMask *****************
 19118 ;; Defined at:
 19119 ;;		line 1166 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 19120 ;; Parameters:    Size  Location     Type
 19121 ;;  channelMask     2    0[BANK0 ] unsigned int 
 19122 ;; Auto vars:     Size  Location     Type
 19123 ;;  i               1    4[BANK0 ] unsigned char 
 19124 ;; Return value:  Size  Location     Type
 19125 ;;                  1    wreg      enum E7249
 19126 ;; Registers used:
 19127 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 19128 ;; Tracked objects:
 19129 ;;		On entry : 0/0
 19130 ;;		On exit  : 0/0
 19131 ;;		Unchanged: 0/0
 19132 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19133 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19134 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19135 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19136 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19137 ;;Total ram usage:        5 bytes
 19138 ;; Hardware stack levels used:    1
 19139 ;; Hardware stack levels required when called:    7
 19140 ;; This function calls:
 19141 ;;		Nothing
 19142 ;; This function is called by:
 19143 ;;		_ExecuteLinkAdr
 19144 ;; This function uses a non-reentrant model
 19145 ;;
 19146                           
 19147                           	psect	text90
 19148  00831A                     __ptext90:
 19149                           	opt stack 0
 19150  00831A                     _ValidateChannelMask:
 19151                           	opt stack 17
 19152                           
 19153                           ;lorawan_eu.c: 1168: uint8_t i = 0;
 19154                           
 19155                           ; BSR set to: 0
 19156                           ;incstack = 0
 19157  00831A  0E00               	movlw	0
 19158  00831C  0100               	movlb	0	; () banked
 19159  00831E  6F64               	movwf	ValidateChannelMask@i& (0+255),b
 19160                           
 19161                           ; BSR set to: 0
 19162                           ;lorawan_eu.c: 1170: if(channelMask != 0x0000U)
 19163  008320  5160               	movf	ValidateChannelMask@channelMask& (0+255),w,b
 19164  008322  1161               	iorwf	(ValidateChannelMask@channelMask+1)& (0+255),w,b
 19165  008324  B4D8               	btfsc	status,2,c
 19166  008326  D026               	goto	l2109
 19167                           
 19168                           ; BSR set to: 0
 19169                           ;lorawan_eu.c: 1171: {
 19170                           ;lorawan_eu.c: 1172: for (i = 0; i < 16; i++)
 19171  008328  0E00               	movlw	0
 19172  00832A  6F64               	movwf	ValidateChannelMask@i& (0+255),b
 19173  00832C                     l10189:
 19174                           
 19175                           ; BSR set to: 0
 19176  00832C  0E0F               	movlw	15
 19177  00832E  6564               	cpfsgt	ValidateChannelMask@i& (0+255),b
 19178  008330  D001               	goto	l2110
 19179  008332  D01E               	goto	u9930
 19180  008334                     l2110:
 19181                           
 19182                           ; BSR set to: 0
 19183                           ;lorawan_eu.c: 1173: {
 19184                           ;lorawan_eu.c: 1174: if ( ( (channelMask & (1 << (0))) == (1 << (0))) && ( (Channels[i].
      +                          parametersDefined & (0X01 | 0X02 | 0x04) ) != (0X01 | 0X02 | 0x04) ) )
 19185  008334  A160               	btfss	ValidateChannelMask@channelMask& (0+255),0,b
 19186  008336  D013               	goto	l2112
 19187                           
 19188                           ; BSR set to: 0
 19189  008338  5164               	movf	ValidateChannelMask@i& (0+255),w,b
 19190  00833A  0D0E               	mullw	14
 19191  00833C  0E0D               	movlw	13
 19192  00833E  26F3               	addwf	prodl,f,c
 19193  008340  0E00               	movlw	0
 19194  008342  22F4               	addwfc	prodh,f,c
 19195  008344  0E00               	movlw	low _Channels
 19196  008346  24F3               	addwf	prodl,w,c
 19197  008348  6ED9               	movwf	fsr2l,c
 19198  00834A  0E04               	movlw	high _Channels
 19199  00834C  20F4               	addwfc	prodh,w,c
 19200  00834E  6EDA               	movwf	fsr2h,c
 19201  008350  50DF               	movf	indf2,w,c
 19202  008352  0B07               	andlw	7
 19203  008354  0A07               	xorlw	7
 19204  008356  B4D8               	btfsc	status,2,c
 19205  008358  D002               	goto	l2112
 19206                           
 19207                           ; BSR set to: 0
 19208                           ;lorawan_eu.c: 1175: {
 19209                           ;lorawan_eu.c: 1176: return INVALID_PARAMETER;
 19210  00835A  0E03               	movlw	3
 19211                           
 19212                           ; BSR set to: 0
 19213  00835C  0012               	return	
 19214  00835E                     l2112:
 19215                           
 19216                           ; BSR set to: 0
 19217                           ;lorawan_eu.c: 1178: else
 19218                           ;lorawan_eu.c: 1179: {
 19219                           ;lorawan_eu.c: 1180: channelMask = channelMask >> (1);
 19220                           
 19221                           ; BSR set to: 0
 19222  00835E  90D8               	bcf	status,0,c
 19223  008360  3161               	rrcf	(ValidateChannelMask@channelMask+1)& (0+255),w,b
 19224  008362  6F62               	movwf	??_ValidateChannelMask& (0+255),b
 19225  008364  3160               	rrcf	ValidateChannelMask@channelMask& (0+255),w,b
 19226  008366  6F60               	movwf	ValidateChannelMask@channelMask& (0+255),b
 19227  008368  C062  F061         	movff	??_ValidateChannelMask,ValidateChannelMask@channelMask+1
 19228                           
 19229                           ; BSR set to: 0
 19230                           
 19231                           ; BSR set to: 0
 19232  00836C  2B64               	incf	ValidateChannelMask@i& (0+255),f,b
 19233  00836E  D7DE               	goto	l10189
 19234  008370                     u9930:
 19235                           
 19236                           ; BSR set to: 0
 19237                           ;lorawan_eu.c: 1181: }
 19238                           ;lorawan_eu.c: 1182: }
 19239                           ;lorawan_eu.c: 1184: return OK;
 19240                           
 19241                           ; BSR set to: 0
 19242  008370  0E00               	movlw	0
 19243                           
 19244                           ; BSR set to: 0
 19245                           ;lorawan_eu.c: 1185: }
 19246                           
 19247                           ; BSR set to: 0
 19248  008372  0012               	return	
 19249  008374                     l2109:
 19250                           
 19251                           ; BSR set to: 0
 19252                           ;lorawan_eu.c: 1186: else
 19253                           ;lorawan_eu.c: 1187: {
 19254                           ;lorawan_eu.c: 1189: return INVALID_PARAMETER;
 19255                           
 19256                           ; BSR set to: 0
 19257  008374  0E03               	movlw	3
 19258                           
 19259                           ; BSR set to: 0
 19260  008376  0012               	return	
 19261  008378                     __end_of_ValidateChannelMask:
 19262                           	opt stack 0
 19263                           tosu	equ	0xFFF
 19264                           tosh	equ	0xFFE
 19265                           tosl	equ	0xFFD
 19266                           pclath	equ	0xFFA
 19267                           tblptru	equ	0xFF8
 19268                           tblptrh	equ	0xFF7
 19269                           tblptrl	equ	0xFF6
 19270                           tablat	equ	0xFF5
 19271                           prodh	equ	0xFF4
 19272                           prodl	equ	0xFF3
 19273                           intcon	equ	0xFF2
 19274                           intcon2	equ	0xFF1
 19275                           intcon3	equ	0xFF0
 19276                           indf0	equ	0xFEF
 19277                           postinc0	equ	0xFEE
 19278                           fsr0h	equ	0xFEA
 19279                           fsr0l	equ	0xFE9
 19280                           wreg	equ	0xFE8
 19281                           postinc1	equ	0xFE6
 19282                           postdec1	equ	0xFE5
 19283                           plusw1	equ	0xFE3
 19284                           fsr1h	equ	0xFE2
 19285                           fsr1l	equ	0xFE1
 19286                           indf2	equ	0xFDF
 19287                           postinc2	equ	0xFDE
 19288                           postdec2	equ	0xFDD
 19289                           plusw2	equ	0xFDB
 19290                           fsr2h	equ	0xFDA
 19291                           fsr2l	equ	0xFD9
 19292                           status	equ	0xFD8
 19293                           
 19294 ;; *************** function _UpdateTxPower *****************
 19295 ;; Defined at:
 19296 ;;		line 1029 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 19297 ;; Parameters:    Size  Location     Type
 19298 ;;  txPowerNew      1    wreg     unsigned char 
 19299 ;; Auto vars:     Size  Location     Type
 19300 ;;  txPowerNew      1    0[BANK0 ] unsigned char 
 19301 ;; Return value:  Size  Location     Type
 19302 ;;                  1    wreg      void 
 19303 ;; Registers used:
 19304 ;;		wreg
 19305 ;; Tracked objects:
 19306 ;;		On entry : 0/0
 19307 ;;		On exit  : 0/0
 19308 ;;		Unchanged: 0/0
 19309 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19310 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19311 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19312 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19313 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19314 ;;Total ram usage:        1 bytes
 19315 ;; Hardware stack levels used:    1
 19316 ;; Hardware stack levels required when called:    7
 19317 ;; This function calls:
 19318 ;;		Nothing
 19319 ;; This function is called by:
 19320 ;;		_ExecuteLinkAdr
 19321 ;;		_LORAWAN_SetTxPower
 19322 ;; This function uses a non-reentrant model
 19323 ;;
 19324                           
 19325                           	psect	text91
 19326  00950E                     __ptext91:
 19327                           	opt stack 0
 19328  00950E                     _UpdateTxPower:
 19329                           	opt stack 17
 19330                           
 19331                           ; BSR set to: 0
 19332                           ;incstack = 0
 19333                           ;UpdateTxPower@txPowerNew stored from wreg
 19334  00950E  0100               	movlb	0	; () banked
 19335  009510  6F60               	movwf	UpdateTxPower@txPowerNew& (0+255),b
 19336                           
 19337                           ;lorawan.c: 1031: loRa.txPower = txPowerNew;
 19338  009512  C060  F2E7         	movff	UpdateTxPower@txPowerNew,_loRa+225
 19339  009516  0012               	return		;funcret
 19340  009518                     __end_of_UpdateTxPower:
 19341                           	opt stack 0
 19342                           tosu	equ	0xFFF
 19343                           tosh	equ	0xFFE
 19344                           tosl	equ	0xFFD
 19345                           pclath	equ	0xFFA
 19346                           tblptru	equ	0xFF8
 19347                           tblptrh	equ	0xFF7
 19348                           tblptrl	equ	0xFF6
 19349                           tablat	equ	0xFF5
 19350                           prodh	equ	0xFF4
 19351                           prodl	equ	0xFF3
 19352                           intcon	equ	0xFF2
 19353                           intcon2	equ	0xFF1
 19354                           intcon3	equ	0xFF0
 19355                           indf0	equ	0xFEF
 19356                           postinc0	equ	0xFEE
 19357                           fsr0h	equ	0xFEA
 19358                           fsr0l	equ	0xFE9
 19359                           wreg	equ	0xFE8
 19360                           postinc1	equ	0xFE6
 19361                           postdec1	equ	0xFE5
 19362                           plusw1	equ	0xFE3
 19363                           fsr1h	equ	0xFE2
 19364                           fsr1l	equ	0xFE1
 19365                           indf2	equ	0xFDF
 19366                           postinc2	equ	0xFDE
 19367                           postdec2	equ	0xFDD
 19368                           plusw2	equ	0xFDB
 19369                           fsr2h	equ	0xFDA
 19370                           fsr2l	equ	0xFD9
 19371                           status	equ	0xFD8
 19372                           
 19373 ;; *************** function _UpdateCurrentDataRate *****************
 19374 ;; Defined at:
 19375 ;;		line 1024 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 19376 ;; Parameters:    Size  Location     Type
 19377 ;;  valueNew        1    wreg     unsigned char 
 19378 ;; Auto vars:     Size  Location     Type
 19379 ;;  valueNew        1    0[BANK0 ] unsigned char 
 19380 ;; Return value:  Size  Location     Type
 19381 ;;                  1    wreg      void 
 19382 ;; Registers used:
 19383 ;;		wreg
 19384 ;; Tracked objects:
 19385 ;;		On entry : 0/0
 19386 ;;		On exit  : 0/0
 19387 ;;		Unchanged: 0/0
 19388 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19389 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19390 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19391 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19392 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19393 ;;Total ram usage:        1 bytes
 19394 ;; Hardware stack levels used:    1
 19395 ;; Hardware stack levels required when called:    7
 19396 ;; This function calls:
 19397 ;;		Nothing
 19398 ;; This function is called by:
 19399 ;;		_ExecuteLinkAdr
 19400 ;;		_LORAWAN_SetCurrentDataRate
 19401 ;; This function uses a non-reentrant model
 19402 ;;
 19403                           
 19404                           	psect	text92
 19405  009518                     __ptext92:
 19406                           	opt stack 0
 19407  009518                     _UpdateCurrentDataRate:
 19408                           	opt stack 17
 19409                           
 19410                           ;incstack = 0
 19411                           ;UpdateCurrentDataRate@valueNew stored from wreg
 19412  009518  0100               	movlb	0	; () banked
 19413  00951A  6F60               	movwf	UpdateCurrentDataRate@valueNew& (0+255),b
 19414                           
 19415                           ;lorawan.c: 1026: loRa.currentDataRate = valueNew;
 19416  00951C  C060  F2E5         	movff	UpdateCurrentDataRate@valueNew,_loRa+223
 19417  009520  0012               	return		;funcret
 19418  009522                     __end_of_UpdateCurrentDataRate:
 19419                           	opt stack 0
 19420                           tosu	equ	0xFFF
 19421                           tosh	equ	0xFFE
 19422                           tosl	equ	0xFFD
 19423                           pclath	equ	0xFFA
 19424                           tblptru	equ	0xFF8
 19425                           tblptrh	equ	0xFF7
 19426                           tblptrl	equ	0xFF6
 19427                           tablat	equ	0xFF5
 19428                           prodh	equ	0xFF4
 19429                           prodl	equ	0xFF3
 19430                           intcon	equ	0xFF2
 19431                           intcon2	equ	0xFF1
 19432                           intcon3	equ	0xFF0
 19433                           indf0	equ	0xFEF
 19434                           postinc0	equ	0xFEE
 19435                           fsr0h	equ	0xFEA
 19436                           fsr0l	equ	0xFE9
 19437                           wreg	equ	0xFE8
 19438                           postinc1	equ	0xFE6
 19439                           postdec1	equ	0xFE5
 19440                           plusw1	equ	0xFE3
 19441                           fsr1h	equ	0xFE2
 19442                           fsr1l	equ	0xFE1
 19443                           indf2	equ	0xFDF
 19444                           postinc2	equ	0xFDE
 19445                           postdec2	equ	0xFDD
 19446                           plusw2	equ	0xFDB
 19447                           fsr2h	equ	0xFDA
 19448                           fsr2l	equ	0xFD9
 19449                           status	equ	0xFD8
 19450                           
 19451 ;; *************** function _EnableChannels *****************
 19452 ;; Defined at:
 19453 ;;		line 1149 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 19454 ;; Parameters:    Size  Location     Type
 19455 ;;  channelMask     2   12[BANK0 ] unsigned int 
 19456 ;;  channelMaskC    1   14[BANK0 ] unsigned char 
 19457 ;; Auto vars:     Size  Location     Type
 19458 ;;		None
 19459 ;; Return value:  Size  Location     Type
 19460 ;;                  1    wreg      void 
 19461 ;; Registers used:
 19462 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 19463 ;; Tracked objects:
 19464 ;;		On entry : 0/0
 19465 ;;		On exit  : 0/0
 19466 ;;		Unchanged: 0/0
 19467 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19468 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19469 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19470 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19471 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19472 ;;Total ram usage:        3 bytes
 19473 ;; Hardware stack levels used:    1
 19474 ;; Hardware stack levels required when called:    9
 19475 ;; This function calls:
 19476 ;;		_EnableChannels1
 19477 ;; This function is called by:
 19478 ;;		_ExecuteLinkAdr
 19479 ;; This function uses a non-reentrant model
 19480 ;;
 19481                           
 19482                           	psect	text93
 19483  0092D6                     __ptext93:
 19484                           	opt stack 0
 19485  0092D6                     _EnableChannels:
 19486                           	opt stack 15
 19487                           
 19488                           ;lorawan_eu.c: 1151: EnableChannels1 (channelMask, channelMaskCntl, 0, 16);
 19489                           
 19490                           ;incstack = 0
 19491  0092D6  C06C  F064         	movff	EnableChannels@channelMask,EnableChannels1@channelMask
 19492  0092DA  C06D  F065         	movff	EnableChannels@channelMask+1,EnableChannels1@channelMask+1
 19493  0092DE  C06E  F066         	movff	EnableChannels@channelMaskCntl,EnableChannels1@channelMaskCntl
 19494  0092E2  0E00               	movlw	0
 19495  0092E4  0100               	movlb	0	; () banked
 19496  0092E6  6F67               	movwf	EnableChannels1@channelIndexMin& (0+255),b
 19497  0092E8  0E10               	movlw	16
 19498  0092EA  6F68               	movwf	EnableChannels1@channelIndexMax& (0+255),b
 19499  0092EC  ECF9  F03E         	call	_EnableChannels1	;wreg free
 19500  0092F0  0012               	return		;funcret
 19501  0092F2                     __end_of_EnableChannels:
 19502                           	opt stack 0
 19503                           tosu	equ	0xFFF
 19504                           tosh	equ	0xFFE
 19505                           tosl	equ	0xFFD
 19506                           pclath	equ	0xFFA
 19507                           tblptru	equ	0xFF8
 19508                           tblptrh	equ	0xFF7
 19509                           tblptrl	equ	0xFF6
 19510                           tablat	equ	0xFF5
 19511                           prodh	equ	0xFF4
 19512                           prodl	equ	0xFF3
 19513                           intcon	equ	0xFF2
 19514                           intcon2	equ	0xFF1
 19515                           intcon3	equ	0xFF0
 19516                           indf0	equ	0xFEF
 19517                           postinc0	equ	0xFEE
 19518                           fsr0h	equ	0xFEA
 19519                           fsr0l	equ	0xFE9
 19520                           wreg	equ	0xFE8
 19521                           postinc1	equ	0xFE6
 19522                           postdec1	equ	0xFE5
 19523                           plusw1	equ	0xFE3
 19524                           fsr1h	equ	0xFE2
 19525                           fsr1l	equ	0xFE1
 19526                           indf2	equ	0xFDF
 19527                           postinc2	equ	0xFDE
 19528                           postdec2	equ	0xFDD
 19529                           plusw2	equ	0xFDB
 19530                           fsr2h	equ	0xFDA
 19531                           fsr2l	equ	0xFD9
 19532                           status	equ	0xFD8
 19533                           
 19534 ;; *************** function _EnableChannels1 *****************
 19535 ;; Defined at:
 19536 ;;		line 1193 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 19537 ;; Parameters:    Size  Location     Type
 19538 ;;  channelMask     2    4[BANK0 ] unsigned int 
 19539 ;;  channelMaskC    1    6[BANK0 ] unsigned char 
 19540 ;;  channelIndex    1    7[BANK0 ] unsigned char 
 19541 ;;  channelIndex    1    8[BANK0 ] unsigned char 
 19542 ;; Auto vars:     Size  Location     Type
 19543 ;;  i               1   11[BANK0 ] unsigned char 
 19544 ;; Return value:  Size  Location     Type
 19545 ;;                  1    wreg      void 
 19546 ;; Registers used:
 19547 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 19548 ;; Tracked objects:
 19549 ;;		On entry : 0/0
 19550 ;;		On exit  : 0/0
 19551 ;;		Unchanged: 0/0
 19552 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19553 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19554 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19555 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19556 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19557 ;;Total ram usage:        8 bytes
 19558 ;; Hardware stack levels used:    1
 19559 ;; Hardware stack levels required when called:    8
 19560 ;; This function calls:
 19561 ;;		_UpdateChannelIdStatus
 19562 ;; This function is called by:
 19563 ;;		_EnableChannels
 19564 ;; This function uses a non-reentrant model
 19565 ;;
 19566                           
 19567                           	psect	text94
 19568  007DF2                     __ptext94:
 19569                           	opt stack 0
 19570  007DF2                     _EnableChannels1:
 19571                           	opt stack 15
 19572                           
 19573                           ;lorawan_eu.c: 1195: uint8_t i;
 19574                           ;lorawan_eu.c: 1197: if (channelMaskCntl == 6)
 19575                           
 19576                           ;incstack = 0
 19577  007DF2  0E06               	movlw	6
 19578  007DF4  0100               	movlb	0	; () banked
 19579  007DF6  1966               	xorwf	EnableChannels1@channelMaskCntl& (0+255),w,b
 19580  007DF8  A4D8               	btfss	status,2,c
 19581  007DFA  D00F               	goto	l2118
 19582                           
 19583                           ; BSR set to: 0
 19584                           ;lorawan_eu.c: 1198: {
 19585                           ;lorawan_eu.c: 1199: for ( i = channelIndexMin; i < channelIndexMax; i++ )
 19586  007DFC  C067  F06B         	movff	EnableChannels1@channelIndexMin,EnableChannels1@i
 19587  007E00  D007               	goto	l2119
 19588  007E02                     
 19589                           ; BSR set to: 0
 19590                           ;lorawan_eu.c: 1200: {
 19591                           ;lorawan_eu.c: 1201: UpdateChannelIdStatus (i, 1);
 19592                           
 19593                           ; BSR set to: 0
 19594  007E02  0E01               	movlw	1
 19595  007E04  6F60               	movwf	UpdateChannelIdStatus@statusNew& (0+255),b
 19596  007E06  516B               	movf	EnableChannels1@i& (0+255),w,b
 19597  007E08  ECA3  F02A         	call	_UpdateChannelIdStatus
 19598  007E0C  0100               	movlb	0	; () banked
 19599  007E0E  2B6B               	incf	EnableChannels1@i& (0+255),f,b
 19600  007E10                     l2119:
 19601                           
 19602                           ; BSR set to: 0
 19603                           
 19604                           ; BSR set to: 0
 19605  007E10  5168               	movf	EnableChannels1@channelIndexMax& (0+255),w,b
 19606  007E12  5D6B               	subwf	EnableChannels1@i& (0+255),w,b
 19607  007E14  B0D8               	btfsc	status,0,c
 19608  007E16  0012               	return	
 19609  007E18  D7F4               	goto	l2120
 19610  007E1A                     l2118:
 19611                           
 19612                           ; BSR set to: 0
 19613                           ;lorawan_eu.c: 1204: else if (channelMaskCntl == 0)
 19614                           
 19615                           ; BSR set to: 0
 19616  007E1A  5166               	movf	EnableChannels1@channelMaskCntl& (0+255),w,b
 19617  007E1C  A4D8               	btfss	status,2,c
 19618  007E1E  0012               	return	
 19619                           
 19620                           ; BSR set to: 0
 19621                           ;lorawan_eu.c: 1205: {
 19622                           ;lorawan_eu.c: 1206: for ( i = channelIndexMin; i < channelIndexMax; i++ )
 19623  007E20  C067  F06B         	movff	EnableChannels1@channelIndexMin,EnableChannels1@i
 19624  007E24  D017               	goto	l2124
 19625  007E26                     l2125:
 19626                           
 19627                           ; BSR set to: 0
 19628                           ;lorawan_eu.c: 1207: {
 19629                           ;lorawan_eu.c: 1208: if ( channelMask & (1 << (0)) == (1 << (0)))
 19630  007E26  A164               	btfss	EnableChannels1@channelMask& (0+255),0,b
 19631  007E28  D006               	goto	l2126
 19632                           
 19633                           ; BSR set to: 0
 19634                           ;lorawan_eu.c: 1209: {
 19635                           ;lorawan_eu.c: 1210: UpdateChannelIdStatus (i, 1);
 19636  007E2A  0E01               	movlw	1
 19637  007E2C  6F60               	movwf	UpdateChannelIdStatus@statusNew& (0+255),b
 19638  007E2E  516B               	movf	EnableChannels1@i& (0+255),w,b
 19639  007E30  ECA3  F02A         	call	_UpdateChannelIdStatus
 19640                           
 19641                           ;lorawan_eu.c: 1211: }
 19642  007E34  D006               	goto	l2127
 19643  007E36                     l2126:
 19644                           
 19645                           ;lorawan_eu.c: 1212: else
 19646                           ;lorawan_eu.c: 1213: {
 19647                           ;lorawan_eu.c: 1214: UpdateChannelIdStatus (i, 0);
 19648  007E36  0E00               	movlw	0
 19649  007E38  0100               	movlb	0	; () banked
 19650  007E3A  6F60               	movwf	UpdateChannelIdStatus@statusNew& (0+255),b
 19651  007E3C  516B               	movf	EnableChannels1@i& (0+255),w,b
 19652  007E3E  ECA3  F02A         	call	_UpdateChannelIdStatus
 19653  007E42                     l2127:
 19654                           
 19655                           ;lorawan_eu.c: 1215: }
 19656                           ;lorawan_eu.c: 1216: channelMask = channelMask >> (1);
 19657  007E42  90D8               	bcf	status,0,c
 19658  007E44  0100               	movlb	0	; () banked
 19659  007E46  3165               	rrcf	(EnableChannels1@channelMask+1)& (0+255),w,b
 19660  007E48  6F69               	movwf	??_EnableChannels1& (0+255),b
 19661  007E4A  3164               	rrcf	EnableChannels1@channelMask& (0+255),w,b
 19662  007E4C  6F64               	movwf	EnableChannels1@channelMask& (0+255),b
 19663  007E4E  C069  F065         	movff	??_EnableChannels1,EnableChannels1@channelMask+1
 19664                           
 19665                           ; BSR set to: 0
 19666  007E52  2B6B               	incf	EnableChannels1@i& (0+255),f,b
 19667  007E54                     l2124:
 19668                           
 19669                           ; BSR set to: 0
 19670                           
 19671                           ; BSR set to: 0
 19672  007E54  5168               	movf	EnableChannels1@channelIndexMax& (0+255),w,b
 19673  007E56  5D6B               	subwf	EnableChannels1@i& (0+255),w,b
 19674  007E58  B0D8               	btfsc	status,0,c
 19675  007E5A  0012               	return	
 19676  007E5C  D7E4               	goto	l2125
 19677  007E5E                     __end_of_EnableChannels1:
 19678                           	opt stack 0
 19679                           tosu	equ	0xFFF
 19680                           tosh	equ	0xFFE
 19681                           tosl	equ	0xFFD
 19682                           pclath	equ	0xFFA
 19683                           tblptru	equ	0xFF8
 19684                           tblptrh	equ	0xFF7
 19685                           tblptrl	equ	0xFF6
 19686                           tablat	equ	0xFF5
 19687                           prodh	equ	0xFF4
 19688                           prodl	equ	0xFF3
 19689                           intcon	equ	0xFF2
 19690                           intcon2	equ	0xFF1
 19691                           intcon3	equ	0xFF0
 19692                           indf0	equ	0xFEF
 19693                           postinc0	equ	0xFEE
 19694                           fsr0h	equ	0xFEA
 19695                           fsr0l	equ	0xFE9
 19696                           wreg	equ	0xFE8
 19697                           postinc1	equ	0xFE6
 19698                           postdec1	equ	0xFE5
 19699                           plusw1	equ	0xFE3
 19700                           fsr1h	equ	0xFE2
 19701                           fsr1l	equ	0xFE1
 19702                           indf2	equ	0xFDF
 19703                           postinc2	equ	0xFDE
 19704                           postdec2	equ	0xFDD
 19705                           plusw2	equ	0xFDB
 19706                           fsr2h	equ	0xFDA
 19707                           fsr2l	equ	0xFD9
 19708                           status	equ	0xFD8
 19709                           
 19710 ;; *************** function _UpdateChannelIdStatus *****************
 19711 ;; Defined at:
 19712 ;;		line 1042 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 19713 ;; Parameters:    Size  Location     Type
 19714 ;;  channelId       1    wreg     unsigned char 
 19715 ;;  statusNew       1    0[BANK0 ] unsigned char 
 19716 ;; Auto vars:     Size  Location     Type
 19717 ;;  channelId       1    2[BANK0 ] unsigned char 
 19718 ;;  i               1    3[BANK0 ] unsigned char 
 19719 ;; Return value:  Size  Location     Type
 19720 ;;                  1    wreg      void 
 19721 ;; Registers used:
 19722 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 19723 ;; Tracked objects:
 19724 ;;		On entry : 0/0
 19725 ;;		On exit  : 0/0
 19726 ;;		Unchanged: 0/0
 19727 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19728 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19729 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19730 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19731 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19732 ;;Total ram usage:        4 bytes
 19733 ;; Hardware stack levels used:    1
 19734 ;; Hardware stack levels required when called:    7
 19735 ;; This function calls:
 19736 ;;		Nothing
 19737 ;; This function is called by:
 19738 ;;		_LORAWAN_SetChannelIdStatus
 19739 ;;		_ExecuteNewChannel
 19740 ;;		_EnableChannels1
 19741 ;; This function uses a non-reentrant model
 19742 ;;
 19743                           
 19744                           	psect	text95
 19745  005546                     __ptext95:
 19746                           	opt stack 0
 19747  005546                     _UpdateChannelIdStatus:
 19748                           	opt stack 17
 19749                           
 19750                           ; BSR set to: 0
 19751                           ;incstack = 0
 19752                           ;UpdateChannelIdStatus@channelId stored from wreg
 19753  005546  0100               	movlb	0	; () banked
 19754  005548  6F62               	movwf	UpdateChannelIdStatus@channelId& (0+255),b
 19755                           
 19756                           ;lorawan_eu.c: 1044: uint8_t i;
 19757                           ;lorawan_eu.c: 1046: Channels[channelId].status = statusNew;
 19758  00554A  0100               	movlb	0	; () banked
 19759  00554C  5162               	movf	UpdateChannelIdStatus@channelId& (0+255),w,b
 19760  00554E  0D0E               	mullw	14
 19761  005550  0E04               	movlw	4
 19762  005552  26F3               	addwf	prodl,f,c
 19763  005554  0E00               	movlw	0
 19764  005556  22F4               	addwfc	prodh,f,c
 19765  005558  0E00               	movlw	low _Channels
 19766  00555A  24F3               	addwf	prodl,w,c
 19767  00555C  6ED9               	movwf	fsr2l,c
 19768  00555E  0E04               	movlw	high _Channels
 19769  005560  20F4               	addwfc	prodh,w,c
 19770  005562  6EDA               	movwf	fsr2h,c
 19771  005564  C060  FFDF         	movff	UpdateChannelIdStatus@statusNew,indf2
 19772                           
 19773                           ;lorawan_eu.c: 1047: if(Channels[channelId].status == 0)
 19774  005568  5162               	movf	UpdateChannelIdStatus@channelId& (0+255),w,b
 19775  00556A  0D0E               	mullw	14
 19776  00556C  0E04               	movlw	4
 19777  00556E  26F3               	addwf	prodl,f,c
 19778  005570  0E00               	movlw	0
 19779  005572  22F4               	addwfc	prodh,f,c
 19780  005574  0E00               	movlw	low _Channels
 19781  005576  24F3               	addwf	prodl,w,c
 19782  005578  6ED9               	movwf	fsr2l,c
 19783  00557A  0E04               	movlw	high _Channels
 19784  00557C  20F4               	addwfc	prodh,w,c
 19785  00557E  6EDA               	movwf	fsr2h,c
 19786  005580  50DF               	movf	indf2,w,c
 19787  005582  A4D8               	btfss	status,2,c
 19788  005584  D010               	goto	l2058
 19789                           
 19790                           ; BSR set to: 0
 19791                           ;lorawan_eu.c: 1048: {
 19792                           ;lorawan_eu.c: 1050: Channels[channelId].channelTimer = 0;
 19793  005586  5162               	movf	UpdateChannelIdStatus@channelId& (0+255),w,b
 19794  005588  0D0E               	mullw	14
 19795  00558A  0E08               	movlw	8
 19796  00558C  26F3               	addwf	prodl,f,c
 19797  00558E  0E00               	movlw	0
 19798  005590  22F4               	addwfc	prodh,f,c
 19799  005592  0E00               	movlw	low _Channels
 19800  005594  24F3               	addwf	prodl,w,c
 19801  005596  6ED9               	movwf	fsr2l,c
 19802  005598  0E04               	movlw	high _Channels
 19803  00559A  20F4               	addwfc	prodh,w,c
 19804  00559C  6EDA               	movwf	fsr2h,c
 19805  00559E  6ADE               	clrf	postinc2,c
 19806  0055A0  6ADE               	clrf	postinc2,c
 19807  0055A2  6ADE               	clrf	postinc2,c
 19808  0055A4  6ADD               	clrf	postdec2,c
 19809  0055A6                     l2058:
 19810                           
 19811                           ; BSR set to: 0
 19812                           ;lorawan_eu.c: 1051: }
 19813                           ;lorawan_eu.c: 1053: for (i = 0; i < loRa.maxChannels; i++)
 19814                           
 19815                           ; BSR set to: 0
 19816  0055A6  0E00               	movlw	0
 19817  0055A8  6F63               	movwf	UpdateChannelIdStatus@i& (0+255),b
 19818  0055AA  D06D               	goto	l2059
 19819  0055AC                     
 19820                           ; BSR set to: 0
 19821                           ;lorawan_eu.c: 1054: {
 19822                           ;lorawan_eu.c: 1055: if ( (Channels[i].dataRange.min < loRa.minDataRate) && (Channels[i]
      +                          .status == 1) )
 19823                           
 19824                           ; BSR set to: 0
 19825  0055AC  5163               	movf	UpdateChannelIdStatus@i& (0+255),w,b
 19826  0055AE  0D0E               	mullw	14
 19827  0055B0  0E05               	movlw	5
 19828  0055B2  26F3               	addwf	prodl,f,c
 19829  0055B4  0E00               	movlw	0
 19830  0055B6  22F4               	addwfc	prodh,f,c
 19831  0055B8  0E00               	movlw	low _Channels
 19832  0055BA  24F3               	addwf	prodl,w,c
 19833  0055BC  6ED9               	movwf	fsr2l,c
 19834  0055BE  0E04               	movlw	high _Channels
 19835  0055C0  20F4               	addwfc	prodh,w,c
 19836  0055C2  6EDA               	movwf	fsr2h,c
 19837  0055C4  0104               	movlb	4	; () banked
 19838  0055C6  50DF               	movf	223,w,c
 19839  0055C8  0B0F               	andlw	15
 19840  0055CA  0100               	movlb	0	; () banked
 19841  0055CC  6F61               	movwf	??_UpdateChannelIdStatus& (0+255),b
 19842  0055CE  0102               	movlb	2	; () banked
 19843  0055D0  51F1               	movf	(_loRa+235)& (0+255),w,b
 19844  0055D2  0100               	movlb	0	; () banked
 19845  0055D4  5D61               	subwf	??_UpdateChannelIdStatus& (0+255),w,b
 19846  0055D6  B0D8               	btfsc	status,0,c
 19847  0055D8  D020               	goto	l2061
 19848                           
 19849                           ; BSR set to: 0
 19850  0055DA  5163               	movf	UpdateChannelIdStatus@i& (0+255),w,b
 19851  0055DC  0D0E               	mullw	14
 19852  0055DE  0E04               	movlw	4
 19853  0055E0  26F3               	addwf	prodl,f,c
 19854  0055E2  0E00               	movlw	0
 19855  0055E4  22F4               	addwfc	prodh,f,c
 19856  0055E6  0E00               	movlw	low _Channels
 19857  0055E8  24F3               	addwf	prodl,w,c
 19858  0055EA  6ED9               	movwf	fsr2l,c
 19859  0055EC  0E04               	movlw	high _Channels
 19860  0055EE  20F4               	addwfc	prodh,w,c
 19861  0055F0  6EDA               	movwf	fsr2h,c
 19862  0055F2  04DE               	decf	postinc2,w,c
 19863  0055F4  A4D8               	btfss	status,2,c
 19864  0055F6  D011               	goto	l2061
 19865                           
 19866                           ; BSR set to: 0
 19867                           ;lorawan_eu.c: 1056: {
 19868                           ;lorawan_eu.c: 1057: loRa.minDataRate = Channels[i].dataRange.min;
 19869  0055F8  5163               	movf	UpdateChannelIdStatus@i& (0+255),w,b
 19870  0055FA  0D0E               	mullw	14
 19871  0055FC  0E05               	movlw	5
 19872  0055FE  26F3               	addwf	prodl,f,c
 19873  005600  0E00               	movlw	0
 19874  005602  22F4               	addwfc	prodh,f,c
 19875  005604  0E00               	movlw	low _Channels
 19876  005606  24F3               	addwf	prodl,w,c
 19877  005608  6ED9               	movwf	fsr2l,c
 19878  00560A  0E04               	movlw	high _Channels
 19879  00560C  20F4               	addwfc	prodh,w,c
 19880  00560E  6EDA               	movwf	fsr2h,c
 19881  005610  0104               	movlb	4	; () banked
 19882  005612  50DF               	movf	223,w,c
 19883  005614  0B0F               	andlw	15
 19884  005616  0102               	movlb	2	; () banked
 19885  005618  6FF1               	movwf	(_loRa+235)& (0+255),b
 19886  00561A                     l2061:
 19887                           
 19888                           ;lorawan_eu.c: 1058: }
 19889                           ;lorawan_eu.c: 1059: if ( (Channels[i].dataRange.max > loRa.maxDataRate) && (Channels[i]
      +                          .status == 1) )
 19890  00561A  0100               	movlb	0	; () banked
 19891  00561C  5163               	movf	UpdateChannelIdStatus@i& (0+255),w,b
 19892  00561E  0D0E               	mullw	14
 19893  005620  0E05               	movlw	5
 19894  005622  26F3               	addwf	prodl,f,c
 19895  005624  0E00               	movlw	0
 19896  005626  22F4               	addwfc	prodh,f,c
 19897  005628  0E00               	movlw	low _Channels
 19898  00562A  24F3               	addwf	prodl,w,c
 19899  00562C  6ED9               	movwf	fsr2l,c
 19900  00562E  0E04               	movlw	high _Channels
 19901  005630  20F4               	addwfc	prodh,w,c
 19902  005632  6EDA               	movwf	fsr2h,c
 19903  005634  0104               	movlb	4	; () banked
 19904  005636  38DF               	swapf	223,w,c
 19905  005638  0B0F               	andlw	15
 19906  00563A  0102               	movlb	2	; () banked
 19907  00563C  61F2               	cpfslt	(_loRa+236)& (0+255),b
 19908  00563E  D021               	goto	l2062
 19909                           
 19910                           ; BSR set to: 2
 19911  005640  0100               	movlb	0	; () banked
 19912  005642  5163               	movf	UpdateChannelIdStatus@i& (0+255),w,b
 19913  005644  0D0E               	mullw	14
 19914  005646  0E04               	movlw	4
 19915  005648  26F3               	addwf	prodl,f,c
 19916  00564A  0E00               	movlw	0
 19917  00564C  22F4               	addwfc	prodh,f,c
 19918  00564E  0E00               	movlw	low _Channels
 19919  005650  24F3               	addwf	prodl,w,c
 19920  005652  6ED9               	movwf	fsr2l,c
 19921  005654  0E04               	movlw	high _Channels
 19922  005656  20F4               	addwfc	prodh,w,c
 19923  005658  6EDA               	movwf	fsr2h,c
 19924  00565A  04DE               	decf	postinc2,w,c
 19925  00565C  A4D8               	btfss	status,2,c
 19926  00565E  D011               	goto	l2062
 19927                           
 19928                           ; BSR set to: 0
 19929                           ;lorawan_eu.c: 1060: {
 19930                           ;lorawan_eu.c: 1061: loRa.maxDataRate = Channels[i].dataRange.max;
 19931  005660  5163               	movf	UpdateChannelIdStatus@i& (0+255),w,b
 19932  005662  0D0E               	mullw	14
 19933  005664  0E05               	movlw	5
 19934  005666  26F3               	addwf	prodl,f,c
 19935  005668  0E00               	movlw	0
 19936  00566A  22F4               	addwfc	prodh,f,c
 19937  00566C  0E00               	movlw	low _Channels
 19938  00566E  24F3               	addwf	prodl,w,c
 19939  005670  6ED9               	movwf	fsr2l,c
 19940  005672  0E04               	movlw	high _Channels
 19941  005674  20F4               	addwfc	prodh,w,c
 19942  005676  6EDA               	movwf	fsr2h,c
 19943  005678  0104               	movlb	4	; () banked
 19944  00567A  38DF               	swapf	223,w,c
 19945  00567C  0B0F               	andlw	15
 19946  00567E  0102               	movlb	2	; () banked
 19947  005680  6FF2               	movwf	(_loRa+236)& (0+255),b
 19948  005682                     l2062:
 19949                           
 19950                           ; BSR set to: 2
 19951  005682  0100               	movlb	0	; () banked
 19952  005684  2B63               	incf	UpdateChannelIdStatus@i& (0+255),f,b
 19953  005686                     l2059:
 19954                           
 19955                           ; BSR set to: 0
 19956                           
 19957                           ; BSR set to: 0
 19958  005686  0102               	movlb	2	; () banked
 19959  005688  51F3               	movf	(_loRa+237)& (0+255),w,b
 19960  00568A  0100               	movlb	0	; () banked
 19961  00568C  5D63               	subwf	UpdateChannelIdStatus@i& (0+255),w,b
 19962  00568E  A0D8               	btfss	status,0,c
 19963  005690  D78D               	goto	l2060
 19964                           
 19965                           ; BSR set to: 0
 19966                           ;lorawan_eu.c: 1062: }
 19967                           ;lorawan_eu.c: 1063: }
 19968                           ;lorawan_eu.c: 1065: if (loRa.currentDataRate > loRa.maxDataRate)
 19969                           
 19970                           ; BSR set to: 0
 19971  005692  0102               	movlb	2	; () banked
 19972  005694  51E5               	movf	(_loRa+223)& (0+255),w,b
 19973  005696  5DF2               	subwf	(_loRa+236)& (0+255),w,b
 19974  005698  A0D8               	btfss	status,0,c
 19975                           
 19976                           ; BSR set to: 2
 19977                           ;lorawan_eu.c: 1066: {
 19978                           ;lorawan_eu.c: 1067: loRa.currentDataRate = loRa.maxDataRate;
 19979  00569A  C2F2  F2E5         	movff	_loRa+236,_loRa+223
 19980                           
 19981                           ; BSR set to: 2
 19982                           ;lorawan_eu.c: 1068: }
 19983                           ;lorawan_eu.c: 1070: if (loRa.currentDataRate < loRa.minDataRate)
 19984                           
 19985                           ; BSR set to: 2
 19986  00569E  51F1               	movf	(_loRa+235)& (0+255),w,b
 19987  0056A0  5DE5               	subwf	(_loRa+223)& (0+255),w,b
 19988  0056A2  B0D8               	btfsc	status,0,c
 19989  0056A4  0012               	return	
 19990                           
 19991                           ; BSR set to: 2
 19992                           ;lorawan_eu.c: 1071: {
 19993                           ;lorawan_eu.c: 1072: loRa.currentDataRate = loRa.minDataRate;
 19994  0056A6  C2F1  F2E5         	movff	_loRa+235,_loRa+223
 19995  0056AA  0012               	return	
 19996  0056AC                     __end_of_UpdateChannelIdStatus:
 19997                           	opt stack 0
 19998                           tosu	equ	0xFFF
 19999                           tosh	equ	0xFFE
 20000                           tosl	equ	0xFFD
 20001                           pclath	equ	0xFFA
 20002                           tblptru	equ	0xFF8
 20003                           tblptrh	equ	0xFF7
 20004                           tblptrl	equ	0xFF6
 20005                           tablat	equ	0xFF5
 20006                           prodh	equ	0xFF4
 20007                           prodl	equ	0xFF3
 20008                           intcon	equ	0xFF2
 20009                           intcon2	equ	0xFF1
 20010                           intcon3	equ	0xFF0
 20011                           indf0	equ	0xFEF
 20012                           postinc0	equ	0xFEE
 20013                           fsr0h	equ	0xFEA
 20014                           fsr0l	equ	0xFE9
 20015                           wreg	equ	0xFE8
 20016                           postinc1	equ	0xFE6
 20017                           postdec1	equ	0xFE5
 20018                           plusw1	equ	0xFE3
 20019                           fsr1h	equ	0xFE2
 20020                           fsr1l	equ	0xFE1
 20021                           indf2	equ	0xFDF
 20022                           postinc2	equ	0xFDE
 20023                           postdec2	equ	0xFDD
 20024                           plusw2	equ	0xFDB
 20025                           fsr2h	equ	0xFDA
 20026                           fsr2l	equ	0xFD9
 20027                           status	equ	0xFD8
 20028                           
 20029 ;; *************** function _ExecuteDutyCycle *****************
 20030 ;; Defined at:
 20031 ;;		line 594 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 20032 ;; Parameters:    Size  Location     Type
 20033 ;;  ptr             2    0[BANK0 ] PTR unsigned char 
 20034 ;;		 -> radioBuffer(271), LORAWAN_RxDone@hdr(2), 
 20035 ;; Auto vars:     Size  Location     Type
 20036 ;;  maxDCycle       1    5[BANK0 ] unsigned char 
 20037 ;; Return value:  Size  Location     Type
 20038 ;;                  2    0[BANK0 ] PTR unsigned char 
 20039 ;; Registers used:
 20040 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 20041 ;; Tracked objects:
 20042 ;;		On entry : 0/0
 20043 ;;		On exit  : 0/0
 20044 ;;		Unchanged: 0/0
 20045 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20046 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20047 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20048 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20049 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20050 ;;Total ram usage:        6 bytes
 20051 ;; Hardware stack levels used:    1
 20052 ;; Hardware stack levels required when called:    7
 20053 ;; This function calls:
 20054 ;;		Nothing
 20055 ;; This function is called by:
 20056 ;;		_MacExecuteCommands
 20057 ;; This function uses a non-reentrant model
 20058 ;;
 20059                           
 20060                           	psect	text96
 20061  008640                     __ptext96:
 20062                           	opt stack 0
 20063  008640                     _ExecuteDutyCycle:
 20064                           	opt stack 18
 20065                           
 20066                           ;lorawan_eu.c: 596: uint8_t maxDCycle;
 20067                           ;lorawan_eu.c: 598: maxDCycle = *(ptr++);
 20068                           
 20069                           ; BSR set to: 2
 20070                           ;incstack = 0
 20071  008640  C060  FFD9         	movff	ExecuteDutyCycle@ptr,fsr2l
 20072  008644  C061  FFDA         	movff	ExecuteDutyCycle@ptr+1,fsr2h
 20073  008648  50DF               	movf	indf2,w,c
 20074  00864A  0100               	movlb	0	; () banked
 20075  00864C  6F65               	movwf	ExecuteDutyCycle@maxDCycle& (0+255),b
 20076                           
 20077                           ; BSR set to: 0
 20078  00864E  4B60               	infsnz	ExecuteDutyCycle@ptr& (0+255),f,b
 20079  008650  2B61               	incf	(ExecuteDutyCycle@ptr+1)& (0+255),f,b
 20080                           
 20081                           ; BSR set to: 0
 20082                           ;lorawan_eu.c: 599: if (maxDCycle < 15)
 20083  008652  0E0F               	movlw	15
 20084  008654  6165               	cpfslt	ExecuteDutyCycle@maxDCycle& (0+255),b
 20085  008656  D013               	goto	l1937
 20086                           
 20087                           ; BSR set to: 0
 20088                           ;lorawan_eu.c: 600: {
 20089                           ;lorawan_eu.c: 601: loRa.prescaler = 1 << maxDCycle;
 20090  008658  C065  F062         	movff	ExecuteDutyCycle@maxDCycle,??_ExecuteDutyCycle
 20091  00865C  0E01               	movlw	1
 20092  00865E  6F63               	movwf	(??_ExecuteDutyCycle+1)& (0+255),b
 20093  008660  0E00               	movlw	0
 20094  008662  6F64               	movwf	(??_ExecuteDutyCycle+2)& (0+255),b
 20095  008664  2B62               	incf	??_ExecuteDutyCycle& (0+255),f,b
 20096  008666  D003               	goto	u10384
 20097  008668                     u10385:
 20098  008668  90D8               	bcf	status,0,c
 20099  00866A  3763               	rlcf	(??_ExecuteDutyCycle+1)& (0+255),f,b
 20100  00866C  3764               	rlcf	(??_ExecuteDutyCycle+2)& (0+255),f,b
 20101  00866E                     u10384:
 20102  00866E  2F62               	decfsz	??_ExecuteDutyCycle& (0+255),f,b
 20103  008670  D7FB               	goto	u10385
 20104  008672  C063  F2E1         	movff	??_ExecuteDutyCycle+1,_loRa+219
 20105  008676  C064  F2E2         	movff	??_ExecuteDutyCycle+2,_loRa+220
 20106                           
 20107                           ;lorawan_eu.c: 602: loRa.macStatus.prescalerModified = 1;
 20108  00867A  0102               	movlb	2	; () banked
 20109  00867C  8D09               	bsf	(_loRa+3)& (0+255),6,b
 20110  00867E                     l1937:
 20111                           
 20112                           ;lorawan_eu.c: 603: }
 20113                           ;lorawan_eu.c: 605: if (maxDCycle == 255)
 20114  00867E  0100               	movlb	0	; () banked
 20115  008680  2965               	incf	ExecuteDutyCycle@maxDCycle& (0+255),w,b
 20116  008682  A4D8               	btfss	status,2,c
 20117  008684  D002               	goto	l1938
 20118                           
 20119                           ; BSR set to: 0
 20120                           ;lorawan_eu.c: 606: {
 20121                           ;lorawan_eu.c: 607: loRa.macStatus.silentImmediately = 1;
 20122  008686  0102               	movlb	2	; () banked
 20123  008688  8F08               	bsf	(_loRa+2)& (0+255),7,b
 20124  00868A                     l1938:
 20125                           
 20126                           ;lorawan_eu.c: 608: }
 20127                           ;lorawan_eu.c: 610: return ptr;
 20128                           
 20129                           ; BSR set to: 2
 20130  00868A  C060  F060         	movff	ExecuteDutyCycle@ptr,?_ExecuteDutyCycle
 20131  00868E  C061  F061         	movff	ExecuteDutyCycle@ptr+1,?_ExecuteDutyCycle+1
 20132  008692  0012               	return	
 20133  008694                     __end_of_ExecuteDutyCycle:
 20134                           	opt stack 0
 20135                           tosu	equ	0xFFF
 20136                           tosh	equ	0xFFE
 20137                           tosl	equ	0xFFD
 20138                           pclath	equ	0xFFA
 20139                           tblptru	equ	0xFF8
 20140                           tblptrh	equ	0xFF7
 20141                           tblptrl	equ	0xFF6
 20142                           tablat	equ	0xFF5
 20143                           prodh	equ	0xFF4
 20144                           prodl	equ	0xFF3
 20145                           intcon	equ	0xFF2
 20146                           intcon2	equ	0xFF1
 20147                           intcon3	equ	0xFF0
 20148                           indf0	equ	0xFEF
 20149                           postinc0	equ	0xFEE
 20150                           fsr0h	equ	0xFEA
 20151                           fsr0l	equ	0xFE9
 20152                           wreg	equ	0xFE8
 20153                           postinc1	equ	0xFE6
 20154                           postdec1	equ	0xFE5
 20155                           plusw1	equ	0xFE3
 20156                           fsr1h	equ	0xFE2
 20157                           fsr1l	equ	0xFE1
 20158                           indf2	equ	0xFDF
 20159                           postinc2	equ	0xFDE
 20160                           postdec2	equ	0xFDD
 20161                           plusw2	equ	0xFDB
 20162                           fsr2h	equ	0xFDA
 20163                           fsr2l	equ	0xFD9
 20164                           status	equ	0xFD8
 20165                           
 20166 ;; *************** function _ExecuteDevStatus *****************
 20167 ;; Defined at:
 20168 ;;		line 672 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 20169 ;; Parameters:    Size  Location     Type
 20170 ;;  ptr             2    0[BANK0 ] PTR unsigned char 
 20171 ;;		 -> radioBuffer(271), LORAWAN_RxDone@hdr(2), 
 20172 ;; Auto vars:     Size  Location     Type
 20173 ;;		None
 20174 ;; Return value:  Size  Location     Type
 20175 ;;                  2    0[BANK0 ] PTR unsigned char 
 20176 ;; Registers used:
 20177 ;;		wreg, status,2, status,0
 20178 ;; Tracked objects:
 20179 ;;		On entry : 0/0
 20180 ;;		On exit  : 0/0
 20181 ;;		Unchanged: 0/0
 20182 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20183 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20184 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20185 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20186 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20187 ;;Total ram usage:        2 bytes
 20188 ;; Hardware stack levels used:    1
 20189 ;; Hardware stack levels required when called:    7
 20190 ;; This function calls:
 20191 ;;		Nothing
 20192 ;; This function is called by:
 20193 ;;		_MacExecuteCommands
 20194 ;; This function uses a non-reentrant model
 20195 ;;
 20196                           
 20197                           	psect	text97
 20198  009522                     __ptext97:
 20199                           	opt stack 0
 20200  009522                     _ExecuteDevStatus:
 20201                           	opt stack 18
 20202                           
 20203                           ;lorawan_eu.c: 674: return ptr;
 20204                           
 20205                           ;incstack = 0
 20206  009522  C060  F060         	movff	ExecuteDevStatus@ptr,?_ExecuteDevStatus
 20207  009526  C061  F061         	movff	ExecuteDevStatus@ptr+1,?_ExecuteDevStatus+1
 20208  00952A  0012               	return	
 20209  00952C                     __end_of_ExecuteDevStatus:
 20210                           	opt stack 0
 20211                           tosu	equ	0xFFF
 20212                           tosh	equ	0xFFE
 20213                           tosl	equ	0xFFD
 20214                           pclath	equ	0xFFA
 20215                           tblptru	equ	0xFF8
 20216                           tblptrh	equ	0xFF7
 20217                           tblptrl	equ	0xFF6
 20218                           tablat	equ	0xFF5
 20219                           prodh	equ	0xFF4
 20220                           prodl	equ	0xFF3
 20221                           intcon	equ	0xFF2
 20222                           intcon2	equ	0xFF1
 20223                           intcon3	equ	0xFF0
 20224                           indf0	equ	0xFEF
 20225                           postinc0	equ	0xFEE
 20226                           fsr0h	equ	0xFEA
 20227                           fsr0l	equ	0xFE9
 20228                           wreg	equ	0xFE8
 20229                           postinc1	equ	0xFE6
 20230                           postdec1	equ	0xFE5
 20231                           plusw1	equ	0xFE3
 20232                           fsr1h	equ	0xFE2
 20233                           fsr1l	equ	0xFE1
 20234                           indf2	equ	0xFDF
 20235                           postinc2	equ	0xFDE
 20236                           postdec2	equ	0xFDD
 20237                           plusw2	equ	0xFDB
 20238                           fsr2h	equ	0xFDA
 20239                           fsr2l	equ	0xFD9
 20240                           status	equ	0xFD8
 20241                           
 20242 ;; *************** function _LORAWAN_Send *****************
 20243 ;; Defined at:
 20244 ;;		line 185 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 20245 ;; Parameters:    Size  Location     Type
 20246 ;;  confirmed       1    wreg     enum E7217
 20247 ;;  port            1  115[BANK0 ] unsigned char 
 20248 ;;  buffer          2  116[BANK0 ] PTR void 
 20249 ;;		 -> tosend(5), NULL(0), 
 20250 ;;  bufferLength    1  118[BANK0 ] unsigned char 
 20251 ;; Auto vars:     Size  Location     Type
 20252 ;;  confirmed       1  121[BANK0 ] enum E7217
 20253 ;;  result          1  120[BANK0 ] enum E7190
 20254 ;; Return value:  Size  Location     Type
 20255 ;;                  1    wreg      enum E7190
 20256 ;; Registers used:
 20257 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20258 ;; Tracked objects:
 20259 ;;		On entry : 0/0
 20260 ;;		On exit  : 0/0
 20261 ;;		Unchanged: 0/0
 20262 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20263 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20264 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20265 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20266 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20267 ;;Total ram usage:        7 bytes
 20268 ;; Hardware stack levels used:    1
 20269 ;; Hardware stack levels required when called:   13
 20270 ;; This function calls:
 20271 ;;		_AssemblePacket
 20272 ;;		_LORAWAN_GetMaxPayloadSize
 20273 ;;		_RADIO_ReceiveStop
 20274 ;;		_RADIO_Transmit
 20275 ;;		_SelectChannelForTransmission
 20276 ;; This function is called by:
 20277 ;;		_AutomaticReplyCallback
 20278 ;;		_LORAWAN_RxDone
 20279 ;;		_main
 20280 ;; This function uses a non-reentrant model
 20281 ;;
 20282                           
 20283                           	psect	text98
 20284  006DF8                     __ptext98:
 20285                           	opt stack 0
 20286  006DF8                     _LORAWAN_Send:
 20287                           	opt stack 17
 20288                           
 20289                           ;incstack = 0
 20290                           ;LORAWAN_Send@confirmed stored from wreg
 20291  006DF8  0100               	movlb	0	; () banked
 20292  006DFA  6FD9               	movwf	LORAWAN_Send@confirmed& (0+255),b
 20293                           
 20294                           ;lorawan.c: 187: LorawanError_t result;
 20295                           ;lorawan.c: 189: if (loRa.macStatus.macPause == 1)
 20296  006DFC  0102               	movlb	2	; () banked
 20297  006DFE  B109               	btfsc	(_loRa+3)& (0+255),0,b
 20298  006E00  0012               	return	
 20299                           
 20300                           ; BSR set to: 2
 20301                           ;lorawan.c: 192: }
 20302                           ;lorawan.c: 194: if (loRa.macStatus.silentImmediately == 1)
 20303                           
 20304                           ; BSR set to: 2
 20305                           ;lorawan.c: 190: {
 20306                           ;lorawan.c: 191: return MAC_PAUSED;
 20307                           ;	Return value of _LORAWAN_Send is never used
 20308  006E02  BF08               	btfsc	(_loRa+2)& (0+255),7,b
 20309  006E04  0012               	return	
 20310                           
 20311                           ; BSR set to: 2
 20312                           ;lorawan.c: 197: }
 20313                           ;lorawan.c: 199: if (loRa.macStatus.networkJoined == 0)
 20314                           
 20315                           ; BSR set to: 2
 20316                           ;lorawan.c: 195: {
 20317                           ;lorawan.c: 196: return SILENT_IMMEDIATELY_ACTIVE;
 20318                           ;	Return value of _LORAWAN_Send is never used
 20319  006E06  A908               	btfss	(_loRa+2)& (0+255),4,b
 20320  006E08  0012               	return	
 20321                           
 20322                           ; BSR set to: 2
 20323                           ;lorawan.c: 202: }
 20324                           ;lorawan.c: 204: if ( (port < 1) && (bufferLength != 0) )
 20325                           
 20326                           ; BSR set to: 2
 20327                           
 20328                           ; BSR set to: 2
 20329                           ;lorawan.c: 200: {
 20330                           ;lorawan.c: 201: return NETWORK_NOT_JOINED;
 20331                           ;	Return value of _LORAWAN_Send is never used
 20332  006E0A  0100               	movlb	0	; () banked
 20333  006E0C  51D3               	movf	LORAWAN_Send@port& (0+255),w,b
 20334  006E0E  A4D8               	btfss	status,2,c
 20335  006E10  D003               	goto	l769
 20336                           
 20337                           ; BSR set to: 0
 20338  006E12  51D6               	movf	LORAWAN_Send@bufferLength& (0+255),w,b
 20339  006E14  A4D8               	btfss	status,2,c
 20340  006E16  0012               	return	
 20341  006E18                     l769:
 20342                           
 20343                           ; BSR set to: 0
 20344                           ;lorawan.c: 207: }
 20345                           ;lorawan.c: 210: if (bufferLength > LORAWAN_GetMaxPayloadSize ())
 20346                           
 20347                           ; BSR set to: 0
 20348  006E18  EC2D  F041         	call	_LORAWAN_GetMaxPayloadSize	;wreg free
 20349  006E1C  0100               	movlb	0	; () banked
 20350  006E1E  6FD7               	movwf	??_LORAWAN_Send& (0+255),b
 20351  006E20  51D6               	movf	LORAWAN_Send@bufferLength& (0+255),w,b
 20352  006E22  5DD7               	subwf	??_LORAWAN_Send& (0+255),w,b
 20353  006E24  A0D8               	btfss	status,0,c
 20354  006E26  0012               	return	
 20355                           
 20356                           ; BSR set to: 0
 20357                           ;lorawan.c: 213: }
 20358                           ;lorawan.c: 215: if (loRa.fCntUp.value == (4294967295UL))
 20359                           
 20360                           ; BSR set to: 0
 20361                           
 20362                           ; BSR set to: 0
 20363                           ;lorawan.c: 211: {
 20364                           ;lorawan.c: 212: return INVALID_BUFFER_LENGTH;
 20365                           ;	Return value of _LORAWAN_Send is never used
 20366  006E28  0102               	movlb	2	; () banked
 20367  006E2A  290C               	incf	(_loRa+6)& (0+255),w,b
 20368  006E2C  E109               	bnz	l10743
 20369  006E2E  290D               	incf	(_loRa+7)& (0+255),w,b
 20370  006E30  E107               	bnz	l10743
 20371  006E32  290E               	incf	(_loRa+8)& (0+255),w,b
 20372  006E34  E105               	bnz	l10743
 20373  006E36  290F               	incf	(_loRa+9)& (0+255),w,b
 20374  006E38  A4D8               	btfss	status,2,c
 20375  006E3A  D002               	goto	l771
 20376                           
 20377                           ; BSR set to: 2
 20378                           ;lorawan.c: 216: {
 20379                           ;lorawan.c: 218: loRa.macStatus.rejoinNeeded = 1;
 20380  006E3C  830A               	bsf	(_loRa+4)& (0+255),1,b
 20381                           
 20382                           ;lorawan.c: 219: return FRAME_COUNTER_ERROR_REJOIN_NEEDED;
 20383                           ;	Return value of _LORAWAN_Send is never used
 20384  006E3E  0012               	return	
 20385  006E40                     l771:
 20386  006E40                     l10743:
 20387                           
 20388                           ; BSR set to: 2
 20389                           ;lorawan.c: 220: }
 20390                           ;lorawan.c: 222: if ((loRa.macStatus.macState != IDLE) && (CLASS_A == loRa.deviceClass))
 20391  006E40  5108               	movf	(_loRa+2)& (0+255),w,b
 20392  006E42  0B0F               	andlw	15
 20393  006E44  0900               	iorlw	0
 20394  006E46  B4D8               	btfsc	status,2,c
 20395  006E48  D003               	goto	l772
 20396                           
 20397                           ; BSR set to: 2
 20398  006E4A  5118               	movf	(_loRa+18)& (0+255),w,b
 20399  006E4C  B4D8               	btfsc	status,2,c
 20400  006E4E  0012               	return	
 20401  006E50                     l772:
 20402                           
 20403                           ; BSR set to: 2
 20404                           ;lorawan.c: 225: }
 20405                           ;lorawan.c: 227: result = SelectChannelForTransmission (1);
 20406                           
 20407                           ; BSR set to: 2
 20408  006E50  0E01               	movlw	1
 20409  006E52  EC2F  F03F         	call	_SelectChannelForTransmission
 20410  006E56  0100               	movlb	0	; () banked
 20411  006E58  6FD8               	movwf	LORAWAN_Send@result& (0+255),b
 20412                           
 20413                           ; BSR set to: 0
 20414                           ;lorawan.c: 228: if (result != OK)
 20415  006E5A  51D8               	movf	LORAWAN_Send@result& (0+255),w,b
 20416  006E5C  A4D8               	btfss	status,2,c
 20417  006E5E  0012               	return	
 20418                           
 20419                           ; BSR set to: 0
 20420                           ;lorawan.c: 232: else
 20421                           ;lorawan.c: 233: {
 20422                           ;lorawan.c: 234: if (CLASS_C == loRa.deviceClass)
 20423                           
 20424                           ; BSR set to: 0
 20425                           
 20426                           ; BSR set to: 0
 20427                           ;lorawan.c: 231: }
 20428                           
 20429                           ; BSR set to: 0
 20430                           ;lorawan.c: 229: {
 20431                           ;lorawan.c: 230: return result;
 20432                           ;	Return value of _LORAWAN_Send is never used
 20433  006E60  0E02               	movlw	2
 20434  006E62  0102               	movlb	2	; () banked
 20435  006E64  1918               	xorwf	(_loRa+18)& (0+255),w,b
 20436  006E66  B4D8               	btfsc	status,2,c
 20437                           
 20438                           ; BSR set to: 2
 20439                           ;lorawan.c: 235: {
 20440                           ;lorawan.c: 236: RADIO_ReceiveStop();
 20441  006E68  ECCE  F048         	call	_RADIO_ReceiveStop	;wreg free
 20442                           
 20443                           ;lorawan.c: 237: }
 20444                           ;lorawan.c: 239: AssemblePacket (confirmed, port, buffer, bufferLength);
 20445  006E6C  C0D3  F0C7         	movff	LORAWAN_Send@port,AssemblePacket@port
 20446  006E70  C0D4  F0C8         	movff	LORAWAN_Send@buffer,AssemblePacket@buffer
 20447  006E74  C0D5  F0C9         	movff	LORAWAN_Send@buffer+1,AssemblePacket@buffer+1
 20448  006E78  C0D6  F0CA         	movff	LORAWAN_Send@bufferLength,AssemblePacket@bufferLength
 20449  006E7C  0100               	movlb	0	; () banked
 20450  006E7E  6BCB               	clrf	(AssemblePacket@bufferLength+1)& (0+255),b
 20451  006E80  51D9               	movf	LORAWAN_Send@confirmed& (0+255),w,b
 20452  006E82  EC47  F00F         	call	_AssemblePacket
 20453                           
 20454                           ;lorawan.c: 241: if (RADIO_Transmit (&macBuffer[16], loRa.lastPacketLength) == OK)
 20455  006E86  0E9F               	movlw	low (_macBuffer+16)
 20456  006E88  0100               	movlb	0	; () banked
 20457  006E8A  6FB1               	movwf	RADIO_Transmit@buffer& (0+255),b
 20458  006E8C  0E06               	movlw	high (_macBuffer+16)
 20459  006E8E  6FB2               	movwf	(RADIO_Transmit@buffer+1)& (0+255),b
 20460  006E90  C2DA  F0B3         	movff	_loRa+212,RADIO_Transmit@bufferLen
 20461  006E94  EC11  F020         	call	_RADIO_Transmit	;wreg free
 20462  006E98  0100               	movlb	0	; () banked
 20463  006E9A  51B1               	movf	?_RADIO_Transmit& (0+255),w,b
 20464  006E9C  11B2               	iorwf	(?_RADIO_Transmit+1)& (0+255),w,b
 20465  006E9E  A4D8               	btfss	status,2,c
 20466  006EA0  0012               	return	
 20467                           
 20468                           ; BSR set to: 0
 20469                           ;lorawan.c: 242: {
 20470                           ;lorawan.c: 243: loRa.fCntUp.value ++;
 20471  006EA2  0E01               	movlw	1
 20472  006EA4  0102               	movlb	2	; () banked
 20473  006EA6  270C               	addwf	(_loRa+6)& (0+255),f,b
 20474  006EA8  0E00               	movlw	0
 20475  006EAA  230D               	addwfc	(_loRa+7)& (0+255),f,b
 20476  006EAC  230E               	addwfc	(_loRa+8)& (0+255),f,b
 20477  006EAE  230F               	addwfc	(_loRa+9)& (0+255),f,b
 20478                           
 20479                           ;lorawan.c: 245: if (CNF == confirmed)
 20480  006EB0  0100               	movlb	0	; () banked
 20481  006EB2  05D9               	decf	LORAWAN_Send@confirmed& (0+255),w,b
 20482  006EB4  A4D8               	btfss	status,2,c
 20483  006EB6  D002               	goto	l777
 20484                           
 20485                           ; BSR set to: 0
 20486                           ;lorawan.c: 246: {
 20487                           ;lorawan.c: 247: loRa.lorawanMacStatus.ackRequiredFromNextDownlinkMessage = 1;
 20488  006EB8  0102               	movlb	2	; () banked
 20489  006EBA  8106               	bsf	_loRa& (0+255),0,b
 20490  006EBC                     l777:
 20491                           
 20492                           ;lorawan.c: 248: }
 20493                           ;lorawan.c: 249: loRa.lorawanMacStatus.synchronization = 1;
 20494  006EBC  0102               	movlb	2	; () banked
 20495  006EBE  8B06               	bsf	_loRa& (0+255),5,b
 20496                           
 20497                           ; BSR set to: 2
 20498                           ;lorawan.c: 250: loRa.macStatus.macState = TRANSMISSION_OCCURRING;
 20499  006EC0  5108               	movf	(_loRa+2)& (0+255),w,b
 20500  006EC2  0BF0               	andlw	-16
 20501  006EC4  0901               	iorlw	1
 20502  006EC6  6F08               	movwf	(_loRa+2)& (0+255),b
 20503                           
 20504                           ; BSR set to: 2
 20505                           
 20506                           ; BSR set to: 2
 20507                           ;lorawan.c: 252: else
 20508                           ;lorawan.c: 253: {
 20509                           ;lorawan.c: 254: return MAC_STATE_NOT_READY_FOR_TRANSMISSION;
 20510                           ;	Return value of _LORAWAN_Send is never used
 20511                           
 20512                           ;lorawan.c: 251: }
 20513  006EC8  0012               	return	
 20514  006ECA                     __end_of_LORAWAN_Send:
 20515                           	opt stack 0
 20516                           tosu	equ	0xFFF
 20517                           tosh	equ	0xFFE
 20518                           tosl	equ	0xFFD
 20519                           pclath	equ	0xFFA
 20520                           tblptru	equ	0xFF8
 20521                           tblptrh	equ	0xFF7
 20522                           tblptrl	equ	0xFF6
 20523                           tablat	equ	0xFF5
 20524                           prodh	equ	0xFF4
 20525                           prodl	equ	0xFF3
 20526                           intcon	equ	0xFF2
 20527                           intcon2	equ	0xFF1
 20528                           intcon3	equ	0xFF0
 20529                           indf0	equ	0xFEF
 20530                           postinc0	equ	0xFEE
 20531                           fsr0h	equ	0xFEA
 20532                           fsr0l	equ	0xFE9
 20533                           wreg	equ	0xFE8
 20534                           postinc1	equ	0xFE6
 20535                           postdec1	equ	0xFE5
 20536                           plusw1	equ	0xFE3
 20537                           fsr1h	equ	0xFE2
 20538                           fsr1l	equ	0xFE1
 20539                           indf2	equ	0xFDF
 20540                           postinc2	equ	0xFDE
 20541                           postdec2	equ	0xFDD
 20542                           plusw2	equ	0xFDB
 20543                           fsr2h	equ	0xFDA
 20544                           fsr2l	equ	0xFD9
 20545                           status	equ	0xFD8
 20546                           
 20547 ;; *************** function _LORAWAN_GetMaxPayloadSize *****************
 20548 ;; Defined at:
 20549 ;;		line 1556 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 20550 ;; Parameters:    Size  Location     Type
 20551 ;;		None
 20552 ;; Auto vars:     Size  Location     Type
 20553 ;;  result          1   10[BANK0 ] unsigned char 
 20554 ;;  macCommandsL    1    9[BANK0 ] unsigned char 
 20555 ;; Return value:  Size  Location     Type
 20556 ;;                  1    wreg      unsigned char 
 20557 ;; Registers used:
 20558 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20559 ;; Tracked objects:
 20560 ;;		On entry : 0/0
 20561 ;;		On exit  : 0/0
 20562 ;;		Unchanged: 0/0
 20563 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20564 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20565 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20566 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20567 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20568 ;;Total ram usage:        3 bytes
 20569 ;; Hardware stack levels used:    1
 20570 ;; Hardware stack levels required when called:    8
 20571 ;; This function calls:
 20572 ;;		_CountfOptsLength
 20573 ;; This function is called by:
 20574 ;;		_LORAWAN_Send
 20575 ;;		_AckRetransmissionCallback
 20576 ;; This function uses a non-reentrant model
 20577 ;;
 20578                           
 20579                           	psect	text99
 20580  00825A                     __ptext99:
 20581                           	opt stack 0
 20582  00825A                     _LORAWAN_GetMaxPayloadSize:
 20583                           	opt stack 21
 20584                           
 20585                           ;lorawan.c: 1558: uint8_t result = 0;
 20586                           
 20587                           ;incstack = 0
 20588  00825A  0E00               	movlw	0
 20589  00825C  0100               	movlb	0	; () banked
 20590  00825E  6F6A               	movwf	LORAWAN_GetMaxPayloadSize@result& (0+255),b
 20591                           
 20592                           ; BSR set to: 0
 20593                           ;lorawan.c: 1559: uint8_t macCommandsLength;
 20594                           ;lorawan.c: 1561: macCommandsLength = CountfOptsLength();
 20595  008260  ECCC  F037         	call	_CountfOptsLength	;wreg free
 20596  008264  0100               	movlb	0	; () banked
 20597  008266  6F69               	movwf	LORAWAN_GetMaxPayloadSize@macCommandsLength& (0+255),b
 20598                           
 20599                           ; BSR set to: 0
 20600                           ;lorawan.c: 1563: if (loRa.crtMacCmdIndex == 0)
 20601  008268  0102               	movlb	2	; () banked
 20602  00826A  51AD               	movf	(_loRa+167)& (0+255),w,b
 20603  00826C  A4D8               	btfss	status,2,c
 20604  00826E  D00F               	goto	l1231
 20605                           
 20606                           ; BSR set to: 2
 20607                           ;lorawan.c: 1564: {
 20608                           ;lorawan.c: 1565: result = maxPayloadSize[loRa.currentDataRate];
 20609  008270  51E5               	movf	(_loRa+223)& (0+255),w,b
 20610  008272  0D01               	mullw	1
 20611  008274  0E77               	movlw	low _maxPayloadSize
 20612  008276  24F3               	addwf	prodl,w,c
 20613  008278  6EF6               	movwf	tblptrl,c
 20614  00827A  0EFF               	movlw	high _maxPayloadSize
 20615  00827C  20F4               	addwfc	prodh,w,c
 20616  00827E  6EF7               	movwf	tblptrh,c
 20617  008280                     	if	1	;There are 3 active tblptr bytes
 20618  008280  6AF8               	clrf	tblptru,c
 20619  008282  0E00               	movlw	low (__mediumconst shr (0+16))
 20620  008284  22F8               	addwfc	tblptru,f,c
 20621  008286                     	endif
 20622  008286  0008               	tblrd		*
 20623  008288  CFF5 F06A          	movff	tablat,LORAWAN_GetMaxPayloadSize@result
 20624                           
 20625                           ;lorawan.c: 1566: }
 20626  00828C  D013               	goto	l1232
 20627  00828E                     l1231:
 20628                           
 20629                           ; BSR set to: 2
 20630                           ;lorawan.c: 1567: else
 20631                           ;lorawan.c: 1568: {
 20632                           ;lorawan.c: 1569: result = maxPayloadSize[loRa.currentDataRate] - macCommandsLength ;
 20633                           
 20634                           ; BSR set to: 2
 20635  00828E  51E5               	movf	(_loRa+223)& (0+255),w,b
 20636  008290  0D01               	mullw	1
 20637  008292  0E77               	movlw	low _maxPayloadSize
 20638  008294  24F3               	addwf	prodl,w,c
 20639  008296  6EF6               	movwf	tblptrl,c
 20640  008298  0EFF               	movlw	high _maxPayloadSize
 20641  00829A  20F4               	addwfc	prodh,w,c
 20642  00829C  6EF7               	movwf	tblptrh,c
 20643  00829E                     	if	1	;There are 3 active tblptr bytes
 20644  00829E  6AF8               	clrf	tblptru,c
 20645  0082A0  0E00               	movlw	low (__mediumconst shr (0+16))
 20646  0082A2  22F8               	addwfc	tblptru,f,c
 20647  0082A4                     	endif
 20648  0082A4  0008               	tblrd		*
 20649  0082A6  CFF5 F068          	movff	tablat,??_LORAWAN_GetMaxPayloadSize
 20650  0082AA  0100               	movlb	0	; () banked
 20651  0082AC  5169               	movf	LORAWAN_GetMaxPayloadSize@macCommandsLength& (0+255),w,b
 20652  0082AE  0800               	sublw	0
 20653  0082B0  2568               	addwf	??_LORAWAN_GetMaxPayloadSize& (0+255),w,b
 20654  0082B2  6F6A               	movwf	LORAWAN_GetMaxPayloadSize@result& (0+255),b
 20655  0082B4                     l1232:
 20656                           
 20657                           ;lorawan.c: 1570: }
 20658                           ;lorawan.c: 1572: return result;
 20659                           
 20660                           ; BSR set to: 0
 20661  0082B4  0100               	movlb	0	; () banked
 20662  0082B6  516A               	movf	LORAWAN_GetMaxPayloadSize@result& (0+255),w,b
 20663  0082B8  0012               	return	
 20664  0082BA                     __end_of_LORAWAN_GetMaxPayloadSize:
 20665                           	opt stack 0
 20666                           tosu	equ	0xFFF
 20667                           tosh	equ	0xFFE
 20668                           tosl	equ	0xFFD
 20669                           pclath	equ	0xFFA
 20670                           tblptru	equ	0xFF8
 20671                           tblptrh	equ	0xFF7
 20672                           tblptrl	equ	0xFF6
 20673                           tablat	equ	0xFF5
 20674                           prodh	equ	0xFF4
 20675                           prodl	equ	0xFF3
 20676                           intcon	equ	0xFF2
 20677                           intcon2	equ	0xFF1
 20678                           intcon3	equ	0xFF0
 20679                           indf0	equ	0xFEF
 20680                           postinc0	equ	0xFEE
 20681                           fsr0h	equ	0xFEA
 20682                           fsr0l	equ	0xFE9
 20683                           wreg	equ	0xFE8
 20684                           postinc1	equ	0xFE6
 20685                           postdec1	equ	0xFE5
 20686                           plusw1	equ	0xFE3
 20687                           fsr1h	equ	0xFE2
 20688                           fsr1l	equ	0xFE1
 20689                           indf2	equ	0xFDF
 20690                           postinc2	equ	0xFDE
 20691                           postdec2	equ	0xFDD
 20692                           plusw2	equ	0xFDB
 20693                           fsr2h	equ	0xFDA
 20694                           fsr2l	equ	0xFD9
 20695                           status	equ	0xFD8
 20696                           
 20697 ;; *************** function _AssemblePacket *****************
 20698 ;; Defined at:
 20699 ;;		line 1672 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 20700 ;; Parameters:    Size  Location     Type
 20701 ;;  confirmed       1    wreg     unsigned char 
 20702 ;;  port            1  103[BANK0 ] unsigned char 
 20703 ;;  buffer          2  104[BANK0 ] PTR unsigned char 
 20704 ;;		 -> tosend(5), NULL(0), 
 20705 ;;  bufferLength    2  106[BANK0 ] unsigned int 
 20706 ;; Auto vars:     Size  Location     Type
 20707 ;;  confirmed       1  110[BANK0 ] unsigned char 
 20708 ;;  bufferIndex     1  114[BANK0 ] unsigned char 
 20709 ;;  macCmdIdx       1  113[BANK0 ] unsigned char 
 20710 ;;  fCtrl           1  112[BANK0 ] struct .
 20711 ;;  mhdr            1  111[BANK0 ] struct .
 20712 ;; Return value:  Size  Location     Type
 20713 ;;                  1    wreg      void 
 20714 ;; Registers used:
 20715 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20716 ;; Tracked objects:
 20717 ;;		On entry : 0/0
 20718 ;;		On exit  : 0/0
 20719 ;;		Unchanged: 0/0
 20720 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20721 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20722 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20723 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20724 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20725 ;;Total ram usage:       12 bytes
 20726 ;; Hardware stack levels used:    1
 20727 ;; Hardware stack levels required when called:   12
 20728 ;; This function calls:
 20729 ;;		_AESCmac
 20730 ;;		_AssembleEncryptionBlock
 20731 ;;		_CountfOptsLength
 20732 ;;		_EncryptFRMPayload
 20733 ;;		_FindSmallestDataRate
 20734 ;;		_IncludeMacCommandsResponse
 20735 ;;		_memcpy
 20736 ;;		_memset
 20737 ;; This function is called by:
 20738 ;;		_LORAWAN_Send
 20739 ;; This function uses a non-reentrant model
 20740 ;;
 20741                           
 20742                           	psect	text100
 20743  001E8E                     __ptext100:
 20744                           	opt stack 0
 20745  001E8E                     _AssemblePacket:
 20746                           	opt stack 17
 20747                           
 20748                           ; BSR set to: 0
 20749                           ;incstack = 0
 20750                           ;AssemblePacket@confirmed stored from wreg
 20751  001E8E  0100               	movlb	0	; () banked
 20752  001E90  6FCE               	movwf	AssemblePacket@confirmed& (0+255),b
 20753                           
 20754                           ;lorawan.c: 1674: Mhdr_t mhdr;
 20755                           ;lorawan.c: 1675: uint8_t bufferIndex = 16;
 20756  001E92  0E10               	movlw	16
 20757  001E94  0100               	movlb	0	; () banked
 20758  001E96  6FD2               	movwf	AssemblePacket@bufferIndex& (0+255),b
 20759                           
 20760                           ;lorawan.c: 1676: FCtrl_t fCtrl;
 20761                           ;lorawan.c: 1677: uint8_t macCmdIdx = 0;
 20762  001E98  0E00               	movlw	0
 20763  001E9A  6FD1               	movwf	AssemblePacket@macCmdIdx& (0+255),b
 20764                           
 20765                           ; BSR set to: 0
 20766                           ;lorawan.c: 1679: memset (&mhdr, 0, sizeof (mhdr) );
 20767  001E9C  0ECF               	movlw	low AssemblePacket@mhdr
 20768  001E9E  6F60               	movwf	memset@p1& (0+255),b
 20769  001EA0  0E00               	movlw	high AssemblePacket@mhdr
 20770  001EA2  6F61               	movwf	(memset@p1+1)& (0+255),b
 20771  001EA4  0E00               	movlw	0
 20772  001EA6  6F63               	movwf	(memset@c+1)& (0+255),b
 20773  001EA8  0E00               	movlw	0
 20774  001EAA  6F62               	movwf	memset@c& (0+255),b
 20775  001EAC  0E00               	movlw	0
 20776  001EAE  6F65               	movwf	(memset@n+1)& (0+255),b
 20777  001EB0  0E01               	movlw	1
 20778  001EB2  6F64               	movwf	memset@n& (0+255),b
 20779  001EB4  ECD6  F046         	call	_memset	;wreg free
 20780                           
 20781                           ;lorawan.c: 1680: memset (&macBuffer[0], 0, sizeof (macBuffer) );
 20782  001EB8  0E8F               	movlw	low _macBuffer
 20783  001EBA  0100               	movlb	0	; () banked
 20784  001EBC  6F60               	movwf	memset@p1& (0+255),b
 20785  001EBE  0E06               	movlw	high _macBuffer
 20786  001EC0  6F61               	movwf	(memset@p1+1)& (0+255),b
 20787  001EC2  0E00               	movlw	0
 20788  001EC4  6F63               	movwf	(memset@c+1)& (0+255),b
 20789  001EC6  0E00               	movlw	0
 20790  001EC8  6F62               	movwf	memset@c& (0+255),b
 20791  001ECA  0E01               	movlw	1
 20792  001ECC  6F65               	movwf	(memset@n+1)& (0+255),b
 20793  001ECE  0E0F               	movlw	15
 20794  001ED0  6F64               	movwf	memset@n& (0+255),b
 20795  001ED2  ECD6  F046         	call	_memset	;wreg free
 20796                           
 20797                           ;lorawan.c: 1681: memset (aesBuffer, 0, sizeof (aesBuffer) );
 20798  001ED6  0EA2               	movlw	low _aesBuffer
 20799  001ED8  0100               	movlb	0	; () banked
 20800  001EDA  6F60               	movwf	memset@p1& (0+255),b
 20801  001EDC  0E03               	movlw	high _aesBuffer
 20802  001EDE  6F61               	movwf	(memset@p1+1)& (0+255),b
 20803  001EE0  0E00               	movlw	0
 20804  001EE2  6F63               	movwf	(memset@c+1)& (0+255),b
 20805  001EE4  0E00               	movlw	0
 20806  001EE6  6F62               	movwf	memset@c& (0+255),b
 20807  001EE8  0E00               	movlw	0
 20808  001EEA  6F65               	movwf	(memset@n+1)& (0+255),b
 20809  001EEC  0E10               	movlw	16
 20810  001EEE  6F64               	movwf	memset@n& (0+255),b
 20811  001EF0  ECD6  F046         	call	_memset	;wreg free
 20812                           
 20813                           ;lorawan.c: 1683: if (confirmed == 1)
 20814  001EF4  0100               	movlb	0	; () banked
 20815  001EF6  05CE               	decf	AssemblePacket@confirmed& (0+255),w,b
 20816  001EF8  A4D8               	btfss	status,2,c
 20817  001EFA  D007               	goto	l1261
 20818                           
 20819                           ; BSR set to: 0
 20820                           ;lorawan.c: 1684: {
 20821                           ;lorawan.c: 1685: mhdr.bits.mType = FRAME_TYPE_DATA_CONFIRMED_UP;
 20822  001EFC  51CF               	movf	AssemblePacket@mhdr& (0+255),w,b
 20823  001EFE  0B1F               	andlw	-225
 20824  001F00  0980               	iorlw	128
 20825  001F02  6FCF               	movwf	AssemblePacket@mhdr& (0+255),b
 20826                           
 20827                           ; BSR set to: 0
 20828                           ;lorawan.c: 1686: loRa.lorawanMacStatus.ackRequiredFromNextDownlinkMessage = 1;
 20829  001F04  0102               	movlb	2	; () banked
 20830  001F06  8106               	bsf	_loRa& (0+255),0,b
 20831                           
 20832                           ;lorawan.c: 1687: }
 20833  001F08  D005               	goto	l1262
 20834  001F0A                     l1261:
 20835                           
 20836                           ;lorawan.c: 1688: else
 20837                           ;lorawan.c: 1689: {
 20838                           ;lorawan.c: 1690: mhdr.bits.mType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 20839                           
 20840                           ; BSR set to: 2
 20841  001F0A  0100               	movlb	0	; () banked
 20842  001F0C  51CF               	movf	AssemblePacket@mhdr& (0+255),w,b
 20843  001F0E  0B1F               	andlw	-225
 20844  001F10  0940               	iorlw	64
 20845  001F12  6FCF               	movwf	AssemblePacket@mhdr& (0+255),b
 20846  001F14                     l1262:
 20847                           
 20848                           ;lorawan.c: 1691: }
 20849                           ;lorawan.c: 1692: mhdr.bits.major = 0;
 20850  001F14  0EFC               	movlw	-4
 20851  001F16  0100               	movlb	0	; () banked
 20852  001F18  17CF               	andwf	AssemblePacket@mhdr& (0+255),f,b
 20853                           
 20854                           ; BSR set to: 0
 20855                           ;lorawan.c: 1693: mhdr.bits.rfu = 0;
 20856  001F1A  95CF               	bcf	AssemblePacket@mhdr& (0+255),2,b
 20857  001F1C  97CF               	bcf	AssemblePacket@mhdr& (0+255),3,b
 20858  001F1E  99CF               	bcf	AssemblePacket@mhdr& (0+255),4,b
 20859                           
 20860                           ; BSR set to: 0
 20861                           ;lorawan.c: 1694: macBuffer[bufferIndex++] = mhdr.value;
 20862  001F20  51D2               	movf	AssemblePacket@bufferIndex& (0+255),w,b
 20863  001F22  0D01               	mullw	1
 20864  001F24  0E8F               	movlw	low _macBuffer
 20865  001F26  24F3               	addwf	prodl,w,c
 20866  001F28  6ED9               	movwf	fsr2l,c
 20867  001F2A  0E06               	movlw	high _macBuffer
 20868  001F2C  20F4               	addwfc	prodh,w,c
 20869  001F2E  6EDA               	movwf	fsr2h,c
 20870  001F30  C0CF  FFDF         	movff	AssemblePacket@mhdr,indf2
 20871                           
 20872                           ; BSR set to: 0
 20873  001F34  2BD2               	incf	AssemblePacket@bufferIndex& (0+255),f,b
 20874                           
 20875                           ; BSR set to: 0
 20876                           ;lorawan.c: 1696: memcpy (&macBuffer[bufferIndex], loRa.activationParameters.deviceAddre
      +                          ss.buffer, sizeof (loRa.activationParameters.deviceAddress.buffer) );
 20877  001F36  51D2               	movf	AssemblePacket@bufferIndex& (0+255),w,b
 20878  001F38  0D01               	mullw	1
 20879  001F3A  0E8F               	movlw	low _macBuffer
 20880  001F3C  24F3               	addwf	prodl,w,c
 20881  001F3E  6F60               	movwf	memcpy@d1& (0+255),b
 20882  001F40  0E06               	movlw	high _macBuffer
 20883  001F42  20F4               	addwfc	prodh,w,c
 20884  001F44  6F61               	movwf	(memcpy@d1+1)& (0+255),b
 20885  001F46  0E24               	movlw	low (_loRa+30)
 20886  001F48  6F62               	movwf	memcpy@s1& (0+255),b
 20887  001F4A  0E02               	movlw	high (_loRa+30)
 20888  001F4C  6F63               	movwf	(memcpy@s1+1)& (0+255),b
 20889  001F4E  0E00               	movlw	0
 20890  001F50  6F65               	movwf	(memcpy@n+1)& (0+255),b
 20891  001F52  0E04               	movlw	4
 20892  001F54  6F64               	movwf	memcpy@n& (0+255),b
 20893  001F56  EC5D  F041         	call	_memcpy	;wreg free
 20894                           
 20895                           ;lorawan.c: 1697: bufferIndex = bufferIndex + sizeof(loRa.activationParameters.deviceAdd
      +                          ress.buffer);
 20896  001F5A  0100               	movlb	0	; () banked
 20897  001F5C  51D2               	movf	AssemblePacket@bufferIndex& (0+255),w,b
 20898  001F5E  0F04               	addlw	4
 20899  001F60  6FD2               	movwf	AssemblePacket@bufferIndex& (0+255),b
 20900                           
 20901                           ; BSR set to: 0
 20902                           ;lorawan.c: 1699: fCtrl.value = 0;
 20903  001F62  0E00               	movlw	0
 20904  001F64  6FD0               	movwf	AssemblePacket@fCtrl& (0+255),b
 20905                           
 20906                           ; BSR set to: 0
 20907                           ;lorawan.c: 1701: if (loRa.macStatus.adr == 1)
 20908  001F66  0102               	movlb	2	; () banked
 20909  001F68  AD08               	btfss	(_loRa+2)& (0+255),6,b
 20910  001F6A  D047               	goto	l1271
 20911                           
 20912                           ; BSR set to: 2
 20913                           ;lorawan.c: 1702: {
 20914                           ;lorawan.c: 1703: fCtrl.adr = 1;
 20915  001F6C  0100               	movlb	0	; () banked
 20916  001F6E  8FD0               	bsf	AssemblePacket@fCtrl& (0+255),7,b
 20917                           
 20918                           ; BSR set to: 0
 20919                           ;lorawan.c: 1704: if(loRa.currentDataRate > loRa.minDataRate)
 20920  001F70  0102               	movlb	2	; () banked
 20921  001F72  51E5               	movf	(_loRa+223)& (0+255),w,b
 20922  001F74  5DF1               	subwf	(_loRa+235)& (0+255),w,b
 20923  001F76  B0D8               	btfsc	status,0,c
 20924  001F78  D03F               	goto	l1264
 20925                           
 20926                           ; BSR set to: 2
 20927                           ;lorawan.c: 1705: {
 20928                           ;lorawan.c: 1706: fCtrl.adrAckReq = 1;
 20929  001F7A  0100               	movlb	0	; () banked
 20930  001F7C  8DD0               	bsf	AssemblePacket@fCtrl& (0+255),6,b
 20931                           
 20932                           ;lorawan.c: 1707: loRa.lorawanMacStatus.adrAckRequest = 1;
 20933  001F7E  0102               	movlb	2	; () banked
 20934  001F80  8906               	bsf	_loRa& (0+255),4,b
 20935                           
 20936                           ; BSR set to: 2
 20937                           ;lorawan.c: 1708: loRa.adrAckCnt ++;
 20938  001F82  4BD6               	infsnz	(_loRa+208)& (0+255),f,b
 20939  001F84  2BD7               	incf	(_loRa+209)& (0+255),f,b
 20940                           
 20941                           ; BSR set to: 2
 20942                           ;lorawan.c: 1710: if ( loRa.adrAckCnt == loRa.protocolParameters.adrAckLimit )
 20943  001F86  51A8               	movf	(_loRa+162)& (0+255),w,b
 20944  001F88  0100               	movlb	0	; () banked
 20945  001F8A  6FCC               	movwf	??_AssemblePacket& (0+255),b
 20946  001F8C  6BCD               	clrf	(??_AssemblePacket+1)& (0+255),b
 20947  001F8E  0102               	movlb	2	; () banked
 20948  001F90  51D6               	movf	(_loRa+208)& (0+255),w,b
 20949  001F92  0100               	movlb	0	; () banked
 20950  001F94  19CC               	xorwf	??_AssemblePacket& (0+255),w,b
 20951  001F96  E10C               	bnz	l10411
 20952  001F98  0102               	movlb	2	; () banked
 20953  001F9A  51D7               	movf	(_loRa+209)& (0+255),w,b
 20954  001F9C  0100               	movlb	0	; () banked
 20955  001F9E  19CD               	xorwf	(??_AssemblePacket+1)& (0+255),w,b
 20956  001FA0  A4D8               	btfss	status,2,c
 20957  001FA2  D006               	goto	l1265
 20958                           
 20959                           ; BSR set to: 0
 20960                           ;lorawan.c: 1711: {
 20961                           ;lorawan.c: 1712: loRa.counterAdrAckDelay = 0;
 20962  001FA4  0E00               	movlw	0
 20963  001FA6  0102               	movlb	2	; () banked
 20964  001FA8  6FF4               	movwf	(_loRa+238)& (0+255),b
 20965  001FAA  D023               	goto	l10423
 20966  001FAC                     l10409:
 20967                           
 20968                           ; BSR set to: 0
 20969                           ;lorawan.c: 1714: loRa.lorawanMacStatus.adrAckRequest = 0;
 20970  001FAC  0102               	movlb	2	; () banked
 20971  001FAE  D024               	goto	l1264
 20972  001FB0                     l1265:
 20973  001FB0                     l10411:
 20974                           
 20975                           ;lorawan.c: 1716: else
 20976                           ;lorawan.c: 1717: {
 20977                           ;lorawan.c: 1718: if (loRa.adrAckCnt > loRa.protocolParameters.adrAckLimit)
 20978  001FB0  0102               	movlb	2	; () banked
 20979  001FB2  51A8               	movf	(_loRa+162)& (0+255),w,b
 20980  001FB4  0100               	movlb	0	; () banked
 20981  001FB6  6FCC               	movwf	??_AssemblePacket& (0+255),b
 20982  001FB8  6BCD               	clrf	(??_AssemblePacket+1)& (0+255),b
 20983  001FBA  0102               	movlb	2	; () banked
 20984  001FBC  51D6               	movf	(_loRa+208)& (0+255),w,b
 20985  001FBE  0100               	movlb	0	; () banked
 20986  001FC0  5DCC               	subwf	??_AssemblePacket& (0+255),w,b
 20987  001FC2  0102               	movlb	2	; () banked
 20988  001FC4  51D7               	movf	(_loRa+209)& (0+255),w,b
 20989  001FC6  0100               	movlb	0	; () banked
 20990  001FC8  59CD               	subwfb	(??_AssemblePacket+1)& (0+255),w,b
 20991  001FCA  B0D8               	btfsc	status,0,c
 20992  001FCC  D013               	goto	l1267
 20993                           
 20994                           ; BSR set to: 0
 20995                           ;lorawan.c: 1719: {
 20996                           ;lorawan.c: 1721: loRa.counterAdrAckDelay ++ ;
 20997  001FCE  0102               	movlb	2	; () banked
 20998  001FD0  2BF4               	incf	(_loRa+238)& (0+255),f,b
 20999                           
 21000                           ; BSR set to: 2
 21001                           ;lorawan.c: 1724: if (loRa.counterAdrAckDelay > loRa.protocolParameters.adrAckDelay)
 21002  001FD2  51F4               	movf	(_loRa+238)& (0+255),w,b
 21003  001FD4  5DA9               	subwf	(_loRa+163)& (0+255),w,b
 21004  001FD6  B0D8               	btfsc	status,0,c
 21005  001FD8  D010               	goto	l1271
 21006                           
 21007                           ; BSR set to: 2
 21008                           ;lorawan.c: 1725: {
 21009                           ;lorawan.c: 1726: loRa.counterAdrAckDelay = 0;
 21010  001FDA  0E00               	movlw	0
 21011  001FDC  6FF4               	movwf	(_loRa+238)& (0+255),b
 21012                           
 21013                           ; BSR set to: 2
 21014                           ;lorawan.c: 1728: if(0 == FindSmallestDataRate())
 21015  001FDE  ECB2  F035         	call	_FindSmallestDataRate	;wreg free
 21016  001FE2  0900               	iorlw	0
 21017  001FE4  A4D8               	btfss	status,2,c
 21018  001FE6  D009               	goto	l1271
 21019                           
 21020                           ;lorawan.c: 1729: {
 21021                           ;lorawan.c: 1731: loRa.adrAckCnt = 0;
 21022  001FE8  0E00               	movlw	0
 21023  001FEA  0102               	movlb	2	; () banked
 21024  001FEC  6FD7               	movwf	(_loRa+209)& (0+255),b
 21025  001FEE  0E00               	movlw	0
 21026  001FF0  6FD6               	movwf	(_loRa+208)& (0+255),b
 21027  001FF2                     l10423:
 21028                           
 21029                           ; BSR set to: 2
 21030                           ;lorawan.c: 1732: fCtrl.adrAckReq = 0;
 21031  001FF2  0100               	movlb	0	; () banked
 21032  001FF4                     l1267:
 21033                           
 21034                           ; BSR set to: 0
 21035                           ;lorawan.c: 1737: else
 21036                           ;lorawan.c: 1738: {
 21037                           ;lorawan.c: 1739: fCtrl.adrAckReq = 0;
 21038  001FF4  9DD0               	bcf	AssemblePacket@fCtrl& (0+255),6,b
 21039  001FF6  D7DA               	goto	l10409
 21040  001FF8                     l1264:
 21041                           
 21042                           ; BSR set to: 2
 21043                           ;lorawan.c: 1744: else
 21044                           ;lorawan.c: 1745: {
 21045                           ;lorawan.c: 1746: loRa.lorawanMacStatus.adrAckRequest = 0;
 21046  001FF8  9906               	bcf	_loRa& (0+255),4,b
 21047  001FFA                     l1271:
 21048                           
 21049                           ;lorawan.c: 1747: }
 21050                           ;lorawan.c: 1748: }
 21051                           ;lorawan.c: 1750: if (loRa.lorawanMacStatus.ackRequiredFromNextUplinkMessage == 1)
 21052                           
 21053                           ; BSR set to: 2
 21054  001FFA  0102               	movlb	2	; () banked
 21055  001FFC  A306               	btfss	_loRa& (0+255),1,b
 21056  001FFE  D004               	goto	l1272
 21057                           
 21058                           ; BSR set to: 2
 21059                           ;lorawan.c: 1751: {
 21060                           ;lorawan.c: 1752: fCtrl.ack = 1;
 21061  002000  0100               	movlb	0	; () banked
 21062  002002  8BD0               	bsf	AssemblePacket@fCtrl& (0+255),5,b
 21063                           
 21064                           ;lorawan.c: 1753: loRa.lorawanMacStatus.ackRequiredFromNextUplinkMessage = 0;
 21065  002004  0102               	movlb	2	; () banked
 21066  002006  9306               	bcf	_loRa& (0+255),1,b
 21067  002008                     l1272:
 21068                           
 21069                           ; BSR set to: 2
 21070                           ;lorawan.c: 1754: }
 21071                           ;lorawan.c: 1756: fCtrl.fPending = 0;
 21072  002008  0100               	movlb	0	; () banked
 21073  00200A  99D0               	bcf	AssemblePacket@fCtrl& (0+255),4,b
 21074                           
 21075                           ; BSR set to: 0
 21076                           ;lorawan.c: 1758: if ( (loRa.crtMacCmdIndex == 0) || (bufferLength == 0) )
 21077  00200C  0102               	movlb	2	; () banked
 21078  00200E  51AD               	movf	(_loRa+167)& (0+255),w,b
 21079  002010  B4D8               	btfsc	status,2,c
 21080  002012  D005               	goto	u10180
 21081                           
 21082                           ; BSR set to: 2
 21083  002014  0100               	movlb	0	; () banked
 21084  002016  51CA               	movf	AssemblePacket@bufferLength& (0+255),w,b
 21085  002018  11CB               	iorwf	(AssemblePacket@bufferLength+1)& (0+255),w,b
 21086  00201A  A4D8               	btfss	status,2,c
 21087  00201C  D006               	goto	l1273
 21088  00201E                     u10180:
 21089                           
 21090                           ;lorawan.c: 1759: {
 21091                           ;lorawan.c: 1760: fCtrl.fOptsLen = 0;
 21092  00201E  0100               	movlb	0	; () banked
 21093  002020  91D0               	bcf	AssemblePacket@fCtrl& (0+255),0,b
 21094  002022  93D0               	bcf	AssemblePacket@fCtrl& (0+255),1,b
 21095  002024  95D0               	bcf	AssemblePacket@fCtrl& (0+255),2,b
 21096  002026  97D0               	bcf	AssemblePacket@fCtrl& (0+255),3,b
 21097                           
 21098                           ;lorawan.c: 1761: }
 21099  002028  D009               	goto	l1276
 21100  00202A                     l1273:
 21101                           
 21102                           ; BSR set to: 0
 21103                           ;lorawan.c: 1763: else
 21104                           ;lorawan.c: 1764: {
 21105                           ;lorawan.c: 1765: fCtrl.fOptsLen = CountfOptsLength();
 21106                           
 21107                           ; BSR set to: 0
 21108  00202A  ECCC  F037         	call	_CountfOptsLength	;wreg free
 21109  00202E  0100               	movlb	0	; () banked
 21110  002030  6FCC               	movwf	??_AssemblePacket& (0+255),b
 21111  002032  51D0               	movf	AssemblePacket@fCtrl& (0+255),w,b
 21112  002034  19CC               	xorwf	??_AssemblePacket& (0+255),w,b
 21113  002036  0BF0               	andlw	-16
 21114  002038  19CC               	xorwf	??_AssemblePacket& (0+255),w,b
 21115  00203A  6FD0               	movwf	AssemblePacket@fCtrl& (0+255),b
 21116  00203C                     l1276:
 21117                           
 21118                           ; BSR set to: 0
 21119                           ;lorawan.c: 1766: }
 21120                           ;lorawan.c: 1767: macBuffer[bufferIndex++] = fCtrl.value;
 21121                           
 21122                           ; BSR set to: 0
 21123  00203C  51D2               	movf	AssemblePacket@bufferIndex& (0+255),w,b
 21124  00203E  0D01               	mullw	1
 21125  002040  0E8F               	movlw	low _macBuffer
 21126  002042  24F3               	addwf	prodl,w,c
 21127  002044  6ED9               	movwf	fsr2l,c
 21128  002046  0E06               	movlw	high _macBuffer
 21129  002048  20F4               	addwfc	prodh,w,c
 21130  00204A  6EDA               	movwf	fsr2h,c
 21131  00204C  C0D0  FFDF         	movff	AssemblePacket@fCtrl,indf2
 21132                           
 21133                           ; BSR set to: 0
 21134  002050  2BD2               	incf	AssemblePacket@bufferIndex& (0+255),f,b
 21135                           
 21136                           ; BSR set to: 0
 21137                           ;lorawan.c: 1769: memcpy (&macBuffer[bufferIndex], &loRa.fCntUp.members.valueLow, sizeof
      +                           (loRa.fCntUp.members.valueLow) );
 21138  002052  51D2               	movf	AssemblePacket@bufferIndex& (0+255),w,b
 21139  002054  0D01               	mullw	1
 21140  002056  0E8F               	movlw	low _macBuffer
 21141  002058  24F3               	addwf	prodl,w,c
 21142  00205A  6F60               	movwf	memcpy@d1& (0+255),b
 21143  00205C  0E06               	movlw	high _macBuffer
 21144  00205E  20F4               	addwfc	prodh,w,c
 21145  002060  6F61               	movwf	(memcpy@d1+1)& (0+255),b
 21146  002062  0E0C               	movlw	low (_loRa+6)
 21147  002064  6F62               	movwf	memcpy@s1& (0+255),b
 21148  002066  0E02               	movlw	high (_loRa+6)
 21149  002068  6F63               	movwf	(memcpy@s1+1)& (0+255),b
 21150  00206A  0E00               	movlw	0
 21151  00206C  6F65               	movwf	(memcpy@n+1)& (0+255),b
 21152  00206E  0E02               	movlw	2
 21153  002070  6F64               	movwf	memcpy@n& (0+255),b
 21154  002072  EC5D  F041         	call	_memcpy	;wreg free
 21155                           
 21156                           ;lorawan.c: 1771: bufferIndex = bufferIndex + sizeof(loRa.fCntUp.members.valueLow);
 21157  002076  0100               	movlb	0	; () banked
 21158  002078  51D2               	movf	AssemblePacket@bufferIndex& (0+255),w,b
 21159  00207A  0F02               	addlw	2
 21160  00207C  6FD2               	movwf	AssemblePacket@bufferIndex& (0+255),b
 21161                           
 21162                           ; BSR set to: 0
 21163                           ;lorawan.c: 1773: if ( (loRa.crtMacCmdIndex != 0) && (bufferLength != 0) )
 21164  00207E  0102               	movlb	2	; () banked
 21165  002080  51AD               	movf	(_loRa+167)& (0+255),w,b
 21166  002082  B4D8               	btfsc	status,2,c
 21167  002084  D011               	goto	l1277
 21168                           
 21169                           ; BSR set to: 2
 21170  002086  0100               	movlb	0	; () banked
 21171  002088  51CA               	movf	AssemblePacket@bufferLength& (0+255),w,b
 21172  00208A  11CB               	iorwf	(AssemblePacket@bufferLength+1)& (0+255),w,b
 21173  00208C  B4D8               	btfsc	status,2,c
 21174  00208E  D00C               	goto	l1277
 21175                           
 21176                           ; BSR set to: 0
 21177                           ;lorawan.c: 1774: {
 21178                           ;lorawan.c: 1775: IncludeMacCommandsResponse (macBuffer, &bufferIndex, 1);
 21179  002090  0E8F               	movlw	low _macBuffer
 21180  002092  6F60               	movwf	IncludeMacCommandsResponse@macBuffer& (0+255),b
 21181  002094  0E06               	movlw	high _macBuffer
 21182  002096  6F61               	movwf	(IncludeMacCommandsResponse@macBuffer+1)& (0+255),b
 21183  002098  0ED2               	movlw	low AssemblePacket@bufferIndex
 21184  00209A  6F62               	movwf	IncludeMacCommandsResponse@pBufferIndex& (0+255),b
 21185  00209C  0E00               	movlw	high AssemblePacket@bufferIndex
 21186  00209E  6F63               	movwf	(IncludeMacCommandsResponse@pBufferIndex+1)& (0+255),b
 21187  0020A0  0E01               	movlw	1
 21188  0020A2  6F64               	movwf	IncludeMacCommandsResponse@bIncludeInFopts& (0+255),b
 21189  0020A4  EC16  F00D         	call	_IncludeMacCommandsResponse	;wreg free
 21190  0020A8                     l1277:
 21191                           
 21192                           ;lorawan.c: 1776: }
 21193                           ;lorawan.c: 1778: macBuffer[bufferIndex++] = port;
 21194  0020A8  0100               	movlb	0	; () banked
 21195  0020AA  51D2               	movf	AssemblePacket@bufferIndex& (0+255),w,b
 21196  0020AC  0D01               	mullw	1
 21197  0020AE  0E8F               	movlw	low _macBuffer
 21198  0020B0  24F3               	addwf	prodl,w,c
 21199  0020B2  6ED9               	movwf	fsr2l,c
 21200  0020B4  0E06               	movlw	high _macBuffer
 21201  0020B6  20F4               	addwfc	prodh,w,c
 21202  0020B8  6EDA               	movwf	fsr2h,c
 21203  0020BA  C0C7  FFDF         	movff	AssemblePacket@port,indf2
 21204                           
 21205                           ; BSR set to: 0
 21206  0020BE  2BD2               	incf	AssemblePacket@bufferIndex& (0+255),f,b
 21207                           
 21208                           ; BSR set to: 0
 21209                           ;lorawan.c: 1780: if (bufferLength != 0)
 21210  0020C0  51CA               	movf	AssemblePacket@bufferLength& (0+255),w,b
 21211  0020C2  11CB               	iorwf	(AssemblePacket@bufferLength+1)& (0+255),w,b
 21212  0020C4  B4D8               	btfsc	status,2,c
 21213  0020C6  D035               	goto	l1278
 21214                           
 21215                           ; BSR set to: 0
 21216                           ;lorawan.c: 1781: {
 21217                           ;lorawan.c: 1782: memcpy (&macBuffer[bufferIndex], buffer, bufferLength);
 21218  0020C8  51D2               	movf	AssemblePacket@bufferIndex& (0+255),w,b
 21219  0020CA  0D01               	mullw	1
 21220  0020CC  0E8F               	movlw	low _macBuffer
 21221  0020CE  24F3               	addwf	prodl,w,c
 21222  0020D0  6F60               	movwf	memcpy@d1& (0+255),b
 21223  0020D2  0E06               	movlw	high _macBuffer
 21224  0020D4  20F4               	addwfc	prodh,w,c
 21225  0020D6  6F61               	movwf	(memcpy@d1+1)& (0+255),b
 21226  0020D8  C0C8  F062         	movff	AssemblePacket@buffer,memcpy@s1
 21227  0020DC  C0C9  F063         	movff	AssemblePacket@buffer+1,memcpy@s1+1
 21228  0020E0  C0CA  F064         	movff	AssemblePacket@bufferLength,memcpy@n
 21229  0020E4  C0CB  F065         	movff	AssemblePacket@bufferLength+1,memcpy@n+1
 21230  0020E8  EC5D  F041         	call	_memcpy	;wreg free
 21231                           
 21232                           ;lorawan.c: 1783: EncryptFRMPayload (buffer, bufferLength, 0, loRa.fCntUp.value, loRa.ac
      +                          tivationParameters.applicationSessionKey, bufferIndex, macBuffer, 0);
 21233  0020EC  C0C8  F091         	movff	AssemblePacket@buffer,EncryptFRMPayload@buffer
 21234  0020F0  C0C9  F092         	movff	AssemblePacket@buffer+1,EncryptFRMPayload@buffer+1
 21235  0020F4  C0CA  F093         	movff	AssemblePacket@bufferLength,EncryptFRMPayload@bufferLength
 21236  0020F8  0E00               	movlw	0
 21237  0020FA  0100               	movlb	0	; () banked
 21238  0020FC  6F94               	movwf	EncryptFRMPayload@dir& (0+255),b
 21239  0020FE  C20C  F095         	movff	_loRa+6,EncryptFRMPayload@frameCounter
 21240  002102  C20D  F096         	movff	_loRa+7,EncryptFRMPayload@frameCounter+1
 21241  002106  C20E  F097         	movff	_loRa+8,EncryptFRMPayload@frameCounter+2
 21242  00210A  C20F  F098         	movff	_loRa+9,EncryptFRMPayload@frameCounter+3
 21243  00210E  0E38               	movlw	low (_loRa+50)
 21244  002110  6F99               	movwf	EncryptFRMPayload@key& (0+255),b
 21245  002112  0E02               	movlw	high (_loRa+50)
 21246  002114  6F9A               	movwf	(EncryptFRMPayload@key+1)& (0+255),b
 21247  002116  C0D2  F09B         	movff	AssemblePacket@bufferIndex,EncryptFRMPayload@macBufferIndex
 21248  00211A  0E8F               	movlw	low _macBuffer
 21249  00211C  6F9C               	movwf	EncryptFRMPayload@bufferToBeEncrypted& (0+255),b
 21250  00211E  0E06               	movlw	high _macBuffer
 21251  002120  6F9D               	movwf	(EncryptFRMPayload@bufferToBeEncrypted+1)& (0+255),b
 21252  002122  0E00               	movlw	0
 21253  002124  6F9E               	movwf	EncryptFRMPayload@multicastStatus& (0+255),b
 21254  002126  ECB0  F027         	call	_EncryptFRMPayload	;wreg free
 21255                           
 21256                           ;lorawan.c: 1784: bufferIndex = bufferIndex + bufferLength;
 21257  00212A  0100               	movlb	0	; () banked
 21258  00212C  51D2               	movf	AssemblePacket@bufferIndex& (0+255),w,b
 21259  00212E  25CA               	addwf	AssemblePacket@bufferLength& (0+255),w,b
 21260  002130  D033               	goto	L11
 21261  002132                     l1278:
 21262                           
 21263                           ; BSR set to: 0
 21264                           ;lorawan.c: 1786: else if ( (loRa.crtMacCmdIndex > 0) )
 21265                           
 21266                           ; BSR set to: 0
 21267  002132  0102               	movlb	2	; () banked
 21268  002134  51AD               	movf	(_loRa+167)& (0+255),w,b
 21269  002136  B4D8               	btfsc	status,2,c
 21270  002138  D030               	goto	l1280
 21271                           
 21272                           ; BSR set to: 2
 21273                           ;lorawan.c: 1787: {
 21274                           ;lorawan.c: 1790: IncludeMacCommandsResponse (radioBuffer, &macCmdIdx, 0 );
 21275  00213A  0E80               	movlw	low _radioBuffer
 21276  00213C  0100               	movlb	0	; () banked
 21277  00213E  6F60               	movwf	IncludeMacCommandsResponse@macBuffer& (0+255),b
 21278  002140  0E05               	movlw	high _radioBuffer
 21279  002142  6F61               	movwf	(IncludeMacCommandsResponse@macBuffer+1)& (0+255),b
 21280  002144  0ED1               	movlw	low AssemblePacket@macCmdIdx
 21281  002146  6F62               	movwf	IncludeMacCommandsResponse@pBufferIndex& (0+255),b
 21282  002148  0E00               	movlw	high AssemblePacket@macCmdIdx
 21283  00214A  6F63               	movwf	(IncludeMacCommandsResponse@pBufferIndex+1)& (0+255),b
 21284  00214C  0E00               	movlw	0
 21285  00214E  6F64               	movwf	IncludeMacCommandsResponse@bIncludeInFopts& (0+255),b
 21286  002150  EC16  F00D         	call	_IncludeMacCommandsResponse	;wreg free
 21287                           
 21288                           ;lorawan.c: 1791: EncryptFRMPayload (radioBuffer, macCmdIdx, 0, loRa.fCntUp.value, loRa.
      +                          activationParameters.networkSessionKey, bufferIndex, macBuffer, 0);
 21289  002154  0E80               	movlw	low _radioBuffer
 21290  002156  0100               	movlb	0	; () banked
 21291  002158  6F91               	movwf	EncryptFRMPayload@buffer& (0+255),b
 21292  00215A  0E05               	movlw	high _radioBuffer
 21293  00215C  6F92               	movwf	(EncryptFRMPayload@buffer+1)& (0+255),b
 21294  00215E  C0D1  F093         	movff	AssemblePacket@macCmdIdx,EncryptFRMPayload@bufferLength
 21295  002162  0E00               	movlw	0
 21296  002164  6F94               	movwf	EncryptFRMPayload@dir& (0+255),b
 21297  002166  C20C  F095         	movff	_loRa+6,EncryptFRMPayload@frameCounter
 21298  00216A  C20D  F096         	movff	_loRa+7,EncryptFRMPayload@frameCounter+1
 21299  00216E  C20E  F097         	movff	_loRa+8,EncryptFRMPayload@frameCounter+2
 21300  002172  C20F  F098         	movff	_loRa+9,EncryptFRMPayload@frameCounter+3
 21301  002176  0E28               	movlw	low (_loRa+34)
 21302  002178  6F99               	movwf	EncryptFRMPayload@key& (0+255),b
 21303  00217A  0E02               	movlw	high (_loRa+34)
 21304  00217C  6F9A               	movwf	(EncryptFRMPayload@key+1)& (0+255),b
 21305  00217E  C0D2  F09B         	movff	AssemblePacket@bufferIndex,EncryptFRMPayload@macBufferIndex
 21306  002182  0E8F               	movlw	low _macBuffer
 21307  002184  6F9C               	movwf	EncryptFRMPayload@bufferToBeEncrypted& (0+255),b
 21308  002186  0E06               	movlw	high _macBuffer
 21309  002188  6F9D               	movwf	(EncryptFRMPayload@bufferToBeEncrypted+1)& (0+255),b
 21310  00218A  0E00               	movlw	0
 21311  00218C  6F9E               	movwf	EncryptFRMPayload@multicastStatus& (0+255),b
 21312  00218E  ECB0  F027         	call	_EncryptFRMPayload	;wreg free
 21313                           
 21314                           ;lorawan.c: 1792: bufferIndex = bufferIndex + macCmdIdx;
 21315  002192  0100               	movlb	0	; () banked
 21316  002194  51D2               	movf	AssemblePacket@bufferIndex& (0+255),w,b
 21317  002196  25D1               	addwf	AssemblePacket@macCmdIdx& (0+255),w,b
 21318  002198                     L11:
 21319  002198  6FD2               	movwf	AssemblePacket@bufferIndex& (0+255),b
 21320  00219A                     l1280:
 21321                           
 21322                           ;lorawan.c: 1793: }
 21323                           ;lorawan.c: 1795: AssembleEncryptionBlock (0, loRa.fCntUp.value, bufferIndex - 16, 0x49,
      +                           0);
 21324                           
 21325                           ; BSR set to: 0
 21326                           
 21327                           ; BSR set to: 0
 21328  00219A  C20C  F06B         	movff	_loRa+6,AssembleEncryptionBlock@frameCounter
 21329  00219E  C20D  F06C         	movff	_loRa+7,AssembleEncryptionBlock@frameCounter+1
 21330  0021A2  C20E  F06D         	movff	_loRa+8,AssembleEncryptionBlock@frameCounter+2
 21331  0021A6  C20F  F06E         	movff	_loRa+9,AssembleEncryptionBlock@frameCounter+3
 21332  0021AA  0100               	movlb	0	; () banked
 21333  0021AC  51D2               	movf	AssemblePacket@bufferIndex& (0+255),w,b
 21334  0021AE  0FF0               	addlw	240
 21335  0021B0  6F6F               	movwf	AssembleEncryptionBlock@blockId& (0+255),b
 21336  0021B2  0E49               	movlw	73
 21337  0021B4  6F70               	movwf	AssembleEncryptionBlock@firstByte& (0+255),b
 21338  0021B6  0E00               	movlw	0
 21339  0021B8  6F71               	movwf	AssembleEncryptionBlock@multicastStatus& (0+255),b
 21340  0021BA  0E00               	movlw	0
 21341  0021BC  ECF0  F032         	call	_AssembleEncryptionBlock
 21342                           
 21343                           ;lorawan.c: 1796: memcpy (&macBuffer[0], aesBuffer, sizeof (aesBuffer));
 21344  0021C0  0E8F               	movlw	low _macBuffer
 21345  0021C2  0100               	movlb	0	; () banked
 21346  0021C4  6F60               	movwf	memcpy@d1& (0+255),b
 21347  0021C6  0E06               	movlw	high _macBuffer
 21348  0021C8  6F61               	movwf	(memcpy@d1+1)& (0+255),b
 21349  0021CA  0EA2               	movlw	low _aesBuffer
 21350  0021CC  6F62               	movwf	memcpy@s1& (0+255),b
 21351  0021CE  0E03               	movlw	high _aesBuffer
 21352  0021D0  6F63               	movwf	(memcpy@s1+1)& (0+255),b
 21353  0021D2  0E00               	movlw	0
 21354  0021D4  6F65               	movwf	(memcpy@n+1)& (0+255),b
 21355  0021D6  0E10               	movlw	16
 21356  0021D8  6F64               	movwf	memcpy@n& (0+255),b
 21357  0021DA  EC5D  F041         	call	_memcpy	;wreg free
 21358                           
 21359                           ;lorawan.c: 1798: AESCmac (loRa.activationParameters.networkSessionKey, aesBuffer, macBu
      +                          ffer, bufferIndex );
 21360  0021DE  0E28               	movlw	low (_loRa+34)
 21361  0021E0  0100               	movlb	0	; () banked
 21362  0021E2  6FB9               	movwf	AESCmac@key& (0+255),b
 21363  0021E4  0E02               	movlw	high (_loRa+34)
 21364  0021E6  6FBA               	movwf	(AESCmac@key+1)& (0+255),b
 21365  0021E8  0EA2               	movlw	low _aesBuffer
 21366  0021EA  6FBB               	movwf	AESCmac@output& (0+255),b
 21367  0021EC  0E03               	movlw	high _aesBuffer
 21368  0021EE  6FBC               	movwf	(AESCmac@output+1)& (0+255),b
 21369  0021F0  0E8F               	movlw	low _macBuffer
 21370  0021F2  6FBD               	movwf	AESCmac@input& (0+255),b
 21371  0021F4  0E06               	movlw	high _macBuffer
 21372  0021F6  6FBE               	movwf	(AESCmac@input+1)& (0+255),b
 21373  0021F8  C0D2  F0BF         	movff	AssemblePacket@bufferIndex,AESCmac@size
 21374  0021FC  EC1F  F011         	call	_AESCmac	;wreg free
 21375                           
 21376                           ;lorawan.c: 1800: memcpy (&macBuffer[bufferIndex], aesBuffer, 4);
 21377  002200  0100               	movlb	0	; () banked
 21378  002202  51D2               	movf	AssemblePacket@bufferIndex& (0+255),w,b
 21379  002204  0D01               	mullw	1
 21380  002206  0E8F               	movlw	low _macBuffer
 21381  002208  24F3               	addwf	prodl,w,c
 21382  00220A  6F60               	movwf	memcpy@d1& (0+255),b
 21383  00220C  0E06               	movlw	high _macBuffer
 21384  00220E  20F4               	addwfc	prodh,w,c
 21385  002210  6F61               	movwf	(memcpy@d1+1)& (0+255),b
 21386  002212  0EA2               	movlw	low _aesBuffer
 21387  002214  6F62               	movwf	memcpy@s1& (0+255),b
 21388  002216  0E03               	movlw	high _aesBuffer
 21389  002218  6F63               	movwf	(memcpy@s1+1)& (0+255),b
 21390  00221A  0E00               	movlw	0
 21391  00221C  6F65               	movwf	(memcpy@n+1)& (0+255),b
 21392  00221E  0E04               	movlw	4
 21393  002220  6F64               	movwf	memcpy@n& (0+255),b
 21394  002222  EC5D  F041         	call	_memcpy	;wreg free
 21395                           
 21396                           ;lorawan.c: 1801: bufferIndex = bufferIndex + 4;
 21397  002226  0100               	movlb	0	; () banked
 21398  002228  51D2               	movf	AssemblePacket@bufferIndex& (0+255),w,b
 21399  00222A  0F04               	addlw	4
 21400  00222C  6FD2               	movwf	AssemblePacket@bufferIndex& (0+255),b
 21401                           
 21402                           ; BSR set to: 0
 21403                           ;lorawan.c: 1803: loRa.lastPacketLength = bufferIndex - 16;
 21404  00222E  0EF0               	movlw	240
 21405  002230  25D2               	addwf	AssemblePacket@bufferIndex& (0+255),w,b
 21406  002232  0102               	movlb	2	; () banked
 21407  002234  6FDA               	movwf	(_loRa+212)& (0+255),b
 21408  002236  6BDB               	clrf	(_loRa+213)& (0+255),b
 21409  002238  0EFF               	movlw	255
 21410  00223A  23DB               	addwfc	(_loRa+213)& (0+255),f,b
 21411                           
 21412                           ; BSR set to: 2
 21413  00223C  0012               	return		;funcret
 21414  00223E                     __end_of_AssemblePacket:
 21415                           	opt stack 0
 21416                           tosu	equ	0xFFF
 21417                           tosh	equ	0xFFE
 21418                           tosl	equ	0xFFD
 21419                           pclath	equ	0xFFA
 21420                           tblptru	equ	0xFF8
 21421                           tblptrh	equ	0xFF7
 21422                           tblptrl	equ	0xFF6
 21423                           tablat	equ	0xFF5
 21424                           prodh	equ	0xFF4
 21425                           prodl	equ	0xFF3
 21426                           intcon	equ	0xFF2
 21427                           intcon2	equ	0xFF1
 21428                           intcon3	equ	0xFF0
 21429                           indf0	equ	0xFEF
 21430                           postinc0	equ	0xFEE
 21431                           fsr0h	equ	0xFEA
 21432                           fsr0l	equ	0xFE9
 21433                           wreg	equ	0xFE8
 21434                           postinc1	equ	0xFE6
 21435                           postdec1	equ	0xFE5
 21436                           plusw1	equ	0xFE3
 21437                           fsr1h	equ	0xFE2
 21438                           fsr1l	equ	0xFE1
 21439                           indf2	equ	0xFDF
 21440                           postinc2	equ	0xFDE
 21441                           postdec2	equ	0xFDD
 21442                           plusw2	equ	0xFDB
 21443                           fsr2h	equ	0xFDA
 21444                           fsr2l	equ	0xFD9
 21445                           status	equ	0xFD8
 21446                           
 21447 ;; *************** function _IncludeMacCommandsResponse *****************
 21448 ;; Defined at:
 21449 ;;		line 1845 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 21450 ;; Parameters:    Size  Location     Type
 21451 ;;  macBuffer       2    0[BANK0 ] PTR unsigned char 
 21452 ;;		 -> radioBuffer(271), macBuffer(271), 
 21453 ;;  pBufferIndex    2    2[BANK0 ] PTR unsigned char 
 21454 ;;		 -> AssemblePacket@macCmdIdx(1), AssemblePacket@bufferIndex(1), 
 21455 ;;  bIncludeInFo    1    4[BANK0 ] unsigned char 
 21456 ;; Auto vars:     Size  Location     Type
 21457 ;;  bufferIndex     1   14[BANK0 ] unsigned char 
 21458 ;;  i               1   13[BANK0 ] unsigned char 
 21459 ;; Return value:  Size  Location     Type
 21460 ;;                  1    wreg      void 
 21461 ;; Registers used:
 21462 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21463 ;; Tracked objects:
 21464 ;;		On entry : 0/0
 21465 ;;		On exit  : 0/0
 21466 ;;		Unchanged: 0/0
 21467 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21468 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21469 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21470 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21471 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21472 ;;Total ram usage:       15 bytes
 21473 ;; Hardware stack levels used:    1
 21474 ;; Hardware stack levels required when called:    8
 21475 ;; This function calls:
 21476 ;;		_RADIO_GetPacketSnr
 21477 ;; This function is called by:
 21478 ;;		_AssemblePacket
 21479 ;; This function uses a non-reentrant model
 21480 ;;
 21481                           
 21482                           	psect	text101
 21483  001A2C                     __ptext101:
 21484                           	opt stack 0
 21485  001A2C                     _IncludeMacCommandsResponse:
 21486                           	opt stack 20
 21487                           
 21488                           ;lorawan.c: 1847: uint8_t i = 0;
 21489                           
 21490                           ; BSR set to: 2
 21491                           ;incstack = 0
 21492  001A2C  0E00               	movlw	0
 21493  001A2E  0100               	movlb	0	; () banked
 21494  001A30  6F6D               	movwf	IncludeMacCommandsResponse@i& (0+255),b
 21495                           
 21496                           ; BSR set to: 0
 21497                           ;lorawan.c: 1848: uint8_t bufferIndex = *pBufferIndex;
 21498  001A32  C062  FFD9         	movff	IncludeMacCommandsResponse@pBufferIndex,fsr2l
 21499  001A36  C063  FFDA         	movff	IncludeMacCommandsResponse@pBufferIndex+1,fsr2h
 21500  001A3A  50DF               	movf	indf2,w,c
 21501  001A3C  6F6E               	movwf	IncludeMacCommandsResponse@bufferIndex& (0+255),b
 21502                           
 21503                           ; BSR set to: 0
 21504                           ;lorawan.c: 1850: for(i = 0; i < loRa.crtMacCmdIndex ; i++)
 21505  001A3E  0E00               	movlw	0
 21506  001A40  6F6D               	movwf	IncludeMacCommandsResponse@i& (0+255),b
 21507  001A42  D218               	goto	l1291
 21508  001A44                     
 21509                           ; BSR set to: 0
 21510                           ;lorawan.c: 1851: {
 21511                           ;lorawan.c: 1852: if((bIncludeInFopts) && (loRa.macCommands[i].receivedCid != 0xFF))
 21512                           
 21513                           ; BSR set to: 0
 21514  001A44  5164               	movf	IncludeMacCommandsResponse@bIncludeInFopts& (0+255),w,b
 21515  001A46  B4D8               	btfsc	status,2,c
 21516  001A48  D1F6               	goto	l1296
 21517                           
 21518                           ; BSR set to: 0
 21519  001A4A  516D               	movf	IncludeMacCommandsResponse@i& (0+255),w,b
 21520  001A4C  0D02               	mullw	2
 21521  001A4E  0EAE               	movlw	low (_loRa+168)
 21522  001A50  24F3               	addwf	prodl,w,c
 21523  001A52  6ED9               	movwf	fsr2l,c
 21524  001A54  0E02               	movlw	high (_loRa+168)
 21525  001A56  20F4               	addwfc	prodh,w,c
 21526  001A58  6EDA               	movwf	fsr2h,c
 21527  001A5A  28DE               	incf	postinc2,w,c
 21528  001A5C  B4D8               	btfsc	status,2,c
 21529  001A5E  D1EB               	goto	l1296
 21530                           
 21531                           ; BSR set to: 0
 21532                           ;lorawan.c: 1853: {
 21533                           ;lorawan.c: 1854: if((bufferIndex - (*pBufferIndex) + macEndDevCmdReplyLen[loRa.macComma
      +                          nds[i].receivedCid - 2]) > 0x0F)
 21534  001A60  C062  FFD9         	movff	IncludeMacCommandsResponse@pBufferIndex,fsr2l
 21535  001A64  C063  FFDA         	movff	IncludeMacCommandsResponse@pBufferIndex+1,fsr2h
 21536  001A68  50DF               	movf	indf2,w,c
 21537  001A6A  6F65               	movwf	??_IncludeMacCommandsResponse& (0+255),b
 21538  001A6C  6B66               	clrf	(??_IncludeMacCommandsResponse+1)& (0+255),b
 21539  001A6E  1F65               	comf	??_IncludeMacCommandsResponse& (0+255),f,b
 21540  001A70  1F66               	comf	(??_IncludeMacCommandsResponse+1)& (0+255),f,b
 21541  001A72  4B65               	infsnz	??_IncludeMacCommandsResponse& (0+255),f,b
 21542  001A74  2B66               	incf	(??_IncludeMacCommandsResponse+1)& (0+255),f,b
 21543  001A76  0EFE               	movlw	254
 21544  001A78  6F67               	movwf	(??_IncludeMacCommandsResponse+2)& (0+255),b
 21545  001A7A  0EFF               	movlw	255
 21546  001A7C  6F68               	movwf	(??_IncludeMacCommandsResponse+3)& (0+255),b
 21547  001A7E  516D               	movf	IncludeMacCommandsResponse@i& (0+255),w,b
 21548  001A80  0D02               	mullw	2
 21549  001A82  0EAE               	movlw	low (_loRa+168)
 21550  001A84  24F3               	addwf	prodl,w,c
 21551  001A86  6ED9               	movwf	fsr2l,c
 21552  001A88  0E02               	movlw	high (_loRa+168)
 21553  001A8A  20F4               	addwfc	prodh,w,c
 21554  001A8C  6EDA               	movwf	fsr2h,c
 21555  001A8E  50DF               	movf	indf2,w,c
 21556  001A90  6F69               	movwf	(??_IncludeMacCommandsResponse+4)& (0+255),b
 21557  001A92  6B6A               	clrf	(??_IncludeMacCommandsResponse+5)& (0+255),b
 21558  001A94  5167               	movf	(??_IncludeMacCommandsResponse+2)& (0+255),w,b
 21559  001A96  2769               	addwf	(??_IncludeMacCommandsResponse+4)& (0+255),f,b
 21560  001A98  5168               	movf	(??_IncludeMacCommandsResponse+3)& (0+255),w,b
 21561  001A9A  236A               	addwfc	(??_IncludeMacCommandsResponse+5)& (0+255),f,b
 21562  001A9C  0E95               	movlw	low _macEndDevCmdReplyLen
 21563  001A9E  2569               	addwf	(??_IncludeMacCommandsResponse+4)& (0+255),w,b
 21564  001AA0  6EF6               	movwf	tblptrl,c
 21565  001AA2  0EFF               	movlw	high _macEndDevCmdReplyLen
 21566  001AA4  216A               	addwfc	(??_IncludeMacCommandsResponse+5)& (0+255),w,b
 21567  001AA6  6EF7               	movwf	tblptrh,c
 21568  001AA8                     	if	1	;There are 3 active tblptr bytes
 21569  001AA8  6AF8               	clrf	tblptru,c
 21570  001AAA  0E00               	movlw	low (__mediumconst shr (0+16))
 21571  001AAC  22F8               	addwfc	tblptru,f,c
 21572  001AAE                     	endif
 21573  001AAE  0008               	tblrd		*
 21574  001AB0  50F5               	movf	tablat,w,c
 21575  001AB2  C06E  F06B         	movff	IncludeMacCommandsResponse@bufferIndex,??_IncludeMacCommandsResponse+6
 21576  001AB6  6B6C               	clrf	(??_IncludeMacCommandsResponse+7)& (0+255),b
 21577  001AB8  276B               	addwf	(??_IncludeMacCommandsResponse+6)& (0+255),f,b
 21578  001ABA  0E00               	movlw	0
 21579  001ABC  236C               	addwfc	(??_IncludeMacCommandsResponse+7)& (0+255),f,b
 21580  001ABE  5165               	movf	??_IncludeMacCommandsResponse& (0+255),w,b
 21581  001AC0  276B               	addwf	(??_IncludeMacCommandsResponse+6)& (0+255),f,b
 21582  001AC2  5166               	movf	(??_IncludeMacCommandsResponse+1)& (0+255),w,b
 21583  001AC4  236C               	addwfc	(??_IncludeMacCommandsResponse+7)& (0+255),f,b
 21584  001AC6  BF6C               	btfsc	(??_IncludeMacCommandsResponse+7)& (0+255),7,b
 21585  001AC8  D1B6               	goto	l1296
 21586  001ACA  516C               	movf	(??_IncludeMacCommandsResponse+7)& (0+255),w,b
 21587  001ACC  E105               	bnz	u9580
 21588  001ACE  0E10               	movlw	16
 21589  001AD0  5D6B               	subwf	(??_IncludeMacCommandsResponse+6)& (0+255),w,b
 21590  001AD2  B0D8               	btfsc	status,0,c
 21591  001AD4  D1D5               	goto	u9690
 21592  001AD6  D1AF               	goto	l1296
 21593  001AD8                     u9580:
 21594                           
 21595                           ; BSR set to: 0
 21596                           ;lorawan.c: 1855: {
 21597                           ;lorawan.c: 1856: break;
 21598  001AD8  D1D3               	goto	u9690
 21599  001ADA                     
 21600                           ; BSR set to: 0
 21601                           ;lorawan.c: 1862: {
 21602                           ;lorawan.c: 1863: macBuffer[bufferIndex++] = LINK_ADR_CID;
 21603                           
 21604                           ; BSR set to: 0
 21605  001ADA  516E               	movf	IncludeMacCommandsResponse@bufferIndex& (0+255),w,b
 21606  001ADC  0D01               	mullw	1
 21607  001ADE  50F3               	movf	prodl,w,c
 21608  001AE0  2560               	addwf	IncludeMacCommandsResponse@macBuffer& (0+255),w,b
 21609  001AE2  6ED9               	movwf	fsr2l,c
 21610  001AE4  50F4               	movf	prodh,w,c
 21611  001AE6  2161               	addwfc	(IncludeMacCommandsResponse@macBuffer+1)& (0+255),w,b
 21612  001AE8  6EDA               	movwf	fsr2h,c
 21613  001AEA  0E03               	movlw	3
 21614  001AEC  6EDF               	movwf	indf2,c
 21615                           
 21616                           ; BSR set to: 0
 21617  001AEE  2B6E               	incf	IncludeMacCommandsResponse@bufferIndex& (0+255),f,b
 21618                           
 21619                           ; BSR set to: 0
 21620                           ;lorawan.c: 1864: macBuffer[bufferIndex] = 0x00;
 21621  001AF0  516E               	movf	IncludeMacCommandsResponse@bufferIndex& (0+255),w,b
 21622  001AF2  0D01               	mullw	1
 21623  001AF4  50F3               	movf	prodl,w,c
 21624  001AF6  2560               	addwf	IncludeMacCommandsResponse@macBuffer& (0+255),w,b
 21625  001AF8  6ED9               	movwf	fsr2l,c
 21626  001AFA  50F4               	movf	prodh,w,c
 21627  001AFC  2161               	addwfc	(IncludeMacCommandsResponse@macBuffer+1)& (0+255),w,b
 21628  001AFE  6EDA               	movwf	fsr2h,c
 21629  001B00  0E00               	movlw	0
 21630  001B02  6EDF               	movwf	indf2,c
 21631                           
 21632                           ; BSR set to: 0
 21633                           ;lorawan.c: 1865: if (loRa.macCommands[i].channelMaskAck == 1)
 21634  001B04  516D               	movf	IncludeMacCommandsResponse@i& (0+255),w,b
 21635  001B06  0D02               	mullw	2
 21636  001B08  0E06               	movlw	low _loRa
 21637  001B0A  6F65               	movwf	??_IncludeMacCommandsResponse& (0+255),b
 21638  001B0C  0E02               	movlw	high _loRa
 21639  001B0E  6F66               	movwf	(??_IncludeMacCommandsResponse+1)& (0+255),b
 21640  001B10  0EA8               	movlw	168
 21641  001B12  2765               	addwf	??_IncludeMacCommandsResponse& (0+255),f,b
 21642  001B14  0E00               	movlw	0
 21643  001B16  2366               	addwfc	(??_IncludeMacCommandsResponse+1)& (0+255),f,b
 21644  001B18  50F3               	movf	prodl,w,c
 21645  001B1A  2765               	addwf	??_IncludeMacCommandsResponse& (0+255),f,b
 21646  001B1C  50F4               	movf	prodh,w,c
 21647  001B1E  2366               	addwfc	(??_IncludeMacCommandsResponse+1)& (0+255),f,b
 21648  001B20  0E01               	movlw	1
 21649  001B22  2565               	addwf	??_IncludeMacCommandsResponse& (0+255),w,b
 21650  001B24  6ED9               	movwf	fsr2l,c
 21651  001B26  0E00               	movlw	0
 21652  001B28  2166               	addwfc	(??_IncludeMacCommandsResponse+1)& (0+255),w,b
 21653  001B2A  6EDA               	movwf	fsr2h,c
 21654  001B2C  0102               	movlb	2	; () banked
 21655  001B2E  A0DF               	btfss	indf2,0,c
 21656  001B30  D00B               	goto	l1298
 21657                           
 21658                           ; BSR set to: 2
 21659                           ;lorawan.c: 1866: {
 21660                           ;lorawan.c: 1867: macBuffer[bufferIndex] |= 0x01;
 21661  001B32  0100               	movlb	0	; () banked
 21662  001B34  516E               	movf	IncludeMacCommandsResponse@bufferIndex& (0+255),w,b
 21663  001B36  0D01               	mullw	1
 21664  001B38  50F3               	movf	prodl,w,c
 21665  001B3A  2560               	addwf	IncludeMacCommandsResponse@macBuffer& (0+255),w,b
 21666  001B3C  6ED9               	movwf	fsr2l,c
 21667  001B3E  50F4               	movf	prodh,w,c
 21668  001B40  2161               	addwfc	(IncludeMacCommandsResponse@macBuffer+1)& (0+255),w,b
 21669  001B42  6EDA               	movwf	fsr2h,c
 21670  001B44  0E00               	movlw	0
 21671  001B46  80DB               	bsf	plusw2,0,c
 21672  001B48                     l1298:
 21673                           
 21674                           ;lorawan.c: 1868: }
 21675                           ;lorawan.c: 1870: if (loRa.macCommands[i].dataRateAck == 1)
 21676  001B48  0100               	movlb	0	; () banked
 21677  001B4A  516D               	movf	IncludeMacCommandsResponse@i& (0+255),w,b
 21678  001B4C  0D02               	mullw	2
 21679  001B4E  0E06               	movlw	low _loRa
 21680  001B50  6F65               	movwf	??_IncludeMacCommandsResponse& (0+255),b
 21681  001B52  0E02               	movlw	high _loRa
 21682  001B54  6F66               	movwf	(??_IncludeMacCommandsResponse+1)& (0+255),b
 21683  001B56  0EA8               	movlw	168
 21684  001B58  2765               	addwf	??_IncludeMacCommandsResponse& (0+255),f,b
 21685  001B5A  0E00               	movlw	0
 21686  001B5C  2366               	addwfc	(??_IncludeMacCommandsResponse+1)& (0+255),f,b
 21687  001B5E  50F3               	movf	prodl,w,c
 21688  001B60  2765               	addwf	??_IncludeMacCommandsResponse& (0+255),f,b
 21689  001B62  50F4               	movf	prodh,w,c
 21690  001B64  2366               	addwfc	(??_IncludeMacCommandsResponse+1)& (0+255),f,b
 21691  001B66  0E01               	movlw	1
 21692  001B68  2565               	addwf	??_IncludeMacCommandsResponse& (0+255),w,b
 21693  001B6A  6ED9               	movwf	fsr2l,c
 21694  001B6C  0E00               	movlw	0
 21695  001B6E  2166               	addwfc	(??_IncludeMacCommandsResponse+1)& (0+255),w,b
 21696  001B70  6EDA               	movwf	fsr2h,c
 21697  001B72  0102               	movlb	2	; () banked
 21698  001B74  A2DF               	btfss	indf2,1,c
 21699  001B76  D00B               	goto	l1299
 21700                           
 21701                           ; BSR set to: 2
 21702                           ;lorawan.c: 1871: {
 21703                           ;lorawan.c: 1872: macBuffer[bufferIndex] |= 0x02;
 21704  001B78  0100               	movlb	0	; () banked
 21705  001B7A  516E               	movf	IncludeMacCommandsResponse@bufferIndex& (0+255),w,b
 21706  001B7C  0D01               	mullw	1
 21707  001B7E  50F3               	movf	prodl,w,c
 21708  001B80  2560               	addwf	IncludeMacCommandsResponse@macBuffer& (0+255),w,b
 21709  001B82  6ED9               	movwf	fsr2l,c
 21710  001B84  50F4               	movf	prodh,w,c
 21711  001B86  2161               	addwfc	(IncludeMacCommandsResponse@macBuffer+1)& (0+255),w,b
 21712  001B88  6EDA               	movwf	fsr2h,c
 21713  001B8A  0E00               	movlw	0
 21714  001B8C  82DB               	bsf	plusw2,1,c
 21715  001B8E                     l1299:
 21716                           
 21717                           ;lorawan.c: 1873: }
 21718                           ;lorawan.c: 1875: if (loRa.macCommands[i].powerAck == 1)
 21719  001B8E  0100               	movlb	0	; () banked
 21720  001B90  516D               	movf	IncludeMacCommandsResponse@i& (0+255),w,b
 21721  001B92  0D02               	mullw	2
 21722  001B94  0E06               	movlw	low _loRa
 21723  001B96  6F65               	movwf	??_IncludeMacCommandsResponse& (0+255),b
 21724  001B98  0E02               	movlw	high _loRa
 21725  001B9A  6F66               	movwf	(??_IncludeMacCommandsResponse+1)& (0+255),b
 21726  001B9C  0EA8               	movlw	168
 21727  001B9E  2765               	addwf	??_IncludeMacCommandsResponse& (0+255),f,b
 21728  001BA0  0E00               	movlw	0
 21729  001BA2  2366               	addwfc	(??_IncludeMacCommandsResponse+1)& (0+255),f,b
 21730  001BA4  50F3               	movf	prodl,w,c
 21731  001BA6  2765               	addwf	??_IncludeMacCommandsResponse& (0+255),f,b
 21732  001BA8  50F4               	movf	prodh,w,c
 21733  001BAA  2366               	addwfc	(??_IncludeMacCommandsResponse+1)& (0+255),f,b
 21734  001BAC  0E01               	movlw	1
 21735  001BAE  2565               	addwf	??_IncludeMacCommandsResponse& (0+255),w,b
 21736  001BB0  6ED9               	movwf	fsr2l,c
 21737  001BB2  0E00               	movlw	0
 21738  001BB4  2166               	addwfc	(??_IncludeMacCommandsResponse+1)& (0+255),w,b
 21739  001BB6  6EDA               	movwf	fsr2h,c
 21740  001BB8  0102               	movlb	2	; () banked
 21741  001BBA  A4DF               	btfss	indf2,2,c
 21742  001BBC  D089               	goto	l1305
 21743                           
 21744                           ; BSR set to: 2
 21745                           ;lorawan.c: 1876: {
 21746                           ;lorawan.c: 1877: macBuffer[bufferIndex] |= 0x04;
 21747  001BBE  0100               	movlb	0	; () banked
 21748  001BC0  516E               	movf	IncludeMacCommandsResponse@bufferIndex& (0+255),w,b
 21749  001BC2  0D01               	mullw	1
 21750  001BC4  50F3               	movf	prodl,w,c
 21751  001BC6  2560               	addwf	IncludeMacCommandsResponse@macBuffer& (0+255),w,b
 21752  001BC8  6ED9               	movwf	fsr2l,c
 21753  001BCA  50F4               	movf	prodh,w,c
 21754  001BCC  2161               	addwfc	(IncludeMacCommandsResponse@macBuffer+1)& (0+255),w,b
 21755  001BCE  6EDA               	movwf	fsr2h,c
 21756  001BD0  0E00               	movlw	0
 21757  001BD2  84DB               	bsf	plusw2,2,c
 21758                           
 21759                           ; BSR set to: 0
 21760  001BD4  D07D               	goto	l1305
 21761  001BD6                     
 21762                           ; BSR set to: 0
 21763                           ;lorawan.c: 1884: {
 21764                           ;lorawan.c: 1885: macBuffer[bufferIndex++] = RX2_SETUP_CID;
 21765                           
 21766                           ; BSR set to: 0
 21767  001BD6  516E               	movf	IncludeMacCommandsResponse@bufferIndex& (0+255),w,b
 21768  001BD8  0D01               	mullw	1
 21769  001BDA  50F3               	movf	prodl,w,c
 21770  001BDC  2560               	addwf	IncludeMacCommandsResponse@macBuffer& (0+255),w,b
 21771  001BDE  6ED9               	movwf	fsr2l,c
 21772  001BE0  50F4               	movf	prodh,w,c
 21773  001BE2  2161               	addwfc	(IncludeMacCommandsResponse@macBuffer+1)& (0+255),w,b
 21774  001BE4  6EDA               	movwf	fsr2h,c
 21775  001BE6  0E05               	movlw	5
 21776  001BE8  6EDF               	movwf	indf2,c
 21777                           
 21778                           ; BSR set to: 0
 21779  001BEA  2B6E               	incf	IncludeMacCommandsResponse@bufferIndex& (0+255),f,b
 21780                           
 21781                           ; BSR set to: 0
 21782                           ;lorawan.c: 1886: macBuffer[bufferIndex] = 0x00;
 21783  001BEC  516E               	movf	IncludeMacCommandsResponse@bufferIndex& (0+255),w,b
 21784  001BEE  0D01               	mullw	1
 21785  001BF0  50F3               	movf	prodl,w,c
 21786  001BF2  2560               	addwf	IncludeMacCommandsResponse@macBuffer& (0+255),w,b
 21787  001BF4  6ED9               	movwf	fsr2l,c
 21788  001BF6  50F4               	movf	prodh,w,c
 21789  001BF8  2161               	addwfc	(IncludeMacCommandsResponse@macBuffer+1)& (0+255),w,b
 21790  001BFA  6EDA               	movwf	fsr2h,c
 21791  001BFC  0E00               	movlw	0
 21792  001BFE  6EDF               	movwf	indf2,c
 21793                           
 21794                           ; BSR set to: 0
 21795                           ;lorawan.c: 1887: if (loRa.macCommands[i].channelAck == 1)
 21796  001C00  516D               	movf	IncludeMacCommandsResponse@i& (0+255),w,b
 21797  001C02  0D02               	mullw	2
 21798  001C04  0E06               	movlw	low _loRa
 21799  001C06  6F65               	movwf	??_IncludeMacCommandsResponse& (0+255),b
 21800  001C08  0E02               	movlw	high _loRa
 21801  001C0A  6F66               	movwf	(??_IncludeMacCommandsResponse+1)& (0+255),b
 21802  001C0C  0EA8               	movlw	168
 21803  001C0E  2765               	addwf	??_IncludeMacCommandsResponse& (0+255),f,b
 21804  001C10  0E00               	movlw	0
 21805  001C12  2366               	addwfc	(??_IncludeMacCommandsResponse+1)& (0+255),f,b
 21806  001C14  50F3               	movf	prodl,w,c
 21807  001C16  2765               	addwf	??_IncludeMacCommandsResponse& (0+255),f,b
 21808  001C18  50F4               	movf	prodh,w,c
 21809  001C1A  2366               	addwfc	(??_IncludeMacCommandsResponse+1)& (0+255),f,b
 21810  001C1C  0E01               	movlw	1
 21811  001C1E  2565               	addwf	??_IncludeMacCommandsResponse& (0+255),w,b
 21812  001C20  6ED9               	movwf	fsr2l,c
 21813  001C22  0E00               	movlw	0
 21814  001C24  2166               	addwfc	(??_IncludeMacCommandsResponse+1)& (0+255),w,b
 21815  001C26  6EDA               	movwf	fsr2h,c
 21816  001C28  0102               	movlb	2	; () banked
 21817  001C2A  A6DF               	btfss	indf2,3,c
 21818  001C2C  D00B               	goto	l1303
 21819                           
 21820                           ; BSR set to: 2
 21821                           ;lorawan.c: 1888: {
 21822                           ;lorawan.c: 1889: macBuffer[bufferIndex] |= 0x01;
 21823  001C2E  0100               	movlb	0	; () banked
 21824  001C30  516E               	movf	IncludeMacCommandsResponse@bufferIndex& (0+255),w,b
 21825  001C32  0D01               	mullw	1
 21826  001C34  50F3               	movf	prodl,w,c
 21827  001C36  2560               	addwf	IncludeMacCommandsResponse@macBuffer& (0+255),w,b
 21828  001C38  6ED9               	movwf	fsr2l,c
 21829  001C3A  50F4               	movf	prodh,w,c
 21830  001C3C  2161               	addwfc	(IncludeMacCommandsResponse@macBuffer+1)& (0+255),w,b
 21831  001C3E  6EDA               	movwf	fsr2h,c
 21832  001C40  0E00               	movlw	0
 21833  001C42  80DB               	bsf	plusw2,0,c
 21834  001C44                     l1303:
 21835                           
 21836                           ;lorawan.c: 1890: }
 21837                           ;lorawan.c: 1892: if (loRa.macCommands[i].dataRateReceiveWindowAck == 1)
 21838  001C44  0100               	movlb	0	; () banked
 21839  001C46  516D               	movf	IncludeMacCommandsResponse@i& (0+255),w,b
 21840  001C48  0D02               	mullw	2
 21841  001C4A  0E06               	movlw	low _loRa
 21842  001C4C  6F65               	movwf	??_IncludeMacCommandsResponse& (0+255),b
 21843  001C4E  0E02               	movlw	high _loRa
 21844  001C50  6F66               	movwf	(??_IncludeMacCommandsResponse+1)& (0+255),b
 21845  001C52  0EA8               	movlw	168
 21846  001C54  2765               	addwf	??_IncludeMacCommandsResponse& (0+255),f,b
 21847  001C56  0E00               	movlw	0
 21848  001C58  2366               	addwfc	(??_IncludeMacCommandsResponse+1)& (0+255),f,b
 21849  001C5A  50F3               	movf	prodl,w,c
 21850  001C5C  2765               	addwf	??_IncludeMacCommandsResponse& (0+255),f,b
 21851  001C5E  50F4               	movf	prodh,w,c
 21852  001C60  2366               	addwfc	(??_IncludeMacCommandsResponse+1)& (0+255),f,b
 21853  001C62  0E01               	movlw	1
 21854  001C64  2565               	addwf	??_IncludeMacCommandsResponse& (0+255),w,b
 21855  001C66  6ED9               	movwf	fsr2l,c
 21856  001C68  0E00               	movlw	0
 21857  001C6A  2166               	addwfc	(??_IncludeMacCommandsResponse+1)& (0+255),w,b
 21858  001C6C  6EDA               	movwf	fsr2h,c
 21859  001C6E  0102               	movlb	2	; () banked
 21860  001C70  A8DF               	btfss	indf2,4,c
 21861  001C72  D00B               	goto	l1304
 21862                           
 21863                           ; BSR set to: 2
 21864                           ;lorawan.c: 1893: {
 21865                           ;lorawan.c: 1894: macBuffer[bufferIndex] |= 0x02;
 21866  001C74  0100               	movlb	0	; () banked
 21867  001C76  516E               	movf	IncludeMacCommandsResponse@bufferIndex& (0+255),w,b
 21868  001C78  0D01               	mullw	1
 21869  001C7A  50F3               	movf	prodl,w,c
 21870  001C7C  2560               	addwf	IncludeMacCommandsResponse@macBuffer& (0+255),w,b
 21871  001C7E  6ED9               	movwf	fsr2l,c
 21872  001C80  50F4               	movf	prodh,w,c
 21873  001C82  2161               	addwfc	(IncludeMacCommandsResponse@macBuffer+1)& (0+255),w,b
 21874  001C84  6EDA               	movwf	fsr2h,c
 21875  001C86  0E00               	movlw	0
 21876  001C88  82DB               	bsf	plusw2,1,c
 21877  001C8A                     l1304:
 21878                           
 21879                           ;lorawan.c: 1895: }
 21880                           ;lorawan.c: 1897: if (loRa.macCommands[i].rx1DROffestAck == 1)
 21881  001C8A  0100               	movlb	0	; () banked
 21882  001C8C  516D               	movf	IncludeMacCommandsResponse@i& (0+255),w,b
 21883  001C8E  0D02               	mullw	2
 21884  001C90  0E06               	movlw	low _loRa
 21885  001C92  6F65               	movwf	??_IncludeMacCommandsResponse& (0+255),b
 21886  001C94  0E02               	movlw	high _loRa
 21887  001C96  6F66               	movwf	(??_IncludeMacCommandsResponse+1)& (0+255),b
 21888  001C98  0EA8               	movlw	168
 21889  001C9A  2765               	addwf	??_IncludeMacCommandsResponse& (0+255),f,b
 21890  001C9C  0E00               	movlw	0
 21891  001C9E  2366               	addwfc	(??_IncludeMacCommandsResponse+1)& (0+255),f,b
 21892  001CA0  50F3               	movf	prodl,w,c
 21893  001CA2  2765               	addwf	??_IncludeMacCommandsResponse& (0+255),f,b
 21894  001CA4  50F4               	movf	prodh,w,c
 21895  001CA6  2366               	addwfc	(??_IncludeMacCommandsResponse+1)& (0+255),f,b
 21896  001CA8  0E01               	movlw	1
 21897  001CAA  2565               	addwf	??_IncludeMacCommandsResponse& (0+255),w,b
 21898  001CAC  6ED9               	movwf	fsr2l,c
 21899  001CAE  0E00               	movlw	0
 21900  001CB0  2166               	addwfc	(??_IncludeMacCommandsResponse+1)& (0+255),w,b
 21901  001CB2  6EDA               	movwf	fsr2h,c
 21902  001CB4  0102               	movlb	2	; () banked
 21903  001CB6  AADF               	btfss	indf2,5,c
 21904  001CB8  D00B               	goto	l1305
 21905                           
 21906                           ; BSR set to: 2
 21907                           ;lorawan.c: 1898: {
 21908                           ;lorawan.c: 1899: macBuffer[bufferIndex] |= 0x04;
 21909  001CBA  0100               	movlb	0	; () banked
 21910  001CBC  516E               	movf	IncludeMacCommandsResponse@bufferIndex& (0+255),w,b
 21911  001CBE  0D01               	mullw	1
 21912  001CC0  50F3               	movf	prodl,w,c
 21913  001CC2  2560               	addwf	IncludeMacCommandsResponse@macBuffer& (0+255),w,b
 21914  001CC4  6ED9               	movwf	fsr2l,c
 21915  001CC6  50F4               	movf	prodh,w,c
 21916  001CC8  2161               	addwfc	(IncludeMacCommandsResponse@macBuffer+1)& (0+255),w,b
 21917  001CCA  6EDA               	movwf	fsr2h,c
 21918  001CCC  0E00               	movlw	0
 21919  001CCE  84DB               	bsf	plusw2,2,c
 21920  001CD0                     l1305:
 21921                           
 21922                           ;lorawan.c: 1900: }
 21923                           ;lorawan.c: 1902: bufferIndex ++;
 21924                           
 21925                           ; BSR set to: 0
 21926  001CD0  0100               	movlb	0	; () banked
 21927  001CD2  D03C               	goto	L12
 21928  001CD4                     
 21929                           ; BSR set to: 0
 21930                           ;lorawan.c: 1907: {
 21931                           ;lorawan.c: 1908: macBuffer[bufferIndex++] = DEV_STATUS_CID;
 21932                           
 21933                           ; BSR set to: 0
 21934  001CD4  516E               	movf	IncludeMacCommandsResponse@bufferIndex& (0+255),w,b
 21935  001CD6  0D01               	mullw	1
 21936  001CD8  50F3               	movf	prodl,w,c
 21937  001CDA  2560               	addwf	IncludeMacCommandsResponse@macBuffer& (0+255),w,b
 21938  001CDC  6ED9               	movwf	fsr2l,c
 21939  001CDE  50F4               	movf	prodh,w,c
 21940  001CE0  2161               	addwfc	(IncludeMacCommandsResponse@macBuffer+1)& (0+255),w,b
 21941  001CE2  6EDA               	movwf	fsr2h,c
 21942  001CE4  0E06               	movlw	6
 21943  001CE6  6EDF               	movwf	indf2,c
 21944                           
 21945                           ; BSR set to: 0
 21946  001CE8  2B6E               	incf	IncludeMacCommandsResponse@bufferIndex& (0+255),f,b
 21947                           
 21948                           ; BSR set to: 0
 21949                           ;lorawan.c: 1909: macBuffer[bufferIndex++] = loRa.batteryLevel;
 21950  001CEA  516E               	movf	IncludeMacCommandsResponse@bufferIndex& (0+255),w,b
 21951  001CEC  0D01               	mullw	1
 21952  001CEE  50F3               	movf	prodl,w,c
 21953  001CF0  2560               	addwf	IncludeMacCommandsResponse@macBuffer& (0+255),w,b
 21954  001CF2  6ED9               	movwf	fsr2l,c
 21955  001CF4  50F4               	movf	prodh,w,c
 21956  001CF6  2161               	addwfc	(IncludeMacCommandsResponse@macBuffer+1)& (0+255),w,b
 21957  001CF8  6EDA               	movwf	fsr2h,c
 21958  001CFA  C2E6  FFDF         	movff	_loRa+224,indf2
 21959  001CFE  2B6E               	incf	IncludeMacCommandsResponse@bufferIndex& (0+255),f,b
 21960                           
 21961                           ; BSR set to: 0
 21962                           ;lorawan.c: 1910: if ((RADIO_GetPacketSnr() < -32) || (RADIO_GetPacketSnr() > 31))
 21963  001D00  ECCF  F04A         	call	_RADIO_GetPacketSnr	;wreg free
 21964  001D04  0A80               	xorlw	128
 21965  001D06  0FA0               	addlw	160
 21966  001D08  A0D8               	btfss	status,0,c
 21967  001D0A  D006               	goto	u9660
 21968  001D0C  ECCF  F04A         	call	_RADIO_GetPacketSnr	;wreg free
 21969  001D10  0A80               	xorlw	128
 21970  001D12  0F60               	addlw	-160
 21971  001D14  A0D8               	btfss	status,0,c
 21972  001D16  D00C               	goto	l1307
 21973  001D18                     u9660:
 21974                           
 21975                           ;lorawan.c: 1911: {
 21976                           ;lorawan.c: 1912: macBuffer[bufferIndex++] = 0x20;
 21977  001D18  0100               	movlb	0	; () banked
 21978  001D1A  516E               	movf	IncludeMacCommandsResponse@bufferIndex& (0+255),w,b
 21979  001D1C  0D01               	mullw	1
 21980  001D1E  50F3               	movf	prodl,w,c
 21981  001D20  2560               	addwf	IncludeMacCommandsResponse@macBuffer& (0+255),w,b
 21982  001D22  6ED9               	movwf	fsr2l,c
 21983  001D24  50F4               	movf	prodh,w,c
 21984  001D26  2161               	addwfc	(IncludeMacCommandsResponse@macBuffer+1)& (0+255),w,b
 21985  001D28  6EDA               	movwf	fsr2h,c
 21986  001D2A  0E20               	movlw	32
 21987  001D2C  6EDF               	movwf	indf2,c
 21988  001D2E  D00E               	goto	L12
 21989  001D30                     l1307:
 21990                           
 21991                           ;lorawan.c: 1914: else
 21992                           ;lorawan.c: 1915: {
 21993                           ;lorawan.c: 1916: macBuffer[bufferIndex++] = ((uint8_t)RADIO_GetPacketSnr() & 0x3F);
 21994                           
 21995                           ; BSR set to: 0
 21996  001D30  0100               	movlb	0	; () banked
 21997  001D32  516E               	movf	IncludeMacCommandsResponse@bufferIndex& (0+255),w,b
 21998  001D34  0D01               	mullw	1
 21999  001D36  50F3               	movf	prodl,w,c
 22000  001D38  2560               	addwf	IncludeMacCommandsResponse@macBuffer& (0+255),w,b
 22001  001D3A  6ED9               	movwf	fsr2l,c
 22002  001D3C  50F4               	movf	prodh,w,c
 22003  001D3E  2161               	addwfc	(IncludeMacCommandsResponse@macBuffer+1)& (0+255),w,b
 22004  001D40  6EDA               	movwf	fsr2h,c
 22005  001D42  ECCF  F04A         	call	_RADIO_GetPacketSnr	;wreg free
 22006  001D46  0B3F               	andlw	63
 22007  001D48  6EDF               	movwf	indf2,c
 22008  001D4A  D7C2               	goto	l1305
 22009  001D4C                     L12:
 22010  001D4C  2B6E               	incf	IncludeMacCommandsResponse@bufferIndex& (0+255),f,b
 22011                           
 22012                           ; BSR set to: 0
 22013                           ;lorawan.c: 1917: }
 22014                           ;lorawan.c: 1918: }
 22015                           ;lorawan.c: 1919: break;
 22016  001D4E  D091               	goto	l1301
 22017  001D50                     
 22018                           ; BSR set to: 0
 22019                           ;lorawan.c: 1922: {
 22020                           ;lorawan.c: 1923: macBuffer[bufferIndex++] = NEW_CHANNEL_CID;
 22021                           
 22022                           ; BSR set to: 0
 22023  001D50  516E               	movf	IncludeMacCommandsResponse@bufferIndex& (0+255),w,b
 22024  001D52  0D01               	mullw	1
 22025  001D54  50F3               	movf	prodl,w,c
 22026  001D56  2560               	addwf	IncludeMacCommandsResponse@macBuffer& (0+255),w,b
 22027  001D58  6ED9               	movwf	fsr2l,c
 22028  001D5A  50F4               	movf	prodh,w,c
 22029  001D5C  2161               	addwfc	(IncludeMacCommandsResponse@macBuffer+1)& (0+255),w,b
 22030  001D5E  6EDA               	movwf	fsr2h,c
 22031  001D60  0E07               	movlw	7
 22032  001D62  6EDF               	movwf	indf2,c
 22033                           
 22034                           ; BSR set to: 0
 22035  001D64  2B6E               	incf	IncludeMacCommandsResponse@bufferIndex& (0+255),f,b
 22036                           
 22037                           ; BSR set to: 0
 22038                           ;lorawan.c: 1924: macBuffer[bufferIndex] = 0x00;
 22039  001D66  516E               	movf	IncludeMacCommandsResponse@bufferIndex& (0+255),w,b
 22040  001D68  0D01               	mullw	1
 22041  001D6A  50F3               	movf	prodl,w,c
 22042  001D6C  2560               	addwf	IncludeMacCommandsResponse@macBuffer& (0+255),w,b
 22043  001D6E  6ED9               	movwf	fsr2l,c
 22044  001D70  50F4               	movf	prodh,w,c
 22045  001D72  2161               	addwfc	(IncludeMacCommandsResponse@macBuffer+1)& (0+255),w,b
 22046  001D74  6EDA               	movwf	fsr2h,c
 22047  001D76  0E00               	movlw	0
 22048  001D78  6EDF               	movwf	indf2,c
 22049                           
 22050                           ; BSR set to: 0
 22051                           ;lorawan.c: 1925: if (loRa.macCommands[i].channelFrequencyAck == 1)
 22052  001D7A  516D               	movf	IncludeMacCommandsResponse@i& (0+255),w,b
 22053  001D7C  0D02               	mullw	2
 22054  001D7E  0E06               	movlw	low _loRa
 22055  001D80  6F65               	movwf	??_IncludeMacCommandsResponse& (0+255),b
 22056  001D82  0E02               	movlw	high _loRa
 22057  001D84  6F66               	movwf	(??_IncludeMacCommandsResponse+1)& (0+255),b
 22058  001D86  0EA8               	movlw	168
 22059  001D88  2765               	addwf	??_IncludeMacCommandsResponse& (0+255),f,b
 22060  001D8A  0E00               	movlw	0
 22061  001D8C  2366               	addwfc	(??_IncludeMacCommandsResponse+1)& (0+255),f,b
 22062  001D8E  50F3               	movf	prodl,w,c
 22063  001D90  2765               	addwf	??_IncludeMacCommandsResponse& (0+255),f,b
 22064  001D92  50F4               	movf	prodh,w,c
 22065  001D94  2366               	addwfc	(??_IncludeMacCommandsResponse+1)& (0+255),f,b
 22066  001D96  0E01               	movlw	1
 22067  001D98  2565               	addwf	??_IncludeMacCommandsResponse& (0+255),w,b
 22068  001D9A  6ED9               	movwf	fsr2l,c
 22069  001D9C  0E00               	movlw	0
 22070  001D9E  2166               	addwfc	(??_IncludeMacCommandsResponse+1)& (0+255),w,b
 22071  001DA0  6EDA               	movwf	fsr2h,c
 22072  001DA2  0102               	movlb	2	; () banked
 22073  001DA4  AEDF               	btfss	indf2,7,c
 22074  001DA6  D00B               	goto	l1312
 22075                           
 22076                           ; BSR set to: 2
 22077                           ;lorawan.c: 1926: {
 22078                           ;lorawan.c: 1927: macBuffer[bufferIndex] |= 0x01;
 22079  001DA8  0100               	movlb	0	; () banked
 22080  001DAA  516E               	movf	IncludeMacCommandsResponse@bufferIndex& (0+255),w,b
 22081  001DAC  0D01               	mullw	1
 22082  001DAE  50F3               	movf	prodl,w,c
 22083  001DB0  2560               	addwf	IncludeMacCommandsResponse@macBuffer& (0+255),w,b
 22084  001DB2  6ED9               	movwf	fsr2l,c
 22085  001DB4  50F4               	movf	prodh,w,c
 22086  001DB6  2161               	addwfc	(IncludeMacCommandsResponse@macBuffer+1)& (0+255),w,b
 22087  001DB8  6EDA               	movwf	fsr2h,c
 22088  001DBA  0E00               	movlw	0
 22089  001DBC  80DB               	bsf	plusw2,0,c
 22090  001DBE                     l1312:
 22091                           
 22092                           ;lorawan.c: 1928: }
 22093                           ;lorawan.c: 1930: if (loRa.macCommands[i].dataRateRangeAck == 1)
 22094  001DBE  0100               	movlb	0	; () banked
 22095  001DC0  516D               	movf	IncludeMacCommandsResponse@i& (0+255),w,b
 22096  001DC2  0D02               	mullw	2
 22097  001DC4  0E06               	movlw	low _loRa
 22098  001DC6  6F65               	movwf	??_IncludeMacCommandsResponse& (0+255),b
 22099  001DC8  0E02               	movlw	high _loRa
 22100  001DCA  6F66               	movwf	(??_IncludeMacCommandsResponse+1)& (0+255),b
 22101  001DCC  0EA8               	movlw	168
 22102  001DCE  2765               	addwf	??_IncludeMacCommandsResponse& (0+255),f,b
 22103  001DD0  0E00               	movlw	0
 22104  001DD2  2366               	addwfc	(??_IncludeMacCommandsResponse+1)& (0+255),f,b
 22105  001DD4  50F3               	movf	prodl,w,c
 22106  001DD6  2765               	addwf	??_IncludeMacCommandsResponse& (0+255),f,b
 22107  001DD8  50F4               	movf	prodh,w,c
 22108  001DDA  2366               	addwfc	(??_IncludeMacCommandsResponse+1)& (0+255),f,b
 22109  001DDC  0E01               	movlw	1
 22110  001DDE  2565               	addwf	??_IncludeMacCommandsResponse& (0+255),w,b
 22111  001DE0  6ED9               	movwf	fsr2l,c
 22112  001DE2  0E00               	movlw	0
 22113  001DE4  2166               	addwfc	(??_IncludeMacCommandsResponse+1)& (0+255),w,b
 22114  001DE6  6EDA               	movwf	fsr2h,c
 22115  001DE8  0102               	movlb	2	; () banked
 22116  001DEA  ACDF               	btfss	indf2,6,c
 22117  001DEC  D771               	goto	l1305
 22118                           
 22119                           ; BSR set to: 2
 22120                           ;lorawan.c: 1931: {
 22121                           ;lorawan.c: 1932: macBuffer[bufferIndex] |= 0x02;
 22122  001DEE  0100               	movlb	0	; () banked
 22123  001DF0  516E               	movf	IncludeMacCommandsResponse@bufferIndex& (0+255),w,b
 22124  001DF2  0D01               	mullw	1
 22125  001DF4  50F3               	movf	prodl,w,c
 22126  001DF6  2560               	addwf	IncludeMacCommandsResponse@macBuffer& (0+255),w,b
 22127  001DF8  6ED9               	movwf	fsr2l,c
 22128  001DFA  50F4               	movf	prodh,w,c
 22129  001DFC  2161               	addwfc	(IncludeMacCommandsResponse@macBuffer+1)& (0+255),w,b
 22130  001DFE  6EDA               	movwf	fsr2h,c
 22131  001E00  0E00               	movlw	0
 22132  001E02  82DB               	bsf	plusw2,1,c
 22133                           
 22134                           ; BSR set to: 0
 22135  001E04  D765               	goto	l1305
 22136  001E06                     l1314:
 22137                           
 22138                           ; BSR set to: 0
 22139                           ;lorawan.c: 1939: {
 22140                           ;lorawan.c: 1940: loRa.linkCheckMargin = 255;
 22141  001E06  0102               	movlb	2	; () banked
 22142  001E08  69E3               	setf	(_loRa+221)& (0+255),b
 22143                           
 22144                           ; BSR set to: 2
 22145                           ;lorawan.c: 1941: loRa.linkCheckGwCnt = 0;
 22146  001E0A  0E00               	movlw	0
 22147  001E0C  6FE4               	movwf	(_loRa+222)& (0+255),b
 22148                           
 22149                           ; BSR set to: 2
 22150                           ;lorawan.c: 1942: macBuffer[bufferIndex++] = loRa.macCommands[i].receivedCid;
 22151  001E0E  0100               	movlb	0	; () banked
 22152  001E10                     
 22153                           ; BSR set to: 0
 22154                           ;lorawan.c: 1947: case DUTY_CYCLE_CID:
 22155                           ;lorawan.c: 1948: {
 22156                           ;lorawan.c: 1949: macBuffer[bufferIndex++] = loRa.macCommands[i].receivedCid;
 22157                           
 22158                           ; BSR set to: 0
 22159                           
 22160                           ; BSR set to: 0
 22161  001E10  516D               	movf	IncludeMacCommandsResponse@i& (0+255),w,b
 22162  001E12  0D02               	mullw	2
 22163  001E14  0EAE               	movlw	low (_loRa+168)
 22164  001E16  24F3               	addwf	prodl,w,c
 22165  001E18  6ED9               	movwf	fsr2l,c
 22166  001E1A  0E02               	movlw	high (_loRa+168)
 22167  001E1C  20F4               	addwfc	prodh,w,c
 22168  001E1E  6EDA               	movwf	fsr2h,c
 22169  001E20  516E               	movf	IncludeMacCommandsResponse@bufferIndex& (0+255),w,b
 22170  001E22  0D01               	mullw	1
 22171  001E24  50F3               	movf	prodl,w,c
 22172  001E26  2560               	addwf	IncludeMacCommandsResponse@macBuffer& (0+255),w,b
 22173  001E28  6EE9               	movwf	fsr0l,c
 22174  001E2A  50F4               	movf	prodh,w,c
 22175  001E2C  2161               	addwfc	(IncludeMacCommandsResponse@macBuffer+1)& (0+255),w,b
 22176  001E2E  6EEA               	movwf	fsr0h,c
 22177  001E30  CFDF FFEF          	movff	indf2,indf0
 22178  001E34  D78B               	goto	L12
 22179  001E36                     l1296:
 22180                           
 22181                           ; BSR set to: 0
 22182                           
 22183                           ; BSR set to: 0
 22184  001E36  516D               	movf	IncludeMacCommandsResponse@i& (0+255),w,b
 22185  001E38  0D02               	mullw	2
 22186  001E3A  0EAE               	movlw	low (_loRa+168)
 22187  001E3C  24F3               	addwf	prodl,w,c
 22188  001E3E  6ED9               	movwf	fsr2l,c
 22189  001E40  0E02               	movlw	high (_loRa+168)
 22190  001E42  20F4               	addwfc	prodh,w,c
 22191  001E44  6EDA               	movwf	fsr2h,c
 22192  001E46  50DF               	movf	indf2,w,c
 22193                           
 22194                           ; Switch size 1, requested type "space"
 22195                           ; Number of cases is 7, Range of values is 2 to 8
 22196                           ; switch strategies available:
 22197                           ; Name         Instructions Cycles
 22198                           ; simple_byte           22    12 (average)
 22199                           ;	Chosen strategy is simple_byte
 22200  001E48  0A02               	xorlw	2	; case 2
 22201  001E4A  B4D8               	btfsc	status,2,c
 22202  001E4C  D7DC               	goto	l1314
 22203  001E4E  0A01               	xorlw	1	; case 3
 22204  001E50  B4D8               	btfsc	status,2,c
 22205  001E52  D643               	goto	l1297
 22206  001E54  0A07               	xorlw	7	; case 4
 22207  001E56  B4D8               	btfsc	status,2,c
 22208  001E58  D7DB               	goto	l1315
 22209  001E5A  0A01               	xorlw	1	; case 5
 22210  001E5C  B4D8               	btfsc	status,2,c
 22211  001E5E  D6BB               	goto	l1302
 22212  001E60  0A03               	xorlw	3	; case 6
 22213  001E62  B4D8               	btfsc	status,2,c
 22214  001E64  D737               	goto	l1306
 22215  001E66  0A01               	xorlw	1	; case 7
 22216  001E68  B4D8               	btfsc	status,2,c
 22217  001E6A  D772               	goto	l1311
 22218  001E6C  0A0F               	xorlw	15	; case 8
 22219  001E6E  B4D8               	btfsc	status,2,c
 22220  001E70  D7CF               	goto	l1315
 22221  001E72                     l1301:
 22222                           
 22223                           ; BSR set to: 0
 22224                           
 22225                           ; BSR set to: 0
 22226  001E72  2B6D               	incf	IncludeMacCommandsResponse@i& (0+255),f,b
 22227  001E74                     l1291:
 22228                           
 22229                           ; BSR set to: 0
 22230                           
 22231                           ; BSR set to: 0
 22232  001E74  0102               	movlb	2	; () banked
 22233  001E76  51AD               	movf	(_loRa+167)& (0+255),w,b
 22234  001E78  0100               	movlb	0	; () banked
 22235  001E7A  5D6D               	subwf	IncludeMacCommandsResponse@i& (0+255),w,b
 22236  001E7C  A0D8               	btfss	status,0,c
 22237  001E7E  D5E2               	goto	l1292
 22238  001E80                     u9690:
 22239                           
 22240                           ; BSR set to: 0
 22241                           ;lorawan.c: 1957: }
 22242                           ;lorawan.c: 1959: *pBufferIndex = bufferIndex;
 22243                           
 22244                           ; BSR set to: 0
 22245  001E80  C062  FFD9         	movff	IncludeMacCommandsResponse@pBufferIndex,fsr2l
 22246  001E84  C063  FFDA         	movff	IncludeMacCommandsResponse@pBufferIndex+1,fsr2h
 22247  001E88  C06E  FFDF         	movff	IncludeMacCommandsResponse@bufferIndex,indf2
 22248                           
 22249                           ; BSR set to: 0
 22250  001E8C  0012               	return		;funcret
 22251  001E8E                     __end_of_IncludeMacCommandsResponse:
 22252                           	opt stack 0
 22253                           tosu	equ	0xFFF
 22254                           tosh	equ	0xFFE
 22255                           tosl	equ	0xFFD
 22256                           pclath	equ	0xFFA
 22257                           tblptru	equ	0xFF8
 22258                           tblptrh	equ	0xFF7
 22259                           tblptrl	equ	0xFF6
 22260                           tablat	equ	0xFF5
 22261                           prodh	equ	0xFF4
 22262                           prodl	equ	0xFF3
 22263                           intcon	equ	0xFF2
 22264                           intcon2	equ	0xFF1
 22265                           intcon3	equ	0xFF0
 22266                           indf0	equ	0xFEF
 22267                           postinc0	equ	0xFEE
 22268                           fsr0h	equ	0xFEA
 22269                           fsr0l	equ	0xFE9
 22270                           wreg	equ	0xFE8
 22271                           postinc1	equ	0xFE6
 22272                           postdec1	equ	0xFE5
 22273                           plusw1	equ	0xFE3
 22274                           fsr1h	equ	0xFE2
 22275                           fsr1l	equ	0xFE1
 22276                           indf2	equ	0xFDF
 22277                           postinc2	equ	0xFDE
 22278                           postdec2	equ	0xFDD
 22279                           plusw2	equ	0xFDB
 22280                           fsr2h	equ	0xFDA
 22281                           fsr2l	equ	0xFD9
 22282                           status	equ	0xFD8
 22283                           
 22284 ;; *************** function _RADIO_GetPacketSnr *****************
 22285 ;; Defined at:
 22286 ;;		line 1429 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 22287 ;; Parameters:    Size  Location     Type
 22288 ;;		None
 22289 ;; Auto vars:     Size  Location     Type
 22290 ;;		None
 22291 ;; Return value:  Size  Location     Type
 22292 ;;                  1    wreg      char 
 22293 ;; Registers used:
 22294 ;;		wreg, status,2
 22295 ;; Tracked objects:
 22296 ;;		On entry : 0/0
 22297 ;;		On exit  : 0/0
 22298 ;;		Unchanged: 0/0
 22299 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22300 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22301 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22302 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22303 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22304 ;;Total ram usage:        0 bytes
 22305 ;; Hardware stack levels used:    1
 22306 ;; Hardware stack levels required when called:    7
 22307 ;; This function calls:
 22308 ;;		Nothing
 22309 ;; This function is called by:
 22310 ;;		_IncludeMacCommandsResponse
 22311 ;; This function uses a non-reentrant model
 22312 ;;
 22313                           
 22314                           	psect	text102
 22315  00959E                     __ptext102:
 22316                           	opt stack 0
 22317  00959E                     _RADIO_GetPacketSnr:
 22318                           	opt stack 20
 22319                           
 22320                           ;radio_driver_SX1276.c: 1431: return RadioConfiguration.packetSNR;
 22321                           
 22322                           ; BSR set to: 0
 22323                           ;incstack = 0
 22324  00959E  0101               	movlb	1	; () banked
 22325  0095A0  5189               	movf	(_RadioConfiguration+50)& (0+255),w,b
 22326  0095A2  0012               	return	
 22327  0095A4                     __end_of_RADIO_GetPacketSnr:
 22328                           	opt stack 0
 22329                           tosu	equ	0xFFF
 22330                           tosh	equ	0xFFE
 22331                           tosl	equ	0xFFD
 22332                           pclath	equ	0xFFA
 22333                           tblptru	equ	0xFF8
 22334                           tblptrh	equ	0xFF7
 22335                           tblptrl	equ	0xFF6
 22336                           tablat	equ	0xFF5
 22337                           prodh	equ	0xFF4
 22338                           prodl	equ	0xFF3
 22339                           intcon	equ	0xFF2
 22340                           intcon2	equ	0xFF1
 22341                           intcon3	equ	0xFF0
 22342                           indf0	equ	0xFEF
 22343                           postinc0	equ	0xFEE
 22344                           fsr0h	equ	0xFEA
 22345                           fsr0l	equ	0xFE9
 22346                           wreg	equ	0xFE8
 22347                           postinc1	equ	0xFE6
 22348                           postdec1	equ	0xFE5
 22349                           plusw1	equ	0xFE3
 22350                           fsr1h	equ	0xFE2
 22351                           fsr1l	equ	0xFE1
 22352                           indf2	equ	0xFDF
 22353                           postinc2	equ	0xFDE
 22354                           postdec2	equ	0xFDD
 22355                           plusw2	equ	0xFDB
 22356                           fsr2h	equ	0xFDA
 22357                           fsr2l	equ	0xFD9
 22358                           status	equ	0xFD8
 22359                           
 22360 ;; *************** function _FindSmallestDataRate *****************
 22361 ;; Defined at:
 22362 ;;		line 1963 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 22363 ;; Parameters:    Size  Location     Type
 22364 ;;		None
 22365 ;; Auto vars:     Size  Location     Type
 22366 ;;  dataRate        1    3[BANK0 ] unsigned char 
 22367 ;;  i               1    2[BANK0 ] unsigned char 
 22368 ;;  found           1    1[BANK0 ] unsigned char 
 22369 ;; Return value:  Size  Location     Type
 22370 ;;                  1    wreg      unsigned char 
 22371 ;; Registers used:
 22372 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 22373 ;; Tracked objects:
 22374 ;;		On entry : 0/0
 22375 ;;		On exit  : 0/0
 22376 ;;		Unchanged: 0/0
 22377 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22378 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22379 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22380 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22381 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22382 ;;Total ram usage:        4 bytes
 22383 ;; Hardware stack levels used:    1
 22384 ;; Hardware stack levels required when called:    7
 22385 ;; This function calls:
 22386 ;;		Nothing
 22387 ;; This function is called by:
 22388 ;;		_AckRetransmissionCallback
 22389 ;;		_AssemblePacket
 22390 ;; This function uses a non-reentrant model
 22391 ;;
 22392                           
 22393                           	psect	text103
 22394  006B64                     __ptext103:
 22395                           	opt stack 0
 22396  006B64                     _FindSmallestDataRate:
 22397                           	opt stack 21
 22398                           
 22399                           ;lorawan.c: 1965: uint8_t i = 0, dataRate;
 22400                           
 22401                           ; BSR set to: 1
 22402                           ;incstack = 0
 22403  006B64  0E00               	movlw	0
 22404  006B66  0100               	movlb	0	; () banked
 22405  006B68  6F62               	movwf	FindSmallestDataRate@i& (0+255),b
 22406                           
 22407                           ;lorawan.c: 1966: bool found = 0;
 22408  006B6A  0E00               	movlw	0
 22409  006B6C  6F61               	movwf	FindSmallestDataRate@found& (0+255),b
 22410                           
 22411                           ; BSR set to: 0
 22412                           ;lorawan.c: 1968: if (loRa.currentDataRate > loRa.minDataRate)
 22413  006B6E  0102               	movlb	2	; () banked
 22414  006B70  51E5               	movf	(_loRa+223)& (0+255),w,b
 22415  006B72  5DF1               	subwf	(_loRa+235)& (0+255),w,b
 22416  006B74  B0D8               	btfsc	status,0,c
 22417  006B76  D062               	goto	l1332
 22418                           
 22419                           ; BSR set to: 2
 22420                           ;lorawan.c: 1969: {
 22421                           ;lorawan.c: 1970: dataRate = loRa.currentDataRate - 1;
 22422  006B78  05E5               	decf	(_loRa+223)& (0+255),w,b
 22423  006B7A  0100               	movlb	0	; () banked
 22424  006B7C  D050               	goto	L13
 22425  006B7E                     
 22426                           ; BSR set to: 0
 22427                           ;lorawan.c: 1973: {
 22428                           ;lorawan.c: 1974: for ( i = 0; i < loRa.maxChannels; i++ )
 22429                           
 22430                           ; BSR set to: 0
 22431  006B7E  0E00               	movlw	0
 22432  006B80  6F62               	movwf	FindSmallestDataRate@i& (0+255),b
 22433  006B82  D03D               	goto	l1324
 22434  006B84                     
 22435                           ; BSR set to: 0
 22436                           ;lorawan.c: 1975: {
 22437                           ;lorawan.c: 1976: if ( (dataRate >= Channels[i].dataRange.min) && (dataRate <= Channels[
      +                          i].dataRange.max ) && ( Channels[i].status == 1 ) )
 22438                           
 22439                           ; BSR set to: 0
 22440  006B84  5162               	movf	FindSmallestDataRate@i& (0+255),w,b
 22441  006B86  0D0E               	mullw	14
 22442  006B88  0E05               	movlw	5
 22443  006B8A  26F3               	addwf	prodl,f,c
 22444  006B8C  0E00               	movlw	0
 22445  006B8E  22F4               	addwfc	prodh,f,c
 22446  006B90  0E00               	movlw	low _Channels
 22447  006B92  24F3               	addwf	prodl,w,c
 22448  006B94  6ED9               	movwf	fsr2l,c
 22449  006B96  0E04               	movlw	high _Channels
 22450  006B98  20F4               	addwfc	prodh,w,c
 22451  006B9A  6EDA               	movwf	fsr2h,c
 22452  006B9C  0104               	movlb	4	; () banked
 22453  006B9E  50DF               	movf	223,w,c
 22454  006BA0  0B0F               	andlw	15
 22455  006BA2  0100               	movlb	0	; () banked
 22456  006BA4  6F60               	movwf	??_FindSmallestDataRate& (0+255),b
 22457  006BA6  5160               	movf	??_FindSmallestDataRate& (0+255),w,b
 22458  006BA8  5D63               	subwf	FindSmallestDataRate@dataRate& (0+255),w,b
 22459  006BAA  A0D8               	btfss	status,0,c
 22460  006BAC  D027               	goto	l1326
 22461                           
 22462                           ; BSR set to: 0
 22463  006BAE  5162               	movf	FindSmallestDataRate@i& (0+255),w,b
 22464  006BB0  0D0E               	mullw	14
 22465  006BB2  0E05               	movlw	5
 22466  006BB4  26F3               	addwf	prodl,f,c
 22467  006BB6  0E00               	movlw	0
 22468  006BB8  22F4               	addwfc	prodh,f,c
 22469  006BBA  0E00               	movlw	low _Channels
 22470  006BBC  24F3               	addwf	prodl,w,c
 22471  006BBE  6ED9               	movwf	fsr2l,c
 22472  006BC0  0E04               	movlw	high _Channels
 22473  006BC2  20F4               	addwfc	prodh,w,c
 22474  006BC4  6EDA               	movwf	fsr2h,c
 22475  006BC6  0104               	movlb	4	; () banked
 22476  006BC8  38DF               	swapf	223,w,c
 22477  006BCA  0B0F               	andlw	15
 22478  006BCC  0100               	movlb	0	; () banked
 22479  006BCE  6F60               	movwf	??_FindSmallestDataRate& (0+255),b
 22480  006BD0  5163               	movf	FindSmallestDataRate@dataRate& (0+255),w,b
 22481  006BD2  5D60               	subwf	??_FindSmallestDataRate& (0+255),w,b
 22482  006BD4  A0D8               	btfss	status,0,c
 22483  006BD6  D012               	goto	l1326
 22484                           
 22485                           ; BSR set to: 0
 22486  006BD8  5162               	movf	FindSmallestDataRate@i& (0+255),w,b
 22487  006BDA  0D0E               	mullw	14
 22488  006BDC  0E04               	movlw	4
 22489  006BDE  26F3               	addwf	prodl,f,c
 22490  006BE0  0E00               	movlw	0
 22491  006BE2  22F4               	addwfc	prodh,f,c
 22492  006BE4  0E00               	movlw	low _Channels
 22493  006BE6  24F3               	addwf	prodl,w,c
 22494  006BE8  6ED9               	movwf	fsr2l,c
 22495  006BEA  0E04               	movlw	high _Channels
 22496  006BEC  20F4               	addwfc	prodh,w,c
 22497  006BEE  6EDA               	movwf	fsr2h,c
 22498  006BF0  04DE               	decf	postinc2,w,c
 22499  006BF2  A4D8               	btfss	status,2,c
 22500  006BF4  D003               	goto	l1326
 22501                           
 22502                           ; BSR set to: 0
 22503                           ;lorawan.c: 1977: {
 22504                           ;lorawan.c: 1978: found = 1;
 22505  006BF6  0E01               	movlw	1
 22506  006BF8  6F61               	movwf	FindSmallestDataRate@found& (0+255),b
 22507                           
 22508                           ;lorawan.c: 1979: break;
 22509  006BFA  D007               	goto	u9300
 22510  006BFC                     l1326:
 22511                           
 22512                           ; BSR set to: 0
 22513                           
 22514                           ; BSR set to: 0
 22515  006BFC  2B62               	incf	FindSmallestDataRate@i& (0+255),f,b
 22516  006BFE                     l1324:
 22517                           
 22518                           ; BSR set to: 0
 22519                           
 22520                           ; BSR set to: 0
 22521  006BFE  0102               	movlb	2	; () banked
 22522  006C00  51F3               	movf	(_loRa+237)& (0+255),w,b
 22523  006C02  0100               	movlb	0	; () banked
 22524  006C04  5D62               	subwf	FindSmallestDataRate@i& (0+255),w,b
 22525  006C06  A0D8               	btfss	status,0,c
 22526  006C08  D7BD               	goto	l1325
 22527  006C0A                     u9300:
 22528                           
 22529                           ; BSR set to: 0
 22530                           ;lorawan.c: 1980: }
 22531                           ;lorawan.c: 1981: }
 22532                           ;lorawan.c: 1982: if ( (found == 0) && (dataRate > loRa.minDataRate) )
 22533                           
 22534                           ; BSR set to: 0
 22535  006C0A  5161               	movf	FindSmallestDataRate@found& (0+255),w,b
 22536  006C0C  A4D8               	btfss	status,2,c
 22537  006C0E  D008               	goto	l1328
 22538                           
 22539                           ; BSR set to: 0
 22540  006C10  5163               	movf	FindSmallestDataRate@dataRate& (0+255),w,b
 22541  006C12  0102               	movlb	2	; () banked
 22542  006C14  5DF1               	subwf	(_loRa+235)& (0+255),w,b
 22543  006C16  B0D8               	btfsc	status,0,c
 22544  006C18  D003               	goto	l1328
 22545                           
 22546                           ; BSR set to: 2
 22547                           ;lorawan.c: 1983: {
 22548                           ;lorawan.c: 1984: dataRate = dataRate - 1;
 22549  006C1A  0100               	movlb	0	; () banked
 22550  006C1C  0563               	decf	FindSmallestDataRate@dataRate& (0+255),w,b
 22551  006C1E                     L13:
 22552  006C1E  6F63               	movwf	FindSmallestDataRate@dataRate& (0+255),b
 22553  006C20                     l1328:
 22554                           
 22555                           ; BSR set to: 0
 22556                           
 22557                           ; BSR set to: 0
 22558  006C20  0100               	movlb	0	; () banked
 22559  006C22  5161               	movf	FindSmallestDataRate@found& (0+255),w,b
 22560  006C24  A4D8               	btfss	status,2,c
 22561  006C26  D006               	goto	u9340
 22562                           
 22563                           ; BSR set to: 0
 22564  006C28  0102               	movlb	2	; () banked
 22565  006C2A  51F1               	movf	(_loRa+235)& (0+255),w,b
 22566  006C2C  0100               	movlb	0	; () banked
 22567  006C2E  5D63               	subwf	FindSmallestDataRate@dataRate& (0+255),w,b
 22568  006C30  B0D8               	btfsc	status,0,c
 22569  006C32  D7A5               	goto	l1323
 22570  006C34                     u9340:
 22571                           
 22572                           ; BSR set to: 0
 22573                           ;lorawan.c: 1985: }
 22574                           ;lorawan.c: 1986: }
 22575                           ;lorawan.c: 1988: if (found == 1)
 22576                           
 22577                           ; BSR set to: 0
 22578                           
 22579                           ; BSR set to: 0
 22580  006C34  0561               	decf	FindSmallestDataRate@found& (0+255),w,b
 22581  006C36  B4D8               	btfsc	status,2,c
 22582                           
 22583                           ; BSR set to: 0
 22584                           ;lorawan.c: 1989: {
 22585                           ;lorawan.c: 1990: loRa.currentDataRate = dataRate;
 22586  006C38  C063  F2E5         	movff	FindSmallestDataRate@dataRate,_loRa+223
 22587  006C3C                     l1332:
 22588                           
 22589                           ;lorawan.c: 1991: }
 22590                           ;lorawan.c: 1992: }
 22591                           ;lorawan.c: 1994: return found;
 22592                           
 22593                           ; BSR set to: 0
 22594                           
 22595                           ; BSR set to: 0
 22596  006C3C  0100               	movlb	0	; () banked
 22597  006C3E  5161               	movf	FindSmallestDataRate@found& (0+255),w,b
 22598  006C40  0012               	return	
 22599  006C42                     __end_of_FindSmallestDataRate:
 22600                           	opt stack 0
 22601                           tosu	equ	0xFFF
 22602                           tosh	equ	0xFFE
 22603                           tosl	equ	0xFFD
 22604                           pclath	equ	0xFFA
 22605                           tblptru	equ	0xFF8
 22606                           tblptrh	equ	0xFF7
 22607                           tblptrl	equ	0xFF6
 22608                           tablat	equ	0xFF5
 22609                           prodh	equ	0xFF4
 22610                           prodl	equ	0xFF3
 22611                           intcon	equ	0xFF2
 22612                           intcon2	equ	0xFF1
 22613                           intcon3	equ	0xFF0
 22614                           indf0	equ	0xFEF
 22615                           postinc0	equ	0xFEE
 22616                           fsr0h	equ	0xFEA
 22617                           fsr0l	equ	0xFE9
 22618                           wreg	equ	0xFE8
 22619                           postinc1	equ	0xFE6
 22620                           postdec1	equ	0xFE5
 22621                           plusw1	equ	0xFE3
 22622                           fsr1h	equ	0xFE2
 22623                           fsr1l	equ	0xFE1
 22624                           indf2	equ	0xFDF
 22625                           postinc2	equ	0xFDE
 22626                           postdec2	equ	0xFDD
 22627                           plusw2	equ	0xFDB
 22628                           fsr2h	equ	0xFDA
 22629                           fsr2l	equ	0xFD9
 22630                           status	equ	0xFD8
 22631                           
 22632 ;; *************** function _EncryptFRMPayload *****************
 22633 ;; Defined at:
 22634 ;;		line 2205 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 22635 ;; Parameters:    Size  Location     Type
 22636 ;;  buffer          2   49[BANK0 ] PTR unsigned char 
 22637 ;;		 -> tosend(5), radioBuffer(271), LORAWAN_RxDone@hdr(2), NULL(0), 
 22638 ;;  bufferLength    1   51[BANK0 ] unsigned char 
 22639 ;;  dir             1   52[BANK0 ] unsigned char 
 22640 ;;  frameCounter    4   53[BANK0 ] unsigned long 
 22641 ;;  key             2   57[BANK0 ] PTR unsigned char 
 22642 ;;		 -> loRa.activationParameters(105), loRa(245), 
 22643 ;;  macBufferInd    1   59[BANK0 ] unsigned char 
 22644 ;;  bufferToBeEn    2   60[BANK0 ] PTR unsigned char 
 22645 ;;		 -> radioBuffer(271), macBuffer(271), 
 22646 ;;  multicastSta    1   62[BANK0 ] unsigned char 
 22647 ;; Auto vars:     Size  Location     Type
 22648 ;;  j               1   70[BANK0 ] unsigned char 
 22649 ;;  i               1   69[BANK0 ] unsigned char 
 22650 ;;  k               1   68[BANK0 ] unsigned char 
 22651 ;; Return value:  Size  Location     Type
 22652 ;;                  1    wreg      void 
 22653 ;; Registers used:
 22654 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22655 ;; Tracked objects:
 22656 ;;		On entry : 0/0
 22657 ;;		On exit  : 0/0
 22658 ;;		Unchanged: 0/0
 22659 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22660 ;;      Params:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22661 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22662 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22663 ;;      Totals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22664 ;;Total ram usage:       22 bytes
 22665 ;; Hardware stack levels used:    1
 22666 ;; Hardware stack levels required when called:   10
 22667 ;; This function calls:
 22668 ;;		_AESEncodeLoRa
 22669 ;;		_AssembleEncryptionBlock
 22670 ;;		___awdiv
 22671 ;; This function is called by:
 22672 ;;		_LORAWAN_RxDone
 22673 ;;		_AssemblePacket
 22674 ;; This function uses a non-reentrant model
 22675 ;;
 22676                           
 22677                           	psect	text104
 22678  004F60                     __ptext104:
 22679                           	opt stack 0
 22680  004F60                     _EncryptFRMPayload:
 22681                           	opt stack 18
 22682                           
 22683                           ;lorawan.c: 2207: uint8_t k = 0, i = 0, j = 0;
 22684                           
 22685                           ; BSR set to: 0
 22686                           ;incstack = 0
 22687  004F60  0E00               	movlw	0
 22688  004F62  0100               	movlb	0	; () banked
 22689  004F64  6FA4               	movwf	EncryptFRMPayload@k& (0+255),b
 22690  004F66  0E00               	movlw	0
 22691  004F68  6FA5               	movwf	EncryptFRMPayload@i& (0+255),b
 22692  004F6A  0E00               	movlw	0
 22693  004F6C  6FA6               	movwf	EncryptFRMPayload@j& (0+255),b
 22694                           
 22695                           ; BSR set to: 0
 22696                           ;lorawan.c: 2209: k = bufferLength / 16;
 22697  004F6E  C093  F066         	movff	EncryptFRMPayload@bufferLength,___awdiv@dividend
 22698  004F72  6B67               	clrf	(___awdiv@dividend+1)& (0+255),b
 22699  004F74  0E00               	movlw	0
 22700  004F76  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
 22701  004F78  0E10               	movlw	16
 22702  004F7A  6F68               	movwf	___awdiv@divisor& (0+255),b
 22703  004F7C  EC84  F03C         	call	___awdiv	;wreg free
 22704  004F80  0100               	movlb	0	; () banked
 22705  004F82  5166               	movf	?___awdiv& (0+255),w,b
 22706  004F84  6FA4               	movwf	EncryptFRMPayload@k& (0+255),b
 22707                           
 22708                           ; BSR set to: 0
 22709                           ;lorawan.c: 2210: for (i = 1; i <= k; i++)
 22710  004F86  0E01               	movlw	1
 22711  004F88  6FA5               	movwf	EncryptFRMPayload@i& (0+255),b
 22712  004F8A  D05A               	goto	l1397
 22713  004F8C                     
 22714                           ; BSR set to: 0
 22715                           ;lorawan.c: 2211: {
 22716                           ;lorawan.c: 2212: AssembleEncryptionBlock (dir, frameCounter, i, 0x01, multicastStatus);
 22717                           
 22718                           ; BSR set to: 0
 22719  004F8C  C095  F06B         	movff	EncryptFRMPayload@frameCounter,AssembleEncryptionBlock@frameCounter
 22720  004F90  C096  F06C         	movff	EncryptFRMPayload@frameCounter+1,AssembleEncryptionBlock@frameCounter+1
 22721  004F94  C097  F06D         	movff	EncryptFRMPayload@frameCounter+2,AssembleEncryptionBlock@frameCounter+2
 22722  004F98  C098  F06E         	movff	EncryptFRMPayload@frameCounter+3,AssembleEncryptionBlock@frameCounter+3
 22723  004F9C  C0A5  F06F         	movff	EncryptFRMPayload@i,AssembleEncryptionBlock@blockId
 22724  004FA0  0E01               	movlw	1
 22725  004FA2  6F70               	movwf	AssembleEncryptionBlock@firstByte& (0+255),b
 22726  004FA4  C09E  F071         	movff	EncryptFRMPayload@multicastStatus,AssembleEncryptionBlock@multicastStatus
 22727  004FA8  5194               	movf	EncryptFRMPayload@dir& (0+255),w,b
 22728  004FAA  ECF0  F032         	call	_AssembleEncryptionBlock
 22729                           
 22730                           ;lorawan.c: 2213: AESEncodeLoRa(aesBuffer, key);
 22731  004FAE  0EA2               	movlw	low _aesBuffer
 22732  004FB0  0100               	movlb	0	; () banked
 22733  004FB2  6F7D               	movwf	AESEncodeLoRa@block& (0+255),b
 22734  004FB4  0E03               	movlw	high _aesBuffer
 22735  004FB6  6F7E               	movwf	(AESEncodeLoRa@block+1)& (0+255),b
 22736  004FB8  C099  F07F         	movff	EncryptFRMPayload@key,AESEncodeLoRa@key
 22737  004FBC  C09A  F080         	movff	EncryptFRMPayload@key+1,AESEncodeLoRa@key+1
 22738  004FC0  EC28  F046         	call	_AESEncodeLoRa	;wreg free
 22739                           
 22740                           ;lorawan.c: 2215: for (j = 0; j < 16; j++)
 22741  004FC4  0E00               	movlw	0
 22742  004FC6  0100               	movlb	0	; () banked
 22743  004FC8  6FA6               	movwf	EncryptFRMPayload@j& (0+255),b
 22744  004FCA                     l9907:
 22745                           
 22746                           ; BSR set to: 0
 22747  004FCA  0E0F               	movlw	15
 22748  004FCC  65A6               	cpfsgt	EncryptFRMPayload@j& (0+255),b
 22749  004FCE  D001               	goto	l1399
 22750  004FD0  D036               	goto	u9380
 22751  004FD2                     l1399:
 22752                           
 22753                           ; BSR set to: 0
 22754                           ;lorawan.c: 2216: {
 22755                           ;lorawan.c: 2217: bufferToBeEncrypted[macBufferIndex++] = aesBuffer[j] ^ buffer[16*(i-1)
      +                           + j];
 22756                           
 22757                           ; BSR set to: 0
 22758  004FD2  519B               	movf	EncryptFRMPayload@macBufferIndex& (0+255),w,b
 22759  004FD4  0D01               	mullw	1
 22760  004FD6  50F3               	movf	prodl,w,c
 22761  004FD8  259C               	addwf	EncryptFRMPayload@bufferToBeEncrypted& (0+255),w,b
 22762  004FDA  6ED9               	movwf	fsr2l,c
 22763  004FDC  50F4               	movf	prodh,w,c
 22764  004FDE  219D               	addwfc	(EncryptFRMPayload@bufferToBeEncrypted+1)& (0+255),w,b
 22765  004FE0  6EDA               	movwf	fsr2h,c
 22766  004FE2  0EF0               	movlw	240
 22767  004FE4  6F9F               	movwf	??_EncryptFRMPayload& (0+255),b
 22768  004FE6  0EFF               	movlw	255
 22769  004FE8  6FA0               	movwf	(??_EncryptFRMPayload+1)& (0+255),b
 22770  004FEA  51A5               	movf	EncryptFRMPayload@i& (0+255),w,b
 22771  004FEC  6FA1               	movwf	(??_EncryptFRMPayload+2)& (0+255),b
 22772  004FEE  6BA2               	clrf	(??_EncryptFRMPayload+3)& (0+255),b
 22773  004FF0  3BA1               	swapf	(??_EncryptFRMPayload+2)& (0+255),f,b
 22774  004FF2  3BA2               	swapf	(??_EncryptFRMPayload+3)& (0+255),f,b
 22775  004FF4  0EF0               	movlw	240
 22776  004FF6  17A2               	andwf	(??_EncryptFRMPayload+3)& (0+255),f,b
 22777  004FF8  51A1               	movf	(??_EncryptFRMPayload+2)& (0+255),w,b
 22778  004FFA  0B0F               	andlw	15
 22779  004FFC  13A2               	iorwf	(??_EncryptFRMPayload+3)& (0+255),f,b
 22780  004FFE  0EF0               	movlw	240
 22781  005000  17A1               	andwf	(??_EncryptFRMPayload+2)& (0+255),f,b
 22782  005002  51A6               	movf	EncryptFRMPayload@j& (0+255),w,b
 22783  005004  27A1               	addwf	(??_EncryptFRMPayload+2)& (0+255),f,b
 22784  005006  0E00               	movlw	0
 22785  005008  23A2               	addwfc	(??_EncryptFRMPayload+3)& (0+255),f,b
 22786  00500A  519F               	movf	??_EncryptFRMPayload& (0+255),w,b
 22787  00500C  27A1               	addwf	(??_EncryptFRMPayload+2)& (0+255),f,b
 22788  00500E  51A0               	movf	(??_EncryptFRMPayload+1)& (0+255),w,b
 22789  005010  23A2               	addwfc	(??_EncryptFRMPayload+3)& (0+255),f,b
 22790  005012  51A1               	movf	(??_EncryptFRMPayload+2)& (0+255),w,b
 22791  005014  2591               	addwf	EncryptFRMPayload@buffer& (0+255),w,b
 22792  005016  6EE9               	movwf	fsr0l,c
 22793  005018  51A2               	movf	(??_EncryptFRMPayload+3)& (0+255),w,b
 22794  00501A  2192               	addwfc	(EncryptFRMPayload@buffer+1)& (0+255),w,b
 22795  00501C  6EEA               	movwf	fsr0h,c
 22796  00501E  50EF               	movf	indf0,w,c
 22797  005020  6FA3               	movwf	(??_EncryptFRMPayload+4)& (0+255),b
 22798  005022  51A6               	movf	EncryptFRMPayload@j& (0+255),w,b
 22799  005024  0D01               	mullw	1
 22800  005026  0EA2               	movlw	low _aesBuffer
 22801  005028  24F3               	addwf	prodl,w,c
 22802  00502A  6EE9               	movwf	fsr0l,c
 22803  00502C  0E03               	movlw	high _aesBuffer
 22804  00502E  20F4               	addwfc	prodh,w,c
 22805  005030  6EEA               	movwf	fsr0h,c
 22806  005032  50EF               	movf	indf0,w,c
 22807  005034  19A3               	xorwf	(??_EncryptFRMPayload+4)& (0+255),w,b
 22808  005036  6EDF               	movwf	indf2,c
 22809                           
 22810                           ; BSR set to: 0
 22811  005038  2B9B               	incf	EncryptFRMPayload@macBufferIndex& (0+255),f,b
 22812                           
 22813                           ; BSR set to: 0
 22814  00503A  2BA6               	incf	EncryptFRMPayload@j& (0+255),f,b
 22815  00503C  D7C6               	goto	l9907
 22816  00503E                     u9380:
 22817                           
 22818                           ; BSR set to: 0
 22819                           
 22820                           ; BSR set to: 0
 22821  00503E  2BA5               	incf	EncryptFRMPayload@i& (0+255),f,b
 22822  005040                     l1397:
 22823                           
 22824                           ; BSR set to: 0
 22825                           
 22826                           ; BSR set to: 0
 22827  005040  51A5               	movf	EncryptFRMPayload@i& (0+255),w,b
 22828  005042  5DA4               	subwf	EncryptFRMPayload@k& (0+255),w,b
 22829  005044  B0D8               	btfsc	status,0,c
 22830  005046  D7A2               	goto	l1398
 22831                           
 22832                           ; BSR set to: 0
 22833                           ;lorawan.c: 2218: }
 22834                           ;lorawan.c: 2219: }
 22835                           ;lorawan.c: 2221: if ( (bufferLength % 16) != 0 )
 22836                           
 22837                           ; BSR set to: 0
 22838  005048  C093  F09F         	movff	EncryptFRMPayload@bufferLength,??_EncryptFRMPayload
 22839  00504C  0E0F               	movlw	15
 22840  00504E  179F               	andwf	??_EncryptFRMPayload& (0+255),f,b
 22841  005050  B4D8               	btfsc	status,2,c
 22842  005052  0012               	return	
 22843                           
 22844                           ; BSR set to: 0
 22845                           ;lorawan.c: 2222: {
 22846                           ;lorawan.c: 2223: AssembleEncryptionBlock (dir, frameCounter, i, 0x01, multicastStatus);
 22847  005054  C095  F06B         	movff	EncryptFRMPayload@frameCounter,AssembleEncryptionBlock@frameCounter
 22848  005058  C096  F06C         	movff	EncryptFRMPayload@frameCounter+1,AssembleEncryptionBlock@frameCounter+1
 22849  00505C  C097  F06D         	movff	EncryptFRMPayload@frameCounter+2,AssembleEncryptionBlock@frameCounter+2
 22850  005060  C098  F06E         	movff	EncryptFRMPayload@frameCounter+3,AssembleEncryptionBlock@frameCounter+3
 22851  005064  C0A5  F06F         	movff	EncryptFRMPayload@i,AssembleEncryptionBlock@blockId
 22852  005068  0E01               	movlw	1
 22853  00506A  6F70               	movwf	AssembleEncryptionBlock@firstByte& (0+255),b
 22854  00506C  C09E  F071         	movff	EncryptFRMPayload@multicastStatus,AssembleEncryptionBlock@multicastStatus
 22855  005070  5194               	movf	EncryptFRMPayload@dir& (0+255),w,b
 22856  005072  ECF0  F032         	call	_AssembleEncryptionBlock
 22857                           
 22858                           ;lorawan.c: 2224: AESEncodeLoRa (aesBuffer, key);
 22859  005076  0EA2               	movlw	low _aesBuffer
 22860  005078  0100               	movlb	0	; () banked
 22861  00507A  6F7D               	movwf	AESEncodeLoRa@block& (0+255),b
 22862  00507C  0E03               	movlw	high _aesBuffer
 22863  00507E  6F7E               	movwf	(AESEncodeLoRa@block+1)& (0+255),b
 22864  005080  C099  F07F         	movff	EncryptFRMPayload@key,AESEncodeLoRa@key
 22865  005084  C09A  F080         	movff	EncryptFRMPayload@key+1,AESEncodeLoRa@key+1
 22866  005088  EC28  F046         	call	_AESEncodeLoRa	;wreg free
 22867                           
 22868                           ;lorawan.c: 2226: for (j = 0; j < (bufferLength % 16); j++)
 22869  00508C  0E00               	movlw	0
 22870  00508E  0100               	movlb	0	; () banked
 22871  005090  6FA6               	movwf	EncryptFRMPayload@j& (0+255),b
 22872  005092  D023               	goto	l1403
 22873  005094                     
 22874                           ; BSR set to: 0
 22875                           ;lorawan.c: 2227: {
 22876                           ;lorawan.c: 2228: bufferToBeEncrypted[macBufferIndex++] = aesBuffer[j] ^ buffer[(16*k) +
      +                           j];
 22877                           
 22878                           ; BSR set to: 0
 22879  005094  519B               	movf	EncryptFRMPayload@macBufferIndex& (0+255),w,b
 22880  005096  0D01               	mullw	1
 22881  005098  50F3               	movf	prodl,w,c
 22882  00509A  259C               	addwf	EncryptFRMPayload@bufferToBeEncrypted& (0+255),w,b
 22883  00509C  6ED9               	movwf	fsr2l,c
 22884  00509E  50F4               	movf	prodh,w,c
 22885  0050A0  219D               	addwfc	(EncryptFRMPayload@bufferToBeEncrypted+1)& (0+255),w,b
 22886  0050A2  6EDA               	movwf	fsr2h,c
 22887  0050A4  51A4               	movf	EncryptFRMPayload@k& (0+255),w,b
 22888  0050A6  0D10               	mullw	16
 22889  0050A8  51A6               	movf	EncryptFRMPayload@j& (0+255),w,b
 22890  0050AA  26F3               	addwf	prodl,f,c
 22891  0050AC  0E00               	movlw	0
 22892  0050AE  22F4               	addwfc	prodh,f,c
 22893  0050B0  50F3               	movf	prodl,w,c
 22894  0050B2  2591               	addwf	EncryptFRMPayload@buffer& (0+255),w,b
 22895  0050B4  6EE9               	movwf	fsr0l,c
 22896  0050B6  50F4               	movf	prodh,w,c
 22897  0050B8  2192               	addwfc	(EncryptFRMPayload@buffer+1)& (0+255),w,b
 22898  0050BA  6EEA               	movwf	fsr0h,c
 22899  0050BC  50EF               	movf	indf0,w,c
 22900  0050BE  6F9F               	movwf	??_EncryptFRMPayload& (0+255),b
 22901  0050C0  51A6               	movf	EncryptFRMPayload@j& (0+255),w,b
 22902  0050C2  0D01               	mullw	1
 22903  0050C4  0EA2               	movlw	low _aesBuffer
 22904  0050C6  24F3               	addwf	prodl,w,c
 22905  0050C8  6EE9               	movwf	fsr0l,c
 22906  0050CA  0E03               	movlw	high _aesBuffer
 22907  0050CC  20F4               	addwfc	prodh,w,c
 22908  0050CE  6EEA               	movwf	fsr0h,c
 22909  0050D0  50EF               	movf	indf0,w,c
 22910  0050D2  199F               	xorwf	??_EncryptFRMPayload& (0+255),w,b
 22911  0050D4  6EDF               	movwf	indf2,c
 22912                           
 22913                           ; BSR set to: 0
 22914  0050D6  2B9B               	incf	EncryptFRMPayload@macBufferIndex& (0+255),f,b
 22915                           
 22916                           ; BSR set to: 0
 22917  0050D8  2BA6               	incf	EncryptFRMPayload@j& (0+255),f,b
 22918  0050DA                     l1403:
 22919                           
 22920                           ; BSR set to: 0
 22921                           
 22922                           ; BSR set to: 0
 22923  0050DA  C093  F09F         	movff	EncryptFRMPayload@bufferLength,??_EncryptFRMPayload
 22924  0050DE  0E0F               	movlw	15
 22925  0050E0  179F               	andwf	??_EncryptFRMPayload& (0+255),f,b
 22926  0050E2  519F               	movf	??_EncryptFRMPayload& (0+255),w,b
 22927  0050E4  5DA6               	subwf	EncryptFRMPayload@j& (0+255),w,b
 22928  0050E6  B0D8               	btfsc	status,0,c
 22929  0050E8  0012               	return	
 22930  0050EA  D7D4               	goto	l1404
 22931  0050EC                     __end_of_EncryptFRMPayload:
 22932                           	opt stack 0
 22933                           tosu	equ	0xFFF
 22934                           tosh	equ	0xFFE
 22935                           tosl	equ	0xFFD
 22936                           pclath	equ	0xFFA
 22937                           tblptru	equ	0xFF8
 22938                           tblptrh	equ	0xFF7
 22939                           tblptrl	equ	0xFF6
 22940                           tablat	equ	0xFF5
 22941                           prodh	equ	0xFF4
 22942                           prodl	equ	0xFF3
 22943                           intcon	equ	0xFF2
 22944                           intcon2	equ	0xFF1
 22945                           intcon3	equ	0xFF0
 22946                           indf0	equ	0xFEF
 22947                           postinc0	equ	0xFEE
 22948                           fsr0h	equ	0xFEA
 22949                           fsr0l	equ	0xFE9
 22950                           wreg	equ	0xFE8
 22951                           postinc1	equ	0xFE6
 22952                           postdec1	equ	0xFE5
 22953                           plusw1	equ	0xFE3
 22954                           fsr1h	equ	0xFE2
 22955                           fsr1l	equ	0xFE1
 22956                           indf2	equ	0xFDF
 22957                           postinc2	equ	0xFDE
 22958                           postdec2	equ	0xFDD
 22959                           plusw2	equ	0xFDB
 22960                           fsr2h	equ	0xFDA
 22961                           fsr2l	equ	0xFD9
 22962                           status	equ	0xFD8
 22963                           
 22964 ;; *************** function ___awdiv *****************
 22965 ;; Defined at:
 22966 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awdiv.c"
 22967 ;; Parameters:    Size  Location     Type
 22968 ;;  dividend        2    6[BANK0 ] int 
 22969 ;;  divisor         2    8[BANK0 ] int 
 22970 ;; Auto vars:     Size  Location     Type
 22971 ;;  quotient        2   12[BANK0 ] int 
 22972 ;;  sign            1   11[BANK0 ] unsigned char 
 22973 ;;  counter         1   10[BANK0 ] unsigned char 
 22974 ;; Return value:  Size  Location     Type
 22975 ;;                  2    6[BANK0 ] int 
 22976 ;; Registers used:
 22977 ;;		wreg, status,2, status,0
 22978 ;; Tracked objects:
 22979 ;;		On entry : 0/0
 22980 ;;		On exit  : 0/0
 22981 ;;		Unchanged: 0/0
 22982 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22983 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22984 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22985 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22986 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22987 ;;Total ram usage:        8 bytes
 22988 ;; Hardware stack levels used:    1
 22989 ;; Hardware stack levels required when called:    7
 22990 ;; This function calls:
 22991 ;;		Nothing
 22992 ;; This function is called by:
 22993 ;;		_EncryptFRMPayload
 22994 ;;		_main
 22995 ;; This function uses a non-reentrant model
 22996 ;;
 22997                           
 22998                           	psect	text105
 22999  007908                     __ptext105:
 23000                           	opt stack 0
 23001  007908                     ___awdiv:
 23002                           	opt stack 23
 23003                           
 23004                           ; BSR set to: 0
 23005                           ;incstack = 0
 23006  007908  0E00               	movlw	0
 23007  00790A  0100               	movlb	0	; () banked
 23008  00790C  6F6B               	movwf	___awdiv@sign& (0+255),b
 23009                           
 23010                           ; BSR set to: 0
 23011  00790E  AF69               	btfss	(___awdiv@divisor+1)& (0+255),7,b
 23012  007910  D006               	goto	l2999
 23013                           
 23014                           ; BSR set to: 0
 23015  007912  6D68               	negf	___awdiv@divisor& (0+255),b
 23016  007914  1F69               	comf	(___awdiv@divisor+1)& (0+255),f,b
 23017  007916  B0D8               	btfsc	status,0,c
 23018  007918  2B69               	incf	(___awdiv@divisor+1)& (0+255),f,b
 23019                           
 23020                           ; BSR set to: 0
 23021  00791A  0E01               	movlw	1
 23022  00791C  6F6B               	movwf	___awdiv@sign& (0+255),b
 23023  00791E                     l2999:
 23024                           
 23025                           ; BSR set to: 0
 23026                           
 23027                           ; BSR set to: 0
 23028  00791E  AF67               	btfss	(___awdiv@dividend+1)& (0+255),7,b
 23029  007920  D006               	goto	l3000
 23030                           
 23031                           ; BSR set to: 0
 23032  007922  6D66               	negf	___awdiv@dividend& (0+255),b
 23033  007924  1F67               	comf	(___awdiv@dividend+1)& (0+255),f,b
 23034  007926  B0D8               	btfsc	status,0,c
 23035  007928  2B67               	incf	(___awdiv@dividend+1)& (0+255),f,b
 23036                           
 23037                           ; BSR set to: 0
 23038  00792A  0E01               	movlw	1
 23039  00792C  1B6B               	xorwf	___awdiv@sign& (0+255),f,b
 23040  00792E                     l3000:
 23041                           
 23042                           ; BSR set to: 0
 23043                           
 23044                           ; BSR set to: 0
 23045  00792E  0E00               	movlw	0
 23046  007930  6F6D               	movwf	(___awdiv@quotient+1)& (0+255),b
 23047  007932  0E00               	movlw	0
 23048  007934  6F6C               	movwf	___awdiv@quotient& (0+255),b
 23049                           
 23050                           ; BSR set to: 0
 23051  007936  5168               	movf	___awdiv@divisor& (0+255),w,b
 23052  007938  1169               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
 23053  00793A  B4D8               	btfsc	status,2,c
 23054  00793C  D01C               	goto	l3007
 23055                           
 23056                           ; BSR set to: 0
 23057  00793E  0E01               	movlw	1
 23058  007940  6F6A               	movwf	___awdiv@counter& (0+255),b
 23059  007942  D004               	goto	l3002
 23060  007944                     
 23061                           ; BSR set to: 0
 23062                           
 23063                           ; BSR set to: 0
 23064  007944  90D8               	bcf	status,0,c
 23065  007946  3768               	rlcf	___awdiv@divisor& (0+255),f,b
 23066  007948  3769               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
 23067  00794A  2B6A               	incf	___awdiv@counter& (0+255),f,b
 23068  00794C                     l3002:
 23069                           
 23070                           ; BSR set to: 0
 23071                           
 23072                           ; BSR set to: 0
 23073  00794C  AF69               	btfss	(___awdiv@divisor+1)& (0+255),7,b
 23074  00794E  D7FA               	goto	l3003
 23075  007950                     u8910:
 23076                           
 23077                           ; BSR set to: 0
 23078                           
 23079                           ; BSR set to: 0
 23080                           
 23081                           ; BSR set to: 0
 23082  007950  90D8               	bcf	status,0,c
 23083  007952  376C               	rlcf	___awdiv@quotient& (0+255),f,b
 23084  007954  376D               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
 23085                           
 23086                           ; BSR set to: 0
 23087  007956  5168               	movf	___awdiv@divisor& (0+255),w,b
 23088  007958  5D66               	subwf	___awdiv@dividend& (0+255),w,b
 23089  00795A  5169               	movf	(___awdiv@divisor+1)& (0+255),w,b
 23090  00795C  5967               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
 23091  00795E  A0D8               	btfss	status,0,c
 23092  007960  D005               	goto	l3006
 23093                           
 23094                           ; BSR set to: 0
 23095  007962  5168               	movf	___awdiv@divisor& (0+255),w,b
 23096  007964  5F66               	subwf	___awdiv@dividend& (0+255),f,b
 23097  007966  5169               	movf	(___awdiv@divisor+1)& (0+255),w,b
 23098  007968  5B67               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
 23099                           
 23100                           ; BSR set to: 0
 23101  00796A  816C               	bsf	___awdiv@quotient& (0+255),0,b
 23102  00796C                     l3006:
 23103                           
 23104                           ; BSR set to: 0
 23105                           
 23106                           ; BSR set to: 0
 23107  00796C  90D8               	bcf	status,0,c
 23108  00796E  3369               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
 23109  007970  3368               	rrcf	___awdiv@divisor& (0+255),f,b
 23110                           
 23111                           ; BSR set to: 0
 23112  007972  2F6A               	decfsz	___awdiv@counter& (0+255),f,b
 23113  007974  D7ED               	goto	u8910
 23114  007976                     l3007:
 23115                           
 23116                           ; BSR set to: 0
 23117                           
 23118                           ; BSR set to: 0
 23119                           
 23120                           ; BSR set to: 0
 23121  007976  516B               	movf	___awdiv@sign& (0+255),w,b
 23122  007978  B4D8               	btfsc	status,2,c
 23123  00797A  D004               	goto	l3008
 23124                           
 23125                           ; BSR set to: 0
 23126  00797C  6D6C               	negf	___awdiv@quotient& (0+255),b
 23127  00797E  1F6D               	comf	(___awdiv@quotient+1)& (0+255),f,b
 23128  007980  B0D8               	btfsc	status,0,c
 23129  007982  2B6D               	incf	(___awdiv@quotient+1)& (0+255),f,b
 23130  007984                     l3008:
 23131                           
 23132                           ; BSR set to: 0
 23133                           
 23134                           ; BSR set to: 0
 23135  007984  C06C  F066         	movff	___awdiv@quotient,?___awdiv
 23136  007988  C06D  F067         	movff	___awdiv@quotient+1,?___awdiv+1
 23137  00798C  0012               	return	
 23138  00798E                     __end_of___awdiv:
 23139                           	opt stack 0
 23140                           tosu	equ	0xFFF
 23141                           tosh	equ	0xFFE
 23142                           tosl	equ	0xFFD
 23143                           pclath	equ	0xFFA
 23144                           tblptru	equ	0xFF8
 23145                           tblptrh	equ	0xFF7
 23146                           tblptrl	equ	0xFF6
 23147                           tablat	equ	0xFF5
 23148                           prodh	equ	0xFF4
 23149                           prodl	equ	0xFF3
 23150                           intcon	equ	0xFF2
 23151                           intcon2	equ	0xFF1
 23152                           intcon3	equ	0xFF0
 23153                           indf0	equ	0xFEF
 23154                           postinc0	equ	0xFEE
 23155                           fsr0h	equ	0xFEA
 23156                           fsr0l	equ	0xFE9
 23157                           wreg	equ	0xFE8
 23158                           postinc1	equ	0xFE6
 23159                           postdec1	equ	0xFE5
 23160                           plusw1	equ	0xFE3
 23161                           fsr1h	equ	0xFE2
 23162                           fsr1l	equ	0xFE1
 23163                           indf2	equ	0xFDF
 23164                           postinc2	equ	0xFDE
 23165                           postdec2	equ	0xFDD
 23166                           plusw2	equ	0xFDB
 23167                           fsr2h	equ	0xFDA
 23168                           fsr2l	equ	0xFD9
 23169                           status	equ	0xFD8
 23170                           
 23171 ;; *************** function _AssembleEncryptionBlock *****************
 23172 ;; Defined at:
 23173 ;;		line 2156 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 23174 ;; Parameters:    Size  Location     Type
 23175 ;;  dir             1    wreg     unsigned char 
 23176 ;;  frameCounter    4   11[BANK0 ] unsigned long 
 23177 ;;  blockId         1   15[BANK0 ] unsigned char 
 23178 ;;  firstByte       1   16[BANK0 ] unsigned char 
 23179 ;;  multicastSta    1   17[BANK0 ] unsigned char 
 23180 ;; Auto vars:     Size  Location     Type
 23181 ;;  dir             1   18[BANK0 ] unsigned char 
 23182 ;;  bufferIndex     1   19[BANK0 ] unsigned char 
 23183 ;; Return value:  Size  Location     Type
 23184 ;;                  1    wreg      void 
 23185 ;; Registers used:
 23186 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23187 ;; Tracked objects:
 23188 ;;		On entry : 0/0
 23189 ;;		On exit  : 0/0
 23190 ;;		Unchanged: 0/0
 23191 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23192 ;;      Params:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23193 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23194 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23195 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23196 ;;Total ram usage:        9 bytes
 23197 ;; Hardware stack levels used:    1
 23198 ;; Hardware stack levels required when called:    8
 23199 ;; This function calls:
 23200 ;;		_memcpy
 23201 ;;		_memset
 23202 ;; This function is called by:
 23203 ;;		_LORAWAN_RxDone
 23204 ;;		_AssemblePacket
 23205 ;;		_EncryptFRMPayload
 23206 ;; This function uses a non-reentrant model
 23207 ;;
 23208                           
 23209                           	psect	text106
 23210  0065E0                     __ptext106:
 23211                           	opt stack 0
 23212  0065E0                     _AssembleEncryptionBlock:
 23213                           	opt stack 19
 23214                           
 23215                           ; BSR set to: 0
 23216                           ;incstack = 0
 23217                           ;AssembleEncryptionBlock@dir stored from wreg
 23218  0065E0  0100               	movlb	0	; () banked
 23219  0065E2  6F72               	movwf	AssembleEncryptionBlock@dir& (0+255),b
 23220                           
 23221                           ;lorawan.c: 2158: uint8_t bufferIndex = 0;
 23222  0065E4  0E00               	movlw	0
 23223  0065E6  0100               	movlb	0	; () banked
 23224  0065E8  6F73               	movwf	AssembleEncryptionBlock@bufferIndex& (0+255),b
 23225                           
 23226                           ; BSR set to: 0
 23227                           ;lorawan.c: 2160: memset (aesBuffer, 0, sizeof (aesBuffer));
 23228  0065EA  0EA2               	movlw	low _aesBuffer
 23229  0065EC  6F60               	movwf	memset@p1& (0+255),b
 23230  0065EE  0E03               	movlw	high _aesBuffer
 23231  0065F0  6F61               	movwf	(memset@p1+1)& (0+255),b
 23232  0065F2  0E00               	movlw	0
 23233  0065F4  6F63               	movwf	(memset@c+1)& (0+255),b
 23234  0065F6  0E00               	movlw	0
 23235  0065F8  6F62               	movwf	memset@c& (0+255),b
 23236  0065FA  0E00               	movlw	0
 23237  0065FC  6F65               	movwf	(memset@n+1)& (0+255),b
 23238  0065FE  0E10               	movlw	16
 23239  006600  6F64               	movwf	memset@n& (0+255),b
 23240  006602  ECD6  F046         	call	_memset	;wreg free
 23241                           
 23242                           ;lorawan.c: 2162: aesBuffer[bufferIndex] = firstByte;
 23243  006606  0100               	movlb	0	; () banked
 23244  006608  5173               	movf	AssembleEncryptionBlock@bufferIndex& (0+255),w,b
 23245  00660A  0D01               	mullw	1
 23246  00660C  0EA2               	movlw	low _aesBuffer
 23247  00660E  24F3               	addwf	prodl,w,c
 23248  006610  6ED9               	movwf	fsr2l,c
 23249  006612  0E03               	movlw	high _aesBuffer
 23250  006614  20F4               	addwfc	prodh,w,c
 23251  006616  6EDA               	movwf	fsr2h,c
 23252  006618  C070  FFDF         	movff	AssembleEncryptionBlock@firstByte,indf2
 23253                           
 23254                           ; BSR set to: 0
 23255                           ;lorawan.c: 2164: bufferIndex = bufferIndex + 5;
 23256  00661C  5173               	movf	AssembleEncryptionBlock@bufferIndex& (0+255),w,b
 23257  00661E  0F05               	addlw	5
 23258  006620  6F73               	movwf	AssembleEncryptionBlock@bufferIndex& (0+255),b
 23259                           
 23260                           ; BSR set to: 0
 23261                           ;lorawan.c: 2166: aesBuffer[bufferIndex++] = dir;
 23262  006622  5173               	movf	AssembleEncryptionBlock@bufferIndex& (0+255),w,b
 23263  006624  0D01               	mullw	1
 23264  006626  0EA2               	movlw	low _aesBuffer
 23265  006628  24F3               	addwf	prodl,w,c
 23266  00662A  6ED9               	movwf	fsr2l,c
 23267  00662C  0E03               	movlw	high _aesBuffer
 23268  00662E  20F4               	addwfc	prodh,w,c
 23269  006630  6EDA               	movwf	fsr2h,c
 23270  006632  C072  FFDF         	movff	AssembleEncryptionBlock@dir,indf2
 23271                           
 23272                           ; BSR set to: 0
 23273  006636  2B73               	incf	AssembleEncryptionBlock@bufferIndex& (0+255),f,b
 23274                           
 23275                           ; BSR set to: 0
 23276                           ;lorawan.c: 2168: if (0 == multicastStatus)
 23277  006638  5171               	movf	AssembleEncryptionBlock@multicastStatus& (0+255),w,b
 23278  00663A  A4D8               	btfss	status,2,c
 23279  00663C  D013               	goto	l1386
 23280                           
 23281                           ; BSR set to: 0
 23282                           ;lorawan.c: 2169: {
 23283                           ;lorawan.c: 2170: memcpy (&aesBuffer[bufferIndex], &loRa.activationParameters.deviceAddr
      +                          ess, sizeof (loRa.activationParameters.deviceAddress));
 23284  00663E  5173               	movf	AssembleEncryptionBlock@bufferIndex& (0+255),w,b
 23285  006640  0D01               	mullw	1
 23286  006642  0EA2               	movlw	low _aesBuffer
 23287  006644  24F3               	addwf	prodl,w,c
 23288  006646  6F60               	movwf	memcpy@d1& (0+255),b
 23289  006648  0E03               	movlw	high _aesBuffer
 23290  00664A  20F4               	addwfc	prodh,w,c
 23291  00664C  6F61               	movwf	(memcpy@d1+1)& (0+255),b
 23292  00664E  0E24               	movlw	low (_loRa+30)
 23293  006650  6F62               	movwf	memcpy@s1& (0+255),b
 23294  006652  0E02               	movlw	high (_loRa+30)
 23295  006654  6F63               	movwf	(memcpy@s1+1)& (0+255),b
 23296  006656  0E00               	movlw	0
 23297  006658  6F65               	movwf	(memcpy@n+1)& (0+255),b
 23298  00665A  0E04               	movlw	4
 23299  00665C  6F64               	movwf	memcpy@n& (0+255),b
 23300  00665E  EC5D  F041         	call	_memcpy	;wreg free
 23301  006662  D012               	goto	l9537
 23302  006664                     l1386:
 23303                           
 23304                           ; BSR set to: 0
 23305                           ;lorawan.c: 2173: else
 23306                           ;lorawan.c: 2174: {
 23307                           ;lorawan.c: 2175: memcpy (&aesBuffer[bufferIndex], &loRa.activationParameters.mcastDevic
      +                          eAddress, sizeof (loRa.activationParameters.mcastDeviceAddress));
 23308                           
 23309                           ; BSR set to: 0
 23310  006664  5173               	movf	AssembleEncryptionBlock@bufferIndex& (0+255),w,b
 23311  006666  0D01               	mullw	1
 23312  006668  0EA2               	movlw	low _aesBuffer
 23313  00666A  24F3               	addwf	prodl,w,c
 23314  00666C  6F60               	movwf	memcpy@d1& (0+255),b
 23315  00666E  0E03               	movlw	high _aesBuffer
 23316  006670  20F4               	addwfc	prodh,w,c
 23317  006672  6F61               	movwf	(memcpy@d1+1)& (0+255),b
 23318  006674  0E68               	movlw	low (_loRa+98)
 23319  006676  6F62               	movwf	memcpy@s1& (0+255),b
 23320  006678  0E02               	movlw	high (_loRa+98)
 23321  00667A  6F63               	movwf	(memcpy@s1+1)& (0+255),b
 23322  00667C  0E00               	movlw	0
 23323  00667E  6F65               	movwf	(memcpy@n+1)& (0+255),b
 23324  006680  0E04               	movlw	4
 23325  006682  6F64               	movwf	memcpy@n& (0+255),b
 23326  006684  EC5D  F041         	call	_memcpy	;wreg free
 23327  006688                     l9537:
 23328                           
 23329                           ;lorawan.c: 2176: bufferIndex = bufferIndex + sizeof (loRa.activationParameters.mcastDev
      +                          iceAddress);
 23330  006688  0100               	movlb	0	; () banked
 23331  00668A  5173               	movf	AssembleEncryptionBlock@bufferIndex& (0+255),w,b
 23332  00668C  0F04               	addlw	4
 23333  00668E  6F73               	movwf	AssembleEncryptionBlock@bufferIndex& (0+255),b
 23334                           
 23335                           ; BSR set to: 0
 23336                           ;lorawan.c: 2177: }
 23337                           ;lorawan.c: 2179: memcpy (&aesBuffer[bufferIndex], &frameCounter, sizeof (frameCounter))
      +                          ;
 23338                           
 23339                           ; BSR set to: 0
 23340  006690  5173               	movf	AssembleEncryptionBlock@bufferIndex& (0+255),w,b
 23341  006692  0D01               	mullw	1
 23342  006694  0EA2               	movlw	low _aesBuffer
 23343  006696  24F3               	addwf	prodl,w,c
 23344  006698  6F60               	movwf	memcpy@d1& (0+255),b
 23345  00669A  0E03               	movlw	high _aesBuffer
 23346  00669C  20F4               	addwfc	prodh,w,c
 23347  00669E  6F61               	movwf	(memcpy@d1+1)& (0+255),b
 23348  0066A0  0E6B               	movlw	low AssembleEncryptionBlock@frameCounter
 23349  0066A2  6F62               	movwf	memcpy@s1& (0+255),b
 23350  0066A4  0E00               	movlw	high AssembleEncryptionBlock@frameCounter
 23351  0066A6  6F63               	movwf	(memcpy@s1+1)& (0+255),b
 23352  0066A8  0E00               	movlw	0
 23353  0066AA  6F65               	movwf	(memcpy@n+1)& (0+255),b
 23354  0066AC  0E04               	movlw	4
 23355  0066AE  6F64               	movwf	memcpy@n& (0+255),b
 23356  0066B0  EC5D  F041         	call	_memcpy	;wreg free
 23357                           
 23358                           ;lorawan.c: 2180: bufferIndex = bufferIndex + sizeof (frameCounter) ;
 23359  0066B4  0100               	movlb	0	; () banked
 23360  0066B6  5173               	movf	AssembleEncryptionBlock@bufferIndex& (0+255),w,b
 23361  0066B8  0F04               	addlw	4
 23362  0066BA  6F73               	movwf	AssembleEncryptionBlock@bufferIndex& (0+255),b
 23363                           
 23364                           ; BSR set to: 0
 23365                           ;lorawan.c: 2182: bufferIndex ++;
 23366  0066BC  2B73               	incf	AssembleEncryptionBlock@bufferIndex& (0+255),f,b
 23367                           
 23368                           ; BSR set to: 0
 23369                           ;lorawan.c: 2184: aesBuffer[bufferIndex] = blockId;
 23370  0066BE  5173               	movf	AssembleEncryptionBlock@bufferIndex& (0+255),w,b
 23371  0066C0  0D01               	mullw	1
 23372  0066C2  0EA2               	movlw	low _aesBuffer
 23373  0066C4  24F3               	addwf	prodl,w,c
 23374  0066C6  6ED9               	movwf	fsr2l,c
 23375  0066C8  0E03               	movlw	high _aesBuffer
 23376  0066CA  20F4               	addwfc	prodh,w,c
 23377  0066CC  6EDA               	movwf	fsr2h,c
 23378  0066CE  C06F  FFDF         	movff	AssembleEncryptionBlock@blockId,indf2
 23379                           
 23380                           ; BSR set to: 0
 23381  0066D2  0012               	return		;funcret
 23382  0066D4                     __end_of_AssembleEncryptionBlock:
 23383                           	opt stack 0
 23384                           tosu	equ	0xFFF
 23385                           tosh	equ	0xFFE
 23386                           tosl	equ	0xFFD
 23387                           pclath	equ	0xFFA
 23388                           tblptru	equ	0xFF8
 23389                           tblptrh	equ	0xFF7
 23390                           tblptrl	equ	0xFF6
 23391                           tablat	equ	0xFF5
 23392                           prodh	equ	0xFF4
 23393                           prodl	equ	0xFF3
 23394                           intcon	equ	0xFF2
 23395                           intcon2	equ	0xFF1
 23396                           intcon3	equ	0xFF0
 23397                           indf0	equ	0xFEF
 23398                           postinc0	equ	0xFEE
 23399                           fsr0h	equ	0xFEA
 23400                           fsr0l	equ	0xFE9
 23401                           wreg	equ	0xFE8
 23402                           postinc1	equ	0xFE6
 23403                           postdec1	equ	0xFE5
 23404                           plusw1	equ	0xFE3
 23405                           fsr1h	equ	0xFE2
 23406                           fsr1l	equ	0xFE1
 23407                           indf2	equ	0xFDF
 23408                           postinc2	equ	0xFDE
 23409                           postdec2	equ	0xFDD
 23410                           plusw2	equ	0xFDB
 23411                           fsr2h	equ	0xFDA
 23412                           fsr2l	equ	0xFD9
 23413                           status	equ	0xFD8
 23414                           
 23415 ;; *************** function _CountfOptsLength *****************
 23416 ;; Defined at:
 23417 ;;		line 2134 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 23418 ;; Parameters:    Size  Location     Type
 23419 ;;		None
 23420 ;; Auto vars:     Size  Location     Type
 23421 ;;  i               1    7[BANK0 ] unsigned char 
 23422 ;;  macCommandLe    1    6[BANK0 ] unsigned char 
 23423 ;; Return value:  Size  Location     Type
 23424 ;;                  1    wreg      unsigned char 
 23425 ;; Registers used:
 23426 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 23427 ;; Tracked objects:
 23428 ;;		On entry : 0/0
 23429 ;;		On exit  : 0/0
 23430 ;;		Unchanged: 0/0
 23431 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23432 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23433 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23434 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23435 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23436 ;;Total ram usage:        8 bytes
 23437 ;; Hardware stack levels used:    1
 23438 ;; Hardware stack levels required when called:    7
 23439 ;; This function calls:
 23440 ;;		Nothing
 23441 ;; This function is called by:
 23442 ;;		_LORAWAN_GetMaxPayloadSize
 23443 ;;		_AssemblePacket
 23444 ;; This function uses a non-reentrant model
 23445 ;;
 23446                           
 23447                           	psect	text107
 23448  006F98                     __ptext107:
 23449                           	opt stack 0
 23450  006F98                     _CountfOptsLength:
 23451                           	opt stack 21
 23452                           
 23453                           ;lorawan.c: 2136: uint8_t i, macCommandLength=0;
 23454                           
 23455                           ; BSR set to: 0
 23456                           ;incstack = 0
 23457  006F98  0E00               	movlw	0
 23458  006F9A  0100               	movlb	0	; () banked
 23459  006F9C  6F66               	movwf	CountfOptsLength@macCommandLength& (0+255),b
 23460                           
 23461                           ;lorawan.c: 2138: for (i = 0; i < loRa.crtMacCmdIndex; i++)
 23462  006F9E  0E00               	movlw	0
 23463  006FA0  6F67               	movwf	CountfOptsLength@i& (0+255),b
 23464  006FA2  D057               	goto	l1377
 23465  006FA4                     
 23466                           ; BSR set to: 0
 23467                           ;lorawan.c: 2139: {
 23468                           ;lorawan.c: 2140: if(loRa.macCommands[i].receivedCid != 0xFF)
 23469                           
 23470                           ; BSR set to: 0
 23471  006FA4  5167               	movf	CountfOptsLength@i& (0+255),w,b
 23472  006FA6  0D02               	mullw	2
 23473  006FA8  0EAE               	movlw	low (_loRa+168)
 23474  006FAA  24F3               	addwf	prodl,w,c
 23475  006FAC  6ED9               	movwf	fsr2l,c
 23476  006FAE  0E02               	movlw	high (_loRa+168)
 23477  006FB0  20F4               	addwfc	prodh,w,c
 23478  006FB2  6EDA               	movwf	fsr2h,c
 23479  006FB4  28DE               	incf	postinc2,w,c
 23480  006FB6  B4D8               	btfsc	status,2,c
 23481  006FB8  D04B               	goto	l1381
 23482                           
 23483                           ; BSR set to: 0
 23484                           ;lorawan.c: 2141: {
 23485                           ;lorawan.c: 2142: if((macCommandLength + macEndDevCmdReplyLen[loRa.macCommands[i].receiv
      +                          edCid - 2]) <= 0x0F)
 23486  006FBA  0EFE               	movlw	254
 23487  006FBC  6F60               	movwf	??_CountfOptsLength& (0+255),b
 23488  006FBE  0EFF               	movlw	255
 23489  006FC0  6F61               	movwf	(??_CountfOptsLength+1)& (0+255),b
 23490  006FC2  5167               	movf	CountfOptsLength@i& (0+255),w,b
 23491  006FC4  0D02               	mullw	2
 23492  006FC6  0EAE               	movlw	low (_loRa+168)
 23493  006FC8  24F3               	addwf	prodl,w,c
 23494  006FCA  6ED9               	movwf	fsr2l,c
 23495  006FCC  0E02               	movlw	high (_loRa+168)
 23496  006FCE  20F4               	addwfc	prodh,w,c
 23497  006FD0  6EDA               	movwf	fsr2h,c
 23498  006FD2  50DF               	movf	indf2,w,c
 23499  006FD4  6F62               	movwf	(??_CountfOptsLength+2)& (0+255),b
 23500  006FD6  6B63               	clrf	(??_CountfOptsLength+3)& (0+255),b
 23501  006FD8  5160               	movf	??_CountfOptsLength& (0+255),w,b
 23502  006FDA  2762               	addwf	(??_CountfOptsLength+2)& (0+255),f,b
 23503  006FDC  5161               	movf	(??_CountfOptsLength+1)& (0+255),w,b
 23504  006FDE  2363               	addwfc	(??_CountfOptsLength+3)& (0+255),f,b
 23505  006FE0  0E95               	movlw	low _macEndDevCmdReplyLen
 23506  006FE2  2562               	addwf	(??_CountfOptsLength+2)& (0+255),w,b
 23507  006FE4  6EF6               	movwf	tblptrl,c
 23508  006FE6  0EFF               	movlw	high _macEndDevCmdReplyLen
 23509  006FE8  2163               	addwfc	(??_CountfOptsLength+3)& (0+255),w,b
 23510  006FEA  6EF7               	movwf	tblptrh,c
 23511  006FEC                     	if	1	;There are 3 active tblptr bytes
 23512  006FEC  6AF8               	clrf	tblptru,c
 23513  006FEE  0E00               	movlw	low (__mediumconst shr (0+16))
 23514  006FF0  22F8               	addwfc	tblptru,f,c
 23515  006FF2                     	endif
 23516  006FF2  0008               	tblrd		*
 23517  006FF4  50F5               	movf	tablat,w,c
 23518  006FF6  C066  F064         	movff	CountfOptsLength@macCommandLength,??_CountfOptsLength+4
 23519  006FFA  6B65               	clrf	(??_CountfOptsLength+5)& (0+255),b
 23520  006FFC  2764               	addwf	(??_CountfOptsLength+4)& (0+255),f,b
 23521  006FFE  0E00               	movlw	0
 23522  007000  2365               	addwfc	(??_CountfOptsLength+5)& (0+255),f,b
 23523  007002  BF65               	btfsc	(??_CountfOptsLength+5)& (0+255),7,b
 23524  007004  D006               	goto	u9540
 23525  007006  5165               	movf	(??_CountfOptsLength+5)& (0+255),w,b
 23526  007008  E12A               	bnz	l9991
 23527  00700A  0E10               	movlw	16
 23528  00700C  5D64               	subwf	(??_CountfOptsLength+4)& (0+255),w,b
 23529  00700E  B0D8               	btfsc	status,0,c
 23530  007010  D026               	goto	u9550
 23531  007012                     u9540:
 23532                           
 23533                           ; BSR set to: 0
 23534                           ;lorawan.c: 2143: {
 23535                           ;lorawan.c: 2144: macCommandLength += macEndDevCmdReplyLen[loRa.macCommands[i].receivedC
      +                          id - 2];
 23536  007012  0EFE               	movlw	254
 23537  007014  6F60               	movwf	??_CountfOptsLength& (0+255),b
 23538  007016  0EFF               	movlw	255
 23539  007018  6F61               	movwf	(??_CountfOptsLength+1)& (0+255),b
 23540  00701A  5167               	movf	CountfOptsLength@i& (0+255),w,b
 23541  00701C  0D02               	mullw	2
 23542  00701E  0EAE               	movlw	low (_loRa+168)
 23543  007020  24F3               	addwf	prodl,w,c
 23544  007022  6ED9               	movwf	fsr2l,c
 23545  007024  0E02               	movlw	high (_loRa+168)
 23546  007026  20F4               	addwfc	prodh,w,c
 23547  007028  6EDA               	movwf	fsr2h,c
 23548  00702A  50DF               	movf	indf2,w,c
 23549  00702C  6F62               	movwf	(??_CountfOptsLength+2)& (0+255),b
 23550  00702E  6B63               	clrf	(??_CountfOptsLength+3)& (0+255),b
 23551  007030  5160               	movf	??_CountfOptsLength& (0+255),w,b
 23552  007032  2762               	addwf	(??_CountfOptsLength+2)& (0+255),f,b
 23553  007034  5161               	movf	(??_CountfOptsLength+1)& (0+255),w,b
 23554  007036  2363               	addwfc	(??_CountfOptsLength+3)& (0+255),f,b
 23555  007038  0E95               	movlw	low _macEndDevCmdReplyLen
 23556  00703A  2562               	addwf	(??_CountfOptsLength+2)& (0+255),w,b
 23557  00703C  6EF6               	movwf	tblptrl,c
 23558  00703E  0EFF               	movlw	high _macEndDevCmdReplyLen
 23559  007040  2163               	addwfc	(??_CountfOptsLength+3)& (0+255),w,b
 23560  007042  6EF7               	movwf	tblptrh,c
 23561  007044                     	if	1	;There are 3 active tblptr bytes
 23562  007044  6AF8               	clrf	tblptru,c
 23563  007046  0E00               	movlw	low (__mediumconst shr (0+16))
 23564  007048  22F8               	addwfc	tblptru,f,c
 23565  00704A                     	endif
 23566  00704A  0008               	tblrd		*
 23567  00704C  50F5               	movf	tablat,w,c
 23568  00704E  2766               	addwf	CountfOptsLength@macCommandLength& (0+255),f,b
 23569  007050                     l1381:
 23570                           
 23571                           ; BSR set to: 0
 23572                           
 23573                           ; BSR set to: 0
 23574                           
 23575                           ; BSR set to: 0
 23576  007050  2B67               	incf	CountfOptsLength@i& (0+255),f,b
 23577  007052                     l1377:
 23578                           
 23579                           ; BSR set to: 0
 23580                           
 23581                           ; BSR set to: 0
 23582  007052  0102               	movlb	2	; () banked
 23583  007054  51AD               	movf	(_loRa+167)& (0+255),w,b
 23584  007056  0100               	movlb	0	; () banked
 23585  007058  5D67               	subwf	CountfOptsLength@i& (0+255),w,b
 23586  00705A  A0D8               	btfss	status,0,c
 23587  00705C  D7A3               	goto	l1378
 23588  00705E                     u9550:
 23589  00705E                     l9991:
 23590                           
 23591                           ; BSR set to: 0
 23592                           ;lorawan.c: 2149: }
 23593                           ;lorawan.c: 2150: }
 23594                           ;lorawan.c: 2151: }
 23595                           ;lorawan.c: 2153: return macCommandLength;
 23596  00705E  5166               	movf	CountfOptsLength@macCommandLength& (0+255),w,b
 23597  007060  0012               	return	
 23598  007062                     __end_of_CountfOptsLength:
 23599                           	opt stack 0
 23600                           tosu	equ	0xFFF
 23601                           tosh	equ	0xFFE
 23602                           tosl	equ	0xFFD
 23603                           pclath	equ	0xFFA
 23604                           tblptru	equ	0xFF8
 23605                           tblptrh	equ	0xFF7
 23606                           tblptrl	equ	0xFF6
 23607                           tablat	equ	0xFF5
 23608                           prodh	equ	0xFF4
 23609                           prodl	equ	0xFF3
 23610                           intcon	equ	0xFF2
 23611                           intcon2	equ	0xFF1
 23612                           intcon3	equ	0xFF0
 23613                           indf0	equ	0xFEF
 23614                           postinc0	equ	0xFEE
 23615                           fsr0h	equ	0xFEA
 23616                           fsr0l	equ	0xFE9
 23617                           wreg	equ	0xFE8
 23618                           postinc1	equ	0xFE6
 23619                           postdec1	equ	0xFE5
 23620                           plusw1	equ	0xFE3
 23621                           fsr1h	equ	0xFE2
 23622                           fsr1l	equ	0xFE1
 23623                           indf2	equ	0xFDF
 23624                           postinc2	equ	0xFDE
 23625                           postdec2	equ	0xFDD
 23626                           plusw2	equ	0xFDB
 23627                           fsr2h	equ	0xFDA
 23628                           fsr2l	equ	0xFD9
 23629                           status	equ	0xFD8
 23630                           
 23631 ;; *************** function _ExtractMic *****************
 23632 ;; Defined at:
 23633 ;;		line 2187 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 23634 ;; Parameters:    Size  Location     Type
 23635 ;;  buffer          2   11[BANK0 ] PTR unsigned char 
 23636 ;;		 -> radioBuffer(271), LORAWAN_RxDone@hdr(2), 
 23637 ;;  bufferLength    1   13[BANK0 ] unsigned char 
 23638 ;; Auto vars:     Size  Location     Type
 23639 ;;  mic             4   19[BANK0 ] unsigned long 
 23640 ;; Return value:  Size  Location     Type
 23641 ;;                  4   11[BANK0 ] unsigned long 
 23642 ;; Registers used:
 23643 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 23644 ;; Tracked objects:
 23645 ;;		On entry : 0/0
 23646 ;;		On exit  : 0/0
 23647 ;;		Unchanged: 0/0
 23648 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23649 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23650 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23651 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23652 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23653 ;;Total ram usage:       12 bytes
 23654 ;; Hardware stack levels used:    1
 23655 ;; Hardware stack levels required when called:    8
 23656 ;; This function calls:
 23657 ;;		_memcpy
 23658 ;; This function is called by:
 23659 ;;		_LORAWAN_RxDone
 23660 ;; This function uses a non-reentrant model
 23661 ;;
 23662                           
 23663                           	psect	text108
 23664  00848C                     __ptext108:
 23665                           	opt stack 0
 23666  00848C                     _ExtractMic:
 23667                           	opt stack 18
 23668                           
 23669                           ;lorawan.c: 2189: uint32_t mic = 0;
 23670                           
 23671                           ; BSR set to: 0
 23672                           ;incstack = 0
 23673  00848C  0E00               	movlw	0
 23674  00848E  0100               	movlb	0	; () banked
 23675  008490  6F73               	movwf	ExtractMic@mic& (0+255),b
 23676  008492  0E00               	movlw	0
 23677  008494  6F74               	movwf	(ExtractMic@mic+1)& (0+255),b
 23678  008496  0E00               	movlw	0
 23679  008498  6F75               	movwf	(ExtractMic@mic+2)& (0+255),b
 23680  00849A  0E00               	movlw	0
 23681  00849C  6F76               	movwf	(ExtractMic@mic+3)& (0+255),b
 23682                           
 23683                           ; BSR set to: 0
 23684                           ;lorawan.c: 2190: memcpy (&mic, &buffer[bufferLength - 4], sizeof (mic));
 23685  00849E  0E73               	movlw	low ExtractMic@mic
 23686  0084A0  6F60               	movwf	memcpy@d1& (0+255),b
 23687  0084A2  0E00               	movlw	high ExtractMic@mic
 23688  0084A4  6F61               	movwf	(memcpy@d1+1)& (0+255),b
 23689  0084A6  0EFC               	movlw	252
 23690  0084A8  6F6F               	movwf	??_ExtractMic& (0+255),b
 23691  0084AA  0EFF               	movlw	255
 23692  0084AC  6F70               	movwf	(??_ExtractMic+1)& (0+255),b
 23693  0084AE  516D               	movf	ExtractMic@bufferLength& (0+255),w,b
 23694  0084B0  6F71               	movwf	(??_ExtractMic+2)& (0+255),b
 23695  0084B2  6B72               	clrf	(??_ExtractMic+3)& (0+255),b
 23696  0084B4  516F               	movf	??_ExtractMic& (0+255),w,b
 23697  0084B6  2771               	addwf	(??_ExtractMic+2)& (0+255),f,b
 23698  0084B8  5170               	movf	(??_ExtractMic+1)& (0+255),w,b
 23699  0084BA  2372               	addwfc	(??_ExtractMic+3)& (0+255),f,b
 23700  0084BC  5171               	movf	(??_ExtractMic+2)& (0+255),w,b
 23701  0084BE  256B               	addwf	ExtractMic@buffer& (0+255),w,b
 23702  0084C0  6F62               	movwf	memcpy@s1& (0+255),b
 23703  0084C2  5172               	movf	(??_ExtractMic+3)& (0+255),w,b
 23704  0084C4  216C               	addwfc	(ExtractMic@buffer+1)& (0+255),w,b
 23705  0084C6  6F63               	movwf	(memcpy@s1+1)& (0+255),b
 23706  0084C8  0E00               	movlw	0
 23707  0084CA  6F65               	movwf	(memcpy@n+1)& (0+255),b
 23708  0084CC  0E04               	movlw	4
 23709  0084CE  6F64               	movwf	memcpy@n& (0+255),b
 23710  0084D0  EC5D  F041         	call	_memcpy	;wreg free
 23711                           
 23712                           ;lorawan.c: 2191: return mic;
 23713  0084D4  C073  F06B         	movff	ExtractMic@mic,?_ExtractMic
 23714  0084D8  C074  F06C         	movff	ExtractMic@mic+1,?_ExtractMic+1
 23715  0084DC  C075  F06D         	movff	ExtractMic@mic+2,?_ExtractMic+2
 23716  0084E0  C076  F06E         	movff	ExtractMic@mic+3,?_ExtractMic+3
 23717  0084E4  0012               	return	
 23718  0084E6                     __end_of_ExtractMic:
 23719                           	opt stack 0
 23720                           tosu	equ	0xFFF
 23721                           tosh	equ	0xFFE
 23722                           tosl	equ	0xFFD
 23723                           pclath	equ	0xFFA
 23724                           tblptru	equ	0xFF8
 23725                           tblptrh	equ	0xFF7
 23726                           tblptrl	equ	0xFF6
 23727                           tablat	equ	0xFF5
 23728                           prodh	equ	0xFF4
 23729                           prodl	equ	0xFF3
 23730                           intcon	equ	0xFF2
 23731                           intcon2	equ	0xFF1
 23732                           intcon3	equ	0xFF0
 23733                           indf0	equ	0xFEF
 23734                           postinc0	equ	0xFEE
 23735                           fsr0h	equ	0xFEA
 23736                           fsr0l	equ	0xFE9
 23737                           wreg	equ	0xFE8
 23738                           postinc1	equ	0xFE6
 23739                           postdec1	equ	0xFE5
 23740                           plusw1	equ	0xFE3
 23741                           fsr1h	equ	0xFE2
 23742                           fsr1l	equ	0xFE1
 23743                           indf2	equ	0xFDF
 23744                           postinc2	equ	0xFDE
 23745                           postdec2	equ	0xFDD
 23746                           plusw2	equ	0xFDB
 23747                           fsr2h	equ	0xFDA
 23748                           fsr2l	equ	0xFD9
 23749                           status	equ	0xFD8
 23750                           
 23751 ;; *************** function _ComputeSessionKeys *****************
 23752 ;; Defined at:
 23753 ;;		line 2062 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 23754 ;; Parameters:    Size  Location     Type
 23755 ;;  joinAcceptBu    2   49[BANK0 ] PTR struct .
 23756 ;;		 -> radioBuffer(271), LORAWAN_RxDone@hdr(2), 
 23757 ;; Auto vars:     Size  Location     Type
 23758 ;;		None
 23759 ;; Return value:  Size  Location     Type
 23760 ;;                  1    wreg      void 
 23761 ;; Registers used:
 23762 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23763 ;; Tracked objects:
 23764 ;;		On entry : 0/0
 23765 ;;		On exit  : 0/0
 23766 ;;		Unchanged: 0/0
 23767 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23768 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23769 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23770 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23771 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23772 ;;Total ram usage:        2 bytes
 23773 ;; Hardware stack levels used:    1
 23774 ;; Hardware stack levels required when called:   10
 23775 ;; This function calls:
 23776 ;;		_AESEncodeLoRa
 23777 ;;		_PrepareSessionKeys
 23778 ;; This function is called by:
 23779 ;;		_LORAWAN_RxDone
 23780 ;; This function uses a non-reentrant model
 23781 ;;
 23782                           
 23783                           	psect	text109
 23784  00798E                     __ptext109:
 23785                           	opt stack 0
 23786  00798E                     _ComputeSessionKeys:
 23787                           	opt stack 16
 23788                           
 23789                           ;lorawan.c: 2064: PrepareSessionKeys(loRa.activationParameters.applicationSessionKey, jo
      +                          inAcceptBuffer->members.appNonce, joinAcceptBuffer->members.networkId);
 23790                           
 23791                           ;incstack = 0
 23792  00798E  0E38               	movlw	low (_loRa+50)
 23793  007990  0100               	movlb	0	; () banked
 23794  007992  6F6B               	movwf	PrepareSessionKeys@sessionKey& (0+255),b
 23795  007994  0E02               	movlw	high (_loRa+50)
 23796  007996  6F6C               	movwf	(PrepareSessionKeys@sessionKey+1)& (0+255),b
 23797  007998  0E01               	movlw	1
 23798  00799A  2591               	addwf	ComputeSessionKeys@joinAcceptBuffer& (0+255),w,b
 23799  00799C  6F6D               	movwf	PrepareSessionKeys@appNonce& (0+255),b
 23800  00799E  0E00               	movlw	0
 23801  0079A0  2192               	addwfc	(ComputeSessionKeys@joinAcceptBuffer+1)& (0+255),w,b
 23802  0079A2  6F6E               	movwf	(PrepareSessionKeys@appNonce+1)& (0+255),b
 23803  0079A4  0E04               	movlw	4
 23804  0079A6  2591               	addwf	ComputeSessionKeys@joinAcceptBuffer& (0+255),w,b
 23805  0079A8  6F6F               	movwf	PrepareSessionKeys@networkId& (0+255),b
 23806  0079AA  0E00               	movlw	0
 23807  0079AC  2192               	addwfc	(ComputeSessionKeys@joinAcceptBuffer+1)& (0+255),w,b
 23808  0079AE  6F70               	movwf	(PrepareSessionKeys@networkId+1)& (0+255),b
 23809  0079B0  EC3E  F039         	call	_PrepareSessionKeys	;wreg free
 23810                           
 23811                           ;lorawan.c: 2065: loRa.activationParameters.applicationSessionKey[0] = 0x02;
 23812  0079B4  0E02               	movlw	2
 23813  0079B6  0102               	movlb	2	; () banked
 23814  0079B8  6F38               	movwf	(_loRa+50)& (0+255),b
 23815                           
 23816                           ; BSR set to: 2
 23817                           ;lorawan.c: 2066: AESEncodeLoRa(loRa.activationParameters.applicationSessionKey, loRa.ac
      +                          tivationParameters.applicationKey);
 23818  0079BA  0E38               	movlw	low (_loRa+50)
 23819  0079BC  0100               	movlb	0	; () banked
 23820  0079BE  6F7D               	movwf	AESEncodeLoRa@block& (0+255),b
 23821  0079C0  0E02               	movlw	high (_loRa+50)
 23822  0079C2  6F7E               	movwf	(AESEncodeLoRa@block+1)& (0+255),b
 23823  0079C4  0E48               	movlw	low (_loRa+66)
 23824  0079C6  6F7F               	movwf	AESEncodeLoRa@key& (0+255),b
 23825  0079C8  0E02               	movlw	high (_loRa+66)
 23826  0079CA  6F80               	movwf	(AESEncodeLoRa@key+1)& (0+255),b
 23827  0079CC  EC28  F046         	call	_AESEncodeLoRa	;wreg free
 23828                           
 23829                           ;lorawan.c: 2068: PrepareSessionKeys(loRa.activationParameters.networkSessionKey, joinAc
      +                          ceptBuffer->members.appNonce, joinAcceptBuffer->members.networkId);
 23830  0079D0  0E28               	movlw	low (_loRa+34)
 23831  0079D2  0100               	movlb	0	; () banked
 23832  0079D4  6F6B               	movwf	PrepareSessionKeys@sessionKey& (0+255),b
 23833  0079D6  0E02               	movlw	high (_loRa+34)
 23834  0079D8  6F6C               	movwf	(PrepareSessionKeys@sessionKey+1)& (0+255),b
 23835  0079DA  0E01               	movlw	1
 23836  0079DC  2591               	addwf	ComputeSessionKeys@joinAcceptBuffer& (0+255),w,b
 23837  0079DE  6F6D               	movwf	PrepareSessionKeys@appNonce& (0+255),b
 23838  0079E0  0E00               	movlw	0
 23839  0079E2  2192               	addwfc	(ComputeSessionKeys@joinAcceptBuffer+1)& (0+255),w,b
 23840  0079E4  6F6E               	movwf	(PrepareSessionKeys@appNonce+1)& (0+255),b
 23841  0079E6  0E04               	movlw	4
 23842  0079E8  2591               	addwf	ComputeSessionKeys@joinAcceptBuffer& (0+255),w,b
 23843  0079EA  6F6F               	movwf	PrepareSessionKeys@networkId& (0+255),b
 23844  0079EC  0E00               	movlw	0
 23845  0079EE  2192               	addwfc	(ComputeSessionKeys@joinAcceptBuffer+1)& (0+255),w,b
 23846  0079F0  6F70               	movwf	(PrepareSessionKeys@networkId+1)& (0+255),b
 23847  0079F2  EC3E  F039         	call	_PrepareSessionKeys	;wreg free
 23848                           
 23849                           ;lorawan.c: 2069: loRa.activationParameters.networkSessionKey[0] = 0x01;
 23850  0079F6  0E01               	movlw	1
 23851  0079F8  0102               	movlb	2	; () banked
 23852  0079FA  6F28               	movwf	(_loRa+34)& (0+255),b
 23853                           
 23854                           ;lorawan.c: 2070: AESEncodeLoRa(loRa.activationParameters.networkSessionKey, loRa.activa
      +                          tionParameters.applicationKey);
 23855  0079FC  0E28               	movlw	low (_loRa+34)
 23856  0079FE  0100               	movlb	0	; () banked
 23857  007A00  6F7D               	movwf	AESEncodeLoRa@block& (0+255),b
 23858  007A02  0E02               	movlw	high (_loRa+34)
 23859  007A04  6F7E               	movwf	(AESEncodeLoRa@block+1)& (0+255),b
 23860  007A06  0E48               	movlw	low (_loRa+66)
 23861  007A08  6F7F               	movwf	AESEncodeLoRa@key& (0+255),b
 23862  007A0A  0E02               	movlw	high (_loRa+66)
 23863  007A0C  6F80               	movwf	(AESEncodeLoRa@key+1)& (0+255),b
 23864  007A0E  EC28  F046         	call	_AESEncodeLoRa	;wreg free
 23865  007A12  0012               	return		;funcret
 23866  007A14                     __end_of_ComputeSessionKeys:
 23867                           	opt stack 0
 23868                           tosu	equ	0xFFF
 23869                           tosh	equ	0xFFE
 23870                           tosl	equ	0xFFD
 23871                           pclath	equ	0xFFA
 23872                           tblptru	equ	0xFF8
 23873                           tblptrh	equ	0xFF7
 23874                           tblptrl	equ	0xFF6
 23875                           tablat	equ	0xFF5
 23876                           prodh	equ	0xFF4
 23877                           prodl	equ	0xFF3
 23878                           intcon	equ	0xFF2
 23879                           intcon2	equ	0xFF1
 23880                           intcon3	equ	0xFF0
 23881                           indf0	equ	0xFEF
 23882                           postinc0	equ	0xFEE
 23883                           fsr0h	equ	0xFEA
 23884                           fsr0l	equ	0xFE9
 23885                           wreg	equ	0xFE8
 23886                           postinc1	equ	0xFE6
 23887                           postdec1	equ	0xFE5
 23888                           plusw1	equ	0xFE3
 23889                           fsr1h	equ	0xFE2
 23890                           fsr1l	equ	0xFE1
 23891                           indf2	equ	0xFDF
 23892                           postinc2	equ	0xFDE
 23893                           postdec2	equ	0xFDD
 23894                           plusw2	equ	0xFDB
 23895                           fsr2h	equ	0xFDA
 23896                           fsr2l	equ	0xFD9
 23897                           status	equ	0xFD8
 23898                           
 23899 ;; *************** function _PrepareSessionKeys *****************
 23900 ;; Defined at:
 23901 ;;		line 2045 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 23902 ;; Parameters:    Size  Location     Type
 23903 ;;  sessionKey      2   11[BANK0 ] PTR unsigned char 
 23904 ;;		 -> loRa.activationParameters(105), loRa(245), 
 23905 ;;  appNonce        2   13[BANK0 ] PTR unsigned char 
 23906 ;;		 -> ComputeSessionKeys@joinAcceptBuffer(2), radioBuffer(271), LORAWAN_RxDone@hdr(2), 
 23907 ;;  networkId       2   15[BANK0 ] PTR unsigned char 
 23908 ;;		 -> ComputeSessionKeys@joinAcceptBuffer(2), radioBuffer(271), LORAWAN_RxDone@hdr(2), 
 23909 ;; Auto vars:     Size  Location     Type
 23910 ;;  index           1   17[BANK0 ] unsigned char 
 23911 ;; Return value:  Size  Location     Type
 23912 ;;                  1    wreg      void 
 23913 ;; Registers used:
 23914 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23915 ;; Tracked objects:
 23916 ;;		On entry : 0/0
 23917 ;;		On exit  : 0/0
 23918 ;;		Unchanged: 0/0
 23919 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23920 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23921 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23922 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23923 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23924 ;;Total ram usage:        7 bytes
 23925 ;; Hardware stack levels used:    1
 23926 ;; Hardware stack levels required when called:    8
 23927 ;; This function calls:
 23928 ;;		_memcpy
 23929 ;;		_memset
 23930 ;; This function is called by:
 23931 ;;		_ComputeSessionKeys
 23932 ;; This function uses a non-reentrant model
 23933 ;;
 23934                           
 23935                           	psect	text110
 23936  00727C                     __ptext110:
 23937                           	opt stack 0
 23938  00727C                     _PrepareSessionKeys:
 23939                           	opt stack 17
 23940                           
 23941                           ;lorawan.c: 2047: uint8_t index = 0;
 23942                           
 23943                           ;incstack = 0
 23944  00727C  0E00               	movlw	0
 23945  00727E  0100               	movlb	0	; () banked
 23946  007280  6F71               	movwf	PrepareSessionKeys@index& (0+255),b
 23947                           
 23948                           ; BSR set to: 0
 23949                           ;lorawan.c: 2049: memset (&sessionKey[index], 0, sizeof(aesBuffer));
 23950  007282  5171               	movf	PrepareSessionKeys@index& (0+255),w,b
 23951  007284  0D01               	mullw	1
 23952  007286  50F3               	movf	prodl,w,c
 23953  007288  256B               	addwf	PrepareSessionKeys@sessionKey& (0+255),w,b
 23954  00728A  6F60               	movwf	memset@p1& (0+255),b
 23955  00728C  50F4               	movf	prodh,w,c
 23956  00728E  216C               	addwfc	(PrepareSessionKeys@sessionKey+1)& (0+255),w,b
 23957  007290  6F61               	movwf	(memset@p1+1)& (0+255),b
 23958  007292  0E00               	movlw	0
 23959  007294  6F63               	movwf	(memset@c+1)& (0+255),b
 23960  007296  0E00               	movlw	0
 23961  007298  6F62               	movwf	memset@c& (0+255),b
 23962  00729A  0E00               	movlw	0
 23963  00729C  6F65               	movwf	(memset@n+1)& (0+255),b
 23964  00729E  0E10               	movlw	16
 23965  0072A0  6F64               	movwf	memset@n& (0+255),b
 23966  0072A2  ECD6  F046         	call	_memset	;wreg free
 23967                           
 23968                           ;lorawan.c: 2050: index ++;
 23969  0072A6  0100               	movlb	0	; () banked
 23970  0072A8  2B71               	incf	PrepareSessionKeys@index& (0+255),f,b
 23971                           
 23972                           ; BSR set to: 0
 23973                           ;lorawan.c: 2052: memcpy(&sessionKey[index], appNonce, 3);
 23974  0072AA  5171               	movf	PrepareSessionKeys@index& (0+255),w,b
 23975  0072AC  0D01               	mullw	1
 23976  0072AE  50F3               	movf	prodl,w,c
 23977  0072B0  256B               	addwf	PrepareSessionKeys@sessionKey& (0+255),w,b
 23978  0072B2  6F60               	movwf	memcpy@d1& (0+255),b
 23979  0072B4  50F4               	movf	prodh,w,c
 23980  0072B6  216C               	addwfc	(PrepareSessionKeys@sessionKey+1)& (0+255),w,b
 23981  0072B8  6F61               	movwf	(memcpy@d1+1)& (0+255),b
 23982  0072BA  C06D  F062         	movff	PrepareSessionKeys@appNonce,memcpy@s1
 23983  0072BE  C06E  F063         	movff	PrepareSessionKeys@appNonce+1,memcpy@s1+1
 23984  0072C2  0E00               	movlw	0
 23985  0072C4  6F65               	movwf	(memcpy@n+1)& (0+255),b
 23986  0072C6  0E03               	movlw	3
 23987  0072C8  6F64               	movwf	memcpy@n& (0+255),b
 23988  0072CA  EC5D  F041         	call	_memcpy	;wreg free
 23989                           
 23990                           ;lorawan.c: 2053: index = index + 3;
 23991  0072CE  0100               	movlb	0	; () banked
 23992  0072D0  5171               	movf	PrepareSessionKeys@index& (0+255),w,b
 23993  0072D2  0F03               	addlw	3
 23994  0072D4  6F71               	movwf	PrepareSessionKeys@index& (0+255),b
 23995                           
 23996                           ; BSR set to: 0
 23997                           ;lorawan.c: 2055: memcpy(&sessionKey[index], networkId, 3);
 23998  0072D6  5171               	movf	PrepareSessionKeys@index& (0+255),w,b
 23999  0072D8  0D01               	mullw	1
 24000  0072DA  50F3               	movf	prodl,w,c
 24001  0072DC  256B               	addwf	PrepareSessionKeys@sessionKey& (0+255),w,b
 24002  0072DE  6F60               	movwf	memcpy@d1& (0+255),b
 24003  0072E0  50F4               	movf	prodh,w,c
 24004  0072E2  216C               	addwfc	(PrepareSessionKeys@sessionKey+1)& (0+255),w,b
 24005  0072E4  6F61               	movwf	(memcpy@d1+1)& (0+255),b
 24006  0072E6  C06F  F062         	movff	PrepareSessionKeys@networkId,memcpy@s1
 24007  0072EA  C070  F063         	movff	PrepareSessionKeys@networkId+1,memcpy@s1+1
 24008  0072EE  0E00               	movlw	0
 24009  0072F0  6F65               	movwf	(memcpy@n+1)& (0+255),b
 24010  0072F2  0E03               	movlw	3
 24011  0072F4  6F64               	movwf	memcpy@n& (0+255),b
 24012  0072F6  EC5D  F041         	call	_memcpy	;wreg free
 24013                           
 24014                           ;lorawan.c: 2056: index = index + 3;
 24015  0072FA  0100               	movlb	0	; () banked
 24016  0072FC  5171               	movf	PrepareSessionKeys@index& (0+255),w,b
 24017  0072FE  0F03               	addlw	3
 24018  007300  6F71               	movwf	PrepareSessionKeys@index& (0+255),b
 24019                           
 24020                           ; BSR set to: 0
 24021                           ;lorawan.c: 2058: memcpy(&sessionKey[index], &loRa.devNonce, sizeof(loRa.devNonce) );
 24022  007302  5171               	movf	PrepareSessionKeys@index& (0+255),w,b
 24023  007304  0D01               	mullw	1
 24024  007306  50F3               	movf	prodl,w,c
 24025  007308  256B               	addwf	PrepareSessionKeys@sessionKey& (0+255),w,b
 24026  00730A  6F60               	movwf	memcpy@d1& (0+255),b
 24027  00730C  50F4               	movf	prodh,w,c
 24028  00730E  216C               	addwfc	(PrepareSessionKeys@sessionKey+1)& (0+255),w,b
 24029  007310  6F61               	movwf	(memcpy@d1+1)& (0+255),b
 24030  007312  0ED8               	movlw	low (_loRa+210)
 24031  007314  6F62               	movwf	memcpy@s1& (0+255),b
 24032  007316  0E02               	movlw	high (_loRa+210)
 24033  007318  6F63               	movwf	(memcpy@s1+1)& (0+255),b
 24034  00731A  0E00               	movlw	0
 24035  00731C  6F65               	movwf	(memcpy@n+1)& (0+255),b
 24036  00731E  0E02               	movlw	2
 24037  007320  6F64               	movwf	memcpy@n& (0+255),b
 24038  007322  EC5D  F041         	call	_memcpy	;wreg free
 24039  007326  0012               	return		;funcret
 24040  007328                     __end_of_PrepareSessionKeys:
 24041                           	opt stack 0
 24042                           tosu	equ	0xFFF
 24043                           tosh	equ	0xFFE
 24044                           tosl	equ	0xFFD
 24045                           pclath	equ	0xFFA
 24046                           tblptru	equ	0xFF8
 24047                           tblptrh	equ	0xFF7
 24048                           tblptrl	equ	0xFF6
 24049                           tablat	equ	0xFF5
 24050                           prodh	equ	0xFF4
 24051                           prodl	equ	0xFF3
 24052                           intcon	equ	0xFF2
 24053                           intcon2	equ	0xFF1
 24054                           intcon3	equ	0xFF0
 24055                           indf0	equ	0xFEF
 24056                           postinc0	equ	0xFEE
 24057                           fsr0h	equ	0xFEA
 24058                           fsr0l	equ	0xFE9
 24059                           wreg	equ	0xFE8
 24060                           postinc1	equ	0xFE6
 24061                           postdec1	equ	0xFE5
 24062                           plusw1	equ	0xFE3
 24063                           fsr1h	equ	0xFE2
 24064                           fsr1l	equ	0xFE1
 24065                           indf2	equ	0xFDF
 24066                           postinc2	equ	0xFDE
 24067                           postdec2	equ	0xFDD
 24068                           plusw2	equ	0xFDB
 24069                           fsr2h	equ	0xFDA
 24070                           fsr2l	equ	0xFD9
 24071                           status	equ	0xFD8
 24072                           
 24073 ;; *************** function _CheckMcastFlags *****************
 24074 ;; Defined at:
 24075 ;;		line 2097 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 24076 ;; Parameters:    Size  Location     Type
 24077 ;;  hdr             2    0[BANK0 ] PTR struct .
 24078 ;;		 -> radioBuffer(271), LORAWAN_RxDone@hdr(2), 
 24079 ;; Auto vars:     Size  Location     Type
 24080 ;;		None
 24081 ;; Return value:  Size  Location     Type
 24082 ;;                  1    wreg      unsigned char 
 24083 ;; Registers used:
 24084 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 24085 ;; Tracked objects:
 24086 ;;		On entry : 0/0
 24087 ;;		On exit  : 0/0
 24088 ;;		Unchanged: 0/0
 24089 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24090 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24091 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24092 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24093 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24094 ;;Total ram usage:        2 bytes
 24095 ;; Hardware stack levels used:    1
 24096 ;; Hardware stack levels required when called:    7
 24097 ;; This function calls:
 24098 ;;		Nothing
 24099 ;; This function is called by:
 24100 ;;		_LORAWAN_RxDone
 24101 ;; This function uses a non-reentrant model
 24102 ;;
 24103                           
 24104                           	psect	text111
 24105  007A98                     __ptext111:
 24106                           	opt stack 0
 24107  007A98                     _CheckMcastFlags:
 24108                           	opt stack 19
 24109                           
 24110                           ;lorawan.c: 2109: if ((0 != hdr->members.fCtrl.ack) || (0 != hdr->members.fCtrl.adrAckRe
      +                          q) || (FRAME_TYPE_DATA_UNCONFIRMED_DOWN != hdr->members.mhdr.bits.mType))
 24111                           
 24112                           ;incstack = 0
 24113  007A98  0100               	movlb	0	; () banked
 24114  007A9A  EE20 F005          	lfsr	2,5
 24115  007A9E  5160               	movf	CheckMcastFlags@hdr& (0+255),w,b
 24116  007AA0  26D9               	addwf	fsr2l,f,c
 24117  007AA2  5161               	movf	(CheckMcastFlags@hdr+1)& (0+255),w,b
 24118  007AA4  22DA               	addwfc	fsr2h,f,c
 24119  007AA6  BADF               	btfsc	indf2,5,c
 24120  007AA8  D012               	goto	u10950
 24121                           
 24122                           ; BSR set to: 0
 24123  007AAA  EE20 F005          	lfsr	2,5
 24124  007AAE  5160               	movf	CheckMcastFlags@hdr& (0+255),w,b
 24125  007AB0  26D9               	addwf	fsr2l,f,c
 24126  007AB2  5161               	movf	(CheckMcastFlags@hdr+1)& (0+255),w,b
 24127  007AB4  22DA               	addwfc	fsr2h,f,c
 24128  007AB6  BCDF               	btfsc	indf2,6,c
 24129  007AB8  D00A               	goto	u10950
 24130                           
 24131                           ; BSR set to: 0
 24132  007ABA  C060  FFD9         	movff	CheckMcastFlags@hdr,fsr2l
 24133  007ABE  C061  FFDA         	movff	CheckMcastFlags@hdr+1,fsr2h
 24134  007AC2  38DF               	swapf	223,w,c
 24135  007AC4  32E8               	rrcf	wreg,f,c
 24136  007AC6  0B07               	andlw	7
 24137  007AC8  0A03               	xorlw	3
 24138  007ACA  B4D8               	btfsc	status,2,c
 24139  007ACC  D002               	goto	l1367
 24140  007ACE                     u10950:
 24141                           
 24142                           ; BSR set to: 0
 24143                           ;lorawan.c: 2110: {
 24144                           ;lorawan.c: 2111: return 0;
 24145                           
 24146                           ; BSR set to: 0
 24147  007ACE  0E00               	movlw	0
 24148                           
 24149                           ; BSR set to: 0
 24150  007AD0  0012               	return	
 24151  007AD2                     l1367:
 24152                           
 24153                           ; BSR set to: 0
 24154                           ;lorawan.c: 2112: }
 24155                           ;lorawan.c: 2114: if (0 != hdr->members.fCtrl.fOptsLen)
 24156                           
 24157                           ; BSR set to: 0
 24158  007AD2  EE20 F005          	lfsr	2,5
 24159  007AD6  5160               	movf	CheckMcastFlags@hdr& (0+255),w,b
 24160  007AD8  26D9               	addwf	fsr2l,f,c
 24161  007ADA  5161               	movf	(CheckMcastFlags@hdr+1)& (0+255),w,b
 24162  007ADC  22DA               	addwfc	fsr2h,f,c
 24163  007ADE  50DF               	movf	223,w,c
 24164  007AE0  0B0F               	andlw	15
 24165  007AE2  0900               	iorlw	0
 24166  007AE4  B4D8               	btfsc	status,2,c
 24167  007AE6  D002               	goto	l1371
 24168                           
 24169                           ; BSR set to: 0
 24170                           ;lorawan.c: 2115: {
 24171                           ;lorawan.c: 2116: return 0;
 24172  007AE8  0E00               	movlw	0
 24173                           
 24174                           ; BSR set to: 0
 24175  007AEA  0012               	return	
 24176  007AEC                     l1371:
 24177                           
 24178                           ; BSR set to: 0
 24179                           ;lorawan.c: 2118: else
 24180                           ;lorawan.c: 2119: {
 24181                           ;lorawan.c: 2120: if ( 0 == *(((uint8_t *)hdr) + 8))
 24182                           
 24183                           ; BSR set to: 0
 24184  007AEC  EE20 F008          	lfsr	2,8
 24185  007AF0  5160               	movf	CheckMcastFlags@hdr& (0+255),w,b
 24186  007AF2  26D9               	addwf	fsr2l,f,c
 24187  007AF4  5161               	movf	(CheckMcastFlags@hdr+1)& (0+255),w,b
 24188  007AF6  22DA               	addwfc	fsr2h,f,c
 24189  007AF8  50DF               	movf	indf2,w,c
 24190  007AFA  A4D8               	btfss	status,2,c
 24191  007AFC  D002               	goto	l1373
 24192                           
 24193                           ; BSR set to: 0
 24194                           ;lorawan.c: 2121: {
 24195                           ;lorawan.c: 2122: return 0;
 24196  007AFE  0E00               	movlw	0
 24197                           
 24198                           ; BSR set to: 0
 24199  007B00  0012               	return	
 24200  007B02                     l1373:
 24201                           
 24202                           ; BSR set to: 0
 24203                           ;lorawan.c: 2123: }
 24204                           ;lorawan.c: 2124: }
 24205                           ;lorawan.c: 2126: if (hdr->members.fCtrl.fPending == 1)
 24206                           
 24207                           ; BSR set to: 0
 24208                           
 24209                           ; BSR set to: 0
 24210  007B02  EE20 F005          	lfsr	2,5
 24211  007B06  5160               	movf	CheckMcastFlags@hdr& (0+255),w,b
 24212  007B08  26D9               	addwf	fsr2l,f,c
 24213  007B0A  5161               	movf	(CheckMcastFlags@hdr+1)& (0+255),w,b
 24214  007B0C  22DA               	addwfc	fsr2h,f,c
 24215  007B0E  A8DF               	btfss	indf2,4,c
 24216  007B10  D002               	goto	l1374
 24217                           
 24218                           ; BSR set to: 0
 24219                           ;lorawan.c: 2127: {
 24220                           ;lorawan.c: 2128: loRa.lorawanMacStatus.fPending = 1;
 24221  007B12  0102               	movlb	2	; () banked
 24222  007B14  8706               	bsf	_loRa& (0+255),3,b
 24223  007B16                     l1374:
 24224                           
 24225                           ;lorawan.c: 2129: }
 24226                           ;lorawan.c: 2131: return 1;
 24227                           
 24228                           ; BSR set to: 2
 24229  007B16  0E01               	movlw	1
 24230  007B18  0012               	return	
 24231  007B1A                     __end_of_CheckMcastFlags:
 24232                           	opt stack 0
 24233                           tosu	equ	0xFFF
 24234                           tosh	equ	0xFFE
 24235                           tosl	equ	0xFFD
 24236                           pclath	equ	0xFFA
 24237                           tblptru	equ	0xFF8
 24238                           tblptrh	equ	0xFF7
 24239                           tblptrl	equ	0xFF6
 24240                           tablat	equ	0xFF5
 24241                           prodh	equ	0xFF4
 24242                           prodl	equ	0xFF3
 24243                           intcon	equ	0xFF2
 24244                           intcon2	equ	0xFF1
 24245                           intcon3	equ	0xFF0
 24246                           indf0	equ	0xFEF
 24247                           postinc0	equ	0xFEE
 24248                           fsr0h	equ	0xFEA
 24249                           fsr0l	equ	0xFE9
 24250                           wreg	equ	0xFE8
 24251                           postinc1	equ	0xFE6
 24252                           postdec1	equ	0xFE5
 24253                           plusw1	equ	0xFE3
 24254                           fsr1h	equ	0xFE2
 24255                           fsr1l	equ	0xFE1
 24256                           indf2	equ	0xFDF
 24257                           postinc2	equ	0xFDE
 24258                           postdec2	equ	0xFDD
 24259                           plusw2	equ	0xFDB
 24260                           fsr2h	equ	0xFDA
 24261                           fsr2l	equ	0xFD9
 24262                           status	equ	0xFD8
 24263                           
 24264 ;; *************** function _CheckFlags *****************
 24265 ;; Defined at:
 24266 ;;		line 2074 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 24267 ;; Parameters:    Size  Location     Type
 24268 ;;  hdr             2    0[BANK0 ] PTR struct .
 24269 ;;		 -> radioBuffer(271), LORAWAN_RxDone@hdr(2), 
 24270 ;; Auto vars:     Size  Location     Type
 24271 ;;		None
 24272 ;; Return value:  Size  Location     Type
 24273 ;;                  1    wreg      void 
 24274 ;; Registers used:
 24275 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 24276 ;; Tracked objects:
 24277 ;;		On entry : 0/0
 24278 ;;		On exit  : 0/0
 24279 ;;		Unchanged: 0/0
 24280 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24281 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24282 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24283 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24284 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24285 ;;Total ram usage:        2 bytes
 24286 ;; Hardware stack levels used:    1
 24287 ;; Hardware stack levels required when called:    7
 24288 ;; This function calls:
 24289 ;;		Nothing
 24290 ;; This function is called by:
 24291 ;;		_LORAWAN_RxDone
 24292 ;; This function uses a non-reentrant model
 24293 ;;
 24294                           
 24295                           	psect	text112
 24296  008378                     __ptext112:
 24297                           	opt stack 0
 24298  008378                     _CheckFlags:
 24299                           	opt stack 19
 24300                           
 24301                           ;lorawan.c: 2076: if (hdr->members.fCtrl.adr == 1)
 24302                           
 24303                           ;incstack = 0
 24304  008378  0100               	movlb	0	; () banked
 24305  00837A  EE20 F005          	lfsr	2,5
 24306  00837E  5160               	movf	CheckFlags@hdr& (0+255),w,b
 24307  008380  26D9               	addwf	fsr2l,f,c
 24308  008382  5161               	movf	(CheckFlags@hdr+1)& (0+255),w,b
 24309  008384  22DA               	addwfc	fsr2h,f,c
 24310  008386  AEDF               	btfss	indf2,7,c
 24311  008388  D002               	goto	l1360
 24312                           
 24313                           ; BSR set to: 0
 24314                           ;lorawan.c: 2077: {
 24315                           ;lorawan.c: 2078: loRa.macStatus.adr = 1;
 24316  00838A  0102               	movlb	2	; () banked
 24317  00838C  8D08               	bsf	(_loRa+2)& (0+255),6,b
 24318  00838E                     l1360:
 24319                           
 24320                           ;lorawan.c: 2079: }
 24321                           ;lorawan.c: 2081: if (hdr->members.fCtrl.fPending == 1)
 24322                           
 24323                           ; BSR set to: 2
 24324  00838E  0100               	movlb	0	; () banked
 24325  008390  EE20 F005          	lfsr	2,5
 24326  008394  5160               	movf	CheckFlags@hdr& (0+255),w,b
 24327  008396  26D9               	addwf	fsr2l,f,c
 24328  008398  5161               	movf	(CheckFlags@hdr+1)& (0+255),w,b
 24329  00839A  22DA               	addwfc	fsr2h,f,c
 24330  00839C  A8DF               	btfss	indf2,4,c
 24331  00839E  D002               	goto	l1361
 24332                           
 24333                           ; BSR set to: 0
 24334                           ;lorawan.c: 2082: {
 24335                           ;lorawan.c: 2083: loRa.lorawanMacStatus.fPending = 1;
 24336  0083A0  0102               	movlb	2	; () banked
 24337  0083A2  8706               	bsf	_loRa& (0+255),3,b
 24338  0083A4                     l1361:
 24339                           
 24340                           ;lorawan.c: 2084: }
 24341                           ;lorawan.c: 2086: if (hdr->members.fCtrl.adrAckReq == 1)
 24342                           
 24343                           ; BSR set to: 2
 24344  0083A4  0100               	movlb	0	; () banked
 24345  0083A6  EE20 F005          	lfsr	2,5
 24346  0083AA  5160               	movf	CheckFlags@hdr& (0+255),w,b
 24347  0083AC  26D9               	addwf	fsr2l,f,c
 24348  0083AE  5161               	movf	(CheckFlags@hdr+1)& (0+255),w,b
 24349  0083B0  22DA               	addwfc	fsr2h,f,c
 24350  0083B2  ACDF               	btfss	indf2,6,c
 24351  0083B4  D002               	goto	l1362
 24352                           
 24353                           ; BSR set to: 0
 24354                           ;lorawan.c: 2087: {
 24355                           ;lorawan.c: 2088: loRa.lorawanMacStatus.adrAckRequest = 1;
 24356  0083B6  0102               	movlb	2	; () banked
 24357  0083B8  8906               	bsf	_loRa& (0+255),4,b
 24358  0083BA                     l1362:
 24359                           
 24360                           ;lorawan.c: 2089: }
 24361                           ;lorawan.c: 2091: if (hdr->members.mhdr.bits.mType == FRAME_TYPE_DATA_CONFIRMED_DOWN)
 24362                           
 24363                           ; BSR set to: 2
 24364  0083BA  C060  FFD9         	movff	CheckFlags@hdr,fsr2l
 24365  0083BE  C061  FFDA         	movff	CheckFlags@hdr+1,fsr2h
 24366  0083C2  0100               	movlb	0	; () banked
 24367  0083C4  38DF               	swapf	223,w,c
 24368  0083C6  32E8               	rrcf	wreg,f,c
 24369  0083C8  0B07               	andlw	7
 24370  0083CA  0A05               	xorlw	5
 24371  0083CC  A4D8               	btfss	status,2,c
 24372  0083CE  0012               	return	
 24373                           
 24374                           ; BSR set to: 0
 24375                           ;lorawan.c: 2092: {
 24376                           ;lorawan.c: 2093: loRa.lorawanMacStatus.ackRequiredFromNextUplinkMessage = 1;
 24377  0083D0  0102               	movlb	2	; () banked
 24378  0083D2  8306               	bsf	_loRa& (0+255),1,b
 24379  0083D4  0012               	return	
 24380  0083D6                     __end_of_CheckFlags:
 24381                           	opt stack 0
 24382                           tosu	equ	0xFFF
 24383                           tosh	equ	0xFFE
 24384                           tosl	equ	0xFFD
 24385                           pclath	equ	0xFFA
 24386                           tblptru	equ	0xFF8
 24387                           tblptrh	equ	0xFF7
 24388                           tblptrl	equ	0xFF6
 24389                           tablat	equ	0xFF5
 24390                           prodh	equ	0xFF4
 24391                           prodl	equ	0xFF3
 24392                           intcon	equ	0xFF2
 24393                           intcon2	equ	0xFF1
 24394                           intcon3	equ	0xFF0
 24395                           indf0	equ	0xFEF
 24396                           postinc0	equ	0xFEE
 24397                           fsr0h	equ	0xFEA
 24398                           fsr0l	equ	0xFE9
 24399                           wreg	equ	0xFE8
 24400                           postinc1	equ	0xFE6
 24401                           postdec1	equ	0xFE5
 24402                           plusw1	equ	0xFE3
 24403                           fsr1h	equ	0xFE2
 24404                           fsr1l	equ	0xFE1
 24405                           indf2	equ	0xFDF
 24406                           postinc2	equ	0xFDE
 24407                           postdec2	equ	0xFDD
 24408                           plusw2	equ	0xFDB
 24409                           fsr2h	equ	0xFDA
 24410                           fsr2l	equ	0xFD9
 24411                           status	equ	0xFD8
 24412                           
 24413 ;; *************** function _RADIO_FSKPacketSent *****************
 24414 ;; Defined at:
 24415 ;;		line 1093 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 24416 ;; Parameters:    Size  Location     Type
 24417 ;;		None
 24418 ;; Auto vars:     Size  Location     Type
 24419 ;;  timeOnAir       4  135[BANK0 ] unsigned long 
 24420 ;;  irqFlags        1  143[BANK0 ] unsigned char 
 24421 ;; Return value:  Size  Location     Type
 24422 ;;                  1    wreg      void 
 24423 ;; Registers used:
 24424 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 24425 ;; Tracked objects:
 24426 ;;		On entry : 0/0
 24427 ;;		On exit  : 0/0
 24428 ;;		Unchanged: 0/0
 24429 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24430 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24431 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24432 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24433 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24434 ;;Total ram usage:       13 bytes
 24435 ;; Hardware stack levels used:    1
 24436 ;; Hardware stack levels required when called:   15
 24437 ;; This function calls:
 24438 ;;		_LORAWAN_TxDone
 24439 ;;		_RADIO_RegisterRead
 24440 ;;		_RADIO_WriteMode
 24441 ;;		_SwTimerReadValue
 24442 ;;		_SwTimerStop
 24443 ;;		___lmul
 24444 ;; This function is called by:
 24445 ;;		_RADIO_DIO0
 24446 ;; This function uses a non-reentrant model
 24447 ;;
 24448                           
 24449                           	psect	text113
 24450  005D46                     __ptext113:
 24451                           	opt stack 0
 24452  005D46                     _RADIO_FSKPacketSent:
 24453                           	opt stack 13
 24454                           
 24455                           ;radio_driver_SX1276.c: 1095: uint8_t irqFlags;
 24456                           ;radio_driver_SX1276.c: 1096: uint32_t timeOnAir;
 24457                           ;radio_driver_SX1276.c: 1098: irqFlags = RADIO_RegisterRead(0x3F);
 24458                           
 24459                           ;incstack = 0
 24460  005D46  0E3F               	movlw	63
 24461  005D48  EC07  F048         	call	_RADIO_RegisterRead
 24462  005D4C  0100               	movlb	0	; () banked
 24463  005D4E  6FEF               	movwf	RADIO_FSKPacketSent@irqFlags& (0+255),b
 24464                           
 24465                           ; BSR set to: 0
 24466                           ;radio_driver_SX1276.c: 1099: if ((1<<(3)) == (irqFlags & (1<<(3))))
 24467  005D50  A7EF               	btfss	RADIO_FSKPacketSent@irqFlags& (0+255),3,b
 24468  005D52  0012               	return	
 24469                           
 24470                           ; BSR set to: 0
 24471                           ;radio_driver_SX1276.c: 1100: {
 24472                           ;radio_driver_SX1276.c: 1101: RADIO_WriteMode(MODE_SLEEP, RadioConfiguration.modulation,
      +                           0);
 24473  005D54  C16F  F065         	movff	_RadioConfiguration+24,RADIO_WriteMode@newModulation
 24474  005D58  0E00               	movlw	0
 24475  005D5A  6F66               	movwf	RADIO_WriteMode@blocking& (0+255),b
 24476  005D5C  0E00               	movlw	0
 24477  005D5E  ECF4  F031         	call	_RADIO_WriteMode
 24478                           
 24479                           ;radio_driver_SX1276.c: 1102: RadioConfiguration.flags &= ~(1 << (0));
 24480  005D62  0101               	movlb	1	; () banked
 24481  005D64  917A               	bcf	(_RadioConfiguration+35)& (0+255),0,b
 24482                           
 24483                           ; BSR set to: 1
 24484                           ;radio_driver_SX1276.c: 1104: SwTimerStop(RadioConfiguration.watchdogTimerId);
 24485  005D66  5180               	movf	(_RadioConfiguration+41)& (0+255),w,b
 24486  005D68  EC1B  F048         	call	_SwTimerStop
 24487                           
 24488                           ;radio_driver_SX1276.c: 1106: if ((RadioConfiguration.flags & (1 << (4))) == 0)
 24489  005D6C  0101               	movlb	1	; () banked
 24490  005D6E  B97A               	btfsc	(_RadioConfiguration+35)& (0+255),4,b
 24491  005D70  0012               	return	
 24492                           
 24493                           ; BSR set to: 1
 24494                           ;radio_driver_SX1276.c: 1107: {
 24495                           ;radio_driver_SX1276.c: 1108: timeOnAir = ((uint32_t)20000) - ((SwTimerReadValue(RadioCo
      +                          nfiguration.timeOnAirTimerId)) < 0x00DFAC1FUL ? ( (((uint32_t)(SwTimerReadValue(RadioCon
      +                          figuration.timeOnAirTimerId))) * 125UL) >> (12) ) : ( (((uint32_t)(SwTimerReadValue(Radi
      +                          oConfiguration.t
 24496  005D72  517E               	movf	(_RadioConfiguration+39)& (0+255),w,b
 24497  005D74  ECAC  F045         	call	_SwTimerReadValue
 24498  005D78  0100               	movlb	0	; () banked
 24499  005D7A  5194               	movf	(?_SwTimerReadValue+3)& (0+255),w,b
 24500  005D7C  E108               	bnz	u12810
 24501  005D7E  0E1F               	movlw	31
 24502  005D80  5D91               	subwf	?_SwTimerReadValue& (0+255),w,b
 24503  005D82  0EAC               	movlw	172
 24504  005D84  5992               	subwfb	(?_SwTimerReadValue+1)& (0+255),w,b
 24505  005D86  0EDF               	movlw	223
 24506  005D88  5993               	subwfb	(?_SwTimerReadValue+2)& (0+255),w,b
 24507  005D8A  A0D8               	btfss	status,0,c
 24508  005D8C  D021               	goto	l353
 24509  005D8E                     u12810:
 24510                           
 24511                           ; BSR set to: 0
 24512  005D8E  0101               	movlb	1	; () banked
 24513  005D90  517E               	movf	(_RadioConfiguration+39)& (0+255),w,b
 24514  005D92  ECAC  F045         	call	_SwTimerReadValue
 24515  005D96  0E0D               	movlw	13
 24516  005D98  D006               	goto	u12820
 24517  005D9A                     u12825:
 24518  005D9A  0100               	movlb	0	; () banked
 24519  005D9C  90D8               	bcf	status,0,c
 24520  005D9E  3394               	rrcf	(?_SwTimerReadValue+3)& (0+255),f,b
 24521  005DA0  3393               	rrcf	(?_SwTimerReadValue+2)& (0+255),f,b
 24522  005DA2  3392               	rrcf	(?_SwTimerReadValue+1)& (0+255),f,b
 24523  005DA4  3391               	rrcf	?_SwTimerReadValue& (0+255),f,b
 24524  005DA6                     u12820:
 24525  005DA6  2EE8               	decfsz	wreg,f,c
 24526  005DA8  D7F8               	goto	u12825
 24527  005DAA  C091  F09A         	movff	?_SwTimerReadValue,___lmul@multiplier
 24528  005DAE  C092  F09B         	movff	?_SwTimerReadValue+1,___lmul@multiplier+1
 24529  005DB2  C093  F09C         	movff	?_SwTimerReadValue+2,___lmul@multiplier+2
 24530  005DB6  C094  F09D         	movff	?_SwTimerReadValue+3,___lmul@multiplier+3
 24531  005DBA  0E7D               	movlw	125
 24532  005DBC  6F9E               	movwf	___lmul@multiplicand& (0+255),b
 24533  005DBE  0E00               	movlw	0
 24534  005DC0  6F9F               	movwf	(___lmul@multiplicand+1)& (0+255),b
 24535  005DC2  0E00               	movlw	0
 24536  005DC4  6FA0               	movwf	(___lmul@multiplicand+2)& (0+255),b
 24537  005DC6  0E00               	movlw	0
 24538  005DC8  6FA1               	movwf	(___lmul@multiplicand+3)& (0+255),b
 24539  005DCA  EC73  F042         	call	___lmul	;wreg free
 24540  005DCE  D021               	goto	L14
 24541  005DD0                     l353:
 24542  005DD0  0101               	movlb	1	; () banked
 24543  005DD2  517E               	movf	(_RadioConfiguration+39)& (0+255),w,b
 24544  005DD4  ECAC  F045         	call	_SwTimerReadValue
 24545  005DD8  C091  F09A         	movff	?_SwTimerReadValue,___lmul@multiplier
 24546  005DDC  C092  F09B         	movff	?_SwTimerReadValue+1,___lmul@multiplier+1
 24547  005DE0  C093  F09C         	movff	?_SwTimerReadValue+2,___lmul@multiplier+2
 24548  005DE4  C094  F09D         	movff	?_SwTimerReadValue+3,___lmul@multiplier+3
 24549  005DE8  0E7D               	movlw	125
 24550  005DEA  0100               	movlb	0	; () banked
 24551  005DEC  6F9E               	movwf	___lmul@multiplicand& (0+255),b
 24552  005DEE  0E00               	movlw	0
 24553  005DF0  6F9F               	movwf	(___lmul@multiplicand+1)& (0+255),b
 24554  005DF2  0E00               	movlw	0
 24555  005DF4  6FA0               	movwf	(___lmul@multiplicand+2)& (0+255),b
 24556  005DF6  0E00               	movlw	0
 24557  005DF8  6FA1               	movwf	(___lmul@multiplicand+3)& (0+255),b
 24558  005DFA  EC73  F042         	call	___lmul	;wreg free
 24559  005DFE  0E0D               	movlw	13
 24560  005E00  D006               	goto	u12830
 24561  005E02                     u12835:
 24562  005E02  0100               	movlb	0	; () banked
 24563  005E04  90D8               	bcf	status,0,c
 24564  005E06  339D               	rrcf	(?___lmul+3)& (0+255),f,b
 24565  005E08  339C               	rrcf	(?___lmul+2)& (0+255),f,b
 24566  005E0A  339B               	rrcf	(?___lmul+1)& (0+255),f,b
 24567  005E0C  339A               	rrcf	?___lmul& (0+255),f,b
 24568  005E0E                     u12830:
 24569  005E0E  2EE8               	decfsz	wreg,f,c
 24570  005E10  D7F8               	goto	u12835
 24571  005E12                     L14:
 24572  005E12  C09A  F0EB         	movff	?___lmul,_RADIO_FSKPacketSent$536
 24573  005E16  C09B  F0EC         	movff	?___lmul+1,_RADIO_FSKPacketSent$536+1
 24574  005E1A  C09C  F0ED         	movff	?___lmul+2,_RADIO_FSKPacketSent$536+2
 24575  005E1E  C09D  F0EE         	movff	?___lmul+3,_RADIO_FSKPacketSent$536+3
 24576                           
 24577                           ; BSR set to: 0
 24578  005E22  C0EB  F0E3         	movff	_RADIO_FSKPacketSent$536,??_RADIO_FSKPacketSent
 24579  005E26  C0EC  F0E4         	movff	_RADIO_FSKPacketSent$536+1,??_RADIO_FSKPacketSent+1
 24580  005E2A  C0ED  F0E5         	movff	_RADIO_FSKPacketSent$536+2,??_RADIO_FSKPacketSent+2
 24581  005E2E  C0EE  F0E6         	movff	_RADIO_FSKPacketSent$536+3,??_RADIO_FSKPacketSent+3
 24582  005E32  0100               	movlb	0	; () banked
 24583  005E34  1FE3               	comf	??_RADIO_FSKPacketSent& (0+255),f,b
 24584  005E36  1FE4               	comf	(??_RADIO_FSKPacketSent+1)& (0+255),f,b
 24585  005E38  1FE5               	comf	(??_RADIO_FSKPacketSent+2)& (0+255),f,b
 24586  005E3A  1FE6               	comf	(??_RADIO_FSKPacketSent+3)& (0+255),f,b
 24587  005E3C  2BE3               	incf	??_RADIO_FSKPacketSent& (0+255),f,b
 24588  005E3E  0E00               	movlw	0
 24589  005E40  23E4               	addwfc	(??_RADIO_FSKPacketSent+1)& (0+255),f,b
 24590  005E42  23E5               	addwfc	(??_RADIO_FSKPacketSent+2)& (0+255),f,b
 24591  005E44  23E6               	addwfc	(??_RADIO_FSKPacketSent+3)& (0+255),f,b
 24592  005E46  0E20               	movlw	32
 24593  005E48  25E3               	addwf	??_RADIO_FSKPacketSent& (0+255),w,b
 24594  005E4A  6FE7               	movwf	RADIO_FSKPacketSent@timeOnAir& (0+255),b
 24595  005E4C  0E4E               	movlw	78
 24596  005E4E  21E4               	addwfc	(??_RADIO_FSKPacketSent+1)& (0+255),w,b
 24597  005E50  6FE8               	movwf	(RADIO_FSKPacketSent@timeOnAir+1)& (0+255),b
 24598  005E52  0E00               	movlw	0
 24599  005E54  21E5               	addwfc	(??_RADIO_FSKPacketSent+2)& (0+255),w,b
 24600  005E56  6FE9               	movwf	(RADIO_FSKPacketSent@timeOnAir+2)& (0+255),b
 24601  005E58  0E00               	movlw	0
 24602  005E5A  21E6               	addwfc	(??_RADIO_FSKPacketSent+3)& (0+255),w,b
 24603  005E5C  6FEA               	movwf	(RADIO_FSKPacketSent@timeOnAir+3)& (0+255),b
 24604                           
 24605                           ; BSR set to: 0
 24606                           ;radio_driver_SX1276.c: 1109: SwTimerStop(RadioConfiguration.timeOnAirTimerId);
 24607  005E5E  0101               	movlb	1	; () banked
 24608  005E60  517E               	movf	(_RadioConfiguration+39)& (0+255),w,b
 24609  005E62  EC1B  F048         	call	_SwTimerStop
 24610                           
 24611                           ;radio_driver_SX1276.c: 1110: LORAWAN_TxDone((uint16_t)timeOnAir);
 24612  005E66  C0E7  F0BB         	movff	RADIO_FSKPacketSent@timeOnAir,LORAWAN_TxDone@timeOnAir
 24613  005E6A  C0E8  F0BC         	movff	RADIO_FSKPacketSent@timeOnAir+1,LORAWAN_TxDone@timeOnAir+1
 24614  005E6E  ECBD  F006         	call	_LORAWAN_TxDone	;wreg free
 24615  005E72  0012               	return	
 24616  005E74                     __end_of_RADIO_FSKPacketSent:
 24617                           	opt stack 0
 24618                           tosu	equ	0xFFF
 24619                           tosh	equ	0xFFE
 24620                           tosl	equ	0xFFD
 24621                           pclath	equ	0xFFA
 24622                           tblptru	equ	0xFF8
 24623                           tblptrh	equ	0xFF7
 24624                           tblptrl	equ	0xFF6
 24625                           tablat	equ	0xFF5
 24626                           prodh	equ	0xFF4
 24627                           prodl	equ	0xFF3
 24628                           intcon	equ	0xFF2
 24629                           intcon2	equ	0xFF1
 24630                           intcon3	equ	0xFF0
 24631                           indf0	equ	0xFEF
 24632                           postinc0	equ	0xFEE
 24633                           fsr0h	equ	0xFEA
 24634                           fsr0l	equ	0xFE9
 24635                           wreg	equ	0xFE8
 24636                           postinc1	equ	0xFE6
 24637                           postdec1	equ	0xFE5
 24638                           plusw1	equ	0xFE3
 24639                           fsr1h	equ	0xFE2
 24640                           fsr1l	equ	0xFE1
 24641                           indf2	equ	0xFDF
 24642                           postinc2	equ	0xFDE
 24643                           postdec2	equ	0xFDD
 24644                           plusw2	equ	0xFDB
 24645                           fsr2h	equ	0xFDA
 24646                           fsr2l	equ	0xFD9
 24647                           status	equ	0xFD8
 24648                           
 24649 ;; *************** function _LORAWAN_TxDone *****************
 24650 ;; Defined at:
 24651 ;;		line 365 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 24652 ;; Parameters:    Size  Location     Type
 24653 ;;  timeOnAir       2   91[BANK0 ] unsigned int 
 24654 ;; Auto vars:     Size  Location     Type
 24655 ;;  minim           4  126[BANK0 ] unsigned long 
 24656 ;;  ticks           4  122[BANK0 ] unsigned long 
 24657 ;;  delta           4  114[BANK0 ] unsigned long 
 24658 ;;  i               1  130[BANK0 ] unsigned char 
 24659 ;;  found           1  113[BANK0 ] unsigned char 
 24660 ;; Return value:  Size  Location     Type
 24661 ;;                  1    wreg      void 
 24662 ;; Registers used:
 24663 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 24664 ;; Tracked objects:
 24665 ;;		On entry : 0/0
 24666 ;;		On exit  : 0/0
 24667 ;;		Unchanged: 0/0
 24668 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24669 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24670 ;;      Locals:         0      26       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24671 ;;      Temps:          0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24672 ;;      Totals:         0      40       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24673 ;;Total ram usage:       40 bytes
 24674 ;; Hardware stack levels used:    1
 24675 ;; Hardware stack levels required when called:   14
 24676 ;; This function calls:
 24677 ;;		_LORAWAN_EnterContinuousReceive
 24678 ;;		_RADIO_GetStatus
 24679 ;;		_RxData
 24680 ;;		_SwTimerIsRunning
 24681 ;;		_SwTimerReadValue
 24682 ;;		_SwTimerSetTimeout
 24683 ;;		_SwTimerStart
 24684 ;;		_SwTimerStop
 24685 ;;		___lldiv
 24686 ;;		___lmul
 24687 ;; This function is called by:
 24688 ;;		_RADIO_TxDone
 24689 ;;		_RADIO_FSKPacketSent
 24690 ;;		_RADIO_WatchdogTimeout
 24691 ;; This function uses a non-reentrant model
 24692 ;;
 24693                           
 24694                           	psect	text114
 24695  000D7A                     __ptext114:
 24696                           	opt stack 0
 24697  000D7A                     _LORAWAN_TxDone:
 24698                           	opt stack 13
 24699                           
 24700                           ;lorawan_eu.c: 367: if (loRa.macStatus.macPause == 0)
 24701                           
 24702                           ;incstack = 0
 24703  000D7A  0102               	movlb	2	; () banked
 24704  000D7C  B109               	btfsc	(_loRa+3)& (0+255),0,b
 24705  000D7E  D3A2               	goto	l1865
 24706                           
 24707                           ; BSR set to: 2
 24708                           ;lorawan_eu.c: 368: {
 24709                           ;lorawan_eu.c: 369: bool found = 0;
 24710  000D80  0E00               	movlw	0
 24711  000D82  0100               	movlb	0	; () banked
 24712  000D84  6FD1               	movwf	LORAWAN_TxDone@found& (0+255),b
 24713                           
 24714                           ;lorawan_eu.c: 370: uint8_t i;
 24715                           ;lorawan_eu.c: 371: uint32_t delta = 0, minim = (4294967295UL), ticks;
 24716  000D86  0E00               	movlw	0
 24717  000D88  6FD2               	movwf	LORAWAN_TxDone@delta& (0+255),b
 24718  000D8A  0E00               	movlw	0
 24719  000D8C  6FD3               	movwf	(LORAWAN_TxDone@delta+1)& (0+255),b
 24720  000D8E  0E00               	movlw	0
 24721  000D90  6FD4               	movwf	(LORAWAN_TxDone@delta+2)& (0+255),b
 24722  000D92  0E00               	movlw	0
 24723  000D94  6FD5               	movwf	(LORAWAN_TxDone@delta+3)& (0+255),b
 24724                           
 24725                           ; BSR set to: 0
 24726  000D96  69DE               	setf	LORAWAN_TxDone@minim& (0+255),b
 24727  000D98  69DF               	setf	(LORAWAN_TxDone@minim+1)& (0+255),b
 24728  000D9A  69E0               	setf	(LORAWAN_TxDone@minim+2)& (0+255),b
 24729  000D9C  69E1               	setf	(LORAWAN_TxDone@minim+3)& (0+255),b
 24730                           
 24731                           ;lorawan_eu.c: 374: loRa.rx2DelayExpired = 0;
 24732  000D9E  0E00               	movlw	0
 24733  000DA0  0102               	movlb	2	; () banked
 24734  000DA2  6FF7               	movwf	(_loRa+241)& (0+255),b
 24735                           
 24736                           ;lorawan_eu.c: 376: loRa.macStatus.macState = BEFORE_RX1;
 24737  000DA4  5108               	movf	(_loRa+2)& (0+255),w,b
 24738  000DA6  0BF0               	andlw	-16
 24739  000DA8  0902               	iorlw	2
 24740  000DAA  6F08               	movwf	(_loRa+2)& (0+255),b
 24741                           
 24742                           ; BSR set to: 2
 24743                           ;lorawan_eu.c: 378: i = loRa.lastUsedChannelIndex;
 24744  000DAC  C2E0  F0E2         	movff	_loRa+218,LORAWAN_TxDone@i
 24745                           
 24746                           ; BSR set to: 2
 24747                           ;lorawan_eu.c: 381: if (loRa.lorawanMacStatus.joining == 1)
 24748  000DB0  A506               	btfss	_loRa& (0+255),2,b
 24749  000DB2  D0BA               	goto	l1866
 24750                           
 24751                           ; BSR set to: 2
 24752                           ;lorawan_eu.c: 382: {
 24753                           ;lorawan_eu.c: 383: SwTimerSetTimeout(loRa.joinAccept1TimerId, ( (((uint32_t)(loRa.proto
      +                          colParameters.joinAcceptDelay1 + rxWindowOffset[loRa.receiveWindow1Parameters.dataRate])
      +                          ) << (12)) / 125UL ));
 24754  000DB4  511D               	movf	(_loRa+23)& (0+255),w,b
 24755  000DB6  0D01               	mullw	1
 24756  000DB8  0E6F               	movlw	low _rxWindowOffset
 24757  000DBA  24F3               	addwf	prodl,w,c
 24758  000DBC  6EF6               	movwf	tblptrl,c
 24759  000DBE  0EFF               	movlw	high _rxWindowOffset
 24760  000DC0  20F4               	addwfc	prodh,w,c
 24761  000DC2  6EF7               	movwf	tblptrh,c
 24762  000DC4                     	if	1	;There are 3 active tblptr bytes
 24763  000DC4  6AF8               	clrf	tblptru,c
 24764  000DC6  0E00               	movlw	low (__mediumconst shr (0+16))
 24765  000DC8  22F8               	addwfc	tblptru,f,c
 24766  000DCA                     	endif
 24767  000DCA  0008               	tblrd		*
 24768  000DCC  CFF5 F0BD          	movff	tablat,??_LORAWAN_TxDone
 24769  000DD0  519E               	movf	(_loRa+152)& (0+255),w,b
 24770  000DD2  0100               	movlb	0	; () banked
 24771  000DD4  25BD               	addwf	??_LORAWAN_TxDone& (0+255),w,b
 24772  000DD6  6FBE               	movwf	(??_LORAWAN_TxDone+1)& (0+255),b
 24773  000DD8  0E00               	movlw	0
 24774  000DDA  BFBD               	btfsc	??_LORAWAN_TxDone& (0+255),7,b
 24775  000DDC  0EFF               	movlw	255
 24776  000DDE  0102               	movlb	2	; () banked
 24777  000DE0  219F               	addwfc	(_loRa+153)& (0+255),w,b
 24778  000DE2  0100               	movlb	0	; () banked
 24779  000DE4  6FBF               	movwf	(??_LORAWAN_TxDone+2)& (0+255),b
 24780  000DE6  6BC0               	clrf	(??_LORAWAN_TxDone+3)& (0+255),b
 24781  000DE8  6BC1               	clrf	(??_LORAWAN_TxDone+4)& (0+255),b
 24782  000DEA  0E0C               	movlw	12
 24783  000DEC                     u12265:
 24784  000DEC  90D8               	bcf	status,0,c
 24785  000DEE  37BE               	rlcf	(??_LORAWAN_TxDone+1)& (0+255),f,b
 24786  000DF0  37BF               	rlcf	(??_LORAWAN_TxDone+2)& (0+255),f,b
 24787  000DF2  37C0               	rlcf	(??_LORAWAN_TxDone+3)& (0+255),f,b
 24788  000DF4  37C1               	rlcf	(??_LORAWAN_TxDone+4)& (0+255),f,b
 24789  000DF6  2EE8               	decfsz	wreg,f,c
 24790  000DF8  D7F9               	goto	u12265
 24791  000DFA  C0BE  F060         	movff	??_LORAWAN_TxDone+1,___lldiv@dividend
 24792  000DFE  C0BF  F061         	movff	??_LORAWAN_TxDone+2,___lldiv@dividend+1
 24793  000E02  C0C0  F062         	movff	??_LORAWAN_TxDone+3,___lldiv@dividend+2
 24794  000E06  C0C1  F063         	movff	??_LORAWAN_TxDone+4,___lldiv@dividend+3
 24795  000E0A  0E7D               	movlw	125
 24796  000E0C  6F64               	movwf	___lldiv@divisor& (0+255),b
 24797  000E0E  0E00               	movlw	0
 24798  000E10  6F65               	movwf	(___lldiv@divisor+1)& (0+255),b
 24799  000E12  0E00               	movlw	0
 24800  000E14  6F66               	movwf	(___lldiv@divisor+2)& (0+255),b
 24801  000E16  0E00               	movlw	0
 24802  000E18  6F67               	movwf	(___lldiv@divisor+3)& (0+255),b
 24803  000E1A  EC0A  F03D         	call	___lldiv	;wreg free
 24804  000E1E  C060  F06D         	movff	?___lldiv,SwTimerSetTimeout@timeout
 24805  000E22  C061  F06E         	movff	?___lldiv+1,SwTimerSetTimeout@timeout+1
 24806  000E26  C062  F06F         	movff	?___lldiv+2,SwTimerSetTimeout@timeout+2
 24807  000E2A  C063  F070         	movff	?___lldiv+3,SwTimerSetTimeout@timeout+3
 24808  000E2E  0102               	movlb	2	; () banked
 24809  000E30  51E8               	movf	(_loRa+226)& (0+255),w,b
 24810  000E32  EC27  F045         	call	_SwTimerSetTimeout
 24811                           
 24812                           ;lorawan_eu.c: 384: SwTimerSetTimeout(loRa.joinAccept2TimerId, ( (((uint32_t)(loRa.proto
      +                          colParameters.joinAcceptDelay2 + rxWindowOffset[loRa.receiveWindow2Parameters.dataRate])
      +                          ) << (12)) / 125UL ));
 24813  000E36  0102               	movlb	2	; () banked
 24814  000E38  5122               	movf	(_loRa+28)& (0+255),w,b
 24815  000E3A  0D01               	mullw	1
 24816  000E3C  0E6F               	movlw	low _rxWindowOffset
 24817  000E3E  24F3               	addwf	prodl,w,c
 24818  000E40  6EF6               	movwf	tblptrl,c
 24819  000E42  0EFF               	movlw	high _rxWindowOffset
 24820  000E44  20F4               	addwfc	prodh,w,c
 24821  000E46  6EF7               	movwf	tblptrh,c
 24822  000E48                     	if	1	;There are 3 active tblptr bytes
 24823  000E48  6AF8               	clrf	tblptru,c
 24824  000E4A  0E00               	movlw	low (__mediumconst shr (0+16))
 24825  000E4C  22F8               	addwfc	tblptru,f,c
 24826  000E4E                     	endif
 24827  000E4E  0008               	tblrd		*
 24828  000E50  CFF5 F0BD          	movff	tablat,??_LORAWAN_TxDone
 24829  000E54  51A0               	movf	(_loRa+154)& (0+255),w,b
 24830  000E56  0100               	movlb	0	; () banked
 24831  000E58  25BD               	addwf	??_LORAWAN_TxDone& (0+255),w,b
 24832  000E5A  6FBE               	movwf	(??_LORAWAN_TxDone+1)& (0+255),b
 24833  000E5C  0E00               	movlw	0
 24834  000E5E  BFBD               	btfsc	??_LORAWAN_TxDone& (0+255),7,b
 24835  000E60  0EFF               	movlw	255
 24836  000E62  0102               	movlb	2	; () banked
 24837  000E64  21A1               	addwfc	(_loRa+155)& (0+255),w,b
 24838  000E66  0100               	movlb	0	; () banked
 24839  000E68  6FBF               	movwf	(??_LORAWAN_TxDone+2)& (0+255),b
 24840  000E6A  6BC0               	clrf	(??_LORAWAN_TxDone+3)& (0+255),b
 24841  000E6C  6BC1               	clrf	(??_LORAWAN_TxDone+4)& (0+255),b
 24842  000E6E  0E0C               	movlw	12
 24843  000E70                     u12275:
 24844  000E70  90D8               	bcf	status,0,c
 24845  000E72  37BE               	rlcf	(??_LORAWAN_TxDone+1)& (0+255),f,b
 24846  000E74  37BF               	rlcf	(??_LORAWAN_TxDone+2)& (0+255),f,b
 24847  000E76  37C0               	rlcf	(??_LORAWAN_TxDone+3)& (0+255),f,b
 24848  000E78  37C1               	rlcf	(??_LORAWAN_TxDone+4)& (0+255),f,b
 24849  000E7A  2EE8               	decfsz	wreg,f,c
 24850  000E7C  D7F9               	goto	u12275
 24851  000E7E  C0BE  F060         	movff	??_LORAWAN_TxDone+1,___lldiv@dividend
 24852  000E82  C0BF  F061         	movff	??_LORAWAN_TxDone+2,___lldiv@dividend+1
 24853  000E86  C0C0  F062         	movff	??_LORAWAN_TxDone+3,___lldiv@dividend+2
 24854  000E8A  C0C1  F063         	movff	??_LORAWAN_TxDone+4,___lldiv@dividend+3
 24855  000E8E  0E7D               	movlw	125
 24856  000E90  6F64               	movwf	___lldiv@divisor& (0+255),b
 24857  000E92  0E00               	movlw	0
 24858  000E94  6F65               	movwf	(___lldiv@divisor+1)& (0+255),b
 24859  000E96  0E00               	movlw	0
 24860  000E98  6F66               	movwf	(___lldiv@divisor+2)& (0+255),b
 24861  000E9A  0E00               	movlw	0
 24862  000E9C  6F67               	movwf	(___lldiv@divisor+3)& (0+255),b
 24863  000E9E  EC0A  F03D         	call	___lldiv	;wreg free
 24864  000EA2  C060  F06D         	movff	?___lldiv,SwTimerSetTimeout@timeout
 24865  000EA6  C061  F06E         	movff	?___lldiv+1,SwTimerSetTimeout@timeout+1
 24866  000EAA  C062  F06F         	movff	?___lldiv+2,SwTimerSetTimeout@timeout+2
 24867  000EAE  C063  F070         	movff	?___lldiv+3,SwTimerSetTimeout@timeout+3
 24868  000EB2  0102               	movlb	2	; () banked
 24869  000EB4  51E9               	movf	(_loRa+227)& (0+255),w,b
 24870  000EB6  EC27  F045         	call	_SwTimerSetTimeout
 24871                           
 24872                           ;lorawan_eu.c: 385: SwTimerStart(loRa.joinAccept1TimerId);
 24873  000EBA  0102               	movlb	2	; () banked
 24874  000EBC  51E8               	movf	(_loRa+226)& (0+255),w,b
 24875  000EBE  ECDA  F03A         	call	_SwTimerStart
 24876                           
 24877                           ;lorawan_eu.c: 386: SwTimerStart(loRa.joinAccept2TimerId);
 24878  000EC2  0102               	movlb	2	; () banked
 24879  000EC4  51E9               	movf	(_loRa+227)& (0+255),w,b
 24880  000EC6  ECDA  F03A         	call	_SwTimerStart
 24881                           
 24882                           ;lorawan_eu.c: 388: Channels[i].channelTimer = ((uint32_t)timeOnAir) * (((uint32_t)3029 
      +                          + 1) * ((uint32_t)loRa.prescaler) - 1);
 24883  000ECA  C2E1  F09A         	movff	_loRa+219,___lmul@multiplier
 24884  000ECE  C2E2  F09B         	movff	_loRa+220,___lmul@multiplier+1
 24885  000ED2  0100               	movlb	0	; () banked
 24886  000ED4  6B9C               	clrf	(___lmul@multiplier+2)& (0+255),b
 24887  000ED6  6B9D               	clrf	(___lmul@multiplier+3)& (0+255),b
 24888  000ED8  0ED6               	movlw	214
 24889  000EDA  6F9E               	movwf	___lmul@multiplicand& (0+255),b
 24890  000EDC  0E0B               	movlw	11
 24891  000EDE  6F9F               	movwf	(___lmul@multiplicand+1)& (0+255),b
 24892  000EE0  0E00               	movlw	0
 24893  000EE2  6FA0               	movwf	(___lmul@multiplicand+2)& (0+255),b
 24894  000EE4  0E00               	movlw	0
 24895  000EE6  6FA1               	movwf	(___lmul@multiplicand+3)& (0+255),b
 24896  000EE8  EC73  F042         	call	___lmul	;wreg free
 24897  000EEC  0EFF               	movlw	255
 24898  000EEE  0100               	movlb	0	; () banked
 24899  000EF0  259A               	addwf	?___lmul& (0+255),w,b
 24900  000EF2  6FD6               	movwf	_LORAWAN_TxDone$5627& (0+255),b
 24901  000EF4  0EFF               	movlw	255
 24902  000EF6  219B               	addwfc	(?___lmul+1)& (0+255),w,b
 24903  000EF8  6FD7               	movwf	(_LORAWAN_TxDone$5627+1)& (0+255),b
 24904  000EFA  0EFF               	movlw	255
 24905  000EFC  219C               	addwfc	(?___lmul+2)& (0+255),w,b
 24906  000EFE  6FD8               	movwf	(_LORAWAN_TxDone$5627+2)& (0+255),b
 24907  000F00  0EFF               	movlw	255
 24908  000F02  219D               	addwfc	(?___lmul+3)& (0+255),w,b
 24909  000F04  6FD9               	movwf	(_LORAWAN_TxDone$5627+3)& (0+255),b
 24910                           
 24911                           ; BSR set to: 0
 24912                           ;lorawan_eu.c: 388: Channels[i].channelTimer = ((uint32_t)timeOnAir) * (((uint32_t)3029 
      +                          + 1) * ((uint32_t)loRa.prescaler) - 1);
 24913  000F06  C0D6  F09A         	movff	_LORAWAN_TxDone$5627,___lmul@multiplier
 24914  000F0A  C0D7  F09B         	movff	_LORAWAN_TxDone$5627+1,___lmul@multiplier+1
 24915  000F0E  C0D8  F09C         	movff	_LORAWAN_TxDone$5627+2,___lmul@multiplier+2
 24916  000F12  C0D9  F09D         	movff	_LORAWAN_TxDone$5627+3,___lmul@multiplier+3
 24917  000F16  C0BB  F09E         	movff	LORAWAN_TxDone@timeOnAir,___lmul@multiplicand
 24918  000F1A  C0BC  F09F         	movff	LORAWAN_TxDone@timeOnAir+1,___lmul@multiplicand+1
 24919  000F1E  6BA0               	clrf	(___lmul@multiplicand+2)& (0+255),b
 24920  000F20  6BA1               	clrf	(___lmul@multiplicand+3)& (0+255),b
 24921  000F22  EC73  F042         	call	___lmul	;wreg free
 24922  000F26  D0D7               	goto	L15
 24923  000F28                     l1866:
 24924                           
 24925                           ;lorawan_eu.c: 390: else
 24926                           ;lorawan_eu.c: 391: {
 24927                           ;lorawan_eu.c: 392: SwTimerSetTimeout(loRa.receiveWindow1TimerId, ( (((uint32_t)(loRa.pr
      +                          otocolParameters.receiveDelay1 + rxWindowOffset[loRa.receiveWindow1Parameters.dataRate])
      +                          ) << (12)) / 125UL ));
 24928                           
 24929                           ; BSR set to: 0
 24930  000F28  0102               	movlb	2	; () banked
 24931  000F2A  511D               	movf	(_loRa+23)& (0+255),w,b
 24932  000F2C  0D01               	mullw	1
 24933  000F2E  0E6F               	movlw	low _rxWindowOffset
 24934  000F30  24F3               	addwf	prodl,w,c
 24935  000F32  6EF6               	movwf	tblptrl,c
 24936  000F34  0EFF               	movlw	high _rxWindowOffset
 24937  000F36  20F4               	addwfc	prodh,w,c
 24938  000F38  6EF7               	movwf	tblptrh,c
 24939  000F3A                     	if	1	;There are 3 active tblptr bytes
 24940  000F3A  6AF8               	clrf	tblptru,c
 24941  000F3C  0E00               	movlw	low (__mediumconst shr (0+16))
 24942  000F3E  22F8               	addwfc	tblptru,f,c
 24943  000F40                     	endif
 24944  000F40  0008               	tblrd		*
 24945  000F42  CFF5 F0BD          	movff	tablat,??_LORAWAN_TxDone
 24946  000F46  519A               	movf	(_loRa+148)& (0+255),w,b
 24947  000F48  0100               	movlb	0	; () banked
 24948  000F4A  25BD               	addwf	??_LORAWAN_TxDone& (0+255),w,b
 24949  000F4C  6FBE               	movwf	(??_LORAWAN_TxDone+1)& (0+255),b
 24950  000F4E  0E00               	movlw	0
 24951  000F50  BFBD               	btfsc	??_LORAWAN_TxDone& (0+255),7,b
 24952  000F52  0EFF               	movlw	255
 24953  000F54  0102               	movlb	2	; () banked
 24954  000F56  219B               	addwfc	(_loRa+149)& (0+255),w,b
 24955  000F58  0100               	movlb	0	; () banked
 24956  000F5A  6FBF               	movwf	(??_LORAWAN_TxDone+2)& (0+255),b
 24957  000F5C  6BC0               	clrf	(??_LORAWAN_TxDone+3)& (0+255),b
 24958  000F5E  6BC1               	clrf	(??_LORAWAN_TxDone+4)& (0+255),b
 24959  000F60  0E0C               	movlw	12
 24960  000F62                     u12285:
 24961  000F62  90D8               	bcf	status,0,c
 24962  000F64  37BE               	rlcf	(??_LORAWAN_TxDone+1)& (0+255),f,b
 24963  000F66  37BF               	rlcf	(??_LORAWAN_TxDone+2)& (0+255),f,b
 24964  000F68  37C0               	rlcf	(??_LORAWAN_TxDone+3)& (0+255),f,b
 24965  000F6A  37C1               	rlcf	(??_LORAWAN_TxDone+4)& (0+255),f,b
 24966  000F6C  2EE8               	decfsz	wreg,f,c
 24967  000F6E  D7F9               	goto	u12285
 24968  000F70  C0BE  F060         	movff	??_LORAWAN_TxDone+1,___lldiv@dividend
 24969  000F74  C0BF  F061         	movff	??_LORAWAN_TxDone+2,___lldiv@dividend+1
 24970  000F78  C0C0  F062         	movff	??_LORAWAN_TxDone+3,___lldiv@dividend+2
 24971  000F7C  C0C1  F063         	movff	??_LORAWAN_TxDone+4,___lldiv@dividend+3
 24972  000F80  0E7D               	movlw	125
 24973  000F82  6F64               	movwf	___lldiv@divisor& (0+255),b
 24974  000F84  0E00               	movlw	0
 24975  000F86  6F65               	movwf	(___lldiv@divisor+1)& (0+255),b
 24976  000F88  0E00               	movlw	0
 24977  000F8A  6F66               	movwf	(___lldiv@divisor+2)& (0+255),b
 24978  000F8C  0E00               	movlw	0
 24979  000F8E  6F67               	movwf	(___lldiv@divisor+3)& (0+255),b
 24980  000F90  EC0A  F03D         	call	___lldiv	;wreg free
 24981  000F94  C060  F06D         	movff	?___lldiv,SwTimerSetTimeout@timeout
 24982  000F98  C061  F06E         	movff	?___lldiv+1,SwTimerSetTimeout@timeout+1
 24983  000F9C  C062  F06F         	movff	?___lldiv+2,SwTimerSetTimeout@timeout+2
 24984  000FA0  C063  F070         	movff	?___lldiv+3,SwTimerSetTimeout@timeout+3
 24985  000FA4  0102               	movlb	2	; () banked
 24986  000FA6  51EA               	movf	(_loRa+228)& (0+255),w,b
 24987  000FA8  EC27  F045         	call	_SwTimerSetTimeout
 24988                           
 24989                           ;lorawan_eu.c: 393: SwTimerSetTimeout(loRa.receiveWindow2TimerId, ( (((uint32_t)(loRa.pr
      +                          otocolParameters.receiveDelay2 + rxWindowOffset[loRa.receiveWindow2Parameters.dataRate])
      +                          ) << (12)) / 125UL ));
 24990  000FAC  0102               	movlb	2	; () banked
 24991  000FAE  5122               	movf	(_loRa+28)& (0+255),w,b
 24992  000FB0  0D01               	mullw	1
 24993  000FB2  0E6F               	movlw	low _rxWindowOffset
 24994  000FB4  24F3               	addwf	prodl,w,c
 24995  000FB6  6EF6               	movwf	tblptrl,c
 24996  000FB8  0EFF               	movlw	high _rxWindowOffset
 24997  000FBA  20F4               	addwfc	prodh,w,c
 24998  000FBC  6EF7               	movwf	tblptrh,c
 24999  000FBE                     	if	1	;There are 3 active tblptr bytes
 25000  000FBE  6AF8               	clrf	tblptru,c
 25001  000FC0  0E00               	movlw	low (__mediumconst shr (0+16))
 25002  000FC2  22F8               	addwfc	tblptru,f,c
 25003  000FC4                     	endif
 25004  000FC4  0008               	tblrd		*
 25005  000FC6  CFF5 F0BD          	movff	tablat,??_LORAWAN_TxDone
 25006  000FCA  519C               	movf	(_loRa+150)& (0+255),w,b
 25007  000FCC  0100               	movlb	0	; () banked
 25008  000FCE  25BD               	addwf	??_LORAWAN_TxDone& (0+255),w,b
 25009  000FD0  6FBE               	movwf	(??_LORAWAN_TxDone+1)& (0+255),b
 25010  000FD2  0E00               	movlw	0
 25011  000FD4  BFBD               	btfsc	??_LORAWAN_TxDone& (0+255),7,b
 25012  000FD6  0EFF               	movlw	255
 25013  000FD8  0102               	movlb	2	; () banked
 25014  000FDA  219D               	addwfc	(_loRa+151)& (0+255),w,b
 25015  000FDC  0100               	movlb	0	; () banked
 25016  000FDE  6FBF               	movwf	(??_LORAWAN_TxDone+2)& (0+255),b
 25017  000FE0  6BC0               	clrf	(??_LORAWAN_TxDone+3)& (0+255),b
 25018  000FE2  6BC1               	clrf	(??_LORAWAN_TxDone+4)& (0+255),b
 25019  000FE4  0E0C               	movlw	12
 25020  000FE6                     u12295:
 25021  000FE6  90D8               	bcf	status,0,c
 25022  000FE8  37BE               	rlcf	(??_LORAWAN_TxDone+1)& (0+255),f,b
 25023  000FEA  37BF               	rlcf	(??_LORAWAN_TxDone+2)& (0+255),f,b
 25024  000FEC  37C0               	rlcf	(??_LORAWAN_TxDone+3)& (0+255),f,b
 25025  000FEE  37C1               	rlcf	(??_LORAWAN_TxDone+4)& (0+255),f,b
 25026  000FF0  2EE8               	decfsz	wreg,f,c
 25027  000FF2  D7F9               	goto	u12295
 25028  000FF4  C0BE  F060         	movff	??_LORAWAN_TxDone+1,___lldiv@dividend
 25029  000FF8  C0BF  F061         	movff	??_LORAWAN_TxDone+2,___lldiv@dividend+1
 25030  000FFC  C0C0  F062         	movff	??_LORAWAN_TxDone+3,___lldiv@dividend+2
 25031  001000  C0C1  F063         	movff	??_LORAWAN_TxDone+4,___lldiv@dividend+3
 25032  001004  0E7D               	movlw	125
 25033  001006  6F64               	movwf	___lldiv@divisor& (0+255),b
 25034  001008  0E00               	movlw	0
 25035  00100A  6F65               	movwf	(___lldiv@divisor+1)& (0+255),b
 25036  00100C  0E00               	movlw	0
 25037  00100E  6F66               	movwf	(___lldiv@divisor+2)& (0+255),b
 25038  001010  0E00               	movlw	0
 25039  001012  6F67               	movwf	(___lldiv@divisor+3)& (0+255),b
 25040  001014  EC0A  F03D         	call	___lldiv	;wreg free
 25041  001018  C060  F06D         	movff	?___lldiv,SwTimerSetTimeout@timeout
 25042  00101C  C061  F06E         	movff	?___lldiv+1,SwTimerSetTimeout@timeout+1
 25043  001020  C062  F06F         	movff	?___lldiv+2,SwTimerSetTimeout@timeout+2
 25044  001024  C063  F070         	movff	?___lldiv+3,SwTimerSetTimeout@timeout+3
 25045  001028  0102               	movlb	2	; () banked
 25046  00102A  51EB               	movf	(_loRa+229)& (0+255),w,b
 25047  00102C  EC27  F045         	call	_SwTimerSetTimeout
 25048                           
 25049                           ;lorawan_eu.c: 394: SwTimerStart(loRa.receiveWindow1TimerId);
 25050  001030  0102               	movlb	2	; () banked
 25051  001032  51EA               	movf	(_loRa+228)& (0+255),w,b
 25052  001034  ECDA  F03A         	call	_SwTimerStart
 25053                           
 25054                           ;lorawan_eu.c: 395: if (CLASS_A == loRa.deviceClass)
 25055  001038  0102               	movlb	2	; () banked
 25056  00103A  5118               	movf	(_loRa+18)& (0+255),w,b
 25057  00103C  A4D8               	btfss	status,2,c
 25058  00103E  D003               	goto	l1868
 25059                           
 25060                           ; BSR set to: 2
 25061                           ;lorawan_eu.c: 396: {
 25062                           ;lorawan_eu.c: 397: SwTimerStart(loRa.receiveWindow2TimerId);
 25063  001040  51EB               	movf	(_loRa+229)& (0+255),w,b
 25064  001042  ECDA  F03A         	call	_SwTimerStart
 25065  001046                     l1868:
 25066                           
 25067                           ;lorawan_eu.c: 398: }
 25068                           ;lorawan_eu.c: 400: Channels[i].channelTimer = ((uint32_t)timeOnAir) * (((uint32_t)Chann
      +                          els[i].dutyCycle + 1) * ((uint32_t)loRa.prescaler) - 1);
 25069  001046  0100               	movlb	0	; () banked
 25070  001048  51E2               	movf	LORAWAN_TxDone@i& (0+255),w,b
 25071  00104A  0D0E               	mullw	14
 25072  00104C  0E06               	movlw	6
 25073  00104E  26F3               	addwf	prodl,f,c
 25074  001050  0E00               	movlw	0
 25075  001052  22F4               	addwfc	prodh,f,c
 25076  001054  0E00               	movlw	low _Channels
 25077  001056  24F3               	addwf	prodl,w,c
 25078  001058  6ED9               	movwf	fsr2l,c
 25079  00105A  0E04               	movlw	high _Channels
 25080  00105C  20F4               	addwfc	prodh,w,c
 25081  00105E  6EDA               	movwf	fsr2h,c
 25082  001060  CFDE F0BD          	movff	postinc2,??_LORAWAN_TxDone
 25083  001064  CFDD F0BE          	movff	postdec2,??_LORAWAN_TxDone+1
 25084  001068  51BD               	movf	??_LORAWAN_TxDone& (0+255),w,b
 25085  00106A  6FBF               	movwf	(??_LORAWAN_TxDone+2)& (0+255),b
 25086  00106C  51BE               	movf	(??_LORAWAN_TxDone+1)& (0+255),w,b
 25087  00106E  6FC0               	movwf	(??_LORAWAN_TxDone+3)& (0+255),b
 25088  001070  6BC1               	clrf	(??_LORAWAN_TxDone+4)& (0+255),b
 25089  001072  6BC2               	clrf	(??_LORAWAN_TxDone+5)& (0+255),b
 25090  001074  0E01               	movlw	1
 25091  001076  25BF               	addwf	(??_LORAWAN_TxDone+2)& (0+255),w,b
 25092  001078  6F9A               	movwf	___lmul@multiplier& (0+255),b
 25093  00107A  0E00               	movlw	0
 25094  00107C  21C0               	addwfc	(??_LORAWAN_TxDone+3)& (0+255),w,b
 25095  00107E  6F9B               	movwf	(___lmul@multiplier+1)& (0+255),b
 25096  001080  0E00               	movlw	0
 25097  001082  21C1               	addwfc	(??_LORAWAN_TxDone+4)& (0+255),w,b
 25098  001084  6F9C               	movwf	(___lmul@multiplier+2)& (0+255),b
 25099  001086  0E00               	movlw	0
 25100  001088  21C2               	addwfc	(??_LORAWAN_TxDone+5)& (0+255),w,b
 25101  00108A  6F9D               	movwf	(___lmul@multiplier+3)& (0+255),b
 25102  00108C  C2E1  F09E         	movff	_loRa+219,___lmul@multiplicand
 25103  001090  C2E2  F09F         	movff	_loRa+220,___lmul@multiplicand+1
 25104  001094  6BA0               	clrf	(___lmul@multiplicand+2)& (0+255),b
 25105  001096  6BA1               	clrf	(___lmul@multiplicand+3)& (0+255),b
 25106  001098  EC73  F042         	call	___lmul	;wreg free
 25107  00109C  0EFF               	movlw	255
 25108  00109E  0100               	movlb	0	; () banked
 25109  0010A0  259A               	addwf	?___lmul& (0+255),w,b
 25110  0010A2  6FD6               	movwf	_LORAWAN_TxDone$5627& (0+255),b
 25111  0010A4  0EFF               	movlw	255
 25112  0010A6  219B               	addwfc	(?___lmul+1)& (0+255),w,b
 25113  0010A8  6FD7               	movwf	(_LORAWAN_TxDone$5627+1)& (0+255),b
 25114  0010AA  0EFF               	movlw	255
 25115  0010AC  219C               	addwfc	(?___lmul+2)& (0+255),w,b
 25116  0010AE  6FD8               	movwf	(_LORAWAN_TxDone$5627+2)& (0+255),b
 25117  0010B0  0EFF               	movlw	255
 25118  0010B2  219D               	addwfc	(?___lmul+3)& (0+255),w,b
 25119  0010B4  6FD9               	movwf	(_LORAWAN_TxDone$5627+3)& (0+255),b
 25120                           
 25121                           ;lorawan_eu.c: 398: }
 25122                           ;lorawan_eu.c: 400: Channels[i].channelTimer = ((uint32_t)timeOnAir) * (((uint32_t)Chann
      +                          els[i].dutyCycle + 1) * ((uint32_t)loRa.prescaler) - 1);
 25123  0010B6  C0D6  F09A         	movff	_LORAWAN_TxDone$5627,___lmul@multiplier
 25124  0010BA  C0D7  F09B         	movff	_LORAWAN_TxDone$5627+1,___lmul@multiplier+1
 25125  0010BE  C0D8  F09C         	movff	_LORAWAN_TxDone$5627+2,___lmul@multiplier+2
 25126  0010C2  C0D9  F09D         	movff	_LORAWAN_TxDone$5627+3,___lmul@multiplier+3
 25127  0010C6  C0BB  F09E         	movff	LORAWAN_TxDone@timeOnAir,___lmul@multiplicand
 25128  0010CA  C0BC  F09F         	movff	LORAWAN_TxDone@timeOnAir+1,___lmul@multiplicand+1
 25129  0010CE  6BA0               	clrf	(___lmul@multiplicand+2)& (0+255),b
 25130  0010D0  6BA1               	clrf	(___lmul@multiplicand+3)& (0+255),b
 25131  0010D2  EC73  F042         	call	___lmul	;wreg free
 25132  0010D6                     L15:
 25133  0010D6  0100               	movlb	0	; () banked
 25134  0010D8  51E2               	movf	LORAWAN_TxDone@i& (0+255),w,b
 25135  0010DA  0D0E               	mullw	14
 25136  0010DC  0E08               	movlw	8
 25137  0010DE  26F3               	addwf	prodl,f,c
 25138  0010E0  0E00               	movlw	0
 25139  0010E2  22F4               	addwfc	prodh,f,c
 25140  0010E4  0E00               	movlw	low _Channels
 25141  0010E6  24F3               	addwf	prodl,w,c
 25142  0010E8  6ED9               	movwf	fsr2l,c
 25143  0010EA  0E04               	movlw	high _Channels
 25144  0010EC  20F4               	addwfc	prodh,w,c
 25145  0010EE  6EDA               	movwf	fsr2h,c
 25146  0010F0  C09A  FFDE         	movff	?___lmul,postinc2
 25147  0010F4  C09B  FFDE         	movff	?___lmul+1,postinc2
 25148  0010F8  C09C  FFDE         	movff	?___lmul+2,postinc2
 25149  0010FC  C09D  FFDE         	movff	?___lmul+3,postinc2
 25150                           
 25151                           ; BSR set to: 0
 25152                           ;lorawan_eu.c: 401: }
 25153                           ;lorawan_eu.c: 403: if(SwTimerIsRunning(loRa.dutyCycleTimerId))
 25154  001100  0102               	movlb	2	; () banked
 25155  001102  51EF               	movf	(_loRa+233)& (0+255),w,b
 25156  001104  ECA1  F047         	call	_SwTimerIsRunning
 25157  001108  0900               	iorlw	0
 25158  00110A  B4D8               	btfsc	status,2,c
 25159  00110C  D08A               	goto	l1869
 25160                           
 25161                           ;lorawan_eu.c: 404: {
 25162                           ;lorawan_eu.c: 405: SwTimerStop(loRa.dutyCycleTimerId);
 25163  00110E  0102               	movlb	2	; () banked
 25164  001110  51EF               	movf	(_loRa+233)& (0+255),w,b
 25165  001112  EC1B  F048         	call	_SwTimerStop
 25166                           
 25167                           ;lorawan_eu.c: 407: ticks = SwTimerReadValue (loRa.dutyCycleTimerId);
 25168  001116  0102               	movlb	2	; () banked
 25169  001118  51EF               	movf	(_loRa+233)& (0+255),w,b
 25170  00111A  ECAC  F045         	call	_SwTimerReadValue
 25171  00111E  C091  F0DA         	movff	?_SwTimerReadValue,LORAWAN_TxDone@ticks
 25172  001122  C092  F0DB         	movff	?_SwTimerReadValue+1,LORAWAN_TxDone@ticks+1
 25173  001126  C093  F0DC         	movff	?_SwTimerReadValue+2,LORAWAN_TxDone@ticks+2
 25174  00112A  C094  F0DD         	movff	?_SwTimerReadValue+3,LORAWAN_TxDone@ticks+3
 25175                           
 25176                           ;lorawan_eu.c: 408: delta = loRa.lastTimerValue - ((ticks) < 0x00DFAC1FUL ? ( (((uint32_
      +                          t)(ticks)) * 125UL) >> (12) ) : ( (((uint32_t)(ticks)) >> (12)) * 125UL ) );
 25177  00112E  0100               	movlb	0	; () banked
 25178  001130  51DD               	movf	(LORAWAN_TxDone@ticks+3)& (0+255),w,b
 25179  001132  E108               	bnz	u12320
 25180  001134  0E1F               	movlw	31
 25181  001136  5DDA               	subwf	LORAWAN_TxDone@ticks& (0+255),w,b
 25182  001138  0EAC               	movlw	172
 25183  00113A  59DB               	subwfb	(LORAWAN_TxDone@ticks+1)& (0+255),w,b
 25184  00113C  0EDF               	movlw	223
 25185  00113E  59DC               	subwfb	(LORAWAN_TxDone@ticks+2)& (0+255),w,b
 25186  001140  A0D8               	btfss	status,0,c
 25187  001142  D024               	goto	l1871
 25188  001144                     u12320:
 25189                           
 25190                           ; BSR set to: 0
 25191  001144  C0DA  F0BD         	movff	LORAWAN_TxDone@ticks,??_LORAWAN_TxDone
 25192  001148  C0DB  F0BE         	movff	LORAWAN_TxDone@ticks+1,??_LORAWAN_TxDone+1
 25193  00114C  C0DC  F0BF         	movff	LORAWAN_TxDone@ticks+2,??_LORAWAN_TxDone+2
 25194  001150  C0DD  F0C0         	movff	LORAWAN_TxDone@ticks+3,??_LORAWAN_TxDone+3
 25195  001154  0E0D               	movlw	13
 25196  001156  D005               	goto	u12330
 25197  001158                     u12335:
 25198  001158  90D8               	bcf	status,0,c
 25199  00115A  33C0               	rrcf	(??_LORAWAN_TxDone+3)& (0+255),f,b
 25200  00115C  33BF               	rrcf	(??_LORAWAN_TxDone+2)& (0+255),f,b
 25201  00115E  33BE               	rrcf	(??_LORAWAN_TxDone+1)& (0+255),f,b
 25202  001160  33BD               	rrcf	??_LORAWAN_TxDone& (0+255),f,b
 25203  001162                     u12330:
 25204  001162  2EE8               	decfsz	wreg,f,c
 25205  001164  D7F9               	goto	u12335
 25206  001166  C0BD  F09A         	movff	??_LORAWAN_TxDone,___lmul@multiplier
 25207  00116A  C0BE  F09B         	movff	??_LORAWAN_TxDone+1,___lmul@multiplier+1
 25208  00116E  C0BF  F09C         	movff	??_LORAWAN_TxDone+2,___lmul@multiplier+2
 25209  001172  C0C0  F09D         	movff	??_LORAWAN_TxDone+3,___lmul@multiplier+3
 25210  001176  0E7D               	movlw	125
 25211  001178  6F9E               	movwf	___lmul@multiplicand& (0+255),b
 25212  00117A  0E00               	movlw	0
 25213  00117C  6F9F               	movwf	(___lmul@multiplicand+1)& (0+255),b
 25214  00117E  0E00               	movlw	0
 25215  001180  6FA0               	movwf	(___lmul@multiplicand+2)& (0+255),b
 25216  001182  0E00               	movlw	0
 25217  001184  6FA1               	movwf	(___lmul@multiplicand+3)& (0+255),b
 25218  001186  EC73  F042         	call	___lmul	;wreg free
 25219  00118A  D01D               	goto	L16
 25220  00118C                     l1871:
 25221  00118C  C0DA  F09A         	movff	LORAWAN_TxDone@ticks,___lmul@multiplier
 25222  001190  C0DB  F09B         	movff	LORAWAN_TxDone@ticks+1,___lmul@multiplier+1
 25223  001194  C0DC  F09C         	movff	LORAWAN_TxDone@ticks+2,___lmul@multiplier+2
 25224  001198  C0DD  F09D         	movff	LORAWAN_TxDone@ticks+3,___lmul@multiplier+3
 25225  00119C  0E7D               	movlw	125
 25226  00119E  0100               	movlb	0	; () banked
 25227  0011A0  6F9E               	movwf	___lmul@multiplicand& (0+255),b
 25228  0011A2  0E00               	movlw	0
 25229  0011A4  6F9F               	movwf	(___lmul@multiplicand+1)& (0+255),b
 25230  0011A6  0E00               	movlw	0
 25231  0011A8  6FA0               	movwf	(___lmul@multiplicand+2)& (0+255),b
 25232  0011AA  0E00               	movlw	0
 25233  0011AC  6FA1               	movwf	(___lmul@multiplicand+3)& (0+255),b
 25234  0011AE  EC73  F042         	call	___lmul	;wreg free
 25235  0011B2  0E0D               	movlw	13
 25236  0011B4  D006               	goto	u12340
 25237  0011B6                     u12345:
 25238  0011B6  0100               	movlb	0	; () banked
 25239  0011B8  90D8               	bcf	status,0,c
 25240  0011BA  339D               	rrcf	(?___lmul+3)& (0+255),f,b
 25241  0011BC  339C               	rrcf	(?___lmul+2)& (0+255),f,b
 25242  0011BE  339B               	rrcf	(?___lmul+1)& (0+255),f,b
 25243  0011C0  339A               	rrcf	?___lmul& (0+255),f,b
 25244  0011C2                     u12340:
 25245  0011C2  2EE8               	decfsz	wreg,f,c
 25246  0011C4  D7F8               	goto	u12345
 25247  0011C6                     L16:
 25248  0011C6  C09A  F0C9         	movff	?___lmul,_LORAWAN_TxDone$2660
 25249  0011CA  C09B  F0CA         	movff	?___lmul+1,_LORAWAN_TxDone$2660+1
 25250  0011CE  C09C  F0CB         	movff	?___lmul+2,_LORAWAN_TxDone$2660+2
 25251  0011D2  C09D  F0CC         	movff	?___lmul+3,_LORAWAN_TxDone$2660+3
 25252                           
 25253                           ; BSR set to: 0
 25254  0011D6  C0C9  F0BD         	movff	_LORAWAN_TxDone$2660,??_LORAWAN_TxDone
 25255  0011DA  C0CA  F0BE         	movff	_LORAWAN_TxDone$2660+1,??_LORAWAN_TxDone+1
 25256  0011DE  C0CB  F0BF         	movff	_LORAWAN_TxDone$2660+2,??_LORAWAN_TxDone+2
 25257  0011E2  C0CC  F0C0         	movff	_LORAWAN_TxDone$2660+3,??_LORAWAN_TxDone+3
 25258  0011E6  0100               	movlb	0	; () banked
 25259  0011E8  1FBD               	comf	??_LORAWAN_TxDone& (0+255),f,b
 25260  0011EA  1FBE               	comf	(??_LORAWAN_TxDone+1)& (0+255),f,b
 25261  0011EC  1FBF               	comf	(??_LORAWAN_TxDone+2)& (0+255),f,b
 25262  0011EE  1FC0               	comf	(??_LORAWAN_TxDone+3)& (0+255),f,b
 25263  0011F0  2BBD               	incf	??_LORAWAN_TxDone& (0+255),f,b
 25264  0011F2  0E00               	movlw	0
 25265  0011F4  23BE               	addwfc	(??_LORAWAN_TxDone+1)& (0+255),f,b
 25266  0011F6  23BF               	addwfc	(??_LORAWAN_TxDone+2)& (0+255),f,b
 25267  0011F8  23C0               	addwfc	(??_LORAWAN_TxDone+3)& (0+255),f,b
 25268  0011FA  0102               	movlb	2	; () banked
 25269  0011FC  51CE               	movf	(_loRa+200)& (0+255),w,b
 25270  0011FE  0100               	movlb	0	; () banked
 25271  001200  25BD               	addwf	??_LORAWAN_TxDone& (0+255),w,b
 25272  001202  6FD2               	movwf	LORAWAN_TxDone@delta& (0+255),b
 25273  001204  0102               	movlb	2	; () banked
 25274  001206  51CF               	movf	(_loRa+201)& (0+255),w,b
 25275  001208  0100               	movlb	0	; () banked
 25276  00120A  21BE               	addwfc	(??_LORAWAN_TxDone+1)& (0+255),w,b
 25277  00120C  6FD3               	movwf	(LORAWAN_TxDone@delta+1)& (0+255),b
 25278  00120E  0102               	movlb	2	; () banked
 25279  001210  51D0               	movf	(_loRa+202)& (0+255),w,b
 25280  001212  0100               	movlb	0	; () banked
 25281  001214  21BF               	addwfc	(??_LORAWAN_TxDone+2)& (0+255),w,b
 25282  001216  6FD4               	movwf	(LORAWAN_TxDone@delta+2)& (0+255),b
 25283  001218  0102               	movlb	2	; () banked
 25284  00121A  51D1               	movf	(_loRa+203)& (0+255),w,b
 25285  00121C  0100               	movlb	0	; () banked
 25286  00121E  21C0               	addwfc	(??_LORAWAN_TxDone+3)& (0+255),w,b
 25287  001220  6FD5               	movwf	(LORAWAN_TxDone@delta+3)& (0+255),b
 25288  001222                     l1869:
 25289                           
 25290                           ;lorawan_eu.c: 409: }
 25291                           ;lorawan_eu.c: 411: for (i=0; i < 16; i++)
 25292                           
 25293                           ; BSR set to: 0
 25294  001222  0E00               	movlw	0
 25295  001224  0100               	movlb	0	; () banked
 25296  001226  6FE2               	movwf	LORAWAN_TxDone@i& (0+255),b
 25297  001228                     l11647:
 25298                           
 25299                           ; BSR set to: 0
 25300  001228  0E0F               	movlw	15
 25301  00122A  65E2               	cpfsgt	LORAWAN_TxDone@i& (0+255),b
 25302  00122C  D001               	goto	l1874
 25303  00122E  D0D4               	goto	u12420
 25304  001230                     l1874:
 25305                           
 25306                           ; BSR set to: 0
 25307                           ;lorawan_eu.c: 412: {
 25308                           ;lorawan_eu.c: 413: if ((Channels[i].status == 1) && ( Channels[i].channelTimer != 0 ))
 25309                           
 25310                           ; BSR set to: 0
 25311  001230  51E2               	movf	LORAWAN_TxDone@i& (0+255),w,b
 25312  001232  0D0E               	mullw	14
 25313  001234  0E04               	movlw	4
 25314  001236  26F3               	addwf	prodl,f,c
 25315  001238  0E00               	movlw	0
 25316  00123A  22F4               	addwfc	prodh,f,c
 25317  00123C  0E00               	movlw	low _Channels
 25318  00123E  24F3               	addwf	prodl,w,c
 25319  001240  6ED9               	movwf	fsr2l,c
 25320  001242  0E04               	movlw	high _Channels
 25321  001244  20F4               	addwfc	prodh,w,c
 25322  001246  6EDA               	movwf	fsr2h,c
 25323  001248  04DE               	decf	postinc2,w,c
 25324  00124A  A4D8               	btfss	status,2,c
 25325  00124C  D0C3               	goto	l1880
 25326                           
 25327                           ; BSR set to: 0
 25328  00124E  51E2               	movf	LORAWAN_TxDone@i& (0+255),w,b
 25329  001250  0D0E               	mullw	14
 25330  001252  0E08               	movlw	8
 25331  001254  26F3               	addwf	prodl,f,c
 25332  001256  0E00               	movlw	0
 25333  001258  22F4               	addwfc	prodh,f,c
 25334  00125A  0E00               	movlw	low _Channels
 25335  00125C  24F3               	addwf	prodl,w,c
 25336  00125E  6ED9               	movwf	fsr2l,c
 25337  001260  0E04               	movlw	high _Channels
 25338  001262  20F4               	addwfc	prodh,w,c
 25339  001264  6EDA               	movwf	fsr2h,c
 25340  001266  50DE               	movf	postinc2,w,c
 25341  001268  10DE               	iorwf	postinc2,w,c
 25342  00126A  10DE               	iorwf	postinc2,w,c
 25343  00126C  10DE               	iorwf	postinc2,w,c
 25344  00126E  B4D8               	btfsc	status,2,c
 25345  001270  D0B1               	goto	l1880
 25346                           
 25347                           ; BSR set to: 0
 25348                           ;lorawan_eu.c: 414: {
 25349                           ;lorawan_eu.c: 415: if( i != loRa.lastUsedChannelIndex )
 25350  001272  51E2               	movf	LORAWAN_TxDone@i& (0+255),w,b
 25351  001274  0102               	movlb	2	; () banked
 25352  001276  19E0               	xorwf	(_loRa+218)& (0+255),w,b
 25353  001278  B4D8               	btfsc	status,2,c
 25354  00127A  D06D               	goto	l1879
 25355                           
 25356                           ; BSR set to: 2
 25357                           ;lorawan_eu.c: 416: {
 25358                           ;lorawan_eu.c: 417: if (Channels[i].channelTimer > delta)
 25359  00127C  0100               	movlb	0	; () banked
 25360  00127E  51E2               	movf	LORAWAN_TxDone@i& (0+255),w,b
 25361  001280  0D0E               	mullw	14
 25362  001282  0E08               	movlw	8
 25363  001284  26F3               	addwf	prodl,f,c
 25364  001286  0E00               	movlw	0
 25365  001288  22F4               	addwfc	prodh,f,c
 25366  00128A  0E00               	movlw	low _Channels
 25367  00128C  24F3               	addwf	prodl,w,c
 25368  00128E  6ED9               	movwf	fsr2l,c
 25369  001290  0E04               	movlw	high _Channels
 25370  001292  20F4               	addwfc	prodh,w,c
 25371  001294  6EDA               	movwf	fsr2h,c
 25372  001296  50DE               	movf	postinc2,w,c
 25373  001298  5DD2               	subwf	LORAWAN_TxDone@delta& (0+255),w,b
 25374  00129A  50DE               	movf	postinc2,w,c
 25375  00129C  59D3               	subwfb	(LORAWAN_TxDone@delta+1)& (0+255),w,b
 25376  00129E  50DE               	movf	postinc2,w,c
 25377  0012A0  59D4               	subwfb	(LORAWAN_TxDone@delta+2)& (0+255),w,b
 25378  0012A2  50DE               	movf	postinc2,w,c
 25379  0012A4  59D5               	subwfb	(LORAWAN_TxDone@delta+3)& (0+255),w,b
 25380  0012A6  B0D8               	btfsc	status,0,c
 25381  0012A8  D046               	goto	l1878
 25382                           
 25383                           ; BSR set to: 0
 25384                           ;lorawan_eu.c: 418: {
 25385                           ;lorawan_eu.c: 419: Channels[i].channelTimer = Channels[i].channelTimer - delta;
 25386  0012AA  51E2               	movf	LORAWAN_TxDone@i& (0+255),w,b
 25387  0012AC  0D0E               	mullw	14
 25388  0012AE  0E08               	movlw	8
 25389  0012B0  26F3               	addwf	prodl,f,c
 25390  0012B2  0E00               	movlw	0
 25391  0012B4  22F4               	addwfc	prodh,f,c
 25392  0012B6  0E00               	movlw	low _Channels
 25393  0012B8  24F3               	addwf	prodl,w,c
 25394  0012BA  6ED9               	movwf	fsr2l,c
 25395  0012BC  0E04               	movlw	high _Channels
 25396  0012BE  20F4               	addwfc	prodh,w,c
 25397  0012C0  6EDA               	movwf	fsr2h,c
 25398  0012C2  CFDE F0BD          	movff	postinc2,??_LORAWAN_TxDone
 25399  0012C6  CFDE F0BE          	movff	postinc2,??_LORAWAN_TxDone+1
 25400  0012CA  CFDE F0BF          	movff	postinc2,??_LORAWAN_TxDone+2
 25401  0012CE  CFDE F0C0          	movff	postinc2,??_LORAWAN_TxDone+3
 25402  0012D2  C0D2  F0C1         	movff	LORAWAN_TxDone@delta,??_LORAWAN_TxDone+4
 25403  0012D6  C0D3  F0C2         	movff	LORAWAN_TxDone@delta+1,??_LORAWAN_TxDone+5
 25404  0012DA  C0D4  F0C3         	movff	LORAWAN_TxDone@delta+2,??_LORAWAN_TxDone+6
 25405  0012DE  C0D5  F0C4         	movff	LORAWAN_TxDone@delta+3,??_LORAWAN_TxDone+7
 25406  0012E2  1FC1               	comf	(??_LORAWAN_TxDone+4)& (0+255),f,b
 25407  0012E4  1FC2               	comf	(??_LORAWAN_TxDone+5)& (0+255),f,b
 25408  0012E6  1FC3               	comf	(??_LORAWAN_TxDone+6)& (0+255),f,b
 25409  0012E8  1FC4               	comf	(??_LORAWAN_TxDone+7)& (0+255),f,b
 25410  0012EA  2BC1               	incf	(??_LORAWAN_TxDone+4)& (0+255),f,b
 25411  0012EC  0E00               	movlw	0
 25412  0012EE  23C2               	addwfc	(??_LORAWAN_TxDone+5)& (0+255),f,b
 25413  0012F0  23C3               	addwfc	(??_LORAWAN_TxDone+6)& (0+255),f,b
 25414  0012F2  23C4               	addwfc	(??_LORAWAN_TxDone+7)& (0+255),f,b
 25415  0012F4  51BD               	movf	??_LORAWAN_TxDone& (0+255),w,b
 25416  0012F6  25C1               	addwf	(??_LORAWAN_TxDone+4)& (0+255),w,b
 25417  0012F8  6FC5               	movwf	(??_LORAWAN_TxDone+8)& (0+255),b
 25418  0012FA  51BE               	movf	(??_LORAWAN_TxDone+1)& (0+255),w,b
 25419  0012FC  21C2               	addwfc	(??_LORAWAN_TxDone+5)& (0+255),w,b
 25420  0012FE  6FC6               	movwf	(??_LORAWAN_TxDone+9)& (0+255),b
 25421  001300  51BF               	movf	(??_LORAWAN_TxDone+2)& (0+255),w,b
 25422  001302  21C3               	addwfc	(??_LORAWAN_TxDone+6)& (0+255),w,b
 25423  001304  6FC7               	movwf	(??_LORAWAN_TxDone+10)& (0+255),b
 25424  001306  51C0               	movf	(??_LORAWAN_TxDone+3)& (0+255),w,b
 25425  001308  21C4               	addwfc	(??_LORAWAN_TxDone+7)& (0+255),w,b
 25426  00130A  6FC8               	movwf	(??_LORAWAN_TxDone+11)& (0+255),b
 25427  00130C  51E2               	movf	LORAWAN_TxDone@i& (0+255),w,b
 25428  00130E  0D0E               	mullw	14
 25429  001310  0E08               	movlw	8
 25430  001312  26F3               	addwf	prodl,f,c
 25431  001314  0E00               	movlw	0
 25432  001316  22F4               	addwfc	prodh,f,c
 25433  001318  0E00               	movlw	low _Channels
 25434  00131A  24F3               	addwf	prodl,w,c
 25435  00131C  6ED9               	movwf	fsr2l,c
 25436  00131E  0E04               	movlw	high _Channels
 25437  001320  20F4               	addwfc	prodh,w,c
 25438  001322  6EDA               	movwf	fsr2h,c
 25439  001324  C0C5  FFDE         	movff	??_LORAWAN_TxDone+8,postinc2
 25440  001328  C0C6  FFDE         	movff	??_LORAWAN_TxDone+9,postinc2
 25441  00132C  C0C7  FFDE         	movff	??_LORAWAN_TxDone+10,postinc2
 25442  001330  C0C8  FFDE         	movff	??_LORAWAN_TxDone+11,postinc2
 25443                           
 25444                           ;lorawan_eu.c: 420: }
 25445  001334  D010               	goto	l1879
 25446  001336                     l1878:
 25447                           
 25448                           ; BSR set to: 0
 25449                           ;lorawan_eu.c: 421: else
 25450                           ;lorawan_eu.c: 422: {
 25451                           ;lorawan_eu.c: 423: Channels[i].channelTimer = 0;
 25452                           
 25453                           ; BSR set to: 0
 25454  001336  51E2               	movf	LORAWAN_TxDone@i& (0+255),w,b
 25455  001338  0D0E               	mullw	14
 25456  00133A  0E08               	movlw	8
 25457  00133C  26F3               	addwf	prodl,f,c
 25458  00133E  0E00               	movlw	0
 25459  001340  22F4               	addwfc	prodh,f,c
 25460  001342  0E00               	movlw	low _Channels
 25461  001344  24F3               	addwf	prodl,w,c
 25462  001346  6ED9               	movwf	fsr2l,c
 25463  001348  0E04               	movlw	high _Channels
 25464  00134A  20F4               	addwfc	prodh,w,c
 25465  00134C  6EDA               	movwf	fsr2h,c
 25466  00134E  6ADE               	clrf	postinc2,c
 25467  001350  6ADE               	clrf	postinc2,c
 25468  001352  6ADE               	clrf	postinc2,c
 25469  001354  6ADD               	clrf	postdec2,c
 25470  001356                     l1879:
 25471                           
 25472                           ;lorawan_eu.c: 424: }
 25473                           ;lorawan_eu.c: 425: }
 25474                           ;lorawan_eu.c: 426: if ( (Channels[i].channelTimer <= minim) && (Channels[i].channelTime
      +                          r !=0) )
 25475                           
 25476                           ; BSR set to: 0
 25477  001356  0100               	movlb	0	; () banked
 25478  001358  51E2               	movf	LORAWAN_TxDone@i& (0+255),w,b
 25479  00135A  0D0E               	mullw	14
 25480  00135C  0E08               	movlw	8
 25481  00135E  26F3               	addwf	prodl,f,c
 25482  001360  0E00               	movlw	0
 25483  001362  22F4               	addwfc	prodh,f,c
 25484  001364  0E00               	movlw	low _Channels
 25485  001366  24F3               	addwf	prodl,w,c
 25486  001368  6ED9               	movwf	fsr2l,c
 25487  00136A  0E04               	movlw	high _Channels
 25488  00136C  20F4               	addwfc	prodh,w,c
 25489  00136E  6EDA               	movwf	fsr2h,c
 25490  001370  50DE               	movf	postinc2,w,c
 25491  001372  5DDE               	subwf	LORAWAN_TxDone@minim& (0+255),w,b
 25492  001374  50DE               	movf	postinc2,w,c
 25493  001376  59DF               	subwfb	(LORAWAN_TxDone@minim+1)& (0+255),w,b
 25494  001378  50DE               	movf	postinc2,w,c
 25495  00137A  59E0               	subwfb	(LORAWAN_TxDone@minim+2)& (0+255),w,b
 25496  00137C  50DE               	movf	postinc2,w,c
 25497  00137E  59E1               	subwfb	(LORAWAN_TxDone@minim+3)& (0+255),w,b
 25498  001380  A0D8               	btfss	status,0,c
 25499  001382  D028               	goto	l1880
 25500                           
 25501                           ; BSR set to: 0
 25502  001384  51E2               	movf	LORAWAN_TxDone@i& (0+255),w,b
 25503  001386  0D0E               	mullw	14
 25504  001388  0E08               	movlw	8
 25505  00138A  26F3               	addwf	prodl,f,c
 25506  00138C  0E00               	movlw	0
 25507  00138E  22F4               	addwfc	prodh,f,c
 25508  001390  0E00               	movlw	low _Channels
 25509  001392  24F3               	addwf	prodl,w,c
 25510  001394  6ED9               	movwf	fsr2l,c
 25511  001396  0E04               	movlw	high _Channels
 25512  001398  20F4               	addwfc	prodh,w,c
 25513  00139A  6EDA               	movwf	fsr2h,c
 25514  00139C  50DE               	movf	postinc2,w,c
 25515  00139E  10DE               	iorwf	postinc2,w,c
 25516  0013A0  10DE               	iorwf	postinc2,w,c
 25517  0013A2  10DE               	iorwf	postinc2,w,c
 25518  0013A4  B4D8               	btfsc	status,2,c
 25519  0013A6  D016               	goto	l1880
 25520                           
 25521                           ; BSR set to: 0
 25522                           ;lorawan_eu.c: 427: {
 25523                           ;lorawan_eu.c: 428: minim = Channels[i].channelTimer;
 25524  0013A8  51E2               	movf	LORAWAN_TxDone@i& (0+255),w,b
 25525  0013AA  0D0E               	mullw	14
 25526  0013AC  0E08               	movlw	8
 25527  0013AE  26F3               	addwf	prodl,f,c
 25528  0013B0  0E00               	movlw	0
 25529  0013B2  22F4               	addwfc	prodh,f,c
 25530  0013B4  0E00               	movlw	low _Channels
 25531  0013B6  24F3               	addwf	prodl,w,c
 25532  0013B8  6ED9               	movwf	fsr2l,c
 25533  0013BA  0E04               	movlw	high _Channels
 25534  0013BC  20F4               	addwfc	prodh,w,c
 25535  0013BE  6EDA               	movwf	fsr2h,c
 25536  0013C0  CFDE F0DE          	movff	postinc2,LORAWAN_TxDone@minim
 25537  0013C4  CFDE F0DF          	movff	postinc2,LORAWAN_TxDone@minim+1
 25538  0013C8  CFDE F0E0          	movff	postinc2,LORAWAN_TxDone@minim+2
 25539  0013CC  CFDE F0E1          	movff	postinc2,LORAWAN_TxDone@minim+3
 25540                           
 25541                           ; BSR set to: 0
 25542                           ;lorawan_eu.c: 429: found = 1;
 25543  0013D0  0E01               	movlw	1
 25544  0013D2  6FD1               	movwf	LORAWAN_TxDone@found& (0+255),b
 25545  0013D4                     l1880:
 25546                           
 25547                           ; BSR set to: 0
 25548                           
 25549                           ; BSR set to: 0
 25550                           
 25551                           ; BSR set to: 0
 25552  0013D4  2BE2               	incf	LORAWAN_TxDone@i& (0+255),f,b
 25553  0013D6  D728               	goto	l11647
 25554  0013D8                     u12420:
 25555                           
 25556                           ; BSR set to: 0
 25557                           ;lorawan_eu.c: 430: }
 25558                           ;lorawan_eu.c: 431: }
 25559                           ;lorawan_eu.c: 432: }
 25560                           ;lorawan_eu.c: 433: if (found == 1)
 25561                           
 25562                           ; BSR set to: 0
 25563  0013D8  05D1               	decf	LORAWAN_TxDone@found& (0+255),w,b
 25564  0013DA  A4D8               	btfss	status,2,c
 25565  0013DC  D067               	goto	l1881
 25566                           
 25567                           ; BSR set to: 0
 25568                           ;lorawan_eu.c: 434: {
 25569                           ;lorawan_eu.c: 435: loRa.lastTimerValue = minim;
 25570  0013DE  C0DE  F2CE         	movff	LORAWAN_TxDone@minim,_loRa+200
 25571  0013E2  C0DF  F2CF         	movff	LORAWAN_TxDone@minim+1,_loRa+201
 25572  0013E6  C0E0  F2D0         	movff	LORAWAN_TxDone@minim+2,_loRa+202
 25573  0013EA  C0E1  F2D1         	movff	LORAWAN_TxDone@minim+3,_loRa+203
 25574                           
 25575                           ; BSR set to: 0
 25576                           ;lorawan_eu.c: 436: SwTimerSetTimeout (loRa.dutyCycleTimerId, ((minim) < 0x000FFFFFUL ? 
      +                          ( (((uint32_t)(minim)) << (12)) / 125UL ) : ( (((uint32_t)(minim)) / 125UL) << (12) ) ))
      +                          ;
 25577  0013EE  51E1               	movf	(LORAWAN_TxDone@minim+3)& (0+255),w,b
 25578  0013F0  E107               	bnz	u12440
 25579  0013F2  29DE               	incf	LORAWAN_TxDone@minim& (0+255),w,b
 25580  0013F4  0EFF               	movlw	255
 25581  0013F6  59DF               	subwfb	(LORAWAN_TxDone@minim+1)& (0+255),w,b
 25582  0013F8  0E0F               	movlw	15
 25583  0013FA  59E0               	subwfb	(LORAWAN_TxDone@minim+2)& (0+255),w,b
 25584  0013FC  A0D8               	btfss	status,0,c
 25585  0013FE  D01C               	goto	l1883
 25586  001400                     u12440:
 25587                           
 25588                           ; BSR set to: 0
 25589  001400  C0DE  F060         	movff	LORAWAN_TxDone@minim,___lldiv@dividend
 25590  001404  C0DF  F061         	movff	LORAWAN_TxDone@minim+1,___lldiv@dividend+1
 25591  001408  C0E0  F062         	movff	LORAWAN_TxDone@minim+2,___lldiv@dividend+2
 25592  00140C  C0E1  F063         	movff	LORAWAN_TxDone@minim+3,___lldiv@dividend+3
 25593  001410  0E7D               	movlw	125
 25594  001412  6F64               	movwf	___lldiv@divisor& (0+255),b
 25595  001414  0E00               	movlw	0
 25596  001416  6F65               	movwf	(___lldiv@divisor+1)& (0+255),b
 25597  001418  0E00               	movlw	0
 25598  00141A  6F66               	movwf	(___lldiv@divisor+2)& (0+255),b
 25599  00141C  0E00               	movlw	0
 25600  00141E  6F67               	movwf	(___lldiv@divisor+3)& (0+255),b
 25601  001420  EC0A  F03D         	call	___lldiv	;wreg free
 25602  001424  0E0C               	movlw	12
 25603  001426                     u12455:
 25604  001426  90D8               	bcf	status,0,c
 25605  001428  0100               	movlb	0	; () banked
 25606  00142A  3760               	rlcf	?___lldiv& (0+255),f,b
 25607  00142C  3761               	rlcf	(?___lldiv+1)& (0+255),f,b
 25608  00142E  3762               	rlcf	(?___lldiv+2)& (0+255),f,b
 25609  001430  3763               	rlcf	(?___lldiv+3)& (0+255),f,b
 25610  001432  2EE8               	decfsz	wreg,f,c
 25611  001434  D7F8               	goto	u12455
 25612  001436  D022               	goto	L17
 25613  001438                     l1883:
 25614                           
 25615                           ; BSR set to: 0
 25616                           
 25617                           ; BSR set to: 0
 25618  001438  C0DE  F0BD         	movff	LORAWAN_TxDone@minim,??_LORAWAN_TxDone
 25619  00143C  C0DF  F0BE         	movff	LORAWAN_TxDone@minim+1,??_LORAWAN_TxDone+1
 25620  001440  C0E0  F0BF         	movff	LORAWAN_TxDone@minim+2,??_LORAWAN_TxDone+2
 25621  001444  C0E1  F0C0         	movff	LORAWAN_TxDone@minim+3,??_LORAWAN_TxDone+3
 25622  001448  0E0C               	movlw	12
 25623  00144A                     u12465:
 25624  00144A  90D8               	bcf	status,0,c
 25625  00144C  37BD               	rlcf	??_LORAWAN_TxDone& (0+255),f,b
 25626  00144E  37BE               	rlcf	(??_LORAWAN_TxDone+1)& (0+255),f,b
 25627  001450  37BF               	rlcf	(??_LORAWAN_TxDone+2)& (0+255),f,b
 25628  001452  37C0               	rlcf	(??_LORAWAN_TxDone+3)& (0+255),f,b
 25629  001454  2EE8               	decfsz	wreg,f,c
 25630  001456  D7F9               	goto	u12465
 25631  001458  C0BD  F060         	movff	??_LORAWAN_TxDone,___lldiv@dividend
 25632  00145C  C0BE  F061         	movff	??_LORAWAN_TxDone+1,___lldiv@dividend+1
 25633  001460  C0BF  F062         	movff	??_LORAWAN_TxDone+2,___lldiv@dividend+2
 25634  001464  C0C0  F063         	movff	??_LORAWAN_TxDone+3,___lldiv@dividend+3
 25635  001468  0E7D               	movlw	125
 25636  00146A  6F64               	movwf	___lldiv@divisor& (0+255),b
 25637  00146C  0E00               	movlw	0
 25638  00146E  6F65               	movwf	(___lldiv@divisor+1)& (0+255),b
 25639  001470  0E00               	movlw	0
 25640  001472  6F66               	movwf	(___lldiv@divisor+2)& (0+255),b
 25641  001474  0E00               	movlw	0
 25642  001476  6F67               	movwf	(___lldiv@divisor+3)& (0+255),b
 25643  001478  EC0A  F03D         	call	___lldiv	;wreg free
 25644  00147C                     L17:
 25645  00147C  C060  F0CD         	movff	?___lldiv,_LORAWAN_TxDone$2661
 25646  001480  C061  F0CE         	movff	?___lldiv+1,_LORAWAN_TxDone$2661+1
 25647  001484  C062  F0CF         	movff	?___lldiv+2,_LORAWAN_TxDone$2661+2
 25648  001488  C063  F0D0         	movff	?___lldiv+3,_LORAWAN_TxDone$2661+3
 25649  00148C  C0CD  F06D         	movff	_LORAWAN_TxDone$2661,SwTimerSetTimeout@timeout
 25650  001490  C0CE  F06E         	movff	_LORAWAN_TxDone$2661+1,SwTimerSetTimeout@timeout+1
 25651  001494  C0CF  F06F         	movff	_LORAWAN_TxDone$2661+2,SwTimerSetTimeout@timeout+2
 25652  001498  C0D0  F070         	movff	_LORAWAN_TxDone$2661+3,SwTimerSetTimeout@timeout+3
 25653  00149C  0102               	movlb	2	; () banked
 25654  00149E  51EF               	movf	(_loRa+233)& (0+255),w,b
 25655  0014A0  EC27  F045         	call	_SwTimerSetTimeout
 25656                           
 25657                           ;lorawan_eu.c: 437: SwTimerStart (loRa.dutyCycleTimerId);
 25658  0014A4  0102               	movlb	2	; () banked
 25659  0014A6  51EF               	movf	(_loRa+233)& (0+255),w,b
 25660  0014A8  ECDA  F03A         	call	_SwTimerStart
 25661  0014AC                     l1881:
 25662                           
 25663                           ;lorawan_eu.c: 438: }
 25664                           ;lorawan_eu.c: 439: if (CLASS_C == loRa.deviceClass)
 25665  0014AC  0E02               	movlw	2
 25666  0014AE  0102               	movlb	2	; () banked
 25667  0014B0  1918               	xorwf	(_loRa+18)& (0+255),w,b
 25668  0014B2  A4D8               	btfss	status,2,c
 25669  0014B4  0012               	return	
 25670                           
 25671                           ; BSR set to: 2
 25672                           ;lorawan_eu.c: 440: {
 25673                           ;lorawan_eu.c: 441: loRa.macStatus.macState = CLASS_C_RX2_1_OPEN;
 25674  0014B6  5108               	movf	(_loRa+2)& (0+255),w,b
 25675  0014B8  0BF0               	andlw	-16
 25676  0014BA  0908               	iorlw	8
 25677  0014BC  6F08               	movwf	(_loRa+2)& (0+255),b
 25678                           
 25679                           ; BSR set to: 2
 25680                           ;lorawan_eu.c: 442: LORAWAN_EnterContinuousReceive();
 25681  0014BE  EC0C  F03E         	call	_LORAWAN_EnterContinuousReceive	;wreg free
 25682                           
 25683                           ;lorawan_eu.c: 443: }
 25684                           ;lorawan_eu.c: 444: }
 25685  0014C2  0012               	return	
 25686  0014C4                     l1865:
 25687                           
 25688                           ;lorawan_eu.c: 445: else
 25689                           ;lorawan_eu.c: 446: {
 25690                           ;lorawan_eu.c: 447: if ((RADIO_GetStatus() & (1 << (4))) != 0)
 25691  0014C4  ECD2  F04A         	call	_RADIO_GetStatus	;wreg free
 25692  0014C8  0100               	movlb	0	; () banked
 25693  0014CA  6FBD               	movwf	??_LORAWAN_TxDone& (0+255),b
 25694  0014CC  A9BD               	btfss	??_LORAWAN_TxDone& (0+255),4,b
 25695  0014CE  D014               	goto	l1888
 25696                           
 25697                           ; BSR set to: 0
 25698                           ;lorawan_eu.c: 448: {
 25699                           ;lorawan_eu.c: 450: rxPayload.RxAppData( (0), 0, RADIO_NOT_OK );
 25700  0014D0  0E00               	movlw	0
 25701  0014D2  6F60               	movwf	RxData@pData& (0+255),b
 25702  0014D4  0E00               	movlw	0
 25703  0014D6  6F61               	movwf	(RxData@pData+1)& (0+255),b
 25704  0014D8  0E00               	movlw	0
 25705  0014DA  6F62               	movwf	RxData@dataLength& (0+255),b
 25706  0014DC  0E02               	movlw	2
 25707  0014DE  6F63               	movwf	RxData@status& (0+255),b
 25708  0014E0  D801               	call	u12498
 25709  0014E2  0012               	return	
 25710  0014E4                     u12498:
 25711  0014E4  0005               	push	
 25712  0014E6  6EFA               	movwf	pclath,c
 25713  0014E8  0101               	movlb	1	; () banked
 25714  0014EA  510C               	movf	_rxPayload& (0+255),w,b
 25715  0014EC  6EFD               	movwf	tosl,c
 25716  0014EE  510D               	movf	(_rxPayload+1)& (0+255),w,b
 25717  0014F0  6EFE               	movwf	tosh,c
 25718  0014F2  6AFF               	clrf	tosu,c
 25719  0014F4  50FA               	movf	pclath,w,c
 25720  0014F6  0012               	return		;indir
 25721  0014F8                     l1888:
 25722                           
 25723                           ;lorawan_eu.c: 452: else
 25724                           ;lorawan_eu.c: 453: {
 25725                           ;lorawan_eu.c: 455: if ( rxPayload.RxAppData != (0) )
 25726  0014F8  0101               	movlb	1	; () banked
 25727  0014FA  510C               	movf	_rxPayload& (0+255),w,b
 25728  0014FC  110D               	iorwf	(_rxPayload+1)& (0+255),w,b
 25729  0014FE  B4D8               	btfsc	status,2,c
 25730  001500  0012               	return	
 25731                           
 25732                           ; BSR set to: 1
 25733                           ;lorawan_eu.c: 456: {
 25734                           ;lorawan_eu.c: 457: rxPayload.RxAppData( (0), 0, RADIO_OK );
 25735  001502  0E00               	movlw	0
 25736  001504  0100               	movlb	0	; () banked
 25737  001506  6F60               	movwf	RxData@pData& (0+255),b
 25738  001508  0E00               	movlw	0
 25739  00150A  6F61               	movwf	(RxData@pData+1)& (0+255),b
 25740  00150C  0E00               	movlw	0
 25741  00150E  6F62               	movwf	RxData@dataLength& (0+255),b
 25742  001510  0E03               	movlw	3
 25743  001512  6F63               	movwf	RxData@status& (0+255),b
 25744  001514  D801               	call	u12518
 25745  001516  0012               	return	
 25746  001518                     u12518:
 25747  001518  0005               	push	
 25748  00151A  6EFA               	movwf	pclath,c
 25749  00151C  0101               	movlb	1	; () banked
 25750  00151E  510C               	movf	_rxPayload& (0+255),w,b
 25751  001520  6EFD               	movwf	tosl,c
 25752  001522  510D               	movf	(_rxPayload+1)& (0+255),w,b
 25753  001524  6EFE               	movwf	tosh,c
 25754  001526  6AFF               	clrf	tosu,c
 25755  001528  50FA               	movf	pclath,w,c
 25756  00152A  0012               	return		;indir
 25757  00152C                     __end_of_LORAWAN_TxDone:
 25758                           	opt stack 0
 25759                           tosu	equ	0xFFF
 25760                           tosh	equ	0xFFE
 25761                           tosl	equ	0xFFD
 25762                           pclath	equ	0xFFA
 25763                           tblptru	equ	0xFF8
 25764                           tblptrh	equ	0xFF7
 25765                           tblptrl	equ	0xFF6
 25766                           tablat	equ	0xFF5
 25767                           prodh	equ	0xFF4
 25768                           prodl	equ	0xFF3
 25769                           intcon	equ	0xFF2
 25770                           intcon2	equ	0xFF1
 25771                           intcon3	equ	0xFF0
 25772                           indf0	equ	0xFEF
 25773                           postinc0	equ	0xFEE
 25774                           fsr0h	equ	0xFEA
 25775                           fsr0l	equ	0xFE9
 25776                           wreg	equ	0xFE8
 25777                           postinc1	equ	0xFE6
 25778                           postdec1	equ	0xFE5
 25779                           plusw1	equ	0xFE3
 25780                           fsr1h	equ	0xFE2
 25781                           fsr1l	equ	0xFE1
 25782                           indf2	equ	0xFDF
 25783                           postinc2	equ	0xFDE
 25784                           postdec2	equ	0xFDD
 25785                           plusw2	equ	0xFDB
 25786                           fsr2h	equ	0xFDA
 25787                           fsr2l	equ	0xFD9
 25788                           status	equ	0xFD8
 25789                           
 25790 ;; *************** function _SwTimerReadValue *****************
 25791 ;; Defined at:
 25792 ;;		line 193 in file "mcc_generated_files/LoRaWAN/sw_timer.c"
 25793 ;; Parameters:    Size  Location     Type
 25794 ;;  timerId         1    wreg     unsigned char 
 25795 ;; Auto vars:     Size  Location     Type
 25796 ;;  timerId         1   57[BANK0 ] unsigned char 
 25797 ;;  ticksCount      4   53[BANK0 ] unsigned long 
 25798 ;; Return value:  Size  Location     Type
 25799 ;;                  4   49[BANK0 ] unsigned long 
 25800 ;; Registers used:
 25801 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 25802 ;; Tracked objects:
 25803 ;;		On entry : 0/0
 25804 ;;		On exit  : 0/0
 25805 ;;		Unchanged: 0/0
 25806 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25807 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25808 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25809 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25810 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25811 ;;Total ram usage:        9 bytes
 25812 ;; Hardware stack levels used:    1
 25813 ;; Hardware stack levels required when called:   10
 25814 ;; This function calls:
 25815 ;;		_SwTimersInterrupt
 25816 ;; This function is called by:
 25817 ;;		_RADIO_TxDone
 25818 ;;		_RADIO_FSKPacketSent
 25819 ;;		_LORAWAN_TxDone
 25820 ;;		_LORAWAN_Pause
 25821 ;; This function uses a non-reentrant model
 25822 ;;
 25823                           
 25824                           	psect	text115
 25825  008B58                     __ptext115:
 25826                           	opt stack 0
 25827  008B58                     _SwTimerReadValue:
 25828                           	opt stack 16
 25829                           
 25830                           ;incstack = 0
 25831                           ;SwTimerReadValue@timerId stored from wreg
 25832  008B58  0100               	movlb	0	; () banked
 25833  008B5A  6F99               	movwf	SwTimerReadValue@timerId& (0+255),b
 25834                           
 25835                           ;sw_timer.c: 195: uint32_t ticksCount;
 25836                           ;sw_timer.c: 197: (INTCONbits.GIE = 0);
 25837  008B5C  9EF2               	bcf	intcon,7,c	;volatile
 25838                           
 25839                           ;sw_timer.c: 200: SwTimersInterrupt();
 25840  008B5E  ECF1  F030         	call	_SwTimersInterrupt	;wreg free
 25841                           
 25842                           ;sw_timer.c: 201: ticksCount = swTimers[timerId].ticksRemaining;
 25843  008B62  0100               	movlb	0	; () banked
 25844  008B64  5199               	movf	SwTimerReadValue@timerId& (0+255),w,b
 25845  008B66  0D08               	mullw	8
 25846  008B68  0E00               	movlw	low _swTimers
 25847  008B6A  24F3               	addwf	prodl,w,c
 25848  008B6C  6ED9               	movwf	fsr2l,c
 25849  008B6E  0E03               	movlw	high _swTimers
 25850  008B70  20F4               	addwfc	prodh,w,c
 25851  008B72  6EDA               	movwf	fsr2h,c
 25852  008B74  CFDE F095          	movff	postinc2,SwTimerReadValue@ticksCount
 25853  008B78  CFDE F096          	movff	postinc2,SwTimerReadValue@ticksCount+1
 25854  008B7C  CFDE F097          	movff	postinc2,SwTimerReadValue@ticksCount+2
 25855  008B80  CFDE F098          	movff	postinc2,SwTimerReadValue@ticksCount+3
 25856                           
 25857                           ; BSR set to: 0
 25858                           ;sw_timer.c: 202: (INTCONbits.GIE = 1);
 25859  008B84  8EF2               	bsf	intcon,7,c	;volatile
 25860                           
 25861                           ; BSR set to: 0
 25862                           ;sw_timer.c: 204: return ticksCount;
 25863  008B86  C095  F091         	movff	SwTimerReadValue@ticksCount,?_SwTimerReadValue
 25864  008B8A  C096  F092         	movff	SwTimerReadValue@ticksCount+1,?_SwTimerReadValue+1
 25865  008B8E  C097  F093         	movff	SwTimerReadValue@ticksCount+2,?_SwTimerReadValue+2
 25866  008B92  C098  F094         	movff	SwTimerReadValue@ticksCount+3,?_SwTimerReadValue+3
 25867  008B96  0012               	return	
 25868  008B98                     __end_of_SwTimerReadValue:
 25869                           	opt stack 0
 25870                           tosu	equ	0xFFF
 25871                           tosh	equ	0xFFE
 25872                           tosl	equ	0xFFD
 25873                           pclath	equ	0xFFA
 25874                           tblptru	equ	0xFF8
 25875                           tblptrh	equ	0xFF7
 25876                           tblptrl	equ	0xFF6
 25877                           tablat	equ	0xFF5
 25878                           prodh	equ	0xFF4
 25879                           prodl	equ	0xFF3
 25880                           intcon	equ	0xFF2
 25881                           intcon2	equ	0xFF1
 25882                           intcon3	equ	0xFF0
 25883                           indf0	equ	0xFEF
 25884                           postinc0	equ	0xFEE
 25885                           fsr0h	equ	0xFEA
 25886                           fsr0l	equ	0xFE9
 25887                           wreg	equ	0xFE8
 25888                           postinc1	equ	0xFE6
 25889                           postdec1	equ	0xFE5
 25890                           plusw1	equ	0xFE3
 25891                           fsr1h	equ	0xFE2
 25892                           fsr1l	equ	0xFE1
 25893                           indf2	equ	0xFDF
 25894                           postinc2	equ	0xFDE
 25895                           postdec2	equ	0xFDD
 25896                           plusw2	equ	0xFDB
 25897                           fsr2h	equ	0xFDA
 25898                           fsr2l	equ	0xFD9
 25899                           status	equ	0xFD8
 25900                           
 25901 ;; *************** function _SwTimerIsRunning *****************
 25902 ;; Defined at:
 25903 ;;		line 207 in file "mcc_generated_files/LoRaWAN/sw_timer.c"
 25904 ;; Parameters:    Size  Location     Type
 25905 ;;  timerId         1    wreg     unsigned char 
 25906 ;; Auto vars:     Size  Location     Type
 25907 ;;  timerId         1    0[BANK0 ] unsigned char 
 25908 ;;  isRunning       1    1[BANK0 ] unsigned char 
 25909 ;; Return value:  Size  Location     Type
 25910 ;;                  1    wreg      unsigned char 
 25911 ;; Registers used:
 25912 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 25913 ;; Tracked objects:
 25914 ;;		On entry : 0/0
 25915 ;;		On exit  : 0/0
 25916 ;;		Unchanged: 0/0
 25917 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25918 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25919 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25920 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25921 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25922 ;;Total ram usage:        2 bytes
 25923 ;; Hardware stack levels used:    1
 25924 ;; Hardware stack levels required when called:    7
 25925 ;; This function calls:
 25926 ;;		Nothing
 25927 ;; This function is called by:
 25928 ;;		_LORAWAN_TxDone
 25929 ;; This function uses a non-reentrant model
 25930 ;;
 25931                           
 25932                           	psect	text116
 25933  008F42                     __ptext116:
 25934                           	opt stack 0
 25935  008F42                     _SwTimerIsRunning:
 25936                           	opt stack 19
 25937                           
 25938                           ; BSR set to: 0
 25939                           ;incstack = 0
 25940                           ;SwTimerIsRunning@timerId stored from wreg
 25941  008F42  0100               	movlb	0	; () banked
 25942  008F44  6F60               	movwf	SwTimerIsRunning@timerId& (0+255),b
 25943                           
 25944                           ;sw_timer.c: 209: uint8_t isRunning;
 25945                           ;sw_timer.c: 211: (INTCONbits.GIE = 0);
 25946  008F46  9EF2               	bcf	intcon,7,c	;volatile
 25947                           
 25948                           ;sw_timer.c: 212: isRunning = swTimers[timerId].running;
 25949  008F48  0100               	movlb	0	; () banked
 25950  008F4A  5160               	movf	SwTimerIsRunning@timerId& (0+255),w,b
 25951  008F4C  0D08               	mullw	8
 25952  008F4E  0E04               	movlw	4
 25953  008F50  26F3               	addwf	prodl,f,c
 25954  008F52  0E00               	movlw	0
 25955  008F54  22F4               	addwfc	prodh,f,c
 25956  008F56  0E00               	movlw	low _swTimers
 25957  008F58  24F3               	addwf	prodl,w,c
 25958  008F5A  6ED9               	movwf	fsr2l,c
 25959  008F5C  0E03               	movlw	high _swTimers
 25960  008F5E  20F4               	addwfc	prodh,w,c
 25961  008F60  6EDA               	movwf	fsr2h,c
 25962  008F62  50DF               	movf	indf2,w,c
 25963  008F64  6F61               	movwf	SwTimerIsRunning@isRunning& (0+255),b
 25964                           
 25965                           ; BSR set to: 0
 25966                           ;sw_timer.c: 213: (INTCONbits.GIE = 1);
 25967  008F66  8EF2               	bsf	intcon,7,c	;volatile
 25968                           
 25969                           ; BSR set to: 0
 25970                           ;sw_timer.c: 215: return isRunning;
 25971  008F68  5161               	movf	SwTimerIsRunning@isRunning& (0+255),w,b
 25972  008F6A  0012               	return	
 25973  008F6C                     __end_of_SwTimerIsRunning:
 25974                           	opt stack 0
 25975                           tosu	equ	0xFFF
 25976                           tosh	equ	0xFFE
 25977                           tosl	equ	0xFFD
 25978                           pclath	equ	0xFFA
 25979                           tblptru	equ	0xFF8
 25980                           tblptrh	equ	0xFF7
 25981                           tblptrl	equ	0xFF6
 25982                           tablat	equ	0xFF5
 25983                           prodh	equ	0xFF4
 25984                           prodl	equ	0xFF3
 25985                           intcon	equ	0xFF2
 25986                           intcon2	equ	0xFF1
 25987                           intcon3	equ	0xFF0
 25988                           indf0	equ	0xFEF
 25989                           postinc0	equ	0xFEE
 25990                           fsr0h	equ	0xFEA
 25991                           fsr0l	equ	0xFE9
 25992                           wreg	equ	0xFE8
 25993                           postinc1	equ	0xFE6
 25994                           postdec1	equ	0xFE5
 25995                           plusw1	equ	0xFE3
 25996                           fsr1h	equ	0xFE2
 25997                           fsr1l	equ	0xFE1
 25998                           indf2	equ	0xFDF
 25999                           postinc2	equ	0xFDE
 26000                           postdec2	equ	0xFDD
 26001                           plusw2	equ	0xFDB
 26002                           fsr2h	equ	0xFDA
 26003                           fsr2l	equ	0xFD9
 26004                           status	equ	0xFD8
 26005                           
 26006 ;; *************** function _RADIO_GetStatus *****************
 26007 ;; Defined at:
 26008 ;;		line 1116 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 26009 ;; Parameters:    Size  Location     Type
 26010 ;;		None
 26011 ;; Auto vars:     Size  Location     Type
 26012 ;;		None
 26013 ;; Return value:  Size  Location     Type
 26014 ;;                  1    wreg      unsigned char 
 26015 ;; Registers used:
 26016 ;;		wreg, status,2
 26017 ;; Tracked objects:
 26018 ;;		On entry : 0/0
 26019 ;;		On exit  : 0/0
 26020 ;;		Unchanged: 0/0
 26021 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26022 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26023 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26024 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26025 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26026 ;;Total ram usage:        0 bytes
 26027 ;; Hardware stack levels used:    1
 26028 ;; Hardware stack levels required when called:    7
 26029 ;; This function calls:
 26030 ;;		Nothing
 26031 ;; This function is called by:
 26032 ;;		_LORAWAN_ReceiveWindow2Callback
 26033 ;;		_LORAWAN_RxDone
 26034 ;;		_LORAWAN_TxDone
 26035 ;; This function uses a non-reentrant model
 26036 ;;
 26037                           
 26038                           	psect	text117
 26039  0095A4                     __ptext117:
 26040                           	opt stack 0
 26041  0095A4                     _RADIO_GetStatus:
 26042                           	opt stack 19
 26043                           
 26044                           ;radio_driver_SX1276.c: 1118: return RadioConfiguration.flags;
 26045                           
 26046                           ; BSR set to: 0
 26047                           ;incstack = 0
 26048  0095A4  0101               	movlb	1	; () banked
 26049  0095A6  517A               	movf	(_RadioConfiguration+35)& (0+255),w,b
 26050  0095A8  0012               	return	
 26051  0095AA                     __end_of_RADIO_GetStatus:
 26052                           	opt stack 0
 26053                           tosu	equ	0xFFF
 26054                           tosh	equ	0xFFE
 26055                           tosl	equ	0xFFD
 26056                           pclath	equ	0xFFA
 26057                           tblptru	equ	0xFF8
 26058                           tblptrh	equ	0xFF7
 26059                           tblptrl	equ	0xFF6
 26060                           tablat	equ	0xFF5
 26061                           prodh	equ	0xFF4
 26062                           prodl	equ	0xFF3
 26063                           intcon	equ	0xFF2
 26064                           intcon2	equ	0xFF1
 26065                           intcon3	equ	0xFF0
 26066                           indf0	equ	0xFEF
 26067                           postinc0	equ	0xFEE
 26068                           fsr0h	equ	0xFEA
 26069                           fsr0l	equ	0xFE9
 26070                           wreg	equ	0xFE8
 26071                           postinc1	equ	0xFE6
 26072                           postdec1	equ	0xFE5
 26073                           plusw1	equ	0xFE3
 26074                           fsr1h	equ	0xFE2
 26075                           fsr1l	equ	0xFE1
 26076                           indf2	equ	0xFDF
 26077                           postinc2	equ	0xFDE
 26078                           postdec2	equ	0xFDD
 26079                           plusw2	equ	0xFDB
 26080                           fsr2h	equ	0xFDA
 26081                           fsr2l	equ	0xFD9
 26082                           status	equ	0xFD8
 26083                           
 26084 ;; *************** function _LORAWAN_EnterContinuousReceive *****************
 26085 ;; Defined at:
 26086 ;;		line 915 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 26087 ;; Parameters:    Size  Location     Type
 26088 ;;		None
 26089 ;; Auto vars:     Size  Location     Type
 26090 ;;		None
 26091 ;; Return value:  Size  Location     Type
 26092 ;;                  1    wreg      void 
 26093 ;; Registers used:
 26094 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 26095 ;; Tracked objects:
 26096 ;;		On entry : 0/0
 26097 ;;		On exit  : 0/0
 26098 ;;		Unchanged: 0/0
 26099 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26100 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26101 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26102 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26103 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26104 ;;Total ram usage:        0 bytes
 26105 ;; Hardware stack levels used:    1
 26106 ;; Hardware stack levels required when called:   13
 26107 ;; This function calls:
 26108 ;;		_ConfigureRadioRx
 26109 ;;		_RADIO_ReceiveStart
 26110 ;;		_RADIO_ReceiveStop
 26111 ;;		_RADIO_ReleaseData
 26112 ;;		_ResetParametersForConfirmedTransmission
 26113 ;;		_ResetParametersForUnconfirmedTransmission
 26114 ;;		_RxData
 26115 ;; This function is called by:
 26116 ;;		_LORAWAN_ReceiveWindow2Callback
 26117 ;;		_LORAWAN_RxDone
 26118 ;;		_SetReceptionNotOkState
 26119 ;;		_LORAWAN_TxDone
 26120 ;; This function uses a non-reentrant model
 26121 ;;
 26122                           
 26123                           	psect	text118
 26124  007C18                     __ptext118:
 26125                           	opt stack 0
 26126  007C18                     _LORAWAN_EnterContinuousReceive:
 26127                           	opt stack 13
 26128                           
 26129                           ;lorawan.c: 917: RADIO_ReceiveStop();
 26130                           
 26131                           ; BSR set to: 1
 26132                           ;incstack = 0
 26133  007C18  ECCE  F048         	call	_RADIO_ReceiveStop	;wreg free
 26134                           
 26135                           ;lorawan.c: 918: RADIO_ReleaseData();
 26136  007C1C  ECD5  F04A         	call	_RADIO_ReleaseData	;wreg free
 26137                           
 26138                           ;lorawan.c: 920: ConfigureRadioRx(loRa.receiveWindow2Parameters.dataRate, loRa.receiveWi
      +                          ndow2Parameters.frequency);
 26139  007C20  C21E  F073         	movff	_loRa+24,ConfigureRadioRx@freq
 26140  007C24  C21F  F074         	movff	_loRa+25,ConfigureRadioRx@freq+1
 26141  007C28  C220  F075         	movff	_loRa+26,ConfigureRadioRx@freq+2
 26142  007C2C  C221  F076         	movff	_loRa+27,ConfigureRadioRx@freq+3
 26143  007C30  0102               	movlb	2	; () banked
 26144  007C32  5122               	movf	(_loRa+28)& (0+255),w,b
 26145  007C34  ECB6  F047         	call	_ConfigureRadioRx
 26146                           
 26147                           ;lorawan.c: 922: if (RADIO_ReceiveStart(0) != OK)
 26148  007C38  0E00               	movlw	0
 26149  007C3A  0100               	movlb	0	; () banked
 26150  007C3C  6FB2               	movwf	(RADIO_ReceiveStart@rxWindowSize+1)& (0+255),b
 26151  007C3E  0E00               	movlw	0
 26152  007C40  6FB1               	movwf	RADIO_ReceiveStart@rxWindowSize& (0+255),b
 26153  007C42  EC2D  F021         	call	_RADIO_ReceiveStart	;wreg free
 26154  007C46  0100               	movlb	0	; () banked
 26155  007C48  51B1               	movf	?_RADIO_ReceiveStart& (0+255),w,b
 26156  007C4A  11B2               	iorwf	(?_RADIO_ReceiveStart+1)& (0+255),w,b
 26157  007C4C  B4D8               	btfsc	status,2,c
 26158  007C4E  0012               	return	
 26159                           
 26160                           ; BSR set to: 0
 26161                           ;lorawan.c: 923: {
 26162                           ;lorawan.c: 924: ResetParametersForConfirmedTransmission ();
 26163  007C50  ECF7  F049         	call	_ResetParametersForConfirmedTransmission	;wreg free
 26164                           
 26165                           ;lorawan.c: 925: ResetParametersForUnconfirmedTransmission ();
 26166  007C54  ECD0  F049         	call	_ResetParametersForUnconfirmedTransmission	;wreg free
 26167                           
 26168                           ;lorawan.c: 926: loRa.macStatus.macState = IDLE;
 26169  007C58  0102               	movlb	2	; () banked
 26170  007C5A  9108               	bcf	(_loRa+2)& (0+255),0,b
 26171  007C5C  9308               	bcf	(_loRa+2)& (0+255),1,b
 26172  007C5E  9508               	bcf	(_loRa+2)& (0+255),2,b
 26173  007C60  9708               	bcf	(_loRa+2)& (0+255),3,b
 26174                           
 26175                           ; BSR set to: 2
 26176                           ;lorawan.c: 927: if (rxPayload.RxAppData != (0))
 26177  007C62  0101               	movlb	1	; () banked
 26178  007C64  510C               	movf	_rxPayload& (0+255),w,b
 26179  007C66  110D               	iorwf	(_rxPayload+1)& (0+255),w,b
 26180  007C68  B4D8               	btfsc	status,2,c
 26181  007C6A  0012               	return	
 26182                           
 26183                           ; BSR set to: 1
 26184                           ;lorawan.c: 928: {
 26185                           ;lorawan.c: 929: rxPayload.RxAppData ((0), 0, MAC_NOT_OK);
 26186  007C6C  0E00               	movlw	0
 26187  007C6E  0100               	movlb	0	; () banked
 26188  007C70  6F60               	movwf	RxData@pData& (0+255),b
 26189  007C72  0E00               	movlw	0
 26190  007C74  6F61               	movwf	(RxData@pData+1)& (0+255),b
 26191  007C76  0E00               	movlw	0
 26192  007C78  6F62               	movwf	RxData@dataLength& (0+255),b
 26193  007C7A  0E00               	movlw	0
 26194  007C7C  6F63               	movwf	RxData@status& (0+255),b
 26195  007C7E  D801               	call	u10258
 26196  007C80  0012               	return	
 26197  007C82                     u10258:
 26198  007C82  0005               	push	
 26199  007C84  6EFA               	movwf	pclath,c
 26200  007C86  0101               	movlb	1	; () banked
 26201  007C88  510C               	movf	_rxPayload& (0+255),w,b
 26202  007C8A  6EFD               	movwf	tosl,c
 26203  007C8C  510D               	movf	(_rxPayload+1)& (0+255),w,b
 26204  007C8E  6EFE               	movwf	tosh,c
 26205  007C90  6AFF               	clrf	tosu,c
 26206  007C92  50FA               	movf	pclath,w,c
 26207  007C94  0012               	return		;indir
 26208  007C96                     __end_of_LORAWAN_EnterContinuousReceive:
 26209                           	opt stack 0
 26210                           tosu	equ	0xFFF
 26211                           tosh	equ	0xFFE
 26212                           tosl	equ	0xFFD
 26213                           pclath	equ	0xFFA
 26214                           tblptru	equ	0xFF8
 26215                           tblptrh	equ	0xFF7
 26216                           tblptrl	equ	0xFF6
 26217                           tablat	equ	0xFF5
 26218                           prodh	equ	0xFF4
 26219                           prodl	equ	0xFF3
 26220                           intcon	equ	0xFF2
 26221                           intcon2	equ	0xFF1
 26222                           intcon3	equ	0xFF0
 26223                           indf0	equ	0xFEF
 26224                           postinc0	equ	0xFEE
 26225                           fsr0h	equ	0xFEA
 26226                           fsr0l	equ	0xFE9
 26227                           wreg	equ	0xFE8
 26228                           postinc1	equ	0xFE6
 26229                           postdec1	equ	0xFE5
 26230                           plusw1	equ	0xFE3
 26231                           fsr1h	equ	0xFE2
 26232                           fsr1l	equ	0xFE1
 26233                           indf2	equ	0xFDF
 26234                           postinc2	equ	0xFDE
 26235                           postdec2	equ	0xFDD
 26236                           plusw2	equ	0xFDB
 26237                           fsr2h	equ	0xFDA
 26238                           fsr2l	equ	0xFD9
 26239                           status	equ	0xFD8
 26240                           
 26241 ;; *************** function _RxData *****************
 26242 ;; Defined at:
 26243 ;;		line 85 in file "main.c"
 26244 ;; Parameters:    Size  Location     Type
 26245 ;;  pData           2    0[BANK0 ] PTR unsigned char 
 26246 ;;		 -> radioBuffer(271), LORAWAN_RxDone@hdr(2), NULL(0), 
 26247 ;;  dataLength      1    2[BANK0 ] unsigned char 
 26248 ;;  status          1    3[BANK0 ] enum E7378
 26249 ;; Auto vars:     Size  Location     Type
 26250 ;;		None
 26251 ;; Return value:  Size  Location     Type
 26252 ;;                  1    wreg      void 
 26253 ;; Registers used:
 26254 ;;		None
 26255 ;; Tracked objects:
 26256 ;;		On entry : 0/0
 26257 ;;		On exit  : 0/0
 26258 ;;		Unchanged: 0/0
 26259 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26260 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26261 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26262 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26263 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26264 ;;Total ram usage:        4 bytes
 26265 ;; Hardware stack levels used:    1
 26266 ;; Hardware stack levels required when called:    7
 26267 ;; This function calls:
 26268 ;;		Nothing
 26269 ;; This function is called by:
 26270 ;;		_main
 26271 ;;		_LORAWAN_EnterContinuousReceive
 26272 ;;		_LORAWAN_ReceiveWindow2Callback
 26273 ;;		_SetReceptionNotOkState
 26274 ;;		_LORAWAN_RxDone
 26275 ;;		_LORAWAN_RxTimeout
 26276 ;;		_LORAWAN_TxDone
 26277 ;;		_AckRetransmissionCallback
 26278 ;;		_UnconfirmedTransmissionCallback
 26279 ;; This function uses a non-reentrant model
 26280 ;;
 26281                           
 26282                           	psect	text119
 26283  0095F2                     __ptext119:
 26284                           	opt stack 0
 26285  0095F2                     _RxData:
 26286                           	opt stack 20
 26287                           
 26288                           ;incstack = 0
 26289  0095F2  0012               	return		;funcret
 26290  0095F4                     __end_of_RxData:
 26291                           	opt stack 0
 26292                           tosu	equ	0xFFF
 26293                           tosh	equ	0xFFE
 26294                           tosl	equ	0xFFD
 26295                           pclath	equ	0xFFA
 26296                           tblptru	equ	0xFF8
 26297                           tblptrh	equ	0xFF7
 26298                           tblptrl	equ	0xFF6
 26299                           tablat	equ	0xFF5
 26300                           prodh	equ	0xFF4
 26301                           prodl	equ	0xFF3
 26302                           intcon	equ	0xFF2
 26303                           intcon2	equ	0xFF1
 26304                           intcon3	equ	0xFF0
 26305                           indf0	equ	0xFEF
 26306                           postinc0	equ	0xFEE
 26307                           fsr0h	equ	0xFEA
 26308                           fsr0l	equ	0xFE9
 26309                           wreg	equ	0xFE8
 26310                           postinc1	equ	0xFE6
 26311                           postdec1	equ	0xFE5
 26312                           plusw1	equ	0xFE3
 26313                           fsr1h	equ	0xFE2
 26314                           fsr1l	equ	0xFE1
 26315                           indf2	equ	0xFDF
 26316                           postinc2	equ	0xFDE
 26317                           postdec2	equ	0xFDD
 26318                           plusw2	equ	0xFDB
 26319                           fsr2h	equ	0xFDA
 26320                           fsr2l	equ	0xFD9
 26321                           status	equ	0xFD8
 26322                           
 26323 ;; *************** function _ResetParametersForUnconfirmedTransmission *****************
 26324 ;; Defined at:
 26325 ;;		line 1097 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 26326 ;; Parameters:    Size  Location     Type
 26327 ;;		None
 26328 ;; Auto vars:     Size  Location     Type
 26329 ;;		None
 26330 ;; Return value:  Size  Location     Type
 26331 ;;                  1    wreg      void 
 26332 ;; Registers used:
 26333 ;;		wreg, status,2
 26334 ;; Tracked objects:
 26335 ;;		On entry : 0/0
 26336 ;;		On exit  : 0/0
 26337 ;;		Unchanged: 0/0
 26338 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26339 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26340 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26341 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26342 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26343 ;;Total ram usage:        0 bytes
 26344 ;; Hardware stack levels used:    1
 26345 ;; Hardware stack levels required when called:    7
 26346 ;; This function calls:
 26347 ;;		Nothing
 26348 ;; This function is called by:
 26349 ;;		_LORAWAN_ReceiveWindow2Callback
 26350 ;;		_LORAWAN_EnterContinuousReceive
 26351 ;;		_UnconfirmedTransmissionCallback
 26352 ;;		_LORAWAN_RxTimeout
 26353 ;; This function uses a non-reentrant model
 26354 ;;
 26355                           
 26356                           	psect	text120
 26357  0093A0                     __ptext120:
 26358                           	opt stack 0
 26359  0093A0                     _ResetParametersForUnconfirmedTransmission:
 26360                           	opt stack 20
 26361                           
 26362                           ;lorawan.c: 1099: loRa.macStatus.macState = IDLE;
 26363                           
 26364                           ;incstack = 0
 26365  0093A0  0102               	movlb	2	; () banked
 26366  0093A2  9108               	bcf	(_loRa+2)& (0+255),0,b
 26367  0093A4  9308               	bcf	(_loRa+2)& (0+255),1,b
 26368  0093A6  9508               	bcf	(_loRa+2)& (0+255),2,b
 26369  0093A8  9708               	bcf	(_loRa+2)& (0+255),3,b
 26370                           
 26371                           ; BSR set to: 2
 26372                           ;lorawan.c: 1100: loRa.counterRepetitionsUnconfirmedUplink = 1;
 26373  0093AA  0E01               	movlw	1
 26374  0093AC  6FDE               	movwf	(_loRa+216)& (0+255),b
 26375                           
 26376                           ;lorawan.c: 1101: loRa.crtMacCmdIndex = 0;
 26377  0093AE  0E00               	movlw	0
 26378  0093B0  6FAD               	movwf	(_loRa+167)& (0+255),b
 26379                           
 26380                           ; BSR set to: 2
 26381  0093B2  0012               	return		;funcret
 26382  0093B4                     __end_of_ResetParametersForUnconfirmedTransmission:
 26383                           	opt stack 0
 26384                           tosu	equ	0xFFF
 26385                           tosh	equ	0xFFE
 26386                           tosl	equ	0xFFD
 26387                           pclath	equ	0xFFA
 26388                           tblptru	equ	0xFF8
 26389                           tblptrh	equ	0xFF7
 26390                           tblptrl	equ	0xFF6
 26391                           tablat	equ	0xFF5
 26392                           prodh	equ	0xFF4
 26393                           prodl	equ	0xFF3
 26394                           intcon	equ	0xFF2
 26395                           intcon2	equ	0xFF1
 26396                           intcon3	equ	0xFF0
 26397                           indf0	equ	0xFEF
 26398                           postinc0	equ	0xFEE
 26399                           fsr0h	equ	0xFEA
 26400                           fsr0l	equ	0xFE9
 26401                           wreg	equ	0xFE8
 26402                           postinc1	equ	0xFE6
 26403                           postdec1	equ	0xFE5
 26404                           plusw1	equ	0xFE3
 26405                           fsr1h	equ	0xFE2
 26406                           fsr1l	equ	0xFE1
 26407                           indf2	equ	0xFDF
 26408                           postinc2	equ	0xFDE
 26409                           postdec2	equ	0xFDD
 26410                           plusw2	equ	0xFDB
 26411                           fsr2h	equ	0xFDA
 26412                           fsr2l	equ	0xFD9
 26413                           status	equ	0xFD8
 26414                           
 26415 ;; *************** function _ResetParametersForConfirmedTransmission *****************
 26416 ;; Defined at:
 26417 ;;		line 1090 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 26418 ;; Parameters:    Size  Location     Type
 26419 ;;		None
 26420 ;; Auto vars:     Size  Location     Type
 26421 ;;		None
 26422 ;; Return value:  Size  Location     Type
 26423 ;;                  1    wreg      void 
 26424 ;; Registers used:
 26425 ;;		wreg, status,2
 26426 ;; Tracked objects:
 26427 ;;		On entry : 0/0
 26428 ;;		On exit  : 0/0
 26429 ;;		Unchanged: 0/0
 26430 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26431 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26432 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26433 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26434 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26435 ;;Total ram usage:        0 bytes
 26436 ;; Hardware stack levels used:    1
 26437 ;; Hardware stack levels required when called:    7
 26438 ;; This function calls:
 26439 ;;		Nothing
 26440 ;; This function is called by:
 26441 ;;		_LORAWAN_ReceiveWindow2Callback
 26442 ;;		_LORAWAN_EnterContinuousReceive
 26443 ;;		_AckRetransmissionCallback
 26444 ;;		_LORAWAN_RxTimeout
 26445 ;; This function uses a non-reentrant model
 26446 ;;
 26447                           
 26448                           	psect	text121
 26449  0093EE                     __ptext121:
 26450                           	opt stack 0
 26451  0093EE                     _ResetParametersForConfirmedTransmission:
 26452                           	opt stack 18
 26453                           
 26454                           ;lorawan.c: 1092: loRa.macStatus.macState = IDLE;
 26455                           
 26456                           ; BSR set to: 2
 26457                           ;incstack = 0
 26458  0093EE  0102               	movlb	2	; () banked
 26459  0093F0  9108               	bcf	(_loRa+2)& (0+255),0,b
 26460  0093F2  9308               	bcf	(_loRa+2)& (0+255),1,b
 26461  0093F4  9508               	bcf	(_loRa+2)& (0+255),2,b
 26462  0093F6  9708               	bcf	(_loRa+2)& (0+255),3,b
 26463                           
 26464                           ; BSR set to: 2
 26465                           ;lorawan.c: 1093: loRa.counterRepetitionsConfirmedUplink = 1;
 26466  0093F8  0E01               	movlw	1
 26467  0093FA  6FDF               	movwf	(_loRa+217)& (0+255),b
 26468                           
 26469                           ; BSR set to: 2
 26470                           ;lorawan.c: 1094: loRa.lorawanMacStatus.ackRequiredFromNextDownlinkMessage = 0;
 26471  0093FC  9106               	bcf	_loRa& (0+255),0,b
 26472                           
 26473                           ; BSR set to: 2
 26474  0093FE  0012               	return		;funcret
 26475  009400                     __end_of_ResetParametersForConfirmedTransmission:
 26476                           	opt stack 0
 26477                           tosu	equ	0xFFF
 26478                           tosh	equ	0xFFE
 26479                           tosl	equ	0xFFD
 26480                           pclath	equ	0xFFA
 26481                           tblptru	equ	0xFF8
 26482                           tblptrh	equ	0xFF7
 26483                           tblptrl	equ	0xFF6
 26484                           tablat	equ	0xFF5
 26485                           prodh	equ	0xFF4
 26486                           prodl	equ	0xFF3
 26487                           intcon	equ	0xFF2
 26488                           intcon2	equ	0xFF1
 26489                           intcon3	equ	0xFF0
 26490                           indf0	equ	0xFEF
 26491                           postinc0	equ	0xFEE
 26492                           fsr0h	equ	0xFEA
 26493                           fsr0l	equ	0xFE9
 26494                           wreg	equ	0xFE8
 26495                           postinc1	equ	0xFE6
 26496                           postdec1	equ	0xFE5
 26497                           plusw1	equ	0xFE3
 26498                           fsr1h	equ	0xFE2
 26499                           fsr1l	equ	0xFE1
 26500                           indf2	equ	0xFDF
 26501                           postinc2	equ	0xFDE
 26502                           postdec2	equ	0xFDD
 26503                           plusw2	equ	0xFDB
 26504                           fsr2h	equ	0xFDA
 26505                           fsr2l	equ	0xFD9
 26506                           status	equ	0xFD8
 26507                           
 26508 ;; *************** function _RADIO_ReleaseData *****************
 26509 ;; Defined at:
 26510 ;;		line 1134 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 26511 ;; Parameters:    Size  Location     Type
 26512 ;;		None
 26513 ;; Auto vars:     Size  Location     Type
 26514 ;;		None
 26515 ;; Return value:  Size  Location     Type
 26516 ;;                  1    wreg      void 
 26517 ;; Registers used:
 26518 ;;		status,2, status,0
 26519 ;; Tracked objects:
 26520 ;;		On entry : 0/0
 26521 ;;		On exit  : 0/0
 26522 ;;		Unchanged: 0/0
 26523 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26524 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26525 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26526 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26527 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26528 ;;Total ram usage:        0 bytes
 26529 ;; Hardware stack levels used:    1
 26530 ;; Hardware stack levels required when called:    7
 26531 ;; This function calls:
 26532 ;;		Nothing
 26533 ;; This function is called by:
 26534 ;;		_LORAWAN_ReceiveWindow1Callback
 26535 ;;		_LORAWAN_ReceiveWindow2Callback
 26536 ;;		_LORAWAN_EnterContinuousReceive
 26537 ;;		_LORAWAN_RxDone
 26538 ;; This function uses a non-reentrant model
 26539 ;;
 26540                           
 26541                           	psect	text122
 26542  0095AA                     __ptext122:
 26543                           	opt stack 0
 26544  0095AA                     _RADIO_ReleaseData:
 26545                           	opt stack 18
 26546                           
 26547                           ;radio_driver_SX1276.c: 1136: RadioConfiguration.flags &= ~(1 << (2));
 26548                           
 26549                           ; BSR set to: 2
 26550                           ;incstack = 0
 26551  0095AA  0101               	movlb	1	; () banked
 26552  0095AC  957A               	bcf	(_RadioConfiguration+35)& (0+255),2,b
 26553                           
 26554                           ; BSR set to: 1
 26555  0095AE  0012               	return		;funcret
 26556  0095B0                     __end_of_RADIO_ReleaseData:
 26557                           	opt stack 0
 26558                           tosu	equ	0xFFF
 26559                           tosh	equ	0xFFE
 26560                           tosl	equ	0xFFD
 26561                           pclath	equ	0xFFA
 26562                           tblptru	equ	0xFF8
 26563                           tblptrh	equ	0xFF7
 26564                           tblptrl	equ	0xFF6
 26565                           tablat	equ	0xFF5
 26566                           prodh	equ	0xFF4
 26567                           prodl	equ	0xFF3
 26568                           intcon	equ	0xFF2
 26569                           intcon2	equ	0xFF1
 26570                           intcon3	equ	0xFF0
 26571                           indf0	equ	0xFEF
 26572                           postinc0	equ	0xFEE
 26573                           fsr0h	equ	0xFEA
 26574                           fsr0l	equ	0xFE9
 26575                           wreg	equ	0xFE8
 26576                           postinc1	equ	0xFE6
 26577                           postdec1	equ	0xFE5
 26578                           plusw1	equ	0xFE3
 26579                           fsr1h	equ	0xFE2
 26580                           fsr1l	equ	0xFE1
 26581                           indf2	equ	0xFDF
 26582                           postinc2	equ	0xFDE
 26583                           postdec2	equ	0xFDD
 26584                           plusw2	equ	0xFDB
 26585                           fsr2h	equ	0xFDA
 26586                           fsr2l	equ	0xFD9
 26587                           status	equ	0xFD8
 26588                           
 26589 ;; *************** function _RADIO_ReceiveStop *****************
 26590 ;; Defined at:
 26591 ;;		line 951 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 26592 ;; Parameters:    Size  Location     Type
 26593 ;;		None
 26594 ;; Auto vars:     Size  Location     Type
 26595 ;;		None
 26596 ;; Return value:  Size  Location     Type
 26597 ;;                  1    wreg      void 
 26598 ;; Registers used:
 26599 ;;		wreg, status,2, status,0, cstack
 26600 ;; Tracked objects:
 26601 ;;		On entry : 0/0
 26602 ;;		On exit  : 0/0
 26603 ;;		Unchanged: 0/0
 26604 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26605 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26606 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26607 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26608 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26609 ;;Total ram usage:        0 bytes
 26610 ;; Hardware stack levels used:    1
 26611 ;; Hardware stack levels required when called:   11
 26612 ;; This function calls:
 26613 ;;		_RADIO_WriteMode
 26614 ;; This function is called by:
 26615 ;;		_LORAWAN_Send
 26616 ;;		_LORAWAN_ReceiveWindow1Callback
 26617 ;;		_LORAWAN_ReceiveWindow2Callback
 26618 ;;		_LORAWAN_EnterContinuousReceive
 26619 ;;		_LORAWAN_SetClass
 26620 ;; This function uses a non-reentrant model
 26621 ;;
 26622                           
 26623                           	psect	text123
 26624  00919C                     __ptext123:
 26625                           	opt stack 0
 26626  00919C                     _RADIO_ReceiveStop:
 26627                           	opt stack 18
 26628                           
 26629                           ;radio_driver_SX1276.c: 953: if ((1 << (1)) == RadioConfiguration.flags)
 26630                           
 26631                           ; BSR set to: 1
 26632                           ;incstack = 0
 26633  00919C  0E02               	movlw	2
 26634  00919E  0101               	movlb	1	; () banked
 26635  0091A0  197A               	xorwf	(_RadioConfiguration+35)& (0+255),w,b
 26636  0091A2  A4D8               	btfss	status,2,c
 26637  0091A4  0012               	return	
 26638                           
 26639                           ; BSR set to: 1
 26640                           ;radio_driver_SX1276.c: 954: {
 26641                           ;radio_driver_SX1276.c: 955: RADIO_WriteMode(MODE_SLEEP, RadioConfiguration.modulation, 
      +                          0);
 26642  0091A6  C16F  F065         	movff	_RadioConfiguration+24,RADIO_WriteMode@newModulation
 26643  0091AA  0E00               	movlw	0
 26644  0091AC  0100               	movlb	0	; () banked
 26645  0091AE  6F66               	movwf	RADIO_WriteMode@blocking& (0+255),b
 26646  0091B0  0E00               	movlw	0
 26647  0091B2  ECF4  F031         	call	_RADIO_WriteMode
 26648                           
 26649                           ;radio_driver_SX1276.c: 956: RadioConfiguration.flags &= ~(1 << (1));
 26650  0091B6  0101               	movlb	1	; () banked
 26651  0091B8  937A               	bcf	(_RadioConfiguration+35)& (0+255),1,b
 26652  0091BA  0012               	return	
 26653  0091BC                     __end_of_RADIO_ReceiveStop:
 26654                           	opt stack 0
 26655                           tosu	equ	0xFFF
 26656                           tosh	equ	0xFFE
 26657                           tosl	equ	0xFFD
 26658                           pclath	equ	0xFFA
 26659                           tblptru	equ	0xFF8
 26660                           tblptrh	equ	0xFF7
 26661                           tblptrl	equ	0xFF6
 26662                           tablat	equ	0xFF5
 26663                           prodh	equ	0xFF4
 26664                           prodl	equ	0xFF3
 26665                           intcon	equ	0xFF2
 26666                           intcon2	equ	0xFF1
 26667                           intcon3	equ	0xFF0
 26668                           indf0	equ	0xFEF
 26669                           postinc0	equ	0xFEE
 26670                           fsr0h	equ	0xFEA
 26671                           fsr0l	equ	0xFE9
 26672                           wreg	equ	0xFE8
 26673                           postinc1	equ	0xFE6
 26674                           postdec1	equ	0xFE5
 26675                           plusw1	equ	0xFE3
 26676                           fsr1h	equ	0xFE2
 26677                           fsr1l	equ	0xFE1
 26678                           indf2	equ	0xFDF
 26679                           postinc2	equ	0xFDE
 26680                           postdec2	equ	0xFDD
 26681                           plusw2	equ	0xFDB
 26682                           fsr2h	equ	0xFDA
 26683                           fsr2l	equ	0xFD9
 26684                           status	equ	0xFD8
 26685                           
 26686 ;; *************** function _RADIO_ReceiveStart *****************
 26687 ;; Defined at:
 26688 ;;		line 875 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 26689 ;; Parameters:    Size  Location     Type
 26690 ;;  rxWindowSize    2   81[BANK0 ] unsigned int 
 26691 ;; Auto vars:     Size  Location     Type
 26692 ;;		None
 26693 ;; Return value:  Size  Location     Type
 26694 ;;                  2   81[BANK0 ] enum E7038
 26695 ;; Registers used:
 26696 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 26697 ;; Tracked objects:
 26698 ;;		On entry : 0/0
 26699 ;;		On exit  : 0/0
 26700 ;;		Unchanged: 0/0
 26701 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26702 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26703 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26704 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26705 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26706 ;;Total ram usage:       10 bytes
 26707 ;; Hardware stack levels used:    1
 26708 ;; Hardware stack levels required when called:   12
 26709 ;; This function calls:
 26710 ;;		_RADIO_RegisterWrite
 26711 ;;		_RADIO_WriteConfiguration
 26712 ;;		_RADIO_WriteMode
 26713 ;;		_SwTimerSetTimeout
 26714 ;;		_SwTimerStart
 26715 ;;		___lldiv
 26716 ;; This function is called by:
 26717 ;;		_LORAWAN_ReceiveWindow1Callback
 26718 ;;		_LORAWAN_ReceiveWindow2Callback
 26719 ;;		_LORAWAN_EnterContinuousReceive
 26720 ;; This function uses a non-reentrant model
 26721 ;;
 26722                           
 26723                           	psect	text124
 26724  00425A                     __ptext124:
 26725                           	opt stack 0
 26726  00425A                     _RADIO_ReceiveStart:
 26727                           	opt stack 13
 26728                           
 26729                           ;radio_driver_SX1276.c: 877: if ((RadioConfiguration.flags & (1 << (2))) != 0)
 26730                           
 26731                           ; BSR set to: 1
 26732                           ;incstack = 0
 26733  00425A  0101               	movlb	1	; () banked
 26734  00425C  A57A               	btfss	(_RadioConfiguration+35)& (0+255),2,b
 26735  00425E  D006               	goto	l293
 26736                           
 26737                           ; BSR set to: 1
 26738                           ;radio_driver_SX1276.c: 878: {
 26739                           ;radio_driver_SX1276.c: 879: return ERR_BUFFER_LOCKED;
 26740  004260  0E80               	movlw	128
 26741  004262  0100               	movlb	0	; () banked
 26742  004264  6FB2               	movwf	(?_RADIO_ReceiveStart+1)& (0+255),b
 26743  004266  0E03               	movlw	3
 26744  004268  6FB1               	movwf	?_RADIO_ReceiveStart& (0+255),b
 26745                           
 26746                           ; BSR set to: 0
 26747  00426A  0012               	return	
 26748  00426C                     l293:
 26749                           
 26750                           ;radio_driver_SX1276.c: 880: }
 26751                           ;radio_driver_SX1276.c: 882: if ((RadioConfiguration.flags & ((1 << (0)) | (1 << (1)))) 
      +                          != 0)
 26752                           
 26753                           ; BSR set to: 0
 26754  00426C  C17A  F0B3         	movff	_RadioConfiguration+35,??_RADIO_ReceiveStart
 26755  004270  0E03               	movlw	3
 26756  004272  0100               	movlb	0	; () banked
 26757  004274  17B3               	andwf	??_RADIO_ReceiveStart& (0+255),f,b
 26758  004276  B4D8               	btfsc	status,2,c
 26759  004278  D005               	goto	l295
 26760                           
 26761                           ; BSR set to: 0
 26762                           ;radio_driver_SX1276.c: 883: {
 26763                           ;radio_driver_SX1276.c: 884: return ERR_RADIO_BUSY;
 26764  00427A  0E80               	movlw	128
 26765  00427C  6FB2               	movwf	(?_RADIO_ReceiveStart+1)& (0+255),b
 26766  00427E  0E04               	movlw	4
 26767  004280  6FB1               	movwf	?_RADIO_ReceiveStart& (0+255),b
 26768                           
 26769                           ; BSR set to: 0
 26770  004282  0012               	return	
 26771  004284                     l295:
 26772                           
 26773                           ; BSR set to: 0
 26774                           ;radio_driver_SX1276.c: 885: }
 26775                           ;radio_driver_SX1276.c: 887: if (0 == rxWindowSize)
 26776                           
 26777                           ; BSR set to: 0
 26778  004284  51B1               	movf	RADIO_ReceiveStart@rxWindowSize& (0+255),w,b
 26779  004286  11B2               	iorwf	(RADIO_ReceiveStart@rxWindowSize+1)& (0+255),w,b
 26780  004288  A4D8               	btfss	status,2,c
 26781  00428A  D007               	goto	l296
 26782                           
 26783                           ; BSR set to: 0
 26784                           ;radio_driver_SX1276.c: 888: {
 26785                           ;radio_driver_SX1276.c: 889: RADIO_WriteConfiguration(4);
 26786  00428C  0E00               	movlw	0
 26787  00428E  6FA7               	movwf	(RADIO_WriteConfiguration@symbolTimeout+1)& (0+255),b
 26788  004290  0E04               	movlw	4
 26789  004292  6FA6               	movwf	RADIO_WriteConfiguration@symbolTimeout& (0+255),b
 26790  004294  EC96  F00A         	call	_RADIO_WriteConfiguration	;wreg free
 26791                           
 26792                           ;radio_driver_SX1276.c: 890: }
 26793  004298  D006               	goto	l297
 26794  00429A                     l296:
 26795                           
 26796                           ;radio_driver_SX1276.c: 891: else
 26797                           ;radio_driver_SX1276.c: 892: {
 26798                           ;radio_driver_SX1276.c: 893: RADIO_WriteConfiguration(rxWindowSize);
 26799  00429A  C0B1  F0A6         	movff	RADIO_ReceiveStart@rxWindowSize,RADIO_WriteConfiguration@symbolTimeout
 26800  00429E  C0B2  F0A7         	movff	RADIO_ReceiveStart@rxWindowSize+1,RADIO_WriteConfiguration@symbolTimeout+1
 26801  0042A2  EC96  F00A         	call	_RADIO_WriteConfiguration	;wreg free
 26802  0042A6                     l297:
 26803                           
 26804                           ;radio_driver_SX1276.c: 894: }
 26805                           ;radio_driver_SX1276.c: 896: if (MODULATION_LORA == RadioConfiguration.modulation)
 26806  0042A6  0101               	movlb	1	; () banked
 26807  0042A8  056F               	decf	(_RadioConfiguration+24)& (0+255),w,b
 26808  0042AA  A4D8               	btfss	status,2,c
 26809  0042AC  D013               	goto	l298
 26810                           
 26811                           ; BSR set to: 1
 26812                           ;radio_driver_SX1276.c: 897: {
 26813                           ;radio_driver_SX1276.c: 900: RADIO_RegisterWrite(0x22, 0x01);
 26814  0042AE  0E01               	movlw	1
 26815  0042B0  0100               	movlb	0	; () banked
 26816  0042B2  6F62               	movwf	RADIO_RegisterWrite@value& (0+255),b
 26817  0042B4  0E22               	movlw	34
 26818  0042B6  ECDE  F048         	call	_RADIO_RegisterWrite
 26819                           
 26820                           ;radio_driver_SX1276.c: 906: RADIO_RegisterWrite(0x40, 0x00);
 26821  0042BA  0E00               	movlw	0
 26822  0042BC  0100               	movlb	0	; () banked
 26823  0042BE  6F62               	movwf	RADIO_RegisterWrite@value& (0+255),b
 26824  0042C0  0E40               	movlw	64
 26825  0042C2  ECDE  F048         	call	_RADIO_RegisterWrite
 26826                           
 26827                           ;radio_driver_SX1276.c: 907: RADIO_RegisterWrite(0x41, 0x00);
 26828  0042C6  0E00               	movlw	0
 26829  0042C8  0100               	movlb	0	; () banked
 26830  0042CA  6F62               	movwf	RADIO_RegisterWrite@value& (0+255),b
 26831  0042CC  0E41               	movlw	65
 26832  0042CE  ECDE  F048         	call	_RADIO_RegisterWrite
 26833                           
 26834                           ;radio_driver_SX1276.c: 908: }
 26835  0042D2  D016               	goto	l299
 26836  0042D4                     l298:
 26837                           
 26838                           ;radio_driver_SX1276.c: 909: else
 26839                           ;radio_driver_SX1276.c: 910: {
 26840                           ;radio_driver_SX1276.c: 911: RADIO_RegisterWrite(0x12, RadioConfiguration.rxBw);
 26841  0042D4  C18B  F062         	movff	_RadioConfiguration+52,RADIO_RegisterWrite@value
 26842  0042D8  0E12               	movlw	18
 26843  0042DA  ECDE  F048         	call	_RADIO_RegisterWrite
 26844                           
 26845                           ;radio_driver_SX1276.c: 912: RADIO_RegisterWrite(0x13, RadioConfiguration.afcBw);
 26846  0042DE  C18C  F062         	movff	_RadioConfiguration+53,RADIO_RegisterWrite@value
 26847  0042E2  0E13               	movlw	19
 26848  0042E4  ECDE  F048         	call	_RADIO_RegisterWrite
 26849                           
 26850                           ;radio_driver_SX1276.c: 915: RADIO_RegisterWrite(0x40, 0x00);
 26851  0042E8  0E00               	movlw	0
 26852  0042EA  0100               	movlb	0	; () banked
 26853  0042EC  6F62               	movwf	RADIO_RegisterWrite@value& (0+255),b
 26854  0042EE  0E40               	movlw	64
 26855  0042F0  ECDE  F048         	call	_RADIO_RegisterWrite
 26856                           
 26857                           ;radio_driver_SX1276.c: 916: RADIO_RegisterWrite(0x41, 0x00);
 26858  0042F4  0E00               	movlw	0
 26859  0042F6  0100               	movlb	0	; () banked
 26860  0042F8  6F62               	movwf	RADIO_RegisterWrite@value& (0+255),b
 26861  0042FA  0E41               	movlw	65
 26862  0042FC  ECDE  F048         	call	_RADIO_RegisterWrite
 26863  004300                     l299:
 26864                           
 26865                           ;radio_driver_SX1276.c: 917: }
 26866                           ;radio_driver_SX1276.c: 919: RadioConfiguration.flags |= (1 << (1));
 26867  004300  0101               	movlb	1	; () banked
 26868  004302  837A               	bsf	(_RadioConfiguration+35)& (0+255),1,b
 26869                           
 26870                           ; BSR set to: 1
 26871                           ;radio_driver_SX1276.c: 920: RadioConfiguration.flags &= ~((1 << (4)) | (1 << (3)));
 26872  004304  0EE7               	movlw	231
 26873  004306  177A               	andwf	(_RadioConfiguration+35)& (0+255),f,b
 26874                           
 26875                           ; BSR set to: 1
 26876                           ;radio_driver_SX1276.c: 924: if (0 == rxWindowSize)
 26877  004308  0100               	movlb	0	; () banked
 26878  00430A  51B1               	movf	RADIO_ReceiveStart@rxWindowSize& (0+255),w,b
 26879  00430C  11B2               	iorwf	(RADIO_ReceiveStart@rxWindowSize+1)& (0+255),w,b
 26880  00430E  A4D8               	btfss	status,2,c
 26881  004310  D008               	goto	l300
 26882                           
 26883                           ; BSR set to: 0
 26884                           ;radio_driver_SX1276.c: 925: {
 26885                           ;radio_driver_SX1276.c: 926: RADIO_WriteMode(MODE_RXCONT, RadioConfiguration.modulation,
      +                           0);
 26886  004312  C16F  F065         	movff	_RadioConfiguration+24,RADIO_WriteMode@newModulation
 26887  004316  0E00               	movlw	0
 26888  004318  6F66               	movwf	RADIO_WriteMode@blocking& (0+255),b
 26889  00431A  0E05               	movlw	5
 26890  00431C  ECF4  F031         	call	_RADIO_WriteMode
 26891                           
 26892                           ;radio_driver_SX1276.c: 927: }
 26893  004320  D046               	goto	l303
 26894  004322                     l300:
 26895                           
 26896                           ;radio_driver_SX1276.c: 928: else
 26897                           ;radio_driver_SX1276.c: 929: {
 26898                           ;radio_driver_SX1276.c: 930: if (MODULATION_LORA == RadioConfiguration.modulation)
 26899  004322  0101               	movlb	1	; () banked
 26900  004324  056F               	decf	(_RadioConfiguration+24)& (0+255),w,b
 26901  004326  A4D8               	btfss	status,2,c
 26902  004328  D009               	goto	l302
 26903                           
 26904                           ; BSR set to: 1
 26905                           ;radio_driver_SX1276.c: 931: {
 26906                           ;radio_driver_SX1276.c: 932: RADIO_WriteMode(MODE_RXSINGLE, MODULATION_LORA, 0);
 26907  00432A  0E01               	movlw	1
 26908  00432C  0100               	movlb	0	; () banked
 26909  00432E  6F65               	movwf	RADIO_WriteMode@newModulation& (0+255),b
 26910  004330  0E00               	movlw	0
 26911  004332  6F66               	movwf	RADIO_WriteMode@blocking& (0+255),b
 26912  004334  0E06               	movlw	6
 26913  004336  ECF4  F031         	call	_RADIO_WriteMode
 26914                           
 26915                           ;radio_driver_SX1276.c: 933: }
 26916  00433A  D039               	goto	l303
 26917  00433C                     l302:
 26918                           
 26919                           ;radio_driver_SX1276.c: 934: else
 26920                           ;radio_driver_SX1276.c: 935: {
 26921                           ;radio_driver_SX1276.c: 936: RADIO_WriteMode(MODE_RXCONT, MODULATION_FSK, 0);
 26922  00433C  0E00               	movlw	0
 26923  00433E  0100               	movlb	0	; () banked
 26924  004340  6F65               	movwf	RADIO_WriteMode@newModulation& (0+255),b
 26925  004342  0E00               	movlw	0
 26926  004344  6F66               	movwf	RADIO_WriteMode@blocking& (0+255),b
 26927  004346  0E05               	movlw	5
 26928  004348  ECF4  F031         	call	_RADIO_WriteMode
 26929                           
 26930                           ;radio_driver_SX1276.c: 937: SwTimerSetTimeout(RadioConfiguration.fskRxWindowTimerId, ( 
      +                          (((uint32_t)(rxWindowSize)) << (12)) / 125UL ));
 26931  00434C  0100               	movlb	0	; () banked
 26932  00434E  51B1               	movf	RADIO_ReceiveStart@rxWindowSize& (0+255),w,b
 26933  004350  6FB3               	movwf	??_RADIO_ReceiveStart& (0+255),b
 26934  004352  51B2               	movf	(RADIO_ReceiveStart@rxWindowSize+1)& (0+255),w,b
 26935  004354  6FB4               	movwf	(??_RADIO_ReceiveStart+1)& (0+255),b
 26936  004356  6BB5               	clrf	(??_RADIO_ReceiveStart+2)& (0+255),b
 26937  004358  6BB6               	clrf	(??_RADIO_ReceiveStart+3)& (0+255),b
 26938  00435A  0E0C               	movlw	12
 26939  00435C                     u9175:
 26940  00435C  90D8               	bcf	status,0,c
 26941  00435E  37B3               	rlcf	??_RADIO_ReceiveStart& (0+255),f,b
 26942  004360  37B4               	rlcf	(??_RADIO_ReceiveStart+1)& (0+255),f,b
 26943  004362  37B5               	rlcf	(??_RADIO_ReceiveStart+2)& (0+255),f,b
 26944  004364  37B6               	rlcf	(??_RADIO_ReceiveStart+3)& (0+255),f,b
 26945  004366  2EE8               	decfsz	wreg,f,c
 26946  004368  D7F9               	goto	u9175
 26947  00436A  C0B3  F060         	movff	??_RADIO_ReceiveStart,___lldiv@dividend
 26948  00436E  C0B4  F061         	movff	??_RADIO_ReceiveStart+1,___lldiv@dividend+1
 26949  004372  C0B5  F062         	movff	??_RADIO_ReceiveStart+2,___lldiv@dividend+2
 26950  004376  C0B6  F063         	movff	??_RADIO_ReceiveStart+3,___lldiv@dividend+3
 26951  00437A  0E7D               	movlw	125
 26952  00437C  6F64               	movwf	___lldiv@divisor& (0+255),b
 26953  00437E  0E00               	movlw	0
 26954  004380  6F65               	movwf	(___lldiv@divisor+1)& (0+255),b
 26955  004382  0E00               	movlw	0
 26956  004384  6F66               	movwf	(___lldiv@divisor+2)& (0+255),b
 26957  004386  0E00               	movlw	0
 26958  004388  6F67               	movwf	(___lldiv@divisor+3)& (0+255),b
 26959  00438A  EC0A  F03D         	call	___lldiv	;wreg free
 26960  00438E  C060  F06D         	movff	?___lldiv,SwTimerSetTimeout@timeout
 26961  004392  C061  F06E         	movff	?___lldiv+1,SwTimerSetTimeout@timeout+1
 26962  004396  C062  F06F         	movff	?___lldiv+2,SwTimerSetTimeout@timeout+2
 26963  00439A  C063  F070         	movff	?___lldiv+3,SwTimerSetTimeout@timeout+3
 26964  00439E  0101               	movlb	1	; () banked
 26965  0043A0  517F               	movf	(_RadioConfiguration+40)& (0+255),w,b
 26966  0043A2  EC27  F045         	call	_SwTimerSetTimeout
 26967                           
 26968                           ;radio_driver_SX1276.c: 938: SwTimerStart(RadioConfiguration.fskRxWindowTimerId);
 26969  0043A6  0101               	movlb	1	; () banked
 26970  0043A8  517F               	movf	(_RadioConfiguration+40)& (0+255),w,b
 26971  0043AA  ECDA  F03A         	call	_SwTimerStart
 26972  0043AE                     l303:
 26973                           
 26974                           ;radio_driver_SX1276.c: 939: }
 26975                           ;radio_driver_SX1276.c: 940: }
 26976                           ;radio_driver_SX1276.c: 942: if (0 != RadioConfiguration.watchdogTimerTimeout)
 26977  0043AE  0101               	movlb	1	; () banked
 26978  0043B0  5181               	movf	(_RadioConfiguration+42)& (0+255),w,b
 26979  0043B2  1182               	iorwf	(_RadioConfiguration+43)& (0+255),w,b
 26980  0043B4  1183               	iorwf	(_RadioConfiguration+44)& (0+255),w,b
 26981  0043B6  1184               	iorwf	(_RadioConfiguration+45)& (0+255),w,b
 26982  0043B8  B4D8               	btfsc	status,2,c
 26983  0043BA  D061               	goto	l304
 26984                           
 26985                           ; BSR set to: 1
 26986                           ;radio_driver_SX1276.c: 943: {
 26987                           ;radio_driver_SX1276.c: 944: SwTimerSetTimeout(RadioConfiguration.watchdogTimerId, ((Rad
      +                          ioConfiguration.watchdogTimerTimeout) < 0x000FFFFFUL ? ( (((uint32_t)(RadioConfiguration
      +                          .watchdogTimerTimeout)) << (12)) / 125UL ) : ( (((uint32_t)(RadioConfiguration.watchdogT
      +                          imerTimeout)) /
 26988  0043BC  5184               	movf	(_RadioConfiguration+45)& (0+255),w,b
 26989  0043BE  E107               	bnz	u9190
 26990  0043C0  2981               	incf	(_RadioConfiguration+42)& (0+255),w,b
 26991  0043C2  0EFF               	movlw	255
 26992  0043C4  5982               	subwfb	(_RadioConfiguration+43)& (0+255),w,b
 26993  0043C6  0E0F               	movlw	15
 26994  0043C8  5983               	subwfb	(_RadioConfiguration+44)& (0+255),w,b
 26995  0043CA  A0D8               	btfss	status,0,c
 26996  0043CC  D01D               	goto	l306
 26997  0043CE                     u9190:
 26998                           
 26999                           ; BSR set to: 1
 27000  0043CE  C181  F060         	movff	_RadioConfiguration+42,___lldiv@dividend
 27001  0043D2  C182  F061         	movff	_RadioConfiguration+43,___lldiv@dividend+1
 27002  0043D6  C183  F062         	movff	_RadioConfiguration+44,___lldiv@dividend+2
 27003  0043DA  C184  F063         	movff	_RadioConfiguration+45,___lldiv@dividend+3
 27004  0043DE  0E7D               	movlw	125
 27005  0043E0  0100               	movlb	0	; () banked
 27006  0043E2  6F64               	movwf	___lldiv@divisor& (0+255),b
 27007  0043E4  0E00               	movlw	0
 27008  0043E6  6F65               	movwf	(___lldiv@divisor+1)& (0+255),b
 27009  0043E8  0E00               	movlw	0
 27010  0043EA  6F66               	movwf	(___lldiv@divisor+2)& (0+255),b
 27011  0043EC  0E00               	movlw	0
 27012  0043EE  6F67               	movwf	(___lldiv@divisor+3)& (0+255),b
 27013  0043F0  EC0A  F03D         	call	___lldiv	;wreg free
 27014  0043F4  0E0C               	movlw	12
 27015  0043F6                     u9205:
 27016  0043F6  90D8               	bcf	status,0,c
 27017  0043F8  0100               	movlb	0	; () banked
 27018  0043FA  3760               	rlcf	?___lldiv& (0+255),f,b
 27019  0043FC  3761               	rlcf	(?___lldiv+1)& (0+255),f,b
 27020  0043FE  3762               	rlcf	(?___lldiv+2)& (0+255),f,b
 27021  004400  3763               	rlcf	(?___lldiv+3)& (0+255),f,b
 27022  004402  2EE8               	decfsz	wreg,f,c
 27023  004404  D7F8               	goto	u9205
 27024  004406  D023               	goto	L18
 27025  004408                     l306:
 27026                           
 27027                           ; BSR set to: 0
 27028  004408  C181  F0B3         	movff	_RadioConfiguration+42,??_RADIO_ReceiveStart
 27029  00440C  C182  F0B4         	movff	_RadioConfiguration+43,??_RADIO_ReceiveStart+1
 27030  004410  C183  F0B5         	movff	_RadioConfiguration+44,??_RADIO_ReceiveStart+2
 27031  004414  C184  F0B6         	movff	_RadioConfiguration+45,??_RADIO_ReceiveStart+3
 27032  004418  0E0C               	movlw	12
 27033  00441A                     u9215:
 27034  00441A  90D8               	bcf	status,0,c
 27035  00441C  0100               	movlb	0	; () banked
 27036  00441E  37B3               	rlcf	??_RADIO_ReceiveStart& (0+255),f,b
 27037  004420  37B4               	rlcf	(??_RADIO_ReceiveStart+1)& (0+255),f,b
 27038  004422  37B5               	rlcf	(??_RADIO_ReceiveStart+2)& (0+255),f,b
 27039  004424  37B6               	rlcf	(??_RADIO_ReceiveStart+3)& (0+255),f,b
 27040  004426  2EE8               	decfsz	wreg,f,c
 27041  004428  D7F8               	goto	u9215
 27042  00442A  C0B3  F060         	movff	??_RADIO_ReceiveStart,___lldiv@dividend
 27043  00442E  C0B4  F061         	movff	??_RADIO_ReceiveStart+1,___lldiv@dividend+1
 27044  004432  C0B5  F062         	movff	??_RADIO_ReceiveStart+2,___lldiv@dividend+2
 27045  004436  C0B6  F063         	movff	??_RADIO_ReceiveStart+3,___lldiv@dividend+3
 27046  00443A  0E7D               	movlw	125
 27047  00443C  6F64               	movwf	___lldiv@divisor& (0+255),b
 27048  00443E  0E00               	movlw	0
 27049  004440  6F65               	movwf	(___lldiv@divisor+1)& (0+255),b
 27050  004442  0E00               	movlw	0
 27051  004444  6F66               	movwf	(___lldiv@divisor+2)& (0+255),b
 27052  004446  0E00               	movlw	0
 27053  004448  6F67               	movwf	(___lldiv@divisor+3)& (0+255),b
 27054  00444A  EC0A  F03D         	call	___lldiv	;wreg free
 27055  00444E                     L18:
 27056  00444E  C060  F0B7         	movff	?___lldiv,_RADIO_ReceiveStart$521
 27057  004452  C061  F0B8         	movff	?___lldiv+1,_RADIO_ReceiveStart$521+1
 27058  004456  C062  F0B9         	movff	?___lldiv+2,_RADIO_ReceiveStart$521+2
 27059  00445A  C063  F0BA         	movff	?___lldiv+3,_RADIO_ReceiveStart$521+3
 27060  00445E  C0B7  F06D         	movff	_RADIO_ReceiveStart$521,SwTimerSetTimeout@timeout
 27061  004462  C0B8  F06E         	movff	_RADIO_ReceiveStart$521+1,SwTimerSetTimeout@timeout+1
 27062  004466  C0B9  F06F         	movff	_RADIO_ReceiveStart$521+2,SwTimerSetTimeout@timeout+2
 27063  00446A  C0BA  F070         	movff	_RADIO_ReceiveStart$521+3,SwTimerSetTimeout@timeout+3
 27064  00446E  0101               	movlb	1	; () banked
 27065  004470  5180               	movf	(_RadioConfiguration+41)& (0+255),w,b
 27066  004472  EC27  F045         	call	_SwTimerSetTimeout
 27067                           
 27068                           ;radio_driver_SX1276.c: 945: SwTimerStart(RadioConfiguration.watchdogTimerId);
 27069  004476  0101               	movlb	1	; () banked
 27070  004478  5180               	movf	(_RadioConfiguration+41)& (0+255),w,b
 27071  00447A  ECDA  F03A         	call	_SwTimerStart
 27072  00447E                     l304:
 27073                           
 27074                           ;radio_driver_SX1276.c: 946: }
 27075                           ;radio_driver_SX1276.c: 947: return ERR_NONE;
 27076  00447E  0E00               	movlw	0
 27077  004480  0100               	movlb	0	; () banked
 27078  004482  6FB2               	movwf	(?_RADIO_ReceiveStart+1)& (0+255),b
 27079  004484  0E00               	movlw	0
 27080  004486  6FB1               	movwf	?_RADIO_ReceiveStart& (0+255),b
 27081  004488  0012               	return	
 27082  00448A                     __end_of_RADIO_ReceiveStart:
 27083                           	opt stack 0
 27084                           tosu	equ	0xFFF
 27085                           tosh	equ	0xFFE
 27086                           tosl	equ	0xFFD
 27087                           pclath	equ	0xFFA
 27088                           tblptru	equ	0xFF8
 27089                           tblptrh	equ	0xFF7
 27090                           tblptrl	equ	0xFF6
 27091                           tablat	equ	0xFF5
 27092                           prodh	equ	0xFF4
 27093                           prodl	equ	0xFF3
 27094                           intcon	equ	0xFF2
 27095                           intcon2	equ	0xFF1
 27096                           intcon3	equ	0xFF0
 27097                           indf0	equ	0xFEF
 27098                           postinc0	equ	0xFEE
 27099                           fsr0h	equ	0xFEA
 27100                           fsr0l	equ	0xFE9
 27101                           wreg	equ	0xFE8
 27102                           postinc1	equ	0xFE6
 27103                           postdec1	equ	0xFE5
 27104                           plusw1	equ	0xFE3
 27105                           fsr1h	equ	0xFE2
 27106                           fsr1l	equ	0xFE1
 27107                           indf2	equ	0xFDF
 27108                           postinc2	equ	0xFDE
 27109                           postdec2	equ	0xFDD
 27110                           plusw2	equ	0xFDB
 27111                           fsr2h	equ	0xFDA
 27112                           fsr2l	equ	0xFD9
 27113                           status	equ	0xFD8
 27114                           
 27115 ;; *************** function _ConfigureRadioRx *****************
 27116 ;; Defined at:
 27117 ;;		line 2019 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 27118 ;; Parameters:    Size  Location     Type
 27119 ;;  dataRate        1    wreg     unsigned char 
 27120 ;;  freq            4   19[BANK0 ] unsigned long 
 27121 ;; Auto vars:     Size  Location     Type
 27122 ;;  dataRate        1   23[BANK0 ] unsigned char 
 27123 ;; Return value:  Size  Location     Type
 27124 ;;                  1    wreg      void 
 27125 ;; Registers used:
 27126 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 27127 ;; Tracked objects:
 27128 ;;		On entry : 0/0
 27129 ;;		On exit  : 0/0
 27130 ;;		Unchanged: 0/0
 27131 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27132 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27133 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27134 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27135 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27136 ;;Total ram usage:        5 bytes
 27137 ;; Hardware stack levels used:    1
 27138 ;; Hardware stack levels required when called:   10
 27139 ;; This function calls:
 27140 ;;		_ConfigureRadio
 27141 ;;		_RADIO_SetCRC
 27142 ;;		_RADIO_SetIQInverted
 27143 ;; This function is called by:
 27144 ;;		_LORAWAN_ReceiveWindow1Callback
 27145 ;;		_LORAWAN_ReceiveWindow2Callback
 27146 ;;		_LORAWAN_EnterContinuousReceive
 27147 ;; This function uses a non-reentrant model
 27148 ;;
 27149                           
 27150                           	psect	text125
 27151  008F6C                     __ptext125:
 27152                           	opt stack 0
 27153  008F6C                     _ConfigureRadioRx:
 27154                           	opt stack 15
 27155                           
 27156                           ; BSR set to: 0
 27157                           ;incstack = 0
 27158                           ;ConfigureRadioRx@dataRate stored from wreg
 27159  008F6C  0100               	movlb	0	; () banked
 27160  008F6E  6F77               	movwf	ConfigureRadioRx@dataRate& (0+255),b
 27161                           
 27162                           ;lorawan.c: 2021: ConfigureRadio(dataRate, freq);
 27163  008F70  C073  F06E         	movff	ConfigureRadioRx@freq,ConfigureRadio@freq
 27164  008F74  C074  F06F         	movff	ConfigureRadioRx@freq+1,ConfigureRadio@freq+1
 27165  008F78  C075  F070         	movff	ConfigureRadioRx@freq+2,ConfigureRadio@freq+2
 27166  008F7C  C076  F071         	movff	ConfigureRadioRx@freq+3,ConfigureRadio@freq+3
 27167  008F80  0100               	movlb	0	; () banked
 27168  008F82  5177               	movf	ConfigureRadioRx@dataRate& (0+255),w,b
 27169  008F84  EC94  F039         	call	_ConfigureRadio
 27170                           
 27171                           ;lorawan.c: 2022: RADIO_SetCRC(0);
 27172  008F88  0E00               	movlw	0
 27173  008F8A  ECA0  F04A         	call	_RADIO_SetCRC
 27174                           
 27175                           ;lorawan.c: 2023: RADIO_SetIQInverted(1);
 27176  008F8E  0E01               	movlw	1
 27177  008F90  EC9B  F04A         	call	_RADIO_SetIQInverted
 27178  008F94  0012               	return		;funcret
 27179  008F96                     __end_of_ConfigureRadioRx:
 27180                           	opt stack 0
 27181                           tosu	equ	0xFFF
 27182                           tosh	equ	0xFFE
 27183                           tosl	equ	0xFFD
 27184                           pclath	equ	0xFFA
 27185                           tblptru	equ	0xFF8
 27186                           tblptrh	equ	0xFF7
 27187                           tblptrl	equ	0xFF6
 27188                           tablat	equ	0xFF5
 27189                           prodh	equ	0xFF4
 27190                           prodl	equ	0xFF3
 27191                           intcon	equ	0xFF2
 27192                           intcon2	equ	0xFF1
 27193                           intcon3	equ	0xFF0
 27194                           indf0	equ	0xFEF
 27195                           postinc0	equ	0xFEE
 27196                           fsr0h	equ	0xFEA
 27197                           fsr0l	equ	0xFE9
 27198                           wreg	equ	0xFE8
 27199                           postinc1	equ	0xFE6
 27200                           postdec1	equ	0xFE5
 27201                           plusw1	equ	0xFE3
 27202                           fsr1h	equ	0xFE2
 27203                           fsr1l	equ	0xFE1
 27204                           indf2	equ	0xFDF
 27205                           postinc2	equ	0xFDE
 27206                           postdec2	equ	0xFDD
 27207                           plusw2	equ	0xFDB
 27208                           fsr2h	equ	0xFDA
 27209                           fsr2l	equ	0xFD9
 27210                           status	equ	0xFD8
 27211                           
 27212 ;; *************** function _INTERRUPT_GetDioStatus *****************
 27213 ;; Defined at:
 27214 ;;		line 48 in file "mcc_generated_files/LoRaWAN/interrupt_manager_lora_addons.c"
 27215 ;; Parameters:    Size  Location     Type
 27216 ;;		None
 27217 ;; Auto vars:     Size  Location     Type
 27218 ;;  a               1    0[BANK0 ] unsigned char 
 27219 ;; Return value:  Size  Location     Type
 27220 ;;                  1    wreg      unsigned char 
 27221 ;; Registers used:
 27222 ;;		wreg, status,2
 27223 ;; Tracked objects:
 27224 ;;		On entry : 0/0
 27225 ;;		On exit  : 0/0
 27226 ;;		Unchanged: 0/0
 27227 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27228 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27229 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27230 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27231 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27232 ;;Total ram usage:        1 bytes
 27233 ;; Hardware stack levels used:    1
 27234 ;; Hardware stack levels required when called:    7
 27235 ;; This function calls:
 27236 ;;		Nothing
 27237 ;; This function is called by:
 27238 ;;		_LORAWAN_Mainloop
 27239 ;; This function uses a non-reentrant model
 27240 ;;
 27241                           
 27242                           	psect	text126
 27243  0093B4                     __ptext126:
 27244                           	opt stack 0
 27245  0093B4                     _INTERRUPT_GetDioStatus:
 27246                           	opt stack 22
 27247                           
 27248                           ;interrupt_manager_lora_addons.c: 50: uint8_t a;
 27249                           ;interrupt_manager_lora_addons.c: 51: (INTCONbits.GIE = 0);
 27250                           
 27251                           ;incstack = 0
 27252  0093B4  9EF2               	bcf	intcon,7,c	;volatile
 27253                           
 27254                           ;interrupt_manager_lora_addons.c: 52: a = dioStatus;
 27255  0093B6  C156  F060         	movff	_dioStatus,INTERRUPT_GetDioStatus@a	;volatile
 27256                           
 27257                           ;interrupt_manager_lora_addons.c: 53: dioStatus = 0;
 27258  0093BA  0E00               	movlw	0
 27259  0093BC  0101               	movlb	1	; () banked
 27260  0093BE  6F56               	movwf	_dioStatus& (0+255),b	;volatile
 27261                           
 27262                           ; BSR set to: 1
 27263                           ;interrupt_manager_lora_addons.c: 54: (INTCONbits.GIE = 1);
 27264  0093C0  8EF2               	bsf	intcon,7,c	;volatile
 27265                           
 27266                           ;interrupt_manager_lora_addons.c: 55: return a;
 27267  0093C2  0100               	movlb	0	; () banked
 27268  0093C4  5160               	movf	INTERRUPT_GetDioStatus@a& (0+255),w,b
 27269  0093C6  0012               	return	
 27270  0093C8                     __end_of_INTERRUPT_GetDioStatus:
 27271                           	opt stack 0
 27272                           tosu	equ	0xFFF
 27273                           tosh	equ	0xFFE
 27274                           tosl	equ	0xFFD
 27275                           pclath	equ	0xFFA
 27276                           tblptru	equ	0xFF8
 27277                           tblptrh	equ	0xFF7
 27278                           tblptrl	equ	0xFF6
 27279                           tablat	equ	0xFF5
 27280                           prodh	equ	0xFF4
 27281                           prodl	equ	0xFF3
 27282                           intcon	equ	0xFF2
 27283                           intcon2	equ	0xFF1
 27284                           intcon3	equ	0xFF0
 27285                           indf0	equ	0xFEF
 27286                           postinc0	equ	0xFEE
 27287                           fsr0h	equ	0xFEA
 27288                           fsr0l	equ	0xFE9
 27289                           wreg	equ	0xFE8
 27290                           postinc1	equ	0xFE6
 27291                           postdec1	equ	0xFE5
 27292                           plusw1	equ	0xFE3
 27293                           fsr1h	equ	0xFE2
 27294                           fsr1l	equ	0xFE1
 27295                           indf2	equ	0xFDF
 27296                           postinc2	equ	0xFDE
 27297                           postdec2	equ	0xFDD
 27298                           plusw2	equ	0xFDB
 27299                           fsr2h	equ	0xFDA
 27300                           fsr2l	equ	0xFD9
 27301                           status	equ	0xFD8
 27302                           
 27303 ;; *************** function _LORAWAN_Join *****************
 27304 ;; Defined at:
 27305 ;;		line 115 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 27306 ;; Parameters:    Size  Location     Type
 27307 ;;  activationTy    1    wreg     enum E7213
 27308 ;; Auto vars:     Size  Location     Type
 27309 ;;  activationTy    1  125[BANK0 ] enum E7213
 27310 ;;  result          1  124[BANK0 ] enum E7190
 27311 ;;  bufferIndex     1  123[BANK0 ] unsigned char 
 27312 ;; Return value:  Size  Location     Type
 27313 ;;                  1    wreg      enum E7190
 27314 ;; Registers used:
 27315 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 27316 ;; Tracked objects:
 27317 ;;		On entry : 0/0
 27318 ;;		On exit  : 0/0
 27319 ;;		Unchanged: 0/0
 27320 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27321 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27322 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27323 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27324 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27325 ;;Total ram usage:        3 bytes
 27326 ;; Hardware stack levels used:    1
 27327 ;; Hardware stack levels required when called:   14
 27328 ;; This function calls:
 27329 ;;		_PrepareJoinRequestFrame
 27330 ;;		_RADIO_Transmit
 27331 ;;		_SelectChannelForTransmission
 27332 ;;		_SwTimerSetTimeout
 27333 ;;		_SwTimerStart
 27334 ;;		_UpdateJoinInProgress
 27335 ;; This function is called by:
 27336 ;;		_main
 27337 ;; This function uses a non-reentrant model
 27338 ;;
 27339                           
 27340                           	psect	text127
 27341  0073D0                     __ptext127:
 27342                           	opt stack 0
 27343  0073D0                     _LORAWAN_Join:
 27344                           	opt stack 16
 27345                           
 27346                           ; BSR set to: 0
 27347                           ;incstack = 0
 27348                           ;LORAWAN_Join@activationTypeNew stored from wreg
 27349  0073D0  0100               	movlb	0	; () banked
 27350  0073D2  6FDD               	movwf	LORAWAN_Join@activationTypeNew& (0+255),b
 27351                           
 27352                           ;lorawan.c: 117: uint8_t bufferIndex;
 27353                           ;lorawan.c: 118: LorawanError_t result;
 27354                           ;lorawan.c: 120: if (loRa.macStatus.macPause == 1)
 27355  0073D4  0102               	movlb	2	; () banked
 27356  0073D6  B109               	btfsc	(_loRa+3)& (0+255),0,b
 27357  0073D8  0012               	return	
 27358                           
 27359                           ; BSR set to: 2
 27360                           ;lorawan.c: 123: }
 27361                           ;lorawan.c: 125: if (loRa.macStatus.silentImmediately == 1)
 27362                           
 27363                           ; BSR set to: 2
 27364                           ;lorawan.c: 121: {
 27365                           ;lorawan.c: 122: return MAC_PAUSED;
 27366                           ;	Return value of _LORAWAN_Join is never used
 27367  0073DA  BF08               	btfsc	(_loRa+2)& (0+255),7,b
 27368  0073DC  0012               	return	
 27369                           
 27370                           ; BSR set to: 2
 27371                           ;lorawan.c: 128: }
 27372                           ;lorawan.c: 130: if (loRa.macStatus.macState != IDLE)
 27373                           
 27374                           ; BSR set to: 2
 27375                           
 27376                           ; BSR set to: 2
 27377                           ;lorawan.c: 126: {
 27378                           ;lorawan.c: 127: return SILENT_IMMEDIATELY_ACTIVE;
 27379                           ;	Return value of _LORAWAN_Join is never used
 27380  0073DE  5108               	movf	(_loRa+2)& (0+255),w,b
 27381  0073E0  0B0F               	andlw	15
 27382  0073E2  0900               	iorlw	0
 27383  0073E4  A4D8               	btfss	status,2,c
 27384  0073E6  0012               	return	
 27385                           
 27386                           ; BSR set to: 2
 27387                           ;lorawan.c: 133: }
 27388                           ;lorawan.c: 135: loRa.activationParameters.activationType = activationTypeNew;
 27389                           
 27390                           ; BSR set to: 2
 27391                           ;lorawan.c: 131: {
 27392                           ;lorawan.c: 132: return MAC_STATE_NOT_READY_FOR_TRANSMISSION;
 27393                           ;	Return value of _LORAWAN_Join is never used
 27394  0073E8  C0DD  F223         	movff	LORAWAN_Join@activationTypeNew,_loRa+29
 27395                           
 27396                           ; BSR set to: 2
 27397                           ;lorawan.c: 137: if (OTAA == activationTypeNew)
 27398  0073EC  0100               	movlb	0	; () banked
 27399  0073EE  51DD               	movf	LORAWAN_Join@activationTypeNew& (0+255),w,b
 27400  0073F0  A4D8               	btfss	status,2,c
 27401  0073F2  D024               	goto	l749
 27402                           
 27403                           ; BSR set to: 0
 27404                           ;lorawan.c: 138: {
 27405                           ;lorawan.c: 140: if ( (loRa.macKeys.deviceEui == 0) || (loRa.macKeys.applicationEui == 0
      +                          ) || (loRa.macKeys.applicationKey == 0) )
 27406  0073F4  0102               	movlb	2	; () banked
 27407  0073F6  A1AB               	btfss	(_loRa+165)& (0+255),0,b
 27408  0073F8  0012               	return	
 27409                           
 27410                           ; BSR set to: 2
 27411  0073FA  A3AB               	btfss	(_loRa+165)& (0+255),1,b
 27412  0073FC  0012               	return	
 27413                           
 27414                           ; BSR set to: 2
 27415  0073FE  A7AB               	btfss	(_loRa+165)& (0+255),3,b
 27416  007400  0012               	return	
 27417                           
 27418                           ; BSR set to: 2
 27419                           ;lorawan.c: 144: else
 27420                           ;lorawan.c: 145: {
 27421                           ;lorawan.c: 146: bufferIndex = PrepareJoinRequestFrame ();
 27422                           
 27423                           ; BSR set to: 2
 27424                           
 27425                           ; BSR set to: 2
 27426                           ;lorawan.c: 143: }
 27427                           
 27428                           ; BSR set to: 2
 27429                           ;lorawan.c: 141: {
 27430                           ;lorawan.c: 142: return KEYS_NOT_INITIALIZED;
 27431                           ;	Return value of _LORAWAN_Join is never used
 27432  007402  ECE8  F026         	call	_PrepareJoinRequestFrame	;wreg free
 27433  007406  0100               	movlb	0	; () banked
 27434  007408  6FDB               	movwf	LORAWAN_Join@bufferIndex& (0+255),b
 27435                           
 27436                           ;lorawan.c: 147: result = SelectChannelForTransmission (0);
 27437  00740A  0E00               	movlw	0
 27438  00740C  EC2F  F03F         	call	_SelectChannelForTransmission
 27439  007410  0100               	movlb	0	; () banked
 27440  007412  6FDC               	movwf	LORAWAN_Join@result& (0+255),b
 27441                           
 27442                           ; BSR set to: 0
 27443                           ;lorawan.c: 149: if (result == OK)
 27444  007414  51DC               	movf	LORAWAN_Join@result& (0+255),w,b
 27445  007416  A4D8               	btfss	status,2,c
 27446  007418  0012               	return	
 27447                           
 27448                           ; BSR set to: 0
 27449                           ;lorawan.c: 150: {
 27450                           ;lorawan.c: 151: if (RADIO_Transmit(macBuffer, bufferIndex) == OK)
 27451  00741A  0E8F               	movlw	low _macBuffer
 27452  00741C  6FB1               	movwf	RADIO_Transmit@buffer& (0+255),b
 27453  00741E  0E06               	movlw	high _macBuffer
 27454  007420  6FB2               	movwf	(RADIO_Transmit@buffer+1)& (0+255),b
 27455  007422  C0DB  F0B3         	movff	LORAWAN_Join@bufferIndex,RADIO_Transmit@bufferLen
 27456  007426  EC11  F020         	call	_RADIO_Transmit	;wreg free
 27457  00742A  0100               	movlb	0	; () banked
 27458  00742C  51B1               	movf	?_RADIO_Transmit& (0+255),w,b
 27459  00742E  11B2               	iorwf	(?_RADIO_Transmit+1)& (0+255),w,b
 27460  007430  A4D8               	btfss	status,2,c
 27461  007432  0012               	return	
 27462                           
 27463                           ; BSR set to: 0
 27464                           ;lorawan.c: 152: {
 27465                           ;lorawan.c: 153: UpdateJoinInProgress(TRANSMISSION_OCCURRING);
 27466  007434  0E01               	movlw	1
 27467  007436  EC87  F049         	call	_UpdateJoinInProgress
 27468                           
 27469                           ;lorawan.c: 164: }
 27470                           ;lorawan.c: 165: }
 27471                           ;lorawan.c: 166: }
 27472                           
 27473                           ;lorawan.c: 161: else
 27474                           ;lorawan.c: 162: {
 27475                           ;lorawan.c: 163: return result;
 27476                           ;	Return value of _LORAWAN_Join is never used
 27477                           
 27478                           ;lorawan.c: 159: }
 27479                           ;lorawan.c: 160: }
 27480                           
 27481                           ;lorawan.c: 156: else
 27482                           ;lorawan.c: 157: {
 27483                           ;lorawan.c: 158: return MAC_STATE_NOT_READY_FOR_TRANSMISSION;
 27484                           ;	Return value of _LORAWAN_Join is never used
 27485                           
 27486                           ;lorawan.c: 155: }
 27487                           
 27488                           ;lorawan.c: 154: return OK;
 27489                           ;	Return value of _LORAWAN_Join is never used
 27490  00743A  0012               	return	
 27491  00743C                     l749:
 27492                           
 27493                           ; BSR set to: 0
 27494                           ;lorawan.c: 167: else
 27495                           ;lorawan.c: 168: {
 27496                           ;lorawan.c: 170: if ( (loRa.macKeys.applicationSessionKey == 0) || (loRa.macKeys.network
      +                          SessionKey == 0) || (loRa.macKeys.deviceAddress == 0) )
 27497  00743C  0102               	movlb	2	; () banked
 27498  00743E  ABAB               	btfss	(_loRa+165)& (0+255),5,b
 27499  007440  0012               	return	
 27500                           
 27501                           ; BSR set to: 2
 27502  007442  A9AB               	btfss	(_loRa+165)& (0+255),4,b
 27503  007444  0012               	return	
 27504                           
 27505                           ; BSR set to: 2
 27506  007446  A5AB               	btfss	(_loRa+165)& (0+255),2,b
 27507  007448  0012               	return	
 27508                           
 27509                           ; BSR set to: 2
 27510                           ;lorawan.c: 174: else
 27511                           ;lorawan.c: 175: {
 27512                           ;lorawan.c: 176: UpdateJoinInProgress(ABP_DELAY);
 27513                           
 27514                           ; BSR set to: 2
 27515                           
 27516                           ; BSR set to: 2
 27517                           ;lorawan.c: 173: }
 27518                           
 27519                           ; BSR set to: 2
 27520                           ;lorawan.c: 171: {
 27521                           ;lorawan.c: 172: return KEYS_NOT_INITIALIZED;
 27522                           ;	Return value of _LORAWAN_Join is never used
 27523  00744A  0E07               	movlw	7
 27524  00744C  EC87  F049         	call	_UpdateJoinInProgress
 27525                           
 27526                           ;lorawan.c: 177: SwTimerSetTimeout(loRa.abpJoinTimerId, ( (((uint32_t)(20)) << (12)) / 1
      +                          25UL ));
 27527  007450  0E8F               	movlw	143
 27528  007452  0100               	movlb	0	; () banked
 27529  007454  6F6D               	movwf	SwTimerSetTimeout@timeout& (0+255),b
 27530  007456  0E02               	movlw	2
 27531  007458  6F6E               	movwf	(SwTimerSetTimeout@timeout+1)& (0+255),b
 27532  00745A  0E00               	movlw	0
 27533  00745C  6F6F               	movwf	(SwTimerSetTimeout@timeout+2)& (0+255),b
 27534  00745E  0E00               	movlw	0
 27535  007460  6F70               	movwf	(SwTimerSetTimeout@timeout+3)& (0+255),b
 27536  007462  0102               	movlb	2	; () banked
 27537  007464  51F9               	movf	(_loRa+243)& (0+255),w,b
 27538  007466  EC27  F045         	call	_SwTimerSetTimeout
 27539                           
 27540                           ;lorawan.c: 178: SwTimerStart(loRa.abpJoinTimerId);
 27541  00746A  0102               	movlb	2	; () banked
 27542  00746C  51F9               	movf	(_loRa+243)& (0+255),w,b
 27543  00746E  ECDA  F03A         	call	_SwTimerStart
 27544                           
 27545                           ;lorawan.c: 180: return OK;
 27546                           ;	Return value of _LORAWAN_Join is never used
 27547  007472  0012               	return	
 27548  007474                     __end_of_LORAWAN_Join:
 27549                           	opt stack 0
 27550                           tosu	equ	0xFFF
 27551                           tosh	equ	0xFFE
 27552                           tosl	equ	0xFFD
 27553                           pclath	equ	0xFFA
 27554                           tblptru	equ	0xFF8
 27555                           tblptrh	equ	0xFF7
 27556                           tblptrl	equ	0xFF6
 27557                           tablat	equ	0xFF5
 27558                           prodh	equ	0xFF4
 27559                           prodl	equ	0xFF3
 27560                           intcon	equ	0xFF2
 27561                           intcon2	equ	0xFF1
 27562                           intcon3	equ	0xFF0
 27563                           indf0	equ	0xFEF
 27564                           postinc0	equ	0xFEE
 27565                           fsr0h	equ	0xFEA
 27566                           fsr0l	equ	0xFE9
 27567                           wreg	equ	0xFE8
 27568                           postinc1	equ	0xFE6
 27569                           postdec1	equ	0xFE5
 27570                           plusw1	equ	0xFE3
 27571                           fsr1h	equ	0xFE2
 27572                           fsr1l	equ	0xFE1
 27573                           indf2	equ	0xFDF
 27574                           postinc2	equ	0xFDE
 27575                           postdec2	equ	0xFDD
 27576                           plusw2	equ	0xFDB
 27577                           fsr2h	equ	0xFDA
 27578                           fsr2l	equ	0xFD9
 27579                           status	equ	0xFD8
 27580                           
 27581 ;; *************** function _UpdateJoinInProgress *****************
 27582 ;; Defined at:
 27583 ;;		line 2037 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 27584 ;; Parameters:    Size  Location     Type
 27585 ;;  state           1    wreg     unsigned char 
 27586 ;; Auto vars:     Size  Location     Type
 27587 ;;  state           1    0[BANK0 ] unsigned char 
 27588 ;; Return value:  Size  Location     Type
 27589 ;;                  1    wreg      void 
 27590 ;; Registers used:
 27591 ;;		wreg, status,2, status,0
 27592 ;; Tracked objects:
 27593 ;;		On entry : 0/0
 27594 ;;		On exit  : 0/0
 27595 ;;		Unchanged: 0/0
 27596 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27597 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27598 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27599 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27600 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27601 ;;Total ram usage:        1 bytes
 27602 ;; Hardware stack levels used:    1
 27603 ;; Hardware stack levels required when called:    7
 27604 ;; This function calls:
 27605 ;;		Nothing
 27606 ;; This function is called by:
 27607 ;;		_LORAWAN_Join
 27608 ;; This function uses a non-reentrant model
 27609 ;;
 27610                           
 27611                           	psect	text128
 27612  00930E                     __ptext128:
 27613                           	opt stack 0
 27614  00930E                     _UpdateJoinInProgress:
 27615                           	opt stack 22
 27616                           
 27617                           ;incstack = 0
 27618                           ;UpdateJoinInProgress@state stored from wreg
 27619  00930E  0100               	movlb	0	; () banked
 27620  009310  6F60               	movwf	UpdateJoinInProgress@state& (0+255),b
 27621                           
 27622                           ;lorawan.c: 2040: loRa.macStatus.networkJoined = 0;
 27623  009312  0102               	movlb	2	; () banked
 27624  009314  9908               	bcf	(_loRa+2)& (0+255),4,b
 27625                           
 27626                           ;lorawan.c: 2041: loRa.lorawanMacStatus.joining = 1;
 27627  009316  8506               	bsf	_loRa& (0+255),2,b
 27628                           
 27629                           ; BSR set to: 2
 27630                           ;lorawan.c: 2042: loRa.macStatus.macState = state;
 27631  009318  5108               	movf	(_loRa+2)& (0+255),w,b
 27632  00931A  0100               	movlb	0	; () banked
 27633  00931C  1960               	xorwf	UpdateJoinInProgress@state& (0+255),w,b
 27634  00931E  0BF0               	andlw	-16
 27635  009320  1960               	xorwf	UpdateJoinInProgress@state& (0+255),w,b
 27636  009322  0102               	movlb	2	; () banked
 27637  009324  6F08               	movwf	(_loRa+2)& (0+255),b
 27638                           
 27639                           ; BSR set to: 2
 27640  009326  0012               	return		;funcret
 27641  009328                     __end_of_UpdateJoinInProgress:
 27642                           	opt stack 0
 27643                           tosu	equ	0xFFF
 27644                           tosh	equ	0xFFE
 27645                           tosl	equ	0xFFD
 27646                           pclath	equ	0xFFA
 27647                           tblptru	equ	0xFF8
 27648                           tblptrh	equ	0xFF7
 27649                           tblptrl	equ	0xFF6
 27650                           tablat	equ	0xFF5
 27651                           prodh	equ	0xFF4
 27652                           prodl	equ	0xFF3
 27653                           intcon	equ	0xFF2
 27654                           intcon2	equ	0xFF1
 27655                           intcon3	equ	0xFF0
 27656                           indf0	equ	0xFEF
 27657                           postinc0	equ	0xFEE
 27658                           fsr0h	equ	0xFEA
 27659                           fsr0l	equ	0xFE9
 27660                           wreg	equ	0xFE8
 27661                           postinc1	equ	0xFE6
 27662                           postdec1	equ	0xFE5
 27663                           plusw1	equ	0xFE3
 27664                           fsr1h	equ	0xFE2
 27665                           fsr1l	equ	0xFE1
 27666                           indf2	equ	0xFDF
 27667                           postinc2	equ	0xFDE
 27668                           postdec2	equ	0xFDD
 27669                           plusw2	equ	0xFDB
 27670                           fsr2h	equ	0xFDA
 27671                           fsr2l	equ	0xFD9
 27672                           status	equ	0xFD8
 27673                           
 27674 ;; *************** function _SelectChannelForTransmission *****************
 27675 ;; Defined at:
 27676 ;;		line 919 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 27677 ;; Parameters:    Size  Location     Type
 27678 ;;  transmission    1    wreg     unsigned char 
 27679 ;; Auto vars:     Size  Location     Type
 27680 ;;  transmission    1   91[BANK0 ] unsigned char 
 27681 ;;  channelIndex    1   93[BANK0 ] unsigned char 
 27682 ;;  result          1   92[BANK0 ] enum E7249
 27683 ;; Return value:  Size  Location     Type
 27684 ;;                  1    wreg      enum E7190
 27685 ;; Registers used:
 27686 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 27687 ;; Tracked objects:
 27688 ;;		On entry : 0/0
 27689 ;;		On exit  : 0/0
 27690 ;;		Unchanged: 0/0
 27691 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27692 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27693 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27694 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27695 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27696 ;;Total ram usage:        3 bytes
 27697 ;; Hardware stack levels used:    1
 27698 ;; Hardware stack levels required when called:   11
 27699 ;; This function calls:
 27700 ;;		_ConfigureRadioTx
 27701 ;;		_SearchAvailableChannel
 27702 ;; This function is called by:
 27703 ;;		_LORAWAN_Join
 27704 ;;		_LORAWAN_Send
 27705 ;;		_AckRetransmissionCallback
 27706 ;;		_UnconfirmedTransmissionCallback
 27707 ;;		_LORAWAN_RxTimeout
 27708 ;; This function uses a non-reentrant model
 27709 ;;
 27710                           
 27711                           	psect	text129
 27712  007E5E                     __ptext129:
 27713                           	opt stack 0
 27714  007E5E                     _SelectChannelForTransmission:
 27715                           	opt stack 18
 27716                           
 27717                           ; BSR set to: 2
 27718                           ;incstack = 0
 27719                           ;SelectChannelForTransmission@transmissionType stored from wreg
 27720  007E5E  0100               	movlb	0	; () banked
 27721  007E60  6FBB               	movwf	SelectChannelForTransmission@transmissionType& (0+255),b
 27722                           
 27723                           ;lorawan_eu.c: 921: LorawanError_t result = OK;
 27724  007E62  0E00               	movlw	0
 27725  007E64  0100               	movlb	0	; () banked
 27726  007E66  6FBC               	movwf	SelectChannelForTransmission@result& (0+255),b
 27727                           
 27728                           ; BSR set to: 0
 27729                           ;lorawan_eu.c: 922: uint8_t channelIndex;
 27730                           ;lorawan_eu.c: 924: result = SearchAvailableChannel (16, transmissionType, &channelIndex
      +                          );
 27731  007E68  C0BB  F0AF         	movff	SelectChannelForTransmission@transmissionType,SearchAvailableChannel@transmission
      +                          Type
 27732  007E6C  0EBD               	movlw	low SelectChannelForTransmission@channelIndex
 27733  007E6E  6FB0               	movwf	SearchAvailableChannel@channelIndex& (0+255),b
 27734  007E70  0E00               	movlw	high SelectChannelForTransmission@channelIndex
 27735  007E72  6FB1               	movwf	(SearchAvailableChannel@channelIndex+1)& (0+255),b
 27736  007E74  0E10               	movlw	16
 27737  007E76  EC3A  F02F         	call	_SearchAvailableChannel
 27738  007E7A  0100               	movlb	0	; () banked
 27739  007E7C  6FBC               	movwf	SelectChannelForTransmission@result& (0+255),b
 27740                           
 27741                           ; BSR set to: 0
 27742                           ;lorawan_eu.c: 926: if (result == OK)
 27743  007E7E  51BC               	movf	SelectChannelForTransmission@result& (0+255),w,b
 27744  007E80  A4D8               	btfss	status,2,c
 27745  007E82  D020               	goto	l2025
 27746                           
 27747                           ; BSR set to: 0
 27748                           ;lorawan_eu.c: 927: {
 27749                           ;lorawan_eu.c: 928: loRa.lastUsedChannelIndex = channelIndex;
 27750  007E84  C0BD  F2E0         	movff	SelectChannelForTransmission@channelIndex,_loRa+218
 27751                           
 27752                           ; BSR set to: 0
 27753                           ;lorawan_eu.c: 929: loRa.receiveWindow1Parameters.frequency = Channels[channelIndex].fre
      +                          quency;
 27754  007E88  51BD               	movf	SelectChannelForTransmission@channelIndex& (0+255),w,b
 27755  007E8A  0D0E               	mullw	14
 27756  007E8C  0E00               	movlw	low _Channels
 27757  007E8E  24F3               	addwf	prodl,w,c
 27758  007E90  6ED9               	movwf	fsr2l,c
 27759  007E92  0E04               	movlw	high _Channels
 27760  007E94  20F4               	addwfc	prodh,w,c
 27761  007E96  6EDA               	movwf	fsr2h,c
 27762  007E98  CFDE F219          	movff	postinc2,_loRa+19
 27763  007E9C  CFDE F21A          	movff	postinc2,_loRa+20
 27764  007EA0  CFDE F21B          	movff	postinc2,_loRa+21
 27765  007EA4  CFDE F21C          	movff	postinc2,_loRa+22
 27766                           
 27767                           ; BSR set to: 0
 27768                           ;lorawan_eu.c: 930: loRa.receiveWindow1Parameters.dataRate = loRa.currentDataRate;
 27769  007EA8  C2E5  F21D         	movff	_loRa+223,_loRa+23
 27770                           
 27771                           ; BSR set to: 0
 27772                           ;lorawan_eu.c: 932: ConfigureRadioTx(loRa.receiveWindow1Parameters.dataRate, loRa.receiv
      +                          eWindow1Parameters.frequency);
 27773  007EAC  C219  F073         	movff	_loRa+19,ConfigureRadioTx@freq
 27774  007EB0  C21A  F074         	movff	_loRa+20,ConfigureRadioTx@freq+1
 27775  007EB4  C21B  F075         	movff	_loRa+21,ConfigureRadioTx@freq+2
 27776  007EB8  C21C  F076         	movff	_loRa+22,ConfigureRadioTx@freq+3
 27777  007EBC  0102               	movlb	2	; () banked
 27778  007EBE  511D               	movf	(_loRa+23)& (0+255),w,b
 27779  007EC0  EC4A  F043         	call	_ConfigureRadioTx
 27780  007EC4                     l2025:
 27781                           
 27782                           ;lorawan_eu.c: 933: }
 27783                           ;lorawan_eu.c: 934: return result;
 27784  007EC4  0100               	movlb	0	; () banked
 27785  007EC6  51BC               	movf	SelectChannelForTransmission@result& (0+255),w,b
 27786  007EC8  0012               	return	
 27787  007ECA                     __end_of_SelectChannelForTransmission:
 27788                           	opt stack 0
 27789                           tosu	equ	0xFFF
 27790                           tosh	equ	0xFFE
 27791                           tosl	equ	0xFFD
 27792                           pclath	equ	0xFFA
 27793                           tblptru	equ	0xFF8
 27794                           tblptrh	equ	0xFF7
 27795                           tblptrl	equ	0xFF6
 27796                           tablat	equ	0xFF5
 27797                           prodh	equ	0xFF4
 27798                           prodl	equ	0xFF3
 27799                           intcon	equ	0xFF2
 27800                           intcon2	equ	0xFF1
 27801                           intcon3	equ	0xFF0
 27802                           indf0	equ	0xFEF
 27803                           postinc0	equ	0xFEE
 27804                           fsr0h	equ	0xFEA
 27805                           fsr0l	equ	0xFE9
 27806                           wreg	equ	0xFE8
 27807                           postinc1	equ	0xFE6
 27808                           postdec1	equ	0xFE5
 27809                           plusw1	equ	0xFE3
 27810                           fsr1h	equ	0xFE2
 27811                           fsr1l	equ	0xFE1
 27812                           indf2	equ	0xFDF
 27813                           postinc2	equ	0xFDE
 27814                           postdec2	equ	0xFDD
 27815                           plusw2	equ	0xFDB
 27816                           fsr2h	equ	0xFDA
 27817                           fsr2l	equ	0xFD9
 27818                           status	equ	0xFD8
 27819                           
 27820 ;; *************** function _SearchAvailableChannel *****************
 27821 ;; Defined at:
 27822 ;;		line 778 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 27823 ;; Parameters:    Size  Location     Type
 27824 ;;  maxChannels     1    wreg     unsigned char 
 27825 ;;  transmission    1   79[BANK0 ] unsigned char 
 27826 ;;  channelIndex    2   80[BANK0 ] PTR unsigned char 
 27827 ;;		 -> SelectChannelForTransmission@channelIndex(1), LORAWAN_RxDone@channelIndex(1), 
 27828 ;; Auto vars:     Size  Location     Type
 27829 ;;  maxChannels     1   88[BANK0 ] unsigned char 
 27830 ;;  i               1   90[BANK0 ] unsigned char 
 27831 ;;  randomNumber    1   89[BANK0 ] unsigned char 
 27832 ;;  result          1   87[BANK0 ] enum E7249
 27833 ;;  randomNumber    1   86[BANK0 ] unsigned char 
 27834 ;; Return value:  Size  Location     Type
 27835 ;;                  1    wreg      enum E7190
 27836 ;; Registers used:
 27837 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 27838 ;; Tracked objects:
 27839 ;;		On entry : 0/0
 27840 ;;		On exit  : 0/0
 27841 ;;		Unchanged: 0/0
 27842 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27843 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27844 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27845 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27846 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27847 ;;Total ram usage:       12 bytes
 27848 ;; Hardware stack levels used:    1
 27849 ;; Hardware stack levels required when called:   10
 27850 ;; This function calls:
 27851 ;;		_Random
 27852 ;; This function is called by:
 27853 ;;		_LORAWAN_RxDone
 27854 ;;		_SelectChannelForTransmission
 27855 ;; This function uses a non-reentrant model
 27856 ;;
 27857                           
 27858                           	psect	text130
 27859  005E74                     __ptext130:
 27860                           	opt stack 0
 27861  005E74                     _SearchAvailableChannel:
 27862                           	opt stack 18
 27863                           
 27864                           ; BSR set to: 0
 27865                           ;incstack = 0
 27866                           ;SearchAvailableChannel@maxChannels stored from wreg
 27867  005E74  0100               	movlb	0	; () banked
 27868  005E76  6FB8               	movwf	SearchAvailableChannel@maxChannels& (0+255),b
 27869                           
 27870                           ;lorawan_eu.c: 780: uint8_t randomNumberCopy, randomNumber, i;
 27871                           ;lorawan_eu.c: 781: LorawanError_t result = OK;
 27872  005E78  0E00               	movlw	0
 27873  005E7A  0100               	movlb	0	; () banked
 27874  005E7C  6FB7               	movwf	SearchAvailableChannel@result& (0+255),b
 27875                           
 27876                           ; BSR set to: 0
 27877                           ;lorawan_eu.c: 783: randomNumber = Random (maxChannels) + 1;
 27878  005E7E  C0B8  F0AD         	movff	SearchAvailableChannel@maxChannels,Random@max
 27879  005E82  6BAE               	clrf	(Random@max+1)& (0+255),b
 27880  005E84  EC9C  F048         	call	_Random	;wreg free
 27881  005E88  0100               	movlb	0	; () banked
 27882  005E8A  29AD               	incf	?_Random& (0+255),w,b
 27883  005E8C  6FB9               	movwf	SearchAvailableChannel@randomNumber& (0+255),b
 27884                           
 27885                           ; BSR set to: 0
 27886                           ;lorawan_eu.c: 784: randomNumberCopy = randomNumber;
 27887  005E8E  C0B9  F0B6         	movff	SearchAvailableChannel@randomNumber,SearchAvailableChannel@randomNumberCopy
 27888                           
 27889                           ;lorawan_eu.c: 786: while (randomNumber)
 27890  005E92  D074               	goto	l1989
 27891  005E94                     
 27892                           ; BSR set to: 0
 27893                           ;lorawan_eu.c: 787: {
 27894                           ;lorawan_eu.c: 788: for (i=0; (i < maxChannels) && (randomNumber != 0) ; i++)
 27895                           
 27896                           ; BSR set to: 0
 27897  005E94  0E00               	movlw	0
 27898  005E96  6FBA               	movwf	SearchAvailableChannel@i& (0+255),b
 27899  005E98  D063               	goto	l1980
 27900  005E9A                     
 27901                           ; BSR set to: 0
 27902                           ;lorawan_eu.c: 789: {
 27903                           ;lorawan_eu.c: 790: if ( ( Channels[i].status == 1 ) && ( Channels[i].channelTimer == 0 
      +                          ) && ( loRa.currentDataRate >= Channels[i].dataRange.min ) && ( loRa.currentDataRate <= 
      +                          Channels[i].dataRange.max ) )
 27904                           
 27905                           ; BSR set to: 0
 27906  005E9A  51BA               	movf	SearchAvailableChannel@i& (0+255),w,b
 27907  005E9C  0D0E               	mullw	14
 27908  005E9E  0E04               	movlw	4
 27909  005EA0  26F3               	addwf	prodl,f,c
 27910  005EA2  0E00               	movlw	0
 27911  005EA4  22F4               	addwfc	prodh,f,c
 27912  005EA6  0E00               	movlw	low _Channels
 27913  005EA8  24F3               	addwf	prodl,w,c
 27914  005EAA  6ED9               	movwf	fsr2l,c
 27915  005EAC  0E04               	movlw	high _Channels
 27916  005EAE  20F4               	addwfc	prodh,w,c
 27917  005EB0  6EDA               	movwf	fsr2h,c
 27918  005EB2  04DE               	decf	postinc2,w,c
 27919  005EB4  A4D8               	btfss	status,2,c
 27920  005EB6  D052               	goto	l1985
 27921                           
 27922                           ; BSR set to: 0
 27923  005EB8  51BA               	movf	SearchAvailableChannel@i& (0+255),w,b
 27924  005EBA  0D0E               	mullw	14
 27925  005EBC  0E08               	movlw	8
 27926  005EBE  26F3               	addwf	prodl,f,c
 27927  005EC0  0E00               	movlw	0
 27928  005EC2  22F4               	addwfc	prodh,f,c
 27929  005EC4  0E00               	movlw	low _Channels
 27930  005EC6  24F3               	addwf	prodl,w,c
 27931  005EC8  6ED9               	movwf	fsr2l,c
 27932  005ECA  0E04               	movlw	high _Channels
 27933  005ECC  20F4               	addwfc	prodh,w,c
 27934  005ECE  6EDA               	movwf	fsr2h,c
 27935  005ED0  50DE               	movf	postinc2,w,c
 27936  005ED2  10DE               	iorwf	postinc2,w,c
 27937  005ED4  10DE               	iorwf	postinc2,w,c
 27938  005ED6  10DE               	iorwf	postinc2,w,c
 27939  005ED8  A4D8               	btfss	status,2,c
 27940  005EDA  D040               	goto	l1985
 27941                           
 27942                           ; BSR set to: 0
 27943  005EDC  51BA               	movf	SearchAvailableChannel@i& (0+255),w,b
 27944  005EDE  0D0E               	mullw	14
 27945  005EE0  0E05               	movlw	5
 27946  005EE2  26F3               	addwf	prodl,f,c
 27947  005EE4  0E00               	movlw	0
 27948  005EE6  22F4               	addwfc	prodh,f,c
 27949  005EE8  0E00               	movlw	low _Channels
 27950  005EEA  24F3               	addwf	prodl,w,c
 27951  005EEC  6ED9               	movwf	fsr2l,c
 27952  005EEE  0E04               	movlw	high _Channels
 27953  005EF0  20F4               	addwfc	prodh,w,c
 27954  005EF2  6EDA               	movwf	fsr2h,c
 27955  005EF4  0104               	movlb	4	; () banked
 27956  005EF6  50DF               	movf	223,w,c
 27957  005EF8  0B0F               	andlw	15
 27958  005EFA  0100               	movlb	0	; () banked
 27959  005EFC  6FB2               	movwf	??_SearchAvailableChannel& (0+255),b
 27960  005EFE  51B2               	movf	??_SearchAvailableChannel& (0+255),w,b
 27961  005F00  0102               	movlb	2	; () banked
 27962  005F02  5DE5               	subwf	(_loRa+223)& (0+255),w,b
 27963  005F04  A0D8               	btfss	status,0,c
 27964  005F06  D02A               	goto	l1985
 27965                           
 27966                           ; BSR set to: 2
 27967  005F08  0100               	movlb	0	; () banked
 27968  005F0A  51BA               	movf	SearchAvailableChannel@i& (0+255),w,b
 27969  005F0C  0D0E               	mullw	14
 27970  005F0E  0E05               	movlw	5
 27971  005F10  26F3               	addwf	prodl,f,c
 27972  005F12  0E00               	movlw	0
 27973  005F14  22F4               	addwfc	prodh,f,c
 27974  005F16  0E00               	movlw	low _Channels
 27975  005F18  24F3               	addwf	prodl,w,c
 27976  005F1A  6ED9               	movwf	fsr2l,c
 27977  005F1C  0E04               	movlw	high _Channels
 27978  005F1E  20F4               	addwfc	prodh,w,c
 27979  005F20  6EDA               	movwf	fsr2h,c
 27980  005F22  0104               	movlb	4	; () banked
 27981  005F24  38DF               	swapf	223,w,c
 27982  005F26  0B0F               	andlw	15
 27983  005F28  0100               	movlb	0	; () banked
 27984  005F2A  6FB2               	movwf	??_SearchAvailableChannel& (0+255),b
 27985  005F2C  0102               	movlb	2	; () banked
 27986  005F2E  51E5               	movf	(_loRa+223)& (0+255),w,b
 27987  005F30  0100               	movlb	0	; () banked
 27988  005F32  5DB2               	subwf	??_SearchAvailableChannel& (0+255),w,b
 27989  005F34  A0D8               	btfss	status,0,c
 27990  005F36  D012               	goto	l1985
 27991                           
 27992                           ; BSR set to: 0
 27993                           ;lorawan_eu.c: 791: {
 27994                           ;lorawan_eu.c: 792: if (transmissionType == 0)
 27995  005F38  51AF               	movf	SearchAvailableChannel@transmissionType& (0+255),w,b
 27996  005F3A  A4D8               	btfss	status,2,c
 27997  005F3C  D00E               	goto	l1983
 27998                           
 27999                           ; BSR set to: 0
 28000                           ;lorawan_eu.c: 793: {
 28001                           ;lorawan_eu.c: 794: if ( Channels[i].joinRequestChannel == 1 )
 28002  005F3E  51BA               	movf	SearchAvailableChannel@i& (0+255),w,b
 28003  005F40  0D0E               	mullw	14
 28004  005F42  0E0C               	movlw	12
 28005  005F44  26F3               	addwf	prodl,f,c
 28006  005F46  0E00               	movlw	0
 28007  005F48  22F4               	addwfc	prodh,f,c
 28008  005F4A  0E00               	movlw	low _Channels
 28009  005F4C  24F3               	addwf	prodl,w,c
 28010  005F4E  6ED9               	movwf	fsr2l,c
 28011  005F50  0E04               	movlw	high _Channels
 28012  005F52  20F4               	addwfc	prodh,w,c
 28013  005F54  6EDA               	movwf	fsr2h,c
 28014  005F56  04DE               	decf	postinc2,w,c
 28015  005F58  B4D8               	btfsc	status,2,c
 28016  005F5A                     l1983:
 28017                           
 28018                           ; BSR set to: 0
 28019                           ;lorawan_eu.c: 799: else
 28020                           ;lorawan_eu.c: 800: {
 28021                           ;lorawan_eu.c: 801: randomNumber --;
 28022                           
 28023                           ; BSR set to: 0
 28024  005F5A  07B9               	decf	SearchAvailableChannel@randomNumber& (0+255),f,b
 28025  005F5C                     l1985:
 28026                           
 28027                           ; BSR set to: 0
 28028  005F5C  0100               	movlb	0	; () banked
 28029  005F5E  2BBA               	incf	SearchAvailableChannel@i& (0+255),f,b
 28030  005F60                     l1980:
 28031                           
 28032                           ; BSR set to: 0
 28033                           
 28034                           ; BSR set to: 0
 28035  005F60  51B8               	movf	SearchAvailableChannel@maxChannels& (0+255),w,b
 28036  005F62  5DBA               	subwf	SearchAvailableChannel@i& (0+255),w,b
 28037  005F64  B0D8               	btfsc	status,0,c
 28038  005F66  D003               	goto	u9490
 28039                           
 28040                           ; BSR set to: 0
 28041  005F68  51B9               	movf	SearchAvailableChannel@randomNumber& (0+255),w,b
 28042  005F6A  A4D8               	btfss	status,2,c
 28043  005F6C  D796               	goto	l1981
 28044  005F6E                     u9490:
 28045                           
 28046                           ; BSR set to: 0
 28047                           ;lorawan_eu.c: 802: }
 28048                           ;lorawan_eu.c: 803: }
 28049                           ;lorawan_eu.c: 804: }
 28050                           ;lorawan_eu.c: 806: if ( randomNumber == randomNumberCopy )
 28051                           
 28052                           ; BSR set to: 0
 28053                           
 28054                           ; BSR set to: 0
 28055  005F6E  51B6               	movf	SearchAvailableChannel@randomNumberCopy& (0+255),w,b
 28056  005F70  19B9               	xorwf	SearchAvailableChannel@randomNumber& (0+255),w,b
 28057  005F72  A4D8               	btfss	status,2,c
 28058  005F74  D003               	goto	l1989
 28059                           
 28060                           ; BSR set to: 0
 28061                           ;lorawan_eu.c: 807: {
 28062                           ;lorawan_eu.c: 808: result = NO_CHANNELS_FOUND;
 28063  005F76  0E09               	movlw	9
 28064  005F78  6FB7               	movwf	SearchAvailableChannel@result& (0+255),b
 28065                           
 28066                           ;lorawan_eu.c: 809: break;
 28067  005F7A  D003               	goto	u9510
 28068  005F7C                     l1989:
 28069                           
 28070                           ; BSR set to: 0
 28071                           
 28072                           ; BSR set to: 0
 28073                           
 28074                           ; BSR set to: 0
 28075  005F7C  51B9               	movf	SearchAvailableChannel@randomNumber& (0+255),w,b
 28076  005F7E  A4D8               	btfss	status,2,c
 28077  005F80  D789               	goto	l1979
 28078  005F82                     u9510:
 28079                           
 28080                           ; BSR set to: 0
 28081                           ;lorawan_eu.c: 810: }
 28082                           ;lorawan_eu.c: 811: }
 28083                           ;lorawan_eu.c: 813: if ( i != 0)
 28084                           
 28085                           ; BSR set to: 0
 28086  005F82  51BA               	movf	SearchAvailableChannel@i& (0+255),w,b
 28087  005F84  B4D8               	btfsc	status,2,c
 28088  005F86  D007               	goto	l1991
 28089                           
 28090                           ; BSR set to: 0
 28091                           ;lorawan_eu.c: 814: {
 28092                           ;lorawan_eu.c: 815: *channelIndex = i - 1;
 28093  005F88  05BA               	decf	SearchAvailableChannel@i& (0+255),w,b
 28094  005F8A  C0B0  FFD9         	movff	SearchAvailableChannel@channelIndex,fsr2l
 28095  005F8E  C0B1  FFDA         	movff	SearchAvailableChannel@channelIndex+1,fsr2h
 28096  005F92  6EDF               	movwf	indf2,c
 28097                           
 28098                           ;lorawan_eu.c: 816: }
 28099  005F94  D002               	goto	l1992
 28100  005F96                     l1991:
 28101                           
 28102                           ; BSR set to: 0
 28103                           ;lorawan_eu.c: 817: else
 28104                           ;lorawan_eu.c: 818: {
 28105                           ;lorawan_eu.c: 819: result = NO_CHANNELS_FOUND;
 28106                           
 28107                           ; BSR set to: 0
 28108  005F96  0E09               	movlw	9
 28109  005F98  6FB7               	movwf	SearchAvailableChannel@result& (0+255),b
 28110  005F9A                     l1992:
 28111                           
 28112                           ; BSR set to: 0
 28113                           ;lorawan_eu.c: 820: }
 28114                           ;lorawan_eu.c: 821: return result;
 28115  005F9A  51B7               	movf	SearchAvailableChannel@result& (0+255),w,b
 28116  005F9C  0012               	return	
 28117  005F9E                     __end_of_SearchAvailableChannel:
 28118                           	opt stack 0
 28119                           tosu	equ	0xFFF
 28120                           tosh	equ	0xFFE
 28121                           tosl	equ	0xFFD
 28122                           pclath	equ	0xFFA
 28123                           tblptru	equ	0xFF8
 28124                           tblptrh	equ	0xFF7
 28125                           tblptrl	equ	0xFF6
 28126                           tablat	equ	0xFF5
 28127                           prodh	equ	0xFF4
 28128                           prodl	equ	0xFF3
 28129                           intcon	equ	0xFF2
 28130                           intcon2	equ	0xFF1
 28131                           intcon3	equ	0xFF0
 28132                           indf0	equ	0xFEF
 28133                           postinc0	equ	0xFEE
 28134                           fsr0h	equ	0xFEA
 28135                           fsr0l	equ	0xFE9
 28136                           wreg	equ	0xFE8
 28137                           postinc1	equ	0xFE6
 28138                           postdec1	equ	0xFE5
 28139                           plusw1	equ	0xFE3
 28140                           fsr1h	equ	0xFE2
 28141                           fsr1l	equ	0xFE1
 28142                           indf2	equ	0xFDF
 28143                           postinc2	equ	0xFDE
 28144                           postdec2	equ	0xFDD
 28145                           plusw2	equ	0xFDB
 28146                           fsr2h	equ	0xFDA
 28147                           fsr2l	equ	0xFD9
 28148                           status	equ	0xFD8
 28149                           
 28150 ;; *************** function _ConfigureRadioTx *****************
 28151 ;; Defined at:
 28152 ;;		line 1255 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 28153 ;; Parameters:    Size  Location     Type
 28154 ;;  dataRate        1    wreg     unsigned char 
 28155 ;;  freq            4   19[BANK0 ] unsigned long 
 28156 ;; Auto vars:     Size  Location     Type
 28157 ;;  dataRate        1   23[BANK0 ] unsigned char 
 28158 ;;  txPower         1   24[BANK0 ] char 
 28159 ;; Return value:  Size  Location     Type
 28160 ;;                  1    wreg      void 
 28161 ;; Registers used:
 28162 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 28163 ;; Tracked objects:
 28164 ;;		On entry : 0/0
 28165 ;;		On exit  : 0/0
 28166 ;;		Unchanged: 0/0
 28167 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28168 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28169 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28170 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28171 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28172 ;;Total ram usage:        6 bytes
 28173 ;; Hardware stack levels used:    1
 28174 ;; Hardware stack levels required when called:   10
 28175 ;; This function calls:
 28176 ;;		_ConfigureRadio
 28177 ;;		_RADIO_SetCRC
 28178 ;;		_RADIO_SetIQInverted
 28179 ;;		_RADIO_SetOutputPower
 28180 ;; This function is called by:
 28181 ;;		_SelectChannelForTransmission
 28182 ;; This function uses a non-reentrant model
 28183 ;;
 28184                           
 28185                           	psect	text131
 28186  008694                     __ptext131:
 28187                           	opt stack 0
 28188  008694                     _ConfigureRadioTx:
 28189                           	opt stack 18
 28190                           
 28191                           ; BSR set to: 0
 28192                           ;incstack = 0
 28193                           ;ConfigureRadioTx@dataRate stored from wreg
 28194  008694  0100               	movlb	0	; () banked
 28195  008696  6F77               	movwf	ConfigureRadioTx@dataRate& (0+255),b
 28196                           
 28197                           ;lorawan_eu.c: 1257: int8_t txPower;
 28198                           ;lorawan_eu.c: 1259: ConfigureRadio(dataRate, freq);
 28199  008698  C073  F06E         	movff	ConfigureRadioTx@freq,ConfigureRadio@freq
 28200  00869C  C074  F06F         	movff	ConfigureRadioTx@freq+1,ConfigureRadio@freq+1
 28201  0086A0  C075  F070         	movff	ConfigureRadioTx@freq+2,ConfigureRadio@freq+2
 28202  0086A4  C076  F071         	movff	ConfigureRadioTx@freq+3,ConfigureRadio@freq+3
 28203  0086A8  0100               	movlb	0	; () banked
 28204  0086AA  5177               	movf	ConfigureRadioTx@dataRate& (0+255),w,b
 28205  0086AC  EC94  F039         	call	_ConfigureRadio
 28206                           
 28207                           ;lorawan_eu.c: 1261: if (ISM_EU868 == loRa.ismBand)
 28208  0086B0  0102               	movlb	2	; () banked
 28209  0086B2  51AA               	movf	(_loRa+164)& (0+255),w,b
 28210                           
 28211                           ; BSR set to: 2
 28212                           ;lorawan_eu.c: 1265: else
 28213                           ;lorawan_eu.c: 1266: {
 28214                           ;lorawan_eu.c: 1267: txPower = txPower868[loRa.txPower];
 28215                           
 28216                           ; BSR set to: 2
 28217                           
 28218                           ;lorawan_eu.c: 1264: }
 28219                           
 28220                           ; BSR set to: 2
 28221                           ;lorawan_eu.c: 1262: {
 28222                           ;lorawan_eu.c: 1263: txPower = txPower868[loRa.txPower];
 28223  0086B4  51E7               	movf	(_loRa+225)& (0+255),w,b
 28224  0086B6  0D01               	mullw	1
 28225  0086B8  0EA2               	movlw	low _txPower868
 28226  0086BA  24F3               	addwf	prodl,w,c
 28227  0086BC  6EF6               	movwf	tblptrl,c
 28228  0086BE  0EFF               	movlw	high _txPower868
 28229  0086C0  20F4               	addwfc	prodh,w,c
 28230  0086C2  6EF7               	movwf	tblptrh,c
 28231  0086C4                     	if	1	;There are 3 active tblptr bytes
 28232  0086C4  6AF8               	clrf	tblptru,c
 28233  0086C6  0E00               	movlw	low (__mediumconst shr (0+16))
 28234  0086C8  22F8               	addwfc	tblptru,f,c
 28235  0086CA                     	endif
 28236  0086CA  0008               	tblrd		*
 28237  0086CC  CFF5 F078          	movff	tablat,ConfigureRadioTx@txPower
 28238                           
 28239                           ; BSR set to: 2
 28240                           ;lorawan_eu.c: 1268: }
 28241                           ;lorawan_eu.c: 1270: RADIO_SetOutputPower (txPower);
 28242                           
 28243                           ; BSR set to: 2
 28244  0086D0  0100               	movlb	0	; () banked
 28245  0086D2  5178               	movf	ConfigureRadioTx@txPower& (0+255),w,b
 28246  0086D4  EC96  F04A         	call	_RADIO_SetOutputPower
 28247                           
 28248                           ;lorawan_eu.c: 1272: RADIO_SetCRC(1);
 28249  0086D8  0E01               	movlw	1
 28250  0086DA  ECA0  F04A         	call	_RADIO_SetCRC
 28251                           
 28252                           ;lorawan_eu.c: 1273: RADIO_SetIQInverted(0);
 28253  0086DE  0E00               	movlw	0
 28254  0086E0  EC9B  F04A         	call	_RADIO_SetIQInverted
 28255  0086E4  0012               	return		;funcret
 28256  0086E6                     __end_of_ConfigureRadioTx:
 28257                           	opt stack 0
 28258                           tosu	equ	0xFFF
 28259                           tosh	equ	0xFFE
 28260                           tosl	equ	0xFFD
 28261                           pclath	equ	0xFFA
 28262                           tblptru	equ	0xFF8
 28263                           tblptrh	equ	0xFF7
 28264                           tblptrl	equ	0xFF6
 28265                           tablat	equ	0xFF5
 28266                           prodh	equ	0xFF4
 28267                           prodl	equ	0xFF3
 28268                           intcon	equ	0xFF2
 28269                           intcon2	equ	0xFF1
 28270                           intcon3	equ	0xFF0
 28271                           indf0	equ	0xFEF
 28272                           postinc0	equ	0xFEE
 28273                           fsr0h	equ	0xFEA
 28274                           fsr0l	equ	0xFE9
 28275                           wreg	equ	0xFE8
 28276                           postinc1	equ	0xFE6
 28277                           postdec1	equ	0xFE5
 28278                           plusw1	equ	0xFE3
 28279                           fsr1h	equ	0xFE2
 28280                           fsr1l	equ	0xFE1
 28281                           indf2	equ	0xFDF
 28282                           postinc2	equ	0xFDE
 28283                           postdec2	equ	0xFDD
 28284                           plusw2	equ	0xFDB
 28285                           fsr2h	equ	0xFDA
 28286                           fsr2l	equ	0xFD9
 28287                           status	equ	0xFD8
 28288                           
 28289 ;; *************** function _RADIO_SetOutputPower *****************
 28290 ;; Defined at:
 28291 ;;		line 1464 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 28292 ;; Parameters:    Size  Location     Type
 28293 ;;  power           1    wreg     char 
 28294 ;; Auto vars:     Size  Location     Type
 28295 ;;  power           1    0[BANK0 ] char 
 28296 ;; Return value:  Size  Location     Type
 28297 ;;                  1    wreg      void 
 28298 ;; Registers used:
 28299 ;;		wreg
 28300 ;; Tracked objects:
 28301 ;;		On entry : 0/0
 28302 ;;		On exit  : 0/0
 28303 ;;		Unchanged: 0/0
 28304 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28305 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28306 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28307 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28308 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28309 ;;Total ram usage:        1 bytes
 28310 ;; Hardware stack levels used:    1
 28311 ;; Hardware stack levels required when called:    7
 28312 ;; This function calls:
 28313 ;;		Nothing
 28314 ;; This function is called by:
 28315 ;;		_ConfigureRadioTx
 28316 ;; This function uses a non-reentrant model
 28317 ;;
 28318                           
 28319                           	psect	text132
 28320  00952C                     __ptext132:
 28321                           	opt stack 0
 28322  00952C                     _RADIO_SetOutputPower:
 28323                           	opt stack 20
 28324                           
 28325                           ;incstack = 0
 28326                           ;RADIO_SetOutputPower@power stored from wreg
 28327  00952C  0100               	movlb	0	; () banked
 28328  00952E  6F60               	movwf	RADIO_SetOutputPower@power& (0+255),b
 28329                           
 28330                           ;radio_driver_SX1276.c: 1466: RadioConfiguration.outputPower = power;
 28331  009530  C060  F172         	movff	RADIO_SetOutputPower@power,_RadioConfiguration+27
 28332  009534  0012               	return		;funcret
 28333  009536                     __end_of_RADIO_SetOutputPower:
 28334                           	opt stack 0
 28335                           tosu	equ	0xFFF
 28336                           tosh	equ	0xFFE
 28337                           tosl	equ	0xFFD
 28338                           pclath	equ	0xFFA
 28339                           tblptru	equ	0xFF8
 28340                           tblptrh	equ	0xFF7
 28341                           tblptrl	equ	0xFF6
 28342                           tablat	equ	0xFF5
 28343                           prodh	equ	0xFF4
 28344                           prodl	equ	0xFF3
 28345                           intcon	equ	0xFF2
 28346                           intcon2	equ	0xFF1
 28347                           intcon3	equ	0xFF0
 28348                           indf0	equ	0xFEF
 28349                           postinc0	equ	0xFEE
 28350                           fsr0h	equ	0xFEA
 28351                           fsr0l	equ	0xFE9
 28352                           wreg	equ	0xFE8
 28353                           postinc1	equ	0xFE6
 28354                           postdec1	equ	0xFE5
 28355                           plusw1	equ	0xFE3
 28356                           fsr1h	equ	0xFE2
 28357                           fsr1l	equ	0xFE1
 28358                           indf2	equ	0xFDF
 28359                           postinc2	equ	0xFDE
 28360                           postdec2	equ	0xFDD
 28361                           plusw2	equ	0xFDB
 28362                           fsr2h	equ	0xFDA
 28363                           fsr2l	equ	0xFD9
 28364                           status	equ	0xFD8
 28365                           
 28366 ;; *************** function _RADIO_SetIQInverted *****************
 28367 ;; Defined at:
 28368 ;;		line 1484 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 28369 ;; Parameters:    Size  Location     Type
 28370 ;;  iqInverted      1    wreg     unsigned char 
 28371 ;; Auto vars:     Size  Location     Type
 28372 ;;  iqInverted      1    0[BANK0 ] unsigned char 
 28373 ;; Return value:  Size  Location     Type
 28374 ;;                  1    wreg      void 
 28375 ;; Registers used:
 28376 ;;		wreg
 28377 ;; Tracked objects:
 28378 ;;		On entry : 0/0
 28379 ;;		On exit  : 0/0
 28380 ;;		Unchanged: 0/0
 28381 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28382 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28383 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28384 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28385 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28386 ;;Total ram usage:        1 bytes
 28387 ;; Hardware stack levels used:    1
 28388 ;; Hardware stack levels required when called:    7
 28389 ;; This function calls:
 28390 ;;		Nothing
 28391 ;; This function is called by:
 28392 ;;		_ConfigureRadioRx
 28393 ;;		_ConfigureRadioTx
 28394 ;; This function uses a non-reentrant model
 28395 ;;
 28396                           
 28397                           	psect	text133
 28398  009536                     __ptext133:
 28399                           	opt stack 0
 28400  009536                     _RADIO_SetIQInverted:
 28401                           	opt stack 20
 28402                           
 28403                           ;incstack = 0
 28404                           ;RADIO_SetIQInverted@iqInverted stored from wreg
 28405  009536  0100               	movlb	0	; () banked
 28406  009538  6F60               	movwf	RADIO_SetIQInverted@iqInverted& (0+255),b
 28407                           
 28408                           ;radio_driver_SX1276.c: 1486: RadioConfiguration.iqInverted = iqInverted;
 28409  00953A  C060  F177         	movff	RADIO_SetIQInverted@iqInverted,_RadioConfiguration+32
 28410  00953E  0012               	return		;funcret
 28411  009540                     __end_of_RADIO_SetIQInverted:
 28412                           	opt stack 0
 28413                           tosu	equ	0xFFF
 28414                           tosh	equ	0xFFE
 28415                           tosl	equ	0xFFD
 28416                           pclath	equ	0xFFA
 28417                           tblptru	equ	0xFF8
 28418                           tblptrh	equ	0xFF7
 28419                           tblptrl	equ	0xFF6
 28420                           tablat	equ	0xFF5
 28421                           prodh	equ	0xFF4
 28422                           prodl	equ	0xFF3
 28423                           intcon	equ	0xFF2
 28424                           intcon2	equ	0xFF1
 28425                           intcon3	equ	0xFF0
 28426                           indf0	equ	0xFEF
 28427                           postinc0	equ	0xFEE
 28428                           fsr0h	equ	0xFEA
 28429                           fsr0l	equ	0xFE9
 28430                           wreg	equ	0xFE8
 28431                           postinc1	equ	0xFE6
 28432                           postdec1	equ	0xFE5
 28433                           plusw1	equ	0xFE3
 28434                           fsr1h	equ	0xFE2
 28435                           fsr1l	equ	0xFE1
 28436                           indf2	equ	0xFDF
 28437                           postinc2	equ	0xFDE
 28438                           postdec2	equ	0xFDD
 28439                           plusw2	equ	0xFDB
 28440                           fsr2h	equ	0xFDA
 28441                           fsr2l	equ	0xFD9
 28442                           status	equ	0xFD8
 28443                           
 28444 ;; *************** function _RADIO_SetCRC *****************
 28445 ;; Defined at:
 28446 ;;		line 1474 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 28447 ;; Parameters:    Size  Location     Type
 28448 ;;  crc             1    wreg     unsigned char 
 28449 ;; Auto vars:     Size  Location     Type
 28450 ;;  crc             1    0[BANK0 ] unsigned char 
 28451 ;; Return value:  Size  Location     Type
 28452 ;;                  1    wreg      void 
 28453 ;; Registers used:
 28454 ;;		wreg
 28455 ;; Tracked objects:
 28456 ;;		On entry : 0/0
 28457 ;;		On exit  : 0/0
 28458 ;;		Unchanged: 0/0
 28459 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28460 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28461 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28462 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28463 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28464 ;;Total ram usage:        1 bytes
 28465 ;; Hardware stack levels used:    1
 28466 ;; Hardware stack levels required when called:    7
 28467 ;; This function calls:
 28468 ;;		Nothing
 28469 ;; This function is called by:
 28470 ;;		_ConfigureRadioRx
 28471 ;;		_ConfigureRadioTx
 28472 ;; This function uses a non-reentrant model
 28473 ;;
 28474                           
 28475                           	psect	text134
 28476  009540                     __ptext134:
 28477                           	opt stack 0
 28478  009540                     _RADIO_SetCRC:
 28479                           	opt stack 20
 28480                           
 28481                           ;incstack = 0
 28482                           ;RADIO_SetCRC@crc stored from wreg
 28483  009540  0100               	movlb	0	; () banked
 28484  009542  6F60               	movwf	RADIO_SetCRC@crc& (0+255),b
 28485                           
 28486                           ;radio_driver_SX1276.c: 1476: RadioConfiguration.crcOn = crc;
 28487  009544  C060  F173         	movff	RADIO_SetCRC@crc,_RadioConfiguration+28
 28488  009548  0012               	return		;funcret
 28489  00954A                     __end_of_RADIO_SetCRC:
 28490                           	opt stack 0
 28491                           tosu	equ	0xFFF
 28492                           tosh	equ	0xFFE
 28493                           tosl	equ	0xFFD
 28494                           pclath	equ	0xFFA
 28495                           tblptru	equ	0xFF8
 28496                           tblptrh	equ	0xFF7
 28497                           tblptrl	equ	0xFF6
 28498                           tablat	equ	0xFF5
 28499                           prodh	equ	0xFF4
 28500                           prodl	equ	0xFF3
 28501                           intcon	equ	0xFF2
 28502                           intcon2	equ	0xFF1
 28503                           intcon3	equ	0xFF0
 28504                           indf0	equ	0xFEF
 28505                           postinc0	equ	0xFEE
 28506                           fsr0h	equ	0xFEA
 28507                           fsr0l	equ	0xFE9
 28508                           wreg	equ	0xFE8
 28509                           postinc1	equ	0xFE6
 28510                           postdec1	equ	0xFE5
 28511                           plusw1	equ	0xFE3
 28512                           fsr1h	equ	0xFE2
 28513                           fsr1l	equ	0xFE1
 28514                           indf2	equ	0xFDF
 28515                           postinc2	equ	0xFDE
 28516                           postdec2	equ	0xFDD
 28517                           plusw2	equ	0xFDB
 28518                           fsr2h	equ	0xFDA
 28519                           fsr2l	equ	0xFD9
 28520                           status	equ	0xFD8
 28521                           
 28522 ;; *************** function _ConfigureRadio *****************
 28523 ;; Defined at:
 28524 ;;		line 863 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 28525 ;; Parameters:    Size  Location     Type
 28526 ;;  dataRate        1    wreg     unsigned char 
 28527 ;;  freq            4   14[BANK0 ] unsigned long 
 28528 ;; Auto vars:     Size  Location     Type
 28529 ;;  dataRate        1   18[BANK0 ] unsigned char 
 28530 ;; Return value:  Size  Location     Type
 28531 ;;                  1    wreg      void 
 28532 ;; Registers used:
 28533 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 28534 ;; Tracked objects:
 28535 ;;		On entry : 0/0
 28536 ;;		On exit  : 0/0
 28537 ;;		Unchanged: 0/0
 28538 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28539 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28540 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28541 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28542 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28543 ;;Total ram usage:        5 bytes
 28544 ;; Hardware stack levels used:    1
 28545 ;; Hardware stack levels required when called:    9
 28546 ;; This function calls:
 28547 ;;		_RADIO_SetBandwidth
 28548 ;;		_RADIO_SetChannelFrequency
 28549 ;;		_RADIO_SetFSKSyncWord
 28550 ;;		_RADIO_SetFrequencyHopPeriod
 28551 ;;		_RADIO_SetLoRaSyncWord
 28552 ;;		_RADIO_SetModulation
 28553 ;;		_RADIO_SetSpreadingFactor
 28554 ;; This function is called by:
 28555 ;;		_ConfigureRadioRx
 28556 ;;		_ConfigureRadioTx
 28557 ;; This function uses a non-reentrant model
 28558 ;;
 28559                           
 28560                           	psect	text135
 28561  007328                     __ptext135:
 28562                           	opt stack 0
 28563  007328                     _ConfigureRadio:
 28564                           	opt stack 18
 28565                           
 28566                           ;incstack = 0
 28567                           ;ConfigureRadio@dataRate stored from wreg
 28568  007328  0100               	movlb	0	; () banked
 28569  00732A  6F72               	movwf	ConfigureRadio@dataRate& (0+255),b
 28570                           
 28571                           ;lorawan_eu.c: 865: RADIO_SetModulation (modulation[dataRate]);
 28572  00732C  0100               	movlb	0	; () banked
 28573  00732E  5172               	movf	ConfigureRadio@dataRate& (0+255),w,b
 28574  007330  0D01               	mullw	1
 28575  007332  0E67               	movlw	low _modulation
 28576  007334  24F3               	addwf	prodl,w,c
 28577  007336  6EF6               	movwf	tblptrl,c
 28578  007338  0EFF               	movlw	high _modulation
 28579  00733A  20F4               	addwfc	prodh,w,c
 28580  00733C  6EF7               	movwf	tblptrh,c
 28581  00733E                     	if	1	;There are 3 active tblptr bytes
 28582  00733E  6AF8               	clrf	tblptru,c
 28583  007340  0E00               	movlw	low (__mediumconst shr (0+16))
 28584  007342  22F8               	addwfc	tblptru,f,c
 28585  007344                     	endif
 28586  007344  0008               	tblrd		*
 28587  007346  50F5               	movf	tablat,w,c
 28588  007348  ECAA  F04A         	call	_RADIO_SetModulation
 28589                           
 28590                           ;lorawan_eu.c: 866: RADIO_SetChannelFrequency (freq);
 28591  00734C  C06E  F060         	movff	ConfigureRadio@freq,RADIO_SetChannelFrequency@frequency
 28592  007350  C06F  F061         	movff	ConfigureRadio@freq+1,RADIO_SetChannelFrequency@frequency+1
 28593  007354  C070  F062         	movff	ConfigureRadio@freq+2,RADIO_SetChannelFrequency@frequency+2
 28594  007358  C071  F063         	movff	ConfigureRadio@freq+3,RADIO_SetChannelFrequency@frequency+3
 28595  00735C  ECB5  F03B         	call	_RADIO_SetChannelFrequency	;wreg free
 28596                           
 28597                           ;lorawan_eu.c: 867: RADIO_SetFrequencyHopPeriod (0);
 28598  007360  0E00               	movlw	0
 28599  007362  0100               	movlb	0	; () banked
 28600  007364  6F61               	movwf	(RADIO_SetFrequencyHopPeriod@frequencyHopPeriod+1)& (0+255),b
 28601  007366  0E00               	movlw	0
 28602  007368  6F60               	movwf	RADIO_SetFrequencyHopPeriod@frequencyHopPeriod& (0+255),b
 28603  00736A  ECAF  F04A         	call	_RADIO_SetFrequencyHopPeriod	;wreg free
 28604                           
 28605                           ;lorawan_eu.c: 869: if (dataRate <= 6)
 28606  00736E  0E07               	movlw	7
 28607  007370  0100               	movlb	0	; () banked
 28608  007372  6172               	cpfslt	ConfigureRadio@dataRate& (0+255),b
 28609  007374  D024               	goto	l2005
 28610                           
 28611                           ; BSR set to: 0
 28612                           ;lorawan_eu.c: 870: {
 28613                           ;lorawan_eu.c: 872: RADIO_SetSpreadingFactor (spreadingFactor[dataRate]);
 28614  007376  5172               	movf	ConfigureRadio@dataRate& (0+255),w,b
 28615  007378  0D01               	mullw	1
 28616  00737A  0E8E               	movlw	low _spreadingFactor
 28617  00737C  24F3               	addwf	prodl,w,c
 28618  00737E  6EF6               	movwf	tblptrl,c
 28619  007380  0EFF               	movlw	high _spreadingFactor
 28620  007382  20F4               	addwfc	prodh,w,c
 28621  007384  6EF7               	movwf	tblptrh,c
 28622  007386                     	if	1	;There are 3 active tblptr bytes
 28623  007386  6AF8               	clrf	tblptru,c
 28624  007388  0E00               	movlw	low (__mediumconst shr (0+16))
 28625  00738A  22F8               	addwfc	tblptru,f,c
 28626  00738C                     	endif
 28627  00738C  0008               	tblrd		*
 28628  00738E  50F5               	movf	tablat,w,c
 28629  007390  ECA5  F04A         	call	_RADIO_SetSpreadingFactor
 28630                           
 28631                           ;lorawan_eu.c: 873: RADIO_SetBandwidth (bandwidth[dataRate]);
 28632  007394  0100               	movlb	0	; () banked
 28633  007396  5172               	movf	ConfigureRadio@dataRate& (0+255),w,b
 28634  007398  0D01               	mullw	1
 28635  00739A  0E87               	movlw	low _bandwidth
 28636  00739C  24F3               	addwf	prodl,w,c
 28637  00739E  6EF6               	movwf	tblptrl,c
 28638  0073A0  0EFF               	movlw	high _bandwidth
 28639  0073A2  20F4               	addwfc	prodh,w,c
 28640  0073A4  6EF7               	movwf	tblptrh,c
 28641  0073A6                     	if	1	;There are 3 active tblptr bytes
 28642  0073A6  6AF8               	clrf	tblptru,c
 28643  0073A8  0E00               	movlw	low (__mediumconst shr (0+16))
 28644  0073AA  22F8               	addwfc	tblptru,f,c
 28645  0073AC                     	endif
 28646  0073AC  0008               	tblrd		*
 28647  0073AE  50F5               	movf	tablat,w,c
 28648  0073B0  ECB4  F04A         	call	_RADIO_SetBandwidth
 28649                           
 28650                           ;lorawan_eu.c: 874: RADIO_SetLoRaSyncWord(loRa.syncWord);
 28651  0073B4  0102               	movlb	2	; () banked
 28652  0073B6  51FA               	movf	(_loRa+244)& (0+255),w,b
 28653  0073B8  ECB9  F04A         	call	_RADIO_SetLoRaSyncWord
 28654                           
 28655                           ;lorawan_eu.c: 875: }
 28656  0073BC  0012               	return	
 28657  0073BE                     l2005:
 28658                           
 28659                           ;lorawan_eu.c: 876: else
 28660                           ;lorawan_eu.c: 877: {
 28661                           ;lorawan_eu.c: 879: RADIO_SetFSKSyncWord(sizeof(FskSyncWordBuff) / sizeof(FskSyncWordBuf
      +                          f[0]), (uint8_t*)FskSyncWordBuff);
 28662  0073BE  0EFC               	movlw	low _FskSyncWordBuff
 28663  0073C0  0100               	movlb	0	; () banked
 28664  0073C2  6F6B               	movwf	RADIO_SetFSKSyncWord@syncWord& (0+255),b
 28665  0073C4  0EFF               	movlw	high _FskSyncWordBuff
 28666  0073C6  6F6C               	movwf	(RADIO_SetFSKSyncWord@syncWord+1)& (0+255),b
 28667  0073C8  0E03               	movlw	3
 28668  0073CA  ECA6  F046         	call	_RADIO_SetFSKSyncWord
 28669  0073CE  0012               	return	
 28670  0073D0                     __end_of_ConfigureRadio:
 28671                           	opt stack 0
 28672                           tosu	equ	0xFFF
 28673                           tosh	equ	0xFFE
 28674                           tosl	equ	0xFFD
 28675                           pclath	equ	0xFFA
 28676                           tblptru	equ	0xFF8
 28677                           tblptrh	equ	0xFF7
 28678                           tblptrl	equ	0xFF6
 28679                           tablat	equ	0xFF5
 28680                           prodh	equ	0xFF4
 28681                           prodl	equ	0xFF3
 28682                           intcon	equ	0xFF2
 28683                           intcon2	equ	0xFF1
 28684                           intcon3	equ	0xFF0
 28685                           indf0	equ	0xFEF
 28686                           postinc0	equ	0xFEE
 28687                           fsr0h	equ	0xFEA
 28688                           fsr0l	equ	0xFE9
 28689                           wreg	equ	0xFE8
 28690                           postinc1	equ	0xFE6
 28691                           postdec1	equ	0xFE5
 28692                           plusw1	equ	0xFE3
 28693                           fsr1h	equ	0xFE2
 28694                           fsr1l	equ	0xFE1
 28695                           indf2	equ	0xFDF
 28696                           postinc2	equ	0xFDE
 28697                           postdec2	equ	0xFDD
 28698                           plusw2	equ	0xFDB
 28699                           fsr2h	equ	0xFDA
 28700                           fsr2l	equ	0xFD9
 28701                           status	equ	0xFD8
 28702                           
 28703 ;; *************** function _RADIO_SetSpreadingFactor *****************
 28704 ;; Defined at:
 28705 ;;		line 1434 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 28706 ;; Parameters:    Size  Location     Type
 28707 ;;  spreadingFac    1    wreg     enum E6994
 28708 ;; Auto vars:     Size  Location     Type
 28709 ;;  spreadingFac    1    0[BANK0 ] enum E6994
 28710 ;; Return value:  Size  Location     Type
 28711 ;;                  1    wreg      void 
 28712 ;; Registers used:
 28713 ;;		wreg
 28714 ;; Tracked objects:
 28715 ;;		On entry : 0/0
 28716 ;;		On exit  : 0/0
 28717 ;;		Unchanged: 0/0
 28718 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28719 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28720 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28721 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28722 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28723 ;;Total ram usage:        1 bytes
 28724 ;; Hardware stack levels used:    1
 28725 ;; Hardware stack levels required when called:    7
 28726 ;; This function calls:
 28727 ;;		Nothing
 28728 ;; This function is called by:
 28729 ;;		_ConfigureRadio
 28730 ;; This function uses a non-reentrant model
 28731 ;;
 28732                           
 28733                           	psect	text136
 28734  00954A                     __ptext136:
 28735                           	opt stack 0
 28736  00954A                     _RADIO_SetSpreadingFactor:
 28737                           	opt stack 19
 28738                           
 28739                           ;incstack = 0
 28740                           ;RADIO_SetSpreadingFactor@spreadingFactor stored from wreg
 28741  00954A  0100               	movlb	0	; () banked
 28742  00954C  6F60               	movwf	RADIO_SetSpreadingFactor@spreadingFactor& (0+255),b
 28743                           
 28744                           ;radio_driver_SX1276.c: 1436: RadioConfiguration.dataRate = spreadingFactor;
 28745  00954E  C060  F170         	movff	RADIO_SetSpreadingFactor@spreadingFactor,_RadioConfiguration+25
 28746  009552  0012               	return		;funcret
 28747  009554                     __end_of_RADIO_SetSpreadingFactor:
 28748                           	opt stack 0
 28749                           tosu	equ	0xFFF
 28750                           tosh	equ	0xFFE
 28751                           tosl	equ	0xFFD
 28752                           pclath	equ	0xFFA
 28753                           tblptru	equ	0xFF8
 28754                           tblptrh	equ	0xFF7
 28755                           tblptrl	equ	0xFF6
 28756                           tablat	equ	0xFF5
 28757                           prodh	equ	0xFF4
 28758                           prodl	equ	0xFF3
 28759                           intcon	equ	0xFF2
 28760                           intcon2	equ	0xFF1
 28761                           intcon3	equ	0xFF0
 28762                           indf0	equ	0xFEF
 28763                           postinc0	equ	0xFEE
 28764                           fsr0h	equ	0xFEA
 28765                           fsr0l	equ	0xFE9
 28766                           wreg	equ	0xFE8
 28767                           postinc1	equ	0xFE6
 28768                           postdec1	equ	0xFE5
 28769                           plusw1	equ	0xFE3
 28770                           fsr1h	equ	0xFE2
 28771                           fsr1l	equ	0xFE1
 28772                           indf2	equ	0xFDF
 28773                           postinc2	equ	0xFDE
 28774                           postdec2	equ	0xFDD
 28775                           plusw2	equ	0xFDB
 28776                           fsr2h	equ	0xFDA
 28777                           fsr2l	equ	0xFD9
 28778                           status	equ	0xFD8
 28779                           
 28780 ;; *************** function _RADIO_SetModulation *****************
 28781 ;; Defined at:
 28782 ;;		line 1515 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 28783 ;; Parameters:    Size  Location     Type
 28784 ;;  modulation      1    wreg     enum E6984
 28785 ;; Auto vars:     Size  Location     Type
 28786 ;;  modulation      1    0[BANK0 ] enum E6984
 28787 ;; Return value:  Size  Location     Type
 28788 ;;                  1    wreg      void 
 28789 ;; Registers used:
 28790 ;;		wreg
 28791 ;; Tracked objects:
 28792 ;;		On entry : 0/0
 28793 ;;		On exit  : 0/0
 28794 ;;		Unchanged: 0/0
 28795 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28796 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28797 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28798 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28799 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28800 ;;Total ram usage:        1 bytes
 28801 ;; Hardware stack levels used:    1
 28802 ;; Hardware stack levels required when called:    7
 28803 ;; This function calls:
 28804 ;;		Nothing
 28805 ;; This function is called by:
 28806 ;;		_ConfigureRadio
 28807 ;; This function uses a non-reentrant model
 28808 ;;
 28809                           
 28810                           	psect	text137
 28811  009554                     __ptext137:
 28812                           	opt stack 0
 28813  009554                     _RADIO_SetModulation:
 28814                           	opt stack 19
 28815                           
 28816                           ;incstack = 0
 28817                           ;RADIO_SetModulation@modulation stored from wreg
 28818  009554  0100               	movlb	0	; () banked
 28819  009556  6F60               	movwf	RADIO_SetModulation@modulation& (0+255),b
 28820                           
 28821                           ;radio_driver_SX1276.c: 1517: RadioConfiguration.modulation = modulation;
 28822  009558  C060  F16F         	movff	RADIO_SetModulation@modulation,_RadioConfiguration+24
 28823  00955C  0012               	return		;funcret
 28824  00955E                     __end_of_RADIO_SetModulation:
 28825                           	opt stack 0
 28826                           tosu	equ	0xFFF
 28827                           tosh	equ	0xFFE
 28828                           tosl	equ	0xFFD
 28829                           pclath	equ	0xFFA
 28830                           tblptru	equ	0xFF8
 28831                           tblptrh	equ	0xFF7
 28832                           tblptrl	equ	0xFF6
 28833                           tablat	equ	0xFF5
 28834                           prodh	equ	0xFF4
 28835                           prodl	equ	0xFF3
 28836                           intcon	equ	0xFF2
 28837                           intcon2	equ	0xFF1
 28838                           intcon3	equ	0xFF0
 28839                           indf0	equ	0xFEF
 28840                           postinc0	equ	0xFEE
 28841                           fsr0h	equ	0xFEA
 28842                           fsr0l	equ	0xFE9
 28843                           wreg	equ	0xFE8
 28844                           postinc1	equ	0xFE6
 28845                           postdec1	equ	0xFE5
 28846                           plusw1	equ	0xFE3
 28847                           fsr1h	equ	0xFE2
 28848                           fsr1l	equ	0xFE1
 28849                           indf2	equ	0xFDF
 28850                           postinc2	equ	0xFDE
 28851                           postdec2	equ	0xFDD
 28852                           plusw2	equ	0xFDB
 28853                           fsr2h	equ	0xFDA
 28854                           fsr2l	equ	0xFD9
 28855                           status	equ	0xFD8
 28856                           
 28857 ;; *************** function _RADIO_SetFrequencyHopPeriod *****************
 28858 ;; Defined at:
 28859 ;;		line 1550 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 28860 ;; Parameters:    Size  Location     Type
 28861 ;;  frequencyHop    2    0[BANK0 ] unsigned int 
 28862 ;; Auto vars:     Size  Location     Type
 28863 ;;		None
 28864 ;; Return value:  Size  Location     Type
 28865 ;;                  1    wreg      void 
 28866 ;; Registers used:
 28867 ;;		None
 28868 ;; Tracked objects:
 28869 ;;		On entry : 0/0
 28870 ;;		On exit  : 0/0
 28871 ;;		Unchanged: 0/0
 28872 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28873 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28874 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28875 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28876 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28877 ;;Total ram usage:        2 bytes
 28878 ;; Hardware stack levels used:    1
 28879 ;; Hardware stack levels required when called:    7
 28880 ;; This function calls:
 28881 ;;		Nothing
 28882 ;; This function is called by:
 28883 ;;		_ConfigureRadio
 28884 ;; This function uses a non-reentrant model
 28885 ;;
 28886                           
 28887                           	psect	text138
 28888  00955E                     __ptext138:
 28889                           	opt stack 0
 28890  00955E                     _RADIO_SetFrequencyHopPeriod:
 28891                           	opt stack 19
 28892                           
 28893                           ;radio_driver_SX1276.c: 1552: RadioConfiguration.frequencyHopPeriod = frequencyHopPeriod
      +                          ;
 28894                           
 28895                           ;incstack = 0
 28896  00955E  C060  F175         	movff	RADIO_SetFrequencyHopPeriod@frequencyHopPeriod,_RadioConfiguration+30
 28897  009562  C061  F176         	movff	RADIO_SetFrequencyHopPeriod@frequencyHopPeriod+1,_RadioConfiguration+31
 28898  009566  0012               	return		;funcret
 28899  009568                     __end_of_RADIO_SetFrequencyHopPeriod:
 28900                           	opt stack 0
 28901                           tosu	equ	0xFFF
 28902                           tosh	equ	0xFFE
 28903                           tosl	equ	0xFFD
 28904                           pclath	equ	0xFFA
 28905                           tblptru	equ	0xFF8
 28906                           tblptrh	equ	0xFF7
 28907                           tblptrl	equ	0xFF6
 28908                           tablat	equ	0xFF5
 28909                           prodh	equ	0xFF4
 28910                           prodl	equ	0xFF3
 28911                           intcon	equ	0xFF2
 28912                           intcon2	equ	0xFF1
 28913                           intcon3	equ	0xFF0
 28914                           indf0	equ	0xFEF
 28915                           postinc0	equ	0xFEE
 28916                           fsr0h	equ	0xFEA
 28917                           fsr0l	equ	0xFE9
 28918                           wreg	equ	0xFE8
 28919                           postinc1	equ	0xFE6
 28920                           postdec1	equ	0xFE5
 28921                           plusw1	equ	0xFE3
 28922                           fsr1h	equ	0xFE2
 28923                           fsr1l	equ	0xFE1
 28924                           indf2	equ	0xFDF
 28925                           postinc2	equ	0xFDE
 28926                           postdec2	equ	0xFDD
 28927                           plusw2	equ	0xFDB
 28928                           fsr2h	equ	0xFDA
 28929                           fsr2l	equ	0xFD9
 28930                           status	equ	0xFD8
 28931                           
 28932 ;; *************** function _RADIO_SetFSKSyncWord *****************
 28933 ;; Defined at:
 28934 ;;		line 1624 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 28935 ;; Parameters:    Size  Location     Type
 28936 ;;  syncWordLen     1    wreg     unsigned char 
 28937 ;;  syncWord        2   11[BANK0 ] PTR unsigned char 
 28938 ;;		 -> FskSyncWordBuff(3), 
 28939 ;; Auto vars:     Size  Location     Type
 28940 ;;  syncWordLen     1   13[BANK0 ] unsigned char 
 28941 ;; Return value:  Size  Location     Type
 28942 ;;                  1    wreg      void 
 28943 ;; Registers used:
 28944 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 28945 ;; Tracked objects:
 28946 ;;		On entry : 0/0
 28947 ;;		On exit  : 0/0
 28948 ;;		Unchanged: 0/0
 28949 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28950 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28951 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28952 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28953 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28954 ;;Total ram usage:        3 bytes
 28955 ;; Hardware stack levels used:    1
 28956 ;; Hardware stack levels required when called:    8
 28957 ;; This function calls:
 28958 ;;		_memcpy
 28959 ;; This function is called by:
 28960 ;;		_ConfigureRadio
 28961 ;; This function uses a non-reentrant model
 28962 ;;
 28963                           
 28964                           	psect	text139
 28965  008D4C                     __ptext139:
 28966                           	opt stack 0
 28967  008D4C                     _RADIO_SetFSKSyncWord:
 28968                           	opt stack 18
 28969                           
 28970                           ;incstack = 0
 28971                           ;RADIO_SetFSKSyncWord@syncWordLen stored from wreg
 28972  008D4C  0100               	movlb	0	; () banked
 28973  008D4E  6F6D               	movwf	RADIO_SetFSKSyncWord@syncWordLen& (0+255),b
 28974                           
 28975                           ;radio_driver_SX1276.c: 1626: if (syncWordLen > 8)
 28976  008D50  0E08               	movlw	8
 28977  008D52  0100               	movlb	0	; () banked
 28978  008D54  656D               	cpfsgt	RADIO_SetFSKSyncWord@syncWordLen& (0+255),b
 28979  008D56  D002               	goto	l577
 28980                           
 28981                           ; BSR set to: 0
 28982                           ;radio_driver_SX1276.c: 1627: {
 28983                           ;radio_driver_SX1276.c: 1628: syncWordLen = 8;
 28984  008D58  0E08               	movlw	8
 28985  008D5A  6F6D               	movwf	RADIO_SetFSKSyncWord@syncWordLen& (0+255),b
 28986  008D5C                     l577:
 28987                           
 28988                           ; BSR set to: 0
 28989                           ;radio_driver_SX1276.c: 1629: }
 28990                           ;radio_driver_SX1276.c: 1630: memcpy(RadioConfiguration.syncWord, syncWord, syncWordLen)
      +                          ;
 28991                           
 28992                           ; BSR set to: 0
 28993  008D5C  0E66               	movlw	low (_RadioConfiguration+15)
 28994  008D5E  6F60               	movwf	memcpy@d1& (0+255),b
 28995  008D60  0E01               	movlw	high (_RadioConfiguration+15)
 28996  008D62  6F61               	movwf	(memcpy@d1+1)& (0+255),b
 28997  008D64  C06B  F062         	movff	RADIO_SetFSKSyncWord@syncWord,memcpy@s1
 28998  008D68  C06C  F063         	movff	RADIO_SetFSKSyncWord@syncWord+1,memcpy@s1+1
 28999  008D6C  C06D  F064         	movff	RADIO_SetFSKSyncWord@syncWordLen,memcpy@n
 29000  008D70  6B65               	clrf	(memcpy@n+1)& (0+255),b
 29001  008D72  EC5D  F041         	call	_memcpy	;wreg free
 29002                           
 29003                           ;radio_driver_SX1276.c: 1631: RadioConfiguration.syncWordLen = syncWordLen;
 29004  008D76  C06D  F16E         	movff	RADIO_SetFSKSyncWord@syncWordLen,_RadioConfiguration+23
 29005  008D7A  0012               	return		;funcret
 29006  008D7C                     __end_of_RADIO_SetFSKSyncWord:
 29007                           	opt stack 0
 29008                           tosu	equ	0xFFF
 29009                           tosh	equ	0xFFE
 29010                           tosl	equ	0xFFD
 29011                           pclath	equ	0xFFA
 29012                           tblptru	equ	0xFF8
 29013                           tblptrh	equ	0xFF7
 29014                           tblptrl	equ	0xFF6
 29015                           tablat	equ	0xFF5
 29016                           prodh	equ	0xFF4
 29017                           prodl	equ	0xFF3
 29018                           intcon	equ	0xFF2
 29019                           intcon2	equ	0xFF1
 29020                           intcon3	equ	0xFF0
 29021                           indf0	equ	0xFEF
 29022                           postinc0	equ	0xFEE
 29023                           fsr0h	equ	0xFEA
 29024                           fsr0l	equ	0xFE9
 29025                           wreg	equ	0xFE8
 29026                           postinc1	equ	0xFE6
 29027                           postdec1	equ	0xFE5
 29028                           plusw1	equ	0xFE3
 29029                           fsr1h	equ	0xFE2
 29030                           fsr1l	equ	0xFE1
 29031                           indf2	equ	0xFDF
 29032                           postinc2	equ	0xFDE
 29033                           postdec2	equ	0xFDD
 29034                           plusw2	equ	0xFDB
 29035                           fsr2h	equ	0xFDA
 29036                           fsr2l	equ	0xFD9
 29037                           status	equ	0xFD8
 29038                           
 29039 ;; *************** function _RADIO_SetChannelFrequency *****************
 29040 ;; Defined at:
 29041 ;;		line 1444 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 29042 ;; Parameters:    Size  Location     Type
 29043 ;;  frequency       4    0[BANK0 ] unsigned long 
 29044 ;; Auto vars:     Size  Location     Type
 29045 ;;		None
 29046 ;; Return value:  Size  Location     Type
 29047 ;;                  2    0[BANK0 ] enum E7038
 29048 ;; Registers used:
 29049 ;;		wreg, status,2, status,0
 29050 ;; Tracked objects:
 29051 ;;		On entry : 0/0
 29052 ;;		On exit  : 0/0
 29053 ;;		Unchanged: 0/0
 29054 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29055 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29056 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29057 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29058 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29059 ;;Total ram usage:        4 bytes
 29060 ;; Hardware stack levels used:    1
 29061 ;; Hardware stack levels required when called:    7
 29062 ;; This function calls:
 29063 ;;		Nothing
 29064 ;; This function is called by:
 29065 ;;		_ConfigureRadio
 29066 ;; This function uses a non-reentrant model
 29067 ;;
 29068                           
 29069                           	psect	text140
 29070  00776A                     __ptext140:
 29071                           	opt stack 0
 29072  00776A                     _RADIO_SetChannelFrequency:
 29073                           	opt stack 19
 29074                           
 29075                           ;radio_driver_SX1276.c: 1446: if ( (frequency >= 137000000) && (frequency <= 175000000) 
      +                          ||
 29076                           ;radio_driver_SX1276.c: 1447: (frequency >= 410000000) && (frequency <= 525000000) ||
 29077                           ;radio_driver_SX1276.c: 1448: (frequency >= 862000000) && (frequency <= 1020000000) )
 29078                           
 29079                           ;incstack = 0
 29080  00776A  0E40               	movlw	64
 29081  00776C  0100               	movlb	0	; () banked
 29082  00776E  5D60               	subwf	RADIO_SetChannelFrequency@frequency& (0+255),w,b
 29083  007770  0E74               	movlw	116
 29084  007772  5961               	subwfb	(RADIO_SetChannelFrequency@frequency+1)& (0+255),w,b
 29085  007774  0E2A               	movlw	42
 29086  007776  5962               	subwfb	(RADIO_SetChannelFrequency@frequency+2)& (0+255),w,b
 29087  007778  0E08               	movlw	8
 29088  00777A  5963               	subwfb	(RADIO_SetChannelFrequency@frequency+3)& (0+255),w,b
 29089  00777C  A0D8               	btfss	status,0,c
 29090  00777E  D00A               	goto	u8210
 29091                           
 29092                           ; BSR set to: 0
 29093  007780  0EC1               	movlw	193
 29094  007782  5D60               	subwf	RADIO_SetChannelFrequency@frequency& (0+255),w,b
 29095  007784  0E49               	movlw	73
 29096  007786  5961               	subwfb	(RADIO_SetChannelFrequency@frequency+1)& (0+255),w,b
 29097  007788  0E6E               	movlw	110
 29098  00778A  5962               	subwfb	(RADIO_SetChannelFrequency@frequency+2)& (0+255),w,b
 29099  00778C  0E0A               	movlw	10
 29100  00778E  5963               	subwfb	(RADIO_SetChannelFrequency@frequency+3)& (0+255),w,b
 29101  007790  A0D8               	btfss	status,0,c
 29102  007792  D027               	goto	u8250
 29103  007794                     u8210:
 29104                           
 29105                           ; BSR set to: 0
 29106                           
 29107                           ; BSR set to: 0
 29108  007794  0E80               	movlw	128
 29109  007796  5D60               	subwf	RADIO_SetChannelFrequency@frequency& (0+255),w,b
 29110  007798  0E1A               	movlw	26
 29111  00779A  5961               	subwfb	(RADIO_SetChannelFrequency@frequency+1)& (0+255),w,b
 29112  00779C  0E70               	movlw	112
 29113  00779E  5962               	subwfb	(RADIO_SetChannelFrequency@frequency+2)& (0+255),w,b
 29114  0077A0  0E18               	movlw	24
 29115  0077A2  5963               	subwfb	(RADIO_SetChannelFrequency@frequency+3)& (0+255),w,b
 29116  0077A4  A0D8               	btfss	status,0,c
 29117  0077A6  D00A               	goto	u8230
 29118                           
 29119                           ; BSR set to: 0
 29120  0077A8  0E41               	movlw	65
 29121  0077AA  5D60               	subwf	RADIO_SetChannelFrequency@frequency& (0+255),w,b
 29122  0077AC  0EDD               	movlw	221
 29123  0077AE  5961               	subwfb	(RADIO_SetChannelFrequency@frequency+1)& (0+255),w,b
 29124  0077B0  0E4A               	movlw	74
 29125  0077B2  5962               	subwfb	(RADIO_SetChannelFrequency@frequency+2)& (0+255),w,b
 29126  0077B4  0E1F               	movlw	31
 29127  0077B6  5963               	subwfb	(RADIO_SetChannelFrequency@frequency+3)& (0+255),w,b
 29128  0077B8  A0D8               	btfss	status,0,c
 29129  0077BA  D013               	goto	u8250
 29130  0077BC                     u8230:
 29131                           
 29132                           ; BSR set to: 0
 29133                           
 29134                           ; BSR set to: 0
 29135  0077BC  0E80               	movlw	128
 29136  0077BE  5D60               	subwf	RADIO_SetChannelFrequency@frequency& (0+255),w,b
 29137  0077C0  0E13               	movlw	19
 29138  0077C2  5961               	subwfb	(RADIO_SetChannelFrequency@frequency+1)& (0+255),w,b
 29139  0077C4  0E61               	movlw	97
 29140  0077C6  5962               	subwfb	(RADIO_SetChannelFrequency@frequency+2)& (0+255),w,b
 29141  0077C8  0E33               	movlw	51
 29142  0077CA  5963               	subwfb	(RADIO_SetChannelFrequency@frequency+3)& (0+255),w,b
 29143  0077CC  A0D8               	btfss	status,0,c
 29144  0077CE  0012               	return	
 29145                           
 29146                           ; BSR set to: 0
 29147  0077D0  0560               	decf	RADIO_SetChannelFrequency@frequency& (0+255),w,b
 29148  0077D2  0EF7               	movlw	247
 29149  0077D4  5961               	subwfb	(RADIO_SetChannelFrequency@frequency+1)& (0+255),w,b
 29150  0077D6  0ECB               	movlw	203
 29151  0077D8  5962               	subwfb	(RADIO_SetChannelFrequency@frequency+2)& (0+255),w,b
 29152  0077DA  0E3C               	movlw	60
 29153  0077DC  5963               	subwfb	(RADIO_SetChannelFrequency@frequency+3)& (0+255),w,b
 29154  0077DE  B0D8               	btfsc	status,0,c
 29155  0077E0  0012               	return	
 29156  0077E2                     u8250:
 29157                           
 29158                           ; BSR set to: 0
 29159                           ;radio_driver_SX1276.c: 1449: {
 29160                           ;radio_driver_SX1276.c: 1450: RadioConfiguration.frequency = frequency;
 29161  0077E2  C060  F157         	movff	RADIO_SetChannelFrequency@frequency,_RadioConfiguration
 29162  0077E6  C061  F158         	movff	RADIO_SetChannelFrequency@frequency+1,_RadioConfiguration+1
 29163  0077EA  C062  F159         	movff	RADIO_SetChannelFrequency@frequency+2,_RadioConfiguration+2
 29164  0077EE  C063  F15A         	movff	RADIO_SetChannelFrequency@frequency+3,_RadioConfiguration+3
 29165                           
 29166                           ; BSR set to: 0
 29167                           ;radio_driver_SX1276.c: 1453: else
 29168                           ;radio_driver_SX1276.c: 1454: {
 29169                           ;radio_driver_SX1276.c: 1455: return ERR_OUT_OF_RANGE;
 29170                           ;	Return value of _RADIO_SetChannelFrequency is never used
 29171                           
 29172                           ; BSR set to: 0
 29173                           ;radio_driver_SX1276.c: 1452: }
 29174                           
 29175                           ;radio_driver_SX1276.c: 1451: return ERR_NONE;
 29176                           ;	Return value of _RADIO_SetChannelFrequency is never used
 29177  0077F2  0012               	return	
 29178  0077F4                     __end_of_RADIO_SetChannelFrequency:
 29179                           	opt stack 0
 29180                           tosu	equ	0xFFF
 29181                           tosh	equ	0xFFE
 29182                           tosl	equ	0xFFD
 29183                           pclath	equ	0xFFA
 29184                           tblptru	equ	0xFF8
 29185                           tblptrh	equ	0xFF7
 29186                           tblptrl	equ	0xFF6
 29187                           tablat	equ	0xFF5
 29188                           prodh	equ	0xFF4
 29189                           prodl	equ	0xFF3
 29190                           intcon	equ	0xFF2
 29191                           intcon2	equ	0xFF1
 29192                           intcon3	equ	0xFF0
 29193                           indf0	equ	0xFEF
 29194                           postinc0	equ	0xFEE
 29195                           fsr0h	equ	0xFEA
 29196                           fsr0l	equ	0xFE9
 29197                           wreg	equ	0xFE8
 29198                           postinc1	equ	0xFE6
 29199                           postdec1	equ	0xFE5
 29200                           plusw1	equ	0xFE3
 29201                           fsr1h	equ	0xFE2
 29202                           fsr1l	equ	0xFE1
 29203                           indf2	equ	0xFDF
 29204                           postinc2	equ	0xFDE
 29205                           postdec2	equ	0xFDD
 29206                           plusw2	equ	0xFDB
 29207                           fsr2h	equ	0xFDA
 29208                           fsr2l	equ	0xFD9
 29209                           status	equ	0xFD8
 29210                           
 29211 ;; *************** function _RADIO_SetBandwidth *****************
 29212 ;; Defined at:
 29213 ;;		line 1495 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 29214 ;; Parameters:    Size  Location     Type
 29215 ;;  bandwidth       1    wreg     enum E7002
 29216 ;; Auto vars:     Size  Location     Type
 29217 ;;  bandwidth       1    0[BANK0 ] enum E7002
 29218 ;; Return value:  Size  Location     Type
 29219 ;;                  1    wreg      void 
 29220 ;; Registers used:
 29221 ;;		wreg
 29222 ;; Tracked objects:
 29223 ;;		On entry : 0/0
 29224 ;;		On exit  : 0/0
 29225 ;;		Unchanged: 0/0
 29226 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29227 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29228 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29229 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29230 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29231 ;;Total ram usage:        1 bytes
 29232 ;; Hardware stack levels used:    1
 29233 ;; Hardware stack levels required when called:    7
 29234 ;; This function calls:
 29235 ;;		Nothing
 29236 ;; This function is called by:
 29237 ;;		_ConfigureRadio
 29238 ;; This function uses a non-reentrant model
 29239 ;;
 29240                           
 29241                           	psect	text141
 29242  009568                     __ptext141:
 29243                           	opt stack 0
 29244  009568                     _RADIO_SetBandwidth:
 29245                           	opt stack 19
 29246                           
 29247                           ; BSR set to: 0
 29248                           ;incstack = 0
 29249                           ;RADIO_SetBandwidth@bandwidth stored from wreg
 29250  009568  0100               	movlb	0	; () banked
 29251  00956A  6F60               	movwf	RADIO_SetBandwidth@bandwidth& (0+255),b
 29252                           
 29253                           ;radio_driver_SX1276.c: 1497: RadioConfiguration.bandWidth = bandwidth;
 29254  00956C  C060  F171         	movff	RADIO_SetBandwidth@bandwidth,_RadioConfiguration+26
 29255  009570  0012               	return		;funcret
 29256  009572                     __end_of_RADIO_SetBandwidth:
 29257                           	opt stack 0
 29258                           tosu	equ	0xFFF
 29259                           tosh	equ	0xFFE
 29260                           tosl	equ	0xFFD
 29261                           pclath	equ	0xFFA
 29262                           tblptru	equ	0xFF8
 29263                           tblptrh	equ	0xFF7
 29264                           tblptrl	equ	0xFF6
 29265                           tablat	equ	0xFF5
 29266                           prodh	equ	0xFF4
 29267                           prodl	equ	0xFF3
 29268                           intcon	equ	0xFF2
 29269                           intcon2	equ	0xFF1
 29270                           intcon3	equ	0xFF0
 29271                           indf0	equ	0xFEF
 29272                           postinc0	equ	0xFEE
 29273                           fsr0h	equ	0xFEA
 29274                           fsr0l	equ	0xFE9
 29275                           wreg	equ	0xFE8
 29276                           postinc1	equ	0xFE6
 29277                           postdec1	equ	0xFE5
 29278                           plusw1	equ	0xFE3
 29279                           fsr1h	equ	0xFE2
 29280                           fsr1l	equ	0xFE1
 29281                           indf2	equ	0xFDF
 29282                           postinc2	equ	0xFDE
 29283                           postdec2	equ	0xFDD
 29284                           plusw2	equ	0xFDB
 29285                           fsr2h	equ	0xFDA
 29286                           fsr2l	equ	0xFD9
 29287                           status	equ	0xFD8
 29288                           
 29289 ;; *************** function _RADIO_Transmit *****************
 29290 ;; Defined at:
 29291 ;;		line 786 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 29292 ;; Parameters:    Size  Location     Type
 29293 ;;  buffer          2   81[BANK0 ] PTR unsigned char 
 29294 ;;		 -> macBuffer(271), 
 29295 ;;  bufferLen       1   83[BANK0 ] unsigned char 
 29296 ;; Auto vars:     Size  Location     Type
 29297 ;;  i               1   97[BANK0 ] unsigned char 
 29298 ;;  regValue        1   96[BANK0 ] unsigned char 
 29299 ;; Return value:  Size  Location     Type
 29300 ;;                  2   81[BANK0 ] enum E7038
 29301 ;; Registers used:
 29302 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 29303 ;; Tracked objects:
 29304 ;;		On entry : 0/0
 29305 ;;		On exit  : 0/0
 29306 ;;		Unchanged: 0/0
 29307 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29308 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29309 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29310 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29311 ;;      Totals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29312 ;;Total ram usage:       17 bytes
 29313 ;; Hardware stack levels used:    1
 29314 ;; Hardware stack levels required when called:   12
 29315 ;; This function calls:
 29316 ;;		_HALSPICSAssert
 29317 ;;		_HALSPICSDeassert
 29318 ;;		_HALSPISend
 29319 ;;		_RADIO_RegisterRead
 29320 ;;		_RADIO_RegisterWrite
 29321 ;;		_RADIO_WriteConfiguration
 29322 ;;		_RADIO_WriteMode
 29323 ;;		_SwTimerSetTimeout
 29324 ;;		_SwTimerStart
 29325 ;;		_SwTimerStop
 29326 ;;		___lldiv
 29327 ;; This function is called by:
 29328 ;;		_LORAWAN_Join
 29329 ;;		_LORAWAN_Send
 29330 ;;		_AckRetransmissionCallback
 29331 ;;		_UnconfirmedTransmissionCallback
 29332 ;;		_LORAWAN_RxTimeout
 29333 ;; This function uses a non-reentrant model
 29334 ;;
 29335                           
 29336                           	psect	text142
 29337  004022                     __ptext142:
 29338                           	opt stack 0
 29339  004022                     _RADIO_Transmit:
 29340                           	opt stack 17
 29341                           
 29342                           ;radio_driver_SX1276.c: 788: uint8_t regValue;
 29343                           ;radio_driver_SX1276.c: 789: uint8_t i;
 29344                           ;radio_driver_SX1276.c: 791: if ((RadioConfiguration.flags & (1 << (2))) != 0)
 29345                           
 29346                           ;incstack = 0
 29347  004022  0101               	movlb	1	; () banked
 29348  004024  A57A               	btfss	(_RadioConfiguration+35)& (0+255),2,b
 29349  004026  D006               	goto	l272
 29350                           
 29351                           ; BSR set to: 1
 29352                           ;radio_driver_SX1276.c: 792: {
 29353                           ;radio_driver_SX1276.c: 793: return ERR_BUFFER_LOCKED;
 29354  004028  0E80               	movlw	128
 29355  00402A  0100               	movlb	0	; () banked
 29356  00402C  6FB2               	movwf	(?_RADIO_Transmit+1)& (0+255),b
 29357  00402E  0E03               	movlw	3
 29358  004030  6FB1               	movwf	?_RADIO_Transmit& (0+255),b
 29359                           
 29360                           ; BSR set to: 0
 29361  004032  0012               	return	
 29362  004034                     l272:
 29363                           
 29364                           ;radio_driver_SX1276.c: 794: }
 29365                           ;radio_driver_SX1276.c: 796: if ((RadioConfiguration.flags & ((1 << (0)) | (1 << (1)))) 
      +                          != 0)
 29366                           
 29367                           ; BSR set to: 0
 29368  004034  C17A  F0B4         	movff	_RadioConfiguration+35,??_RADIO_Transmit
 29369  004038  0E03               	movlw	3
 29370  00403A  0100               	movlb	0	; () banked
 29371  00403C  17B4               	andwf	??_RADIO_Transmit& (0+255),f,b
 29372  00403E  B4D8               	btfsc	status,2,c
 29373  004040  D005               	goto	l274
 29374                           
 29375                           ; BSR set to: 0
 29376                           ;radio_driver_SX1276.c: 797: {
 29377                           ;radio_driver_SX1276.c: 798: return ERR_RADIO_BUSY;
 29378  004042  0E80               	movlw	128
 29379  004044  6FB2               	movwf	(?_RADIO_Transmit+1)& (0+255),b
 29380  004046  0E04               	movlw	4
 29381  004048  6FB1               	movwf	?_RADIO_Transmit& (0+255),b
 29382                           
 29383                           ; BSR set to: 0
 29384  00404A  0012               	return	
 29385  00404C                     l274:
 29386                           
 29387                           ; BSR set to: 0
 29388                           ;radio_driver_SX1276.c: 799: }
 29389                           ;radio_driver_SX1276.c: 801: if ((MODULATION_FSK == RadioConfiguration.modulation) && (b
      +                          ufferLen > 64))
 29390                           
 29391                           ; BSR set to: 0
 29392  00404C  0101               	movlb	1	; () banked
 29393  00404E  516F               	movf	(_RadioConfiguration+24)& (0+255),w,b
 29394  004050  A4D8               	btfss	status,2,c
 29395  004052  D009               	goto	l275
 29396                           
 29397                           ; BSR set to: 1
 29398  004054  0E40               	movlw	64
 29399  004056  0100               	movlb	0	; () banked
 29400  004058  65B3               	cpfsgt	RADIO_Transmit@bufferLen& (0+255),b
 29401  00405A  D005               	goto	l275
 29402                           
 29403                           ; BSR set to: 0
 29404                           ;radio_driver_SX1276.c: 802: {
 29405                           ;radio_driver_SX1276.c: 803: return ERR_DATA_SIZE;
 29406  00405C  0E80               	movlw	128
 29407  00405E  6FB2               	movwf	(?_RADIO_Transmit+1)& (0+255),b
 29408  004060  0E02               	movlw	2
 29409  004062  6FB1               	movwf	?_RADIO_Transmit& (0+255),b
 29410                           
 29411                           ; BSR set to: 0
 29412  004064  0012               	return	
 29413  004066                     l275:
 29414                           
 29415                           ;radio_driver_SX1276.c: 804: }
 29416                           ;radio_driver_SX1276.c: 806: SwTimerStop(RadioConfiguration.timeOnAirTimerId);
 29417                           
 29418                           ; BSR set to: 0
 29419  004066  0101               	movlb	1	; () banked
 29420  004068  517E               	movf	(_RadioConfiguration+39)& (0+255),w,b
 29421  00406A  EC1B  F048         	call	_SwTimerStop
 29422                           
 29423                           ;radio_driver_SX1276.c: 810: RADIO_WriteConfiguration(4);
 29424  00406E  0E00               	movlw	0
 29425  004070  0100               	movlb	0	; () banked
 29426  004072  6FA7               	movwf	(RADIO_WriteConfiguration@symbolTimeout+1)& (0+255),b
 29427  004074  0E04               	movlw	4
 29428  004076  6FA6               	movwf	RADIO_WriteConfiguration@symbolTimeout& (0+255),b
 29429  004078  EC96  F00A         	call	_RADIO_WriteConfiguration	;wreg free
 29430                           
 29431                           ;radio_driver_SX1276.c: 812: if (MODULATION_LORA == RadioConfiguration.modulation)
 29432  00407C  0101               	movlb	1	; () banked
 29433  00407E  056F               	decf	(_RadioConfiguration+24)& (0+255),w,b
 29434  004080  A4D8               	btfss	status,2,c
 29435  004082  D027               	goto	l276
 29436                           
 29437                           ; BSR set to: 1
 29438                           ;radio_driver_SX1276.c: 813: {
 29439                           ;radio_driver_SX1276.c: 814: RADIO_RegisterWrite(0x22, bufferLen);
 29440  004084  C0B3  F062         	movff	RADIO_Transmit@bufferLen,RADIO_RegisterWrite@value
 29441  004088  0E22               	movlw	34
 29442  00408A  ECDE  F048         	call	_RADIO_RegisterWrite
 29443                           
 29444                           ;radio_driver_SX1276.c: 817: regValue = RADIO_RegisterRead(0x0A);
 29445  00408E  0E0A               	movlw	10
 29446  004090  EC07  F048         	call	_RADIO_RegisterRead
 29447  004094  0100               	movlb	0	; () banked
 29448  004096  6FC0               	movwf	RADIO_Transmit@regValue& (0+255),b
 29449                           
 29450                           ; BSR set to: 0
 29451                           ;radio_driver_SX1276.c: 818: regValue &= ~0x0F;
 29452  004098  0EF0               	movlw	240
 29453  00409A  17C0               	andwf	RADIO_Transmit@regValue& (0+255),f,b
 29454                           
 29455                           ; BSR set to: 0
 29456                           ;radio_driver_SX1276.c: 819: regValue |= 0x08;
 29457  00409C  87C0               	bsf	RADIO_Transmit@regValue& (0+255),3,b
 29458                           
 29459                           ; BSR set to: 0
 29460                           ;radio_driver_SX1276.c: 820: RADIO_RegisterWrite(0x0A, regValue);
 29461  00409E  C0C0  F062         	movff	RADIO_Transmit@regValue,RADIO_RegisterWrite@value
 29462  0040A2  0E0A               	movlw	10
 29463  0040A4  ECDE  F048         	call	_RADIO_RegisterWrite
 29464                           
 29465                           ;radio_driver_SX1276.c: 824: RADIO_RegisterWrite(0x40, 0x40);
 29466  0040A8  0E40               	movlw	64
 29467  0040AA  0100               	movlb	0	; () banked
 29468  0040AC  6F62               	movwf	RADIO_RegisterWrite@value& (0+255),b
 29469  0040AE  0E40               	movlw	64
 29470  0040B0  ECDE  F048         	call	_RADIO_RegisterWrite
 29471                           
 29472                           ;radio_driver_SX1276.c: 825: RADIO_RegisterWrite(0x41, 0x00);
 29473  0040B4  0E00               	movlw	0
 29474  0040B6  0100               	movlb	0	; () banked
 29475  0040B8  6F62               	movwf	RADIO_RegisterWrite@value& (0+255),b
 29476  0040BA  0E41               	movlw	65
 29477  0040BC  ECDE  F048         	call	_RADIO_RegisterWrite
 29478                           
 29479                           ;radio_driver_SX1276.c: 827: RADIO_WriteMode(MODE_STANDBY, RadioConfiguration.modulation
      +                          , 1);
 29480  0040C0  C16F  F065         	movff	_RadioConfiguration+24,RADIO_WriteMode@newModulation
 29481  0040C4  0E01               	movlw	1
 29482  0040C6  0100               	movlb	0	; () banked
 29483  0040C8  6F66               	movwf	RADIO_WriteMode@blocking& (0+255),b
 29484  0040CA  0E01               	movlw	1
 29485  0040CC  ECF4  F031         	call	_RADIO_WriteMode
 29486                           
 29487                           ;radio_driver_SX1276.c: 828: }
 29488  0040D0  D00C               	goto	l277
 29489  0040D2                     l276:
 29490                           
 29491                           ;radio_driver_SX1276.c: 829: else
 29492                           ;radio_driver_SX1276.c: 830: {
 29493                           ;radio_driver_SX1276.c: 832: RADIO_RegisterWrite(0x40, 0x00);
 29494  0040D2  0E00               	movlw	0
 29495  0040D4  0100               	movlb	0	; () banked
 29496  0040D6  6F62               	movwf	RADIO_RegisterWrite@value& (0+255),b
 29497  0040D8  0E40               	movlw	64
 29498  0040DA  ECDE  F048         	call	_RADIO_RegisterWrite
 29499                           
 29500                           ;radio_driver_SX1276.c: 833: RADIO_RegisterWrite(0x41, 0x00);
 29501  0040DE  0E00               	movlw	0
 29502  0040E0  0100               	movlb	0	; () banked
 29503  0040E2  6F62               	movwf	RADIO_RegisterWrite@value& (0+255),b
 29504  0040E4  0E41               	movlw	65
 29505  0040E6  ECDE  F048         	call	_RADIO_RegisterWrite
 29506  0040EA                     l277:
 29507                           
 29508                           ;radio_driver_SX1276.c: 834: }
 29509                           ;radio_driver_SX1276.c: 836: if (MODULATION_FSK == RadioConfiguration.modulation)
 29510  0040EA  0101               	movlb	1	; () banked
 29511  0040EC  516F               	movf	(_RadioConfiguration+24)& (0+255),w,b
 29512  0040EE  A4D8               	btfss	status,2,c
 29513  0040F0  D005               	goto	l278
 29514                           
 29515                           ; BSR set to: 1
 29516                           ;radio_driver_SX1276.c: 837: {
 29517                           ;radio_driver_SX1276.c: 839: RADIO_RegisterWrite(0x00, bufferLen);
 29518  0040F2  C0B3  F062         	movff	RADIO_Transmit@bufferLen,RADIO_RegisterWrite@value
 29519  0040F6  0E00               	movlw	0
 29520  0040F8  ECDE  F048         	call	_RADIO_RegisterWrite
 29521  0040FC                     l278:
 29522                           
 29523                           ;radio_driver_SX1276.c: 840: }
 29524                           ;radio_driver_SX1276.c: 842: HALSPICSAssert();
 29525  0040FC  ECEF  F04A         	call	_HALSPICSAssert	;wreg free
 29526                           
 29527                           ;radio_driver_SX1276.c: 843: HALSPISend(0x80 | 0x00);
 29528  004100  0E80               	movlw	128
 29529  004102  EC47  F04A         	call	_HALSPISend
 29530                           
 29531                           ;radio_driver_SX1276.c: 845: for (i = 0; i < bufferLen; i++)
 29532  004106  0E00               	movlw	0
 29533  004108  0100               	movlb	0	; () banked
 29534  00410A  6FC1               	movwf	RADIO_Transmit@i& (0+255),b
 29535  00410C  D00D               	goto	l279
 29536  00410E                     
 29537                           ; BSR set to: 0
 29538                           ;radio_driver_SX1276.c: 846: {
 29539                           ;radio_driver_SX1276.c: 847: HALSPISend(buffer[i]);
 29540                           
 29541                           ; BSR set to: 0
 29542  00410E  51C1               	movf	RADIO_Transmit@i& (0+255),w,b
 29543  004110  0D01               	mullw	1
 29544  004112  50F3               	movf	prodl,w,c
 29545  004114  25B1               	addwf	RADIO_Transmit@buffer& (0+255),w,b
 29546  004116  6ED9               	movwf	fsr2l,c
 29547  004118  50F4               	movf	prodh,w,c
 29548  00411A  21B2               	addwfc	(RADIO_Transmit@buffer+1)& (0+255),w,b
 29549  00411C  6EDA               	movwf	fsr2h,c
 29550  00411E  50DF               	movf	indf2,w,c
 29551  004120  EC47  F04A         	call	_HALSPISend
 29552  004124  0100               	movlb	0	; () banked
 29553  004126  2BC1               	incf	RADIO_Transmit@i& (0+255),f,b
 29554  004128                     l279:
 29555                           
 29556                           ; BSR set to: 0
 29557                           
 29558                           ; BSR set to: 0
 29559  004128  51B3               	movf	RADIO_Transmit@bufferLen& (0+255),w,b
 29560  00412A  5DC1               	subwf	RADIO_Transmit@i& (0+255),w,b
 29561  00412C  A0D8               	btfss	status,0,c
 29562  00412E  D7EF               	goto	l280
 29563                           
 29564                           ; BSR set to: 0
 29565                           ;radio_driver_SX1276.c: 848: }
 29566                           ;radio_driver_SX1276.c: 849: HALSPICSDeassert();
 29567                           
 29568                           ; BSR set to: 0
 29569  004130  ECED  F04A         	call	_HALSPICSDeassert	;wreg free
 29570                           
 29571                           ;radio_driver_SX1276.c: 851: RadioConfiguration.flags |= (1 << (0));
 29572  004134  0101               	movlb	1	; () banked
 29573  004136  817A               	bsf	(_RadioConfiguration+35)& (0+255),0,b
 29574                           
 29575                           ; BSR set to: 1
 29576                           ;radio_driver_SX1276.c: 852: RadioConfiguration.flags &= ~((1 << (4)) | (1 << (3)));
 29577  004138  0EE7               	movlw	231
 29578  00413A  177A               	andwf	(_RadioConfiguration+35)& (0+255),f,b
 29579                           
 29580                           ; BSR set to: 1
 29581                           ;radio_driver_SX1276.c: 857: RADIO_WriteMode(MODE_TX, RadioConfiguration.modulation, 0);
 29582  00413C  C16F  F065         	movff	_RadioConfiguration+24,RADIO_WriteMode@newModulation
 29583  004140  0E00               	movlw	0
 29584  004142  0100               	movlb	0	; () banked
 29585  004144  6F66               	movwf	RADIO_WriteMode@blocking& (0+255),b
 29586  004146  0E03               	movlw	3
 29587  004148  ECF4  F031         	call	_RADIO_WriteMode
 29588                           
 29589                           ; BSR set to: 0
 29590                           
 29591                           ;radio_driver_SX1276.c: 862: SwTimerSetTimeout(RadioConfiguration.timeOnAirTimerId, ((((
      +                          uint32_t)20000)) < 0x000FFFFFUL ? ( (((uint32_t)(((uint32_t)20000))) << (12)) / 125UL ) 
      +                          : ( (((uint32_t)(((uint32_t)20000))) / 125UL) << (12) ) ));
 29592  00414C  0E00               	movlw	0
 29593  00414E  0100               	movlb	0	; () banked
 29594  004150  6FB8               	movwf	_RADIO_Transmit$517& (0+255),b
 29595  004152  0E00               	movlw	0
 29596  004154  6FB9               	movwf	(_RADIO_Transmit$517+1)& (0+255),b
 29597  004156  0E0A               	movlw	10
 29598  004158  6FBA               	movwf	(_RADIO_Transmit$517+2)& (0+255),b
 29599  00415A  0E00               	movlw	0
 29600  00415C  6FBB               	movwf	(_RADIO_Transmit$517+3)& (0+255),b
 29601                           
 29602                           ; BSR set to: 0
 29603                           
 29604                           ; BSR set to: 0
 29605  00415E  C0B8  F06D         	movff	_RADIO_Transmit$517,SwTimerSetTimeout@timeout
 29606  004162  C0B9  F06E         	movff	_RADIO_Transmit$517+1,SwTimerSetTimeout@timeout+1
 29607  004166  C0BA  F06F         	movff	_RADIO_Transmit$517+2,SwTimerSetTimeout@timeout+2
 29608  00416A  C0BB  F070         	movff	_RADIO_Transmit$517+3,SwTimerSetTimeout@timeout+3
 29609  00416E  0101               	movlb	1	; () banked
 29610  004170  517E               	movf	(_RadioConfiguration+39)& (0+255),w,b
 29611  004172  EC27  F045         	call	_SwTimerSetTimeout
 29612                           
 29613                           ;radio_driver_SX1276.c: 863: SwTimerStart(RadioConfiguration.timeOnAirTimerId);
 29614  004176  0101               	movlb	1	; () banked
 29615  004178  517E               	movf	(_RadioConfiguration+39)& (0+255),w,b
 29616  00417A  ECDA  F03A         	call	_SwTimerStart
 29617                           
 29618                           ;radio_driver_SX1276.c: 865: if (0 != RadioConfiguration.watchdogTimerTimeout)
 29619  00417E  0101               	movlb	1	; () banked
 29620  004180  5181               	movf	(_RadioConfiguration+42)& (0+255),w,b
 29621  004182  1182               	iorwf	(_RadioConfiguration+43)& (0+255),w,b
 29622  004184  1183               	iorwf	(_RadioConfiguration+44)& (0+255),w,b
 29623  004186  1184               	iorwf	(_RadioConfiguration+45)& (0+255),w,b
 29624  004188  B4D8               	btfsc	status,2,c
 29625  00418A  D061               	goto	l286
 29626                           
 29627                           ; BSR set to: 1
 29628                           ;radio_driver_SX1276.c: 866: {
 29629                           ;radio_driver_SX1276.c: 867: SwTimerSetTimeout(RadioConfiguration.watchdogTimerId, ((Rad
      +                          ioConfiguration.watchdogTimerTimeout) < 0x000FFFFFUL ? ( (((uint32_t)(RadioConfiguration
      +                          .watchdogTimerTimeout)) << (12)) / 125UL ) : ( (((uint32_t)(RadioConfiguration.watchdogT
      +                          imerTimeout)) /
 29630  00418C  5184               	movf	(_RadioConfiguration+45)& (0+255),w,b
 29631  00418E  E107               	bnz	u10040
 29632  004190  2981               	incf	(_RadioConfiguration+42)& (0+255),w,b
 29633  004192  0EFF               	movlw	255
 29634  004194  5982               	subwfb	(_RadioConfiguration+43)& (0+255),w,b
 29635  004196  0E0F               	movlw	15
 29636  004198  5983               	subwfb	(_RadioConfiguration+44)& (0+255),w,b
 29637  00419A  A0D8               	btfss	status,0,c
 29638  00419C  D01D               	goto	l288
 29639  00419E                     u10040:
 29640                           
 29641                           ; BSR set to: 1
 29642  00419E  C181  F060         	movff	_RadioConfiguration+42,___lldiv@dividend
 29643  0041A2  C182  F061         	movff	_RadioConfiguration+43,___lldiv@dividend+1
 29644  0041A6  C183  F062         	movff	_RadioConfiguration+44,___lldiv@dividend+2
 29645  0041AA  C184  F063         	movff	_RadioConfiguration+45,___lldiv@dividend+3
 29646  0041AE  0E7D               	movlw	125
 29647  0041B0  0100               	movlb	0	; () banked
 29648  0041B2  6F64               	movwf	___lldiv@divisor& (0+255),b
 29649  0041B4  0E00               	movlw	0
 29650  0041B6  6F65               	movwf	(___lldiv@divisor+1)& (0+255),b
 29651  0041B8  0E00               	movlw	0
 29652  0041BA  6F66               	movwf	(___lldiv@divisor+2)& (0+255),b
 29653  0041BC  0E00               	movlw	0
 29654  0041BE  6F67               	movwf	(___lldiv@divisor+3)& (0+255),b
 29655  0041C0  EC0A  F03D         	call	___lldiv	;wreg free
 29656  0041C4  0E0C               	movlw	12
 29657  0041C6                     u10055:
 29658  0041C6  90D8               	bcf	status,0,c
 29659  0041C8  0100               	movlb	0	; () banked
 29660  0041CA  3760               	rlcf	?___lldiv& (0+255),f,b
 29661  0041CC  3761               	rlcf	(?___lldiv+1)& (0+255),f,b
 29662  0041CE  3762               	rlcf	(?___lldiv+2)& (0+255),f,b
 29663  0041D0  3763               	rlcf	(?___lldiv+3)& (0+255),f,b
 29664  0041D2  2EE8               	decfsz	wreg,f,c
 29665  0041D4  D7F8               	goto	u10055
 29666  0041D6  D023               	goto	L19
 29667  0041D8                     l288:
 29668                           
 29669                           ; BSR set to: 0
 29670  0041D8  C181  F0B4         	movff	_RadioConfiguration+42,??_RADIO_Transmit
 29671  0041DC  C182  F0B5         	movff	_RadioConfiguration+43,??_RADIO_Transmit+1
 29672  0041E0  C183  F0B6         	movff	_RadioConfiguration+44,??_RADIO_Transmit+2
 29673  0041E4  C184  F0B7         	movff	_RadioConfiguration+45,??_RADIO_Transmit+3
 29674  0041E8  0E0C               	movlw	12
 29675  0041EA                     u10065:
 29676  0041EA  90D8               	bcf	status,0,c
 29677  0041EC  0100               	movlb	0	; () banked
 29678  0041EE  37B4               	rlcf	??_RADIO_Transmit& (0+255),f,b
 29679  0041F0  37B5               	rlcf	(??_RADIO_Transmit+1)& (0+255),f,b
 29680  0041F2  37B6               	rlcf	(??_RADIO_Transmit+2)& (0+255),f,b
 29681  0041F4  37B7               	rlcf	(??_RADIO_Transmit+3)& (0+255),f,b
 29682  0041F6  2EE8               	decfsz	wreg,f,c
 29683  0041F8  D7F8               	goto	u10065
 29684  0041FA  C0B4  F060         	movff	??_RADIO_Transmit,___lldiv@dividend
 29685  0041FE  C0B5  F061         	movff	??_RADIO_Transmit+1,___lldiv@dividend+1
 29686  004202  C0B6  F062         	movff	??_RADIO_Transmit+2,___lldiv@dividend+2
 29687  004206  C0B7  F063         	movff	??_RADIO_Transmit+3,___lldiv@dividend+3
 29688  00420A  0E7D               	movlw	125
 29689  00420C  6F64               	movwf	___lldiv@divisor& (0+255),b
 29690  00420E  0E00               	movlw	0
 29691  004210  6F65               	movwf	(___lldiv@divisor+1)& (0+255),b
 29692  004212  0E00               	movlw	0
 29693  004214  6F66               	movwf	(___lldiv@divisor+2)& (0+255),b
 29694  004216  0E00               	movlw	0
 29695  004218  6F67               	movwf	(___lldiv@divisor+3)& (0+255),b
 29696  00421A  EC0A  F03D         	call	___lldiv	;wreg free
 29697  00421E                     L19:
 29698  00421E  C060  F0BC         	movff	?___lldiv,_RADIO_Transmit$518
 29699  004222  C061  F0BD         	movff	?___lldiv+1,_RADIO_Transmit$518+1
 29700  004226  C062  F0BE         	movff	?___lldiv+2,_RADIO_Transmit$518+2
 29701  00422A  C063  F0BF         	movff	?___lldiv+3,_RADIO_Transmit$518+3
 29702  00422E  C0BC  F06D         	movff	_RADIO_Transmit$518,SwTimerSetTimeout@timeout
 29703  004232  C0BD  F06E         	movff	_RADIO_Transmit$518+1,SwTimerSetTimeout@timeout+1
 29704  004236  C0BE  F06F         	movff	_RADIO_Transmit$518+2,SwTimerSetTimeout@timeout+2
 29705  00423A  C0BF  F070         	movff	_RADIO_Transmit$518+3,SwTimerSetTimeout@timeout+3
 29706  00423E  0101               	movlb	1	; () banked
 29707  004240  5180               	movf	(_RadioConfiguration+41)& (0+255),w,b
 29708  004242  EC27  F045         	call	_SwTimerSetTimeout
 29709                           
 29710                           ;radio_driver_SX1276.c: 868: SwTimerStart(RadioConfiguration.watchdogTimerId);
 29711  004246  0101               	movlb	1	; () banked
 29712  004248  5180               	movf	(_RadioConfiguration+41)& (0+255),w,b
 29713  00424A  ECDA  F03A         	call	_SwTimerStart
 29714  00424E                     l286:
 29715                           
 29716                           ;radio_driver_SX1276.c: 869: }
 29717                           ;radio_driver_SX1276.c: 871: return ERR_NONE;
 29718  00424E  0E00               	movlw	0
 29719  004250  0100               	movlb	0	; () banked
 29720  004252  6FB2               	movwf	(?_RADIO_Transmit+1)& (0+255),b
 29721  004254  0E00               	movlw	0
 29722  004256  6FB1               	movwf	?_RADIO_Transmit& (0+255),b
 29723  004258  0012               	return	
 29724  00425A                     __end_of_RADIO_Transmit:
 29725                           	opt stack 0
 29726                           tosu	equ	0xFFF
 29727                           tosh	equ	0xFFE
 29728                           tosl	equ	0xFFD
 29729                           pclath	equ	0xFFA
 29730                           tblptru	equ	0xFF8
 29731                           tblptrh	equ	0xFF7
 29732                           tblptrl	equ	0xFF6
 29733                           tablat	equ	0xFF5
 29734                           prodh	equ	0xFF4
 29735                           prodl	equ	0xFF3
 29736                           intcon	equ	0xFF2
 29737                           intcon2	equ	0xFF1
 29738                           intcon3	equ	0xFF0
 29739                           indf0	equ	0xFEF
 29740                           postinc0	equ	0xFEE
 29741                           fsr0h	equ	0xFEA
 29742                           fsr0l	equ	0xFE9
 29743                           wreg	equ	0xFE8
 29744                           postinc1	equ	0xFE6
 29745                           postdec1	equ	0xFE5
 29746                           plusw1	equ	0xFE3
 29747                           fsr1h	equ	0xFE2
 29748                           fsr1l	equ	0xFE1
 29749                           indf2	equ	0xFDF
 29750                           postinc2	equ	0xFDE
 29751                           postdec2	equ	0xFDD
 29752                           plusw2	equ	0xFDB
 29753                           fsr2h	equ	0xFDA
 29754                           fsr2l	equ	0xFD9
 29755                           status	equ	0xFD8
 29756                           
 29757 ;; *************** function _RADIO_WriteConfiguration *****************
 29758 ;; Defined at:
 29759 ;;		line 533 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 29760 ;; Parameters:    Size  Location     Type
 29761 ;;  symbolTimeou    2   70[BANK0 ] unsigned int 
 29762 ;; Auto vars:     Size  Location     Type
 29763 ;;  tempValue       4   76[BANK0 ] unsigned long 
 29764 ;;  regValue        1   80[BANK0 ] unsigned char 
 29765 ;;  i               1   75[BANK0 ] unsigned char 
 29766 ;; Return value:  Size  Location     Type
 29767 ;;                  1    wreg      void 
 29768 ;; Registers used:
 29769 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 29770 ;; Tracked objects:
 29771 ;;		On entry : 0/0
 29772 ;;		On exit  : 0/0
 29773 ;;		Unchanged: 0/0
 29774 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29775 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29776 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29777 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29778 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29779 ;;Total ram usage:       11 bytes
 29780 ;; Hardware stack levels used:    1
 29781 ;; Hardware stack levels required when called:   11
 29782 ;; This function calls:
 29783 ;;		_RADIO_RegisterRead
 29784 ;;		_RADIO_RegisterWrite
 29785 ;;		_RADIO_WriteFSKBitRate
 29786 ;;		_RADIO_WriteFSKFrequencyDeviation
 29787 ;;		_RADIO_WriteFrequency
 29788 ;;		_RADIO_WriteMode
 29789 ;;		_RADIO_WritePower
 29790 ;;		___lmul
 29791 ;; This function is called by:
 29792 ;;		_RADIO_Transmit
 29793 ;;		_RADIO_ReceiveStart
 29794 ;;		_RADIO_TransmitCW
 29795 ;; This function uses a non-reentrant model
 29796 ;;
 29797                           
 29798                           	psect	text143
 29799  00152C                     __ptext143:
 29800                           	opt stack 0
 29801  00152C                     _RADIO_WriteConfiguration:
 29802                           	opt stack 17
 29803                           
 29804                           ;radio_driver_SX1276.c: 535: uint32_t tempValue;
 29805                           ;radio_driver_SX1276.c: 536: uint8_t regValue;
 29806                           ;radio_driver_SX1276.c: 537: uint8_t i;
 29807                           ;radio_driver_SX1276.c: 540: RADIO_WriteMode(MODE_SLEEP, RadioConfiguration.modulation, 
      +                          0);
 29808                           
 29809                           ; BSR set to: 0
 29810                           ;incstack = 0
 29811  00152C  C16F  F065         	movff	_RadioConfiguration+24,RADIO_WriteMode@newModulation
 29812  001530  0E00               	movlw	0
 29813  001532  0100               	movlb	0	; () banked
 29814  001534  6F66               	movwf	RADIO_WriteMode@blocking& (0+255),b
 29815  001536  0E00               	movlw	0
 29816  001538  ECF4  F031         	call	_RADIO_WriteMode
 29817                           
 29818                           ;radio_driver_SX1276.c: 541: RADIO_WriteFrequency(RadioConfiguration.frequency);
 29819  00153C  C157  F06D         	movff	_RadioConfiguration,RADIO_WriteFrequency@frequency
 29820  001540  C158  F06E         	movff	_RadioConfiguration+1,RADIO_WriteFrequency@frequency+1
 29821  001544  C159  F06F         	movff	_RadioConfiguration+2,RADIO_WriteFrequency@frequency+2
 29822  001548  C15A  F070         	movff	_RadioConfiguration+3,RADIO_WriteFrequency@frequency+3
 29823  00154C  ECE2  F033         	call	_RADIO_WriteFrequency	;wreg free
 29824                           
 29825                           ;radio_driver_SX1276.c: 542: RADIO_WritePower(RadioConfiguration.outputPower);
 29826  001550  0101               	movlb	1	; () banked
 29827  001552  5172               	movf	(_RadioConfiguration+27)& (0+255),w,b
 29828  001554  EC6A  F033         	call	_RADIO_WritePower
 29829                           
 29830                           ;radio_driver_SX1276.c: 544: if (MODULATION_LORA == RadioConfiguration.modulation)
 29831  001558  0101               	movlb	1	; () banked
 29832  00155A  056F               	decf	(_RadioConfiguration+24)& (0+255),w,b
 29833  00155C  A4D8               	btfss	status,2,c
 29834  00155E  D1ED               	goto	l228
 29835                           
 29836                           ; BSR set to: 1
 29837                           ;radio_driver_SX1276.c: 545: {
 29838                           ;radio_driver_SX1276.c: 546: RADIO_RegisterWrite(0x39, RadioConfiguration.syncWordLoRa);
 29839  001560  C165  F062         	movff	_RadioConfiguration+14,RADIO_RegisterWrite@value
 29840  001564  0E39               	movlw	57
 29841  001566  ECDE  F048         	call	_RADIO_RegisterWrite
 29842                           
 29843                           ;radio_driver_SX1276.c: 548: RADIO_RegisterWrite(0x1D,
 29844                           ;radio_driver_SX1276.c: 549: (RadioConfiguration.bandWidth << (4)) |
 29845                           ;radio_driver_SX1276.c: 550: (RadioConfiguration.errorCodingRate << (1)) |
 29846                           ;radio_driver_SX1276.c: 551: (RadioConfiguration.implicitHeaderMode & 0x01));
 29847  00156A  C179  F0A8         	movff	_RadioConfiguration+34,??_RADIO_WriteConfiguration
 29848  00156E  0E01               	movlw	1
 29849  001570  0100               	movlb	0	; () banked
 29850  001572  17A8               	andwf	??_RADIO_WriteConfiguration& (0+255),f,b
 29851  001574  0101               	movlb	1	; () banked
 29852  001576  90D8               	bcf	status,0,c
 29853  001578  3578               	rlcf	(_RadioConfiguration+33)& (0+255),w,b
 29854  00157A  0100               	movlb	0	; () banked
 29855  00157C  6FA9               	movwf	(??_RADIO_WriteConfiguration+1)& (0+255),b
 29856  00157E  0101               	movlb	1	; () banked
 29857  001580  3971               	swapf	(_RadioConfiguration+26)& (0+255),w,b
 29858  001582  0BF0               	andlw	240
 29859  001584  0100               	movlb	0	; () banked
 29860  001586  11A9               	iorwf	(??_RADIO_WriteConfiguration+1)& (0+255),w,b
 29861  001588  11A8               	iorwf	??_RADIO_WriteConfiguration& (0+255),w,b
 29862  00158A  6F62               	movwf	RADIO_RegisterWrite@value& (0+255),b
 29863  00158C  0E1D               	movlw	29
 29864  00158E  ECDE  F048         	call	_RADIO_RegisterWrite
 29865                           
 29866                           ;radio_driver_SX1276.c: 553: RADIO_RegisterWrite(0x1E,
 29867                           ;radio_driver_SX1276.c: 554: (RadioConfiguration.dataRate << (4)) |
 29868                           ;radio_driver_SX1276.c: 555: ((RadioConfiguration.crcOn & 0x01) << (2)) |
 29869                           ;radio_driver_SX1276.c: 556: ((symbolTimeout & 0x0300) >> (8)));
 29870  001592  C0A6  F0A8         	movff	RADIO_WriteConfiguration@symbolTimeout,??_RADIO_WriteConfiguration
 29871  001596  C0A7  F0A9         	movff	RADIO_WriteConfiguration@symbolTimeout+1,??_RADIO_WriteConfiguration+1
 29872  00159A  C0A9  F0A8         	movff	??_RADIO_WriteConfiguration+1,??_RADIO_WriteConfiguration
 29873  00159E  0100               	movlb	0	; () banked
 29874  0015A0  6BA9               	clrf	(??_RADIO_WriteConfiguration+1)& (0+255),b
 29875  0015A2  0E03               	movlw	3
 29876  0015A4  17A8               	andwf	??_RADIO_WriteConfiguration& (0+255),f,b
 29877  0015A6  C173  F0AA         	movff	_RadioConfiguration+28,??_RADIO_WriteConfiguration+2
 29878  0015AA  0E01               	movlw	1
 29879  0015AC  17AA               	andwf	(??_RADIO_WriteConfiguration+2)& (0+255),f,b
 29880  0015AE  90D8               	bcf	status,0,c
 29881  0015B0  37AA               	rlcf	(??_RADIO_WriteConfiguration+2)& (0+255),f,b
 29882  0015B2  90D8               	bcf	status,0,c
 29883  0015B4  37AA               	rlcf	(??_RADIO_WriteConfiguration+2)& (0+255),f,b
 29884  0015B6  0101               	movlb	1	; () banked
 29885  0015B8  3970               	swapf	(_RadioConfiguration+25)& (0+255),w,b
 29886  0015BA  0BF0               	andlw	240
 29887  0015BC  0100               	movlb	0	; () banked
 29888  0015BE  11AA               	iorwf	(??_RADIO_WriteConfiguration+2)& (0+255),w,b
 29889  0015C0  11A8               	iorwf	??_RADIO_WriteConfiguration& (0+255),w,b
 29890  0015C2  6F62               	movwf	RADIO_RegisterWrite@value& (0+255),b
 29891  0015C4  0E1E               	movlw	30
 29892  0015C6  ECDE  F048         	call	_RADIO_RegisterWrite
 29893                           
 29894                           ;radio_driver_SX1276.c: 560: if (0 != RadioConfiguration.frequencyHopPeriod)
 29895  0015CA  0101               	movlb	1	; () banked
 29896  0015CC  5175               	movf	(_RadioConfiguration+30)& (0+255),w,b
 29897  0015CE  1176               	iorwf	(_RadioConfiguration+31)& (0+255),w,b
 29898  0015D0  B4D8               	btfsc	status,2,c
 29899  0015D2  D06F               	goto	l229
 29900                           
 29901                           ; BSR set to: 1
 29902                           ;radio_driver_SX1276.c: 561: {
 29903                           ;radio_driver_SX1276.c: 562: tempValue = RadioConfiguration.frequencyHopPeriod;
 29904  0015D4  C175  F0AC         	movff	_RadioConfiguration+30,RADIO_WriteConfiguration@tempValue
 29905  0015D8  C176  F0AD         	movff	_RadioConfiguration+31,RADIO_WriteConfiguration@tempValue+1
 29906  0015DC  0100               	movlb	0	; () banked
 29907  0015DE  6BAE               	clrf	(RADIO_WriteConfiguration@tempValue+2)& (0+255),b
 29908  0015E0  6BAF               	clrf	(RADIO_WriteConfiguration@tempValue+3)& (0+255),b
 29909                           
 29910                           ;radio_driver_SX1276.c: 564: switch (RadioConfiguration.bandWidth)
 29911  0015E2  D04E               	goto	l230
 29912  0015E4                     
 29913                           ;radio_driver_SX1276.c: 567: tempValue *= 125;
 29914                           
 29915                           ; BSR set to: 0
 29916  0015E4  C0AC  F09A         	movff	RADIO_WriteConfiguration@tempValue,___lmul@multiplier
 29917  0015E8  C0AD  F09B         	movff	RADIO_WriteConfiguration@tempValue+1,___lmul@multiplier+1
 29918  0015EC  C0AE  F09C         	movff	RADIO_WriteConfiguration@tempValue+2,___lmul@multiplier+2
 29919  0015F0  C0AF  F09D         	movff	RADIO_WriteConfiguration@tempValue+3,___lmul@multiplier+3
 29920  0015F4  0E7D               	movlw	125
 29921  0015F6  0100               	movlb	0	; () banked
 29922  0015F8  6F9E               	movwf	___lmul@multiplicand& (0+255),b
 29923  0015FA  0E00               	movlw	0
 29924  0015FC  6F9F               	movwf	(___lmul@multiplicand+1)& (0+255),b
 29925  0015FE  0E00               	movlw	0
 29926  001600  6FA0               	movwf	(___lmul@multiplicand+2)& (0+255),b
 29927  001602  0E00               	movlw	0
 29928  001604  6FA1               	movwf	(___lmul@multiplicand+3)& (0+255),b
 29929  001606  EC73  F042         	call	___lmul	;wreg free
 29930  00160A  D027               	goto	L21
 29931  00160C                     
 29932                           ;radio_driver_SX1276.c: 570: tempValue *= 250;
 29933  00160C  C0AC  F09A         	movff	RADIO_WriteConfiguration@tempValue,___lmul@multiplier
 29934  001610  C0AD  F09B         	movff	RADIO_WriteConfiguration@tempValue+1,___lmul@multiplier+1
 29935  001614  C0AE  F09C         	movff	RADIO_WriteConfiguration@tempValue+2,___lmul@multiplier+2
 29936  001618  C0AF  F09D         	movff	RADIO_WriteConfiguration@tempValue+3,___lmul@multiplier+3
 29937  00161C  0EFA               	movlw	250
 29938  00161E  0100               	movlb	0	; () banked
 29939  001620  6F9E               	movwf	___lmul@multiplicand& (0+255),b
 29940  001622  0E00               	movlw	0
 29941  001624  6F9F               	movwf	(___lmul@multiplicand+1)& (0+255),b
 29942  001626  0E00               	movlw	0
 29943  001628  6FA0               	movwf	(___lmul@multiplicand+2)& (0+255),b
 29944  00162A  0E00               	movlw	0
 29945  00162C  6FA1               	movwf	(___lmul@multiplicand+3)& (0+255),b
 29946  00162E  EC73  F042         	call	___lmul	;wreg free
 29947  001632  D013               	goto	L21
 29948  001634                     
 29949                           ;radio_driver_SX1276.c: 573: tempValue *= 500;
 29950  001634  C0AC  F09A         	movff	RADIO_WriteConfiguration@tempValue,___lmul@multiplier
 29951  001638  C0AD  F09B         	movff	RADIO_WriteConfiguration@tempValue+1,___lmul@multiplier+1
 29952  00163C  C0AE  F09C         	movff	RADIO_WriteConfiguration@tempValue+2,___lmul@multiplier+2
 29953  001640  C0AF  F09D         	movff	RADIO_WriteConfiguration@tempValue+3,___lmul@multiplier+3
 29954  001644  0EF4               	movlw	244
 29955  001646  0100               	movlb	0	; () banked
 29956  001648  6F9E               	movwf	___lmul@multiplicand& (0+255),b
 29957  00164A  0E01               	movlw	1
 29958  00164C  6F9F               	movwf	(___lmul@multiplicand+1)& (0+255),b
 29959  00164E  0E00               	movlw	0
 29960  001650  6FA0               	movwf	(___lmul@multiplicand+2)& (0+255),b
 29961  001652  0E00               	movlw	0
 29962  001654  6FA1               	movwf	(___lmul@multiplicand+3)& (0+255),b
 29963  001656  EC73  F042         	call	___lmul	;wreg free
 29964  00165A                     L21:
 29965  00165A  C09A  F0AC         	movff	?___lmul,RADIO_WriteConfiguration@tempValue
 29966  00165E  C09B  F0AD         	movff	?___lmul+1,RADIO_WriteConfiguration@tempValue+1
 29967  001662  C09C  F0AE         	movff	?___lmul+2,RADIO_WriteConfiguration@tempValue+2
 29968  001666  C09D  F0AF         	movff	?___lmul+3,RADIO_WriteConfiguration@tempValue+3
 29969                           
 29970                           ;radio_driver_SX1276.c: 574: break;
 29971  00166A  D016               	goto	l232
 29972  00166C                     
 29973                           ;radio_driver_SX1276.c: 577: tempValue = 0;
 29974  00166C  0E00               	movlw	0
 29975  00166E  0100               	movlb	0	; () banked
 29976  001670  6FAC               	movwf	RADIO_WriteConfiguration@tempValue& (0+255),b
 29977  001672  0E00               	movlw	0
 29978  001674  6FAD               	movwf	(RADIO_WriteConfiguration@tempValue+1)& (0+255),b
 29979  001676  0E00               	movlw	0
 29980  001678  6FAE               	movwf	(RADIO_WriteConfiguration@tempValue+2)& (0+255),b
 29981  00167A  0E00               	movlw	0
 29982  00167C  6FAF               	movwf	(RADIO_WriteConfiguration@tempValue+3)& (0+255),b
 29983                           
 29984                           ; BSR set to: 0
 29985                           ;radio_driver_SX1276.c: 579: }
 29986                           
 29987                           ;radio_driver_SX1276.c: 578: break;
 29988  00167E  D00C               	goto	l232
 29989  001680                     l230:
 29990                           
 29991                           ; BSR set to: 0
 29992                           
 29993                           ; BSR set to: 0
 29994  001680  0101               	movlb	1	; () banked
 29995  001682  5171               	movf	(_RadioConfiguration+26)& (0+255),w,b
 29996                           
 29997                           ; Switch size 1, requested type "space"
 29998                           ; Number of cases is 3, Range of values is 7 to 9
 29999                           ; switch strategies available:
 30000                           ; Name         Instructions Cycles
 30001                           ; simple_byte           10     6 (average)
 30002                           ;	Chosen strategy is simple_byte
 30003  001684  0A07               	xorlw	7	; case 7
 30004  001686  B4D8               	btfsc	status,2,c
 30005  001688  D7AD               	goto	l231
 30006  00168A  0A0F               	xorlw	15	; case 8
 30007  00168C  B4D8               	btfsc	status,2,c
 30008  00168E  D7BE               	goto	l233
 30009  001690  0A01               	xorlw	1	; case 9
 30010  001692  B4D8               	btfsc	status,2,c
 30011  001694  D7CF               	goto	l234
 30012  001696  D7EA               	goto	l235
 30013  001698                     l232:
 30014                           
 30015                           ;radio_driver_SX1276.c: 581: tempValue >>= RadioConfiguration.dataRate;
 30016                           
 30017                           ; BSR set to: 1
 30018  001698  0101               	movlb	1	; () banked
 30019  00169A  2970               	incf	(_RadioConfiguration+25)& (0+255),w,b
 30020  00169C  0100               	movlb	0	; () banked
 30021  00169E  6FA8               	movwf	??_RADIO_WriteConfiguration& (0+255),b
 30022  0016A0  D005               	goto	u8530
 30023  0016A2                     u8535:
 30024  0016A2  90D8               	bcf	status,0,c
 30025  0016A4  33AF               	rrcf	(RADIO_WriteConfiguration@tempValue+3)& (0+255),f,b
 30026  0016A6  33AE               	rrcf	(RADIO_WriteConfiguration@tempValue+2)& (0+255),f,b
 30027  0016A8  33AD               	rrcf	(RADIO_WriteConfiguration@tempValue+1)& (0+255),f,b
 30028  0016AA  33AC               	rrcf	RADIO_WriteConfiguration@tempValue& (0+255),f,b
 30029  0016AC                     u8530:
 30030  0016AC  2FA8               	decfsz	??_RADIO_WriteConfiguration& (0+255),f,b
 30031  0016AE  D7F9               	goto	u8535
 30032                           
 30033                           ;radio_driver_SX1276.c: 582: }
 30034  0016B0  D009               	goto	l236
 30035  0016B2                     l229:
 30036                           
 30037                           ;radio_driver_SX1276.c: 583: else
 30038                           ;radio_driver_SX1276.c: 584: {
 30039                           ;radio_driver_SX1276.c: 585: tempValue = 0;
 30040  0016B2  0E00               	movlw	0
 30041  0016B4  0100               	movlb	0	; () banked
 30042  0016B6  6FAC               	movwf	RADIO_WriteConfiguration@tempValue& (0+255),b
 30043  0016B8  0E00               	movlw	0
 30044  0016BA  6FAD               	movwf	(RADIO_WriteConfiguration@tempValue+1)& (0+255),b
 30045  0016BC  0E00               	movlw	0
 30046  0016BE  6FAE               	movwf	(RADIO_WriteConfiguration@tempValue+2)& (0+255),b
 30047  0016C0  0E00               	movlw	0
 30048  0016C2  6FAF               	movwf	(RADIO_WriteConfiguration@tempValue+3)& (0+255),b
 30049  0016C4                     l236:
 30050                           
 30051                           ;radio_driver_SX1276.c: 586: }
 30052                           ;radio_driver_SX1276.c: 587: RADIO_RegisterWrite(0x24, (uint8_t)tempValue);
 30053                           
 30054                           ; BSR set to: 0
 30055  0016C4  C0AC  F062         	movff	RADIO_WriteConfiguration@tempValue,RADIO_RegisterWrite@value
 30056  0016C8  0E24               	movlw	36
 30057  0016CA  ECDE  F048         	call	_RADIO_RegisterWrite
 30058                           
 30059                           ;radio_driver_SX1276.c: 589: RADIO_RegisterWrite(0x1F, (symbolTimeout & 0xFF));
 30060  0016CE  C0A6  F062         	movff	RADIO_WriteConfiguration@symbolTimeout,RADIO_RegisterWrite@value
 30061  0016D2  0E1F               	movlw	31
 30062  0016D4  ECDE  F048         	call	_RADIO_RegisterWrite
 30063                           
 30064                           ;radio_driver_SX1276.c: 595: regValue = RADIO_RegisterRead(0x26);
 30065  0016D8  0E26               	movlw	38
 30066  0016DA  EC07  F048         	call	_RADIO_RegisterRead
 30067  0016DE  0100               	movlb	0	; () banked
 30068  0016E0  6FB0               	movwf	RADIO_WriteConfiguration@regValue& (0+255),b
 30069                           
 30070                           ; BSR set to: 0
 30071                           ;radio_driver_SX1276.c: 596: if (
 30072                           ;radio_driver_SX1276.c: 597: (
 30073                           ;radio_driver_SX1276.c: 598: (SF_12 == RadioConfiguration.dataRate) &&
 30074                           ;radio_driver_SX1276.c: 599: ((BW_125KHZ == RadioConfiguration.bandWidth) || (BW_250KHZ 
      +                          == RadioConfiguration.bandWidth))
 30075                           ;radio_driver_SX1276.c: 600: ) ||
 30076                           ;radio_driver_SX1276.c: 601: (
 30077                           ;radio_driver_SX1276.c: 602: (SF_11 == RadioConfiguration.dataRate) &&
 30078                           ;radio_driver_SX1276.c: 603: (BW_125KHZ == RadioConfiguration.bandWidth)
 30079                           ;radio_driver_SX1276.c: 604: )
 30080                           ;radio_driver_SX1276.c: 605: )
 30081  0016E2  0E0C               	movlw	12
 30082  0016E4  0101               	movlb	1	; () banked
 30083  0016E6  1970               	xorwf	(_RadioConfiguration+25)& (0+255),w,b
 30084  0016E8  A4D8               	btfss	status,2,c
 30085  0016EA  D008               	goto	u8560
 30086                           
 30087                           ; BSR set to: 1
 30088  0016EC  0E07               	movlw	7
 30089  0016EE  1971               	xorwf	(_RadioConfiguration+26)& (0+255),w,b
 30090  0016F0  B4D8               	btfsc	status,2,c
 30091  0016F2  D00C               	goto	u8580
 30092                           
 30093                           ; BSR set to: 1
 30094  0016F4  0E08               	movlw	8
 30095  0016F6  1971               	xorwf	(_RadioConfiguration+26)& (0+255),w,b
 30096  0016F8  B4D8               	btfsc	status,2,c
 30097  0016FA  D008               	goto	u8580
 30098  0016FC                     u8560:
 30099                           
 30100                           ; BSR set to: 1
 30101                           
 30102                           ; BSR set to: 1
 30103  0016FC  0E0B               	movlw	11
 30104  0016FE  1970               	xorwf	(_RadioConfiguration+25)& (0+255),w,b
 30105  001700  A4D8               	btfss	status,2,c
 30106  001702  D007               	goto	l237
 30107                           
 30108                           ; BSR set to: 1
 30109  001704  0E07               	movlw	7
 30110  001706  1971               	xorwf	(_RadioConfiguration+26)& (0+255),w,b
 30111  001708  A4D8               	btfss	status,2,c
 30112  00170A  D003               	goto	l237
 30113  00170C                     u8580:
 30114                           
 30115                           ; BSR set to: 1
 30116                           ;radio_driver_SX1276.c: 606: {
 30117                           ;radio_driver_SX1276.c: 607: regValue |= 1 << (3);
 30118                           
 30119                           ; BSR set to: 1
 30120  00170C  0100               	movlb	0	; () banked
 30121  00170E  87B0               	bsf	RADIO_WriteConfiguration@regValue& (0+255),3,b
 30122                           
 30123                           ;radio_driver_SX1276.c: 608: }
 30124  001710  D002               	goto	l242
 30125  001712                     l237:
 30126                           
 30127                           ;radio_driver_SX1276.c: 609: else
 30128                           ;radio_driver_SX1276.c: 610: {
 30129                           ;radio_driver_SX1276.c: 611: regValue &= ~(1 << (3));
 30130                           
 30131                           ; BSR set to: 0
 30132  001712  0100               	movlb	0	; () banked
 30133  001714  97B0               	bcf	RADIO_WriteConfiguration@regValue& (0+255),3,b
 30134  001716                     l242:
 30135                           
 30136                           ; BSR set to: 0
 30137                           ;radio_driver_SX1276.c: 612: }
 30138                           ;radio_driver_SX1276.c: 613: regValue |= 1 << (2);
 30139  001716  85B0               	bsf	RADIO_WriteConfiguration@regValue& (0+255),2,b
 30140                           
 30141                           ; BSR set to: 0
 30142                           ;radio_driver_SX1276.c: 614: RADIO_RegisterWrite(0x26, regValue);
 30143  001718  C0B0  F062         	movff	RADIO_WriteConfiguration@regValue,RADIO_RegisterWrite@value
 30144  00171C  0E26               	movlw	38
 30145  00171E  ECDE  F048         	call	_RADIO_RegisterWrite
 30146                           
 30147                           ;radio_driver_SX1276.c: 616: regValue = RADIO_RegisterRead(0x31);
 30148  001722  0E31               	movlw	49
 30149  001724  EC07  F048         	call	_RADIO_RegisterRead
 30150  001728  0100               	movlb	0	; () banked
 30151  00172A  6FB0               	movwf	RADIO_WriteConfiguration@regValue& (0+255),b
 30152                           
 30153                           ; BSR set to: 0
 30154                           ;radio_driver_SX1276.c: 617: regValue &= ~(0x07);
 30155  00172C  0EF8               	movlw	248
 30156  00172E  17B0               	andwf	RADIO_WriteConfiguration@regValue& (0+255),f,b
 30157                           
 30158                           ; BSR set to: 0
 30159                           ;radio_driver_SX1276.c: 618: regValue |= 0x03;
 30160  001730  0E03               	movlw	3
 30161  001732  13B0               	iorwf	RADIO_WriteConfiguration@regValue& (0+255),f,b
 30162                           
 30163                           ; BSR set to: 0
 30164                           ;radio_driver_SX1276.c: 619: RADIO_RegisterWrite(0x31, regValue);
 30165  001734  C0B0  F062         	movff	RADIO_WriteConfiguration@regValue,RADIO_RegisterWrite@value
 30166  001738  0E31               	movlw	49
 30167  00173A  ECDE  F048         	call	_RADIO_RegisterWrite
 30168                           
 30169                           ;radio_driver_SX1276.c: 622: RADIO_RegisterWrite(0x37, 0x0A);
 30170  00173E  0E0A               	movlw	10
 30171  001740  0100               	movlb	0	; () banked
 30172  001742  6F62               	movwf	RADIO_RegisterWrite@value& (0+255),b
 30173  001744  0E37               	movlw	55
 30174  001746  ECDE  F048         	call	_RADIO_RegisterWrite
 30175                           
 30176                           ;radio_driver_SX1276.c: 625: if (0x12 == RadioConfiguration.regVersion)
 30177  00174A  0E12               	movlw	18
 30178  00174C  0101               	movlb	1	; () banked
 30179  00174E  1988               	xorwf	(_RadioConfiguration+49)& (0+255),w,b
 30180  001750  A4D8               	btfss	status,2,c
 30181  001752  D02F               	goto	l247
 30182                           
 30183                           ; BSR set to: 1
 30184                           ;radio_driver_SX1276.c: 626: {
 30185                           ;radio_driver_SX1276.c: 629: if ( (BW_125KHZ == RadioConfiguration.bandWidth) ||
 30186                           ;radio_driver_SX1276.c: 630: (BW_250KHZ == RadioConfiguration.bandWidth) )
 30187  001754  0E07               	movlw	7
 30188  001756  1971               	xorwf	(_RadioConfiguration+26)& (0+255),w,b
 30189  001758  B4D8               	btfsc	status,2,c
 30190  00175A  D004               	goto	u8610
 30191                           
 30192                           ; BSR set to: 1
 30193  00175C  0E08               	movlw	8
 30194  00175E  1971               	xorwf	(_RadioConfiguration+26)& (0+255),w,b
 30195  001760  A4D8               	btfss	status,2,c
 30196  001762  D017               	goto	l244
 30197  001764                     u8610:
 30198                           
 30199                           ; BSR set to: 1
 30200                           ;radio_driver_SX1276.c: 631: {
 30201                           ;radio_driver_SX1276.c: 632: regValue = RADIO_RegisterRead(0x31);
 30202                           
 30203                           ; BSR set to: 1
 30204  001764  0E31               	movlw	49
 30205  001766  EC07  F048         	call	_RADIO_RegisterRead
 30206  00176A  0100               	movlb	0	; () banked
 30207  00176C  6FB0               	movwf	RADIO_WriteConfiguration@regValue& (0+255),b
 30208                           
 30209                           ; BSR set to: 0
 30210                           ;radio_driver_SX1276.c: 633: regValue &= ~0x80;
 30211  00176E  9FB0               	bcf	RADIO_WriteConfiguration@regValue& (0+255),7,b
 30212                           
 30213                           ; BSR set to: 0
 30214                           ;radio_driver_SX1276.c: 634: RADIO_RegisterWrite(0x31, regValue);
 30215  001770  C0B0  F062         	movff	RADIO_WriteConfiguration@regValue,RADIO_RegisterWrite@value
 30216  001774  0E31               	movlw	49
 30217  001776  ECDE  F048         	call	_RADIO_RegisterWrite
 30218                           
 30219                           ;radio_driver_SX1276.c: 635: RADIO_RegisterWrite(0x2F, 0x40);
 30220  00177A  0E40               	movlw	64
 30221  00177C  0100               	movlb	0	; () banked
 30222  00177E  6F62               	movwf	RADIO_RegisterWrite@value& (0+255),b
 30223  001780  0E2F               	movlw	47
 30224  001782  ECDE  F048         	call	_RADIO_RegisterWrite
 30225                           
 30226                           ;radio_driver_SX1276.c: 636: RADIO_RegisterWrite(0x30, 0x00);
 30227  001786  0E00               	movlw	0
 30228  001788  0100               	movlb	0	; () banked
 30229  00178A  6F62               	movwf	RADIO_RegisterWrite@value& (0+255),b
 30230  00178C  0E30               	movlw	48
 30231  00178E  ECDE  F048         	call	_RADIO_RegisterWrite
 30232  001792                     l244:
 30233                           
 30234                           ;radio_driver_SX1276.c: 637: }
 30235                           ;radio_driver_SX1276.c: 639: if (BW_500KHZ == RadioConfiguration.bandWidth)
 30236  001792  0E09               	movlw	9
 30237  001794  0101               	movlb	1	; () banked
 30238  001796  1971               	xorwf	(_RadioConfiguration+26)& (0+255),w,b
 30239  001798  A4D8               	btfss	status,2,c
 30240  00179A  D00B               	goto	l247
 30241                           
 30242                           ; BSR set to: 1
 30243                           ;radio_driver_SX1276.c: 640: {
 30244                           ;radio_driver_SX1276.c: 641: regValue = RADIO_RegisterRead(0x31);
 30245  00179C  0E31               	movlw	49
 30246  00179E  EC07  F048         	call	_RADIO_RegisterRead
 30247  0017A2  0100               	movlb	0	; () banked
 30248  0017A4  6FB0               	movwf	RADIO_WriteConfiguration@regValue& (0+255),b
 30249                           
 30250                           ; BSR set to: 0
 30251                           ;radio_driver_SX1276.c: 642: regValue |= 0x80;
 30252  0017A6  8FB0               	bsf	RADIO_WriteConfiguration@regValue& (0+255),7,b
 30253                           
 30254                           ; BSR set to: 0
 30255                           ;radio_driver_SX1276.c: 643: RADIO_RegisterWrite(0x31, regValue);
 30256  0017A8  C0B0  F062         	movff	RADIO_WriteConfiguration@regValue,RADIO_RegisterWrite@value
 30257  0017AC  0E31               	movlw	49
 30258  0017AE  ECDE  F048         	call	_RADIO_RegisterWrite
 30259  0017B2                     l247:
 30260                           
 30261                           ;radio_driver_SX1276.c: 644: }
 30262                           ;radio_driver_SX1276.c: 645: }
 30263                           ;radio_driver_SX1276.c: 647: regValue = RADIO_RegisterRead(0x33);
 30264  0017B2  0E33               	movlw	51
 30265  0017B4  EC07  F048         	call	_RADIO_RegisterRead
 30266  0017B8  0100               	movlb	0	; () banked
 30267  0017BA  6FB0               	movwf	RADIO_WriteConfiguration@regValue& (0+255),b
 30268                           
 30269                           ; BSR set to: 0
 30270                           ;radio_driver_SX1276.c: 648: regValue &= ~(1 << (6));
 30271  0017BC  9DB0               	bcf	RADIO_WriteConfiguration@regValue& (0+255),6,b
 30272                           
 30273                           ; BSR set to: 0
 30274                           ;radio_driver_SX1276.c: 649: regValue |= (1 << (0));
 30275  0017BE  81B0               	bsf	RADIO_WriteConfiguration@regValue& (0+255),0,b
 30276                           
 30277                           ; BSR set to: 0
 30278                           ;radio_driver_SX1276.c: 650: regValue |= (RadioConfiguration.iqInverted & 0x01) << (6);
 30279  0017C0  C177  F0A8         	movff	_RadioConfiguration+32,??_RADIO_WriteConfiguration
 30280  0017C4  0E01               	movlw	1
 30281  0017C6  17A8               	andwf	??_RADIO_WriteConfiguration& (0+255),f,b
 30282  0017C8  0E06               	movlw	6
 30283  0017CA  6FA9               	movwf	(??_RADIO_WriteConfiguration+1)& (0+255),b
 30284  0017CC                     u8635:
 30285  0017CC  90D8               	bcf	status,0,c
 30286  0017CE  37A8               	rlcf	??_RADIO_WriteConfiguration& (0+255),f,b
 30287  0017D0  2FA9               	decfsz	(??_RADIO_WriteConfiguration+1)& (0+255),f,b
 30288  0017D2  D7FC               	goto	u8635
 30289  0017D4  51A8               	movf	??_RADIO_WriteConfiguration& (0+255),w,b
 30290  0017D6  13B0               	iorwf	RADIO_WriteConfiguration@regValue& (0+255),f,b
 30291                           
 30292                           ; BSR set to: 0
 30293                           ;radio_driver_SX1276.c: 651: RADIO_RegisterWrite(0x33, regValue);
 30294  0017D8  C0B0  F062         	movff	RADIO_WriteConfiguration@regValue,RADIO_RegisterWrite@value
 30295  0017DC  0E33               	movlw	51
 30296  0017DE  ECDE  F048         	call	_RADIO_RegisterWrite
 30297                           
 30298                           ;radio_driver_SX1276.c: 653: regValue = 0x1D & (~((RadioConfiguration.iqInverted & 0x01)
      +                           << (2)));
 30299  0017E2  C177  F0A8         	movff	_RadioConfiguration+32,??_RADIO_WriteConfiguration
 30300  0017E6  0E01               	movlw	1
 30301  0017E8  0100               	movlb	0	; () banked
 30302  0017EA  17A8               	andwf	??_RADIO_WriteConfiguration& (0+255),f,b
 30303  0017EC  90D8               	bcf	status,0,c
 30304  0017EE  37A8               	rlcf	??_RADIO_WriteConfiguration& (0+255),f,b
 30305  0017F0  90D8               	bcf	status,0,c
 30306  0017F2  35A8               	rlcf	??_RADIO_WriteConfiguration& (0+255),w,b
 30307  0017F4  0AFF               	xorlw	255
 30308  0017F6  0B1D               	andlw	29
 30309  0017F8  6FB0               	movwf	RADIO_WriteConfiguration@regValue& (0+255),b
 30310                           
 30311                           ; BSR set to: 0
 30312                           ;radio_driver_SX1276.c: 654: RADIO_RegisterWrite(0x3B, regValue);
 30313  0017FA  C0B0  F062         	movff	RADIO_WriteConfiguration@regValue,RADIO_RegisterWrite@value
 30314  0017FE  0E3B               	movlw	59
 30315  001800  ECDE  F048         	call	_RADIO_RegisterWrite
 30316                           
 30317                           ;radio_driver_SX1276.c: 656: RADIO_RegisterWrite(0x20, RadioConfiguration.preambleLen >>
      +                           (8));
 30318  001804  0101               	movlb	1	; () banked
 30319  001806  5164               	movf	(_RadioConfiguration+13)& (0+255),w,b
 30320  001808  0100               	movlb	0	; () banked
 30321  00180A  6F62               	movwf	RADIO_RegisterWrite@value& (0+255),b
 30322  00180C  0E20               	movlw	32
 30323  00180E  ECDE  F048         	call	_RADIO_RegisterWrite
 30324                           
 30325                           ;radio_driver_SX1276.c: 657: RADIO_RegisterWrite(0x21, RadioConfiguration.preambleLen & 
      +                          0xFF);
 30326  001812  C163  F062         	movff	_RadioConfiguration+12,RADIO_RegisterWrite@value
 30327  001816  0E21               	movlw	33
 30328  001818  ECDE  F048         	call	_RADIO_RegisterWrite
 30329                           
 30330                           ;radio_driver_SX1276.c: 659: RADIO_RegisterWrite(0x0D, 0x00);
 30331  00181C  0E00               	movlw	0
 30332  00181E  0100               	movlb	0	; () banked
 30333  001820  6F62               	movwf	RADIO_RegisterWrite@value& (0+255),b
 30334  001822  0E0D               	movlw	13
 30335  001824  ECDE  F048         	call	_RADIO_RegisterWrite
 30336                           
 30337                           ;radio_driver_SX1276.c: 660: RADIO_RegisterWrite(0x0E, 0x00);
 30338  001828  0E00               	movlw	0
 30339  00182A  0100               	movlb	0	; () banked
 30340  00182C  6F62               	movwf	RADIO_RegisterWrite@value& (0+255),b
 30341  00182E  0E0E               	movlw	14
 30342  001830  ECDE  F048         	call	_RADIO_RegisterWrite
 30343                           
 30344                           ;radio_driver_SX1276.c: 661: RADIO_RegisterWrite(0x0F, 0x00);
 30345  001834  0E00               	movlw	0
 30346  001836  0100               	movlb	0	; () banked
 30347  001838  6F62               	movwf	RADIO_RegisterWrite@value& (0+255),b
 30348  00183A  0E0F               	movlw	15
 30349  00183C  ECDE  F048         	call	_RADIO_RegisterWrite
 30350                           
 30351                           ;radio_driver_SX1276.c: 664: if (0x12 == RadioConfiguration.regVersion)
 30352  001840  0E12               	movlw	18
 30353  001842  0101               	movlb	1	; () banked
 30354  001844  1988               	xorwf	(_RadioConfiguration+49)& (0+255),w,b
 30355  001846  A4D8               	btfss	status,2,c
 30356  001848  D071               	goto	l254
 30357                           
 30358                           ; BSR set to: 1
 30359                           ;radio_driver_SX1276.c: 665: {
 30360                           ;radio_driver_SX1276.c: 666: if ( (BW_500KHZ == RadioConfiguration.bandWidth) &&
 30361                           ;radio_driver_SX1276.c: 667: (RadioConfiguration.frequency >= 862000000) &&
 30362                           ;radio_driver_SX1276.c: 668: (RadioConfiguration.frequency <= 1020000000)
 30363                           ;radio_driver_SX1276.c: 669: )
 30364  00184A  0E09               	movlw	9
 30365  00184C  1971               	xorwf	(_RadioConfiguration+26)& (0+255),w,b
 30366  00184E  A4D8               	btfss	status,2,c
 30367  001850  D020               	goto	l249
 30368                           
 30369                           ; BSR set to: 1
 30370  001852  0E80               	movlw	128
 30371  001854  5D57               	subwf	_RadioConfiguration& (0+255),w,b
 30372  001856  0E13               	movlw	19
 30373  001858  5958               	subwfb	(_RadioConfiguration+1)& (0+255),w,b
 30374  00185A  0E61               	movlw	97
 30375  00185C  5959               	subwfb	(_RadioConfiguration+2)& (0+255),w,b
 30376  00185E  0E33               	movlw	51
 30377  001860  595A               	subwfb	(_RadioConfiguration+3)& (0+255),w,b
 30378  001862  A0D8               	btfss	status,0,c
 30379  001864  D016               	goto	l249
 30380                           
 30381                           ; BSR set to: 1
 30382  001866  0557               	decf	_RadioConfiguration& (0+255),w,b
 30383  001868  0EF7               	movlw	247
 30384  00186A  5958               	subwfb	(_RadioConfiguration+1)& (0+255),w,b
 30385  00186C  0ECB               	movlw	203
 30386  00186E  5959               	subwfb	(_RadioConfiguration+2)& (0+255),w,b
 30387  001870  0E3C               	movlw	60
 30388  001872  595A               	subwfb	(_RadioConfiguration+3)& (0+255),w,b
 30389  001874  B0D8               	btfsc	status,0,c
 30390  001876  D00D               	goto	l249
 30391                           
 30392                           ; BSR set to: 1
 30393                           ;radio_driver_SX1276.c: 670: {
 30394                           ;radio_driver_SX1276.c: 671: RADIO_RegisterWrite(0x36, 0x02);
 30395  001878  0E02               	movlw	2
 30396  00187A  0100               	movlb	0	; () banked
 30397  00187C  6F62               	movwf	RADIO_RegisterWrite@value& (0+255),b
 30398  00187E  0E36               	movlw	54
 30399  001880  ECDE  F048         	call	_RADIO_RegisterWrite
 30400                           
 30401                           ;radio_driver_SX1276.c: 672: RADIO_RegisterWrite(0x3a, 0x64);
 30402  001884  0E64               	movlw	100
 30403  001886  0100               	movlb	0	; () banked
 30404  001888  6F62               	movwf	RADIO_RegisterWrite@value& (0+255),b
 30405  00188A  0E3A               	movlw	58
 30406  00188C  ECDE  F048         	call	_RADIO_RegisterWrite
 30407                           
 30408                           ;radio_driver_SX1276.c: 673: }
 30409  001890  D02C               	goto	l252
 30410  001892                     l249:
 30411                           
 30412                           ;radio_driver_SX1276.c: 674: else if ( (BW_500KHZ == RadioConfiguration.bandWidth) &&
 30413                           ;radio_driver_SX1276.c: 675: (RadioConfiguration.frequency >= 410000000) &&
 30414                           ;radio_driver_SX1276.c: 676: (RadioConfiguration.frequency <= 525000000)
 30415                           ;radio_driver_SX1276.c: 677: )
 30416  001892  0E09               	movlw	9
 30417  001894  0101               	movlb	1	; () banked
 30418  001896  1971               	xorwf	(_RadioConfiguration+26)& (0+255),w,b
 30419  001898  A4D8               	btfss	status,2,c
 30420  00189A  D021               	goto	l251
 30421                           
 30422                           ; BSR set to: 1
 30423  00189C  0E80               	movlw	128
 30424  00189E  5D57               	subwf	_RadioConfiguration& (0+255),w,b
 30425  0018A0  0E1A               	movlw	26
 30426  0018A2  5958               	subwfb	(_RadioConfiguration+1)& (0+255),w,b
 30427  0018A4  0E70               	movlw	112
 30428  0018A6  5959               	subwfb	(_RadioConfiguration+2)& (0+255),w,b
 30429  0018A8  0E18               	movlw	24
 30430  0018AA  595A               	subwfb	(_RadioConfiguration+3)& (0+255),w,b
 30431  0018AC  A0D8               	btfss	status,0,c
 30432  0018AE  D017               	goto	l251
 30433                           
 30434                           ; BSR set to: 1
 30435  0018B0  0E41               	movlw	65
 30436  0018B2  5D57               	subwf	_RadioConfiguration& (0+255),w,b
 30437  0018B4  0EDD               	movlw	221
 30438  0018B6  5958               	subwfb	(_RadioConfiguration+1)& (0+255),w,b
 30439  0018B8  0E4A               	movlw	74
 30440  0018BA  5959               	subwfb	(_RadioConfiguration+2)& (0+255),w,b
 30441  0018BC  0E1F               	movlw	31
 30442  0018BE  595A               	subwfb	(_RadioConfiguration+3)& (0+255),w,b
 30443  0018C0  B0D8               	btfsc	status,0,c
 30444  0018C2  D00D               	goto	l251
 30445                           
 30446                           ; BSR set to: 1
 30447                           ;radio_driver_SX1276.c: 678: {
 30448                           ;radio_driver_SX1276.c: 679: RADIO_RegisterWrite(0x36, 0x02);
 30449  0018C4  0E02               	movlw	2
 30450  0018C6  0100               	movlb	0	; () banked
 30451  0018C8  6F62               	movwf	RADIO_RegisterWrite@value& (0+255),b
 30452  0018CA  0E36               	movlw	54
 30453  0018CC  ECDE  F048         	call	_RADIO_RegisterWrite
 30454                           
 30455                           ;radio_driver_SX1276.c: 680: RADIO_RegisterWrite(0x3a, 0x7F);
 30456  0018D0  0E7F               	movlw	127
 30457  0018D2  0100               	movlb	0	; () banked
 30458  0018D4  6F62               	movwf	RADIO_RegisterWrite@value& (0+255),b
 30459  0018D6  0E3A               	movlw	58
 30460  0018D8  ECDE  F048         	call	_RADIO_RegisterWrite
 30461                           
 30462                           ;radio_driver_SX1276.c: 681: }
 30463  0018DC  D006               	goto	l252
 30464  0018DE                     l251:
 30465                           
 30466                           ;radio_driver_SX1276.c: 682: else
 30467                           ;radio_driver_SX1276.c: 683: {
 30468                           ;radio_driver_SX1276.c: 684: RADIO_RegisterWrite(0x36, 0x03);
 30469  0018DE  0E03               	movlw	3
 30470  0018E0  0100               	movlb	0	; () banked
 30471  0018E2  6F62               	movwf	RADIO_RegisterWrite@value& (0+255),b
 30472  0018E4  0E36               	movlw	54
 30473  0018E6  ECDE  F048         	call	_RADIO_RegisterWrite
 30474  0018EA                     l252:
 30475                           
 30476                           ;radio_driver_SX1276.c: 685: }
 30477                           ;radio_driver_SX1276.c: 688: if ((BW_500KHZ == RadioConfiguration.bandWidth) && (1 == Ra
      +                          dioConfiguration.iqInverted))
 30478  0018EA  0E09               	movlw	9
 30479  0018EC  0101               	movlb	1	; () banked
 30480  0018EE  1971               	xorwf	(_RadioConfiguration+26)& (0+255),w,b
 30481  0018F0  A4D8               	btfss	status,2,c
 30482  0018F2  D010               	goto	l253
 30483                           
 30484                           ; BSR set to: 1
 30485  0018F4  0577               	decf	(_RadioConfiguration+32)& (0+255),w,b
 30486  0018F6  A4D8               	btfss	status,2,c
 30487  0018F8  D00D               	goto	l253
 30488                           
 30489                           ; BSR set to: 1
 30490                           ;radio_driver_SX1276.c: 689: {
 30491                           ;radio_driver_SX1276.c: 690: RADIO_RegisterWrite(0x3A, 0x65);
 30492  0018FA  0E65               	movlw	101
 30493  0018FC  0100               	movlb	0	; () banked
 30494  0018FE  6F62               	movwf	RADIO_RegisterWrite@value& (0+255),b
 30495  001900  0E3A               	movlw	58
 30496  001902  ECDE  F048         	call	_RADIO_RegisterWrite
 30497                           
 30498                           ;radio_driver_SX1276.c: 691: RADIO_RegisterWrite(0x3B, 25);
 30499  001906  0E19               	movlw	25
 30500  001908  0100               	movlb	0	; () banked
 30501  00190A  6F62               	movwf	RADIO_RegisterWrite@value& (0+255),b
 30502  00190C  0E3B               	movlw	59
 30503  00190E  ECDE  F048         	call	_RADIO_RegisterWrite
 30504                           
 30505                           ;radio_driver_SX1276.c: 692: }
 30506  001912  D00C               	goto	l254
 30507  001914                     l253:
 30508                           
 30509                           ;radio_driver_SX1276.c: 693: else
 30510                           ;radio_driver_SX1276.c: 694: {
 30511                           ;radio_driver_SX1276.c: 695: RADIO_RegisterWrite(0x3A, 0x65);
 30512  001914  0E65               	movlw	101
 30513  001916  0100               	movlb	0	; () banked
 30514  001918  6F62               	movwf	RADIO_RegisterWrite@value& (0+255),b
 30515  00191A  0E3A               	movlw	58
 30516  00191C  ECDE  F048         	call	_RADIO_RegisterWrite
 30517                           
 30518                           ;radio_driver_SX1276.c: 696: RADIO_RegisterWrite(0x3B, 29);
 30519  001920  0E1D               	movlw	29
 30520  001922  0100               	movlb	0	; () banked
 30521  001924  6F62               	movwf	RADIO_RegisterWrite@value& (0+255),b
 30522  001926  0E3B               	movlw	59
 30523  001928  ECDE  F048         	call	_RADIO_RegisterWrite
 30524  00192C                     l254:
 30525                           
 30526                           ;radio_driver_SX1276.c: 697: }
 30527                           ;radio_driver_SX1276.c: 698: }
 30528                           ;radio_driver_SX1276.c: 701: RADIO_RegisterWrite(0x12, 0xFF);
 30529  00192C  0EFF               	movlw	255
 30530  00192E  0100               	movlb	0	; () banked
 30531  001930  6F62               	movwf	RADIO_RegisterWrite@value& (0+255),b
 30532  001932  0E12               	movlw	18
 30533  001934  ECDE  F048         	call	_RADIO_RegisterWrite
 30534                           
 30535                           ;radio_driver_SX1276.c: 702: }
 30536  001938  0012               	return	
 30537  00193A                     l228:
 30538                           
 30539                           ;radio_driver_SX1276.c: 703: else
 30540                           ;radio_driver_SX1276.c: 704: {
 30541                           ;radio_driver_SX1276.c: 706: RADIO_WriteFSKFrequencyDeviation(RadioConfiguration.frequen
      +                          cyDeviation);
 30542  00193A  C15B  F06D         	movff	_RadioConfiguration+4,RADIO_WriteFSKFrequencyDeviation@frequencyDeviation
 30543  00193E  C15C  F06E         	movff	_RadioConfiguration+5,RADIO_WriteFSKFrequencyDeviation@frequencyDeviation+1
 30544  001942  C15D  F06F         	movff	_RadioConfiguration+6,RADIO_WriteFSKFrequencyDeviation@frequencyDeviation+2
 30545  001946  C15E  F070         	movff	_RadioConfiguration+7,RADIO_WriteFSKFrequencyDeviation@frequencyDeviation+3
 30546  00194A  EC65  F03F         	call	_RADIO_WriteFSKFrequencyDeviation	;wreg free
 30547                           
 30548                           ;radio_driver_SX1276.c: 707: RADIO_WriteFSKBitRate(RadioConfiguration.bitRate);
 30549  00194E  C15F  F06D         	movff	_RadioConfiguration+8,RADIO_WriteFSKBitRate@bitRate
 30550  001952  C160  F06E         	movff	_RadioConfiguration+9,RADIO_WriteFSKBitRate@bitRate+1
 30551  001956  C161  F06F         	movff	_RadioConfiguration+10,RADIO_WriteFSKBitRate@bitRate+2
 30552  00195A  C162  F070         	movff	_RadioConfiguration+11,RADIO_WriteFSKBitRate@bitRate+3
 30553  00195E  EC9A  F03F         	call	_RADIO_WriteFSKBitRate	;wreg free
 30554                           
 30555                           ;radio_driver_SX1276.c: 709: RADIO_RegisterWrite(0x25, RadioConfiguration.preambleLen >>
      +                           (8));
 30556  001962  0101               	movlb	1	; () banked
 30557  001964  5164               	movf	(_RadioConfiguration+13)& (0+255),w,b
 30558  001966  0100               	movlb	0	; () banked
 30559  001968  6F62               	movwf	RADIO_RegisterWrite@value& (0+255),b
 30560  00196A  0E25               	movlw	37
 30561  00196C  ECDE  F048         	call	_RADIO_RegisterWrite
 30562                           
 30563                           ;radio_driver_SX1276.c: 710: RADIO_RegisterWrite(0x26, RadioConfiguration.preambleLen & 
      +                          0xFF);
 30564  001970  C163  F062         	movff	_RadioConfiguration+12,RADIO_RegisterWrite@value
 30565  001974  0E26               	movlw	38
 30566  001976  ECDE  F048         	call	_RADIO_RegisterWrite
 30567                           
 30568                           ;radio_driver_SX1276.c: 713: regValue = RADIO_RegisterRead(0x0A);
 30569  00197A  0E0A               	movlw	10
 30570  00197C  EC07  F048         	call	_RADIO_RegisterRead
 30571  001980  0100               	movlb	0	; () banked
 30572  001982  6FB0               	movwf	RADIO_WriteConfiguration@regValue& (0+255),b
 30573                           
 30574                           ; BSR set to: 0
 30575                           ;radio_driver_SX1276.c: 714: regValue &= ~0x60;
 30576  001984  0E9F               	movlw	159
 30577  001986  17B0               	andwf	RADIO_WriteConfiguration@regValue& (0+255),f,b
 30578                           
 30579                           ; BSR set to: 0
 30580                           ;radio_driver_SX1276.c: 715: regValue |= RadioConfiguration.fskDataShaping << (5);
 30581  001988  0101               	movlb	1	; () banked
 30582  00198A  398A               	swapf	(_RadioConfiguration+51)& (0+255),w,b
 30583  00198C  46E8               	rlncf	wreg,f,c
 30584  00198E  0BE0               	andlw	224
 30585  001990  0100               	movlb	0	; () banked
 30586  001992  13B0               	iorwf	RADIO_WriteConfiguration@regValue& (0+255),f,b
 30587                           
 30588                           ;radio_driver_SX1276.c: 716: RADIO_RegisterWrite(0x0A, regValue);
 30589  001994  C0B0  F062         	movff	RADIO_WriteConfiguration@regValue,RADIO_RegisterWrite@value
 30590  001998  0E0A               	movlw	10
 30591  00199A  ECDE  F048         	call	_RADIO_RegisterWrite
 30592                           
 30593                           ;radio_driver_SX1276.c: 720: regValue = 0xC8;
 30594  00199E  0EC8               	movlw	200
 30595  0019A0  0100               	movlb	0	; () banked
 30596  0019A2  6FB0               	movwf	RADIO_WriteConfiguration@regValue& (0+255),b
 30597                           
 30598                           ; BSR set to: 0
 30599                           ;radio_driver_SX1276.c: 721: if (RadioConfiguration.crcOn)
 30600  0019A4  0101               	movlb	1	; () banked
 30601  0019A6  5173               	movf	(_RadioConfiguration+28)& (0+255),w,b
 30602  0019A8  B4D8               	btfsc	status,2,c
 30603  0019AA  D002               	goto	l256
 30604                           
 30605                           ; BSR set to: 1
 30606                           ;radio_driver_SX1276.c: 722: {
 30607                           ;radio_driver_SX1276.c: 723: regValue |= 0x10;
 30608  0019AC  0100               	movlb	0	; () banked
 30609  0019AE  89B0               	bsf	RADIO_WriteConfiguration@regValue& (0+255),4,b
 30610  0019B0                     l256:
 30611                           
 30612                           ;radio_driver_SX1276.c: 724: }
 30613                           ;radio_driver_SX1276.c: 725: RADIO_RegisterWrite(0x30, regValue);
 30614                           
 30615                           ; BSR set to: 0
 30616  0019B0  C0B0  F062         	movff	RADIO_WriteConfiguration@regValue,RADIO_RegisterWrite@value
 30617  0019B4  0E30               	movlw	48
 30618  0019B6  ECDE  F048         	call	_RADIO_RegisterWrite
 30619                           
 30620                           ;radio_driver_SX1276.c: 728: for (i = 0; i < RadioConfiguration.syncWordLen; i++)
 30621  0019BA  0E00               	movlw	0
 30622  0019BC  0100               	movlb	0	; () banked
 30623  0019BE  6FAB               	movwf	RADIO_WriteConfiguration@i& (0+255),b
 30624  0019C0  D010               	goto	l257
 30625  0019C2                     
 30626                           ; BSR set to: 0
 30627                           ;radio_driver_SX1276.c: 729: {
 30628                           ;radio_driver_SX1276.c: 732: RADIO_RegisterWrite(0x28 + i, RadioConfiguration.syncWord[i
      +                          ]);
 30629                           
 30630                           ; BSR set to: 0
 30631  0019C2  51AB               	movf	RADIO_WriteConfiguration@i& (0+255),w,b
 30632  0019C4  0D01               	mullw	1
 30633  0019C6  0E66               	movlw	low (_RadioConfiguration+15)
 30634  0019C8  24F3               	addwf	prodl,w,c
 30635  0019CA  6ED9               	movwf	fsr2l,c
 30636  0019CC  0E01               	movlw	high (_RadioConfiguration+15)
 30637  0019CE  20F4               	addwfc	prodh,w,c
 30638  0019D0  6EDA               	movwf	fsr2h,c
 30639  0019D2  50DF               	movf	indf2,w,c
 30640  0019D4  6F62               	movwf	RADIO_RegisterWrite@value& (0+255),b
 30641  0019D6  51AB               	movf	RADIO_WriteConfiguration@i& (0+255),w,b
 30642  0019D8  0F28               	addlw	40
 30643  0019DA  ECDE  F048         	call	_RADIO_RegisterWrite
 30644  0019DE  0100               	movlb	0	; () banked
 30645  0019E0  2BAB               	incf	RADIO_WriteConfiguration@i& (0+255),f,b
 30646  0019E2                     l257:
 30647                           
 30648                           ; BSR set to: 0
 30649                           
 30650                           ; BSR set to: 0
 30651  0019E2  0101               	movlb	1	; () banked
 30652  0019E4  516E               	movf	(_RadioConfiguration+23)& (0+255),w,b
 30653  0019E6  0100               	movlb	0	; () banked
 30654  0019E8  5DAB               	subwf	RADIO_WriteConfiguration@i& (0+255),w,b
 30655  0019EA  A0D8               	btfss	status,0,c
 30656  0019EC  D7EA               	goto	l258
 30657                           
 30658                           ; BSR set to: 0
 30659                           ;radio_driver_SX1276.c: 733: }
 30660                           ;radio_driver_SX1276.c: 736: if (RadioConfiguration.syncWordLen != 0)
 30661                           
 30662                           ; BSR set to: 0
 30663  0019EE  0101               	movlb	1	; () banked
 30664  0019F0  516E               	movf	(_RadioConfiguration+23)& (0+255),w,b
 30665  0019F2  B4D8               	btfsc	status,2,c
 30666  0019F4  D008               	goto	l260
 30667                           
 30668                           ; BSR set to: 1
 30669                           ;radio_driver_SX1276.c: 737: {
 30670                           ;radio_driver_SX1276.c: 738: RADIO_RegisterWrite(0x27, 0x10 | (RadioConfiguration.syncWo
      +                          rdLen - 1));
 30671  0019F6  056E               	decf	(_RadioConfiguration+23)& (0+255),w,b
 30672  0019F8  0910               	iorlw	16
 30673  0019FA  0100               	movlb	0	; () banked
 30674  0019FC  6F62               	movwf	RADIO_RegisterWrite@value& (0+255),b
 30675  0019FE  0E27               	movlw	39
 30676  001A00  ECDE  F048         	call	_RADIO_RegisterWrite
 30677                           
 30678                           ;radio_driver_SX1276.c: 739: }
 30679  001A04  D006               	goto	l261
 30680  001A06                     l260:
 30681                           
 30682                           ;radio_driver_SX1276.c: 740: else
 30683                           ;radio_driver_SX1276.c: 741: {
 30684                           ;radio_driver_SX1276.c: 742: RADIO_RegisterWrite(0x27, 0x00);
 30685  001A06  0E00               	movlw	0
 30686  001A08  0100               	movlb	0	; () banked
 30687  001A0A  6F62               	movwf	RADIO_RegisterWrite@value& (0+255),b
 30688  001A0C  0E27               	movlw	39
 30689  001A0E  ECDE  F048         	call	_RADIO_RegisterWrite
 30690  001A12                     l261:
 30691                           
 30692                           ;radio_driver_SX1276.c: 743: }
 30693                           ;radio_driver_SX1276.c: 746: RADIO_RegisterWrite(0x3E, 0xFF);
 30694  001A12  0EFF               	movlw	255
 30695  001A14  0100               	movlb	0	; () banked
 30696  001A16  6F62               	movwf	RADIO_RegisterWrite@value& (0+255),b
 30697  001A18  0E3E               	movlw	62
 30698  001A1A  ECDE  F048         	call	_RADIO_RegisterWrite
 30699                           
 30700                           ;radio_driver_SX1276.c: 747: RADIO_RegisterWrite(0x3F, 0xFF);
 30701  001A1E  0EFF               	movlw	255
 30702  001A20  0100               	movlb	0	; () banked
 30703  001A22  6F62               	movwf	RADIO_RegisterWrite@value& (0+255),b
 30704  001A24  0E3F               	movlw	63
 30705  001A26  ECDE  F048         	call	_RADIO_RegisterWrite
 30706  001A2A  0012               	return	
 30707  001A2C                     __end_of_RADIO_WriteConfiguration:
 30708                           	opt stack 0
 30709                           tosu	equ	0xFFF
 30710                           tosh	equ	0xFFE
 30711                           tosl	equ	0xFFD
 30712                           pclath	equ	0xFFA
 30713                           tblptru	equ	0xFF8
 30714                           tblptrh	equ	0xFF7
 30715                           tblptrl	equ	0xFF6
 30716                           tablat	equ	0xFF5
 30717                           prodh	equ	0xFF4
 30718                           prodl	equ	0xFF3
 30719                           intcon	equ	0xFF2
 30720                           intcon2	equ	0xFF1
 30721                           intcon3	equ	0xFF0
 30722                           indf0	equ	0xFEF
 30723                           postinc0	equ	0xFEE
 30724                           fsr0h	equ	0xFEA
 30725                           fsr0l	equ	0xFE9
 30726                           wreg	equ	0xFE8
 30727                           postinc1	equ	0xFE6
 30728                           postdec1	equ	0xFE5
 30729                           plusw1	equ	0xFE3
 30730                           fsr1h	equ	0xFE2
 30731                           fsr1l	equ	0xFE1
 30732                           indf2	equ	0xFDF
 30733                           postinc2	equ	0xFDE
 30734                           postdec2	equ	0xFDD
 30735                           plusw2	equ	0xFDB
 30736                           fsr2h	equ	0xFDA
 30737                           fsr2l	equ	0xFD9
 30738                           status	equ	0xFD8
 30739                           
 30740 ;; *************** function _RADIO_WritePower *****************
 30741 ;; Defined at:
 30742 ;;		line 342 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 30743 ;; Parameters:    Size  Location     Type
 30744 ;;  power           1    wreg     char 
 30745 ;; Auto vars:     Size  Location     Type
 30746 ;;  power           1    6[BANK0 ] char 
 30747 ;;  paDac           1    5[BANK0 ] unsigned char 
 30748 ;;  ocp             1    4[BANK0 ] unsigned char 
 30749 ;; Return value:  Size  Location     Type
 30750 ;;                  1    wreg      void 
 30751 ;; Registers used:
 30752 ;;		wreg, status,2, status,0, cstack
 30753 ;; Tracked objects:
 30754 ;;		On entry : 0/0
 30755 ;;		On exit  : 0/0
 30756 ;;		Unchanged: 0/0
 30757 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30758 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30759 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30760 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30761 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30762 ;;Total ram usage:        3 bytes
 30763 ;; Hardware stack levels used:    1
 30764 ;; Hardware stack levels required when called:   10
 30765 ;; This function calls:
 30766 ;;		_RADIO_RegisterRead
 30767 ;;		_RADIO_RegisterWrite
 30768 ;; This function is called by:
 30769 ;;		_RADIO_WriteConfiguration
 30770 ;; This function uses a non-reentrant model
 30771 ;;
 30772                           
 30773                           	psect	text144
 30774  0066D4                     __ptext144:
 30775                           	opt stack 0
 30776  0066D4                     _RADIO_WritePower:
 30777                           	opt stack 17
 30778                           
 30779                           ;incstack = 0
 30780                           ;RADIO_WritePower@power stored from wreg
 30781  0066D4  0100               	movlb	0	; () banked
 30782  0066D6  6F66               	movwf	RADIO_WritePower@power& (0+255),b
 30783                           
 30784                           ;radio_driver_SX1276.c: 344: uint8_t paDac;
 30785                           ;radio_driver_SX1276.c: 345: uint8_t ocp;
 30786                           ;radio_driver_SX1276.c: 347: if (RadioConfiguration.paBoost == 0)
 30787  0066D8  0101               	movlb	1	; () banked
 30788  0066DA  5174               	movf	(_RadioConfiguration+29)& (0+255),w,b
 30789  0066DC  A4D8               	btfss	status,2,c
 30790  0066DE  D030               	goto	l199
 30791                           
 30792                           ; BSR set to: 1
 30793                           ;radio_driver_SX1276.c: 348: {
 30794                           ;radio_driver_SX1276.c: 350: if (power < -3)
 30795  0066E0  0100               	movlb	0	; () banked
 30796  0066E2  5166               	movf	RADIO_WritePower@power& (0+255),w,b
 30797  0066E4  0A80               	xorlw	128
 30798  0066E6  0F83               	addlw	131
 30799  0066E8  B0D8               	btfsc	status,0,c
 30800  0066EA  D002               	goto	l200
 30801                           
 30802                           ; BSR set to: 0
 30803                           ;radio_driver_SX1276.c: 351: {
 30804                           ;radio_driver_SX1276.c: 352: power = -3;
 30805  0066EC  0EFD               	movlw	253
 30806  0066EE  6F66               	movwf	RADIO_WritePower@power& (0+255),b
 30807  0066F0                     l200:
 30808                           
 30809                           ; BSR set to: 0
 30810                           ;radio_driver_SX1276.c: 353: }
 30811                           ;radio_driver_SX1276.c: 354: if (power > 15)
 30812                           
 30813                           ; BSR set to: 0
 30814  0066F0  5166               	movf	RADIO_WritePower@power& (0+255),w,b
 30815  0066F2  0A80               	xorlw	128
 30816  0066F4  0F70               	addlw	-144
 30817  0066F6  A0D8               	btfss	status,0,c
 30818  0066F8  D002               	goto	l201
 30819                           
 30820                           ; BSR set to: 0
 30821                           ;radio_driver_SX1276.c: 355: {
 30822                           ;radio_driver_SX1276.c: 356: power = 15;
 30823  0066FA  0E0F               	movlw	15
 30824  0066FC  6F66               	movwf	RADIO_WritePower@power& (0+255),b
 30825  0066FE                     l201:
 30826                           
 30827                           ; BSR set to: 0
 30828                           ;radio_driver_SX1276.c: 357: }
 30829                           ;radio_driver_SX1276.c: 359: paDac = RADIO_RegisterRead(0x4D);
 30830                           
 30831                           ; BSR set to: 0
 30832  0066FE  0E4D               	movlw	77
 30833  006700  EC07  F048         	call	_RADIO_RegisterRead
 30834  006704  0100               	movlb	0	; () banked
 30835  006706  6F65               	movwf	RADIO_WritePower@paDac& (0+255),b
 30836                           
 30837                           ; BSR set to: 0
 30838                           ;radio_driver_SX1276.c: 360: paDac &= ~(0x07);
 30839  006708  0EF8               	movlw	248
 30840  00670A  1765               	andwf	RADIO_WritePower@paDac& (0+255),f,b
 30841                           
 30842                           ; BSR set to: 0
 30843                           ;radio_driver_SX1276.c: 361: paDac |= 0x04;
 30844  00670C  8565               	bsf	RADIO_WritePower@paDac& (0+255),2,b
 30845                           
 30846                           ; BSR set to: 0
 30847                           ;radio_driver_SX1276.c: 362: RADIO_RegisterWrite(0x4D, paDac);
 30848  00670E  C065  F062         	movff	RADIO_WritePower@paDac,RADIO_RegisterWrite@value
 30849  006712  0E4D               	movlw	77
 30850  006714  ECDE  F048         	call	_RADIO_RegisterWrite
 30851                           
 30852                           ;radio_driver_SX1276.c: 364: if (power < 0)
 30853  006718  0100               	movlb	0	; () banked
 30854  00671A  AF66               	btfss	RADIO_WritePower@power& (0+255),7,b
 30855  00671C  D009               	goto	l202
 30856                           
 30857                           ; BSR set to: 0
 30858                           ;radio_driver_SX1276.c: 365: {
 30859                           ;radio_driver_SX1276.c: 369: power += 3;
 30860  00671E  0E03               	movlw	3
 30861  006720  2766               	addwf	RADIO_WritePower@power& (0+255),f,b
 30862                           
 30863                           ; BSR set to: 0
 30864                           ;radio_driver_SX1276.c: 370: RADIO_RegisterWrite(0x09, 0x20 | power);
 30865  006722  5166               	movf	RADIO_WritePower@power& (0+255),w,b
 30866  006724  0920               	iorlw	32
 30867  006726  6F62               	movwf	RADIO_RegisterWrite@value& (0+255),b
 30868  006728  0E09               	movlw	9
 30869  00672A  ECDE  F048         	call	_RADIO_RegisterWrite
 30870                           
 30871                           ;radio_driver_SX1276.c: 371: }
 30872  00672E  0012               	return	
 30873  006730                     l202:
 30874                           
 30875                           ;radio_driver_SX1276.c: 372: else
 30876                           ;radio_driver_SX1276.c: 373: {
 30877                           ;radio_driver_SX1276.c: 377: RADIO_RegisterWrite(0x09, 0x70 | power);
 30878  006730  0100               	movlb	0	; () banked
 30879  006732  5166               	movf	RADIO_WritePower@power& (0+255),w,b
 30880  006734  0970               	iorlw	112
 30881  006736  6F62               	movwf	RADIO_RegisterWrite@value& (0+255),b
 30882  006738  0E09               	movlw	9
 30883  00673A  ECDE  F048         	call	_RADIO_RegisterWrite
 30884                           
 30885                           ;radio_driver_SX1276.c: 378: }
 30886                           ;radio_driver_SX1276.c: 379: }
 30887  00673E  0012               	return	
 30888  006740                     l199:
 30889                           
 30890                           ;radio_driver_SX1276.c: 380: else
 30891                           ;radio_driver_SX1276.c: 381: {
 30892                           ;radio_driver_SX1276.c: 385: if (power < 2)
 30893  006740  0100               	movlb	0	; () banked
 30894  006742  5166               	movf	RADIO_WritePower@power& (0+255),w,b
 30895  006744  0A80               	xorlw	128
 30896  006746  0F7E               	addlw	-130
 30897  006748  B0D8               	btfsc	status,0,c
 30898  00674A  D002               	goto	l205
 30899                           
 30900                           ; BSR set to: 0
 30901                           ;radio_driver_SX1276.c: 386: {
 30902                           ;radio_driver_SX1276.c: 387: power = 2;
 30903  00674C  0E02               	movlw	2
 30904  00674E  6F66               	movwf	RADIO_WritePower@power& (0+255),b
 30905  006750                     l205:
 30906                           
 30907                           ; BSR set to: 0
 30908                           ;radio_driver_SX1276.c: 388: }
 30909                           ;radio_driver_SX1276.c: 391: if (power >= 20)
 30910                           
 30911                           ; BSR set to: 0
 30912  006750  5166               	movf	RADIO_WritePower@power& (0+255),w,b
 30913  006752  0A80               	xorlw	128
 30914  006754  0F6C               	addlw	-148
 30915  006756  A0D8               	btfss	status,0,c
 30916  006758  D002               	goto	l206
 30917                           
 30918                           ; BSR set to: 0
 30919                           ;radio_driver_SX1276.c: 392: {
 30920                           ;radio_driver_SX1276.c: 393: power = 20;
 30921  00675A  0E14               	movlw	20
 30922  00675C  D006               	goto	L22
 30923  00675E                     l206:
 30924                           
 30925                           ; BSR set to: 0
 30926                           ;radio_driver_SX1276.c: 395: else if (power > 17)
 30927                           
 30928                           ; BSR set to: 0
 30929  00675E  5166               	movf	RADIO_WritePower@power& (0+255),w,b
 30930  006760  0A80               	xorlw	128
 30931  006762  0F6E               	addlw	-146
 30932  006764  A0D8               	btfss	status,0,c
 30933  006766  D002               	goto	l208
 30934                           
 30935                           ; BSR set to: 0
 30936                           ;radio_driver_SX1276.c: 396: {
 30937                           ;radio_driver_SX1276.c: 397: power = 17;
 30938  006768  0E11               	movlw	17
 30939  00676A                     L22:
 30940  00676A  6F66               	movwf	RADIO_WritePower@power& (0+255),b
 30941  00676C                     l208:
 30942                           
 30943                           ; BSR set to: 0
 30944                           ;radio_driver_SX1276.c: 398: }
 30945                           ;radio_driver_SX1276.c: 400: ocp = RADIO_RegisterRead(0x0B);
 30946                           
 30947                           ; BSR set to: 0
 30948                           
 30949                           ; BSR set to: 0
 30950  00676C  0E0B               	movlw	11
 30951  00676E  EC07  F048         	call	_RADIO_RegisterRead
 30952  006772  0100               	movlb	0	; () banked
 30953  006774  6F64               	movwf	RADIO_WritePower@ocp& (0+255),b
 30954                           
 30955                           ; BSR set to: 0
 30956                           ;radio_driver_SX1276.c: 401: paDac = RADIO_RegisterRead(0x4D);
 30957  006776  0E4D               	movlw	77
 30958  006778  EC07  F048         	call	_RADIO_RegisterRead
 30959  00677C  0100               	movlb	0	; () banked
 30960  00677E  6F65               	movwf	RADIO_WritePower@paDac& (0+255),b
 30961                           
 30962                           ; BSR set to: 0
 30963                           ;radio_driver_SX1276.c: 402: paDac &= ~(0x07);
 30964  006780  0EF8               	movlw	248
 30965  006782  1765               	andwf	RADIO_WritePower@paDac& (0+255),f,b
 30966                           
 30967                           ; BSR set to: 0
 30968                           ;radio_driver_SX1276.c: 403: if (power == 20)
 30969  006784  0E14               	movlw	20
 30970  006786  1966               	xorwf	RADIO_WritePower@power& (0+255),w,b
 30971  006788  A4D8               	btfss	status,2,c
 30972  00678A  D006               	goto	l209
 30973                           
 30974                           ; BSR set to: 0
 30975                           ;radio_driver_SX1276.c: 404: {
 30976                           ;radio_driver_SX1276.c: 405: paDac |= 0x07;
 30977  00678C  0E07               	movlw	7
 30978  00678E  1365               	iorwf	RADIO_WritePower@paDac& (0+255),f,b
 30979                           
 30980                           ; BSR set to: 0
 30981                           ;radio_driver_SX1276.c: 406: power = 15;
 30982  006790  0E0F               	movlw	15
 30983  006792  6F66               	movwf	RADIO_WritePower@power& (0+255),b
 30984                           
 30985                           ; BSR set to: 0
 30986                           ;radio_driver_SX1276.c: 407: ocp &= ~(0x20);
 30987  006794  9B64               	bcf	RADIO_WritePower@ocp& (0+255),5,b
 30988                           
 30989                           ;radio_driver_SX1276.c: 408: }
 30990  006796  D004               	goto	l210
 30991  006798                     l209:
 30992                           
 30993                           ; BSR set to: 0
 30994                           ;radio_driver_SX1276.c: 409: else
 30995                           ;radio_driver_SX1276.c: 410: {
 30996                           ;radio_driver_SX1276.c: 411: paDac |= 0x04;
 30997                           
 30998                           ; BSR set to: 0
 30999  006798  8565               	bsf	RADIO_WritePower@paDac& (0+255),2,b
 31000                           
 31001                           ; BSR set to: 0
 31002                           ;radio_driver_SX1276.c: 412: power -= 2;
 31003  00679A  0EFE               	movlw	254
 31004  00679C  2766               	addwf	RADIO_WritePower@power& (0+255),f,b
 31005                           
 31006                           ; BSR set to: 0
 31007                           ;radio_driver_SX1276.c: 413: ocp |= 0x20;
 31008  00679E  8B64               	bsf	RADIO_WritePower@ocp& (0+255),5,b
 31009  0067A0                     l210:
 31010                           
 31011                           ; BSR set to: 0
 31012                           ;radio_driver_SX1276.c: 414: }
 31013                           ;radio_driver_SX1276.c: 416: RADIO_RegisterWrite(0x4D, paDac);
 31014                           
 31015                           ; BSR set to: 0
 31016  0067A0  C065  F062         	movff	RADIO_WritePower@paDac,RADIO_RegisterWrite@value
 31017  0067A4  0E4D               	movlw	77
 31018  0067A6  ECDE  F048         	call	_RADIO_RegisterWrite
 31019                           
 31020                           ;radio_driver_SX1276.c: 417: RADIO_RegisterWrite(0x09, 0x80 | power);
 31021  0067AA  0100               	movlb	0	; () banked
 31022  0067AC  5166               	movf	RADIO_WritePower@power& (0+255),w,b
 31023  0067AE  0980               	iorlw	128
 31024  0067B0  6F62               	movwf	RADIO_RegisterWrite@value& (0+255),b
 31025  0067B2  0E09               	movlw	9
 31026  0067B4  ECDE  F048         	call	_RADIO_RegisterWrite
 31027                           
 31028                           ;radio_driver_SX1276.c: 418: RADIO_RegisterWrite(0x0B, ocp);
 31029  0067B8  C064  F062         	movff	RADIO_WritePower@ocp,RADIO_RegisterWrite@value
 31030  0067BC  0E0B               	movlw	11
 31031  0067BE  ECDE  F048         	call	_RADIO_RegisterWrite
 31032  0067C2  0012               	return	
 31033  0067C4                     __end_of_RADIO_WritePower:
 31034                           	opt stack 0
 31035                           tosu	equ	0xFFF
 31036                           tosh	equ	0xFFE
 31037                           tosl	equ	0xFFD
 31038                           pclath	equ	0xFFA
 31039                           tblptru	equ	0xFF8
 31040                           tblptrh	equ	0xFF7
 31041                           tblptrl	equ	0xFF6
 31042                           tablat	equ	0xFF5
 31043                           prodh	equ	0xFF4
 31044                           prodl	equ	0xFF3
 31045                           intcon	equ	0xFF2
 31046                           intcon2	equ	0xFF1
 31047                           intcon3	equ	0xFF0
 31048                           indf0	equ	0xFEF
 31049                           postinc0	equ	0xFEE
 31050                           fsr0h	equ	0xFEA
 31051                           fsr0l	equ	0xFE9
 31052                           wreg	equ	0xFE8
 31053                           postinc1	equ	0xFE6
 31054                           postdec1	equ	0xFE5
 31055                           plusw1	equ	0xFE3
 31056                           fsr1h	equ	0xFE2
 31057                           fsr1l	equ	0xFE1
 31058                           indf2	equ	0xFDF
 31059                           postinc2	equ	0xFDE
 31060                           postdec2	equ	0xFDD
 31061                           plusw2	equ	0xFDB
 31062                           fsr2h	equ	0xFDA
 31063                           fsr2l	equ	0xFD9
 31064                           status	equ	0xFD8
 31065                           
 31066 ;; *************** function _RADIO_WriteFSKFrequencyDeviation *****************
 31067 ;; Defined at:
 31068 ;;		line 294 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 31069 ;; Parameters:    Size  Location     Type
 31070 ;;  frequencyDev    4   13[BANK0 ] unsigned long 
 31071 ;; Auto vars:     Size  Location     Type
 31072 ;;  num             4   17[BANK0 ] unsigned long 
 31073 ;; Return value:  Size  Location     Type
 31074 ;;                  1    wreg      void 
 31075 ;; Registers used:
 31076 ;;		wreg, status,2, status,0, cstack
 31077 ;; Tracked objects:
 31078 ;;		On entry : 0/0
 31079 ;;		On exit  : 0/0
 31080 ;;		Unchanged: 0/0
 31081 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 31082 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31083 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31084 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31085 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31086 ;;Total ram usage:        8 bytes
 31087 ;; Hardware stack levels used:    1
 31088 ;; Hardware stack levels required when called:   10
 31089 ;; This function calls:
 31090 ;;		_RADIO_RegisterWrite
 31091 ;;		___lldiv
 31092 ;; This function is called by:
 31093 ;;		_RADIO_WriteConfiguration
 31094 ;; This function uses a non-reentrant model
 31095 ;;
 31096                           
 31097                           	psect	text145
 31098  007ECA                     __ptext145:
 31099                           	opt stack 0
 31100  007ECA                     _RADIO_WriteFSKFrequencyDeviation:
 31101                           	opt stack 17
 31102                           
 31103                           ;radio_driver_SX1276.c: 296: uint32_t num;
 31104                           ;radio_driver_SX1276.c: 303: num = frequencyDeviation;
 31105                           
 31106                           ;incstack = 0
 31107  007ECA  C06D  F071         	movff	RADIO_WriteFSKFrequencyDeviation@frequencyDeviation,RADIO_WriteFSKFrequencyDeviat
      +                          ion@num
 31108  007ECE  C06E  F072         	movff	RADIO_WriteFSKFrequencyDeviation@frequencyDeviation+1,RADIO_WriteFSKFrequencyDevi
      +                          ation@num+1
 31109  007ED2  C06F  F073         	movff	RADIO_WriteFSKFrequencyDeviation@frequencyDeviation+2,RADIO_WriteFSKFrequencyDevi
      +                          ation@num+2
 31110  007ED6  C070  F074         	movff	RADIO_WriteFSKFrequencyDeviation@frequencyDeviation+3,RADIO_WriteFSKFrequencyDevi
      +                          ation@num+3
 31111                           
 31112                           ;radio_driver_SX1276.c: 304: num <<= (8);
 31113  007EDA  C073  F074         	movff	RADIO_WriteFSKFrequencyDeviation@num+2,RADIO_WriteFSKFrequencyDeviation@num+3
 31114  007EDE  C072  F073         	movff	RADIO_WriteFSKFrequencyDeviation@num+1,RADIO_WriteFSKFrequencyDeviation@num+2
 31115  007EE2  C071  F072         	movff	RADIO_WriteFSKFrequencyDeviation@num,RADIO_WriteFSKFrequencyDeviation@num+1
 31116  007EE6  0100               	movlb	0	; () banked
 31117  007EE8  6B71               	clrf	RADIO_WriteFSKFrequencyDeviation@num& (0+255),b
 31118                           
 31119                           ; BSR set to: 0
 31120                           ;radio_driver_SX1276.c: 305: num /= 15625;
 31121  007EEA  C071  F060         	movff	RADIO_WriteFSKFrequencyDeviation@num,___lldiv@dividend
 31122  007EEE  C072  F061         	movff	RADIO_WriteFSKFrequencyDeviation@num+1,___lldiv@dividend+1
 31123  007EF2  C073  F062         	movff	RADIO_WriteFSKFrequencyDeviation@num+2,___lldiv@dividend+2
 31124  007EF6  C074  F063         	movff	RADIO_WriteFSKFrequencyDeviation@num+3,___lldiv@dividend+3
 31125  007EFA  0E09               	movlw	9
 31126  007EFC  6F64               	movwf	___lldiv@divisor& (0+255),b
 31127  007EFE  0E3D               	movlw	61
 31128  007F00  6F65               	movwf	(___lldiv@divisor+1)& (0+255),b
 31129  007F02  0E00               	movlw	0
 31130  007F04  6F66               	movwf	(___lldiv@divisor+2)& (0+255),b
 31131  007F06  0E00               	movlw	0
 31132  007F08  6F67               	movwf	(___lldiv@divisor+3)& (0+255),b
 31133  007F0A  EC0A  F03D         	call	___lldiv	;wreg free
 31134  007F0E  C060  F071         	movff	?___lldiv,RADIO_WriteFSKFrequencyDeviation@num
 31135  007F12  C061  F072         	movff	?___lldiv+1,RADIO_WriteFSKFrequencyDeviation@num+1
 31136  007F16  C062  F073         	movff	?___lldiv+2,RADIO_WriteFSKFrequencyDeviation@num+2
 31137  007F1A  C063  F074         	movff	?___lldiv+3,RADIO_WriteFSKFrequencyDeviation@num+3
 31138                           
 31139                           ;radio_driver_SX1276.c: 309: RADIO_RegisterWrite(0x04, (num >> (8)) & 0xFF);
 31140  007F1E  C072  F062         	movff	RADIO_WriteFSKFrequencyDeviation@num+1,RADIO_RegisterWrite@value
 31141  007F22  0E04               	movlw	4
 31142  007F24  ECDE  F048         	call	_RADIO_RegisterWrite
 31143                           
 31144                           ;radio_driver_SX1276.c: 310: RADIO_RegisterWrite(0x05, num & 0xFF);
 31145  007F28  C071  F062         	movff	RADIO_WriteFSKFrequencyDeviation@num,RADIO_RegisterWrite@value
 31146  007F2C  0E05               	movlw	5
 31147  007F2E  ECDE  F048         	call	_RADIO_RegisterWrite
 31148  007F32  0012               	return		;funcret
 31149  007F34                     __end_of_RADIO_WriteFSKFrequencyDeviation:
 31150                           	opt stack 0
 31151                           tosu	equ	0xFFF
 31152                           tosh	equ	0xFFE
 31153                           tosl	equ	0xFFD
 31154                           pclath	equ	0xFFA
 31155                           tblptru	equ	0xFF8
 31156                           tblptrh	equ	0xFF7
 31157                           tblptrl	equ	0xFF6
 31158                           tablat	equ	0xFF5
 31159                           prodh	equ	0xFF4
 31160                           prodl	equ	0xFF3
 31161                           intcon	equ	0xFF2
 31162                           intcon2	equ	0xFF1
 31163                           intcon3	equ	0xFF0
 31164                           indf0	equ	0xFEF
 31165                           postinc0	equ	0xFEE
 31166                           fsr0h	equ	0xFEA
 31167                           fsr0l	equ	0xFE9
 31168                           wreg	equ	0xFE8
 31169                           postinc1	equ	0xFE6
 31170                           postdec1	equ	0xFE5
 31171                           plusw1	equ	0xFE3
 31172                           fsr1h	equ	0xFE2
 31173                           fsr1l	equ	0xFE1
 31174                           indf2	equ	0xFDF
 31175                           postinc2	equ	0xFDE
 31176                           postdec2	equ	0xFDD
 31177                           plusw2	equ	0xFDB
 31178                           fsr2h	equ	0xFDA
 31179                           fsr2l	equ	0xFD9
 31180                           status	equ	0xFD8
 31181                           
 31182 ;; *************** function _RADIO_WriteFSKBitRate *****************
 31183 ;; Defined at:
 31184 ;;		line 316 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 31185 ;; Parameters:    Size  Location     Type
 31186 ;;  bitRate         4   13[BANK0 ] unsigned long 
 31187 ;; Auto vars:     Size  Location     Type
 31188 ;;  num             4   17[BANK0 ] unsigned long 
 31189 ;; Return value:  Size  Location     Type
 31190 ;;                  1    wreg      void 
 31191 ;; Registers used:
 31192 ;;		wreg, status,2, status,0, cstack
 31193 ;; Tracked objects:
 31194 ;;		On entry : 0/0
 31195 ;;		On exit  : 0/0
 31196 ;;		Unchanged: 0/0
 31197 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 31198 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31199 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31200 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31201 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31202 ;;Total ram usage:        8 bytes
 31203 ;; Hardware stack levels used:    1
 31204 ;; Hardware stack levels required when called:   10
 31205 ;; This function calls:
 31206 ;;		_RADIO_RegisterWrite
 31207 ;;		___lldiv
 31208 ;; This function is called by:
 31209 ;;		_RADIO_WriteConfiguration
 31210 ;; This function uses a non-reentrant model
 31211 ;;
 31212                           
 31213                           	psect	text146
 31214  007F34                     __ptext146:
 31215                           	opt stack 0
 31216  007F34                     _RADIO_WriteFSKBitRate:
 31217                           	opt stack 17
 31218                           
 31219                           ;radio_driver_SX1276.c: 318: uint32_t num;
 31220                           ;radio_driver_SX1276.c: 320: num = 32000000;
 31221                           
 31222                           ;incstack = 0
 31223  007F34  0E00               	movlw	0
 31224  007F36  0100               	movlb	0	; () banked
 31225  007F38  6F71               	movwf	RADIO_WriteFSKBitRate@num& (0+255),b
 31226  007F3A  0E48               	movlw	72
 31227  007F3C  6F72               	movwf	(RADIO_WriteFSKBitRate@num+1)& (0+255),b
 31228  007F3E  0EE8               	movlw	232
 31229  007F40  6F73               	movwf	(RADIO_WriteFSKBitRate@num+2)& (0+255),b
 31230  007F42  0E01               	movlw	1
 31231  007F44  6F74               	movwf	(RADIO_WriteFSKBitRate@num+3)& (0+255),b
 31232                           
 31233                           ; BSR set to: 0
 31234                           ;radio_driver_SX1276.c: 321: num /= bitRate;
 31235  007F46  C071  F060         	movff	RADIO_WriteFSKBitRate@num,___lldiv@dividend
 31236  007F4A  C072  F061         	movff	RADIO_WriteFSKBitRate@num+1,___lldiv@dividend+1
 31237  007F4E  C073  F062         	movff	RADIO_WriteFSKBitRate@num+2,___lldiv@dividend+2
 31238  007F52  C074  F063         	movff	RADIO_WriteFSKBitRate@num+3,___lldiv@dividend+3
 31239  007F56  C06D  F064         	movff	RADIO_WriteFSKBitRate@bitRate,___lldiv@divisor
 31240  007F5A  C06E  F065         	movff	RADIO_WriteFSKBitRate@bitRate+1,___lldiv@divisor+1
 31241  007F5E  C06F  F066         	movff	RADIO_WriteFSKBitRate@bitRate+2,___lldiv@divisor+2
 31242  007F62  C070  F067         	movff	RADIO_WriteFSKBitRate@bitRate+3,___lldiv@divisor+3
 31243  007F66  EC0A  F03D         	call	___lldiv	;wreg free
 31244  007F6A  C060  F071         	movff	?___lldiv,RADIO_WriteFSKBitRate@num
 31245  007F6E  C061  F072         	movff	?___lldiv+1,RADIO_WriteFSKBitRate@num+1
 31246  007F72  C062  F073         	movff	?___lldiv+2,RADIO_WriteFSKBitRate@num+2
 31247  007F76  C063  F074         	movff	?___lldiv+3,RADIO_WriteFSKBitRate@num+3
 31248                           
 31249                           ;radio_driver_SX1276.c: 325: RADIO_RegisterWrite(0x02, (num >> (8)) & 0xFF);
 31250  007F7A  C072  F062         	movff	RADIO_WriteFSKBitRate@num+1,RADIO_RegisterWrite@value
 31251  007F7E  0E02               	movlw	2
 31252  007F80  ECDE  F048         	call	_RADIO_RegisterWrite
 31253                           
 31254                           ;radio_driver_SX1276.c: 326: RADIO_RegisterWrite(0x03, num & 0xFF);
 31255  007F84  C071  F062         	movff	RADIO_WriteFSKBitRate@num,RADIO_RegisterWrite@value
 31256  007F88  0E03               	movlw	3
 31257  007F8A  ECDE  F048         	call	_RADIO_RegisterWrite
 31258                           
 31259                           ;radio_driver_SX1276.c: 327: RADIO_RegisterWrite(0x5D, 0x00);
 31260  007F8E  0E00               	movlw	0
 31261  007F90  0100               	movlb	0	; () banked
 31262  007F92  6F62               	movwf	RADIO_RegisterWrite@value& (0+255),b
 31263  007F94  0E5D               	movlw	93
 31264  007F96  ECDE  F048         	call	_RADIO_RegisterWrite
 31265  007F9A  0012               	return		;funcret
 31266  007F9C                     __end_of_RADIO_WriteFSKBitRate:
 31267                           	opt stack 0
 31268                           tosu	equ	0xFFF
 31269                           tosh	equ	0xFFE
 31270                           tosl	equ	0xFFD
 31271                           pclath	equ	0xFFA
 31272                           tblptru	equ	0xFF8
 31273                           tblptrh	equ	0xFF7
 31274                           tblptrl	equ	0xFF6
 31275                           tablat	equ	0xFF5
 31276                           prodh	equ	0xFF4
 31277                           prodl	equ	0xFF3
 31278                           intcon	equ	0xFF2
 31279                           intcon2	equ	0xFF1
 31280                           intcon3	equ	0xFF0
 31281                           indf0	equ	0xFEF
 31282                           postinc0	equ	0xFEE
 31283                           fsr0h	equ	0xFEA
 31284                           fsr0l	equ	0xFE9
 31285                           wreg	equ	0xFE8
 31286                           postinc1	equ	0xFE6
 31287                           postdec1	equ	0xFE5
 31288                           plusw1	equ	0xFE3
 31289                           fsr1h	equ	0xFE2
 31290                           fsr1l	equ	0xFE1
 31291                           indf2	equ	0xFDF
 31292                           postinc2	equ	0xFDE
 31293                           postdec2	equ	0xFDD
 31294                           plusw2	equ	0xFDB
 31295                           fsr2h	equ	0xFDA
 31296                           fsr2l	equ	0xFD9
 31297                           status	equ	0xFD8
 31298                           
 31299 ;; *************** function _PrepareJoinRequestFrame *****************
 31300 ;; Defined at:
 31301 ;;		line 1806 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 31302 ;; Parameters:    Size  Location     Type
 31303 ;;		None
 31304 ;; Auto vars:     Size  Location     Type
 31305 ;;  mic             4  116[BANK0 ] unsigned long 
 31306 ;;  bufferIndex     1  122[BANK0 ] unsigned char 
 31307 ;;  iCtr            1  121[BANK0 ] unsigned char 
 31308 ;;  mhdr            1  120[BANK0 ] struct .
 31309 ;; Return value:  Size  Location     Type
 31310 ;;                  1    wreg      unsigned char 
 31311 ;; Registers used:
 31312 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 31313 ;; Tracked objects:
 31314 ;;		On entry : 0/0
 31315 ;;		On exit  : 0/0
 31316 ;;		Unchanged: 0/0
 31317 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 31318 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31319 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31320 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31321 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31322 ;;Total ram usage:       11 bytes
 31323 ;; Hardware stack levels used:    1
 31324 ;; Hardware stack levels required when called:   13
 31325 ;; This function calls:
 31326 ;;		_ComputeMic
 31327 ;;		_Random
 31328 ;;		_memcpy
 31329 ;;		_memset
 31330 ;; This function is called by:
 31331 ;;		_LORAWAN_Join
 31332 ;; This function uses a non-reentrant model
 31333 ;;
 31334                           
 31335                           	psect	text147
 31336  004DD0                     __ptext147:
 31337                           	opt stack 0
 31338  004DD0                     _PrepareJoinRequestFrame:
 31339                           	opt stack 16
 31340                           
 31341                           ;lorawan.c: 1808: uint8_t bufferIndex = 0, iCtr;
 31342                           
 31343                           ;incstack = 0
 31344  004DD0  0E00               	movlw	0
 31345  004DD2  0100               	movlb	0	; () banked
 31346  004DD4  6FDA               	movwf	PrepareJoinRequestFrame@bufferIndex& (0+255),b
 31347                           
 31348                           ; BSR set to: 0
 31349                           ;lorawan.c: 1809: Mhdr_t mhdr;
 31350                           ;lorawan.c: 1810: uint32_t mic;
 31351                           ;lorawan.c: 1812: memset (macBuffer, 0, sizeof(macBuffer) );
 31352  004DD6  0E8F               	movlw	low _macBuffer
 31353  004DD8  6F60               	movwf	memset@p1& (0+255),b
 31354  004DDA  0E06               	movlw	high _macBuffer
 31355  004DDC  6F61               	movwf	(memset@p1+1)& (0+255),b
 31356  004DDE  0E00               	movlw	0
 31357  004DE0  6F63               	movwf	(memset@c+1)& (0+255),b
 31358  004DE2  0E00               	movlw	0
 31359  004DE4  6F62               	movwf	memset@c& (0+255),b
 31360  004DE6  0E01               	movlw	1
 31361  004DE8  6F65               	movwf	(memset@n+1)& (0+255),b
 31362  004DEA  0E0F               	movlw	15
 31363  004DEC  6F64               	movwf	memset@n& (0+255),b
 31364  004DEE  ECD6  F046         	call	_memset	;wreg free
 31365                           
 31366                           ;lorawan.c: 1814: mhdr.bits.mType = FRAME_TYPE_JOIN_REQ;
 31367  004DF2  0100               	movlb	0	; () banked
 31368  004DF4  9BD8               	bcf	PrepareJoinRequestFrame@mhdr& (0+255),5,b
 31369  004DF6  9DD8               	bcf	PrepareJoinRequestFrame@mhdr& (0+255),6,b
 31370  004DF8  9FD8               	bcf	PrepareJoinRequestFrame@mhdr& (0+255),7,b
 31371                           
 31372                           ; BSR set to: 0
 31373                           ;lorawan.c: 1815: mhdr.bits.major = 0;
 31374  004DFA  0EFC               	movlw	-4
 31375  004DFC  17D8               	andwf	PrepareJoinRequestFrame@mhdr& (0+255),f,b
 31376                           
 31377                           ; BSR set to: 0
 31378                           ;lorawan.c: 1816: mhdr.bits.rfu = 0;
 31379  004DFE  95D8               	bcf	PrepareJoinRequestFrame@mhdr& (0+255),2,b
 31380  004E00  97D8               	bcf	PrepareJoinRequestFrame@mhdr& (0+255),3,b
 31381  004E02  99D8               	bcf	PrepareJoinRequestFrame@mhdr& (0+255),4,b
 31382                           
 31383                           ; BSR set to: 0
 31384                           ;lorawan.c: 1818: macBuffer[bufferIndex++] = mhdr.value;
 31385  004E04  51DA               	movf	PrepareJoinRequestFrame@bufferIndex& (0+255),w,b
 31386  004E06  0D01               	mullw	1
 31387  004E08  0E8F               	movlw	low _macBuffer
 31388  004E0A  24F3               	addwf	prodl,w,c
 31389  004E0C  6ED9               	movwf	fsr2l,c
 31390  004E0E  0E06               	movlw	high _macBuffer
 31391  004E10  20F4               	addwfc	prodh,w,c
 31392  004E12  6EDA               	movwf	fsr2h,c
 31393  004E14  C0D8  FFDF         	movff	PrepareJoinRequestFrame@mhdr,indf2
 31394                           
 31395                           ; BSR set to: 0
 31396  004E18  2BDA               	incf	PrepareJoinRequestFrame@bufferIndex& (0+255),f,b
 31397                           
 31398                           ; BSR set to: 0
 31399                           ;lorawan.c: 1820: for(iCtr = 0; iCtr < 8; iCtr ++)
 31400  004E1A  0E00               	movlw	0
 31401  004E1C  6FD9               	movwf	PrepareJoinRequestFrame@iCtr& (0+255),b
 31402  004E1E                     l12433:
 31403                           
 31404                           ; BSR set to: 0
 31405  004E1E  0E07               	movlw	7
 31406  004E20  65D9               	cpfsgt	PrepareJoinRequestFrame@iCtr& (0+255),b
 31407  004E22  D001               	goto	l1284
 31408  004E24  D022               	goto	u13620
 31409  004E26                     l1284:
 31410                           
 31411                           ; BSR set to: 0
 31412                           ;lorawan.c: 1821: {
 31413                           ;lorawan.c: 1822: macBuffer[bufferIndex + iCtr] = loRa.activationParameters.applicationE
      +                          ui.buffer[7 - iCtr];
 31414                           
 31415                           ; BSR set to: 0
 31416  004E26  51D9               	movf	PrepareJoinRequestFrame@iCtr& (0+255),w,b
 31417  004E28  6FD0               	movwf	??_PrepareJoinRequestFrame& (0+255),b
 31418  004E2A  6BD1               	clrf	(??_PrepareJoinRequestFrame+1)& (0+255),b
 31419  004E2C  1FD0               	comf	??_PrepareJoinRequestFrame& (0+255),f,b
 31420  004E2E  1FD1               	comf	(??_PrepareJoinRequestFrame+1)& (0+255),f,b
 31421  004E30  4BD0               	infsnz	??_PrepareJoinRequestFrame& (0+255),f,b
 31422  004E32  2BD1               	incf	(??_PrepareJoinRequestFrame+1)& (0+255),f,b
 31423  004E34  0E07               	movlw	7
 31424  004E36  27D0               	addwf	??_PrepareJoinRequestFrame& (0+255),f,b
 31425  004E38  0E00               	movlw	0
 31426  004E3A  23D1               	addwfc	(??_PrepareJoinRequestFrame+1)& (0+255),f,b
 31427  004E3C  0E58               	movlw	low (_loRa+82)
 31428  004E3E  25D0               	addwf	??_PrepareJoinRequestFrame& (0+255),w,b
 31429  004E40  6ED9               	movwf	fsr2l,c
 31430  004E42  0E02               	movlw	high (_loRa+82)
 31431  004E44  21D1               	addwfc	(??_PrepareJoinRequestFrame+1)& (0+255),w,b
 31432  004E46  6EDA               	movwf	fsr2h,c
 31433  004E48  51D9               	movf	PrepareJoinRequestFrame@iCtr& (0+255),w,b
 31434  004E4A  C0DA  F0D2         	movff	PrepareJoinRequestFrame@bufferIndex,??_PrepareJoinRequestFrame+2
 31435  004E4E  6BD3               	clrf	(??_PrepareJoinRequestFrame+3)& (0+255),b
 31436  004E50  27D2               	addwf	(??_PrepareJoinRequestFrame+2)& (0+255),f,b
 31437  004E52  0E00               	movlw	0
 31438  004E54  23D3               	addwfc	(??_PrepareJoinRequestFrame+3)& (0+255),f,b
 31439  004E56  0E8F               	movlw	low _macBuffer
 31440  004E58  25D2               	addwf	(??_PrepareJoinRequestFrame+2)& (0+255),w,b
 31441  004E5A  6EE9               	movwf	fsr0l,c
 31442  004E5C  0E06               	movlw	high _macBuffer
 31443  004E5E  21D3               	addwfc	(??_PrepareJoinRequestFrame+3)& (0+255),w,b
 31444  004E60  6EEA               	movwf	fsr0h,c
 31445  004E62  CFDF FFEF          	movff	indf2,indf0
 31446                           
 31447                           ; BSR set to: 0
 31448  004E66  2BD9               	incf	PrepareJoinRequestFrame@iCtr& (0+255),f,b
 31449  004E68  D7DA               	goto	l12433
 31450  004E6A                     u13620:
 31451                           
 31452                           ; BSR set to: 0
 31453                           ;lorawan.c: 1823: }
 31454                           ;lorawan.c: 1824: bufferIndex = bufferIndex + sizeof(loRa.activationParameters.applicati
      +                          onEui);
 31455                           
 31456                           ; BSR set to: 0
 31457  004E6A  51DA               	movf	PrepareJoinRequestFrame@bufferIndex& (0+255),w,b
 31458  004E6C  0F08               	addlw	8
 31459  004E6E  6FDA               	movwf	PrepareJoinRequestFrame@bufferIndex& (0+255),b
 31460                           
 31461                           ; BSR set to: 0
 31462                           ;lorawan.c: 1827: for (iCtr = 0; iCtr < 8; iCtr ++)
 31463  004E70  0E00               	movlw	0
 31464  004E72  6FD9               	movwf	PrepareJoinRequestFrame@iCtr& (0+255),b
 31465  004E74                     l12447:
 31466                           
 31467                           ; BSR set to: 0
 31468  004E74  0E07               	movlw	7
 31469  004E76  65D9               	cpfsgt	PrepareJoinRequestFrame@iCtr& (0+255),b
 31470  004E78  D001               	goto	l1286
 31471  004E7A  D022               	goto	u13640
 31472  004E7C                     l1286:
 31473                           
 31474                           ; BSR set to: 0
 31475                           ;lorawan.c: 1828: {
 31476                           ;lorawan.c: 1829: macBuffer[bufferIndex + iCtr] = loRa.activationParameters.deviceEui.bu
      +                          ffer[7 - iCtr];
 31477                           
 31478                           ; BSR set to: 0
 31479  004E7C  51D9               	movf	PrepareJoinRequestFrame@iCtr& (0+255),w,b
 31480  004E7E  6FD0               	movwf	??_PrepareJoinRequestFrame& (0+255),b
 31481  004E80  6BD1               	clrf	(??_PrepareJoinRequestFrame+1)& (0+255),b
 31482  004E82  1FD0               	comf	??_PrepareJoinRequestFrame& (0+255),f,b
 31483  004E84  1FD1               	comf	(??_PrepareJoinRequestFrame+1)& (0+255),f,b
 31484  004E86  4BD0               	infsnz	??_PrepareJoinRequestFrame& (0+255),f,b
 31485  004E88  2BD1               	incf	(??_PrepareJoinRequestFrame+1)& (0+255),f,b
 31486  004E8A  0E07               	movlw	7
 31487  004E8C  27D0               	addwf	??_PrepareJoinRequestFrame& (0+255),f,b
 31488  004E8E  0E00               	movlw	0
 31489  004E90  23D1               	addwfc	(??_PrepareJoinRequestFrame+1)& (0+255),f,b
 31490  004E92  0E60               	movlw	low (_loRa+90)
 31491  004E94  25D0               	addwf	??_PrepareJoinRequestFrame& (0+255),w,b
 31492  004E96  6ED9               	movwf	fsr2l,c
 31493  004E98  0E02               	movlw	high (_loRa+90)
 31494  004E9A  21D1               	addwfc	(??_PrepareJoinRequestFrame+1)& (0+255),w,b
 31495  004E9C  6EDA               	movwf	fsr2h,c
 31496  004E9E  51D9               	movf	PrepareJoinRequestFrame@iCtr& (0+255),w,b
 31497  004EA0  C0DA  F0D2         	movff	PrepareJoinRequestFrame@bufferIndex,??_PrepareJoinRequestFrame+2
 31498  004EA4  6BD3               	clrf	(??_PrepareJoinRequestFrame+3)& (0+255),b
 31499  004EA6  27D2               	addwf	(??_PrepareJoinRequestFrame+2)& (0+255),f,b
 31500  004EA8  0E00               	movlw	0
 31501  004EAA  23D3               	addwfc	(??_PrepareJoinRequestFrame+3)& (0+255),f,b
 31502  004EAC  0E8F               	movlw	low _macBuffer
 31503  004EAE  25D2               	addwf	(??_PrepareJoinRequestFrame+2)& (0+255),w,b
 31504  004EB0  6EE9               	movwf	fsr0l,c
 31505  004EB2  0E06               	movlw	high _macBuffer
 31506  004EB4  21D3               	addwfc	(??_PrepareJoinRequestFrame+3)& (0+255),w,b
 31507  004EB6  6EEA               	movwf	fsr0h,c
 31508  004EB8  CFDF FFEF          	movff	indf2,indf0
 31509                           
 31510                           ; BSR set to: 0
 31511  004EBC  2BD9               	incf	PrepareJoinRequestFrame@iCtr& (0+255),f,b
 31512  004EBE  D7DA               	goto	l12447
 31513  004EC0                     u13640:
 31514                           
 31515                           ; BSR set to: 0
 31516                           ;lorawan.c: 1830: }
 31517                           ;lorawan.c: 1831: bufferIndex = bufferIndex + sizeof( loRa.activationParameters.deviceEu
      +                          i );
 31518                           
 31519                           ; BSR set to: 0
 31520  004EC0  51DA               	movf	PrepareJoinRequestFrame@bufferIndex& (0+255),w,b
 31521  004EC2  0F08               	addlw	8
 31522  004EC4  6FDA               	movwf	PrepareJoinRequestFrame@bufferIndex& (0+255),b
 31523                           
 31524                           ; BSR set to: 0
 31525                           ;lorawan.c: 1833: loRa.devNonce = Random ((65535U));
 31526  004EC6  0EFF               	movlw	255
 31527  004EC8  6FAE               	movwf	(Random@max+1)& (0+255),b
 31528  004ECA  69AD               	setf	Random@max& (0+255),b
 31529  004ECC  EC9C  F048         	call	_Random	;wreg free
 31530  004ED0  C0AD  F2D8         	movff	?_Random,_loRa+210
 31531  004ED4  C0AE  F2D9         	movff	?_Random+1,_loRa+211
 31532                           
 31533                           ;lorawan.c: 1834: memcpy (&macBuffer[bufferIndex], &loRa.devNonce, sizeof (loRa.devNonce
      +                          ) );
 31534  004ED8  0100               	movlb	0	; () banked
 31535  004EDA  51DA               	movf	PrepareJoinRequestFrame@bufferIndex& (0+255),w,b
 31536  004EDC  0D01               	mullw	1
 31537  004EDE  0E8F               	movlw	low _macBuffer
 31538  004EE0  24F3               	addwf	prodl,w,c
 31539  004EE2  6F60               	movwf	memcpy@d1& (0+255),b
 31540  004EE4  0E06               	movlw	high _macBuffer
 31541  004EE6  20F4               	addwfc	prodh,w,c
 31542  004EE8  6F61               	movwf	(memcpy@d1+1)& (0+255),b
 31543  004EEA  0ED8               	movlw	low (_loRa+210)
 31544  004EEC  6F62               	movwf	memcpy@s1& (0+255),b
 31545  004EEE  0E02               	movlw	high (_loRa+210)
 31546  004EF0  6F63               	movwf	(memcpy@s1+1)& (0+255),b
 31547  004EF2  0E00               	movlw	0
 31548  004EF4  6F65               	movwf	(memcpy@n+1)& (0+255),b
 31549  004EF6  0E02               	movlw	2
 31550  004EF8  6F64               	movwf	memcpy@n& (0+255),b
 31551  004EFA  EC5D  F041         	call	_memcpy	;wreg free
 31552                           
 31553                           ;lorawan.c: 1835: bufferIndex = bufferIndex + sizeof( loRa.devNonce );
 31554  004EFE  0100               	movlb	0	; () banked
 31555  004F00  51DA               	movf	PrepareJoinRequestFrame@bufferIndex& (0+255),w,b
 31556  004F02  0F02               	addlw	2
 31557  004F04  6FDA               	movwf	PrepareJoinRequestFrame@bufferIndex& (0+255),b
 31558                           
 31559                           ; BSR set to: 0
 31560                           ;lorawan.c: 1837: mic = ComputeMic (loRa.activationParameters.applicationKey, macBuffer,
      +                           bufferIndex);
 31561  004F06  0E48               	movlw	low (_loRa+66)
 31562  004F08  6FC7               	movwf	ComputeMic@key& (0+255),b
 31563  004F0A  0E02               	movlw	high (_loRa+66)
 31564  004F0C  6FC8               	movwf	(ComputeMic@key+1)& (0+255),b
 31565  004F0E  0E8F               	movlw	low _macBuffer
 31566  004F10  6FC9               	movwf	ComputeMic@buffer& (0+255),b
 31567  004F12  0E06               	movlw	high _macBuffer
 31568  004F14  6FCA               	movwf	(ComputeMic@buffer+1)& (0+255),b
 31569  004F16  C0DA  F0CB         	movff	PrepareJoinRequestFrame@bufferIndex,ComputeMic@bufferLength
 31570  004F1A  EC9A  F040         	call	_ComputeMic	;wreg free
 31571  004F1E  C0C7  F0D4         	movff	?_ComputeMic,PrepareJoinRequestFrame@mic
 31572  004F22  C0C8  F0D5         	movff	?_ComputeMic+1,PrepareJoinRequestFrame@mic+1
 31573  004F26  C0C9  F0D6         	movff	?_ComputeMic+2,PrepareJoinRequestFrame@mic+2
 31574  004F2A  C0CA  F0D7         	movff	?_ComputeMic+3,PrepareJoinRequestFrame@mic+3
 31575                           
 31576                           ;lorawan.c: 1839: memcpy ( &macBuffer[bufferIndex], &mic, sizeof (mic));
 31577  004F2E  0100               	movlb	0	; () banked
 31578  004F30  51DA               	movf	PrepareJoinRequestFrame@bufferIndex& (0+255),w,b
 31579  004F32  0D01               	mullw	1
 31580  004F34  0E8F               	movlw	low _macBuffer
 31581  004F36  24F3               	addwf	prodl,w,c
 31582  004F38  6F60               	movwf	memcpy@d1& (0+255),b
 31583  004F3A  0E06               	movlw	high _macBuffer
 31584  004F3C  20F4               	addwfc	prodh,w,c
 31585  004F3E  6F61               	movwf	(memcpy@d1+1)& (0+255),b
 31586  004F40  0ED4               	movlw	low PrepareJoinRequestFrame@mic
 31587  004F42  6F62               	movwf	memcpy@s1& (0+255),b
 31588  004F44  0E00               	movlw	high PrepareJoinRequestFrame@mic
 31589  004F46  6F63               	movwf	(memcpy@s1+1)& (0+255),b
 31590  004F48  0E00               	movlw	0
 31591  004F4A  6F65               	movwf	(memcpy@n+1)& (0+255),b
 31592  004F4C  0E04               	movlw	4
 31593  004F4E  6F64               	movwf	memcpy@n& (0+255),b
 31594  004F50  EC5D  F041         	call	_memcpy	;wreg free
 31595                           
 31596                           ;lorawan.c: 1840: bufferIndex = bufferIndex + sizeof(mic);
 31597  004F54  0100               	movlb	0	; () banked
 31598  004F56  51DA               	movf	PrepareJoinRequestFrame@bufferIndex& (0+255),w,b
 31599  004F58  0F04               	addlw	4
 31600  004F5A  6FDA               	movwf	PrepareJoinRequestFrame@bufferIndex& (0+255),b
 31601                           
 31602                           ; BSR set to: 0
 31603                           ;lorawan.c: 1842: return bufferIndex;
 31604  004F5C  51DA               	movf	PrepareJoinRequestFrame@bufferIndex& (0+255),w,b
 31605  004F5E  0012               	return	
 31606  004F60                     __end_of_PrepareJoinRequestFrame:
 31607                           	opt stack 0
 31608                           tosu	equ	0xFFF
 31609                           tosh	equ	0xFFE
 31610                           tosl	equ	0xFFD
 31611                           pclath	equ	0xFFA
 31612                           tblptru	equ	0xFF8
 31613                           tblptrh	equ	0xFF7
 31614                           tblptrl	equ	0xFF6
 31615                           tablat	equ	0xFF5
 31616                           prodh	equ	0xFF4
 31617                           prodl	equ	0xFF3
 31618                           intcon	equ	0xFF2
 31619                           intcon2	equ	0xFF1
 31620                           intcon3	equ	0xFF0
 31621                           indf0	equ	0xFEF
 31622                           postinc0	equ	0xFEE
 31623                           fsr0h	equ	0xFEA
 31624                           fsr0l	equ	0xFE9
 31625                           wreg	equ	0xFE8
 31626                           postinc1	equ	0xFE6
 31627                           postdec1	equ	0xFE5
 31628                           plusw1	equ	0xFE3
 31629                           fsr1h	equ	0xFE2
 31630                           fsr1l	equ	0xFE1
 31631                           indf2	equ	0xFDF
 31632                           postinc2	equ	0xFDE
 31633                           postdec2	equ	0xFDD
 31634                           plusw2	equ	0xFDB
 31635                           fsr2h	equ	0xFDA
 31636                           fsr2l	equ	0xFD9
 31637                           status	equ	0xFD8
 31638                           
 31639 ;; *************** function _Random *****************
 31640 ;; Defined at:
 31641 ;;		line 1116 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 31642 ;; Parameters:    Size  Location     Type
 31643 ;;  max             2   77[BANK0 ] unsigned int 
 31644 ;; Auto vars:     Size  Location     Type
 31645 ;;		None
 31646 ;; Return value:  Size  Location     Type
 31647 ;;                  2   77[BANK0 ] unsigned int 
 31648 ;; Registers used:
 31649 ;;		wreg, status,2, status,0, cstack
 31650 ;; Tracked objects:
 31651 ;;		On entry : 0/0
 31652 ;;		On exit  : 0/0
 31653 ;;		Unchanged: 0/0
 31654 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 31655 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31656 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31657 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31658 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31659 ;;Total ram usage:        2 bytes
 31660 ;; Hardware stack levels used:    1
 31661 ;; Hardware stack levels required when called:    9
 31662 ;; This function calls:
 31663 ;;		___lwmod
 31664 ;;		_rand
 31665 ;; This function is called by:
 31666 ;;		_PrepareJoinRequestFrame
 31667 ;;		_SearchAvailableChannel
 31668 ;; This function uses a non-reentrant model
 31669 ;;
 31670                           
 31671                           	psect	text148
 31672  009138                     __ptext148:
 31673                           	opt stack 0
 31674  009138                     _Random:
 31675                           	opt stack 18
 31676                           
 31677                           ;lorawan.c: 1118: return (rand () % max);
 31678                           
 31679                           ; BSR set to: 0
 31680                           ;incstack = 0
 31681  009138  ECEB  F041         	call	_rand	;wreg free
 31682  00913C  C0A6  F0A8         	movff	?_rand,___lwmod@dividend
 31683  009140  C0A7  F0A9         	movff	?_rand+1,___lwmod@dividend+1
 31684  009144  C0AD  F0AA         	movff	Random@max,___lwmod@divisor
 31685  009148  C0AE  F0AB         	movff	Random@max+1,___lwmod@divisor+1
 31686  00914C  ECE3  F044         	call	___lwmod	;wreg free
 31687  009150  C0A8  F0AD         	movff	?___lwmod,?_Random
 31688  009154  C0A9  F0AE         	movff	?___lwmod+1,?_Random+1
 31689  009158  0012               	return	
 31690  00915A                     __end_of_Random:
 31691                           	opt stack 0
 31692                           tosu	equ	0xFFF
 31693                           tosh	equ	0xFFE
 31694                           tosl	equ	0xFFD
 31695                           pclath	equ	0xFFA
 31696                           tblptru	equ	0xFF8
 31697                           tblptrh	equ	0xFF7
 31698                           tblptrl	equ	0xFF6
 31699                           tablat	equ	0xFF5
 31700                           prodh	equ	0xFF4
 31701                           prodl	equ	0xFF3
 31702                           intcon	equ	0xFF2
 31703                           intcon2	equ	0xFF1
 31704                           intcon3	equ	0xFF0
 31705                           indf0	equ	0xFEF
 31706                           postinc0	equ	0xFEE
 31707                           fsr0h	equ	0xFEA
 31708                           fsr0l	equ	0xFE9
 31709                           wreg	equ	0xFE8
 31710                           postinc1	equ	0xFE6
 31711                           postdec1	equ	0xFE5
 31712                           plusw1	equ	0xFE3
 31713                           fsr1h	equ	0xFE2
 31714                           fsr1l	equ	0xFE1
 31715                           indf2	equ	0xFDF
 31716                           postinc2	equ	0xFDE
 31717                           postdec2	equ	0xFDD
 31718                           plusw2	equ	0xFDB
 31719                           fsr2h	equ	0xFDA
 31720                           fsr2l	equ	0xFD9
 31721                           status	equ	0xFD8
 31722                           
 31723 ;; *************** function _rand *****************
 31724 ;; Defined at:
 31725 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\rand.c"
 31726 ;; Parameters:    Size  Location     Type
 31727 ;;		None
 31728 ;; Auto vars:     Size  Location     Type
 31729 ;;		None
 31730 ;; Return value:  Size  Location     Type
 31731 ;;                  2   70[BANK0 ] int 
 31732 ;; Registers used:
 31733 ;;		wreg, status,2, status,0, cstack
 31734 ;; Tracked objects:
 31735 ;;		On entry : 0/0
 31736 ;;		On exit  : 0/0
 31737 ;;		Unchanged: 0/0
 31738 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 31739 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31740 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31741 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31742 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31743 ;;Total ram usage:        2 bytes
 31744 ;; Hardware stack levels used:    1
 31745 ;; Hardware stack levels required when called:    8
 31746 ;; This function calls:
 31747 ;;		___lmul
 31748 ;; This function is called by:
 31749 ;;		_Random
 31750 ;; This function uses a non-reentrant model
 31751 ;;
 31752                           
 31753                           	psect	text149
 31754  0083D6                     __ptext149:
 31755                           	opt stack 0
 31756  0083D6                     _rand:
 31757                           	opt stack 18
 31758                           
 31759                           ;incstack = 0
 31760  0083D6  C2FB  F09A         	movff	_randx,___lmul@multiplier
 31761  0083DA  C2FC  F09B         	movff	_randx+1,___lmul@multiplier+1
 31762  0083DE  C2FD  F09C         	movff	_randx+2,___lmul@multiplier+2
 31763  0083E2  C2FE  F09D         	movff	_randx+3,___lmul@multiplier+3
 31764  0083E6  0E6D               	movlw	109
 31765  0083E8  0100               	movlb	0	; () banked
 31766  0083EA  6F9E               	movwf	___lmul@multiplicand& (0+255),b
 31767  0083EC  0E4E               	movlw	78
 31768  0083EE  6F9F               	movwf	(___lmul@multiplicand+1)& (0+255),b
 31769  0083F0  0EC6               	movlw	198
 31770  0083F2  6FA0               	movwf	(___lmul@multiplicand+2)& (0+255),b
 31771  0083F4  0E41               	movlw	65
 31772  0083F6  6FA1               	movwf	(___lmul@multiplicand+3)& (0+255),b
 31773  0083F8  EC73  F042         	call	___lmul	;wreg free
 31774  0083FC  C09A  F2FB         	movff	?___lmul,_randx
 31775  008400  C09B  F2FC         	movff	?___lmul+1,_randx+1
 31776  008404  C09C  F2FD         	movff	?___lmul+2,_randx+2
 31777  008408  C09D  F2FE         	movff	?___lmul+3,_randx+3
 31778  00840C  0E39               	movlw	57
 31779  00840E  0102               	movlb	2	; () banked
 31780  008410  27FB               	addwf	_randx& (0+255),f,b
 31781  008412  0E30               	movlw	48
 31782  008414  23FC               	addwfc	(_randx+1)& (0+255),f,b
 31783  008416  0E00               	movlw	0
 31784  008418  23FD               	addwfc	(_randx+2)& (0+255),f,b
 31785  00841A  0E00               	movlw	0
 31786  00841C  23FE               	addwfc	(_randx+3)& (0+255),f,b
 31787                           
 31788                           ; BSR set to: 2
 31789  00841E  0EFF               	movlw	255
 31790  008420  15FD               	andwf	(_randx+2)& (0+255),w,b
 31791  008422  0100               	movlb	0	; () banked
 31792  008424  6FA6               	movwf	?_rand& (0+255),b
 31793  008426  0E7F               	movlw	127
 31794  008428  0102               	movlb	2	; () banked
 31795  00842A  15FE               	andwf	(_randx+3)& (0+255),w,b
 31796  00842C  0100               	movlb	0	; () banked
 31797  00842E  6FA7               	movwf	(?_rand+1)& (0+255),b
 31798  008430  0012               	return	
 31799  008432                     __end_of_rand:
 31800                           	opt stack 0
 31801                           tosu	equ	0xFFF
 31802                           tosh	equ	0xFFE
 31803                           tosl	equ	0xFFD
 31804                           pclath	equ	0xFFA
 31805                           tblptru	equ	0xFF8
 31806                           tblptrh	equ	0xFF7
 31807                           tblptrl	equ	0xFF6
 31808                           tablat	equ	0xFF5
 31809                           prodh	equ	0xFF4
 31810                           prodl	equ	0xFF3
 31811                           intcon	equ	0xFF2
 31812                           intcon2	equ	0xFF1
 31813                           intcon3	equ	0xFF0
 31814                           indf0	equ	0xFEF
 31815                           postinc0	equ	0xFEE
 31816                           fsr0h	equ	0xFEA
 31817                           fsr0l	equ	0xFE9
 31818                           wreg	equ	0xFE8
 31819                           postinc1	equ	0xFE6
 31820                           postdec1	equ	0xFE5
 31821                           plusw1	equ	0xFE3
 31822                           fsr1h	equ	0xFE2
 31823                           fsr1l	equ	0xFE1
 31824                           indf2	equ	0xFDF
 31825                           postinc2	equ	0xFDE
 31826                           postdec2	equ	0xFDD
 31827                           plusw2	equ	0xFDB
 31828                           fsr2h	equ	0xFDA
 31829                           fsr2l	equ	0xFD9
 31830                           status	equ	0xFD8
 31831                           
 31832 ;; *************** function ___lwmod *****************
 31833 ;; Defined at:
 31834 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
 31835 ;; Parameters:    Size  Location     Type
 31836 ;;  dividend        2   72[BANK0 ] unsigned int 
 31837 ;;  divisor         2   74[BANK0 ] unsigned int 
 31838 ;; Auto vars:     Size  Location     Type
 31839 ;;  counter         1   76[BANK0 ] unsigned char 
 31840 ;; Return value:  Size  Location     Type
 31841 ;;                  2   72[BANK0 ] unsigned int 
 31842 ;; Registers used:
 31843 ;;		wreg, status,2, status,0
 31844 ;; Tracked objects:
 31845 ;;		On entry : 0/0
 31846 ;;		On exit  : 0/0
 31847 ;;		Unchanged: 0/0
 31848 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 31849 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31850 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31851 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31852 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31853 ;;Total ram usage:        5 bytes
 31854 ;; Hardware stack levels used:    1
 31855 ;; Hardware stack levels required when called:    7
 31856 ;; This function calls:
 31857 ;;		Nothing
 31858 ;; This function is called by:
 31859 ;;		_Random
 31860 ;; This function uses a non-reentrant model
 31861 ;;
 31862                           
 31863                           	psect	text150
 31864  0089C6                     __ptext150:
 31865                           	opt stack 0
 31866  0089C6                     ___lwmod:
 31867                           	opt stack 19
 31868                           
 31869                           ; BSR set to: 0
 31870                           ;incstack = 0
 31871  0089C6  0100               	movlb	0	; () banked
 31872  0089C8  51AA               	movf	___lwmod@divisor& (0+255),w,b
 31873  0089CA  11AB               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
 31874  0089CC  B4D8               	btfsc	status,2,c
 31875  0089CE  D018               	goto	l3250
 31876                           
 31877                           ; BSR set to: 0
 31878  0089D0  0E01               	movlw	1
 31879  0089D2  6FAC               	movwf	___lwmod@counter& (0+255),b
 31880  0089D4  D004               	goto	l3245
 31881  0089D6                     
 31882                           ; BSR set to: 0
 31883                           
 31884                           ; BSR set to: 0
 31885  0089D6  90D8               	bcf	status,0,c
 31886  0089D8  37AA               	rlcf	___lwmod@divisor& (0+255),f,b
 31887  0089DA  37AB               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
 31888  0089DC  2BAC               	incf	___lwmod@counter& (0+255),f,b
 31889  0089DE                     l3245:
 31890                           
 31891                           ; BSR set to: 0
 31892                           
 31893                           ; BSR set to: 0
 31894  0089DE  AFAB               	btfss	(___lwmod@divisor+1)& (0+255),7,b
 31895  0089E0  D7FA               	goto	l3246
 31896  0089E2                     u8420:
 31897                           
 31898                           ; BSR set to: 0
 31899                           
 31900                           ; BSR set to: 0
 31901                           
 31902                           ; BSR set to: 0
 31903  0089E2  51AA               	movf	___lwmod@divisor& (0+255),w,b
 31904  0089E4  5DA8               	subwf	___lwmod@dividend& (0+255),w,b
 31905  0089E6  51AB               	movf	(___lwmod@divisor+1)& (0+255),w,b
 31906  0089E8  59A9               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
 31907  0089EA  A0D8               	btfss	status,0,c
 31908  0089EC  D004               	goto	l3249
 31909                           
 31910                           ; BSR set to: 0
 31911  0089EE  51AA               	movf	___lwmod@divisor& (0+255),w,b
 31912  0089F0  5FA8               	subwf	___lwmod@dividend& (0+255),f,b
 31913  0089F2  51AB               	movf	(___lwmod@divisor+1)& (0+255),w,b
 31914  0089F4  5BA9               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
 31915  0089F6                     l3249:
 31916                           
 31917                           ; BSR set to: 0
 31918                           
 31919                           ; BSR set to: 0
 31920  0089F6  90D8               	bcf	status,0,c
 31921  0089F8  33AB               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
 31922  0089FA  33AA               	rrcf	___lwmod@divisor& (0+255),f,b
 31923                           
 31924                           ; BSR set to: 0
 31925  0089FC  2FAC               	decfsz	___lwmod@counter& (0+255),f,b
 31926  0089FE  D7F1               	goto	u8420
 31927  008A00                     l3250:
 31928                           
 31929                           ; BSR set to: 0
 31930                           
 31931                           ; BSR set to: 0
 31932  008A00  C0A8  F0A8         	movff	___lwmod@dividend,?___lwmod
 31933  008A04  C0A9  F0A9         	movff	___lwmod@dividend+1,?___lwmod+1
 31934                           
 31935                           ; BSR set to: 0
 31936  008A08  0012               	return		;funcret
 31937  008A0A                     __end_of___lwmod:
 31938                           	opt stack 0
 31939                           tosu	equ	0xFFF
 31940                           tosh	equ	0xFFE
 31941                           tosl	equ	0xFFD
 31942                           pclath	equ	0xFFA
 31943                           tblptru	equ	0xFF8
 31944                           tblptrh	equ	0xFF7
 31945                           tblptrl	equ	0xFF6
 31946                           tablat	equ	0xFF5
 31947                           prodh	equ	0xFF4
 31948                           prodl	equ	0xFF3
 31949                           intcon	equ	0xFF2
 31950                           intcon2	equ	0xFF1
 31951                           intcon3	equ	0xFF0
 31952                           indf0	equ	0xFEF
 31953                           postinc0	equ	0xFEE
 31954                           fsr0h	equ	0xFEA
 31955                           fsr0l	equ	0xFE9
 31956                           wreg	equ	0xFE8
 31957                           postinc1	equ	0xFE6
 31958                           postdec1	equ	0xFE5
 31959                           plusw1	equ	0xFE3
 31960                           fsr1h	equ	0xFE2
 31961                           fsr1l	equ	0xFE1
 31962                           indf2	equ	0xFDF
 31963                           postinc2	equ	0xFDE
 31964                           postdec2	equ	0xFDD
 31965                           plusw2	equ	0xFDB
 31966                           fsr2h	equ	0xFDA
 31967                           fsr2l	equ	0xFD9
 31968                           status	equ	0xFD8
 31969                           
 31970 ;; *************** function _ComputeMic *****************
 31971 ;; Defined at:
 31972 ;;		line 2194 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 31973 ;; Parameters:    Size  Location     Type
 31974 ;;  key             2  103[BANK0 ] PTR unsigned char 
 31975 ;;		 -> loRa.activationParameters(105), loRa(245), 
 31976 ;;  buffer          2  105[BANK0 ] PTR unsigned char 
 31977 ;;		 -> radioBuffer(271), LORAWAN_RxDone@hdr(2), macBuffer(271), 
 31978 ;;  bufferLength    1  107[BANK0 ] unsigned char 
 31979 ;; Auto vars:     Size  Location     Type
 31980 ;;  mic             4  108[BANK0 ] unsigned long 
 31981 ;; Return value:  Size  Location     Type
 31982 ;;                  4  103[BANK0 ] unsigned long 
 31983 ;; Registers used:
 31984 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 31985 ;; Tracked objects:
 31986 ;;		On entry : 0/0
 31987 ;;		On exit  : 0/0
 31988 ;;		Unchanged: 0/0
 31989 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 31990 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31991 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31992 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31993 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31994 ;;Total ram usage:        9 bytes
 31995 ;; Hardware stack levels used:    1
 31996 ;; Hardware stack levels required when called:   12
 31997 ;; This function calls:
 31998 ;;		_AESCmac
 31999 ;;		_memcpy
 32000 ;; This function is called by:
 32001 ;;		_LORAWAN_RxDone
 32002 ;;		_PrepareJoinRequestFrame
 32003 ;; This function uses a non-reentrant model
 32004 ;;
 32005                           
 32006                           	psect	text151
 32007  008134                     __ptext151:
 32008                           	opt stack 0
 32009  008134                     _ComputeMic:
 32010                           	opt stack 14
 32011                           
 32012                           ;lorawan.c: 2196: uint32_t mic = 0;
 32013                           
 32014                           ; BSR set to: 0
 32015                           ;incstack = 0
 32016  008134  0E00               	movlw	0
 32017  008136  0100               	movlb	0	; () banked
 32018  008138  6FCC               	movwf	ComputeMic@mic& (0+255),b
 32019  00813A  0E00               	movlw	0
 32020  00813C  6FCD               	movwf	(ComputeMic@mic+1)& (0+255),b
 32021  00813E  0E00               	movlw	0
 32022  008140  6FCE               	movwf	(ComputeMic@mic+2)& (0+255),b
 32023  008142  0E00               	movlw	0
 32024  008144  6FCF               	movwf	(ComputeMic@mic+3)& (0+255),b
 32025                           
 32026                           ; BSR set to: 0
 32027                           ;lorawan.c: 2198: AESCmac(key, aesBuffer, buffer, bufferLength);
 32028  008146  C0C7  F0B9         	movff	ComputeMic@key,AESCmac@key
 32029  00814A  C0C8  F0BA         	movff	ComputeMic@key+1,AESCmac@key+1
 32030  00814E  0EA2               	movlw	low _aesBuffer
 32031  008150  6FBB               	movwf	AESCmac@output& (0+255),b
 32032  008152  0E03               	movlw	high _aesBuffer
 32033  008154  6FBC               	movwf	(AESCmac@output+1)& (0+255),b
 32034  008156  C0C9  F0BD         	movff	ComputeMic@buffer,AESCmac@input
 32035  00815A  C0CA  F0BE         	movff	ComputeMic@buffer+1,AESCmac@input+1
 32036  00815E  C0CB  F0BF         	movff	ComputeMic@bufferLength,AESCmac@size
 32037  008162  EC1F  F011         	call	_AESCmac	;wreg free
 32038                           
 32039                           ;lorawan.c: 2200: memcpy(&mic, aesBuffer, sizeof( mic ));
 32040  008166  0ECC               	movlw	low ComputeMic@mic
 32041  008168  0100               	movlb	0	; () banked
 32042  00816A  6F60               	movwf	memcpy@d1& (0+255),b
 32043  00816C  0E00               	movlw	high ComputeMic@mic
 32044  00816E  6F61               	movwf	(memcpy@d1+1)& (0+255),b
 32045  008170  0EA2               	movlw	low _aesBuffer
 32046  008172  6F62               	movwf	memcpy@s1& (0+255),b
 32047  008174  0E03               	movlw	high _aesBuffer
 32048  008176  6F63               	movwf	(memcpy@s1+1)& (0+255),b
 32049  008178  0E00               	movlw	0
 32050  00817A  6F65               	movwf	(memcpy@n+1)& (0+255),b
 32051  00817C  0E04               	movlw	4
 32052  00817E  6F64               	movwf	memcpy@n& (0+255),b
 32053  008180  EC5D  F041         	call	_memcpy	;wreg free
 32054                           
 32055                           ;lorawan.c: 2202: return mic;
 32056  008184  C0CC  F0C7         	movff	ComputeMic@mic,?_ComputeMic
 32057  008188  C0CD  F0C8         	movff	ComputeMic@mic+1,?_ComputeMic+1
 32058  00818C  C0CE  F0C9         	movff	ComputeMic@mic+2,?_ComputeMic+2
 32059  008190  C0CF  F0CA         	movff	ComputeMic@mic+3,?_ComputeMic+3
 32060  008194  0012               	return	
 32061  008196                     __end_of_ComputeMic:
 32062                           	opt stack 0
 32063                           tosu	equ	0xFFF
 32064                           tosh	equ	0xFFE
 32065                           tosl	equ	0xFFD
 32066                           pclath	equ	0xFFA
 32067                           tblptru	equ	0xFF8
 32068                           tblptrh	equ	0xFF7
 32069                           tblptrl	equ	0xFF6
 32070                           tablat	equ	0xFF5
 32071                           prodh	equ	0xFF4
 32072                           prodl	equ	0xFF3
 32073                           intcon	equ	0xFF2
 32074                           intcon2	equ	0xFF1
 32075                           intcon3	equ	0xFF0
 32076                           indf0	equ	0xFEF
 32077                           postinc0	equ	0xFEE
 32078                           fsr0h	equ	0xFEA
 32079                           fsr0l	equ	0xFE9
 32080                           wreg	equ	0xFE8
 32081                           postinc1	equ	0xFE6
 32082                           postdec1	equ	0xFE5
 32083                           plusw1	equ	0xFE3
 32084                           fsr1h	equ	0xFE2
 32085                           fsr1l	equ	0xFE1
 32086                           indf2	equ	0xFDF
 32087                           postinc2	equ	0xFDE
 32088                           postdec2	equ	0xFDD
 32089                           plusw2	equ	0xFDB
 32090                           fsr2h	equ	0xFDA
 32091                           fsr2l	equ	0xFD9
 32092                           status	equ	0xFD8
 32093                           
 32094 ;; *************** function _AESCmac *****************
 32095 ;; Defined at:
 32096 ;;		line 41 in file "mcc_generated_files/LoRaWAN/lorawan_aes_cmac.c"
 32097 ;; Parameters:    Size  Location     Type
 32098 ;;  key             2   89[BANK0 ] PTR unsigned char 
 32099 ;;		 -> loRa.activationParameters(105), loRa(245), 
 32100 ;;  output          2   91[BANK0 ] PTR unsigned char 
 32101 ;;		 -> aesBuffer(16), 
 32102 ;;  input           2   93[BANK0 ] PTR unsigned char 
 32103 ;;		 -> radioBuffer(271), LORAWAN_RxDone@hdr(2), macBuffer(271), 
 32104 ;;  size            1   95[BANK0 ] unsigned char 
 32105 ;; Auto vars:     Size  Location     Type
 32106 ;;  x              16   80[BANK1 ] unsigned char [16]
 32107 ;;  y              16   64[BANK1 ] unsigned char [16]
 32108 ;;  padded         16   48[BANK1 ] unsigned char [16]
 32109 ;;  mLast          16   32[BANK1 ] unsigned char [16]
 32110 ;;  k1             16   16[BANK1 ] unsigned char [16]
 32111 ;;  k2             16    0[BANK1 ] unsigned char [16]
 32112 ;;  ptr             2   96[BANK1 ] PTR unsigned char 
 32113 ;;		 -> radioBuffer(271), LORAWAN_RxDone@hdr(2), macBuffer(271), NULL(0), 
 32114 ;;  i               1  101[BANK1 ] unsigned char 
 32115 ;;  j               1  100[BANK1 ] unsigned char 
 32116 ;;  n               1   99[BANK1 ] unsigned char 
 32117 ;;  flag            1   98[BANK1 ] unsigned char 
 32118 ;; Return value:  Size  Location     Type
 32119 ;;                  1    wreg      void 
 32120 ;; Registers used:
 32121 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 32122 ;; Tracked objects:
 32123 ;;		On entry : 0/0
 32124 ;;		On exit  : 0/0
 32125 ;;		Unchanged: 0/0
 32126 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 32127 ;;      Params:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 32128 ;;      Locals:         0       0     102       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 32129 ;;      Temps:          0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 32130 ;;      Totals:         0      14     102       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 32131 ;;Total ram usage:      116 bytes
 32132 ;; Hardware stack levels used:    1
 32133 ;; Hardware stack levels required when called:   11
 32134 ;; This function calls:
 32135 ;;		_AESEncodeLoRa
 32136 ;;		_GenerateSubkey
 32137 ;;		_memcpy
 32138 ;;		_memset
 32139 ;; This function is called by:
 32140 ;;		_LORAWAN_RxDone
 32141 ;;		_AssemblePacket
 32142 ;;		_ComputeMic
 32143 ;; This function uses a non-reentrant model
 32144 ;;
 32145                           
 32146                           	psect	text152
 32147  00223E                     __ptext152:
 32148                           	opt stack 0
 32149  00223E                     _AESCmac:
 32150                           	opt stack 17
 32151                           
 32152                           ;lorawan_aes_cmac.c: 43: uint8_t n = 0, i = 0, j =0;
 32153                           
 32154                           ;incstack = 0
 32155  00223E  0E00               	movlw	0
 32156  002240  0101               	movlb	1	; () banked
 32157  002242  6FF2               	movwf	AESCmac@n& (0+255),b
 32158  002244  0E00               	movlw	0
 32159  002246  6FF4               	movwf	AESCmac@i& (0+255),b
 32160  002248  0E00               	movlw	0
 32161  00224A  6FF3               	movwf	AESCmac@j& (0+255),b
 32162                           
 32163                           ;lorawan_aes_cmac.c: 44: bool flag = 0;
 32164  00224C  0E00               	movlw	0
 32165  00224E  6FF1               	movwf	AESCmac@flag& (0+255),b
 32166                           
 32167                           ; BSR set to: 1
 32168                           ;lorawan_aes_cmac.c: 45: uint8_t k1[16], k2[16];
 32169                           ;lorawan_aes_cmac.c: 46: uint8_t x[16], y[16], mLast[16], padded[16];
 32170                           ;lorawan_aes_cmac.c: 47: uint8_t *ptr = (0);
 32171  002250  0E00               	movlw	0
 32172  002252  6FEF               	movwf	AESCmac@ptr& (0+255),b
 32173  002254  0E00               	movlw	0
 32174  002256  6FF0               	movwf	(AESCmac@ptr+1)& (0+255),b
 32175                           
 32176                           ; BSR set to: 1
 32177                           ;lorawan_aes_cmac.c: 49: GenerateSubkey(key, k1, k2);
 32178  002258  C0B9  F091         	movff	AESCmac@key,GenerateSubkey@key
 32179  00225C  C0BA  F092         	movff	AESCmac@key+1,GenerateSubkey@key+1
 32180  002260  0E9F               	movlw	low AESCmac@k1
 32181  002262  0100               	movlb	0	; () banked
 32182  002264  6F93               	movwf	GenerateSubkey@k1& (0+255),b
 32183  002266  0E01               	movlw	high AESCmac@k1
 32184  002268  6F94               	movwf	(GenerateSubkey@k1+1)& (0+255),b
 32185  00226A  0E8F               	movlw	low AESCmac@k2
 32186  00226C  6F95               	movwf	GenerateSubkey@k2& (0+255),b
 32187  00226E  0E01               	movlw	high AESCmac@k2
 32188  002270  6F96               	movwf	(GenerateSubkey@k2+1)& (0+255),b
 32189  002272  EC5E  F02D         	call	_GenerateSubkey	;wreg free
 32190                           
 32191                           ;lorawan_aes_cmac.c: 51: n = (size + 15) >> (4);
 32192  002276  0100               	movlb	0	; () banked
 32193  002278  51BF               	movf	AESCmac@size& (0+255),w,b
 32194  00227A  6FC0               	movwf	??_AESCmac& (0+255),b
 32195  00227C  6BC1               	clrf	(??_AESCmac+1)& (0+255),b
 32196  00227E  0E0F               	movlw	15
 32197  002280  27C0               	addwf	??_AESCmac& (0+255),f,b
 32198  002282  0E00               	movlw	0
 32199  002284  23C1               	addwfc	(??_AESCmac+1)& (0+255),f,b
 32200  002286  0E04               	movlw	4
 32201  002288  6FC2               	movwf	(??_AESCmac+2)& (0+255),b
 32202  00228A                     u8945:
 32203  00228A  35C1               	rlcf	(??_AESCmac+1)& (0+255),w,b
 32204  00228C  33C1               	rrcf	(??_AESCmac+1)& (0+255),f,b
 32205  00228E  33C0               	rrcf	??_AESCmac& (0+255),f,b
 32206  002290  2FC2               	decfsz	(??_AESCmac+2)& (0+255),f,b
 32207  002292  D7FB               	goto	u8945
 32208  002294  51C0               	movf	??_AESCmac& (0+255),w,b
 32209  002296  0101               	movlb	1	; () banked
 32210  002298  6FF2               	movwf	AESCmac@n& (0+255),b
 32211                           
 32212                           ; BSR set to: 1
 32213                           ;lorawan_aes_cmac.c: 52: if (n == 0)
 32214  00229A  51F2               	movf	AESCmac@n& (0+255),w,b
 32215  00229C  A4D8               	btfss	status,2,c
 32216  00229E  D004               	goto	l13
 32217                           
 32218                           ; BSR set to: 1
 32219                           ;lorawan_aes_cmac.c: 53: {
 32220                           ;lorawan_aes_cmac.c: 54: n = 1;
 32221  0022A0  0E01               	movlw	1
 32222  0022A2  6FF2               	movwf	AESCmac@n& (0+255),b
 32223                           
 32224                           ;lorawan_aes_cmac.c: 55: flag = 0;
 32225  0022A4  0E00               	movlw	0
 32226  0022A6  D00B               	goto	L23
 32227  0022A8                     l13:
 32228                           
 32229                           ; BSR set to: 1
 32230                           ;lorawan_aes_cmac.c: 57: else
 32231                           ;lorawan_aes_cmac.c: 58: {
 32232                           ;lorawan_aes_cmac.c: 59: flag = !(size % 16);
 32233                           
 32234                           ; BSR set to: 1
 32235  0022A8  C0BF  F0C0         	movff	AESCmac@size,??_AESCmac
 32236  0022AC  0E0F               	movlw	15
 32237  0022AE  0100               	movlb	0	; () banked
 32238  0022B0  17C0               	andwf	??_AESCmac& (0+255),f,b
 32239  0022B2  A4D8               	btfss	status,2,c
 32240  0022B4  D002               	goto	u8960
 32241  0022B6  0E01               	movlw	1
 32242  0022B8  D001               	goto	u8970
 32243  0022BA                     u8960:
 32244  0022BA  0E00               	movlw	0
 32245  0022BC                     u8970:
 32246  0022BC  0101               	movlb	1	; () banked
 32247  0022BE                     L23:
 32248  0022BE  6FF1               	movwf	AESCmac@flag& (0+255),b
 32249                           
 32250                           ; BSR set to: 1
 32251                           ;lorawan_aes_cmac.c: 60: }
 32252                           ;lorawan_aes_cmac.c: 62: if ( flag == 1 )
 32253  0022C0  05F1               	decf	AESCmac@flag& (0+255),w,b
 32254  0022C2  A4D8               	btfss	status,2,c
 32255  0022C4  D048               	goto	l15
 32256                           
 32257                           ; BSR set to: 1
 32258                           ;lorawan_aes_cmac.c: 63: {
 32259                           ;lorawan_aes_cmac.c: 64: j = 0;
 32260  0022C6  0E00               	movlw	0
 32261  0022C8  6FF3               	movwf	AESCmac@j& (0+255),b
 32262                           
 32263                           ; BSR set to: 1
 32264                           ;lorawan_aes_cmac.c: 65: for (i=((n-1) << (4)); i<(n << (4)); i++)
 32265  0022CA  39F2               	swapf	AESCmac@n& (0+255),w,b
 32266  0022CC  0BF0               	andlw	240
 32267  0022CE  0FF0               	addlw	240
 32268  0022D0  6FF4               	movwf	AESCmac@i& (0+255),b
 32269  0022D2  D024               	goto	l16
 32270  0022D4                     
 32271                           ;lorawan_aes_cmac.c: 66: {
 32272                           ;lorawan_aes_cmac.c: 67: mLast[j] = input[i] ^ k1[j];
 32273                           
 32274                           ; BSR set to: 1
 32275  0022D4  0101               	movlb	1	; () banked
 32276  0022D6  51F3               	movf	AESCmac@j& (0+255),w,b
 32277  0022D8  0D01               	mullw	1
 32278  0022DA  0EAF               	movlw	low AESCmac@mLast
 32279  0022DC  24F3               	addwf	prodl,w,c
 32280  0022DE  6ED9               	movwf	fsr2l,c
 32281  0022E0  0E01               	movlw	high AESCmac@mLast
 32282  0022E2  20F4               	addwfc	prodh,w,c
 32283  0022E4  6EDA               	movwf	fsr2h,c
 32284  0022E6  51F3               	movf	AESCmac@j& (0+255),w,b
 32285  0022E8  0D01               	mullw	1
 32286  0022EA  0E9F               	movlw	low AESCmac@k1
 32287  0022EC  24F3               	addwf	prodl,w,c
 32288  0022EE  6EE9               	movwf	fsr0l,c
 32289  0022F0  0E01               	movlw	high AESCmac@k1
 32290  0022F2  20F4               	addwfc	prodh,w,c
 32291  0022F4  6EEA               	movwf	fsr0h,c
 32292  0022F6  50EF               	movf	indf0,w,c
 32293  0022F8  0100               	movlb	0	; () banked
 32294  0022FA  6FC0               	movwf	??_AESCmac& (0+255),b
 32295  0022FC  0101               	movlb	1	; () banked
 32296  0022FE  51F4               	movf	AESCmac@i& (0+255),w,b
 32297  002300  0D01               	mullw	1
 32298  002302  50F3               	movf	prodl,w,c
 32299  002304  0100               	movlb	0	; () banked
 32300  002306  25BD               	addwf	AESCmac@input& (0+255),w,b
 32301  002308  6EE9               	movwf	fsr0l,c
 32302  00230A  50F4               	movf	prodh,w,c
 32303  00230C  21BE               	addwfc	(AESCmac@input+1)& (0+255),w,b
 32304  00230E  6EEA               	movwf	fsr0h,c
 32305  002310  50EF               	movf	indf0,w,c
 32306  002312  19C0               	xorwf	??_AESCmac& (0+255),w,b
 32307  002314  6EDF               	movwf	indf2,c
 32308                           
 32309                           ; BSR set to: 0
 32310                           ;lorawan_aes_cmac.c: 68: j++;
 32311  002316  0101               	movlb	1	; () banked
 32312  002318  2BF3               	incf	AESCmac@j& (0+255),f,b
 32313                           
 32314                           ; BSR set to: 1
 32315  00231A  2BF4               	incf	AESCmac@i& (0+255),f,b
 32316  00231C                     l16:
 32317                           
 32318                           ; BSR set to: 1
 32319                           
 32320                           ; BSR set to: 1
 32321  00231C  51F2               	movf	AESCmac@n& (0+255),w,b
 32322  00231E  0100               	movlb	0	; () banked
 32323  002320  6FC0               	movwf	??_AESCmac& (0+255),b
 32324  002322  6BC1               	clrf	(??_AESCmac+1)& (0+255),b
 32325  002324  3BC0               	swapf	??_AESCmac& (0+255),f,b
 32326  002326  3BC1               	swapf	(??_AESCmac+1)& (0+255),f,b
 32327  002328  0EF0               	movlw	240
 32328  00232A  17C1               	andwf	(??_AESCmac+1)& (0+255),f,b
 32329  00232C  51C0               	movf	??_AESCmac& (0+255),w,b
 32330  00232E  0B0F               	andlw	15
 32331  002330  13C1               	iorwf	(??_AESCmac+1)& (0+255),f,b
 32332  002332  0EF0               	movlw	240
 32333  002334  17C0               	andwf	??_AESCmac& (0+255),f,b
 32334  002336  0101               	movlb	1	; () banked
 32335  002338  51F4               	movf	AESCmac@i& (0+255),w,b
 32336  00233A  0100               	movlb	0	; () banked
 32337  00233C  6FC2               	movwf	(??_AESCmac+2)& (0+255),b
 32338  00233E  6BC3               	clrf	(??_AESCmac+3)& (0+255),b
 32339  002340  51C0               	movf	??_AESCmac& (0+255),w,b
 32340  002342  5DC2               	subwf	(??_AESCmac+2)& (0+255),w,b
 32341  002344  51C3               	movf	(??_AESCmac+3)& (0+255),w,b
 32342  002346  0A80               	xorlw	128
 32343  002348  6FC4               	movwf	(??_AESCmac+4)& (0+255),b
 32344  00234A  51C1               	movf	(??_AESCmac+1)& (0+255),w,b
 32345  00234C  0A80               	xorlw	128
 32346  00234E  59C4               	subwfb	(??_AESCmac+4)& (0+255),w,b
 32347  002350  B0D8               	btfsc	status,0,c
 32348  002352  D07F               	goto	u9050
 32349  002354  D7BF               	goto	l17
 32350  002356                     l15:
 32351                           
 32352                           ;lorawan_aes_cmac.c: 71: else
 32353                           ;lorawan_aes_cmac.c: 72: {
 32354                           ;lorawan_aes_cmac.c: 74: ptr = &input[size - (size%16)];
 32355                           
 32356                           ; BSR set to: 0
 32357  002356  0100               	movlb	0	; () banked
 32358  002358  51BF               	movf	AESCmac@size& (0+255),w,b
 32359  00235A  0B0F               	andlw	15
 32360  00235C  6FC0               	movwf	??_AESCmac& (0+255),b
 32361  00235E  6BC1               	clrf	(??_AESCmac+1)& (0+255),b
 32362  002360  1FC0               	comf	??_AESCmac& (0+255),f,b
 32363  002362  1FC1               	comf	(??_AESCmac+1)& (0+255),f,b
 32364  002364  4BC0               	infsnz	??_AESCmac& (0+255),f,b
 32365  002366  2BC1               	incf	(??_AESCmac+1)& (0+255),f,b
 32366  002368  51BF               	movf	AESCmac@size& (0+255),w,b
 32367  00236A  6FC2               	movwf	(??_AESCmac+2)& (0+255),b
 32368  00236C  6BC3               	clrf	(??_AESCmac+3)& (0+255),b
 32369  00236E  51C0               	movf	??_AESCmac& (0+255),w,b
 32370  002370  27C2               	addwf	(??_AESCmac+2)& (0+255),f,b
 32371  002372  51C1               	movf	(??_AESCmac+1)& (0+255),w,b
 32372  002374  23C3               	addwfc	(??_AESCmac+3)& (0+255),f,b
 32373  002376  51C2               	movf	(??_AESCmac+2)& (0+255),w,b
 32374  002378  25BD               	addwf	AESCmac@input& (0+255),w,b
 32375  00237A  0101               	movlb	1	; () banked
 32376  00237C  6FEF               	movwf	AESCmac@ptr& (0+255),b
 32377  00237E  0100               	movlb	0	; () banked
 32378  002380  51C3               	movf	(??_AESCmac+3)& (0+255),w,b
 32379  002382  21BE               	addwfc	(AESCmac@input+1)& (0+255),w,b
 32380  002384  0101               	movlb	1	; () banked
 32381  002386  6FF0               	movwf	(AESCmac@ptr+1)& (0+255),b
 32382                           
 32383                           ; BSR set to: 1
 32384                           ;lorawan_aes_cmac.c: 75: for (i=0; i<16; i++)
 32385  002388  0E00               	movlw	0
 32386  00238A  6FF4               	movwf	AESCmac@i& (0+255),b
 32387  00238C                     l9675:
 32388                           
 32389                           ; BSR set to: 1
 32390  00238C  0E0F               	movlw	15
 32391  00238E  65F4               	cpfsgt	AESCmac@i& (0+255),b
 32392  002390  D001               	goto	l20
 32393  002392  D036               	goto	u9030
 32394  002394                     l20:
 32395                           
 32396                           ; BSR set to: 1
 32397                           ;lorawan_aes_cmac.c: 76: {
 32398                           ;lorawan_aes_cmac.c: 77: if ( i < (size%16) )
 32399                           
 32400                           ; BSR set to: 1
 32401  002394  0100               	movlb	0	; () banked
 32402  002396  51BF               	movf	AESCmac@size& (0+255),w,b
 32403  002398  0B0F               	andlw	15
 32404  00239A  0101               	movlb	1	; () banked
 32405  00239C  61F4               	cpfslt	AESCmac@i& (0+255),b
 32406  00239E  D013               	goto	l22
 32407                           
 32408                           ; BSR set to: 1
 32409                           ;lorawan_aes_cmac.c: 78: {
 32410                           ;lorawan_aes_cmac.c: 79: padded[i] = ptr[i];
 32411  0023A0  51F4               	movf	AESCmac@i& (0+255),w,b
 32412  0023A2  0D01               	mullw	1
 32413  0023A4  50F3               	movf	prodl,w,c
 32414  0023A6  25EF               	addwf	AESCmac@ptr& (0+255),w,b
 32415  0023A8  6ED9               	movwf	fsr2l,c
 32416  0023AA  50F4               	movf	prodh,w,c
 32417  0023AC  21F0               	addwfc	(AESCmac@ptr+1)& (0+255),w,b
 32418  0023AE  6EDA               	movwf	fsr2h,c
 32419  0023B0  51F4               	movf	AESCmac@i& (0+255),w,b
 32420  0023B2  0D01               	mullw	1
 32421  0023B4  0EBF               	movlw	low AESCmac@padded
 32422  0023B6  24F3               	addwf	prodl,w,c
 32423  0023B8  6EE9               	movwf	fsr0l,c
 32424  0023BA  0E01               	movlw	high AESCmac@padded
 32425  0023BC  20F4               	addwfc	prodh,w,c
 32426  0023BE  6EEA               	movwf	fsr0h,c
 32427  0023C0  CFDF FFEF          	movff	indf2,indf0
 32428                           
 32429                           ;lorawan_aes_cmac.c: 80: }
 32430  0023C4  D01B               	goto	l25
 32431  0023C6                     l22:
 32432                           
 32433                           ; BSR set to: 1
 32434                           ;lorawan_aes_cmac.c: 81: else
 32435                           ;lorawan_aes_cmac.c: 82: {
 32436                           ;lorawan_aes_cmac.c: 83: if ( i == (size%16) )
 32437                           
 32438                           ; BSR set to: 1
 32439  0023C6  0100               	movlb	0	; () banked
 32440  0023C8  51BF               	movf	AESCmac@size& (0+255),w,b
 32441  0023CA  0B0F               	andlw	15
 32442  0023CC  0101               	movlb	1	; () banked
 32443  0023CE  19F4               	xorwf	AESCmac@i& (0+255),w,b
 32444  0023D0  A4D8               	btfss	status,2,c
 32445  0023D2  D00A               	goto	l24
 32446                           
 32447                           ; BSR set to: 1
 32448                           ;lorawan_aes_cmac.c: 84: {
 32449                           ;lorawan_aes_cmac.c: 85: padded[i] = 0x80;
 32450  0023D4  51F4               	movf	AESCmac@i& (0+255),w,b
 32451  0023D6  0D01               	mullw	1
 32452  0023D8  0EBF               	movlw	low AESCmac@padded
 32453  0023DA  24F3               	addwf	prodl,w,c
 32454  0023DC  6ED9               	movwf	fsr2l,c
 32455  0023DE  0E01               	movlw	high AESCmac@padded
 32456  0023E0  20F4               	addwfc	prodh,w,c
 32457  0023E2  6EDA               	movwf	fsr2h,c
 32458  0023E4  0E80               	movlw	128
 32459  0023E6  D009               	goto	L24
 32460  0023E8                     l24:
 32461                           
 32462                           ; BSR set to: 1
 32463                           ;lorawan_aes_cmac.c: 87: else
 32464                           ;lorawan_aes_cmac.c: 88: {
 32465                           ;lorawan_aes_cmac.c: 89: padded[i] = 0x00;
 32466                           
 32467                           ; BSR set to: 1
 32468  0023E8  51F4               	movf	AESCmac@i& (0+255),w,b
 32469  0023EA  0D01               	mullw	1
 32470  0023EC  0EBF               	movlw	low AESCmac@padded
 32471  0023EE  24F3               	addwf	prodl,w,c
 32472  0023F0  6ED9               	movwf	fsr2l,c
 32473  0023F2  0E01               	movlw	high AESCmac@padded
 32474  0023F4  20F4               	addwfc	prodh,w,c
 32475  0023F6  6EDA               	movwf	fsr2h,c
 32476  0023F8  0E00               	movlw	0
 32477  0023FA                     L24:
 32478  0023FA  6EDF               	movwf	indf2,c
 32479  0023FC                     l25:
 32480                           
 32481                           ; BSR set to: 1
 32482                           
 32483                           ; BSR set to: 1
 32484                           
 32485                           ; BSR set to: 1
 32486  0023FC  2BF4               	incf	AESCmac@i& (0+255),f,b
 32487  0023FE  D7C6               	goto	l9675
 32488  002400                     u9030:
 32489                           
 32490                           ; BSR set to: 1
 32491                           ;lorawan_aes_cmac.c: 90: }
 32492                           ;lorawan_aes_cmac.c: 91: }
 32493                           ;lorawan_aes_cmac.c: 92: }
 32494                           ;lorawan_aes_cmac.c: 95: for (i=0; i<sizeof(mLast); i++)
 32495                           
 32496                           ; BSR set to: 1
 32497  002400  0E00               	movlw	0
 32498  002402  6FF4               	movwf	AESCmac@i& (0+255),b
 32499  002404                     l9695:
 32500                           
 32501                           ; BSR set to: 1
 32502  002404  0E0F               	movlw	15
 32503  002406  65F4               	cpfsgt	AESCmac@i& (0+255),b
 32504  002408  D001               	goto	l26
 32505  00240A  D023               	goto	u9050
 32506  00240C                     l26:
 32507                           
 32508                           ; BSR set to: 1
 32509                           ;lorawan_aes_cmac.c: 96: {
 32510                           ;lorawan_aes_cmac.c: 97: mLast[i] = padded[i] ^ k2[i];
 32511                           
 32512                           ; BSR set to: 1
 32513  00240C  51F4               	movf	AESCmac@i& (0+255),w,b
 32514  00240E  0D01               	mullw	1
 32515  002410  0EAF               	movlw	low AESCmac@mLast
 32516  002412  24F3               	addwf	prodl,w,c
 32517  002414  6ED9               	movwf	fsr2l,c
 32518  002416  0E01               	movlw	high AESCmac@mLast
 32519  002418  20F4               	addwfc	prodh,w,c
 32520  00241A  6EDA               	movwf	fsr2h,c
 32521  00241C  51F4               	movf	AESCmac@i& (0+255),w,b
 32522  00241E  0D01               	mullw	1
 32523  002420  0E8F               	movlw	low AESCmac@k2
 32524  002422  24F3               	addwf	prodl,w,c
 32525  002424  6EE9               	movwf	fsr0l,c
 32526  002426  0E01               	movlw	high AESCmac@k2
 32527  002428  20F4               	addwfc	prodh,w,c
 32528  00242A  6EEA               	movwf	fsr0h,c
 32529  00242C  50EF               	movf	indf0,w,c
 32530  00242E  0100               	movlb	0	; () banked
 32531  002430  6FC0               	movwf	??_AESCmac& (0+255),b
 32532  002432  0101               	movlb	1	; () banked
 32533  002434  51F4               	movf	AESCmac@i& (0+255),w,b
 32534  002436  0D01               	mullw	1
 32535  002438  0EBF               	movlw	low AESCmac@padded
 32536  00243A  24F3               	addwf	prodl,w,c
 32537  00243C  6EE9               	movwf	fsr0l,c
 32538  00243E  0E01               	movlw	high AESCmac@padded
 32539  002440  20F4               	addwfc	prodh,w,c
 32540  002442  6EEA               	movwf	fsr0h,c
 32541  002444  50EF               	movf	indf0,w,c
 32542  002446  0100               	movlb	0	; () banked
 32543  002448  19C0               	xorwf	??_AESCmac& (0+255),w,b
 32544  00244A  6EDF               	movwf	indf2,c
 32545                           
 32546                           ; BSR set to: 0
 32547  00244C  0101               	movlb	1	; () banked
 32548  00244E  2BF4               	incf	AESCmac@i& (0+255),f,b
 32549  002450  D7D9               	goto	l9695
 32550  002452                     u9050:
 32551                           
 32552                           ;lorawan_aes_cmac.c: 98: }
 32553                           ;lorawan_aes_cmac.c: 99: }
 32554                           ;lorawan_aes_cmac.c: 101: memset(x, 0, sizeof(x));
 32555                           
 32556                           ; BSR set to: 1
 32557                           
 32558                           ; BSR set to: 1
 32559  002452  0EDF               	movlw	low AESCmac@x
 32560  002454  0100               	movlb	0	; () banked
 32561  002456  6F60               	movwf	memset@p1& (0+255),b
 32562  002458  0E01               	movlw	high AESCmac@x
 32563  00245A  6F61               	movwf	(memset@p1+1)& (0+255),b
 32564  00245C  0E00               	movlw	0
 32565  00245E  6F63               	movwf	(memset@c+1)& (0+255),b
 32566  002460  0E00               	movlw	0
 32567  002462  6F62               	movwf	memset@c& (0+255),b
 32568  002464  0E00               	movlw	0
 32569  002466  6F65               	movwf	(memset@n+1)& (0+255),b
 32570  002468  0E10               	movlw	16
 32571  00246A  6F64               	movwf	memset@n& (0+255),b
 32572  00246C  ECD6  F046         	call	_memset	;wreg free
 32573                           
 32574                           ;lorawan_aes_cmac.c: 103: for (i=0; i<(n-1); i++)
 32575  002470  0E00               	movlw	0
 32576  002472  0101               	movlb	1	; () banked
 32577  002474  6FF4               	movwf	AESCmac@i& (0+255),b
 32578  002476  D056               	goto	l28
 32579  002478                     
 32580                           ;lorawan_aes_cmac.c: 104: {
 32581                           ;lorawan_aes_cmac.c: 105: for (j=0; j<16; j++)
 32582                           
 32583                           ; BSR set to: 1
 32584  002478  0E00               	movlw	0
 32585  00247A  0101               	movlb	1	; () banked
 32586  00247C  6FF3               	movwf	AESCmac@j& (0+255),b
 32587  00247E                     l9711:
 32588                           
 32589                           ; BSR set to: 1
 32590  00247E  0E0F               	movlw	15
 32591  002480  65F3               	cpfsgt	AESCmac@j& (0+255),b
 32592  002482  D001               	goto	l30
 32593  002484  D033               	goto	u9070
 32594  002486                     l30:
 32595                           
 32596                           ; BSR set to: 1
 32597                           ;lorawan_aes_cmac.c: 106: {
 32598                           ;lorawan_aes_cmac.c: 107: y[j] = x[j] ^ input[(i << (4))+j];
 32599                           
 32600                           ; BSR set to: 1
 32601  002486  51F3               	movf	AESCmac@j& (0+255),w,b
 32602  002488  0D01               	mullw	1
 32603  00248A  0ECF               	movlw	low AESCmac@y
 32604  00248C  24F3               	addwf	prodl,w,c
 32605  00248E  6ED9               	movwf	fsr2l,c
 32606  002490  0E01               	movlw	high AESCmac@y
 32607  002492  20F4               	addwfc	prodh,w,c
 32608  002494  6EDA               	movwf	fsr2h,c
 32609  002496  51F4               	movf	AESCmac@i& (0+255),w,b
 32610  002498  0100               	movlb	0	; () banked
 32611  00249A  6FC0               	movwf	??_AESCmac& (0+255),b
 32612  00249C  6BC1               	clrf	(??_AESCmac+1)& (0+255),b
 32613  00249E  3BC0               	swapf	??_AESCmac& (0+255),f,b
 32614  0024A0  3BC1               	swapf	(??_AESCmac+1)& (0+255),f,b
 32615  0024A2  0EF0               	movlw	240
 32616  0024A4  17C1               	andwf	(??_AESCmac+1)& (0+255),f,b
 32617  0024A6  51C0               	movf	??_AESCmac& (0+255),w,b
 32618  0024A8  0B0F               	andlw	15
 32619  0024AA  13C1               	iorwf	(??_AESCmac+1)& (0+255),f,b
 32620  0024AC  0EF0               	movlw	240
 32621  0024AE  17C0               	andwf	??_AESCmac& (0+255),f,b
 32622  0024B0  0101               	movlb	1	; () banked
 32623  0024B2  51F3               	movf	AESCmac@j& (0+255),w,b
 32624  0024B4  0100               	movlb	0	; () banked
 32625  0024B6  27C0               	addwf	??_AESCmac& (0+255),f,b
 32626  0024B8  0E00               	movlw	0
 32627  0024BA  23C1               	addwfc	(??_AESCmac+1)& (0+255),f,b
 32628  0024BC  51C0               	movf	??_AESCmac& (0+255),w,b
 32629  0024BE  25BD               	addwf	AESCmac@input& (0+255),w,b
 32630  0024C0  6EE9               	movwf	fsr0l,c
 32631  0024C2  51C1               	movf	(??_AESCmac+1)& (0+255),w,b
 32632  0024C4  21BE               	addwfc	(AESCmac@input+1)& (0+255),w,b
 32633  0024C6  6EEA               	movwf	fsr0h,c
 32634  0024C8  50EF               	movf	indf0,w,c
 32635  0024CA  6FC2               	movwf	(??_AESCmac+2)& (0+255),b
 32636  0024CC  0101               	movlb	1	; () banked
 32637  0024CE  51F3               	movf	AESCmac@j& (0+255),w,b
 32638  0024D0  0D01               	mullw	1
 32639  0024D2  0EDF               	movlw	low AESCmac@x
 32640  0024D4  24F3               	addwf	prodl,w,c
 32641  0024D6  6EE9               	movwf	fsr0l,c
 32642  0024D8  0E01               	movlw	high AESCmac@x
 32643  0024DA  20F4               	addwfc	prodh,w,c
 32644  0024DC  6EEA               	movwf	fsr0h,c
 32645  0024DE  50EF               	movf	indf0,w,c
 32646  0024E0  0100               	movlb	0	; () banked
 32647  0024E2  19C2               	xorwf	(??_AESCmac+2)& (0+255),w,b
 32648  0024E4  6EDF               	movwf	indf2,c
 32649                           
 32650                           ; BSR set to: 0
 32651  0024E6  0101               	movlb	1	; () banked
 32652  0024E8  2BF3               	incf	AESCmac@j& (0+255),f,b
 32653  0024EA  D7C9               	goto	l9711
 32654  0024EC                     u9070:
 32655                           
 32656                           ; BSR set to: 1
 32657                           ;lorawan_aes_cmac.c: 108: }
 32658                           ;lorawan_aes_cmac.c: 109: memcpy(x, y, sizeof(y));
 32659                           
 32660                           ; BSR set to: 1
 32661  0024EC  0EDF               	movlw	low AESCmac@x
 32662  0024EE  0100               	movlb	0	; () banked
 32663  0024F0  6F60               	movwf	memcpy@d1& (0+255),b
 32664  0024F2  0E01               	movlw	high AESCmac@x
 32665  0024F4  6F61               	movwf	(memcpy@d1+1)& (0+255),b
 32666  0024F6  0ECF               	movlw	low AESCmac@y
 32667  0024F8  6F62               	movwf	memcpy@s1& (0+255),b
 32668  0024FA  0E01               	movlw	high AESCmac@y
 32669  0024FC  6F63               	movwf	(memcpy@s1+1)& (0+255),b
 32670  0024FE  0E00               	movlw	0
 32671  002500  6F65               	movwf	(memcpy@n+1)& (0+255),b
 32672  002502  0E10               	movlw	16
 32673  002504  6F64               	movwf	memcpy@n& (0+255),b
 32674  002506  EC5D  F041         	call	_memcpy	;wreg free
 32675                           
 32676                           ;lorawan_aes_cmac.c: 110: AESEncodeLoRa(x,key);
 32677  00250A  0EDF               	movlw	low AESCmac@x
 32678  00250C  0100               	movlb	0	; () banked
 32679  00250E  6F7D               	movwf	AESEncodeLoRa@block& (0+255),b
 32680  002510  0E01               	movlw	high AESCmac@x
 32681  002512  6F7E               	movwf	(AESEncodeLoRa@block+1)& (0+255),b
 32682  002514  C0B9  F07F         	movff	AESCmac@key,AESEncodeLoRa@key
 32683  002518  C0BA  F080         	movff	AESCmac@key+1,AESEncodeLoRa@key+1
 32684  00251C  EC28  F046         	call	_AESEncodeLoRa	;wreg free
 32685  002520  0101               	movlb	1	; () banked
 32686  002522  2BF4               	incf	AESCmac@i& (0+255),f,b
 32687  002524                     l28:
 32688                           
 32689                           ; BSR set to: 1
 32690                           
 32691                           ; BSR set to: 1
 32692  002524  0EFF               	movlw	255
 32693  002526  0100               	movlb	0	; () banked
 32694  002528  6FC0               	movwf	??_AESCmac& (0+255),b
 32695  00252A  0EFF               	movlw	255
 32696  00252C  6FC1               	movwf	(??_AESCmac+1)& (0+255),b
 32697  00252E  0101               	movlb	1	; () banked
 32698  002530  51F2               	movf	AESCmac@n& (0+255),w,b
 32699  002532  0100               	movlb	0	; () banked
 32700  002534  6FC2               	movwf	(??_AESCmac+2)& (0+255),b
 32701  002536  6BC3               	clrf	(??_AESCmac+3)& (0+255),b
 32702  002538  51C0               	movf	??_AESCmac& (0+255),w,b
 32703  00253A  27C2               	addwf	(??_AESCmac+2)& (0+255),f,b
 32704  00253C  51C1               	movf	(??_AESCmac+1)& (0+255),w,b
 32705  00253E  23C3               	addwfc	(??_AESCmac+3)& (0+255),f,b
 32706  002540  0101               	movlb	1	; () banked
 32707  002542  51F4               	movf	AESCmac@i& (0+255),w,b
 32708  002544  0100               	movlb	0	; () banked
 32709  002546  6FC4               	movwf	(??_AESCmac+4)& (0+255),b
 32710  002548  6BC5               	clrf	(??_AESCmac+5)& (0+255),b
 32711  00254A  51C2               	movf	(??_AESCmac+2)& (0+255),w,b
 32712  00254C  5DC4               	subwf	(??_AESCmac+4)& (0+255),w,b
 32713  00254E  51C5               	movf	(??_AESCmac+5)& (0+255),w,b
 32714  002550  0A80               	xorlw	128
 32715  002552  6FC6               	movwf	(??_AESCmac+6)& (0+255),b
 32716  002554  51C3               	movf	(??_AESCmac+3)& (0+255),w,b
 32717  002556  0A80               	xorlw	128
 32718  002558  59C6               	subwfb	(??_AESCmac+6)& (0+255),w,b
 32719  00255A  A0D8               	btfss	status,0,c
 32720  00255C  D78D               	goto	l29
 32721                           
 32722                           ; BSR set to: 0
 32723                           ;lorawan_aes_cmac.c: 111: }
 32724                           ;lorawan_aes_cmac.c: 113: for (i=0; i<sizeof(x); i++)
 32725                           
 32726                           ; BSR set to: 0
 32727  00255E  0E00               	movlw	0
 32728  002560  0101               	movlb	1	; () banked
 32729  002562  6FF4               	movwf	AESCmac@i& (0+255),b
 32730  002564                     l9731:
 32731                           
 32732                           ; BSR set to: 1
 32733  002564  0E0F               	movlw	15
 32734  002566  65F4               	cpfsgt	AESCmac@i& (0+255),b
 32735  002568  D001               	goto	l33
 32736  00256A  D023               	goto	u9100
 32737  00256C                     l33:
 32738                           
 32739                           ; BSR set to: 1
 32740                           ;lorawan_aes_cmac.c: 114: {
 32741                           ;lorawan_aes_cmac.c: 115: y[i] = x[i] ^ mLast[i];
 32742                           
 32743                           ; BSR set to: 1
 32744  00256C  51F4               	movf	AESCmac@i& (0+255),w,b
 32745  00256E  0D01               	mullw	1
 32746  002570  0ECF               	movlw	low AESCmac@y
 32747  002572  24F3               	addwf	prodl,w,c
 32748  002574  6ED9               	movwf	fsr2l,c
 32749  002576  0E01               	movlw	high AESCmac@y
 32750  002578  20F4               	addwfc	prodh,w,c
 32751  00257A  6EDA               	movwf	fsr2h,c
 32752  00257C  51F4               	movf	AESCmac@i& (0+255),w,b
 32753  00257E  0D01               	mullw	1
 32754  002580  0EAF               	movlw	low AESCmac@mLast
 32755  002582  24F3               	addwf	prodl,w,c
 32756  002584  6EE9               	movwf	fsr0l,c
 32757  002586  0E01               	movlw	high AESCmac@mLast
 32758  002588  20F4               	addwfc	prodh,w,c
 32759  00258A  6EEA               	movwf	fsr0h,c
 32760  00258C  50EF               	movf	indf0,w,c
 32761  00258E  0100               	movlb	0	; () banked
 32762  002590  6FC0               	movwf	??_AESCmac& (0+255),b
 32763  002592  0101               	movlb	1	; () banked
 32764  002594  51F4               	movf	AESCmac@i& (0+255),w,b
 32765  002596  0D01               	mullw	1
 32766  002598  0EDF               	movlw	low AESCmac@x
 32767  00259A  24F3               	addwf	prodl,w,c
 32768  00259C  6EE9               	movwf	fsr0l,c
 32769  00259E  0E01               	movlw	high AESCmac@x
 32770  0025A0  20F4               	addwfc	prodh,w,c
 32771  0025A2  6EEA               	movwf	fsr0h,c
 32772  0025A4  50EF               	movf	indf0,w,c
 32773  0025A6  0100               	movlb	0	; () banked
 32774  0025A8  19C0               	xorwf	??_AESCmac& (0+255),w,b
 32775  0025AA  6EDF               	movwf	indf2,c
 32776                           
 32777                           ; BSR set to: 0
 32778  0025AC  0101               	movlb	1	; () banked
 32779  0025AE  2BF4               	incf	AESCmac@i& (0+255),f,b
 32780  0025B0  D7D9               	goto	l9731
 32781  0025B2                     u9100:
 32782                           
 32783                           ; BSR set to: 1
 32784                           ;lorawan_aes_cmac.c: 116: }
 32785                           ;lorawan_aes_cmac.c: 118: AESEncodeLoRa(y, key);
 32786                           
 32787                           ; BSR set to: 1
 32788  0025B2  0ECF               	movlw	low AESCmac@y
 32789  0025B4  0100               	movlb	0	; () banked
 32790  0025B6  6F7D               	movwf	AESEncodeLoRa@block& (0+255),b
 32791  0025B8  0E01               	movlw	high AESCmac@y
 32792  0025BA  6F7E               	movwf	(AESEncodeLoRa@block+1)& (0+255),b
 32793  0025BC  C0B9  F07F         	movff	AESCmac@key,AESEncodeLoRa@key
 32794  0025C0  C0BA  F080         	movff	AESCmac@key+1,AESEncodeLoRa@key+1
 32795  0025C4  EC28  F046         	call	_AESEncodeLoRa	;wreg free
 32796                           
 32797                           ;lorawan_aes_cmac.c: 120: memcpy(output, y, sizeof(y));
 32798  0025C8  C0BB  F060         	movff	AESCmac@output,memcpy@d1
 32799  0025CC  C0BC  F061         	movff	AESCmac@output+1,memcpy@d1+1
 32800  0025D0  0ECF               	movlw	low AESCmac@y
 32801  0025D2  0100               	movlb	0	; () banked
 32802  0025D4  6F62               	movwf	memcpy@s1& (0+255),b
 32803  0025D6  0E01               	movlw	high AESCmac@y
 32804  0025D8  6F63               	movwf	(memcpy@s1+1)& (0+255),b
 32805  0025DA  0E00               	movlw	0
 32806  0025DC  6F65               	movwf	(memcpy@n+1)& (0+255),b
 32807  0025DE  0E10               	movlw	16
 32808  0025E0  6F64               	movwf	memcpy@n& (0+255),b
 32809  0025E2  EC5D  F041         	call	_memcpy	;wreg free
 32810  0025E6  0012               	return		;funcret
 32811  0025E8                     __end_of_AESCmac:
 32812                           	opt stack 0
 32813                           tosu	equ	0xFFF
 32814                           tosh	equ	0xFFE
 32815                           tosl	equ	0xFFD
 32816                           pclath	equ	0xFFA
 32817                           tblptru	equ	0xFF8
 32818                           tblptrh	equ	0xFF7
 32819                           tblptrl	equ	0xFF6
 32820                           tablat	equ	0xFF5
 32821                           prodh	equ	0xFF4
 32822                           prodl	equ	0xFF3
 32823                           intcon	equ	0xFF2
 32824                           intcon2	equ	0xFF1
 32825                           intcon3	equ	0xFF0
 32826                           indf0	equ	0xFEF
 32827                           postinc0	equ	0xFEE
 32828                           fsr0h	equ	0xFEA
 32829                           fsr0l	equ	0xFE9
 32830                           wreg	equ	0xFE8
 32831                           postinc1	equ	0xFE6
 32832                           postdec1	equ	0xFE5
 32833                           plusw1	equ	0xFE3
 32834                           fsr1h	equ	0xFE2
 32835                           fsr1l	equ	0xFE1
 32836                           indf2	equ	0xFDF
 32837                           postinc2	equ	0xFDE
 32838                           postdec2	equ	0xFDD
 32839                           plusw2	equ	0xFDB
 32840                           fsr2h	equ	0xFDA
 32841                           fsr2l	equ	0xFD9
 32842                           status	equ	0xFD8
 32843                           
 32844 ;; *************** function _GenerateSubkey *****************
 32845 ;; Defined at:
 32846 ;;		line 124 in file "mcc_generated_files/LoRaWAN/lorawan_aes_cmac.c"
 32847 ;; Parameters:    Size  Location     Type
 32848 ;;  key             2   49[BANK0 ] PTR unsigned char 
 32849 ;;		 -> loRa.activationParameters(105), loRa(245), 
 32850 ;;  k1              2   51[BANK0 ] PTR unsigned char 
 32851 ;;		 -> AESCmac@k1(16), 
 32852 ;;  k2              2   53[BANK0 ] PTR unsigned char 
 32853 ;;		 -> AESCmac@k2(16), 
 32854 ;; Auto vars:     Size  Location     Type
 32855 ;;  l              16   72[BANK0 ] unsigned char [16]
 32856 ;;  const_Rb       16   56[BANK0 ] unsigned char [16]
 32857 ;;  i               1   88[BANK0 ] unsigned char 
 32858 ;; Return value:  Size  Location     Type
 32859 ;;                  1    wreg      void 
 32860 ;; Registers used:
 32861 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 32862 ;; Tracked objects:
 32863 ;;		On entry : 0/0
 32864 ;;		On exit  : 0/0
 32865 ;;		Unchanged: 0/0
 32866 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 32867 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 32868 ;;      Locals:         0      33       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 32869 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 32870 ;;      Totals:         0      40       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 32871 ;;Total ram usage:       40 bytes
 32872 ;; Hardware stack levels used:    1
 32873 ;; Hardware stack levels required when called:   10
 32874 ;; This function calls:
 32875 ;;		_AESEncodeLoRa
 32876 ;;		_FillSubKey
 32877 ;;		_memset
 32878 ;; This function is called by:
 32879 ;;		_AESCmac
 32880 ;; This function uses a non-reentrant model
 32881 ;;
 32882                           
 32883                           	psect	text153
 32884  005ABC                     __ptext153:
 32885                           	opt stack 0
 32886  005ABC                     _GenerateSubkey:
 32887                           	opt stack 17
 32888                           
 32889                           ;lorawan_aes_cmac.c: 126: uint8_t i = 0;
 32890                           
 32891                           ;incstack = 0
 32892  005ABC  0E00               	movlw	0
 32893  005ABE  0100               	movlb	0	; () banked
 32894  005AC0  6FB8               	movwf	GenerateSubkey@i& (0+255),b
 32895                           
 32896                           ; BSR set to: 0
 32897                           ;lorawan_aes_cmac.c: 127: uint8_t l[16];
 32898                           ;lorawan_aes_cmac.c: 128: uint8_t const_Rb[16] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x
      +                          00, 0x00,
 32899                           ;lorawan_aes_cmac.c: 129: 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x87};
 32900  005AC2  EE23  F0B7         	lfsr	2,GenerateSubkey@F7103
 32901  005AC6  EE00  F098         	lfsr	0,GenerateSubkey@const_Rb
 32902  005ACA  0E0F               	movlw	15
 32903  005ACC                     u8441:
 32904  005ACC  CFDB FFEB          	movff	plusw2,plusw0
 32905  005AD0  06E8               	decf	wreg,f,c
 32906  005AD2  E2FC               	bc	u8441
 32907                           
 32908                           ; BSR set to: 0
 32909                           ;lorawan_aes_cmac.c: 132: memset(l, 0, sizeof(l));
 32910  005AD4  0EA8               	movlw	low GenerateSubkey@l
 32911  005AD6  6F60               	movwf	memset@p1& (0+255),b
 32912  005AD8  0E00               	movlw	high GenerateSubkey@l
 32913  005ADA  6F61               	movwf	(memset@p1+1)& (0+255),b
 32914  005ADC  0E00               	movlw	0
 32915  005ADE  6F63               	movwf	(memset@c+1)& (0+255),b
 32916  005AE0  0E00               	movlw	0
 32917  005AE2  6F62               	movwf	memset@c& (0+255),b
 32918  005AE4  0E00               	movlw	0
 32919  005AE6  6F65               	movwf	(memset@n+1)& (0+255),b
 32920  005AE8  0E10               	movlw	16
 32921  005AEA  6F64               	movwf	memset@n& (0+255),b
 32922  005AEC  ECD6  F046         	call	_memset	;wreg free
 32923                           
 32924                           ;lorawan_aes_cmac.c: 134: AESEncodeLoRa(l, key);
 32925  005AF0  0EA8               	movlw	low GenerateSubkey@l
 32926  005AF2  0100               	movlb	0	; () banked
 32927  005AF4  6F7D               	movwf	AESEncodeLoRa@block& (0+255),b
 32928  005AF6  0E00               	movlw	high GenerateSubkey@l
 32929  005AF8  6F7E               	movwf	(AESEncodeLoRa@block+1)& (0+255),b
 32930  005AFA  C091  F07F         	movff	GenerateSubkey@key,AESEncodeLoRa@key
 32931  005AFE  C092  F080         	movff	GenerateSubkey@key+1,AESEncodeLoRa@key+1
 32932  005B02  EC28  F046         	call	_AESEncodeLoRa	;wreg free
 32933                           
 32934                           ;lorawan_aes_cmac.c: 137: if ( (l[0] & 0x80) == 0x00 )
 32935  005B06  0100               	movlb	0	; () banked
 32936  005B08  BFA8               	btfsc	GenerateSubkey@l& (0+255),7,b
 32937  005B0A  D00D               	goto	l40
 32938                           
 32939                           ; BSR set to: 0
 32940                           ;lorawan_aes_cmac.c: 138: {
 32941                           ;lorawan_aes_cmac.c: 139: FillSubKey( l, k1, (sizeof(l) ) );
 32942  005B0C  0EA8               	movlw	low GenerateSubkey@l
 32943  005B0E  6F60               	movwf	FillSubKey@source& (0+255),b
 32944  005B10  0E00               	movlw	high GenerateSubkey@l
 32945  005B12  6F61               	movwf	(FillSubKey@source+1)& (0+255),b
 32946  005B14  C093  F062         	movff	GenerateSubkey@k1,FillSubKey@key
 32947  005B18  C094  F063         	movff	GenerateSubkey@k1+1,FillSubKey@key+1
 32948  005B1C  0E10               	movlw	16
 32949  005B1E  6F64               	movwf	FillSubKey@size& (0+255),b
 32950  005B20  ECCB  F040         	call	_FillSubKey	;wreg free
 32951                           
 32952                           ;lorawan_aes_cmac.c: 140: }
 32953  005B24  D02A               	goto	u8470
 32954  005B26                     l40:
 32955                           
 32956                           ;lorawan_aes_cmac.c: 141: else
 32957                           ;lorawan_aes_cmac.c: 142: {
 32958                           ;lorawan_aes_cmac.c: 143: FillSubKey( l, k1, (sizeof(l) ) );
 32959  005B26  0EA8               	movlw	low GenerateSubkey@l
 32960  005B28  0100               	movlb	0	; () banked
 32961  005B2A  6F60               	movwf	FillSubKey@source& (0+255),b
 32962  005B2C  0E00               	movlw	high GenerateSubkey@l
 32963  005B2E  6F61               	movwf	(FillSubKey@source+1)& (0+255),b
 32964  005B30  C093  F062         	movff	GenerateSubkey@k1,FillSubKey@key
 32965  005B34  C094  F063         	movff	GenerateSubkey@k1+1,FillSubKey@key+1
 32966  005B38  0E10               	movlw	16
 32967  005B3A  6F64               	movwf	FillSubKey@size& (0+255),b
 32968  005B3C  ECCB  F040         	call	_FillSubKey	;wreg free
 32969                           
 32970                           ;lorawan_aes_cmac.c: 145: for (i=0; i<sizeof(l); i++)
 32971  005B40  0E00               	movlw	0
 32972  005B42  0100               	movlb	0	; () banked
 32973  005B44  6FB8               	movwf	GenerateSubkey@i& (0+255),b
 32974  005B46                     l9285:
 32975                           
 32976                           ; BSR set to: 0
 32977  005B46  0E0F               	movlw	15
 32978  005B48  65B8               	cpfsgt	GenerateSubkey@i& (0+255),b
 32979  005B4A  D001               	goto	l42
 32980  005B4C  D016               	goto	u8470
 32981  005B4E                     l42:
 32982                           
 32983                           ; BSR set to: 0
 32984                           ;lorawan_aes_cmac.c: 146: {
 32985                           ;lorawan_aes_cmac.c: 147: k1[i] ^= const_Rb[i];
 32986                           
 32987                           ; BSR set to: 0
 32988  005B4E  51B8               	movf	GenerateSubkey@i& (0+255),w,b
 32989  005B50  0D01               	mullw	1
 32990  005B52  0E98               	movlw	low GenerateSubkey@const_Rb
 32991  005B54  24F3               	addwf	prodl,w,c
 32992  005B56  6ED9               	movwf	fsr2l,c
 32993  005B58  0E00               	movlw	high GenerateSubkey@const_Rb
 32994  005B5A  20F4               	addwfc	prodh,w,c
 32995  005B5C  6EDA               	movwf	fsr2h,c
 32996  005B5E  50DF               	movf	indf2,w,c
 32997  005B60  6F97               	movwf	??_GenerateSubkey& (0+255),b
 32998  005B62  51B8               	movf	GenerateSubkey@i& (0+255),w,b
 32999  005B64  0D01               	mullw	1
 33000  005B66  50F3               	movf	prodl,w,c
 33001  005B68  2593               	addwf	GenerateSubkey@k1& (0+255),w,b
 33002  005B6A  6ED9               	movwf	fsr2l,c
 33003  005B6C  50F4               	movf	prodh,w,c
 33004  005B6E  2194               	addwfc	(GenerateSubkey@k1+1)& (0+255),w,b
 33005  005B70  6EDA               	movwf	fsr2h,c
 33006  005B72  5197               	movf	??_GenerateSubkey& (0+255),w,b
 33007  005B74  1ADF               	xorwf	indf2,f,c
 33008                           
 33009                           ; BSR set to: 0
 33010  005B76  2BB8               	incf	GenerateSubkey@i& (0+255),f,b
 33011  005B78  D7E6               	goto	l9285
 33012  005B7A                     u8470:
 33013                           
 33014                           ;lorawan_aes_cmac.c: 148: }
 33015                           ;lorawan_aes_cmac.c: 149: }
 33016                           ;lorawan_aes_cmac.c: 152: if ( (k1[0] & 0x80) == 0x00 )
 33017                           
 33018                           ; BSR set to: 0
 33019                           
 33020                           ; BSR set to: 0
 33021  005B7A  C093  FFD9         	movff	GenerateSubkey@k1,fsr2l
 33022  005B7E  C094  FFDA         	movff	GenerateSubkey@k1+1,fsr2h
 33023  005B82  0100               	movlb	0	; () banked
 33024  005B84  BEDF               	btfsc	indf2,7,c
 33025  005B86  D00D               	goto	l44
 33026                           
 33027                           ; BSR set to: 0
 33028                           ;lorawan_aes_cmac.c: 153: {
 33029                           ;lorawan_aes_cmac.c: 154: FillSubKey( k1, k2, (sizeof(l)) );
 33030  005B88  C093  F060         	movff	GenerateSubkey@k1,FillSubKey@source
 33031  005B8C  C094  F061         	movff	GenerateSubkey@k1+1,FillSubKey@source+1
 33032  005B90  C095  F062         	movff	GenerateSubkey@k2,FillSubKey@key
 33033  005B94  C096  F063         	movff	GenerateSubkey@k2+1,FillSubKey@key+1
 33034  005B98  0E10               	movlw	16
 33035  005B9A  6F64               	movwf	FillSubKey@size& (0+255),b
 33036  005B9C  ECCB  F040         	call	_FillSubKey	;wreg free
 33037                           
 33038                           ;lorawan_aes_cmac.c: 155: }
 33039  005BA0  0012               	return	
 33040  005BA2                     l44:
 33041                           
 33042                           ;lorawan_aes_cmac.c: 156: else
 33043                           ;lorawan_aes_cmac.c: 157: {
 33044                           ;lorawan_aes_cmac.c: 158: FillSubKey( k1, k2, (sizeof(l) ) );
 33045  005BA2  C093  F060         	movff	GenerateSubkey@k1,FillSubKey@source
 33046  005BA6  C094  F061         	movff	GenerateSubkey@k1+1,FillSubKey@source+1
 33047  005BAA  C095  F062         	movff	GenerateSubkey@k2,FillSubKey@key
 33048  005BAE  C096  F063         	movff	GenerateSubkey@k2+1,FillSubKey@key+1
 33049  005BB2  0E10               	movlw	16
 33050  005BB4  0100               	movlb	0	; () banked
 33051  005BB6  6F64               	movwf	FillSubKey@size& (0+255),b
 33052  005BB8  ECCB  F040         	call	_FillSubKey	;wreg free
 33053                           
 33054                           ;lorawan_aes_cmac.c: 160: for (i=0; i<sizeof(l); i++)
 33055  005BBC  0E00               	movlw	0
 33056  005BBE  0100               	movlb	0	; () banked
 33057  005BC0  6FB8               	movwf	GenerateSubkey@i& (0+255),b
 33058  005BC2                     l9303:
 33059                           
 33060                           ; BSR set to: 0
 33061  005BC2  0E0F               	movlw	15
 33062  005BC4  65B8               	cpfsgt	GenerateSubkey@i& (0+255),b
 33063  005BC6  D001               	goto	l46
 33064  005BC8  0012               	return	
 33065  005BCA                     l46:
 33066                           
 33067                           ; BSR set to: 0
 33068                           ;lorawan_aes_cmac.c: 161: {
 33069                           ;lorawan_aes_cmac.c: 162: k2[i] = k2[i] ^ const_Rb[i];
 33070                           
 33071                           ; BSR set to: 0
 33072  005BCA  51B8               	movf	GenerateSubkey@i& (0+255),w,b
 33073  005BCC  0D01               	mullw	1
 33074  005BCE  50F3               	movf	prodl,w,c
 33075  005BD0  2595               	addwf	GenerateSubkey@k2& (0+255),w,b
 33076  005BD2  6ED9               	movwf	fsr2l,c
 33077  005BD4  50F4               	movf	prodh,w,c
 33078  005BD6  2196               	addwfc	(GenerateSubkey@k2+1)& (0+255),w,b
 33079  005BD8  6EDA               	movwf	fsr2h,c
 33080  005BDA  51B8               	movf	GenerateSubkey@i& (0+255),w,b
 33081  005BDC  0D01               	mullw	1
 33082  005BDE  0E98               	movlw	low GenerateSubkey@const_Rb
 33083  005BE0  24F3               	addwf	prodl,w,c
 33084  005BE2  6EE9               	movwf	fsr0l,c
 33085  005BE4  0E00               	movlw	high GenerateSubkey@const_Rb
 33086  005BE6  20F4               	addwfc	prodh,w,c
 33087  005BE8  6EEA               	movwf	fsr0h,c
 33088  005BEA  50EF               	movf	indf0,w,c
 33089  005BEC  6F97               	movwf	??_GenerateSubkey& (0+255),b
 33090  005BEE  51B8               	movf	GenerateSubkey@i& (0+255),w,b
 33091  005BF0  0D01               	mullw	1
 33092  005BF2  50F3               	movf	prodl,w,c
 33093  005BF4  2595               	addwf	GenerateSubkey@k2& (0+255),w,b
 33094  005BF6  6EE9               	movwf	fsr0l,c
 33095  005BF8  50F4               	movf	prodh,w,c
 33096  005BFA  2196               	addwfc	(GenerateSubkey@k2+1)& (0+255),w,b
 33097  005BFC  6EEA               	movwf	fsr0h,c
 33098  005BFE  50EF               	movf	indf0,w,c
 33099  005C00  1997               	xorwf	??_GenerateSubkey& (0+255),w,b
 33100  005C02  6EDF               	movwf	indf2,c
 33101                           
 33102                           ; BSR set to: 0
 33103  005C04  2BB8               	incf	GenerateSubkey@i& (0+255),f,b
 33104  005C06  D7DD               	goto	l9303
 33105  005C08                     __end_of_GenerateSubkey:
 33106                           	opt stack 0
 33107                           tosu	equ	0xFFF
 33108                           tosh	equ	0xFFE
 33109                           tosl	equ	0xFFD
 33110                           pclath	equ	0xFFA
 33111                           tblptru	equ	0xFF8
 33112                           tblptrh	equ	0xFF7
 33113                           tblptrl	equ	0xFF6
 33114                           tablat	equ	0xFF5
 33115                           prodh	equ	0xFF4
 33116                           prodl	equ	0xFF3
 33117                           intcon	equ	0xFF2
 33118                           intcon2	equ	0xFF1
 33119                           intcon3	equ	0xFF0
 33120                           indf0	equ	0xFEF
 33121                           postinc0	equ	0xFEE
 33122                           plusw0	equ	0xFEB
 33123                           fsr0h	equ	0xFEA
 33124                           fsr0l	equ	0xFE9
 33125                           wreg	equ	0xFE8
 33126                           postinc1	equ	0xFE6
 33127                           postdec1	equ	0xFE5
 33128                           plusw1	equ	0xFE3
 33129                           fsr1h	equ	0xFE2
 33130                           fsr1l	equ	0xFE1
 33131                           indf2	equ	0xFDF
 33132                           postinc2	equ	0xFDE
 33133                           postdec2	equ	0xFDD
 33134                           plusw2	equ	0xFDB
 33135                           fsr2h	equ	0xFDA
 33136                           fsr2l	equ	0xFD9
 33137                           status	equ	0xFD8
 33138                           
 33139 ;; *************** function _FillSubKey *****************
 33140 ;; Defined at:
 33141 ;;		line 167 in file "mcc_generated_files/LoRaWAN/lorawan_aes_cmac.c"
 33142 ;; Parameters:    Size  Location     Type
 33143 ;;  source          2    0[BANK0 ] PTR unsigned char 
 33144 ;;		 -> GenerateSubkey@l(16), AESCmac@k1(16), 
 33145 ;;  key             2    2[BANK0 ] PTR unsigned char 
 33146 ;;		 -> AESCmac@k2(16), AESCmac@k1(16), 
 33147 ;;  size            1    4[BANK0 ] unsigned char 
 33148 ;; Auto vars:     Size  Location     Type
 33149 ;;  i               1    7[BANK0 ] unsigned char 
 33150 ;;  carry           1    6[BANK0 ] unsigned char 
 33151 ;; Return value:  Size  Location     Type
 33152 ;;                  1    wreg      void 
 33153 ;; Registers used:
 33154 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 33155 ;; Tracked objects:
 33156 ;;		On entry : 0/0
 33157 ;;		On exit  : 0/0
 33158 ;;		Unchanged: 0/0
 33159 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 33160 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33161 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33162 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33163 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33164 ;;Total ram usage:        8 bytes
 33165 ;; Hardware stack levels used:    1
 33166 ;; Hardware stack levels required when called:    7
 33167 ;; This function calls:
 33168 ;;		Nothing
 33169 ;; This function is called by:
 33170 ;;		_GenerateSubkey
 33171 ;; This function uses a non-reentrant model
 33172 ;;
 33173                           
 33174                           	psect	text154
 33175  008196                     __ptext154:
 33176                           	opt stack 0
 33177  008196                     _FillSubKey:
 33178                           	opt stack 19
 33179                           
 33180                           ;lorawan_aes_cmac.c: 169: uint8_t i = 0;
 33181                           
 33182                           ;incstack = 0
 33183  008196  0E00               	movlw	0
 33184  008198  0100               	movlb	0	; () banked
 33185  00819A  6F67               	movwf	FillSubKey@i& (0+255),b
 33186                           
 33187                           ;lorawan_aes_cmac.c: 170: uint8_t carry = 0;
 33188  00819C  0E00               	movlw	0
 33189  00819E  6F66               	movwf	FillSubKey@carry& (0+255),b
 33190                           
 33191                           ; BSR set to: 0
 33192                           ;lorawan_aes_cmac.c: 172: i=size;
 33193  0081A0  C064  F067         	movff	FillSubKey@size,FillSubKey@i
 33194                           
 33195                           ;lorawan_aes_cmac.c: 174: while(i--)
 33196  0081A4  D024               	goto	l51
 33197  0081A6                     
 33198                           ; BSR set to: 0
 33199                           ;lorawan_aes_cmac.c: 175: {
 33200                           ;lorawan_aes_cmac.c: 176: key[i] = (source[i] << (1)) | carry;
 33201                           
 33202                           ; BSR set to: 0
 33203  0081A6  5167               	movf	FillSubKey@i& (0+255),w,b
 33204  0081A8  0D01               	mullw	1
 33205  0081AA  50F3               	movf	prodl,w,c
 33206  0081AC  2562               	addwf	FillSubKey@key& (0+255),w,b
 33207  0081AE  6ED9               	movwf	fsr2l,c
 33208  0081B0  50F4               	movf	prodh,w,c
 33209  0081B2  2163               	addwfc	(FillSubKey@key+1)& (0+255),w,b
 33210  0081B4  6EDA               	movwf	fsr2h,c
 33211  0081B6  5167               	movf	FillSubKey@i& (0+255),w,b
 33212  0081B8  0D01               	mullw	1
 33213  0081BA  50F3               	movf	prodl,w,c
 33214  0081BC  2560               	addwf	FillSubKey@source& (0+255),w,b
 33215  0081BE  6EE9               	movwf	fsr0l,c
 33216  0081C0  50F4               	movf	prodh,w,c
 33217  0081C2  2161               	addwfc	(FillSubKey@source+1)& (0+255),w,b
 33218  0081C4  6EEA               	movwf	fsr0h,c
 33219  0081C6  50EF               	movf	indf0,w,c
 33220  0081C8  6F65               	movwf	??_FillSubKey& (0+255),b
 33221  0081CA  90D8               	bcf	status,0,c
 33222  0081CC  3565               	rlcf	??_FillSubKey& (0+255),w,b
 33223  0081CE  1166               	iorwf	FillSubKey@carry& (0+255),w,b
 33224  0081D0  6EDF               	movwf	indf2,c
 33225                           
 33226                           ; BSR set to: 0
 33227                           ;lorawan_aes_cmac.c: 177: carry = !!(source[i] & 0x80);
 33228  0081D2  5167               	movf	FillSubKey@i& (0+255),w,b
 33229  0081D4  0D01               	mullw	1
 33230  0081D6  50F3               	movf	prodl,w,c
 33231  0081D8  2560               	addwf	FillSubKey@source& (0+255),w,b
 33232  0081DA  6ED9               	movwf	fsr2l,c
 33233  0081DC  50F4               	movf	prodh,w,c
 33234  0081DE  2161               	addwfc	(FillSubKey@source+1)& (0+255),w,b
 33235  0081E0  6EDA               	movwf	fsr2h,c
 33236  0081E2  AEDF               	btfss	indf2,7,c
 33237  0081E4  D002               	goto	u7950
 33238  0081E6  0E01               	movlw	1
 33239  0081E8  D001               	goto	u7960
 33240  0081EA                     u7950:
 33241  0081EA  0E00               	movlw	0
 33242  0081EC                     u7960:
 33243  0081EC  6F66               	movwf	FillSubKey@carry& (0+255),b
 33244  0081EE                     l51:
 33245                           
 33246                           ; BSR set to: 0
 33247                           
 33248                           ; BSR set to: 0
 33249  0081EE  0767               	decf	FillSubKey@i& (0+255),f,b
 33250  0081F0  2967               	incf	FillSubKey@i& (0+255),w,b
 33251  0081F2  B4D8               	btfsc	status,2,c
 33252  0081F4  0012               	return	
 33253  0081F6  D7D7               	goto	l52
 33254  0081F8                     __end_of_FillSubKey:
 33255                           	opt stack 0
 33256                           tosu	equ	0xFFF
 33257                           tosh	equ	0xFFE
 33258                           tosl	equ	0xFFD
 33259                           pclath	equ	0xFFA
 33260                           tblptru	equ	0xFF8
 33261                           tblptrh	equ	0xFF7
 33262                           tblptrl	equ	0xFF6
 33263                           tablat	equ	0xFF5
 33264                           prodh	equ	0xFF4
 33265                           prodl	equ	0xFF3
 33266                           intcon	equ	0xFF2
 33267                           intcon2	equ	0xFF1
 33268                           intcon3	equ	0xFF0
 33269                           indf0	equ	0xFEF
 33270                           postinc0	equ	0xFEE
 33271                           plusw0	equ	0xFEB
 33272                           fsr0h	equ	0xFEA
 33273                           fsr0l	equ	0xFE9
 33274                           wreg	equ	0xFE8
 33275                           postinc1	equ	0xFE6
 33276                           postdec1	equ	0xFE5
 33277                           plusw1	equ	0xFE3
 33278                           fsr1h	equ	0xFE2
 33279                           fsr1l	equ	0xFE1
 33280                           indf2	equ	0xFDF
 33281                           postinc2	equ	0xFDE
 33282                           postdec2	equ	0xFDD
 33283                           plusw2	equ	0xFDB
 33284                           fsr2h	equ	0xFDA
 33285                           fsr2l	equ	0xFD9
 33286                           status	equ	0xFD8
 33287                           
 33288 ;; *************** function _AESEncodeLoRa *****************
 33289 ;; Defined at:
 33290 ;;		line 34 in file "mcc_generated_files/LoRaWAN/lorawan_aes.c"
 33291 ;; Parameters:    Size  Location     Type
 33292 ;;  block           2   29[BANK0 ] PTR unsigned char 
 33293 ;;		 -> aesBuffer(16), radioBuffer(271), LORAWAN_RxDone@hdr(2), loRa.activationParameters(105), 
 33294 ;;		 -> loRa(245), GenerateSubkey@l(16), AESCmac@y(16), AESCmac@x(16), 
 33295 ;;  key             2   31[BANK0 ] PTR unsigned char 
 33296 ;;		 -> loRa.activationParameters(105), loRa(245), 
 33297 ;; Auto vars:     Size  Location     Type
 33298 ;;  useKey         16   33[BANK0 ] unsigned char [16]
 33299 ;; Return value:  Size  Location     Type
 33300 ;;                  1    wreg      void 
 33301 ;; Registers used:
 33302 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 33303 ;; Tracked objects:
 33304 ;;		On entry : 0/0
 33305 ;;		On exit  : 0/0
 33306 ;;		Unchanged: 0/0
 33307 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 33308 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33309 ;;      Locals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33310 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33311 ;;      Totals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33312 ;;Total ram usage:       20 bytes
 33313 ;; Hardware stack levels used:    1
 33314 ;; Hardware stack levels required when called:    9
 33315 ;; This function calls:
 33316 ;;		_AESEncode
 33317 ;;		_memcpy
 33318 ;; This function is called by:
 33319 ;;		_AESCmac
 33320 ;;		_GenerateSubkey
 33321 ;;		_LORAWAN_RxDone
 33322 ;;		_ComputeSessionKeys
 33323 ;;		_EncryptFRMPayload
 33324 ;; This function uses a non-reentrant model
 33325 ;;
 33326                           
 33327                           	psect	text155
 33328  008C50                     __ptext155:
 33329                           	opt stack 0
 33330  008C50                     _AESEncodeLoRa:
 33331                           	opt stack 18
 33332                           
 33333                           ;lorawan_aes.c: 36: uint8_t useKey[16];
 33334                           ;lorawan_aes.c: 37: memcpy(useKey, key, sizeof(useKey));
 33335                           
 33336                           ; BSR set to: 0
 33337                           ;incstack = 0
 33338  008C50  0E81               	movlw	low AESEncodeLoRa@useKey
 33339  008C52  0100               	movlb	0	; () banked
 33340  008C54  6F60               	movwf	memcpy@d1& (0+255),b
 33341  008C56  0E00               	movlw	high AESEncodeLoRa@useKey
 33342  008C58  6F61               	movwf	(memcpy@d1+1)& (0+255),b
 33343  008C5A  C07F  F062         	movff	AESEncodeLoRa@key,memcpy@s1
 33344  008C5E  C080  F063         	movff	AESEncodeLoRa@key+1,memcpy@s1+1
 33345  008C62  0E00               	movlw	0
 33346  008C64  6F65               	movwf	(memcpy@n+1)& (0+255),b
 33347  008C66  0E10               	movlw	16
 33348  008C68  6F64               	movwf	memcpy@n& (0+255),b
 33349  008C6A  EC5D  F041         	call	_memcpy	;wreg free
 33350                           
 33351                           ;lorawan_aes.c: 38: AESEncode(block, useKey);
 33352  008C6E  C07D  F066         	movff	AESEncodeLoRa@block,AESEncode@block
 33353  008C72  C07E  F067         	movff	AESEncodeLoRa@block+1,AESEncode@block+1
 33354  008C76  0E81               	movlw	low AESEncodeLoRa@useKey
 33355  008C78  0100               	movlb	0	; () banked
 33356  008C7A  6F68               	movwf	AESEncode@key& (0+255),b
 33357  008C7C  0E00               	movlw	high AESEncodeLoRa@useKey
 33358  008C7E  6F69               	movwf	(AESEncode@key+1)& (0+255),b
 33359  008C80  EC4D  F016         	call	_AESEncode	;wreg free
 33360  008C84  0012               	return		;funcret
 33361  008C86                     __end_of_AESEncodeLoRa:
 33362                           	opt stack 0
 33363                           tosu	equ	0xFFF
 33364                           tosh	equ	0xFFE
 33365                           tosl	equ	0xFFD
 33366                           pclath	equ	0xFFA
 33367                           tblptru	equ	0xFF8
 33368                           tblptrh	equ	0xFF7
 33369                           tblptrl	equ	0xFF6
 33370                           tablat	equ	0xFF5
 33371                           prodh	equ	0xFF4
 33372                           prodl	equ	0xFF3
 33373                           intcon	equ	0xFF2
 33374                           intcon2	equ	0xFF1
 33375                           intcon3	equ	0xFF0
 33376                           indf0	equ	0xFEF
 33377                           postinc0	equ	0xFEE
 33378                           plusw0	equ	0xFEB
 33379                           fsr0h	equ	0xFEA
 33380                           fsr0l	equ	0xFE9
 33381                           wreg	equ	0xFE8
 33382                           postinc1	equ	0xFE6
 33383                           postdec1	equ	0xFE5
 33384                           plusw1	equ	0xFE3
 33385                           fsr1h	equ	0xFE2
 33386                           fsr1l	equ	0xFE1
 33387                           indf2	equ	0xFDF
 33388                           postinc2	equ	0xFDE
 33389                           postdec2	equ	0xFDD
 33390                           plusw2	equ	0xFDB
 33391                           fsr2h	equ	0xFDA
 33392                           fsr2l	equ	0xFD9
 33393                           status	equ	0xFD8
 33394                           
 33395 ;; *************** function _AESEncode *****************
 33396 ;; Defined at:
 33397 ;;		line 248 in file "mcc_generated_files/LoRaWAN/AES.c"
 33398 ;; Parameters:    Size  Location     Type
 33399 ;;  block           2    6[BANK0 ] PTR unsigned char 
 33400 ;;		 -> aesBuffer(16), radioBuffer(271), LORAWAN_RxDone@hdr(2), loRa.activationParameters(105), 
 33401 ;;		 -> loRa(245), GenerateSubkey@l(16), AESCmac@y(16), AESCmac@x(16), 
 33402 ;;  key             2    8[BANK0 ] PTR unsigned char 
 33403 ;;		 -> AESEncodeLoRa@useKey(16), 
 33404 ;; Auto vars:     Size  Location     Type
 33405 ;;  aux3            1   27[BANK0 ] unsigned char 
 33406 ;;  aux1            1   26[BANK0 ] unsigned char 
 33407 ;;  aux2            1   25[BANK0 ] unsigned char 
 33408 ;;  aux             1   24[BANK0 ] unsigned char 
 33409 ;;  i               1   28[BANK0 ] unsigned char 
 33410 ;;  temp            1    0        unsigned char 
 33411 ;; Return value:  Size  Location     Type
 33412 ;;                  1    wreg      void 
 33413 ;; Registers used:
 33414 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 33415 ;; Tracked objects:
 33416 ;;		On entry : 0/0
 33417 ;;		On exit  : 0/0
 33418 ;;		Unchanged: 0/0
 33419 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 33420 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33421 ;;      Locals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33422 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33423 ;;      Totals:         0      23       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33424 ;;Total ram usage:       23 bytes
 33425 ;; Hardware stack levels used:    1
 33426 ;; Hardware stack levels required when called:    8
 33427 ;; This function calls:
 33428 ;;		_EncKeySchedule
 33429 ;;		_EncodeShiftRow
 33430 ;; This function is called by:
 33431 ;;		_AESEncodeLoRa
 33432 ;; This function uses a non-reentrant model
 33433 ;;
 33434                           
 33435                           	psect	text156
 33436  002C9A                     __ptext156:
 33437                           	opt stack 0
 33438  002C9A                     _AESEncode:
 33439                           	opt stack 18
 33440                           
 33441                           ;AES.c: 250: unsigned char i;
 33442                           ;AES.c: 251: unsigned char temp;
 33443                           ;AES.c: 254: _roundCounter = 10;
 33444                           
 33445                           ;incstack = 0
 33446  002C9A  0E0A               	movlw	10
 33447  002C9C  0101               	movlb	1	; () banked
 33448  002C9E  6F53               	movwf	__roundCounter& (0+255),b
 33449                           
 33450                           ;AES.c: 256: _rcon = 0x01;
 33451  002CA0  0E01               	movlw	1
 33452  002CA2  6E52               	movwf	__rcon,c
 33453                           
 33454                           ;AES.c: 259: for(i=0;i<16;i++)
 33455  002CA4  0E00               	movlw	0
 33456  002CA6  0100               	movlb	0	; () banked
 33457  002CA8  6F7C               	movwf	AESEncode@i& (0+255),b
 33458  002CAA                     l8807:
 33459                           
 33460                           ; BSR set to: 0
 33461  002CAA  0E0F               	movlw	15
 33462  002CAC  657C               	cpfsgt	AESEncode@i& (0+255),b
 33463  002CAE  D001               	goto	l1612
 33464  002CB0  D016               	goto	u7720
 33465  002CB2                     l1612:
 33466                           
 33467                           ; BSR set to: 0
 33468                           ;AES.c: 260: {
 33469                           ;AES.c: 261: block[i] ^= key[i];
 33470                           
 33471                           ; BSR set to: 0
 33472  002CB2  517C               	movf	AESEncode@i& (0+255),w,b
 33473  002CB4  0D01               	mullw	1
 33474  002CB6  50F3               	movf	prodl,w,c
 33475  002CB8  2568               	addwf	AESEncode@key& (0+255),w,b
 33476  002CBA  6ED9               	movwf	fsr2l,c
 33477  002CBC  50F4               	movf	prodh,w,c
 33478  002CBE  2169               	addwfc	(AESEncode@key+1)& (0+255),w,b
 33479  002CC0  6EDA               	movwf	fsr2h,c
 33480  002CC2  50DF               	movf	indf2,w,c
 33481  002CC4  6F6A               	movwf	??_AESEncode& (0+255),b
 33482  002CC6  517C               	movf	AESEncode@i& (0+255),w,b
 33483  002CC8  0D01               	mullw	1
 33484  002CCA  50F3               	movf	prodl,w,c
 33485  002CCC  2566               	addwf	AESEncode@block& (0+255),w,b
 33486  002CCE  6ED9               	movwf	fsr2l,c
 33487  002CD0  50F4               	movf	prodh,w,c
 33488  002CD2  2167               	addwfc	(AESEncode@block+1)& (0+255),w,b
 33489  002CD4  6EDA               	movwf	fsr2h,c
 33490  002CD6  516A               	movf	??_AESEncode& (0+255),w,b
 33491  002CD8  1ADF               	xorwf	indf2,f,c
 33492                           
 33493                           ; BSR set to: 0
 33494  002CDA  2B7C               	incf	AESEncode@i& (0+255),f,b
 33495  002CDC  D7E6               	goto	l8807
 33496  002CDE                     u7720:
 33497                           
 33498                           ;AES.c: 265: {
 33499                           ;AES.c: 268: for(i=0;i<16;i++)
 33500                           
 33501                           ; BSR set to: 0
 33502                           
 33503                           ;AES.c: 262: }
 33504                           ;AES.c: 264: do
 33505                           
 33506                           ; BSR set to: 0
 33507  002CDE  0E00               	movlw	0
 33508  002CE0  0100               	movlb	0	; () banked
 33509  002CE2  6F7C               	movwf	AESEncode@i& (0+255),b
 33510  002CE4                     l8819:
 33511                           
 33512                           ; BSR set to: 0
 33513  002CE4  0E0F               	movlw	15
 33514  002CE6  657C               	cpfsgt	AESEncode@i& (0+255),b
 33515  002CE8  D001               	goto	l1615
 33516  002CEA  D022               	goto	u7740
 33517  002CEC                     l1615:
 33518                           
 33519                           ; BSR set to: 0
 33520                           ;AES.c: 269: {
 33521                           ;AES.c: 270: block[i]=STable[block[i]];
 33522                           
 33523                           ; BSR set to: 0
 33524  002CEC  517C               	movf	AESEncode@i& (0+255),w,b
 33525  002CEE  0D01               	mullw	1
 33526  002CF0  50F3               	movf	prodl,w,c
 33527  002CF2  2566               	addwf	AESEncode@block& (0+255),w,b
 33528  002CF4  6ED9               	movwf	fsr2l,c
 33529  002CF6  50F4               	movf	prodh,w,c
 33530  002CF8  2167               	addwfc	(AESEncode@block+1)& (0+255),w,b
 33531  002CFA  6EDA               	movwf	fsr2h,c
 33532  002CFC  50DF               	movf	indf2,w,c
 33533  002CFE  6F6A               	movwf	??_AESEncode& (0+255),b
 33534  002D00  516A               	movf	??_AESEncode& (0+255),w,b
 33535  002D02  0D01               	mullw	1
 33536  002D04  0E67               	movlw	low _STable
 33537  002D06  24F3               	addwf	prodl,w,c
 33538  002D08  6EF6               	movwf	tblptrl,c
 33539  002D0A  0EFE               	movlw	high _STable
 33540  002D0C  20F4               	addwfc	prodh,w,c
 33541  002D0E  6EF7               	movwf	tblptrh,c
 33542  002D10                     	if	1	;There are 3 active tblptr bytes
 33543  002D10  6AF8               	clrf	tblptru,c
 33544  002D12  0E00               	movlw	low (__mediumconst shr (0+16))
 33545  002D14  22F8               	addwfc	tblptru,f,c
 33546  002D16                     	endif
 33547  002D16  517C               	movf	AESEncode@i& (0+255),w,b
 33548  002D18  0D01               	mullw	1
 33549  002D1A  50F3               	movf	prodl,w,c
 33550  002D1C  2566               	addwf	AESEncode@block& (0+255),w,b
 33551  002D1E  6ED9               	movwf	fsr2l,c
 33552  002D20  50F4               	movf	prodh,w,c
 33553  002D22  2167               	addwfc	(AESEncode@block+1)& (0+255),w,b
 33554  002D24  6EDA               	movwf	fsr2h,c
 33555  002D26  0008               	tblrd		*
 33556  002D28  CFF5 FFDF          	movff	tablat,indf2
 33557                           
 33558                           ; BSR set to: 0
 33559  002D2C  2B7C               	incf	AESEncode@i& (0+255),f,b
 33560  002D2E  D7DA               	goto	l8819
 33561  002D30                     u7740:
 33562                           
 33563                           ; BSR set to: 0
 33564                           ;AES.c: 271: }
 33565                           ;AES.c: 274: EncodeShiftRow(block);
 33566                           
 33567                           ; BSR set to: 0
 33568  002D30  C066  F060         	movff	AESEncode@block,EncodeShiftRow@stateTable
 33569  002D34  C067  F061         	movff	AESEncode@block+1,EncodeShiftRow@stateTable+1
 33570  002D38  EC56  F02B         	call	_EncodeShiftRow	;wreg free
 33571                           
 33572                           ;AES.c: 277: if(_roundCounter != 1)
 33573  002D3C  0101               	movlb	1	; () banked
 33574  002D3E  0553               	decf	__roundCounter& (0+255),w,b
 33575  002D40  B4D8               	btfsc	status,2,c
 33576  002D42  D127               	goto	u7800
 33577                           
 33578                           ; BSR set to: 1
 33579                           ;AES.c: 278: {
 33580                           ;AES.c: 279: unsigned char aux,aux1,aux2,aux3;
 33581                           ;AES.c: 281: for(i=0;i<16;i+=4)
 33582  002D44  0E00               	movlw	0
 33583  002D46  0100               	movlb	0	; () banked
 33584  002D48  6F7C               	movwf	AESEncode@i& (0+255),b
 33585  002D4A                     l8835:
 33586                           
 33587                           ; BSR set to: 0
 33588  002D4A  0E0F               	movlw	15
 33589  002D4C  657C               	cpfsgt	AESEncode@i& (0+255),b
 33590  002D4E  D001               	goto	l1618
 33591  002D50  D120               	goto	u7800
 33592  002D52                     l1618:
 33593                           
 33594                           ; BSR set to: 0
 33595                           ;AES.c: 282: {
 33596                           ;AES.c: 283: aux1= block[i+0] ^ block[i+1];
 33597                           
 33598                           ; BSR set to: 0
 33599  002D52  517C               	movf	AESEncode@i& (0+255),w,b
 33600  002D54  6F6A               	movwf	??_AESEncode& (0+255),b
 33601  002D56  6B6B               	clrf	(??_AESEncode+1)& (0+255),b
 33602  002D58  0E01               	movlw	1
 33603  002D5A  276A               	addwf	??_AESEncode& (0+255),f,b
 33604  002D5C  0E00               	movlw	0
 33605  002D5E  236B               	addwfc	(??_AESEncode+1)& (0+255),f,b
 33606  002D60  516A               	movf	??_AESEncode& (0+255),w,b
 33607  002D62  2566               	addwf	AESEncode@block& (0+255),w,b
 33608  002D64  6ED9               	movwf	fsr2l,c
 33609  002D66  516B               	movf	(??_AESEncode+1)& (0+255),w,b
 33610  002D68  2167               	addwfc	(AESEncode@block+1)& (0+255),w,b
 33611  002D6A  6EDA               	movwf	fsr2h,c
 33612  002D6C  50DF               	movf	indf2,w,c
 33613  002D6E  6F6C               	movwf	(??_AESEncode+2)& (0+255),b
 33614  002D70  517C               	movf	AESEncode@i& (0+255),w,b
 33615  002D72  2566               	addwf	AESEncode@block& (0+255),w,b
 33616  002D74  6ED9               	movwf	fsr2l,c
 33617  002D76  0E00               	movlw	0
 33618  002D78  2167               	addwfc	(AESEncode@block+1)& (0+255),w,b
 33619  002D7A  6EDA               	movwf	fsr2h,c
 33620  002D7C  50DF               	movf	indf2,w,c
 33621  002D7E  196C               	xorwf	(??_AESEncode+2)& (0+255),w,b
 33622  002D80  6F7A               	movwf	AESEncode@aux1& (0+255),b
 33623                           
 33624                           ;AES.c: 284: aux3= block[i+2]^block[i+3];
 33625  002D82  517C               	movf	AESEncode@i& (0+255),w,b
 33626  002D84  6F6A               	movwf	??_AESEncode& (0+255),b
 33627  002D86  6B6B               	clrf	(??_AESEncode+1)& (0+255),b
 33628  002D88  0E03               	movlw	3
 33629  002D8A  276A               	addwf	??_AESEncode& (0+255),f,b
 33630  002D8C  0E00               	movlw	0
 33631  002D8E  236B               	addwfc	(??_AESEncode+1)& (0+255),f,b
 33632  002D90  516A               	movf	??_AESEncode& (0+255),w,b
 33633  002D92  2566               	addwf	AESEncode@block& (0+255),w,b
 33634  002D94  6ED9               	movwf	fsr2l,c
 33635  002D96  516B               	movf	(??_AESEncode+1)& (0+255),w,b
 33636  002D98  2167               	addwfc	(AESEncode@block+1)& (0+255),w,b
 33637  002D9A  6EDA               	movwf	fsr2h,c
 33638  002D9C  50DF               	movf	indf2,w,c
 33639  002D9E  6F6C               	movwf	(??_AESEncode+2)& (0+255),b
 33640  002DA0  517C               	movf	AESEncode@i& (0+255),w,b
 33641  002DA2  6F6D               	movwf	(??_AESEncode+3)& (0+255),b
 33642  002DA4  6B6E               	clrf	(??_AESEncode+4)& (0+255),b
 33643  002DA6  0E02               	movlw	2
 33644  002DA8  276D               	addwf	(??_AESEncode+3)& (0+255),f,b
 33645  002DAA  0E00               	movlw	0
 33646  002DAC  236E               	addwfc	(??_AESEncode+4)& (0+255),f,b
 33647  002DAE  516D               	movf	(??_AESEncode+3)& (0+255),w,b
 33648  002DB0  2566               	addwf	AESEncode@block& (0+255),w,b
 33649  002DB2  6ED9               	movwf	fsr2l,c
 33650  002DB4  516E               	movf	(??_AESEncode+4)& (0+255),w,b
 33651  002DB6  2167               	addwfc	(AESEncode@block+1)& (0+255),w,b
 33652  002DB8  6EDA               	movwf	fsr2h,c
 33653  002DBA  50DF               	movf	indf2,w,c
 33654  002DBC  196C               	xorwf	(??_AESEncode+2)& (0+255),w,b
 33655  002DBE  6F7B               	movwf	AESEncode@aux3& (0+255),b
 33656                           
 33657                           ; BSR set to: 0
 33658                           ;AES.c: 285: aux = aux1 ^ aux3;
 33659  002DC0  517A               	movf	AESEncode@aux1& (0+255),w,b
 33660  002DC2  197B               	xorwf	AESEncode@aux3& (0+255),w,b
 33661  002DC4  6F78               	movwf	AESEncode@aux& (0+255),b
 33662                           
 33663                           ; BSR set to: 0
 33664                           ;AES.c: 286: aux2= block[i+2]^block[i+1];
 33665  002DC6  517C               	movf	AESEncode@i& (0+255),w,b
 33666  002DC8  6F6A               	movwf	??_AESEncode& (0+255),b
 33667  002DCA  6B6B               	clrf	(??_AESEncode+1)& (0+255),b
 33668  002DCC  0E01               	movlw	1
 33669  002DCE  276A               	addwf	??_AESEncode& (0+255),f,b
 33670  002DD0  0E00               	movlw	0
 33671  002DD2  236B               	addwfc	(??_AESEncode+1)& (0+255),f,b
 33672  002DD4  516A               	movf	??_AESEncode& (0+255),w,b
 33673  002DD6  2566               	addwf	AESEncode@block& (0+255),w,b
 33674  002DD8  6ED9               	movwf	fsr2l,c
 33675  002DDA  516B               	movf	(??_AESEncode+1)& (0+255),w,b
 33676  002DDC  2167               	addwfc	(AESEncode@block+1)& (0+255),w,b
 33677  002DDE  6EDA               	movwf	fsr2h,c
 33678  002DE0  50DF               	movf	indf2,w,c
 33679  002DE2  6F6C               	movwf	(??_AESEncode+2)& (0+255),b
 33680  002DE4  517C               	movf	AESEncode@i& (0+255),w,b
 33681  002DE6  6F6D               	movwf	(??_AESEncode+3)& (0+255),b
 33682  002DE8  6B6E               	clrf	(??_AESEncode+4)& (0+255),b
 33683  002DEA  0E02               	movlw	2
 33684  002DEC  276D               	addwf	(??_AESEncode+3)& (0+255),f,b
 33685  002DEE  0E00               	movlw	0
 33686  002DF0  236E               	addwfc	(??_AESEncode+4)& (0+255),f,b
 33687  002DF2  516D               	movf	(??_AESEncode+3)& (0+255),w,b
 33688  002DF4  2566               	addwf	AESEncode@block& (0+255),w,b
 33689  002DF6  6ED9               	movwf	fsr2l,c
 33690  002DF8  516E               	movf	(??_AESEncode+4)& (0+255),w,b
 33691  002DFA  2167               	addwfc	(AESEncode@block+1)& (0+255),w,b
 33692  002DFC  6EDA               	movwf	fsr2h,c
 33693  002DFE  50DF               	movf	indf2,w,c
 33694  002E00  196C               	xorwf	(??_AESEncode+2)& (0+255),w,b
 33695  002E02  6F79               	movwf	AESEncode@aux2& (0+255),b
 33696                           
 33697                           ;AES.c: 288: aux1 = (((aux1)<0x80)?(aux1)<<1:(((aux1)<<1)^0x1b) );
 33698  002E04  0E7F               	movlw	127
 33699  002E06  657A               	cpfsgt	AESEncode@aux1& (0+255),b
 33700  002E08  D00C               	goto	l1621
 33701                           
 33702                           ; BSR set to: 0
 33703  002E0A  0E1B               	movlw	27
 33704  002E0C  C07A  F06A         	movff	AESEncode@aux1,??_AESEncode
 33705  002E10  6B6B               	clrf	(??_AESEncode+1)& (0+255),b
 33706  002E12  90D8               	bcf	status,0,c
 33707  002E14  376A               	rlcf	??_AESEncode& (0+255),f,b
 33708  002E16  376B               	rlcf	(??_AESEncode+1)& (0+255),f,b
 33709  002E18  196A               	xorwf	??_AESEncode& (0+255),w,b
 33710  002E1A  6F72               	movwf	_AESEncode$2127& (0+255),b
 33711  002E1C  516B               	movf	(??_AESEncode+1)& (0+255),w,b
 33712  002E1E  6F73               	movwf	(_AESEncode$2127+1)& (0+255),b
 33713  002E20  D005               	goto	l1623
 33714  002E22                     l1621:
 33715                           
 33716                           ; BSR set to: 0
 33717                           
 33718                           ; BSR set to: 0
 33719  002E22  90D8               	bcf	status,0,c
 33720  002E24  357A               	rlcf	AESEncode@aux1& (0+255),w,b
 33721  002E26  6F72               	movwf	_AESEncode$2127& (0+255),b
 33722  002E28  6B73               	clrf	(_AESEncode$2127+1)& (0+255),b
 33723  002E2A  3773               	rlcf	(_AESEncode$2127+1)& (0+255),f,b
 33724  002E2C                     l1623:
 33725                           
 33726                           ; BSR set to: 0
 33727                           
 33728                           ; BSR set to: 0
 33729  002E2C  C072  F07A         	movff	_AESEncode$2127,AESEncode@aux1
 33730                           
 33731                           ;AES.c: 289: aux2 = (((aux2)<0x80)?(aux2)<<1:(((aux2)<<1)^0x1b) );
 33732  002E30  0E7F               	movlw	127
 33733  002E32  6579               	cpfsgt	AESEncode@aux2& (0+255),b
 33734  002E34  D00C               	goto	l1625
 33735                           
 33736                           ; BSR set to: 0
 33737  002E36  0E1B               	movlw	27
 33738  002E38  C079  F06A         	movff	AESEncode@aux2,??_AESEncode
 33739  002E3C  6B6B               	clrf	(??_AESEncode+1)& (0+255),b
 33740  002E3E  90D8               	bcf	status,0,c
 33741  002E40  376A               	rlcf	??_AESEncode& (0+255),f,b
 33742  002E42  376B               	rlcf	(??_AESEncode+1)& (0+255),f,b
 33743  002E44  196A               	xorwf	??_AESEncode& (0+255),w,b
 33744  002E46  6F74               	movwf	_AESEncode$2128& (0+255),b
 33745  002E48  516B               	movf	(??_AESEncode+1)& (0+255),w,b
 33746  002E4A  6F75               	movwf	(_AESEncode$2128+1)& (0+255),b
 33747  002E4C  D005               	goto	l1627
 33748  002E4E                     l1625:
 33749                           
 33750                           ; BSR set to: 0
 33751                           
 33752                           ; BSR set to: 0
 33753  002E4E  90D8               	bcf	status,0,c
 33754  002E50  3579               	rlcf	AESEncode@aux2& (0+255),w,b
 33755  002E52  6F74               	movwf	_AESEncode$2128& (0+255),b
 33756  002E54  6B75               	clrf	(_AESEncode$2128+1)& (0+255),b
 33757  002E56  3775               	rlcf	(_AESEncode$2128+1)& (0+255),f,b
 33758  002E58                     l1627:
 33759                           
 33760                           ; BSR set to: 0
 33761                           
 33762                           ; BSR set to: 0
 33763  002E58  C074  F079         	movff	_AESEncode$2128,AESEncode@aux2
 33764                           
 33765                           ;AES.c: 290: aux3 = (((aux3)<0x80)?(aux3)<<1:(((aux3)<<1)^0x1b) );
 33766  002E5C  0E7F               	movlw	127
 33767  002E5E  657B               	cpfsgt	AESEncode@aux3& (0+255),b
 33768  002E60  D00C               	goto	l1629
 33769                           
 33770                           ; BSR set to: 0
 33771  002E62  0E1B               	movlw	27
 33772  002E64  C07B  F06A         	movff	AESEncode@aux3,??_AESEncode
 33773  002E68  6B6B               	clrf	(??_AESEncode+1)& (0+255),b
 33774  002E6A  90D8               	bcf	status,0,c
 33775  002E6C  376A               	rlcf	??_AESEncode& (0+255),f,b
 33776  002E6E  376B               	rlcf	(??_AESEncode+1)& (0+255),f,b
 33777  002E70  196A               	xorwf	??_AESEncode& (0+255),w,b
 33778  002E72  6F76               	movwf	_AESEncode$2129& (0+255),b
 33779  002E74  516B               	movf	(??_AESEncode+1)& (0+255),w,b
 33780  002E76  6F77               	movwf	(_AESEncode$2129+1)& (0+255),b
 33781  002E78  D005               	goto	l1631
 33782  002E7A                     l1629:
 33783                           
 33784                           ; BSR set to: 0
 33785                           
 33786                           ; BSR set to: 0
 33787  002E7A  90D8               	bcf	status,0,c
 33788  002E7C  357B               	rlcf	AESEncode@aux3& (0+255),w,b
 33789  002E7E  6F76               	movwf	_AESEncode$2129& (0+255),b
 33790  002E80  6B77               	clrf	(_AESEncode$2129+1)& (0+255),b
 33791  002E82  3777               	rlcf	(_AESEncode$2129+1)& (0+255),f,b
 33792  002E84                     l1631:
 33793                           
 33794                           ; BSR set to: 0
 33795                           
 33796                           ; BSR set to: 0
 33797  002E84  C076  F07B         	movff	_AESEncode$2129,AESEncode@aux3
 33798                           
 33799                           ; BSR set to: 0
 33800                           ;AES.c: 292: block[i+0]= aux^aux1^block[i+0];
 33801  002E88  517C               	movf	AESEncode@i& (0+255),w,b
 33802  002E8A  2566               	addwf	AESEncode@block& (0+255),w,b
 33803  002E8C  6ED9               	movwf	fsr2l,c
 33804  002E8E  0E00               	movlw	0
 33805  002E90  2167               	addwfc	(AESEncode@block+1)& (0+255),w,b
 33806  002E92  6EDA               	movwf	fsr2h,c
 33807  002E94  517C               	movf	AESEncode@i& (0+255),w,b
 33808  002E96  2566               	addwf	AESEncode@block& (0+255),w,b
 33809  002E98  6EE9               	movwf	fsr0l,c
 33810  002E9A  0E00               	movlw	0
 33811  002E9C  2167               	addwfc	(AESEncode@block+1)& (0+255),w,b
 33812  002E9E  6EEA               	movwf	fsr0h,c
 33813  002EA0  50EF               	movf	indf0,w,c
 33814  002EA2  1978               	xorwf	AESEncode@aux& (0+255),w,b
 33815  002EA4  197A               	xorwf	AESEncode@aux1& (0+255),w,b
 33816  002EA6  6EDF               	movwf	indf2,c
 33817                           
 33818                           ; BSR set to: 0
 33819                           ;AES.c: 293: block[i+1]= aux^aux2^block[i+1];
 33820  002EA8  517C               	movf	AESEncode@i& (0+255),w,b
 33821  002EAA  6F6A               	movwf	??_AESEncode& (0+255),b
 33822  002EAC  6B6B               	clrf	(??_AESEncode+1)& (0+255),b
 33823  002EAE  0E01               	movlw	1
 33824  002EB0  276A               	addwf	??_AESEncode& (0+255),f,b
 33825  002EB2  0E00               	movlw	0
 33826  002EB4  236B               	addwfc	(??_AESEncode+1)& (0+255),f,b
 33827  002EB6  516A               	movf	??_AESEncode& (0+255),w,b
 33828  002EB8  2566               	addwf	AESEncode@block& (0+255),w,b
 33829  002EBA  6ED9               	movwf	fsr2l,c
 33830  002EBC  516B               	movf	(??_AESEncode+1)& (0+255),w,b
 33831  002EBE  2167               	addwfc	(AESEncode@block+1)& (0+255),w,b
 33832  002EC0  6EDA               	movwf	fsr2h,c
 33833  002EC2  517C               	movf	AESEncode@i& (0+255),w,b
 33834  002EC4  6F6C               	movwf	(??_AESEncode+2)& (0+255),b
 33835  002EC6  6B6D               	clrf	(??_AESEncode+3)& (0+255),b
 33836  002EC8  0E01               	movlw	1
 33837  002ECA  276C               	addwf	(??_AESEncode+2)& (0+255),f,b
 33838  002ECC  0E00               	movlw	0
 33839  002ECE  236D               	addwfc	(??_AESEncode+3)& (0+255),f,b
 33840  002ED0  516C               	movf	(??_AESEncode+2)& (0+255),w,b
 33841  002ED2  2566               	addwf	AESEncode@block& (0+255),w,b
 33842  002ED4  6EE9               	movwf	fsr0l,c
 33843  002ED6  516D               	movf	(??_AESEncode+3)& (0+255),w,b
 33844  002ED8  2167               	addwfc	(AESEncode@block+1)& (0+255),w,b
 33845  002EDA  6EEA               	movwf	fsr0h,c
 33846  002EDC  50EF               	movf	indf0,w,c
 33847  002EDE  1978               	xorwf	AESEncode@aux& (0+255),w,b
 33848  002EE0  1979               	xorwf	AESEncode@aux2& (0+255),w,b
 33849  002EE2  6EDF               	movwf	indf2,c
 33850                           
 33851                           ; BSR set to: 0
 33852                           ;AES.c: 294: block[i+2]= aux^aux3^block[i+2];
 33853  002EE4  517C               	movf	AESEncode@i& (0+255),w,b
 33854  002EE6  6F6A               	movwf	??_AESEncode& (0+255),b
 33855  002EE8  6B6B               	clrf	(??_AESEncode+1)& (0+255),b
 33856  002EEA  0E02               	movlw	2
 33857  002EEC  276A               	addwf	??_AESEncode& (0+255),f,b
 33858  002EEE  0E00               	movlw	0
 33859  002EF0  236B               	addwfc	(??_AESEncode+1)& (0+255),f,b
 33860  002EF2  516A               	movf	??_AESEncode& (0+255),w,b
 33861  002EF4  2566               	addwf	AESEncode@block& (0+255),w,b
 33862  002EF6  6ED9               	movwf	fsr2l,c
 33863  002EF8  516B               	movf	(??_AESEncode+1)& (0+255),w,b
 33864  002EFA  2167               	addwfc	(AESEncode@block+1)& (0+255),w,b
 33865  002EFC  6EDA               	movwf	fsr2h,c
 33866  002EFE  517C               	movf	AESEncode@i& (0+255),w,b
 33867  002F00  6F6C               	movwf	(??_AESEncode+2)& (0+255),b
 33868  002F02  6B6D               	clrf	(??_AESEncode+3)& (0+255),b
 33869  002F04  0E02               	movlw	2
 33870  002F06  276C               	addwf	(??_AESEncode+2)& (0+255),f,b
 33871  002F08  0E00               	movlw	0
 33872  002F0A  236D               	addwfc	(??_AESEncode+3)& (0+255),f,b
 33873  002F0C  516C               	movf	(??_AESEncode+2)& (0+255),w,b
 33874  002F0E  2566               	addwf	AESEncode@block& (0+255),w,b
 33875  002F10  6EE9               	movwf	fsr0l,c
 33876  002F12  516D               	movf	(??_AESEncode+3)& (0+255),w,b
 33877  002F14  2167               	addwfc	(AESEncode@block+1)& (0+255),w,b
 33878  002F16  6EEA               	movwf	fsr0h,c
 33879  002F18  50EF               	movf	indf0,w,c
 33880  002F1A  1978               	xorwf	AESEncode@aux& (0+255),w,b
 33881  002F1C  197B               	xorwf	AESEncode@aux3& (0+255),w,b
 33882  002F1E  6EDF               	movwf	indf2,c
 33883                           
 33884                           ; BSR set to: 0
 33885                           ;AES.c: 295: block[i+3]= block[i+0]^block[i+1]^block[i+2]^aux;
 33886  002F20  517C               	movf	AESEncode@i& (0+255),w,b
 33887  002F22  6F6A               	movwf	??_AESEncode& (0+255),b
 33888  002F24  6B6B               	clrf	(??_AESEncode+1)& (0+255),b
 33889  002F26  0E03               	movlw	3
 33890  002F28  276A               	addwf	??_AESEncode& (0+255),f,b
 33891  002F2A  0E00               	movlw	0
 33892  002F2C  236B               	addwfc	(??_AESEncode+1)& (0+255),f,b
 33893  002F2E  516A               	movf	??_AESEncode& (0+255),w,b
 33894  002F30  2566               	addwf	AESEncode@block& (0+255),w,b
 33895  002F32  6ED9               	movwf	fsr2l,c
 33896  002F34  516B               	movf	(??_AESEncode+1)& (0+255),w,b
 33897  002F36  2167               	addwfc	(AESEncode@block+1)& (0+255),w,b
 33898  002F38  6EDA               	movwf	fsr2h,c
 33899  002F3A  517C               	movf	AESEncode@i& (0+255),w,b
 33900  002F3C  6F6C               	movwf	(??_AESEncode+2)& (0+255),b
 33901  002F3E  6B6D               	clrf	(??_AESEncode+3)& (0+255),b
 33902  002F40  0E02               	movlw	2
 33903  002F42  276C               	addwf	(??_AESEncode+2)& (0+255),f,b
 33904  002F44  0E00               	movlw	0
 33905  002F46  236D               	addwfc	(??_AESEncode+3)& (0+255),f,b
 33906  002F48  516C               	movf	(??_AESEncode+2)& (0+255),w,b
 33907  002F4A  2566               	addwf	AESEncode@block& (0+255),w,b
 33908  002F4C  6EE9               	movwf	fsr0l,c
 33909  002F4E  516D               	movf	(??_AESEncode+3)& (0+255),w,b
 33910  002F50  2167               	addwfc	(AESEncode@block+1)& (0+255),w,b
 33911  002F52  6EEA               	movwf	fsr0h,c
 33912  002F54  50EF               	movf	indf0,w,c
 33913  002F56  6F6E               	movwf	(??_AESEncode+4)& (0+255),b
 33914  002F58  517C               	movf	AESEncode@i& (0+255),w,b
 33915  002F5A  6F6F               	movwf	(??_AESEncode+5)& (0+255),b
 33916  002F5C  6B70               	clrf	(??_AESEncode+6)& (0+255),b
 33917  002F5E  0E01               	movlw	1
 33918  002F60  276F               	addwf	(??_AESEncode+5)& (0+255),f,b
 33919  002F62  0E00               	movlw	0
 33920  002F64  2370               	addwfc	(??_AESEncode+6)& (0+255),f,b
 33921  002F66  516F               	movf	(??_AESEncode+5)& (0+255),w,b
 33922  002F68  2566               	addwf	AESEncode@block& (0+255),w,b
 33923  002F6A  6EE9               	movwf	fsr0l,c
 33924  002F6C  5170               	movf	(??_AESEncode+6)& (0+255),w,b
 33925  002F6E  2167               	addwfc	(AESEncode@block+1)& (0+255),w,b
 33926  002F70  6EEA               	movwf	fsr0h,c
 33927  002F72  50EF               	movf	indf0,w,c
 33928  002F74  6F71               	movwf	(??_AESEncode+7)& (0+255),b
 33929  002F76  517C               	movf	AESEncode@i& (0+255),w,b
 33930  002F78  2566               	addwf	AESEncode@block& (0+255),w,b
 33931  002F7A  6EE9               	movwf	fsr0l,c
 33932  002F7C  0E00               	movlw	0
 33933  002F7E  2167               	addwfc	(AESEncode@block+1)& (0+255),w,b
 33934  002F80  6EEA               	movwf	fsr0h,c
 33935  002F82  50EF               	movf	indf0,w,c
 33936  002F84  1971               	xorwf	(??_AESEncode+7)& (0+255),w,b
 33937  002F86  196E               	xorwf	(??_AESEncode+4)& (0+255),w,b
 33938  002F88  1978               	xorwf	AESEncode@aux& (0+255),w,b
 33939  002F8A  6EDF               	movwf	indf2,c
 33940  002F8C  0E04               	movlw	4
 33941  002F8E  277C               	addwf	AESEncode@i& (0+255),f,b
 33942  002F90  D6DC               	goto	l8835
 33943  002F92                     u7800:
 33944                           
 33945                           ;AES.c: 296: }
 33946                           ;AES.c: 297: }
 33947                           ;AES.c: 299: EncKeySchedule(key);
 33948                           
 33949                           ; BSR set to: 0
 33950                           
 33951                           ; BSR set to: 0
 33952  002F92  C068  F060         	movff	AESEncode@key,EncKeySchedule@key
 33953  002F96  C069  F061         	movff	AESEncode@key+1,EncKeySchedule@key+1
 33954  002F9A  EC54  F01C         	call	_EncKeySchedule	;wreg free
 33955                           
 33956                           ;AES.c: 302: for(i=0;i<16;i++)
 33957  002F9E  0E00               	movlw	0
 33958  002FA0  0100               	movlb	0	; () banked
 33959  002FA2  6F7C               	movwf	AESEncode@i& (0+255),b
 33960  002FA4                     l8875:
 33961                           
 33962                           ; BSR set to: 0
 33963  002FA4  0E0F               	movlw	15
 33964  002FA6  657C               	cpfsgt	AESEncode@i& (0+255),b
 33965  002FA8  D001               	goto	l1632
 33966  002FAA  D016               	goto	u7820
 33967  002FAC                     l1632:
 33968                           
 33969                           ; BSR set to: 0
 33970                           ;AES.c: 303: {
 33971                           ;AES.c: 304: block[i] ^= key[i];
 33972                           
 33973                           ; BSR set to: 0
 33974  002FAC  517C               	movf	AESEncode@i& (0+255),w,b
 33975  002FAE  0D01               	mullw	1
 33976  002FB0  50F3               	movf	prodl,w,c
 33977  002FB2  2568               	addwf	AESEncode@key& (0+255),w,b
 33978  002FB4  6ED9               	movwf	fsr2l,c
 33979  002FB6  50F4               	movf	prodh,w,c
 33980  002FB8  2169               	addwfc	(AESEncode@key+1)& (0+255),w,b
 33981  002FBA  6EDA               	movwf	fsr2h,c
 33982  002FBC  50DF               	movf	indf2,w,c
 33983  002FBE  6F6A               	movwf	??_AESEncode& (0+255),b
 33984  002FC0  517C               	movf	AESEncode@i& (0+255),w,b
 33985  002FC2  0D01               	mullw	1
 33986  002FC4  50F3               	movf	prodl,w,c
 33987  002FC6  2566               	addwf	AESEncode@block& (0+255),w,b
 33988  002FC8  6ED9               	movwf	fsr2l,c
 33989  002FCA  50F4               	movf	prodh,w,c
 33990  002FCC  2167               	addwfc	(AESEncode@block+1)& (0+255),w,b
 33991  002FCE  6EDA               	movwf	fsr2h,c
 33992  002FD0  516A               	movf	??_AESEncode& (0+255),w,b
 33993  002FD2  1ADF               	xorwf	indf2,f,c
 33994                           
 33995                           ; BSR set to: 0
 33996  002FD4  2B7C               	incf	AESEncode@i& (0+255),f,b
 33997  002FD6  D7E6               	goto	l8875
 33998  002FD8                     u7820:
 33999                           
 34000                           ; BSR set to: 0
 34001                           ;AES.c: 305: }
 34002                           ;AES.c: 307: _roundCounter--;
 34003                           
 34004                           ; BSR set to: 0
 34005  002FD8  0101               	movlb	1	; () banked
 34006  002FDA  0753               	decf	__roundCounter& (0+255),f,b
 34007                           
 34008                           ; BSR set to: 1
 34009                           ;AES.c: 308: }
 34010                           ;AES.c: 309: while(_roundCounter !=0);
 34011  002FDC  5153               	movf	__roundCounter& (0+255),w,b
 34012  002FDE  B4D8               	btfsc	status,2,c
 34013  002FE0  0012               	return	
 34014  002FE2  D67D               	goto	u7720
 34015  002FE4                     __end_of_AESEncode:
 34016                           	opt stack 0
 34017                           tosu	equ	0xFFF
 34018                           tosh	equ	0xFFE
 34019                           tosl	equ	0xFFD
 34020                           pclath	equ	0xFFA
 34021                           tblptru	equ	0xFF8
 34022                           tblptrh	equ	0xFF7
 34023                           tblptrl	equ	0xFF6
 34024                           tablat	equ	0xFF5
 34025                           prodh	equ	0xFF4
 34026                           prodl	equ	0xFF3
 34027                           intcon	equ	0xFF2
 34028                           intcon2	equ	0xFF1
 34029                           intcon3	equ	0xFF0
 34030                           indf0	equ	0xFEF
 34031                           postinc0	equ	0xFEE
 34032                           plusw0	equ	0xFEB
 34033                           fsr0h	equ	0xFEA
 34034                           fsr0l	equ	0xFE9
 34035                           wreg	equ	0xFE8
 34036                           postinc1	equ	0xFE6
 34037                           postdec1	equ	0xFE5
 34038                           plusw1	equ	0xFE3
 34039                           fsr1h	equ	0xFE2
 34040                           fsr1l	equ	0xFE1
 34041                           indf2	equ	0xFDF
 34042                           postinc2	equ	0xFDE
 34043                           postdec2	equ	0xFDD
 34044                           plusw2	equ	0xFDB
 34045                           fsr2h	equ	0xFDA
 34046                           fsr2l	equ	0xFD9
 34047                           status	equ	0xFD8
 34048                           
 34049 ;; *************** function _EncodeShiftRow *****************
 34050 ;; Defined at:
 34051 ;;		line 385 in file "mcc_generated_files/LoRaWAN/AES.c"
 34052 ;; Parameters:    Size  Location     Type
 34053 ;;  stateTable      2    0[BANK0 ] PTR unsigned char 
 34054 ;;		 -> aesBuffer(16), radioBuffer(271), LORAWAN_RxDone@hdr(2), loRa.activationParameters(105), 
 34055 ;;		 -> loRa(245), GenerateSubkey@l(16), AESCmac@y(16), AESCmac@x(16), 
 34056 ;; Auto vars:     Size  Location     Type
 34057 ;;  temp            1    2[BANK0 ] unsigned char 
 34058 ;; Return value:  Size  Location     Type
 34059 ;;                  1    wreg      void 
 34060 ;; Registers used:
 34061 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0
 34062 ;; Tracked objects:
 34063 ;;		On entry : 0/0
 34064 ;;		On exit  : 0/0
 34065 ;;		Unchanged: 0/0
 34066 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 34067 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34068 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34069 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34070 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34071 ;;Total ram usage:        3 bytes
 34072 ;; Hardware stack levels used:    1
 34073 ;; Hardware stack levels required when called:    7
 34074 ;; This function calls:
 34075 ;;		Nothing
 34076 ;; This function is called by:
 34077 ;;		_AESEncode
 34078 ;; This function uses a non-reentrant model
 34079 ;;
 34080                           
 34081                           	psect	text157
 34082  0056AC                     __ptext157:
 34083                           	opt stack 0
 34084  0056AC                     _EncodeShiftRow:
 34085                           	opt stack 18
 34086                           
 34087                           ;AES.c: 387: unsigned char temp;
 34088                           ;AES.c: 392: temp=stateTable[1];
 34089                           
 34090                           ; BSR set to: 1
 34091                           ;incstack = 0
 34092  0056AC  0100               	movlb	0	; () banked
 34093  0056AE  EE20 F001          	lfsr	2,1
 34094  0056B2  5160               	movf	EncodeShiftRow@stateTable& (0+255),w,b
 34095  0056B4  26D9               	addwf	fsr2l,f,c
 34096  0056B6  5161               	movf	(EncodeShiftRow@stateTable+1)& (0+255),w,b
 34097  0056B8  22DA               	addwfc	fsr2h,f,c
 34098  0056BA  50DF               	movf	indf2,w,c
 34099  0056BC  6F62               	movwf	EncodeShiftRow@temp& (0+255),b
 34100                           
 34101                           ; BSR set to: 0
 34102                           ;AES.c: 393: stateTable[1]=stateTable[5];
 34103  0056BE  EE20 F005          	lfsr	2,5
 34104  0056C2  5160               	movf	EncodeShiftRow@stateTable& (0+255),w,b
 34105  0056C4  26D9               	addwf	fsr2l,f,c
 34106  0056C6  5161               	movf	(EncodeShiftRow@stateTable+1)& (0+255),w,b
 34107  0056C8  22DA               	addwfc	fsr2h,f,c
 34108  0056CA  EE00 F001          	lfsr	0,1
 34109  0056CE  5160               	movf	EncodeShiftRow@stateTable& (0+255),w,b
 34110  0056D0  26E9               	addwf	fsr0l,f,c
 34111  0056D2  5161               	movf	(EncodeShiftRow@stateTable+1)& (0+255),w,b
 34112  0056D4  22EA               	addwfc	fsr0h,f,c
 34113  0056D6  CFDF FFEF          	movff	indf2,indf0
 34114                           
 34115                           ; BSR set to: 0
 34116                           ;AES.c: 394: stateTable[5]=stateTable[9];
 34117  0056DA  EE20 F009          	lfsr	2,9
 34118  0056DE  5160               	movf	EncodeShiftRow@stateTable& (0+255),w,b
 34119  0056E0  26D9               	addwf	fsr2l,f,c
 34120  0056E2  5161               	movf	(EncodeShiftRow@stateTable+1)& (0+255),w,b
 34121  0056E4  22DA               	addwfc	fsr2h,f,c
 34122  0056E6  EE00 F005          	lfsr	0,5
 34123  0056EA  5160               	movf	EncodeShiftRow@stateTable& (0+255),w,b
 34124  0056EC  26E9               	addwf	fsr0l,f,c
 34125  0056EE  5161               	movf	(EncodeShiftRow@stateTable+1)& (0+255),w,b
 34126  0056F0  22EA               	addwfc	fsr0h,f,c
 34127  0056F2  CFDF FFEF          	movff	indf2,indf0
 34128                           
 34129                           ; BSR set to: 0
 34130                           ;AES.c: 395: stateTable[9]=stateTable[13];
 34131  0056F6  EE20 F00D          	lfsr	2,13
 34132  0056FA  5160               	movf	EncodeShiftRow@stateTable& (0+255),w,b
 34133  0056FC  26D9               	addwf	fsr2l,f,c
 34134  0056FE  5161               	movf	(EncodeShiftRow@stateTable+1)& (0+255),w,b
 34135  005700  22DA               	addwfc	fsr2h,f,c
 34136  005702  EE00 F009          	lfsr	0,9
 34137  005706  5160               	movf	EncodeShiftRow@stateTable& (0+255),w,b
 34138  005708  26E9               	addwf	fsr0l,f,c
 34139  00570A  5161               	movf	(EncodeShiftRow@stateTable+1)& (0+255),w,b
 34140  00570C  22EA               	addwfc	fsr0h,f,c
 34141  00570E  CFDF FFEF          	movff	indf2,indf0
 34142                           
 34143                           ; BSR set to: 0
 34144                           ;AES.c: 396: stateTable[13]=temp;
 34145  005712  EE20 F00D          	lfsr	2,13
 34146  005716  5160               	movf	EncodeShiftRow@stateTable& (0+255),w,b
 34147  005718  26D9               	addwf	fsr2l,f,c
 34148  00571A  5161               	movf	(EncodeShiftRow@stateTable+1)& (0+255),w,b
 34149  00571C  22DA               	addwfc	fsr2h,f,c
 34150  00571E  C062  FFDF         	movff	EncodeShiftRow@temp,indf2
 34151                           
 34152                           ; BSR set to: 0
 34153                           ;AES.c: 399: temp=stateTable[2];
 34154  005722  EE20 F002          	lfsr	2,2
 34155  005726  5160               	movf	EncodeShiftRow@stateTable& (0+255),w,b
 34156  005728  26D9               	addwf	fsr2l,f,c
 34157  00572A  5161               	movf	(EncodeShiftRow@stateTable+1)& (0+255),w,b
 34158  00572C  22DA               	addwfc	fsr2h,f,c
 34159  00572E  50DF               	movf	indf2,w,c
 34160  005730  6F62               	movwf	EncodeShiftRow@temp& (0+255),b
 34161                           
 34162                           ; BSR set to: 0
 34163                           ;AES.c: 400: stateTable[2]=stateTable[10];
 34164  005732  EE20 F00A          	lfsr	2,10
 34165  005736  5160               	movf	EncodeShiftRow@stateTable& (0+255),w,b
 34166  005738  26D9               	addwf	fsr2l,f,c
 34167  00573A  5161               	movf	(EncodeShiftRow@stateTable+1)& (0+255),w,b
 34168  00573C  22DA               	addwfc	fsr2h,f,c
 34169  00573E  EE00 F002          	lfsr	0,2
 34170  005742  5160               	movf	EncodeShiftRow@stateTable& (0+255),w,b
 34171  005744  26E9               	addwf	fsr0l,f,c
 34172  005746  5161               	movf	(EncodeShiftRow@stateTable+1)& (0+255),w,b
 34173  005748  22EA               	addwfc	fsr0h,f,c
 34174  00574A  CFDF FFEF          	movff	indf2,indf0
 34175                           
 34176                           ;AES.c: 401: stateTable[10]=temp;
 34177  00574E  EE20 F00A          	lfsr	2,10
 34178  005752  5160               	movf	EncodeShiftRow@stateTable& (0+255),w,b
 34179  005754  26D9               	addwf	fsr2l,f,c
 34180  005756  5161               	movf	(EncodeShiftRow@stateTable+1)& (0+255),w,b
 34181  005758  22DA               	addwfc	fsr2h,f,c
 34182  00575A  C062  FFDF         	movff	EncodeShiftRow@temp,indf2
 34183                           
 34184                           ;AES.c: 402: temp=stateTable[14];
 34185  00575E  EE20 F00E          	lfsr	2,14
 34186  005762  5160               	movf	EncodeShiftRow@stateTable& (0+255),w,b
 34187  005764  26D9               	addwf	fsr2l,f,c
 34188  005766  5161               	movf	(EncodeShiftRow@stateTable+1)& (0+255),w,b
 34189  005768  22DA               	addwfc	fsr2h,f,c
 34190  00576A  50DF               	movf	indf2,w,c
 34191  00576C  6F62               	movwf	EncodeShiftRow@temp& (0+255),b
 34192                           
 34193                           ; BSR set to: 0
 34194                           ;AES.c: 403: stateTable[14]=stateTable[6];
 34195  00576E  EE20 F006          	lfsr	2,6
 34196  005772  5160               	movf	EncodeShiftRow@stateTable& (0+255),w,b
 34197  005774  26D9               	addwf	fsr2l,f,c
 34198  005776  5161               	movf	(EncodeShiftRow@stateTable+1)& (0+255),w,b
 34199  005778  22DA               	addwfc	fsr2h,f,c
 34200  00577A  EE00 F00E          	lfsr	0,14
 34201  00577E  5160               	movf	EncodeShiftRow@stateTable& (0+255),w,b
 34202  005780  26E9               	addwf	fsr0l,f,c
 34203  005782  5161               	movf	(EncodeShiftRow@stateTable+1)& (0+255),w,b
 34204  005784  22EA               	addwfc	fsr0h,f,c
 34205  005786  CFDF FFEF          	movff	indf2,indf0
 34206                           
 34207                           ; BSR set to: 0
 34208                           ;AES.c: 404: stateTable[6]=temp;
 34209  00578A  EE20 F006          	lfsr	2,6
 34210  00578E  5160               	movf	EncodeShiftRow@stateTable& (0+255),w,b
 34211  005790  26D9               	addwf	fsr2l,f,c
 34212  005792  5161               	movf	(EncodeShiftRow@stateTable+1)& (0+255),w,b
 34213  005794  22DA               	addwfc	fsr2h,f,c
 34214  005796  C062  FFDF         	movff	EncodeShiftRow@temp,indf2
 34215                           
 34216                           ; BSR set to: 0
 34217                           ;AES.c: 407: temp=stateTable[3];
 34218  00579A  EE20 F003          	lfsr	2,3
 34219  00579E  5160               	movf	EncodeShiftRow@stateTable& (0+255),w,b
 34220  0057A0  26D9               	addwf	fsr2l,f,c
 34221  0057A2  5161               	movf	(EncodeShiftRow@stateTable+1)& (0+255),w,b
 34222  0057A4  22DA               	addwfc	fsr2h,f,c
 34223  0057A6  50DF               	movf	indf2,w,c
 34224  0057A8  6F62               	movwf	EncodeShiftRow@temp& (0+255),b
 34225                           
 34226                           ; BSR set to: 0
 34227                           ;AES.c: 408: stateTable[3]=stateTable[15];
 34228  0057AA  EE20 F00F          	lfsr	2,15
 34229  0057AE  5160               	movf	EncodeShiftRow@stateTable& (0+255),w,b
 34230  0057B0  26D9               	addwf	fsr2l,f,c
 34231  0057B2  5161               	movf	(EncodeShiftRow@stateTable+1)& (0+255),w,b
 34232  0057B4  22DA               	addwfc	fsr2h,f,c
 34233  0057B6  EE00 F003          	lfsr	0,3
 34234  0057BA  5160               	movf	EncodeShiftRow@stateTable& (0+255),w,b
 34235  0057BC  26E9               	addwf	fsr0l,f,c
 34236  0057BE  5161               	movf	(EncodeShiftRow@stateTable+1)& (0+255),w,b
 34237  0057C0  22EA               	addwfc	fsr0h,f,c
 34238  0057C2  CFDF FFEF          	movff	indf2,indf0
 34239                           
 34240                           ; BSR set to: 0
 34241                           ;AES.c: 409: stateTable[15]=stateTable[11];
 34242  0057C6  EE20 F00B          	lfsr	2,11
 34243  0057CA  5160               	movf	EncodeShiftRow@stateTable& (0+255),w,b
 34244  0057CC  26D9               	addwf	fsr2l,f,c
 34245  0057CE  5161               	movf	(EncodeShiftRow@stateTable+1)& (0+255),w,b
 34246  0057D0  22DA               	addwfc	fsr2h,f,c
 34247  0057D2  EE00 F00F          	lfsr	0,15
 34248  0057D6  5160               	movf	EncodeShiftRow@stateTable& (0+255),w,b
 34249  0057D8  26E9               	addwf	fsr0l,f,c
 34250  0057DA  5161               	movf	(EncodeShiftRow@stateTable+1)& (0+255),w,b
 34251  0057DC  22EA               	addwfc	fsr0h,f,c
 34252  0057DE  CFDF FFEF          	movff	indf2,indf0
 34253                           
 34254                           ; BSR set to: 0
 34255                           ;AES.c: 410: stateTable[11]=stateTable[7];
 34256  0057E2  EE20 F007          	lfsr	2,7
 34257  0057E6  5160               	movf	EncodeShiftRow@stateTable& (0+255),w,b
 34258  0057E8  26D9               	addwf	fsr2l,f,c
 34259  0057EA  5161               	movf	(EncodeShiftRow@stateTable+1)& (0+255),w,b
 34260  0057EC  22DA               	addwfc	fsr2h,f,c
 34261  0057EE  EE00 F00B          	lfsr	0,11
 34262  0057F2  5160               	movf	EncodeShiftRow@stateTable& (0+255),w,b
 34263  0057F4  26E9               	addwf	fsr0l,f,c
 34264  0057F6  5161               	movf	(EncodeShiftRow@stateTable+1)& (0+255),w,b
 34265  0057F8  22EA               	addwfc	fsr0h,f,c
 34266  0057FA  CFDF FFEF          	movff	indf2,indf0
 34267                           
 34268                           ;AES.c: 411: stateTable[7]=temp;
 34269  0057FE  EE20 F007          	lfsr	2,7
 34270  005802  5160               	movf	EncodeShiftRow@stateTable& (0+255),w,b
 34271  005804  26D9               	addwf	fsr2l,f,c
 34272  005806  5161               	movf	(EncodeShiftRow@stateTable+1)& (0+255),w,b
 34273  005808  22DA               	addwfc	fsr2h,f,c
 34274  00580A  C062  FFDF         	movff	EncodeShiftRow@temp,indf2
 34275                           
 34276                           ; BSR set to: 0
 34277  00580E  0012               	return		;funcret
 34278  005810                     __end_of_EncodeShiftRow:
 34279                           	opt stack 0
 34280                           tosu	equ	0xFFF
 34281                           tosh	equ	0xFFE
 34282                           tosl	equ	0xFFD
 34283                           pclath	equ	0xFFA
 34284                           tblptru	equ	0xFF8
 34285                           tblptrh	equ	0xFF7
 34286                           tblptrl	equ	0xFF6
 34287                           tablat	equ	0xFF5
 34288                           prodh	equ	0xFF4
 34289                           prodl	equ	0xFF3
 34290                           intcon	equ	0xFF2
 34291                           intcon2	equ	0xFF1
 34292                           intcon3	equ	0xFF0
 34293                           indf0	equ	0xFEF
 34294                           postinc0	equ	0xFEE
 34295                           plusw0	equ	0xFEB
 34296                           fsr0h	equ	0xFEA
 34297                           fsr0l	equ	0xFE9
 34298                           wreg	equ	0xFE8
 34299                           postinc1	equ	0xFE6
 34300                           postdec1	equ	0xFE5
 34301                           plusw1	equ	0xFE3
 34302                           fsr1h	equ	0xFE2
 34303                           fsr1l	equ	0xFE1
 34304                           indf2	equ	0xFDF
 34305                           postinc2	equ	0xFDE
 34306                           postdec2	equ	0xFDD
 34307                           plusw2	equ	0xFDB
 34308                           fsr2h	equ	0xFDA
 34309                           fsr2l	equ	0xFD9
 34310                           status	equ	0xFD8
 34311                           
 34312 ;; *************** function _EncKeySchedule *****************
 34313 ;; Defined at:
 34314 ;;		line 337 in file "mcc_generated_files/LoRaWAN/AES.c"
 34315 ;; Parameters:    Size  Location     Type
 34316 ;;  key             2    0[BANK0 ] PTR unsigned char 
 34317 ;;		 -> AESEncodeLoRa@useKey(16), 
 34318 ;; Auto vars:     Size  Location     Type
 34319 ;;		None
 34320 ;; Return value:  Size  Location     Type
 34321 ;;                  1    wreg      void 
 34322 ;; Registers used:
 34323 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 34324 ;; Tracked objects:
 34325 ;;		On entry : 0/0
 34326 ;;		On exit  : 0/0
 34327 ;;		Unchanged: 0/0
 34328 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 34329 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34330 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34331 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34332 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34333 ;;Total ram usage:        6 bytes
 34334 ;; Hardware stack levels used:    1
 34335 ;; Hardware stack levels required when called:    7
 34336 ;; This function calls:
 34337 ;;		Nothing
 34338 ;; This function is called by:
 34339 ;;		_AESEncode
 34340 ;; This function uses a non-reentrant model
 34341 ;;
 34342                           
 34343                           	psect	text158
 34344  0038A8                     __ptext158:
 34345                           	opt stack 0
 34346  0038A8                     _EncKeySchedule:
 34347                           	opt stack 18
 34348                           
 34349                           ;AES.c: 340: key[0]^=STable[key[13]];
 34350                           
 34351                           ; BSR set to: 0
 34352                           ;incstack = 0
 34353  0038A8  0100               	movlb	0	; () banked
 34354  0038AA  EE20 F00D          	lfsr	2,13
 34355  0038AE  5160               	movf	EncKeySchedule@key& (0+255),w,b
 34356  0038B0  26D9               	addwf	fsr2l,f,c
 34357  0038B2  5161               	movf	(EncKeySchedule@key+1)& (0+255),w,b
 34358  0038B4  22DA               	addwfc	fsr2h,f,c
 34359  0038B6  50DF               	movf	indf2,w,c
 34360  0038B8  6F62               	movwf	??_EncKeySchedule& (0+255),b
 34361  0038BA  5162               	movf	??_EncKeySchedule& (0+255),w,b
 34362  0038BC  0D01               	mullw	1
 34363  0038BE  0E67               	movlw	low _STable
 34364  0038C0  24F3               	addwf	prodl,w,c
 34365  0038C2  6EF6               	movwf	tblptrl,c
 34366  0038C4  0EFE               	movlw	high _STable
 34367  0038C6  20F4               	addwfc	prodh,w,c
 34368  0038C8  6EF7               	movwf	tblptrh,c
 34369  0038CA                     	if	1	;There are 3 active tblptr bytes
 34370  0038CA  6AF8               	clrf	tblptru,c
 34371  0038CC  0E00               	movlw	low (__mediumconst shr (0+16))
 34372  0038CE  22F8               	addwfc	tblptru,f,c
 34373  0038D0                     	endif
 34374  0038D0  0008               	tblrd		*
 34375  0038D2  CFF5 F063          	movff	tablat,??_EncKeySchedule+1
 34376  0038D6  C060  FFD9         	movff	EncKeySchedule@key,fsr2l
 34377  0038DA  C061  FFDA         	movff	EncKeySchedule@key+1,fsr2h
 34378  0038DE  5163               	movf	(??_EncKeySchedule+1)& (0+255),w,b
 34379  0038E0  1ADF               	xorwf	indf2,f,c
 34380                           
 34381                           ;AES.c: 341: key[1]^=STable[key[14]];
 34382  0038E2  EE20 F00E          	lfsr	2,14
 34383  0038E6  5160               	movf	EncKeySchedule@key& (0+255),w,b
 34384  0038E8  26D9               	addwf	fsr2l,f,c
 34385  0038EA  5161               	movf	(EncKeySchedule@key+1)& (0+255),w,b
 34386  0038EC  22DA               	addwfc	fsr2h,f,c
 34387  0038EE  50DF               	movf	indf2,w,c
 34388  0038F0  6F62               	movwf	??_EncKeySchedule& (0+255),b
 34389  0038F2  5162               	movf	??_EncKeySchedule& (0+255),w,b
 34390  0038F4  0D01               	mullw	1
 34391  0038F6  0E67               	movlw	low _STable
 34392  0038F8  24F3               	addwf	prodl,w,c
 34393  0038FA  6EF6               	movwf	tblptrl,c
 34394  0038FC  0EFE               	movlw	high _STable
 34395  0038FE  20F4               	addwfc	prodh,w,c
 34396  003900  6EF7               	movwf	tblptrh,c
 34397  003902                     	if	1	;There are 3 active tblptr bytes
 34398  003902  6AF8               	clrf	tblptru,c
 34399  003904  0E00               	movlw	low (__mediumconst shr (0+16))
 34400  003906  22F8               	addwfc	tblptru,f,c
 34401  003908                     	endif
 34402  003908  0008               	tblrd		*
 34403  00390A  CFF5 F063          	movff	tablat,??_EncKeySchedule+1
 34404  00390E  EE20 F001          	lfsr	2,1
 34405  003912  5160               	movf	EncKeySchedule@key& (0+255),w,b
 34406  003914  26D9               	addwf	fsr2l,f,c
 34407  003916  5161               	movf	(EncKeySchedule@key+1)& (0+255),w,b
 34408  003918  22DA               	addwfc	fsr2h,f,c
 34409  00391A  5163               	movf	(??_EncKeySchedule+1)& (0+255),w,b
 34410  00391C  1ADF               	xorwf	indf2,f,c
 34411                           
 34412                           ;AES.c: 342: key[2]^=STable[key[15]];
 34413  00391E  EE20 F00F          	lfsr	2,15
 34414  003922  5160               	movf	EncKeySchedule@key& (0+255),w,b
 34415  003924  26D9               	addwf	fsr2l,f,c
 34416  003926  5161               	movf	(EncKeySchedule@key+1)& (0+255),w,b
 34417  003928  22DA               	addwfc	fsr2h,f,c
 34418  00392A  50DF               	movf	indf2,w,c
 34419  00392C  6F62               	movwf	??_EncKeySchedule& (0+255),b
 34420  00392E  5162               	movf	??_EncKeySchedule& (0+255),w,b
 34421  003930  0D01               	mullw	1
 34422  003932  0E67               	movlw	low _STable
 34423  003934  24F3               	addwf	prodl,w,c
 34424  003936  6EF6               	movwf	tblptrl,c
 34425  003938  0EFE               	movlw	high _STable
 34426  00393A  20F4               	addwfc	prodh,w,c
 34427  00393C  6EF7               	movwf	tblptrh,c
 34428  00393E                     	if	1	;There are 3 active tblptr bytes
 34429  00393E  6AF8               	clrf	tblptru,c
 34430  003940  0E00               	movlw	low (__mediumconst shr (0+16))
 34431  003942  22F8               	addwfc	tblptru,f,c
 34432  003944                     	endif
 34433  003944  0008               	tblrd		*
 34434  003946  CFF5 F063          	movff	tablat,??_EncKeySchedule+1
 34435  00394A  EE20 F002          	lfsr	2,2
 34436  00394E  5160               	movf	EncKeySchedule@key& (0+255),w,b
 34437  003950  26D9               	addwf	fsr2l,f,c
 34438  003952  5161               	movf	(EncKeySchedule@key+1)& (0+255),w,b
 34439  003954  22DA               	addwfc	fsr2h,f,c
 34440  003956  5163               	movf	(??_EncKeySchedule+1)& (0+255),w,b
 34441  003958  1ADF               	xorwf	indf2,f,c
 34442                           
 34443                           ;AES.c: 343: key[3]^=STable[key[12]];
 34444  00395A  EE20 F00C          	lfsr	2,12
 34445  00395E  5160               	movf	EncKeySchedule@key& (0+255),w,b
 34446  003960  26D9               	addwf	fsr2l,f,c
 34447  003962  5161               	movf	(EncKeySchedule@key+1)& (0+255),w,b
 34448  003964  22DA               	addwfc	fsr2h,f,c
 34449  003966  50DF               	movf	indf2,w,c
 34450  003968  6F62               	movwf	??_EncKeySchedule& (0+255),b
 34451  00396A  5162               	movf	??_EncKeySchedule& (0+255),w,b
 34452  00396C  0D01               	mullw	1
 34453  00396E  0E67               	movlw	low _STable
 34454  003970  24F3               	addwf	prodl,w,c
 34455  003972  6EF6               	movwf	tblptrl,c
 34456  003974  0EFE               	movlw	high _STable
 34457  003976  20F4               	addwfc	prodh,w,c
 34458  003978  6EF7               	movwf	tblptrh,c
 34459  00397A                     	if	1	;There are 3 active tblptr bytes
 34460  00397A  6AF8               	clrf	tblptru,c
 34461  00397C  0E00               	movlw	low (__mediumconst shr (0+16))
 34462  00397E  22F8               	addwfc	tblptru,f,c
 34463  003980                     	endif
 34464  003980  0008               	tblrd		*
 34465  003982  CFF5 F063          	movff	tablat,??_EncKeySchedule+1
 34466  003986  EE20 F003          	lfsr	2,3
 34467  00398A  5160               	movf	EncKeySchedule@key& (0+255),w,b
 34468  00398C  26D9               	addwf	fsr2l,f,c
 34469  00398E  5161               	movf	(EncKeySchedule@key+1)& (0+255),w,b
 34470  003990  22DA               	addwfc	fsr2h,f,c
 34471  003992  5163               	movf	(??_EncKeySchedule+1)& (0+255),w,b
 34472  003994  1ADF               	xorwf	indf2,f,c
 34473                           
 34474                           ; BSR set to: 0
 34475                           ;AES.c: 345: key[0]^=_rcon;
 34476  003996  C060  FFD9         	movff	EncKeySchedule@key,fsr2l
 34477  00399A  C061  FFDA         	movff	EncKeySchedule@key+1,fsr2h
 34478  00399E  5052               	movf	__rcon,w,c
 34479  0039A0  1ADF               	xorwf	indf2,f,c
 34480                           
 34481                           ; BSR set to: 0
 34482                           ;AES.c: 346: _rcon = (((_rcon)<0x80)?(_rcon)<<1:(((_rcon)<<1)^0x1b) );
 34483  0039A2  0E7F               	movlw	127
 34484  0039A4  6452               	cpfsgt	__rcon,c
 34485  0039A6  D00C               	goto	l1639
 34486                           
 34487                           ; BSR set to: 0
 34488  0039A8  0E1B               	movlw	27
 34489  0039AA  C052  F062         	movff	__rcon,??_EncKeySchedule
 34490  0039AE  6B63               	clrf	(??_EncKeySchedule+1)& (0+255),b
 34491  0039B0  90D8               	bcf	status,0,c
 34492  0039B2  3762               	rlcf	??_EncKeySchedule& (0+255),f,b
 34493  0039B4  3763               	rlcf	(??_EncKeySchedule+1)& (0+255),f,b
 34494  0039B6  1962               	xorwf	??_EncKeySchedule& (0+255),w,b
 34495  0039B8  6F64               	movwf	_EncKeySchedule$2132& (0+255),b
 34496  0039BA  5163               	movf	(??_EncKeySchedule+1)& (0+255),w,b
 34497  0039BC  6F65               	movwf	(_EncKeySchedule$2132+1)& (0+255),b
 34498  0039BE  D005               	goto	l1641
 34499  0039C0                     l1639:
 34500                           
 34501                           ; BSR set to: 0
 34502                           
 34503                           ; BSR set to: 0
 34504  0039C0  90D8               	bcf	status,0,c
 34505  0039C2  3452               	rlcf	__rcon,w,c
 34506  0039C4  6F64               	movwf	_EncKeySchedule$2132& (0+255),b
 34507  0039C6  6B65               	clrf	(_EncKeySchedule$2132+1)& (0+255),b
 34508  0039C8  3765               	rlcf	(_EncKeySchedule$2132+1)& (0+255),f,b
 34509  0039CA                     l1641:
 34510                           
 34511                           ; BSR set to: 0
 34512                           
 34513                           ; BSR set to: 0
 34514  0039CA  C064  F052         	movff	_EncKeySchedule$2132,__rcon
 34515                           
 34516                           ; BSR set to: 0
 34517                           ;AES.c: 349: key[4]^=key[0];
 34518  0039CE  C060  FFD9         	movff	EncKeySchedule@key,fsr2l
 34519  0039D2  C061  FFDA         	movff	EncKeySchedule@key+1,fsr2h
 34520  0039D6  50DF               	movf	indf2,w,c
 34521  0039D8  6F62               	movwf	??_EncKeySchedule& (0+255),b
 34522  0039DA  EE20 F004          	lfsr	2,4
 34523  0039DE  5160               	movf	EncKeySchedule@key& (0+255),w,b
 34524  0039E0  26D9               	addwf	fsr2l,f,c
 34525  0039E2  5161               	movf	(EncKeySchedule@key+1)& (0+255),w,b
 34526  0039E4  22DA               	addwfc	fsr2h,f,c
 34527  0039E6  5162               	movf	??_EncKeySchedule& (0+255),w,b
 34528  0039E8  1ADF               	xorwf	indf2,f,c
 34529                           
 34530                           ; BSR set to: 0
 34531                           ;AES.c: 350: key[5]^=key[1];
 34532  0039EA  EE20 F001          	lfsr	2,1
 34533  0039EE  5160               	movf	EncKeySchedule@key& (0+255),w,b
 34534  0039F0  26D9               	addwf	fsr2l,f,c
 34535  0039F2  5161               	movf	(EncKeySchedule@key+1)& (0+255),w,b
 34536  0039F4  22DA               	addwfc	fsr2h,f,c
 34537  0039F6  50DF               	movf	indf2,w,c
 34538  0039F8  6F62               	movwf	??_EncKeySchedule& (0+255),b
 34539  0039FA  EE20 F005          	lfsr	2,5
 34540  0039FE  5160               	movf	EncKeySchedule@key& (0+255),w,b
 34541  003A00  26D9               	addwf	fsr2l,f,c
 34542  003A02  5161               	movf	(EncKeySchedule@key+1)& (0+255),w,b
 34543  003A04  22DA               	addwfc	fsr2h,f,c
 34544  003A06  5162               	movf	??_EncKeySchedule& (0+255),w,b
 34545  003A08  1ADF               	xorwf	indf2,f,c
 34546                           
 34547                           ; BSR set to: 0
 34548                           ;AES.c: 351: key[6]^=key[2];
 34549  003A0A  EE20 F002          	lfsr	2,2
 34550  003A0E  5160               	movf	EncKeySchedule@key& (0+255),w,b
 34551  003A10  26D9               	addwf	fsr2l,f,c
 34552  003A12  5161               	movf	(EncKeySchedule@key+1)& (0+255),w,b
 34553  003A14  22DA               	addwfc	fsr2h,f,c
 34554  003A16  50DF               	movf	indf2,w,c
 34555  003A18  6F62               	movwf	??_EncKeySchedule& (0+255),b
 34556  003A1A  EE20 F006          	lfsr	2,6
 34557  003A1E  5160               	movf	EncKeySchedule@key& (0+255),w,b
 34558  003A20  26D9               	addwf	fsr2l,f,c
 34559  003A22  5161               	movf	(EncKeySchedule@key+1)& (0+255),w,b
 34560  003A24  22DA               	addwfc	fsr2h,f,c
 34561  003A26  5162               	movf	??_EncKeySchedule& (0+255),w,b
 34562  003A28  1ADF               	xorwf	indf2,f,c
 34563                           
 34564                           ; BSR set to: 0
 34565                           ;AES.c: 352: key[7]^=key[3];
 34566  003A2A  EE20 F003          	lfsr	2,3
 34567  003A2E  5160               	movf	EncKeySchedule@key& (0+255),w,b
 34568  003A30  26D9               	addwf	fsr2l,f,c
 34569  003A32  5161               	movf	(EncKeySchedule@key+1)& (0+255),w,b
 34570  003A34  22DA               	addwfc	fsr2h,f,c
 34571  003A36  50DF               	movf	indf2,w,c
 34572  003A38  6F62               	movwf	??_EncKeySchedule& (0+255),b
 34573  003A3A  EE20 F007          	lfsr	2,7
 34574  003A3E  5160               	movf	EncKeySchedule@key& (0+255),w,b
 34575  003A40  26D9               	addwf	fsr2l,f,c
 34576  003A42  5161               	movf	(EncKeySchedule@key+1)& (0+255),w,b
 34577  003A44  22DA               	addwfc	fsr2h,f,c
 34578  003A46  5162               	movf	??_EncKeySchedule& (0+255),w,b
 34579  003A48  1ADF               	xorwf	indf2,f,c
 34580                           
 34581                           ; BSR set to: 0
 34582                           ;AES.c: 355: key[8]^=key[4];
 34583  003A4A  EE20 F004          	lfsr	2,4
 34584  003A4E  5160               	movf	EncKeySchedule@key& (0+255),w,b
 34585  003A50  26D9               	addwf	fsr2l,f,c
 34586  003A52  5161               	movf	(EncKeySchedule@key+1)& (0+255),w,b
 34587  003A54  22DA               	addwfc	fsr2h,f,c
 34588  003A56  50DF               	movf	indf2,w,c
 34589  003A58  6F62               	movwf	??_EncKeySchedule& (0+255),b
 34590  003A5A  EE20 F008          	lfsr	2,8
 34591  003A5E  5160               	movf	EncKeySchedule@key& (0+255),w,b
 34592  003A60  26D9               	addwf	fsr2l,f,c
 34593  003A62  5161               	movf	(EncKeySchedule@key+1)& (0+255),w,b
 34594  003A64  22DA               	addwfc	fsr2h,f,c
 34595  003A66  5162               	movf	??_EncKeySchedule& (0+255),w,b
 34596  003A68  1ADF               	xorwf	indf2,f,c
 34597                           
 34598                           ; BSR set to: 0
 34599                           ;AES.c: 356: key[9]^=key[5];
 34600  003A6A  EE20 F005          	lfsr	2,5
 34601  003A6E  5160               	movf	EncKeySchedule@key& (0+255),w,b
 34602  003A70  26D9               	addwf	fsr2l,f,c
 34603  003A72  5161               	movf	(EncKeySchedule@key+1)& (0+255),w,b
 34604  003A74  22DA               	addwfc	fsr2h,f,c
 34605  003A76  50DF               	movf	indf2,w,c
 34606  003A78  6F62               	movwf	??_EncKeySchedule& (0+255),b
 34607  003A7A  EE20 F009          	lfsr	2,9
 34608  003A7E  5160               	movf	EncKeySchedule@key& (0+255),w,b
 34609  003A80  26D9               	addwf	fsr2l,f,c
 34610  003A82  5161               	movf	(EncKeySchedule@key+1)& (0+255),w,b
 34611  003A84  22DA               	addwfc	fsr2h,f,c
 34612  003A86  5162               	movf	??_EncKeySchedule& (0+255),w,b
 34613  003A88  1ADF               	xorwf	indf2,f,c
 34614                           
 34615                           ; BSR set to: 0
 34616                           ;AES.c: 357: key[10]^=key[6];
 34617  003A8A  EE20 F006          	lfsr	2,6
 34618  003A8E  5160               	movf	EncKeySchedule@key& (0+255),w,b
 34619  003A90  26D9               	addwf	fsr2l,f,c
 34620  003A92  5161               	movf	(EncKeySchedule@key+1)& (0+255),w,b
 34621  003A94  22DA               	addwfc	fsr2h,f,c
 34622  003A96  50DF               	movf	indf2,w,c
 34623  003A98  6F62               	movwf	??_EncKeySchedule& (0+255),b
 34624  003A9A  EE20 F00A          	lfsr	2,10
 34625  003A9E  5160               	movf	EncKeySchedule@key& (0+255),w,b
 34626  003AA0  26D9               	addwf	fsr2l,f,c
 34627  003AA2  5161               	movf	(EncKeySchedule@key+1)& (0+255),w,b
 34628  003AA4  22DA               	addwfc	fsr2h,f,c
 34629  003AA6  5162               	movf	??_EncKeySchedule& (0+255),w,b
 34630  003AA8  1ADF               	xorwf	indf2,f,c
 34631                           
 34632                           ; BSR set to: 0
 34633                           ;AES.c: 358: key[11]^=key[7];
 34634  003AAA  EE20 F007          	lfsr	2,7
 34635  003AAE  5160               	movf	EncKeySchedule@key& (0+255),w,b
 34636  003AB0  26D9               	addwf	fsr2l,f,c
 34637  003AB2  5161               	movf	(EncKeySchedule@key+1)& (0+255),w,b
 34638  003AB4  22DA               	addwfc	fsr2h,f,c
 34639  003AB6  50DF               	movf	indf2,w,c
 34640  003AB8  6F62               	movwf	??_EncKeySchedule& (0+255),b
 34641  003ABA  EE20 F00B          	lfsr	2,11
 34642  003ABE  5160               	movf	EncKeySchedule@key& (0+255),w,b
 34643  003AC0  26D9               	addwf	fsr2l,f,c
 34644  003AC2  5161               	movf	(EncKeySchedule@key+1)& (0+255),w,b
 34645  003AC4  22DA               	addwfc	fsr2h,f,c
 34646  003AC6  5162               	movf	??_EncKeySchedule& (0+255),w,b
 34647  003AC8  1ADF               	xorwf	indf2,f,c
 34648                           
 34649                           ; BSR set to: 0
 34650                           ;AES.c: 361: key[12]^=key[8];
 34651  003ACA  EE20 F008          	lfsr	2,8
 34652  003ACE  5160               	movf	EncKeySchedule@key& (0+255),w,b
 34653  003AD0  26D9               	addwf	fsr2l,f,c
 34654  003AD2  5161               	movf	(EncKeySchedule@key+1)& (0+255),w,b
 34655  003AD4  22DA               	addwfc	fsr2h,f,c
 34656  003AD6  50DF               	movf	indf2,w,c
 34657  003AD8  6F62               	movwf	??_EncKeySchedule& (0+255),b
 34658  003ADA  EE20 F00C          	lfsr	2,12
 34659  003ADE  5160               	movf	EncKeySchedule@key& (0+255),w,b
 34660  003AE0  26D9               	addwf	fsr2l,f,c
 34661  003AE2  5161               	movf	(EncKeySchedule@key+1)& (0+255),w,b
 34662  003AE4  22DA               	addwfc	fsr2h,f,c
 34663  003AE6  5162               	movf	??_EncKeySchedule& (0+255),w,b
 34664  003AE8  1ADF               	xorwf	indf2,f,c
 34665                           
 34666                           ; BSR set to: 0
 34667                           ;AES.c: 362: key[13]^=key[9];
 34668  003AEA  EE20 F009          	lfsr	2,9
 34669  003AEE  5160               	movf	EncKeySchedule@key& (0+255),w,b
 34670  003AF0  26D9               	addwf	fsr2l,f,c
 34671  003AF2  5161               	movf	(EncKeySchedule@key+1)& (0+255),w,b
 34672  003AF4  22DA               	addwfc	fsr2h,f,c
 34673  003AF6  50DF               	movf	indf2,w,c
 34674  003AF8  6F62               	movwf	??_EncKeySchedule& (0+255),b
 34675  003AFA  EE20 F00D          	lfsr	2,13
 34676  003AFE  5160               	movf	EncKeySchedule@key& (0+255),w,b
 34677  003B00  26D9               	addwf	fsr2l,f,c
 34678  003B02  5161               	movf	(EncKeySchedule@key+1)& (0+255),w,b
 34679  003B04  22DA               	addwfc	fsr2h,f,c
 34680  003B06  5162               	movf	??_EncKeySchedule& (0+255),w,b
 34681  003B08  1ADF               	xorwf	indf2,f,c
 34682                           
 34683                           ; BSR set to: 0
 34684                           ;AES.c: 363: key[14]^=key[10];
 34685  003B0A  EE20 F00A          	lfsr	2,10
 34686  003B0E  5160               	movf	EncKeySchedule@key& (0+255),w,b
 34687  003B10  26D9               	addwf	fsr2l,f,c
 34688  003B12  5161               	movf	(EncKeySchedule@key+1)& (0+255),w,b
 34689  003B14  22DA               	addwfc	fsr2h,f,c
 34690  003B16  50DF               	movf	indf2,w,c
 34691  003B18  6F62               	movwf	??_EncKeySchedule& (0+255),b
 34692  003B1A  EE20 F00E          	lfsr	2,14
 34693  003B1E  5160               	movf	EncKeySchedule@key& (0+255),w,b
 34694  003B20  26D9               	addwf	fsr2l,f,c
 34695  003B22  5161               	movf	(EncKeySchedule@key+1)& (0+255),w,b
 34696  003B24  22DA               	addwfc	fsr2h,f,c
 34697  003B26  5162               	movf	??_EncKeySchedule& (0+255),w,b
 34698  003B28  1ADF               	xorwf	indf2,f,c
 34699                           
 34700                           ; BSR set to: 0
 34701                           ;AES.c: 364: key[15]^=key[11];
 34702  003B2A  EE20 F00B          	lfsr	2,11
 34703  003B2E  5160               	movf	EncKeySchedule@key& (0+255),w,b
 34704  003B30  26D9               	addwf	fsr2l,f,c
 34705  003B32  5161               	movf	(EncKeySchedule@key+1)& (0+255),w,b
 34706  003B34  22DA               	addwfc	fsr2h,f,c
 34707  003B36  50DF               	movf	indf2,w,c
 34708  003B38  6F62               	movwf	??_EncKeySchedule& (0+255),b
 34709  003B3A  EE20 F00F          	lfsr	2,15
 34710  003B3E  5160               	movf	EncKeySchedule@key& (0+255),w,b
 34711  003B40  26D9               	addwf	fsr2l,f,c
 34712  003B42  5161               	movf	(EncKeySchedule@key+1)& (0+255),w,b
 34713  003B44  22DA               	addwfc	fsr2h,f,c
 34714  003B46  5162               	movf	??_EncKeySchedule& (0+255),w,b
 34715  003B48  1ADF               	xorwf	indf2,f,c
 34716                           
 34717                           ; BSR set to: 0
 34718  003B4A  0012               	return		;funcret
 34719  003B4C                     __end_of_EncKeySchedule:
 34720                           	opt stack 0
 34721                           tosu	equ	0xFFF
 34722                           tosh	equ	0xFFE
 34723                           tosl	equ	0xFFD
 34724                           pclath	equ	0xFFA
 34725                           tblptru	equ	0xFF8
 34726                           tblptrh	equ	0xFF7
 34727                           tblptrl	equ	0xFF6
 34728                           tablat	equ	0xFF5
 34729                           prodh	equ	0xFF4
 34730                           prodl	equ	0xFF3
 34731                           intcon	equ	0xFF2
 34732                           intcon2	equ	0xFF1
 34733                           intcon3	equ	0xFF0
 34734                           indf0	equ	0xFEF
 34735                           postinc0	equ	0xFEE
 34736                           plusw0	equ	0xFEB
 34737                           fsr0h	equ	0xFEA
 34738                           fsr0l	equ	0xFE9
 34739                           wreg	equ	0xFE8
 34740                           postinc1	equ	0xFE6
 34741                           postdec1	equ	0xFE5
 34742                           plusw1	equ	0xFE3
 34743                           fsr1h	equ	0xFE2
 34744                           fsr1l	equ	0xFE1
 34745                           indf2	equ	0xFDF
 34746                           postinc2	equ	0xFDE
 34747                           postdec2	equ	0xFDD
 34748                           plusw2	equ	0xFDB
 34749                           fsr2h	equ	0xFDA
 34750                           fsr2l	equ	0xFD9
 34751                           status	equ	0xFD8
 34752                           
 34753 ;; *************** function _LORAWAN_Init *****************
 34754 ;; Defined at:
 34755 ;;		line 123 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 34756 ;; Parameters:    Size  Location     Type
 34757 ;;  RxPayload       2   82[BANK0 ] PTR FTN(PTR unsigned cha
 34758 ;;		 -> RxData(1), 
 34759 ;;  RxJoinRespon    2   84[BANK0 ] PTR FTN(unsigned char ,)
 34760 ;;		 -> RxJoinResponse(1), 
 34761 ;; Auto vars:     Size  Location     Type
 34762 ;;		None
 34763 ;; Return value:  Size  Location     Type
 34764 ;;                  1    wreg      void 
 34765 ;; Registers used:
 34766 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 34767 ;; Tracked objects:
 34768 ;;		On entry : 0/0
 34769 ;;		On exit  : 0/0
 34770 ;;		Unchanged: 0/0
 34771 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 34772 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34773 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34774 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34775 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34776 ;;Total ram usage:        4 bytes
 34777 ;; Hardware stack levels used:    1
 34778 ;; Hardware stack levels required when called:   13
 34779 ;; This function calls:
 34780 ;;		_CreateAllSoftwareTimers
 34781 ;;		_LORAWAN_Reset
 34782 ;;		_RADIO_Init
 34783 ;;		_RADIO_ReadRandom
 34784 ;;		_SetCallbackSoftwareTimers
 34785 ;;		_StopAllSoftwareTimers
 34786 ;;		_srand
 34787 ;; This function is called by:
 34788 ;;		_main
 34789 ;; This function uses a non-reentrant model
 34790 ;;
 34791                           
 34792                           	psect	text159
 34793  0081F8                     __ptext159:
 34794                           	opt stack 0
 34795  0081F8                     _LORAWAN_Init:
 34796                           	opt stack 17
 34797                           
 34798                           ;lorawan_eu.c: 126: if (loRa.macInitialized == 0)
 34799                           
 34800                           ; BSR set to: 0
 34801                           ;incstack = 0
 34802  0081F8  0102               	movlb	2	; () banked
 34803  0081FA  51F6               	movf	(_loRa+240)& (0+255),w,b
 34804  0081FC  A4D8               	btfss	status,2,c
 34805  0081FE  D008               	goto	l1806
 34806                           
 34807                           ; BSR set to: 2
 34808                           ;lorawan_eu.c: 127: {
 34809                           ;lorawan_eu.c: 128: CreateAllSoftwareTimers ();
 34810  008200  EC9C  F043         	call	_CreateAllSoftwareTimers	;wreg free
 34811                           
 34812                           ;lorawan_eu.c: 129: SetCallbackSoftwareTimers ();
 34813  008204  EC21  F036         	call	_SetCallbackSoftwareTimers	;wreg free
 34814                           
 34815                           ;lorawan_eu.c: 130: loRa.macInitialized = 1;
 34816  008208  0E01               	movlw	1
 34817  00820A  0102               	movlb	2	; () banked
 34818  00820C  6FF6               	movwf	(_loRa+240)& (0+255),b
 34819                           
 34820                           ;lorawan_eu.c: 131: }
 34821  00820E  D002               	goto	l1807
 34822  008210                     l1806:
 34823                           
 34824                           ; BSR set to: 2
 34825                           ;lorawan_eu.c: 132: else
 34826                           ;lorawan_eu.c: 133: {
 34827                           ;lorawan_eu.c: 134: StopAllSoftwareTimers ();
 34828                           
 34829                           ; BSR set to: 2
 34830  008210  EC73  F043         	call	_StopAllSoftwareTimers	;wreg free
 34831  008214                     l1807:
 34832                           
 34833                           ;lorawan_eu.c: 135: }
 34834                           ;lorawan_eu.c: 137: rxPayload.RxAppData = RxPayload;
 34835  008214  C0B2  F10C         	movff	LORAWAN_Init@RxPayload,_rxPayload
 34836  008218  C0B3  F10D         	movff	LORAWAN_Init@RxPayload+1,_rxPayload+1
 34837                           
 34838                           ;lorawan_eu.c: 138: rxPayload.RxJoinResponse = RxJoinResponse;
 34839  00821C  C0B4  F10E         	movff	LORAWAN_Init@RxJoinResponse,_rxPayload+2
 34840  008220  C0B5  F10F         	movff	LORAWAN_Init@RxJoinResponse+1,_rxPayload+3
 34841                           
 34842                           ;lorawan_eu.c: 140: RADIO_Init(&radioBuffer[16], (868100000));
 34843  008224  0E90               	movlw	low (_radioBuffer+16)
 34844  008226  0100               	movlb	0	; () banked
 34845  008228  6F79               	movwf	RADIO_Init@radioBuffer& (0+255),b
 34846  00822A  0E05               	movlw	high (_radioBuffer+16)
 34847  00822C  6F7A               	movwf	(RADIO_Init@radioBuffer+1)& (0+255),b
 34848  00822E  0EA0               	movlw	160
 34849  008230  6F7B               	movwf	RADIO_Init@frequency& (0+255),b
 34850  008232  0E27               	movlw	39
 34851  008234  6F7C               	movwf	(RADIO_Init@frequency+1)& (0+255),b
 34852  008236  0EBE               	movlw	190
 34853  008238  6F7D               	movwf	(RADIO_Init@frequency+2)& (0+255),b
 34854  00823A  0E33               	movlw	51
 34855  00823C  6F7E               	movwf	(RADIO_Init@frequency+3)& (0+255),b
 34856  00823E  EC2D  F025         	call	_RADIO_Init	;wreg free
 34857                           
 34858                           ;lorawan_eu.c: 142: srand (RADIO_ReadRandom ());
 34859  008242  EC3A  F03A         	call	_RADIO_ReadRandom	;wreg free
 34860  008246  C06C  F072         	movff	?_RADIO_ReadRandom,srand@x
 34861  00824A  C06D  F073         	movff	?_RADIO_ReadRandom+1,srand@x+1
 34862  00824E  EC31  F04A         	call	_srand	;wreg free
 34863                           
 34864                           ;lorawan_eu.c: 144: LORAWAN_Reset (ISM_EU868);
 34865  008252  0E00               	movlw	0
 34866  008254  EC46  F024         	call	_LORAWAN_Reset
 34867  008258  0012               	return		;funcret
 34868  00825A                     __end_of_LORAWAN_Init:
 34869                           	opt stack 0
 34870                           tosu	equ	0xFFF
 34871                           tosh	equ	0xFFE
 34872                           tosl	equ	0xFFD
 34873                           pclath	equ	0xFFA
 34874                           tblptru	equ	0xFF8
 34875                           tblptrh	equ	0xFF7
 34876                           tblptrl	equ	0xFF6
 34877                           tablat	equ	0xFF5
 34878                           prodh	equ	0xFF4
 34879                           prodl	equ	0xFF3
 34880                           intcon	equ	0xFF2
 34881                           intcon2	equ	0xFF1
 34882                           intcon3	equ	0xFF0
 34883                           indf0	equ	0xFEF
 34884                           postinc0	equ	0xFEE
 34885                           plusw0	equ	0xFEB
 34886                           fsr0h	equ	0xFEA
 34887                           fsr0l	equ	0xFE9
 34888                           wreg	equ	0xFE8
 34889                           postinc1	equ	0xFE6
 34890                           postdec1	equ	0xFE5
 34891                           plusw1	equ	0xFE3
 34892                           fsr1h	equ	0xFE2
 34893                           fsr1l	equ	0xFE1
 34894                           indf2	equ	0xFDF
 34895                           postinc2	equ	0xFDE
 34896                           postdec2	equ	0xFDD
 34897                           plusw2	equ	0xFDB
 34898                           fsr2h	equ	0xFDA
 34899                           fsr2l	equ	0xFD9
 34900                           status	equ	0xFD8
 34901                           
 34902 ;; *************** function _srand *****************
 34903 ;; Defined at:
 34904 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\rand.c"
 34905 ;; Parameters:    Size  Location     Type
 34906 ;;  x               2   18[BANK0 ] unsigned int 
 34907 ;; Auto vars:     Size  Location     Type
 34908 ;;		None
 34909 ;; Return value:  Size  Location     Type
 34910 ;;                  1    wreg      void 
 34911 ;; Registers used:
 34912 ;;		status,2
 34913 ;; Tracked objects:
 34914 ;;		On entry : 0/0
 34915 ;;		On exit  : 0/0
 34916 ;;		Unchanged: 0/0
 34917 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 34918 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34919 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34920 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34921 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34922 ;;Total ram usage:        2 bytes
 34923 ;; Hardware stack levels used:    1
 34924 ;; Hardware stack levels required when called:    7
 34925 ;; This function calls:
 34926 ;;		Nothing
 34927 ;; This function is called by:
 34928 ;;		_LORAWAN_Init
 34929 ;; This function uses a non-reentrant model
 34930 ;;
 34931                           
 34932                           	psect	text160
 34933  009462                     __ptext160:
 34934                           	opt stack 0
 34935  009462                     _srand:
 34936                           	opt stack 22
 34937                           
 34938                           ;incstack = 0
 34939  009462  C072  F2FB         	movff	srand@x,_randx
 34940  009466  C073  F2FC         	movff	srand@x+1,_randx+1
 34941  00946A  0102               	movlb	2	; () banked
 34942  00946C  6BFD               	clrf	(_randx+2)& (0+255),b
 34943  00946E  6BFE               	clrf	(_randx+3)& (0+255),b
 34944                           
 34945                           ; BSR set to: 2
 34946  009470  0012               	return		;funcret
 34947  009472                     __end_of_srand:
 34948                           	opt stack 0
 34949                           tosu	equ	0xFFF
 34950                           tosh	equ	0xFFE
 34951                           tosl	equ	0xFFD
 34952                           pclath	equ	0xFFA
 34953                           tblptru	equ	0xFF8
 34954                           tblptrh	equ	0xFF7
 34955                           tblptrl	equ	0xFF6
 34956                           tablat	equ	0xFF5
 34957                           prodh	equ	0xFF4
 34958                           prodl	equ	0xFF3
 34959                           intcon	equ	0xFF2
 34960                           intcon2	equ	0xFF1
 34961                           intcon3	equ	0xFF0
 34962                           indf0	equ	0xFEF
 34963                           postinc0	equ	0xFEE
 34964                           plusw0	equ	0xFEB
 34965                           fsr0h	equ	0xFEA
 34966                           fsr0l	equ	0xFE9
 34967                           wreg	equ	0xFE8
 34968                           postinc1	equ	0xFE6
 34969                           postdec1	equ	0xFE5
 34970                           plusw1	equ	0xFE3
 34971                           fsr1h	equ	0xFE2
 34972                           fsr1l	equ	0xFE1
 34973                           indf2	equ	0xFDF
 34974                           postinc2	equ	0xFDE
 34975                           postdec2	equ	0xFDD
 34976                           plusw2	equ	0xFDB
 34977                           fsr2h	equ	0xFDA
 34978                           fsr2l	equ	0xFD9
 34979                           status	equ	0xFD8
 34980                           
 34981 ;; *************** function _SetCallbackSoftwareTimers *****************
 34982 ;; Defined at:
 34983 ;;		line 951 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 34984 ;; Parameters:    Size  Location     Type
 34985 ;;		None
 34986 ;; Auto vars:     Size  Location     Type
 34987 ;;		None
 34988 ;; Return value:  Size  Location     Type
 34989 ;;                  1    wreg      void 
 34990 ;; Registers used:
 34991 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 34992 ;; Tracked objects:
 34993 ;;		On entry : 0/0
 34994 ;;		On exit  : 0/0
 34995 ;;		Unchanged: 0/0
 34996 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 34997 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34998 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34999 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35000 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35001 ;;Total ram usage:        0 bytes
 35002 ;; Hardware stack levels used:    1
 35003 ;; Hardware stack levels required when called:    8
 35004 ;; This function calls:
 35005 ;;		_SwTimerSetCallback
 35006 ;; This function is called by:
 35007 ;;		_LORAWAN_Init
 35008 ;; This function uses a non-reentrant model
 35009 ;;
 35010                           
 35011                           	psect	text161
 35012  006C42                     __ptext161:
 35013                           	opt stack 0
 35014  006C42                     _SetCallbackSoftwareTimers:
 35015                           	opt stack 21
 35016                           
 35017                           ;lorawan_eu.c: 953: SwTimerSetCallback(loRa.joinAccept1TimerId, LORAWAN_ReceiveWindow1Ca
      +                          llback, 0);
 35018                           
 35019                           ; BSR set to: 2
 35020                           ;incstack = 0
 35021  006C42  0E62               	movlw	low _LORAWAN_ReceiveWindow1Callback
 35022  006C44  0100               	movlb	0	; () banked
 35023  006C46  6F60               	movwf	SwTimerSetCallback@callback& (0+255),b
 35024  006C48  0E70               	movlw	high _LORAWAN_ReceiveWindow1Callback
 35025  006C4A  6F61               	movwf	(SwTimerSetCallback@callback+1)& (0+255),b
 35026  006C4C  0E00               	movlw	0
 35027  006C4E  6F62               	movwf	SwTimerSetCallback@callbackParameter& (0+255),b
 35028  006C50  0102               	movlb	2	; () banked
 35029  006C52  51E8               	movf	(_loRa+226)& (0+255),w,b
 35030  006C54  EC05  F045         	call	_SwTimerSetCallback
 35031                           
 35032                           ;lorawan_eu.c: 954: SwTimerSetCallback(loRa.joinAccept2TimerId, LORAWAN_ReceiveWindow2Ca
      +                          llback, 0);
 35033  006C58  0E20               	movlw	low _LORAWAN_ReceiveWindow2Callback
 35034  006C5A  0100               	movlb	0	; () banked
 35035  006C5C  6F60               	movwf	SwTimerSetCallback@callback& (0+255),b
 35036  006C5E  0E6D               	movlw	high _LORAWAN_ReceiveWindow2Callback
 35037  006C60  6F61               	movwf	(SwTimerSetCallback@callback+1)& (0+255),b
 35038  006C62  0E00               	movlw	0
 35039  006C64  6F62               	movwf	SwTimerSetCallback@callbackParameter& (0+255),b
 35040  006C66  0102               	movlb	2	; () banked
 35041  006C68  51E9               	movf	(_loRa+227)& (0+255),w,b
 35042  006C6A  EC05  F045         	call	_SwTimerSetCallback
 35043                           
 35044                           ;lorawan_eu.c: 955: SwTimerSetCallback(loRa.linkCheckTimerId, LORAWAN_LinkCheckCallback,
      +                           0);
 35045  006C6E  0E6E               	movlw	low _LORAWAN_LinkCheckCallback
 35046  006C70  0100               	movlb	0	; () banked
 35047  006C72  6F60               	movwf	SwTimerSetCallback@callback& (0+255),b
 35048  006C74  0E52               	movlw	high _LORAWAN_LinkCheckCallback
 35049  006C76  6F61               	movwf	(SwTimerSetCallback@callback+1)& (0+255),b
 35050  006C78  0E00               	movlw	0
 35051  006C7A  6F62               	movwf	SwTimerSetCallback@callbackParameter& (0+255),b
 35052  006C7C  0102               	movlb	2	; () banked
 35053  006C7E  51ED               	movf	(_loRa+231)& (0+255),w,b
 35054  006C80  EC05  F045         	call	_SwTimerSetCallback
 35055                           
 35056                           ;lorawan_eu.c: 956: SwTimerSetCallback(loRa.receiveWindow1TimerId, LORAWAN_ReceiveWindow
      +                          1Callback, 0);
 35057  006C84  0E62               	movlw	low _LORAWAN_ReceiveWindow1Callback
 35058  006C86  0100               	movlb	0	; () banked
 35059  006C88  6F60               	movwf	SwTimerSetCallback@callback& (0+255),b
 35060  006C8A  0E70               	movlw	high _LORAWAN_ReceiveWindow1Callback
 35061  006C8C  6F61               	movwf	(SwTimerSetCallback@callback+1)& (0+255),b
 35062  006C8E  0E00               	movlw	0
 35063  006C90  6F62               	movwf	SwTimerSetCallback@callbackParameter& (0+255),b
 35064  006C92  0102               	movlb	2	; () banked
 35065  006C94  51EA               	movf	(_loRa+228)& (0+255),w,b
 35066  006C96  EC05  F045         	call	_SwTimerSetCallback
 35067                           
 35068                           ;lorawan_eu.c: 957: SwTimerSetCallback(loRa.receiveWindow2TimerId, LORAWAN_ReceiveWindow
      +                          2Callback, 0);
 35069  006C9A  0E20               	movlw	low _LORAWAN_ReceiveWindow2Callback
 35070  006C9C  0100               	movlb	0	; () banked
 35071  006C9E  6F60               	movwf	SwTimerSetCallback@callback& (0+255),b
 35072  006CA0  0E6D               	movlw	high _LORAWAN_ReceiveWindow2Callback
 35073  006CA2  6F61               	movwf	(SwTimerSetCallback@callback+1)& (0+255),b
 35074  006CA4  0E00               	movlw	0
 35075  006CA6  6F62               	movwf	SwTimerSetCallback@callbackParameter& (0+255),b
 35076  006CA8  0102               	movlb	2	; () banked
 35077  006CAA  51EB               	movf	(_loRa+229)& (0+255),w,b
 35078  006CAC  EC05  F045         	call	_SwTimerSetCallback
 35079                           
 35080                           ;lorawan_eu.c: 958: SwTimerSetCallback(loRa.ackTimeoutTimerId, AckRetransmissionCallback
      +                          , 0);
 35081  006CB0  0EC4               	movlw	low _AckRetransmissionCallback
 35082  006CB2  0100               	movlb	0	; () banked
 35083  006CB4  6F60               	movwf	SwTimerSetCallback@callback& (0+255),b
 35084  006CB6  0E60               	movlw	high _AckRetransmissionCallback
 35085  006CB8  6F61               	movwf	(SwTimerSetCallback@callback+1)& (0+255),b
 35086  006CBA  0E00               	movlw	0
 35087  006CBC  6F62               	movwf	SwTimerSetCallback@callbackParameter& (0+255),b
 35088  006CBE  0102               	movlb	2	; () banked
 35089  006CC0  51EE               	movf	(_loRa+232)& (0+255),w,b
 35090  006CC2  EC05  F045         	call	_SwTimerSetCallback
 35091                           
 35092                           ;lorawan_eu.c: 959: SwTimerSetCallback(loRa.automaticReplyTimerId, AutomaticReplyCallbac
      +                          k, 0);
 35093  006CC6  0E84               	movlw	low _AutomaticReplyCallback
 35094  006CC8  0100               	movlb	0	; () banked
 35095  006CCA  6F60               	movwf	SwTimerSetCallback@callback& (0+255),b
 35096  006CCC  0E90               	movlw	high _AutomaticReplyCallback
 35097  006CCE  6F61               	movwf	(SwTimerSetCallback@callback+1)& (0+255),b
 35098  006CD0  0E00               	movlw	0
 35099  006CD2  6F62               	movwf	SwTimerSetCallback@callbackParameter& (0+255),b
 35100  006CD4  0102               	movlb	2	; () banked
 35101  006CD6  51EC               	movf	(_loRa+230)& (0+255),w,b
 35102  006CD8  EC05  F045         	call	_SwTimerSetCallback
 35103                           
 35104                           ;lorawan_eu.c: 960: SwTimerSetCallback(loRa.unconfirmedRetransmisionTimerId, Unconfirmed
      +                          TransmissionCallback, 0);
 35105  006CDC  0E96               	movlw	low _UnconfirmedTransmissionCallback
 35106  006CDE  0100               	movlb	0	; () banked
 35107  006CE0  6F60               	movwf	SwTimerSetCallback@callback& (0+255),b
 35108  006CE2  0E7C               	movlw	high _UnconfirmedTransmissionCallback
 35109  006CE4  6F61               	movwf	(SwTimerSetCallback@callback+1)& (0+255),b
 35110  006CE6  0E00               	movlw	0
 35111  006CE8  6F62               	movwf	SwTimerSetCallback@callbackParameter& (0+255),b
 35112  006CEA  0102               	movlb	2	; () banked
 35113  006CEC  51F0               	movf	(_loRa+234)& (0+255),w,b
 35114  006CEE  EC05  F045         	call	_SwTimerSetCallback
 35115                           
 35116                           ;lorawan_eu.c: 961: SwTimerSetCallback(loRa.abpJoinTimerId, UpdateJoinSuccessState, 0);
 35117  006CF2  0E08               	movlw	low _UpdateJoinSuccessState
 35118  006CF4  0100               	movlb	0	; () banked
 35119  006CF6  6F60               	movwf	SwTimerSetCallback@callback& (0+255),b
 35120  006CF8  0E5C               	movlw	high _UpdateJoinSuccessState
 35121  006CFA  6F61               	movwf	(SwTimerSetCallback@callback+1)& (0+255),b
 35122  006CFC  0E00               	movlw	0
 35123  006CFE  6F62               	movwf	SwTimerSetCallback@callbackParameter& (0+255),b
 35124  006D00  0102               	movlb	2	; () banked
 35125  006D02  51F9               	movf	(_loRa+243)& (0+255),w,b
 35126  006D04  EC05  F045         	call	_SwTimerSetCallback
 35127                           
 35128                           ;lorawan_eu.c: 962: SwTimerSetCallback (loRa.dutyCycleTimerId, DutyCycleCallback, 0);
 35129  006D08  0EE4               	movlw	low _DutyCycleCallback
 35130  006D0A  0100               	movlb	0	; () banked
 35131  006D0C  6F60               	movwf	SwTimerSetCallback@callback& (0+255),b
 35132  006D0E  0E2F               	movlw	high _DutyCycleCallback
 35133  006D10  6F61               	movwf	(SwTimerSetCallback@callback+1)& (0+255),b
 35134  006D12  0E00               	movlw	0
 35135  006D14  6F62               	movwf	SwTimerSetCallback@callbackParameter& (0+255),b
 35136  006D16  0102               	movlb	2	; () banked
 35137  006D18  51EF               	movf	(_loRa+233)& (0+255),w,b
 35138  006D1A  EC05  F045         	call	_SwTimerSetCallback
 35139  006D1E  0012               	return		;funcret
 35140  006D20                     __end_of_SetCallbackSoftwareTimers:
 35141                           	opt stack 0
 35142                           tosu	equ	0xFFF
 35143                           tosh	equ	0xFFE
 35144                           tosl	equ	0xFFD
 35145                           pclath	equ	0xFFA
 35146                           tblptru	equ	0xFF8
 35147                           tblptrh	equ	0xFF7
 35148                           tblptrl	equ	0xFF6
 35149                           tablat	equ	0xFF5
 35150                           prodh	equ	0xFF4
 35151                           prodl	equ	0xFF3
 35152                           intcon	equ	0xFF2
 35153                           intcon2	equ	0xFF1
 35154                           intcon3	equ	0xFF0
 35155                           indf0	equ	0xFEF
 35156                           postinc0	equ	0xFEE
 35157                           plusw0	equ	0xFEB
 35158                           fsr0h	equ	0xFEA
 35159                           fsr0l	equ	0xFE9
 35160                           wreg	equ	0xFE8
 35161                           postinc1	equ	0xFE6
 35162                           postdec1	equ	0xFE5
 35163                           plusw1	equ	0xFE3
 35164                           fsr1h	equ	0xFE2
 35165                           fsr1l	equ	0xFE1
 35166                           indf2	equ	0xFDF
 35167                           postinc2	equ	0xFDE
 35168                           postdec2	equ	0xFDD
 35169                           plusw2	equ	0xFDB
 35170                           fsr2h	equ	0xFDA
 35171                           fsr2l	equ	0xFD9
 35172                           status	equ	0xFD8
 35173                           
 35174 ;; *************** function _RADIO_ReadRandom *****************
 35175 ;; Defined at:
 35176 ;;		line 1367 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 35177 ;; Parameters:    Size  Location     Type
 35178 ;;		None
 35179 ;; Auto vars:     Size  Location     Type
 35180 ;;  retVal          2   15[BANK0 ] unsigned int 
 35181 ;;  i               1   17[BANK0 ] unsigned char 
 35182 ;; Return value:  Size  Location     Type
 35183 ;;                  2   12[BANK0 ] unsigned int 
 35184 ;; Registers used:
 35185 ;;		wreg, status,2, status,0, cstack
 35186 ;; Tracked objects:
 35187 ;;		On entry : 0/0
 35188 ;;		On exit  : 0/0
 35189 ;;		Unchanged: 0/0
 35190 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 35191 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35192 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35193 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35194 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35195 ;;Total ram usage:        6 bytes
 35196 ;; Hardware stack levels used:    1
 35197 ;; Hardware stack levels required when called:   11
 35198 ;; This function calls:
 35199 ;;		_RADIO_RegisterRead
 35200 ;;		_RADIO_RegisterWrite
 35201 ;;		_RADIO_WriteMode
 35202 ;;		_SystemBlockingWaitMs
 35203 ;; This function is called by:
 35204 ;;		_LORAWAN_Init
 35205 ;; This function uses a non-reentrant model
 35206 ;;
 35207                           
 35208                           	psect	text162
 35209  007474                     __ptext162:
 35210                           	opt stack 0
 35211  007474                     _RADIO_ReadRandom:
 35212                           	opt stack 18
 35213                           
 35214                           ;radio_driver_SX1276.c: 1369: uint8_t i;
 35215                           ;radio_driver_SX1276.c: 1370: uint16_t retVal;
 35216                           ;radio_driver_SX1276.c: 1371: retVal = 0;
 35217                           
 35218                           ;incstack = 0
 35219  007474  0E00               	movlw	0
 35220  007476  0100               	movlb	0	; () banked
 35221  007478  6F70               	movwf	(RADIO_ReadRandom@retVal+1)& (0+255),b
 35222  00747A  0E00               	movlw	0
 35223  00747C  6F6F               	movwf	RADIO_ReadRandom@retVal& (0+255),b
 35224                           
 35225                           ; BSR set to: 0
 35226                           ;radio_driver_SX1276.c: 1373: RADIO_WriteMode(MODE_SLEEP, MODULATION_LORA, 1);
 35227  00747E  0E01               	movlw	1
 35228  007480  6F65               	movwf	RADIO_WriteMode@newModulation& (0+255),b
 35229  007482  0E01               	movlw	1
 35230  007484  6F66               	movwf	RADIO_WriteMode@blocking& (0+255),b
 35231  007486  0E00               	movlw	0
 35232  007488  ECF4  F031         	call	_RADIO_WriteMode
 35233                           
 35234                           ;radio_driver_SX1276.c: 1374: RADIO_RegisterWrite(0x11, 0xFF);
 35235  00748C  0EFF               	movlw	255
 35236  00748E  0100               	movlb	0	; () banked
 35237  007490  6F62               	movwf	RADIO_RegisterWrite@value& (0+255),b
 35238  007492  0E11               	movlw	17
 35239  007494  ECDE  F048         	call	_RADIO_RegisterWrite
 35240                           
 35241                           ;radio_driver_SX1276.c: 1375: RADIO_WriteMode(MODE_RXCONT, MODULATION_LORA, 1);
 35242  007498  0E01               	movlw	1
 35243  00749A  0100               	movlb	0	; () banked
 35244  00749C  6F65               	movwf	RADIO_WriteMode@newModulation& (0+255),b
 35245  00749E  0E01               	movlw	1
 35246  0074A0  6F66               	movwf	RADIO_WriteMode@blocking& (0+255),b
 35247  0074A2  0E05               	movlw	5
 35248  0074A4  ECF4  F031         	call	_RADIO_WriteMode
 35249                           
 35250                           ;radio_driver_SX1276.c: 1376: for (i = 0; i < 16; i++)
 35251  0074A8  0E00               	movlw	0
 35252  0074AA  0100               	movlb	0	; () banked
 35253  0074AC  6F71               	movwf	RADIO_ReadRandom@i& (0+255),b
 35254  0074AE                     l12399:
 35255                           
 35256                           ; BSR set to: 0
 35257  0074AE  0E0F               	movlw	15
 35258  0074B0  6571               	cpfsgt	RADIO_ReadRandom@i& (0+255),b
 35259  0074B2  D001               	goto	l446
 35260  0074B4  D019               	goto	u13600
 35261  0074B6                     l446:
 35262                           
 35263                           ; BSR set to: 0
 35264                           ;radio_driver_SX1276.c: 1377: {
 35265                           ;radio_driver_SX1276.c: 1378: SystemBlockingWaitMs(1);
 35266                           
 35267                           ; BSR set to: 0
 35268  0074B6  0E01               	movlw	1
 35269  0074B8  6F60               	movwf	SystemBlockingWaitMs@ms& (0+255),b
 35270  0074BA  0E00               	movlw	0
 35271  0074BC  6F61               	movwf	(SystemBlockingWaitMs@ms+1)& (0+255),b
 35272  0074BE  0E00               	movlw	0
 35273  0074C0  6F62               	movwf	(SystemBlockingWaitMs@ms+2)& (0+255),b
 35274  0074C2  0E00               	movlw	0
 35275  0074C4  6F63               	movwf	(SystemBlockingWaitMs@ms+3)& (0+255),b
 35276  0074C6  ECBE  F046         	call	_SystemBlockingWaitMs	;wreg free
 35277                           
 35278                           ;radio_driver_SX1276.c: 1379: retVal <<= (1);
 35279  0074CA  0100               	movlb	0	; () banked
 35280  0074CC  90D8               	bcf	status,0,c
 35281  0074CE  376F               	rlcf	RADIO_ReadRandom@retVal& (0+255),f,b
 35282  0074D0  3770               	rlcf	(RADIO_ReadRandom@retVal+1)& (0+255),f,b
 35283                           
 35284                           ; BSR set to: 0
 35285                           ;radio_driver_SX1276.c: 1380: retVal |= RADIO_RegisterRead(0x2C) & 0x01;
 35286  0074D2  0E2C               	movlw	44
 35287  0074D4  EC07  F048         	call	_RADIO_RegisterRead
 35288  0074D8  0100               	movlb	0	; () banked
 35289  0074DA  6F6E               	movwf	??_RADIO_ReadRandom& (0+255),b
 35290  0074DC  0E01               	movlw	1
 35291  0074DE  176E               	andwf	??_RADIO_ReadRandom& (0+255),f,b
 35292  0074E0  516E               	movf	??_RADIO_ReadRandom& (0+255),w,b
 35293  0074E2  136F               	iorwf	RADIO_ReadRandom@retVal& (0+255),f,b
 35294  0074E4  2B71               	incf	RADIO_ReadRandom@i& (0+255),f,b
 35295  0074E6  D7E3               	goto	l12399
 35296  0074E8                     u13600:
 35297                           
 35298                           ; BSR set to: 0
 35299                           ;radio_driver_SX1276.c: 1381: }
 35300                           ;radio_driver_SX1276.c: 1384: RADIO_WriteMode(MODE_SLEEP, MODULATION_LORA, 1);
 35301                           
 35302                           ; BSR set to: 0
 35303  0074E8  0E01               	movlw	1
 35304  0074EA  6F65               	movwf	RADIO_WriteMode@newModulation& (0+255),b
 35305  0074EC  0E01               	movlw	1
 35306  0074EE  6F66               	movwf	RADIO_WriteMode@blocking& (0+255),b
 35307  0074F0  0E00               	movlw	0
 35308  0074F2  ECF4  F031         	call	_RADIO_WriteMode
 35309                           
 35310                           ;radio_driver_SX1276.c: 1386: RADIO_RegisterWrite(0x12, 0xFF);
 35311  0074F6  0EFF               	movlw	255
 35312  0074F8  0100               	movlb	0	; () banked
 35313  0074FA  6F62               	movwf	RADIO_RegisterWrite@value& (0+255),b
 35314  0074FC  0E12               	movlw	18
 35315  0074FE  ECDE  F048         	call	_RADIO_RegisterWrite
 35316                           
 35317                           ;radio_driver_SX1276.c: 1388: RADIO_RegisterWrite(0x11, 0x00);
 35318  007502  0E00               	movlw	0
 35319  007504  0100               	movlb	0	; () banked
 35320  007506  6F62               	movwf	RADIO_RegisterWrite@value& (0+255),b
 35321  007508  0E11               	movlw	17
 35322  00750A  ECDE  F048         	call	_RADIO_RegisterWrite
 35323                           
 35324                           ;radio_driver_SX1276.c: 1389: return retVal;
 35325  00750E  C06F  F06C         	movff	RADIO_ReadRandom@retVal,?_RADIO_ReadRandom
 35326  007512  C070  F06D         	movff	RADIO_ReadRandom@retVal+1,?_RADIO_ReadRandom+1
 35327  007516  0012               	return	
 35328  007518                     __end_of_RADIO_ReadRandom:
 35329                           	opt stack 0
 35330                           tosu	equ	0xFFF
 35331                           tosh	equ	0xFFE
 35332                           tosl	equ	0xFFD
 35333                           pclath	equ	0xFFA
 35334                           tblptru	equ	0xFF8
 35335                           tblptrh	equ	0xFF7
 35336                           tblptrl	equ	0xFF6
 35337                           tablat	equ	0xFF5
 35338                           prodh	equ	0xFF4
 35339                           prodl	equ	0xFF3
 35340                           intcon	equ	0xFF2
 35341                           intcon2	equ	0xFF1
 35342                           intcon3	equ	0xFF0
 35343                           indf0	equ	0xFEF
 35344                           postinc0	equ	0xFEE
 35345                           plusw0	equ	0xFEB
 35346                           fsr0h	equ	0xFEA
 35347                           fsr0l	equ	0xFE9
 35348                           wreg	equ	0xFE8
 35349                           postinc1	equ	0xFE6
 35350                           postdec1	equ	0xFE5
 35351                           plusw1	equ	0xFE3
 35352                           fsr1h	equ	0xFE2
 35353                           fsr1l	equ	0xFE1
 35354                           indf2	equ	0xFDF
 35355                           postinc2	equ	0xFDE
 35356                           postdec2	equ	0xFDD
 35357                           plusw2	equ	0xFDB
 35358                           fsr2h	equ	0xFDA
 35359                           fsr2l	equ	0xFD9
 35360                           status	equ	0xFD8
 35361                           
 35362 ;; *************** function _LORAWAN_Reset *****************
 35363 ;; Defined at:
 35364 ;;		line 148 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 35365 ;; Parameters:    Size  Location     Type
 35366 ;;  ismBandNew      1    wreg     enum E7280
 35367 ;; Auto vars:     Size  Location     Type
 35368 ;;  ismBandNew      1   81[BANK0 ] enum E7280
 35369 ;; Return value:  Size  Location     Type
 35370 ;;                  1    wreg      void 
 35371 ;; Registers used:
 35372 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 35373 ;; Tracked objects:
 35374 ;;		On entry : 0/0
 35375 ;;		On exit  : 0/0
 35376 ;;		Unchanged: 0/0
 35377 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 35378 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35379 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35380 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35381 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35382 ;;Total ram usage:        1 bytes
 35383 ;; Hardware stack levels used:    1
 35384 ;; Hardware stack levels required when called:   12
 35385 ;; This function calls:
 35386 ;;		_InitDefault433Channels
 35387 ;;		_InitDefault868Channels
 35388 ;;		_LORAWAN_LinkCheckConfigure
 35389 ;;		_RADIO_Init
 35390 ;;		_RADIO_SetLoRaSyncWord
 35391 ;;		_StopAllSoftwareTimers
 35392 ;;		_UpdateMinMaxChDataRate
 35393 ;;		_memset
 35394 ;; This function is called by:
 35395 ;;		_LORAWAN_Init
 35396 ;; This function uses a non-reentrant model
 35397 ;;
 35398                           
 35399                           	psect	text163
 35400  00488C                     __ptext163:
 35401                           	opt stack 0
 35402  00488C                     _LORAWAN_Reset:
 35403                           	opt stack 17
 35404                           
 35405                           ;incstack = 0
 35406                           ;LORAWAN_Reset@ismBandNew stored from wreg
 35407  00488C  0100               	movlb	0	; () banked
 35408  00488E  6FB1               	movwf	LORAWAN_Reset@ismBandNew& (0+255),b
 35409                           
 35410                           ;lorawan_eu.c: 150: if (loRa.macInitialized == 1)
 35411  004890  0102               	movlb	2	; () banked
 35412  004892  05F6               	decf	(_loRa+240)& (0+255),w,b
 35413  004894  B4D8               	btfsc	status,2,c
 35414                           
 35415                           ; BSR set to: 2
 35416                           ;lorawan_eu.c: 151: {
 35417                           ;lorawan_eu.c: 152: StopAllSoftwareTimers ();
 35418  004896  EC73  F043         	call	_StopAllSoftwareTimers	;wreg free
 35419                           
 35420                           ;lorawan_eu.c: 153: }
 35421                           ;lorawan_eu.c: 155: loRa.syncWord = 0x34;
 35422  00489A  0E34               	movlw	52
 35423  00489C  0102               	movlb	2	; () banked
 35424  00489E  6FFA               	movwf	(_loRa+244)& (0+255),b
 35425                           
 35426                           ; BSR set to: 2
 35427                           ;lorawan_eu.c: 156: RADIO_SetLoRaSyncWord(loRa.syncWord);
 35428  0048A0  51FA               	movf	(_loRa+244)& (0+255),w,b
 35429  0048A2  ECB9  F04A         	call	_RADIO_SetLoRaSyncWord
 35430                           
 35431                           ;lorawan_eu.c: 158: loRa.macStatus.value = 0;
 35432  0048A6  0E00               	movlw	0
 35433  0048A8  0102               	movlb	2	; () banked
 35434  0048AA  6F08               	movwf	(_loRa+2)& (0+255),b
 35435  0048AC  0E00               	movlw	0
 35436  0048AE  6F09               	movwf	(_loRa+3)& (0+255),b
 35437  0048B0  0E00               	movlw	0
 35438  0048B2  6F0A               	movwf	(_loRa+4)& (0+255),b
 35439  0048B4  0E00               	movlw	0
 35440  0048B6  6F0B               	movwf	(_loRa+5)& (0+255),b
 35441                           
 35442                           ; BSR set to: 2
 35443                           ;lorawan_eu.c: 159: loRa.linkCheckMargin = 255;
 35444  0048B8  69E3               	setf	(_loRa+221)& (0+255),b
 35445                           
 35446                           ; BSR set to: 2
 35447                           ;lorawan_eu.c: 160: loRa.linkCheckGwCnt = 0;
 35448  0048BA  0E00               	movlw	0
 35449  0048BC  6FE4               	movwf	(_loRa+222)& (0+255),b
 35450                           
 35451                           ; BSR set to: 2
 35452                           ;lorawan_eu.c: 161: loRa.lastTimerValue = 0;
 35453  0048BE  0E00               	movlw	0
 35454  0048C0  6FCE               	movwf	(_loRa+200)& (0+255),b
 35455  0048C2  0E00               	movlw	0
 35456  0048C4  6FCF               	movwf	(_loRa+201)& (0+255),b
 35457  0048C6  0E00               	movlw	0
 35458  0048C8  6FD0               	movwf	(_loRa+202)& (0+255),b
 35459  0048CA  0E00               	movlw	0
 35460  0048CC  6FD1               	movwf	(_loRa+203)& (0+255),b
 35461                           
 35462                           ; BSR set to: 2
 35463                           ;lorawan_eu.c: 162: loRa.lastPacketLength = 0;
 35464  0048CE  0E00               	movlw	0
 35465  0048D0  6FDB               	movwf	(_loRa+213)& (0+255),b
 35466  0048D2  0E00               	movlw	0
 35467  0048D4  6FDA               	movwf	(_loRa+212)& (0+255),b
 35468                           
 35469                           ; BSR set to: 2
 35470                           ;lorawan_eu.c: 163: loRa.fCntDown.value = 0;
 35471  0048D6  0E00               	movlw	0
 35472  0048D8  6F10               	movwf	(_loRa+10)& (0+255),b
 35473  0048DA  0E00               	movlw	0
 35474  0048DC  6F11               	movwf	(_loRa+11)& (0+255),b
 35475  0048DE  0E00               	movlw	0
 35476  0048E0  6F12               	movwf	(_loRa+12)& (0+255),b
 35477  0048E2  0E00               	movlw	0
 35478  0048E4  6F13               	movwf	(_loRa+13)& (0+255),b
 35479                           
 35480                           ; BSR set to: 2
 35481                           ;lorawan_eu.c: 164: loRa.fCntUp.value = 0;
 35482  0048E6  0E00               	movlw	0
 35483  0048E8  6F0C               	movwf	(_loRa+6)& (0+255),b
 35484  0048EA  0E00               	movlw	0
 35485  0048EC  6F0D               	movwf	(_loRa+7)& (0+255),b
 35486  0048EE  0E00               	movlw	0
 35487  0048F0  6F0E               	movwf	(_loRa+8)& (0+255),b
 35488  0048F2  0E00               	movlw	0
 35489  0048F4  6F0F               	movwf	(_loRa+9)& (0+255),b
 35490                           
 35491                           ; BSR set to: 2
 35492                           ;lorawan_eu.c: 165: loRa.devNonce = 0;
 35493  0048F6  0E00               	movlw	0
 35494  0048F8  6FD9               	movwf	(_loRa+211)& (0+255),b
 35495  0048FA  0E00               	movlw	0
 35496  0048FC  6FD8               	movwf	(_loRa+210)& (0+255),b
 35497                           
 35498                           ; BSR set to: 2
 35499                           ;lorawan_eu.c: 166: loRa.prescaler = 1;
 35500  0048FE  0E00               	movlw	0
 35501  004900  6FE2               	movwf	(_loRa+220)& (0+255),b
 35502  004902  0E01               	movlw	1
 35503  004904  6FE1               	movwf	(_loRa+219)& (0+255),b
 35504                           
 35505                           ; BSR set to: 2
 35506                           ;lorawan_eu.c: 167: loRa.adrAckCnt = 0;
 35507  004906  0E00               	movlw	0
 35508  004908  6FD7               	movwf	(_loRa+209)& (0+255),b
 35509  00490A  0E00               	movlw	0
 35510  00490C  6FD6               	movwf	(_loRa+208)& (0+255),b
 35511                           
 35512                           ; BSR set to: 2
 35513                           ;lorawan_eu.c: 168: loRa.counterAdrAckDelay = 0;
 35514  00490E  0E00               	movlw	0
 35515  004910  6FF4               	movwf	(_loRa+238)& (0+255),b
 35516                           
 35517                           ; BSR set to: 2
 35518                           ;lorawan_eu.c: 169: loRa.offset = 0;
 35519  004912  0E00               	movlw	0
 35520  004914  6FF5               	movwf	(_loRa+239)& (0+255),b
 35521                           
 35522                           ; BSR set to: 2
 35523                           ;lorawan_eu.c: 170: loRa.lastTimerValue = 0;
 35524  004916  0E00               	movlw	0
 35525  004918  6FCE               	movwf	(_loRa+200)& (0+255),b
 35526  00491A  0E00               	movlw	0
 35527  00491C  6FCF               	movwf	(_loRa+201)& (0+255),b
 35528  00491E  0E00               	movlw	0
 35529  004920  6FD0               	movwf	(_loRa+202)& (0+255),b
 35530  004922  0E00               	movlw	0
 35531  004924  6FD1               	movwf	(_loRa+203)& (0+255),b
 35532                           
 35533                           ; BSR set to: 2
 35534                           ;lorawan_eu.c: 173: loRa.macStatus.linkCheck = 0;
 35535  004926  9509               	bcf	(_loRa+3)& (0+255),2,b
 35536                           
 35537                           ; BSR set to: 2
 35538                           ;lorawan_eu.c: 176: loRa.macStatus.value = 0;
 35539  004928  0E00               	movlw	0
 35540  00492A  6F08               	movwf	(_loRa+2)& (0+255),b
 35541  00492C  0E00               	movlw	0
 35542  00492E  6F09               	movwf	(_loRa+3)& (0+255),b
 35543  004930  0E00               	movlw	0
 35544  004932  6F0A               	movwf	(_loRa+4)& (0+255),b
 35545  004934  0E00               	movlw	0
 35546  004936  6F0B               	movwf	(_loRa+5)& (0+255),b
 35547                           
 35548                           ; BSR set to: 2
 35549                           ;lorawan_eu.c: 177: loRa.lorawanMacStatus.value = 0;
 35550  004938  0E00               	movlw	0
 35551  00493A  6F07               	movwf	(_loRa+1)& (0+255),b
 35552  00493C  0E00               	movlw	0
 35553  00493E  6F06               	movwf	_loRa& (0+255),b
 35554                           
 35555                           ; BSR set to: 2
 35556                           ;lorawan_eu.c: 179: loRa.maxRepetitionsConfirmedUplink = 7;
 35557  004940  0E07               	movlw	7
 35558  004942  6FDD               	movwf	(_loRa+215)& (0+255),b
 35559                           
 35560                           ; BSR set to: 2
 35561                           ;lorawan_eu.c: 180: loRa.maxRepetitionsUnconfirmedUplink = 0;
 35562  004944  0E00               	movlw	0
 35563  004946  6FDC               	movwf	(_loRa+214)& (0+255),b
 35564                           
 35565                           ; BSR set to: 2
 35566                           ;lorawan_eu.c: 181: loRa.counterRepetitionsConfirmedUplink = 1;
 35567  004948  0E01               	movlw	1
 35568  00494A  6FDF               	movwf	(_loRa+217)& (0+255),b
 35569                           
 35570                           ; BSR set to: 2
 35571                           ;lorawan_eu.c: 182: loRa.counterRepetitionsUnconfirmedUplink = 1;
 35572  00494C  0E01               	movlw	1
 35573  00494E  6FDE               	movwf	(_loRa+216)& (0+255),b
 35574                           
 35575                           ; BSR set to: 2
 35576                           ;lorawan_eu.c: 184: loRa.batteryLevel = (0xFF);
 35577  004950  69E6               	setf	(_loRa+224)& (0+255),b
 35578                           
 35579                           ; BSR set to: 2
 35580                           ;lorawan_eu.c: 186: loRa.ismBand = ismBandNew;
 35581  004952  C0B1  F2AA         	movff	LORAWAN_Reset@ismBandNew,_loRa+164
 35582                           
 35583                           ; BSR set to: 2
 35584                           ;lorawan_eu.c: 188: loRa.deviceClass = CLASS_A;
 35585  004956  0E00               	movlw	0
 35586  004958  6F18               	movwf	(_loRa+18)& (0+255),b
 35587                           
 35588                           ; BSR set to: 2
 35589                           ;lorawan_eu.c: 191: loRa.maxChannels = 16;
 35590  00495A  0E10               	movlw	16
 35591  00495C  6FF3               	movwf	(_loRa+237)& (0+255),b
 35592                           
 35593                           ; BSR set to: 2
 35594                           ;lorawan_eu.c: 192: if(ISM_EU868 == ismBandNew)
 35595  00495E  0100               	movlb	0	; () banked
 35596  004960  51B1               	movf	LORAWAN_Reset@ismBandNew& (0+255),w,b
 35597  004962  A4D8               	btfss	status,2,c
 35598  004964  D01B               	goto	l1812
 35599                           
 35600                           ; BSR set to: 0
 35601                           ;lorawan_eu.c: 193: {
 35602                           ;lorawan_eu.c: 194: RADIO_Init(&radioBuffer[16], (868100000));
 35603  004966  0E90               	movlw	low (_radioBuffer+16)
 35604  004968  6F79               	movwf	RADIO_Init@radioBuffer& (0+255),b
 35605  00496A  0E05               	movlw	high (_radioBuffer+16)
 35606  00496C  6F7A               	movwf	(RADIO_Init@radioBuffer+1)& (0+255),b
 35607  00496E  0EA0               	movlw	160
 35608  004970  6F7B               	movwf	RADIO_Init@frequency& (0+255),b
 35609  004972  0E27               	movlw	39
 35610  004974  6F7C               	movwf	(RADIO_Init@frequency+1)& (0+255),b
 35611  004976  0EBE               	movlw	190
 35612  004978  6F7D               	movwf	(RADIO_Init@frequency+2)& (0+255),b
 35613  00497A  0E33               	movlw	51
 35614  00497C  6F7E               	movwf	(RADIO_Init@frequency+3)& (0+255),b
 35615  00497E  EC2D  F025         	call	_RADIO_Init	;wreg free
 35616                           
 35617                           ;lorawan_eu.c: 196: InitDefault868Channels ();
 35618  004982  ECFA  F03B         	call	_InitDefault868Channels	;wreg free
 35619                           
 35620                           ;lorawan_eu.c: 198: loRa.receiveWindow2Parameters.dataRate = (0);
 35621  004986  0E00               	movlw	0
 35622  004988  0102               	movlb	2	; () banked
 35623  00498A  6F22               	movwf	(_loRa+28)& (0+255),b
 35624                           
 35625                           ; BSR set to: 2
 35626                           ;lorawan_eu.c: 199: loRa.receiveWindow2Parameters.frequency = (869525000);
 35627  00498C  0E08               	movlw	8
 35628  00498E  6F1E               	movwf	(_loRa+24)& (0+255),b
 35629  004990  0EE6               	movlw	230
 35630  004992  6F1F               	movwf	(_loRa+25)& (0+255),b
 35631  004994  0ED3               	movlw	211
 35632  004996  6F20               	movwf	(_loRa+26)& (0+255),b
 35633  004998  0E33               	movlw	51
 35634  00499A  D01B               	goto	L25
 35635  00499C                     l1812:
 35636                           
 35637                           ;lorawan_eu.c: 201: else
 35638                           ;lorawan_eu.c: 202: {
 35639                           ;lorawan_eu.c: 203: RADIO_Init(&radioBuffer[16], (433300000));
 35640                           
 35641                           ; BSR set to: 2
 35642  00499C  0E90               	movlw	low (_radioBuffer+16)
 35643  00499E  0100               	movlb	0	; () banked
 35644  0049A0  6F79               	movwf	RADIO_Init@radioBuffer& (0+255),b
 35645  0049A2  0E05               	movlw	high (_radioBuffer+16)
 35646  0049A4  6F7A               	movwf	(RADIO_Init@radioBuffer+1)& (0+255),b
 35647  0049A6  0E20               	movlw	32
 35648  0049A8  6F7B               	movwf	RADIO_Init@frequency& (0+255),b
 35649  0049AA  0EA2               	movlw	162
 35650  0049AC  6F7C               	movwf	(RADIO_Init@frequency+1)& (0+255),b
 35651  0049AE  0ED3               	movlw	211
 35652  0049B0  6F7D               	movwf	(RADIO_Init@frequency+2)& (0+255),b
 35653  0049B2  0E19               	movlw	25
 35654  0049B4  6F7E               	movwf	(RADIO_Init@frequency+3)& (0+255),b
 35655  0049B6  EC2D  F025         	call	_RADIO_Init	;wreg free
 35656                           
 35657                           ;lorawan_eu.c: 205: InitDefault433Channels ();
 35658  0049BA  EC3F  F03C         	call	_InitDefault433Channels	;wreg free
 35659                           
 35660                           ;lorawan_eu.c: 207: loRa.receiveWindow2Parameters.dataRate = (0);
 35661  0049BE  0E00               	movlw	0
 35662  0049C0  0102               	movlb	2	; () banked
 35663  0049C2  6F22               	movwf	(_loRa+28)& (0+255),b
 35664                           
 35665                           ; BSR set to: 2
 35666                           ;lorawan_eu.c: 208: loRa.receiveWindow2Parameters.frequency = (434665000);
 35667  0049C4  0E28               	movlw	40
 35668  0049C6  6F1E               	movwf	(_loRa+24)& (0+255),b
 35669  0049C8  0E76               	movlw	118
 35670  0049CA  6F1F               	movwf	(_loRa+25)& (0+255),b
 35671  0049CC  0EE8               	movlw	232
 35672  0049CE  6F20               	movwf	(_loRa+26)& (0+255),b
 35673  0049D0  0E19               	movlw	25
 35674  0049D2                     L25:
 35675  0049D2  6F21               	movwf	(_loRa+27)& (0+255),b
 35676                           
 35677                           ; BSR set to: 2
 35678                           ;lorawan_eu.c: 209: }
 35679                           ;lorawan_eu.c: 211: loRa.txPower = 1;
 35680                           
 35681                           ; BSR set to: 2
 35682  0049D4  0E01               	movlw	1
 35683  0049D6  6FE7               	movwf	(_loRa+225)& (0+255),b
 35684                           
 35685                           ; BSR set to: 2
 35686                           ;lorawan_eu.c: 213: loRa.currentDataRate = 0;
 35687  0049D8  0E00               	movlw	0
 35688  0049DA  6FE5               	movwf	(_loRa+223)& (0+255),b
 35689                           
 35690                           ; BSR set to: 2
 35691                           ;lorawan_eu.c: 215: UpdateMinMaxChDataRate ();
 35692  0049DC  EC73  F032         	call	_UpdateMinMaxChDataRate	;wreg free
 35693                           
 35694                           ;lorawan_eu.c: 218: loRa.macKeys.value = 0;
 35695  0049E0  0E00               	movlw	0
 35696  0049E2  0102               	movlb	2	; () banked
 35697  0049E4  6FAC               	movwf	(_loRa+166)& (0+255),b
 35698  0049E6  0E00               	movlw	0
 35699  0049E8  6FAB               	movwf	(_loRa+165)& (0+255),b
 35700                           
 35701                           ; BSR set to: 2
 35702                           ;lorawan_eu.c: 219: memset (&loRa.activationParameters, 0, sizeof(loRa.activationParamet
      +                          ers));
 35703  0049EA  0E23               	movlw	low (_loRa+29)
 35704  0049EC  0100               	movlb	0	; () banked
 35705  0049EE  6F60               	movwf	memset@p1& (0+255),b
 35706  0049F0  0E02               	movlw	high (_loRa+29)
 35707  0049F2  6F61               	movwf	(memset@p1+1)& (0+255),b
 35708  0049F4  0E00               	movlw	0
 35709  0049F6  6F63               	movwf	(memset@c+1)& (0+255),b
 35710  0049F8  0E00               	movlw	0
 35711  0049FA  6F62               	movwf	memset@c& (0+255),b
 35712  0049FC  0E00               	movlw	0
 35713  0049FE  6F65               	movwf	(memset@n+1)& (0+255),b
 35714  004A00  0E69               	movlw	105
 35715  004A02  6F64               	movwf	memset@n& (0+255),b
 35716  004A04  ECD6  F046         	call	_memset	;wreg free
 35717                           
 35718                           ;lorawan_eu.c: 222: loRa.protocolParameters.receiveDelay1 = 1000UL;
 35719  004A08  0E03               	movlw	3
 35720  004A0A  0102               	movlb	2	; () banked
 35721  004A0C  6F9B               	movwf	(_loRa+149)& (0+255),b
 35722  004A0E  0EE8               	movlw	232
 35723  004A10  6F9A               	movwf	(_loRa+148)& (0+255),b
 35724                           
 35725                           ; BSR set to: 2
 35726                           ;lorawan_eu.c: 223: loRa.protocolParameters.receiveDelay2 = 2000UL;
 35727  004A12  0E07               	movlw	7
 35728  004A14  6F9D               	movwf	(_loRa+151)& (0+255),b
 35729  004A16  0ED0               	movlw	208
 35730  004A18  6F9C               	movwf	(_loRa+150)& (0+255),b
 35731                           
 35732                           ; BSR set to: 2
 35733                           ;lorawan_eu.c: 224: loRa.protocolParameters.joinAcceptDelay1 = 5000UL;
 35734  004A1A  0E13               	movlw	19
 35735  004A1C  6F9F               	movwf	(_loRa+153)& (0+255),b
 35736  004A1E  0E88               	movlw	136
 35737  004A20  6F9E               	movwf	(_loRa+152)& (0+255),b
 35738                           
 35739                           ; BSR set to: 2
 35740                           ;lorawan_eu.c: 225: loRa.protocolParameters.joinAcceptDelay2 = 6000UL;
 35741  004A22  0E17               	movlw	23
 35742  004A24  6FA1               	movwf	(_loRa+155)& (0+255),b
 35743  004A26  0E70               	movlw	112
 35744  004A28  6FA0               	movwf	(_loRa+154)& (0+255),b
 35745                           
 35746                           ; BSR set to: 2
 35747                           ;lorawan_eu.c: 226: loRa.protocolParameters.ackTimeout = 2000;
 35748  004A2A  0E07               	movlw	7
 35749  004A2C  6FA7               	movwf	(_loRa+161)& (0+255),b
 35750  004A2E  0ED0               	movlw	208
 35751  004A30  6FA6               	movwf	(_loRa+160)& (0+255),b
 35752                           
 35753                           ; BSR set to: 2
 35754                           ;lorawan_eu.c: 227: loRa.protocolParameters.adrAckDelay = 32;
 35755  004A32  0E20               	movlw	32
 35756  004A34  6FA9               	movwf	(_loRa+163)& (0+255),b
 35757                           
 35758                           ; BSR set to: 2
 35759                           ;lorawan_eu.c: 228: loRa.protocolParameters.adrAckLimit = 64;
 35760  004A36  0E40               	movlw	64
 35761  004A38  6FA8               	movwf	(_loRa+162)& (0+255),b
 35762                           
 35763                           ; BSR set to: 2
 35764                           ;lorawan_eu.c: 229: loRa.protocolParameters.maxFcntGap = 16384;
 35765  004A3A  0E40               	movlw	64
 35766  004A3C  6FA3               	movwf	(_loRa+157)& (0+255),b
 35767  004A3E  0E00               	movlw	0
 35768  004A40  6FA2               	movwf	(_loRa+156)& (0+255),b
 35769                           
 35770                           ; BSR set to: 2
 35771                           ;lorawan_eu.c: 230: loRa.protocolParameters.maxMultiFcntGap = 16384;
 35772  004A42  0E40               	movlw	64
 35773  004A44  6FA5               	movwf	(_loRa+159)& (0+255),b
 35774  004A46  0E00               	movlw	0
 35775  004A48  6FA4               	movwf	(_loRa+158)& (0+255),b
 35776                           
 35777                           ; BSR set to: 2
 35778                           ;lorawan_eu.c: 232: LORAWAN_LinkCheckConfigure (0);
 35779  004A4A  0E00               	movlw	0
 35780  004A4C  0100               	movlb	0	; () banked
 35781  004A4E  6FA7               	movwf	(LORAWAN_LinkCheckConfigure@period+1)& (0+255),b
 35782  004A50  0E00               	movlw	0
 35783  004A52  6FA6               	movwf	LORAWAN_LinkCheckConfigure@period& (0+255),b
 35784  004A54  EC08  F02C         	call	_LORAWAN_LinkCheckConfigure	;wreg free
 35785  004A58  0012               	return		;funcret
 35786  004A5A                     __end_of_LORAWAN_Reset:
 35787                           	opt stack 0
 35788                           tosu	equ	0xFFF
 35789                           tosh	equ	0xFFE
 35790                           tosl	equ	0xFFD
 35791                           pclath	equ	0xFFA
 35792                           tblptru	equ	0xFF8
 35793                           tblptrh	equ	0xFF7
 35794                           tblptrl	equ	0xFF6
 35795                           tablat	equ	0xFF5
 35796                           prodh	equ	0xFF4
 35797                           prodl	equ	0xFF3
 35798                           intcon	equ	0xFF2
 35799                           intcon2	equ	0xFF1
 35800                           intcon3	equ	0xFF0
 35801                           indf0	equ	0xFEF
 35802                           postinc0	equ	0xFEE
 35803                           plusw0	equ	0xFEB
 35804                           fsr0h	equ	0xFEA
 35805                           fsr0l	equ	0xFE9
 35806                           wreg	equ	0xFE8
 35807                           postinc1	equ	0xFE6
 35808                           postdec1	equ	0xFE5
 35809                           plusw1	equ	0xFE3
 35810                           fsr1h	equ	0xFE2
 35811                           fsr1l	equ	0xFE1
 35812                           indf2	equ	0xFDF
 35813                           postinc2	equ	0xFDE
 35814                           postdec2	equ	0xFDD
 35815                           plusw2	equ	0xFDB
 35816                           fsr2h	equ	0xFDA
 35817                           fsr2l	equ	0xFD9
 35818                           status	equ	0xFD8
 35819                           
 35820 ;; *************** function _UpdateMinMaxChDataRate *****************
 35821 ;; Defined at:
 35822 ;;		line 1063 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 35823 ;; Parameters:    Size  Location     Type
 35824 ;;		None
 35825 ;; Auto vars:     Size  Location     Type
 35826 ;;  i               1    1[BANK0 ] unsigned char 
 35827 ;; Return value:  Size  Location     Type
 35828 ;;                  1    wreg      void 
 35829 ;; Registers used:
 35830 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 35831 ;; Tracked objects:
 35832 ;;		On entry : 0/0
 35833 ;;		On exit  : 0/0
 35834 ;;		Unchanged: 0/0
 35835 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 35836 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35837 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35838 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35839 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35840 ;;Total ram usage:        2 bytes
 35841 ;; Hardware stack levels used:    1
 35842 ;; Hardware stack levels required when called:    7
 35843 ;; This function calls:
 35844 ;;		Nothing
 35845 ;; This function is called by:
 35846 ;;		_LORAWAN_Reset
 35847 ;; This function uses a non-reentrant model
 35848 ;;
 35849                           
 35850                           	psect	text164
 35851  0064E6                     __ptext164:
 35852                           	opt stack 0
 35853  0064E6                     _UpdateMinMaxChDataRate:
 35854                           	opt stack 21
 35855                           
 35856                           ;lorawan.c: 1065: uint8_t i;
 35857                           ;lorawan.c: 1068: loRa.minDataRate = 7;
 35858                           
 35859                           ;incstack = 0
 35860  0064E6  0E07               	movlw	7
 35861  0064E8  0102               	movlb	2	; () banked
 35862  0064EA  6FF1               	movwf	(_loRa+235)& (0+255),b
 35863                           
 35864                           ;lorawan.c: 1069: loRa.maxDataRate = 0;
 35865  0064EC  0E00               	movlw	0
 35866  0064EE  6FF2               	movwf	(_loRa+236)& (0+255),b
 35867                           
 35868                           ;lorawan.c: 1071: for (i = 0; i < loRa.maxChannels; i++)
 35869  0064F0  0E00               	movlw	0
 35870  0064F2  0100               	movlb	0	; () banked
 35871  0064F4  6F61               	movwf	UpdateMinMaxChDataRate@i& (0+255),b
 35872  0064F6  D06D               	goto	l1124
 35873  0064F8                     
 35874                           ; BSR set to: 0
 35875                           ;lorawan.c: 1072: {
 35876                           ;lorawan.c: 1073: if ( (Channels[i].dataRange.min < loRa.minDataRate) && (Channels[i].st
      +                          atus == 1) )
 35877                           
 35878                           ; BSR set to: 0
 35879  0064F8  5161               	movf	UpdateMinMaxChDataRate@i& (0+255),w,b
 35880  0064FA  0D0E               	mullw	14
 35881  0064FC  0E05               	movlw	5
 35882  0064FE  26F3               	addwf	prodl,f,c
 35883  006500  0E00               	movlw	0
 35884  006502  22F4               	addwfc	prodh,f,c
 35885  006504  0E00               	movlw	low _Channels
 35886  006506  24F3               	addwf	prodl,w,c
 35887  006508  6ED9               	movwf	fsr2l,c
 35888  00650A  0E04               	movlw	high _Channels
 35889  00650C  20F4               	addwfc	prodh,w,c
 35890  00650E  6EDA               	movwf	fsr2h,c
 35891  006510  0104               	movlb	4	; () banked
 35892  006512  50DF               	movf	223,w,c
 35893  006514  0B0F               	andlw	15
 35894  006516  0100               	movlb	0	; () banked
 35895  006518  6F60               	movwf	??_UpdateMinMaxChDataRate& (0+255),b
 35896  00651A  0102               	movlb	2	; () banked
 35897  00651C  51F1               	movf	(_loRa+235)& (0+255),w,b
 35898  00651E  0100               	movlb	0	; () banked
 35899  006520  5D60               	subwf	??_UpdateMinMaxChDataRate& (0+255),w,b
 35900  006522  B0D8               	btfsc	status,0,c
 35901  006524  D020               	goto	l1126
 35902                           
 35903                           ; BSR set to: 0
 35904  006526  5161               	movf	UpdateMinMaxChDataRate@i& (0+255),w,b
 35905  006528  0D0E               	mullw	14
 35906  00652A  0E04               	movlw	4
 35907  00652C  26F3               	addwf	prodl,f,c
 35908  00652E  0E00               	movlw	0
 35909  006530  22F4               	addwfc	prodh,f,c
 35910  006532  0E00               	movlw	low _Channels
 35911  006534  24F3               	addwf	prodl,w,c
 35912  006536  6ED9               	movwf	fsr2l,c
 35913  006538  0E04               	movlw	high _Channels
 35914  00653A  20F4               	addwfc	prodh,w,c
 35915  00653C  6EDA               	movwf	fsr2h,c
 35916  00653E  04DE               	decf	postinc2,w,c
 35917  006540  A4D8               	btfss	status,2,c
 35918  006542  D011               	goto	l1126
 35919                           
 35920                           ; BSR set to: 0
 35921                           ;lorawan.c: 1074: {
 35922                           ;lorawan.c: 1075: loRa.minDataRate = Channels[i].dataRange.min;
 35923  006544  5161               	movf	UpdateMinMaxChDataRate@i& (0+255),w,b
 35924  006546  0D0E               	mullw	14
 35925  006548  0E05               	movlw	5
 35926  00654A  26F3               	addwf	prodl,f,c
 35927  00654C  0E00               	movlw	0
 35928  00654E  22F4               	addwfc	prodh,f,c
 35929  006550  0E00               	movlw	low _Channels
 35930  006552  24F3               	addwf	prodl,w,c
 35931  006554  6ED9               	movwf	fsr2l,c
 35932  006556  0E04               	movlw	high _Channels
 35933  006558  20F4               	addwfc	prodh,w,c
 35934  00655A  6EDA               	movwf	fsr2h,c
 35935  00655C  0104               	movlb	4	; () banked
 35936  00655E  50DF               	movf	223,w,c
 35937  006560  0B0F               	andlw	15
 35938  006562  0102               	movlb	2	; () banked
 35939  006564  6FF1               	movwf	(_loRa+235)& (0+255),b
 35940  006566                     l1126:
 35941                           
 35942                           ;lorawan.c: 1076: }
 35943                           ;lorawan.c: 1077: if ( (Channels[i].dataRange.max > loRa.maxDataRate) && (Channels[i].st
      +                          atus == 1) )
 35944  006566  0100               	movlb	0	; () banked
 35945  006568  5161               	movf	UpdateMinMaxChDataRate@i& (0+255),w,b
 35946  00656A  0D0E               	mullw	14
 35947  00656C  0E05               	movlw	5
 35948  00656E  26F3               	addwf	prodl,f,c
 35949  006570  0E00               	movlw	0
 35950  006572  22F4               	addwfc	prodh,f,c
 35951  006574  0E00               	movlw	low _Channels
 35952  006576  24F3               	addwf	prodl,w,c
 35953  006578  6ED9               	movwf	fsr2l,c
 35954  00657A  0E04               	movlw	high _Channels
 35955  00657C  20F4               	addwfc	prodh,w,c
 35956  00657E  6EDA               	movwf	fsr2h,c
 35957  006580  0104               	movlb	4	; () banked
 35958  006582  38DF               	swapf	223,w,c
 35959  006584  0B0F               	andlw	15
 35960  006586  0102               	movlb	2	; () banked
 35961  006588  61F2               	cpfslt	(_loRa+236)& (0+255),b
 35962  00658A  D021               	goto	l1127
 35963                           
 35964                           ; BSR set to: 2
 35965  00658C  0100               	movlb	0	; () banked
 35966  00658E  5161               	movf	UpdateMinMaxChDataRate@i& (0+255),w,b
 35967  006590  0D0E               	mullw	14
 35968  006592  0E04               	movlw	4
 35969  006594  26F3               	addwf	prodl,f,c
 35970  006596  0E00               	movlw	0
 35971  006598  22F4               	addwfc	prodh,f,c
 35972  00659A  0E00               	movlw	low _Channels
 35973  00659C  24F3               	addwf	prodl,w,c
 35974  00659E  6ED9               	movwf	fsr2l,c
 35975  0065A0  0E04               	movlw	high _Channels
 35976  0065A2  20F4               	addwfc	prodh,w,c
 35977  0065A4  6EDA               	movwf	fsr2h,c
 35978  0065A6  04DE               	decf	postinc2,w,c
 35979  0065A8  A4D8               	btfss	status,2,c
 35980  0065AA  D011               	goto	l1127
 35981                           
 35982                           ; BSR set to: 0
 35983                           ;lorawan.c: 1078: {
 35984                           ;lorawan.c: 1079: loRa.maxDataRate = Channels[i].dataRange.max;
 35985  0065AC  5161               	movf	UpdateMinMaxChDataRate@i& (0+255),w,b
 35986  0065AE  0D0E               	mullw	14
 35987  0065B0  0E05               	movlw	5
 35988  0065B2  26F3               	addwf	prodl,f,c
 35989  0065B4  0E00               	movlw	0
 35990  0065B6  22F4               	addwfc	prodh,f,c
 35991  0065B8  0E00               	movlw	low _Channels
 35992  0065BA  24F3               	addwf	prodl,w,c
 35993  0065BC  6ED9               	movwf	fsr2l,c
 35994  0065BE  0E04               	movlw	high _Channels
 35995  0065C0  20F4               	addwfc	prodh,w,c
 35996  0065C2  6EDA               	movwf	fsr2h,c
 35997  0065C4  0104               	movlb	4	; () banked
 35998  0065C6  38DF               	swapf	223,w,c
 35999  0065C8  0B0F               	andlw	15
 36000  0065CA  0102               	movlb	2	; () banked
 36001  0065CC  6FF2               	movwf	(_loRa+236)& (0+255),b
 36002  0065CE                     l1127:
 36003                           
 36004                           ; BSR set to: 2
 36005  0065CE  0100               	movlb	0	; () banked
 36006  0065D0  2B61               	incf	UpdateMinMaxChDataRate@i& (0+255),f,b
 36007  0065D2                     l1124:
 36008                           
 36009                           ; BSR set to: 0
 36010                           
 36011                           ; BSR set to: 0
 36012  0065D2  0102               	movlb	2	; () banked
 36013  0065D4  51F3               	movf	(_loRa+237)& (0+255),w,b
 36014  0065D6  0100               	movlb	0	; () banked
 36015  0065D8  5D61               	subwf	UpdateMinMaxChDataRate@i& (0+255),w,b
 36016  0065DA  B0D8               	btfsc	status,0,c
 36017  0065DC  0012               	return	
 36018  0065DE  D78C               	goto	l1125
 36019  0065E0                     __end_of_UpdateMinMaxChDataRate:
 36020                           	opt stack 0
 36021                           tosu	equ	0xFFF
 36022                           tosh	equ	0xFFE
 36023                           tosl	equ	0xFFD
 36024                           pclath	equ	0xFFA
 36025                           tblptru	equ	0xFF8
 36026                           tblptrh	equ	0xFF7
 36027                           tblptrl	equ	0xFF6
 36028                           tablat	equ	0xFF5
 36029                           prodh	equ	0xFF4
 36030                           prodl	equ	0xFF3
 36031                           intcon	equ	0xFF2
 36032                           intcon2	equ	0xFF1
 36033                           intcon3	equ	0xFF0
 36034                           indf0	equ	0xFEF
 36035                           postinc0	equ	0xFEE
 36036                           plusw0	equ	0xFEB
 36037                           fsr0h	equ	0xFEA
 36038                           fsr0l	equ	0xFE9
 36039                           wreg	equ	0xFE8
 36040                           postinc1	equ	0xFE6
 36041                           postdec1	equ	0xFE5
 36042                           plusw1	equ	0xFE3
 36043                           fsr1h	equ	0xFE2
 36044                           fsr1l	equ	0xFE1
 36045                           indf2	equ	0xFDF
 36046                           postinc2	equ	0xFDE
 36047                           postdec2	equ	0xFDD
 36048                           plusw2	equ	0xFDB
 36049                           fsr2h	equ	0xFDA
 36050                           fsr2l	equ	0xFD9
 36051                           status	equ	0xFD8
 36052                           
 36053 ;; *************** function _StopAllSoftwareTimers *****************
 36054 ;; Defined at:
 36055 ;;		line 965 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 36056 ;; Parameters:    Size  Location     Type
 36057 ;;		None
 36058 ;; Auto vars:     Size  Location     Type
 36059 ;;		None
 36060 ;; Return value:  Size  Location     Type
 36061 ;;                  1    wreg      void 
 36062 ;; Registers used:
 36063 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 36064 ;; Tracked objects:
 36065 ;;		On entry : 0/0
 36066 ;;		On exit  : 0/0
 36067 ;;		Unchanged: 0/0
 36068 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 36069 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 36070 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 36071 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 36072 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 36073 ;;Total ram usage:        0 bytes
 36074 ;; Hardware stack levels used:    1
 36075 ;; Hardware stack levels required when called:    8
 36076 ;; This function calls:
 36077 ;;		_SwTimerStop
 36078 ;; This function is called by:
 36079 ;;		_LORAWAN_Init
 36080 ;;		_LORAWAN_Reset
 36081 ;; This function uses a non-reentrant model
 36082 ;;
 36083                           
 36084                           	psect	text165
 36085  0086E6                     __ptext165:
 36086                           	opt stack 0
 36087  0086E6                     _StopAllSoftwareTimers:
 36088                           	opt stack 21
 36089                           
 36090                           ;lorawan_eu.c: 967: SwTimerStop(loRa.joinAccept1TimerId);
 36091                           
 36092                           ; BSR set to: 0
 36093                           ;incstack = 0
 36094  0086E6  0102               	movlb	2	; () banked
 36095  0086E8  51E8               	movf	(_loRa+226)& (0+255),w,b
 36096  0086EA  EC1B  F048         	call	_SwTimerStop
 36097                           
 36098                           ;lorawan_eu.c: 968: SwTimerStop(loRa.joinAccept2TimerId);
 36099  0086EE  0102               	movlb	2	; () banked
 36100  0086F0  51E9               	movf	(_loRa+227)& (0+255),w,b
 36101  0086F2  EC1B  F048         	call	_SwTimerStop
 36102                           
 36103                           ;lorawan_eu.c: 969: SwTimerStop(loRa.linkCheckTimerId);
 36104  0086F6  0102               	movlb	2	; () banked
 36105  0086F8  51ED               	movf	(_loRa+231)& (0+255),w,b
 36106  0086FA  EC1B  F048         	call	_SwTimerStop
 36107                           
 36108                           ;lorawan_eu.c: 970: SwTimerStop(loRa.receiveWindow1TimerId);
 36109  0086FE  0102               	movlb	2	; () banked
 36110  008700  51EA               	movf	(_loRa+228)& (0+255),w,b
 36111  008702  EC1B  F048         	call	_SwTimerStop
 36112                           
 36113                           ;lorawan_eu.c: 971: SwTimerStop(loRa.receiveWindow2TimerId);
 36114  008706  0102               	movlb	2	; () banked
 36115  008708  51EB               	movf	(_loRa+229)& (0+255),w,b
 36116  00870A  EC1B  F048         	call	_SwTimerStop
 36117                           
 36118                           ;lorawan_eu.c: 972: SwTimerStop(loRa.ackTimeoutTimerId);
 36119  00870E  0102               	movlb	2	; () banked
 36120  008710  51EE               	movf	(_loRa+232)& (0+255),w,b
 36121  008712  EC1B  F048         	call	_SwTimerStop
 36122                           
 36123                           ;lorawan_eu.c: 973: SwTimerStop(loRa.automaticReplyTimerId);
 36124  008716  0102               	movlb	2	; () banked
 36125  008718  51EC               	movf	(_loRa+230)& (0+255),w,b
 36126  00871A  EC1B  F048         	call	_SwTimerStop
 36127                           
 36128                           ;lorawan_eu.c: 974: SwTimerStop(loRa.unconfirmedRetransmisionTimerId);
 36129  00871E  0102               	movlb	2	; () banked
 36130  008720  51F0               	movf	(_loRa+234)& (0+255),w,b
 36131  008722  EC1B  F048         	call	_SwTimerStop
 36132                           
 36133                           ;lorawan_eu.c: 975: SwTimerStop(loRa.abpJoinTimerId);
 36134  008726  0102               	movlb	2	; () banked
 36135  008728  51F9               	movf	(_loRa+243)& (0+255),w,b
 36136  00872A  EC1B  F048         	call	_SwTimerStop
 36137                           
 36138                           ;lorawan_eu.c: 976: SwTimerStop(loRa.dutyCycleTimerId);
 36139  00872E  0102               	movlb	2	; () banked
 36140  008730  51EF               	movf	(_loRa+233)& (0+255),w,b
 36141  008732  EC1B  F048         	call	_SwTimerStop
 36142  008736  0012               	return		;funcret
 36143  008738                     __end_of_StopAllSoftwareTimers:
 36144                           	opt stack 0
 36145                           tosu	equ	0xFFF
 36146                           tosh	equ	0xFFE
 36147                           tosl	equ	0xFFD
 36148                           pclath	equ	0xFFA
 36149                           tblptru	equ	0xFF8
 36150                           tblptrh	equ	0xFF7
 36151                           tblptrl	equ	0xFF6
 36152                           tablat	equ	0xFF5
 36153                           prodh	equ	0xFF4
 36154                           prodl	equ	0xFF3
 36155                           intcon	equ	0xFF2
 36156                           intcon2	equ	0xFF1
 36157                           intcon3	equ	0xFF0
 36158                           indf0	equ	0xFEF
 36159                           postinc0	equ	0xFEE
 36160                           plusw0	equ	0xFEB
 36161                           fsr0h	equ	0xFEA
 36162                           fsr0l	equ	0xFE9
 36163                           wreg	equ	0xFE8
 36164                           postinc1	equ	0xFE6
 36165                           postdec1	equ	0xFE5
 36166                           plusw1	equ	0xFE3
 36167                           fsr1h	equ	0xFE2
 36168                           fsr1l	equ	0xFE1
 36169                           indf2	equ	0xFDF
 36170                           postinc2	equ	0xFDE
 36171                           postdec2	equ	0xFDD
 36172                           plusw2	equ	0xFDB
 36173                           fsr2h	equ	0xFDA
 36174                           fsr2l	equ	0xFD9
 36175                           status	equ	0xFD8
 36176                           
 36177 ;; *************** function _RADIO_SetLoRaSyncWord *****************
 36178 ;; Defined at:
 36179 ;;		line 522 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 36180 ;; Parameters:    Size  Location     Type
 36181 ;;  syncWord        1    wreg     unsigned char 
 36182 ;; Auto vars:     Size  Location     Type
 36183 ;;  syncWord        1    0[BANK0 ] unsigned char 
 36184 ;; Return value:  Size  Location     Type
 36185 ;;                  1    wreg      void 
 36186 ;; Registers used:
 36187 ;;		wreg
 36188 ;; Tracked objects:
 36189 ;;		On entry : 0/0
 36190 ;;		On exit  : 0/0
 36191 ;;		Unchanged: 0/0
 36192 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 36193 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 36194 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 36195 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 36196 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 36197 ;;Total ram usage:        1 bytes
 36198 ;; Hardware stack levels used:    1
 36199 ;; Hardware stack levels required when called:    7
 36200 ;; This function calls:
 36201 ;;		Nothing
 36202 ;; This function is called by:
 36203 ;;		_LORAWAN_Reset
 36204 ;;		_ConfigureRadio
 36205 ;; This function uses a non-reentrant model
 36206 ;;
 36207                           
 36208                           	psect	text166
 36209  009572                     __ptext166:
 36210                           	opt stack 0
 36211  009572                     _RADIO_SetLoRaSyncWord:
 36212                           	opt stack 19
 36213                           
 36214                           ;incstack = 0
 36215                           ;RADIO_SetLoRaSyncWord@syncWord stored from wreg
 36216  009572  0100               	movlb	0	; () banked
 36217  009574  6F60               	movwf	RADIO_SetLoRaSyncWord@syncWord& (0+255),b
 36218                           
 36219                           ;radio_driver_SX1276.c: 525: RadioConfiguration.syncWordLoRa = syncWord;
 36220  009576  C060  F165         	movff	RADIO_SetLoRaSyncWord@syncWord,_RadioConfiguration+14
 36221  00957A  0012               	return		;funcret
 36222  00957C                     __end_of_RADIO_SetLoRaSyncWord:
 36223                           	opt stack 0
 36224                           tosu	equ	0xFFF
 36225                           tosh	equ	0xFFE
 36226                           tosl	equ	0xFFD
 36227                           pclath	equ	0xFFA
 36228                           tblptru	equ	0xFF8
 36229                           tblptrh	equ	0xFF7
 36230                           tblptrl	equ	0xFF6
 36231                           tablat	equ	0xFF5
 36232                           prodh	equ	0xFF4
 36233                           prodl	equ	0xFF3
 36234                           intcon	equ	0xFF2
 36235                           intcon2	equ	0xFF1
 36236                           intcon3	equ	0xFF0
 36237                           indf0	equ	0xFEF
 36238                           postinc0	equ	0xFEE
 36239                           plusw0	equ	0xFEB
 36240                           fsr0h	equ	0xFEA
 36241                           fsr0l	equ	0xFE9
 36242                           wreg	equ	0xFE8
 36243                           postinc1	equ	0xFE6
 36244                           postdec1	equ	0xFE5
 36245                           plusw1	equ	0xFE3
 36246                           fsr1h	equ	0xFE2
 36247                           fsr1l	equ	0xFE1
 36248                           indf2	equ	0xFDF
 36249                           postinc2	equ	0xFDE
 36250                           postdec2	equ	0xFDD
 36251                           plusw2	equ	0xFDB
 36252                           fsr2h	equ	0xFDA
 36253                           fsr2l	equ	0xFD9
 36254                           status	equ	0xFD8
 36255                           
 36256 ;; *************** function _RADIO_Init *****************
 36257 ;; Defined at:
 36258 ;;		line 422 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 36259 ;; Parameters:    Size  Location     Type
 36260 ;;  radioBuffer     2   25[BANK0 ] PTR unsigned char 
 36261 ;;		 -> radioBuffer(271), 
 36262 ;;  frequency       4   27[BANK0 ] unsigned long 
 36263 ;; Auto vars:     Size  Location     Type
 36264 ;;		None
 36265 ;; Return value:  Size  Location     Type
 36266 ;;                  1    wreg      void 
 36267 ;; Registers used:
 36268 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 36269 ;; Tracked objects:
 36270 ;;		On entry : 0/0
 36271 ;;		On exit  : 0/0
 36272 ;;		Unchanged: 0/0
 36273 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 36274 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 36275 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 36276 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 36277 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 36278 ;;Total ram usage:        7 bytes
 36279 ;; Hardware stack levels used:    1
 36280 ;; Hardware stack levels required when called:   11
 36281 ;; This function calls:
 36282 ;;		_RADIO_RegisterRead
 36283 ;;		_RADIO_RegisterWrite
 36284 ;;		_RADIO_Reset
 36285 ;;		_RADIO_WriteFrequency
 36286 ;;		_RADIO_WriteMode
 36287 ;;		_SwTimerCreate
 36288 ;;		_SwTimerSetCallback
 36289 ;;		_SwTimerStop
 36290 ;; This function is called by:
 36291 ;;		_LORAWAN_Init
 36292 ;;		_LORAWAN_Reset
 36293 ;; This function uses a non-reentrant model
 36294 ;;
 36295                           
 36296                           	psect	text167
 36297  004A5A                     __ptext167:
 36298                           	opt stack 0
 36299  004A5A                     _RADIO_Init:
 36300                           	opt stack 18
 36301                           
 36302                           ;radio_driver_SX1276.c: 424: RadioConfiguration.frequency = frequency;
 36303                           
 36304                           ;incstack = 0
 36305  004A5A  C07B  F157         	movff	RADIO_Init@frequency,_RadioConfiguration
 36306  004A5E  C07C  F158         	movff	RADIO_Init@frequency+1,_RadioConfiguration+1
 36307  004A62  C07D  F159         	movff	RADIO_Init@frequency+2,_RadioConfiguration+2
 36308  004A66  C07E  F15A         	movff	RADIO_Init@frequency+3,_RadioConfiguration+3
 36309                           
 36310                           ;radio_driver_SX1276.c: 425: RadioConfiguration.frequencyDeviation = 25000;
 36311  004A6A  0EA8               	movlw	168
 36312  004A6C  0101               	movlb	1	; () banked
 36313  004A6E  6F5B               	movwf	(_RadioConfiguration+4)& (0+255),b
 36314  004A70  0E61               	movlw	97
 36315  004A72  6F5C               	movwf	(_RadioConfiguration+5)& (0+255),b
 36316  004A74  0E00               	movlw	0
 36317  004A76  6F5D               	movwf	(_RadioConfiguration+6)& (0+255),b
 36318  004A78  0E00               	movlw	0
 36319  004A7A  6F5E               	movwf	(_RadioConfiguration+7)& (0+255),b
 36320                           
 36321                           ;radio_driver_SX1276.c: 426: RadioConfiguration.bitRate = 50000;
 36322  004A7C  0E50               	movlw	80
 36323  004A7E  6F5F               	movwf	(_RadioConfiguration+8)& (0+255),b
 36324  004A80  0EC3               	movlw	195
 36325  004A82  6F60               	movwf	(_RadioConfiguration+9)& (0+255),b
 36326  004A84  0E00               	movlw	0
 36327  004A86  6F61               	movwf	(_RadioConfiguration+10)& (0+255),b
 36328  004A88  0E00               	movlw	0
 36329  004A8A  6F62               	movwf	(_RadioConfiguration+11)& (0+255),b
 36330                           
 36331                           ;radio_driver_SX1276.c: 427: RadioConfiguration.modulation = MODULATION_LORA;
 36332  004A8C  0E01               	movlw	1
 36333  004A8E  6F6F               	movwf	(_RadioConfiguration+24)& (0+255),b
 36334                           
 36335                           ;radio_driver_SX1276.c: 428: RadioConfiguration.bandWidth = BW_125KHZ;
 36336  004A90  0E07               	movlw	7
 36337  004A92  6F71               	movwf	(_RadioConfiguration+26)& (0+255),b
 36338                           
 36339                           ;radio_driver_SX1276.c: 429: RadioConfiguration.outputPower = 1;
 36340  004A94  0E01               	movlw	1
 36341  004A96  6F72               	movwf	(_RadioConfiguration+27)& (0+255),b
 36342                           
 36343                           ;radio_driver_SX1276.c: 430: RadioConfiguration.errorCodingRate = CR_4_5;
 36344  004A98  0E01               	movlw	1
 36345  004A9A  6F78               	movwf	(_RadioConfiguration+33)& (0+255),b
 36346                           
 36347                           ;radio_driver_SX1276.c: 431: RadioConfiguration.implicitHeaderMode = 0;
 36348  004A9C  0E00               	movlw	0
 36349  004A9E  6F79               	movwf	(_RadioConfiguration+34)& (0+255),b
 36350                           
 36351                           ;radio_driver_SX1276.c: 432: RadioConfiguration.preambleLen = 8;
 36352  004AA0  0E00               	movlw	0
 36353  004AA2  6F64               	movwf	(_RadioConfiguration+13)& (0+255),b
 36354  004AA4  0E08               	movlw	8
 36355  004AA6  6F63               	movwf	(_RadioConfiguration+12)& (0+255),b
 36356                           
 36357                           ;radio_driver_SX1276.c: 433: RadioConfiguration.dataRate = SF_12;
 36358  004AA8  0E0C               	movlw	12
 36359  004AAA  6F70               	movwf	(_RadioConfiguration+25)& (0+255),b
 36360                           
 36361                           ;radio_driver_SX1276.c: 434: RadioConfiguration.crcOn = 1;
 36362  004AAC  0E01               	movlw	1
 36363  004AAE  6F73               	movwf	(_RadioConfiguration+28)& (0+255),b
 36364                           
 36365                           ;radio_driver_SX1276.c: 435: RadioConfiguration.paBoost = 0;
 36366  004AB0  0E00               	movlw	0
 36367  004AB2  6F74               	movwf	(_RadioConfiguration+29)& (0+255),b
 36368                           
 36369                           ;radio_driver_SX1276.c: 436: RadioConfiguration.iqInverted = 0;
 36370  004AB4  0E00               	movlw	0
 36371  004AB6  6F77               	movwf	(_RadioConfiguration+32)& (0+255),b
 36372                           
 36373                           ;radio_driver_SX1276.c: 437: RadioConfiguration.syncWord[0] = 0xC1;
 36374  004AB8  0EC1               	movlw	193
 36375  004ABA  6F66               	movwf	(_RadioConfiguration+15)& (0+255),b
 36376                           
 36377                           ;radio_driver_SX1276.c: 438: RadioConfiguration.syncWord[1] = 0x94;
 36378  004ABC  0E94               	movlw	148
 36379  004ABE  6F67               	movwf	(_RadioConfiguration+16)& (0+255),b
 36380                           
 36381                           ;radio_driver_SX1276.c: 439: RadioConfiguration.syncWord[2] = 0xC1;
 36382  004AC0  0EC1               	movlw	193
 36383  004AC2  6F68               	movwf	(_RadioConfiguration+17)& (0+255),b
 36384                           
 36385                           ;radio_driver_SX1276.c: 440: RadioConfiguration.syncWordLen = 3;
 36386  004AC4  0E03               	movlw	3
 36387  004AC6  6F6E               	movwf	(_RadioConfiguration+23)& (0+255),b
 36388                           
 36389                           ;radio_driver_SX1276.c: 441: RadioConfiguration.syncWordLoRa = 0x34;
 36390  004AC8  0E34               	movlw	52
 36391  004ACA  6F65               	movwf	(_RadioConfiguration+14)& (0+255),b
 36392                           
 36393                           ;radio_driver_SX1276.c: 442: RadioConfiguration.flags = 0;
 36394  004ACC  0E00               	movlw	0
 36395  004ACE  6F7A               	movwf	(_RadioConfiguration+35)& (0+255),b
 36396                           
 36397                           ;radio_driver_SX1276.c: 443: RadioConfiguration.dataBufferLen = 0;
 36398  004AD0  0E00               	movlw	0
 36399  004AD2  6F7B               	movwf	(_RadioConfiguration+36)& (0+255),b
 36400                           
 36401                           ; BSR set to: 1
 36402                           ;radio_driver_SX1276.c: 444: RadioConfiguration.dataBuffer = radioBuffer;
 36403  004AD4  C079  F17C         	movff	RADIO_Init@radioBuffer,_RadioConfiguration+37
 36404  004AD8  C07A  F17D         	movff	RADIO_Init@radioBuffer+1,_RadioConfiguration+38
 36405                           
 36406                           ; BSR set to: 1
 36407                           ;radio_driver_SX1276.c: 445: RadioConfiguration.frequencyHopPeriod = 0;
 36408  004ADC  0E00               	movlw	0
 36409  004ADE  6F76               	movwf	(_RadioConfiguration+31)& (0+255),b
 36410  004AE0  0E00               	movlw	0
 36411  004AE2  6F75               	movwf	(_RadioConfiguration+30)& (0+255),b
 36412                           
 36413                           ; BSR set to: 1
 36414                           ;radio_driver_SX1276.c: 446: RadioConfiguration.packetSNR = -128;
 36415  004AE4  0E80               	movlw	128
 36416  004AE6  6F89               	movwf	(_RadioConfiguration+50)& (0+255),b
 36417                           
 36418                           ; BSR set to: 1
 36419                           ;radio_driver_SX1276.c: 447: RadioConfiguration.watchdogTimerTimeout = ((uint32_t)15000)
      +                          ;
 36420  004AE8  0E98               	movlw	152
 36421  004AEA  6F81               	movwf	(_RadioConfiguration+42)& (0+255),b
 36422  004AEC  0E3A               	movlw	58
 36423  004AEE  6F82               	movwf	(_RadioConfiguration+43)& (0+255),b
 36424  004AF0  0E00               	movlw	0
 36425  004AF2  6F83               	movwf	(_RadioConfiguration+44)& (0+255),b
 36426  004AF4  0E00               	movlw	0
 36427  004AF6  6F84               	movwf	(_RadioConfiguration+45)& (0+255),b
 36428                           
 36429                           ; BSR set to: 1
 36430                           ;radio_driver_SX1276.c: 448: RadioConfiguration.fskDataShaping = FSK_SHAPING_GAUSS_BT_0_
      +                          5;
 36431  004AF8  0E02               	movlw	2
 36432  004AFA  6F8A               	movwf	(_RadioConfiguration+51)& (0+255),b
 36433                           
 36434                           ; BSR set to: 1
 36435                           ;radio_driver_SX1276.c: 449: RadioConfiguration.rxBw = FSKBW_50_0KHZ;
 36436  004AFC  0E0B               	movlw	11
 36437  004AFE  6F8B               	movwf	(_RadioConfiguration+52)& (0+255),b
 36438                           
 36439                           ; BSR set to: 1
 36440                           ;radio_driver_SX1276.c: 450: RadioConfiguration.afcBw = FSKBW_83_3KHZ;
 36441  004B00  0E12               	movlw	18
 36442  004B02  6F8C               	movwf	(_RadioConfiguration+53)& (0+255),b
 36443                           
 36444                           ; BSR set to: 1
 36445                           ;radio_driver_SX1276.c: 451: RadioConfiguration.fhssNextFrequency = (0);
 36446  004B04  0E00               	movlw	0
 36447  004B06  6F86               	movwf	(_RadioConfiguration+47)& (0+255),b
 36448  004B08  0E00               	movlw	0
 36449  004B0A  6F87               	movwf	(_RadioConfiguration+48)& (0+255),b
 36450                           
 36451                           ;radio_driver_SX1276.c: 456: if (0 == RadioConfiguration.initialized)
 36452  004B0C  5185               	movf	(_RadioConfiguration+46)& (0+255),w,b
 36453  004B0E  A4D8               	btfss	status,2,c
 36454  004B10  D026               	goto	l214
 36455                           
 36456                           ; BSR set to: 1
 36457                           ;radio_driver_SX1276.c: 457: {
 36458                           ;radio_driver_SX1276.c: 460: RadioConfiguration.timeOnAirTimerId = SwTimerCreate();
 36459  004B12  EC6D  F03B         	call	_SwTimerCreate	;wreg free
 36460  004B16  0101               	movlb	1	; () banked
 36461  004B18  6F7E               	movwf	(_RadioConfiguration+39)& (0+255),b
 36462                           
 36463                           ;radio_driver_SX1276.c: 461: RadioConfiguration.fskRxWindowTimerId = SwTimerCreate();
 36464  004B1A  EC6D  F03B         	call	_SwTimerCreate	;wreg free
 36465  004B1E  0101               	movlb	1	; () banked
 36466  004B20  6F7F               	movwf	(_RadioConfiguration+40)& (0+255),b
 36467                           
 36468                           ;radio_driver_SX1276.c: 462: RadioConfiguration.watchdogTimerId = SwTimerCreate();
 36469  004B22  EC6D  F03B         	call	_SwTimerCreate	;wreg free
 36470  004B26  0101               	movlb	1	; () banked
 36471  004B28  6F80               	movwf	(_RadioConfiguration+41)& (0+255),b
 36472                           
 36473                           ;radio_driver_SX1276.c: 463: SwTimerSetCallback(RadioConfiguration.fskRxWindowTimerId, R
      +                          ADIO_RxFSKTimeout, 0);
 36474  004B2A  0E14               	movlw	low _RADIO_RxFSKTimeout
 36475  004B2C  0100               	movlb	0	; () banked
 36476  004B2E  6F60               	movwf	SwTimerSetCallback@callback& (0+255),b
 36477  004B30  0E8C               	movlw	high _RADIO_RxFSKTimeout
 36478  004B32  6F61               	movwf	(SwTimerSetCallback@callback+1)& (0+255),b
 36479  004B34  0E00               	movlw	0
 36480  004B36  6F62               	movwf	SwTimerSetCallback@callbackParameter& (0+255),b
 36481  004B38  0101               	movlb	1	; () banked
 36482  004B3A  517F               	movf	(_RadioConfiguration+40)& (0+255),w,b
 36483  004B3C  EC05  F045         	call	_SwTimerSetCallback
 36484                           
 36485                           ;radio_driver_SX1276.c: 464: SwTimerSetCallback(RadioConfiguration.watchdogTimerId, RADI
      +                          O_WatchdogTimeout, 0);
 36486  004B40  0E6C               	movlw	low _RADIO_WatchdogTimeout
 36487  004B42  0100               	movlb	0	; () banked
 36488  004B44  6F60               	movwf	SwTimerSetCallback@callback& (0+255),b
 36489  004B46  0E88               	movlw	high _RADIO_WatchdogTimeout
 36490  004B48  6F61               	movwf	(SwTimerSetCallback@callback+1)& (0+255),b
 36491  004B4A  0E00               	movlw	0
 36492  004B4C  6F62               	movwf	SwTimerSetCallback@callbackParameter& (0+255),b
 36493  004B4E  0101               	movlb	1	; () banked
 36494  004B50  5180               	movf	(_RadioConfiguration+41)& (0+255),w,b
 36495  004B52  EC05  F045         	call	_SwTimerSetCallback
 36496                           
 36497                           ;radio_driver_SX1276.c: 465: RadioConfiguration.initialized = 1;
 36498  004B56  0E01               	movlw	1
 36499  004B58  0101               	movlb	1	; () banked
 36500  004B5A  6F85               	movwf	(_RadioConfiguration+46)& (0+255),b
 36501                           
 36502                           ;radio_driver_SX1276.c: 466: }
 36503  004B5C  D00B               	goto	l215
 36504  004B5E                     l214:
 36505                           
 36506                           ; BSR set to: 1
 36507                           ;radio_driver_SX1276.c: 467: else
 36508                           ;radio_driver_SX1276.c: 468: {
 36509                           ;radio_driver_SX1276.c: 469: SwTimerStop(RadioConfiguration.timeOnAirTimerId);
 36510                           
 36511                           ; BSR set to: 1
 36512  004B5E  517E               	movf	(_RadioConfiguration+39)& (0+255),w,b
 36513  004B60  EC1B  F048         	call	_SwTimerStop
 36514                           
 36515                           ;radio_driver_SX1276.c: 470: SwTimerStop(RadioConfiguration.fskRxWindowTimerId);
 36516  004B64  0101               	movlb	1	; () banked
 36517  004B66  517F               	movf	(_RadioConfiguration+40)& (0+255),w,b
 36518  004B68  EC1B  F048         	call	_SwTimerStop
 36519                           
 36520                           ;radio_driver_SX1276.c: 471: SwTimerStop(RadioConfiguration.watchdogTimerId);
 36521  004B6C  0101               	movlb	1	; () banked
 36522  004B6E  5180               	movf	(_RadioConfiguration+41)& (0+255),w,b
 36523  004B70  EC1B  F048         	call	_SwTimerStop
 36524  004B74                     l215:
 36525                           
 36526                           ;radio_driver_SX1276.c: 472: }
 36527                           ;radio_driver_SX1276.c: 474: RADIO_Reset();
 36528  004B74  EC7C  F044         	call	_RADIO_Reset	;wreg free
 36529                           
 36530                           ;radio_driver_SX1276.c: 479: RADIO_WriteMode(MODE_STANDBY, MODULATION_FSK, 1);
 36531  004B78  0E00               	movlw	0
 36532  004B7A  0100               	movlb	0	; () banked
 36533  004B7C  6F65               	movwf	RADIO_WriteMode@newModulation& (0+255),b
 36534  004B7E  0E01               	movlw	1
 36535  004B80  6F66               	movwf	RADIO_WriteMode@blocking& (0+255),b
 36536  004B82  0E01               	movlw	1
 36537  004B84  ECF4  F031         	call	_RADIO_WriteMode
 36538                           
 36539                           ;radio_driver_SX1276.c: 482: RADIO_WriteFrequency(RadioConfiguration.frequency);
 36540  004B88  C157  F06D         	movff	_RadioConfiguration,RADIO_WriteFrequency@frequency
 36541  004B8C  C158  F06E         	movff	_RadioConfiguration+1,RADIO_WriteFrequency@frequency+1
 36542  004B90  C159  F06F         	movff	_RadioConfiguration+2,RADIO_WriteFrequency@frequency+2
 36543  004B94  C15A  F070         	movff	_RadioConfiguration+3,RADIO_WriteFrequency@frequency+3
 36544  004B98  ECE2  F033         	call	_RADIO_WriteFrequency	;wreg free
 36545                           
 36546                           ;radio_driver_SX1276.c: 486: RADIO_RegisterWrite(0x3B, 0x42);
 36547  004B9C  0E42               	movlw	66
 36548  004B9E  0100               	movlb	0	; () banked
 36549  004BA0  6F62               	movwf	RADIO_RegisterWrite@value& (0+255),b
 36550  004BA2  0E3B               	movlw	59
 36551  004BA4  ECDE  F048         	call	_RADIO_RegisterWrite
 36552  004BA8                     
 36553                           ;radio_driver_SX1276.c: 490: ;
 36554  004BA8  0E3B               	movlw	59
 36555  004BAA  EC07  F048         	call	_RADIO_RegisterRead
 36556  004BAE  0100               	movlb	0	; () banked
 36557  004BB0  6F7F               	movwf	??_RADIO_Init& (0+255),b
 36558  004BB2  BB7F               	btfsc	??_RADIO_Init& (0+255),5,b
 36559  004BB4  D7F9               	goto	l217
 36560                           
 36561                           ; BSR set to: 0
 36562                           ;radio_driver_SX1276.c: 493: RADIO_RegisterWrite(0x0C, 0x23);
 36563                           
 36564                           ; BSR set to: 0
 36565  004BB6  0E23               	movlw	35
 36566  004BB8  6F62               	movwf	RADIO_RegisterWrite@value& (0+255),b
 36567  004BBA  0E0C               	movlw	12
 36568  004BBC  ECDE  F048         	call	_RADIO_RegisterWrite
 36569                           
 36570                           ;radio_driver_SX1276.c: 496: RADIO_RegisterWrite(0x0D, 0x1E);
 36571  004BC0  0E1E               	movlw	30
 36572  004BC2  0100               	movlb	0	; () banked
 36573  004BC4  6F62               	movwf	RADIO_RegisterWrite@value& (0+255),b
 36574  004BC6  0E0D               	movlw	13
 36575  004BC8  ECDE  F048         	call	_RADIO_RegisterWrite
 36576                           
 36577                           ;radio_driver_SX1276.c: 500: RADIO_RegisterWrite(0x1F, 0xAA);
 36578  004BCC  0EAA               	movlw	170
 36579  004BCE  0100               	movlb	0	; () banked
 36580  004BD0  6F62               	movwf	RADIO_RegisterWrite@value& (0+255),b
 36581  004BD2  0E1F               	movlw	31
 36582  004BD4  ECDE  F048         	call	_RADIO_RegisterWrite
 36583                           
 36584                           ;radio_driver_SX1276.c: 504: RADIO_RegisterWrite(0x35, 0x8F);
 36585  004BD8  0E8F               	movlw	143
 36586  004BDA  0100               	movlb	0	; () banked
 36587  004BDC  6F62               	movwf	RADIO_RegisterWrite@value& (0+255),b
 36588  004BDE  0E35               	movlw	53
 36589  004BE0  ECDE  F048         	call	_RADIO_RegisterWrite
 36590                           
 36591                           ;radio_driver_SX1276.c: 507: RADIO_RegisterWrite(0x32, 0xFF);
 36592  004BE4  0EFF               	movlw	255
 36593  004BE6  0100               	movlb	0	; () banked
 36594  004BE8  6F62               	movwf	RADIO_RegisterWrite@value& (0+255),b
 36595  004BEA  0E32               	movlw	50
 36596  004BEC  ECDE  F048         	call	_RADIO_RegisterWrite
 36597                           
 36598                           ;radio_driver_SX1276.c: 510: RADIO_RegisterWrite(0x31, 1 << (6));
 36599  004BF0  0E40               	movlw	64
 36600  004BF2  0100               	movlb	0	; () banked
 36601  004BF4  6F62               	movwf	RADIO_RegisterWrite@value& (0+255),b
 36602  004BF6  0E31               	movlw	49
 36603  004BF8  ECDE  F048         	call	_RADIO_RegisterWrite
 36604                           
 36605                           ;radio_driver_SX1276.c: 513: RADIO_WriteMode(MODE_SLEEP, MODULATION_LORA, 1);
 36606  004BFC  0E01               	movlw	1
 36607  004BFE  0100               	movlb	0	; () banked
 36608  004C00  6F65               	movwf	RADIO_WriteMode@newModulation& (0+255),b
 36609  004C02  0E01               	movlw	1
 36610  004C04  6F66               	movwf	RADIO_WriteMode@blocking& (0+255),b
 36611  004C06  0E00               	movlw	0
 36612  004C08  ECF4  F031         	call	_RADIO_WriteMode
 36613                           
 36614                           ;radio_driver_SX1276.c: 517: RADIO_RegisterWrite(0x23, 0xFF);
 36615  004C0C  0EFF               	movlw	255
 36616  004C0E  0100               	movlb	0	; () banked
 36617  004C10  6F62               	movwf	RADIO_RegisterWrite@value& (0+255),b
 36618  004C12  0E23               	movlw	35
 36619  004C14  ECDE  F048         	call	_RADIO_RegisterWrite
 36620                           
 36621                           ;radio_driver_SX1276.c: 519: RadioConfiguration.regVersion = RADIO_RegisterRead(0x42);
 36622  004C18  0E42               	movlw	66
 36623  004C1A  EC07  F048         	call	_RADIO_RegisterRead
 36624  004C1E  0101               	movlb	1	; () banked
 36625  004C20  6F88               	movwf	(_RadioConfiguration+49)& (0+255),b
 36626                           
 36627                           ; BSR set to: 1
 36628  004C22  0012               	return		;funcret
 36629  004C24                     __end_of_RADIO_Init:
 36630                           	opt stack 0
 36631                           tosu	equ	0xFFF
 36632                           tosh	equ	0xFFE
 36633                           tosl	equ	0xFFD
 36634                           pclath	equ	0xFFA
 36635                           tblptru	equ	0xFF8
 36636                           tblptrh	equ	0xFF7
 36637                           tblptrl	equ	0xFF6
 36638                           tablat	equ	0xFF5
 36639                           prodh	equ	0xFF4
 36640                           prodl	equ	0xFF3
 36641                           intcon	equ	0xFF2
 36642                           intcon2	equ	0xFF1
 36643                           intcon3	equ	0xFF0
 36644                           indf0	equ	0xFEF
 36645                           postinc0	equ	0xFEE
 36646                           plusw0	equ	0xFEB
 36647                           fsr0h	equ	0xFEA
 36648                           fsr0l	equ	0xFE9
 36649                           wreg	equ	0xFE8
 36650                           postinc1	equ	0xFE6
 36651                           postdec1	equ	0xFE5
 36652                           plusw1	equ	0xFE3
 36653                           fsr1h	equ	0xFE2
 36654                           fsr1l	equ	0xFE1
 36655                           indf2	equ	0xFDF
 36656                           postinc2	equ	0xFDE
 36657                           postdec2	equ	0xFDD
 36658                           plusw2	equ	0xFDB
 36659                           fsr2h	equ	0xFDA
 36660                           fsr2l	equ	0xFD9
 36661                           status	equ	0xFD8
 36662                           
 36663 ;; *************** function _SwTimerSetCallback *****************
 36664 ;; Defined at:
 36665 ;;		line 180 in file "mcc_generated_files/LoRaWAN/sw_timer.c"
 36666 ;; Parameters:    Size  Location     Type
 36667 ;;  timerId         1    wreg     unsigned char 
 36668 ;;  callback        2    0[BANK0 ] PTR FTN(unsigned char ,)
 36669 ;;		 -> DutyCycleCallback(1), UpdateJoinSuccessState(1), AutomaticReplyCallback(1), UnconfirmedTransmissionCallback(1), 
 36670 ;;		 -> AckRetransmissionCallback(1), LORAWAN_LinkCheckCallback(1), LORAWAN_ReceiveWindow2Callback(1), LORAWAN_ReceiveWi
      +ndow1Callback(1), 
 36671 ;;		 -> RADIO_WatchdogTimeout(1), RADIO_RxFSKTimeout(1), 
 36672 ;;  callbackPara    1    2[BANK0 ] unsigned char 
 36673 ;; Auto vars:     Size  Location     Type
 36674 ;;  timerId         1    3[BANK0 ] unsigned char 
 36675 ;; Return value:  Size  Location     Type
 36676 ;;                  1    wreg      void 
 36677 ;; Registers used:
 36678 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 36679 ;; Tracked objects:
 36680 ;;		On entry : 0/0
 36681 ;;		On exit  : 0/0
 36682 ;;		Unchanged: 0/0
 36683 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 36684 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 36685 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 36686 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 36687 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 36688 ;;Total ram usage:        4 bytes
 36689 ;; Hardware stack levels used:    1
 36690 ;; Hardware stack levels required when called:    7
 36691 ;; This function calls:
 36692 ;;		Nothing
 36693 ;; This function is called by:
 36694 ;;		_RADIO_Init
 36695 ;;		_SetCallbackSoftwareTimers
 36696 ;; This function uses a non-reentrant model
 36697 ;;
 36698                           
 36699                           	psect	text168
 36700  008A0A                     __ptext168:
 36701                           	opt stack 0
 36702  008A0A                     _SwTimerSetCallback:
 36703                           	opt stack 21
 36704                           
 36705                           ; BSR set to: 1
 36706                           ;incstack = 0
 36707                           ;SwTimerSetCallback@timerId stored from wreg
 36708  008A0A  0100               	movlb	0	; () banked
 36709  008A0C  6F63               	movwf	SwTimerSetCallback@timerId& (0+255),b
 36710                           
 36711                           ;sw_timer.c: 182: swTimers[timerId].callback = callback;
 36712  008A0E  0100               	movlb	0	; () banked
 36713  008A10  5163               	movf	SwTimerSetCallback@timerId& (0+255),w,b
 36714  008A12  0D08               	mullw	8
 36715  008A14  0E06               	movlw	6
 36716  008A16  26F3               	addwf	prodl,f,c
 36717  008A18  0E00               	movlw	0
 36718  008A1A  22F4               	addwfc	prodh,f,c
 36719  008A1C  0E00               	movlw	low _swTimers
 36720  008A1E  24F3               	addwf	prodl,w,c
 36721  008A20  6ED9               	movwf	fsr2l,c
 36722  008A22  0E03               	movlw	high _swTimers
 36723  008A24  20F4               	addwfc	prodh,w,c
 36724  008A26  6EDA               	movwf	fsr2h,c
 36725  008A28  C060  FFDE         	movff	SwTimerSetCallback@callback,postinc2	;volatile
 36726  008A2C  C061  FFDD         	movff	SwTimerSetCallback@callback+1,postdec2	;volatile
 36727                           
 36728                           ;sw_timer.c: 183: swTimers[timerId].callbackParameter = callbackParameter;
 36729  008A30  5163               	movf	SwTimerSetCallback@timerId& (0+255),w,b
 36730  008A32  0D08               	mullw	8
 36731  008A34  0E05               	movlw	5
 36732  008A36  26F3               	addwf	prodl,f,c
 36733  008A38  0E00               	movlw	0
 36734  008A3A  22F4               	addwfc	prodh,f,c
 36735  008A3C  0E00               	movlw	low _swTimers
 36736  008A3E  24F3               	addwf	prodl,w,c
 36737  008A40  6ED9               	movwf	fsr2l,c
 36738  008A42  0E03               	movlw	high _swTimers
 36739  008A44  20F4               	addwfc	prodh,w,c
 36740  008A46  6EDA               	movwf	fsr2h,c
 36741  008A48  C062  FFDF         	movff	SwTimerSetCallback@callbackParameter,indf2
 36742                           
 36743                           ; BSR set to: 0
 36744  008A4C  0012               	return		;funcret
 36745  008A4E                     __end_of_SwTimerSetCallback:
 36746                           	opt stack 0
 36747                           tosu	equ	0xFFF
 36748                           tosh	equ	0xFFE
 36749                           tosl	equ	0xFFD
 36750                           pclath	equ	0xFFA
 36751                           tblptru	equ	0xFF8
 36752                           tblptrh	equ	0xFF7
 36753                           tblptrl	equ	0xFF6
 36754                           tablat	equ	0xFF5
 36755                           prodh	equ	0xFF4
 36756                           prodl	equ	0xFF3
 36757                           intcon	equ	0xFF2
 36758                           intcon2	equ	0xFF1
 36759                           intcon3	equ	0xFF0
 36760                           indf0	equ	0xFEF
 36761                           postinc0	equ	0xFEE
 36762                           plusw0	equ	0xFEB
 36763                           fsr0h	equ	0xFEA
 36764                           fsr0l	equ	0xFE9
 36765                           wreg	equ	0xFE8
 36766                           postinc1	equ	0xFE6
 36767                           postdec1	equ	0xFE5
 36768                           plusw1	equ	0xFE3
 36769                           fsr1h	equ	0xFE2
 36770                           fsr1l	equ	0xFE1
 36771                           indf2	equ	0xFDF
 36772                           postinc2	equ	0xFDE
 36773                           postdec2	equ	0xFDD
 36774                           plusw2	equ	0xFDB
 36775                           fsr2h	equ	0xFDA
 36776                           fsr2l	equ	0xFD9
 36777                           status	equ	0xFD8
 36778                           
 36779 ;; *************** function _RADIO_WriteMode *****************
 36780 ;; Defined at:
 36781 ;;		line 147 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 36782 ;; Parameters:    Size  Location     Type
 36783 ;;  newMode         1    wreg     enum E7718
 36784 ;;  newModulatio    1    5[BANK0 ] enum E6984
 36785 ;;  blocking        1    6[BANK0 ] unsigned char 
 36786 ;; Auto vars:     Size  Location     Type
 36787 ;;  newMode         1   10[BANK0 ] enum E7718
 36788 ;;  opMode          1   11[BANK0 ] unsigned char 
 36789 ;;  currentMode     1    9[BANK0 ] enum E7718
 36790 ;;  dioMapping      1    8[BANK0 ] unsigned char 
 36791 ;;  currentModul    1    7[BANK0 ] enum E6984
 36792 ;; Return value:  Size  Location     Type
 36793 ;;                  1    wreg      void 
 36794 ;; Registers used:
 36795 ;;		wreg, status,2, status,0, cstack
 36796 ;; Tracked objects:
 36797 ;;		On entry : 0/0
 36798 ;;		On exit  : 0/0
 36799 ;;		Unchanged: 0/0
 36800 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 36801 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 36802 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 36803 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 36804 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 36805 ;;Total ram usage:        7 bytes
 36806 ;; Hardware stack levels used:    1
 36807 ;; Hardware stack levels required when called:   10
 36808 ;; This function calls:
 36809 ;;		_HALDIO5PinValue
 36810 ;;		_RADIO_RegisterRead
 36811 ;;		_RADIO_RegisterWrite
 36812 ;;		_SystemBlockingWaitMs
 36813 ;; This function is called by:
 36814 ;;		_RADIO_Init
 36815 ;;		_RADIO_WriteConfiguration
 36816 ;;		_RADIO_Transmit
 36817 ;;		_RADIO_ReceiveStart
 36818 ;;		_RADIO_ReceiveStop
 36819 ;;		_RADIO_RxDone
 36820 ;;		_RADIO_FSKPayloadReady
 36821 ;;		_RADIO_RxTimeout
 36822 ;;		_RADIO_TxDone
 36823 ;;		_RADIO_FSKPacketSent
 36824 ;;		_RADIO_ReadRandom
 36825 ;;		_RADIO_RxFSKTimeout
 36826 ;;		_RADIO_WatchdogTimeout
 36827 ;;		_RADIO_StopCW
 36828 ;; This function uses a non-reentrant model
 36829 ;;
 36830                           
 36831                           	psect	text169
 36832  0063E8                     __ptext169:
 36833                           	opt stack 0
 36834  0063E8                     _RADIO_WriteMode:
 36835                           	opt stack 18
 36836                           
 36837                           ; BSR set to: 0
 36838                           ;incstack = 0
 36839                           ;RADIO_WriteMode@newMode stored from wreg
 36840  0063E8  0100               	movlb	0	; () banked
 36841  0063EA  6F6A               	movwf	RADIO_WriteMode@newMode& (0+255),b
 36842                           
 36843                           ;radio_driver_SX1276.c: 149: uint8_t opMode;
 36844                           ;radio_driver_SX1276.c: 150: uint8_t dioMapping;
 36845                           ;radio_driver_SX1276.c: 151: RadioModulation_t currentModulation;
 36846                           ;radio_driver_SX1276.c: 152: RadioMode_t currentMode;
 36847                           ;radio_driver_SX1276.c: 154: if ((MODULATION_FSK == newModulation) &&
 36848                           ;radio_driver_SX1276.c: 155: ((MODE_RXSINGLE == newMode) || (MODE_CAD == newMode)))
 36849  0063EC  0100               	movlb	0	; () banked
 36850  0063EE  5165               	movf	RADIO_WriteMode@newModulation& (0+255),w,b
 36851  0063F0  A4D8               	btfss	status,2,c
 36852  0063F2  D008               	goto	l160
 36853                           
 36854                           ; BSR set to: 0
 36855  0063F4  0E06               	movlw	6
 36856  0063F6  196A               	xorwf	RADIO_WriteMode@newMode& (0+255),w,b
 36857  0063F8  B4D8               	btfsc	status,2,c
 36858  0063FA  0012               	return	
 36859                           
 36860                           ; BSR set to: 0
 36861  0063FC  0E07               	movlw	7
 36862  0063FE  196A               	xorwf	RADIO_WriteMode@newMode& (0+255),w,b
 36863  006400  B4D8               	btfsc	status,2,c
 36864  006402  0012               	return	
 36865  006404                     l160:
 36866                           
 36867                           ; BSR set to: 0
 36868                           ;radio_driver_SX1276.c: 159: }
 36869                           ;radio_driver_SX1276.c: 162: newMode &= 0x07;
 36870                           
 36871                           ; BSR set to: 0
 36872  006404  0E07               	movlw	7
 36873  006406  176A               	andwf	RADIO_WriteMode@newMode& (0+255),f,b
 36874                           
 36875                           ;radio_driver_SX1276.c: 163: newModulation &= 0x01;
 36876  006408  0E01               	movlw	1
 36877  00640A  1765               	andwf	RADIO_WriteMode@newModulation& (0+255),f,b
 36878                           
 36879                           ; BSR set to: 0
 36880                           ;radio_driver_SX1276.c: 165: opMode = RADIO_RegisterRead(0x01);
 36881  00640C  0E01               	movlw	1
 36882  00640E  EC07  F048         	call	_RADIO_RegisterRead
 36883  006412  0100               	movlb	0	; () banked
 36884  006414  6F6B               	movwf	RADIO_WriteMode@opMode& (0+255),b
 36885                           
 36886                           ; BSR set to: 0
 36887                           ;radio_driver_SX1276.c: 167: if ((opMode & 0x80) != 0)
 36888  006416  AF6B               	btfss	RADIO_WriteMode@opMode& (0+255),7,b
 36889  006418  D002               	goto	l164
 36890                           
 36891                           ; BSR set to: 0
 36892                           ;radio_driver_SX1276.c: 168: {
 36893                           ;radio_driver_SX1276.c: 169: currentModulation = MODULATION_LORA;
 36894  00641A  0E01               	movlw	1
 36895  00641C  D001               	goto	L26
 36896  00641E                     l164:
 36897                           
 36898                           ; BSR set to: 0
 36899                           ;radio_driver_SX1276.c: 171: else
 36900                           ;radio_driver_SX1276.c: 172: {
 36901                           ;radio_driver_SX1276.c: 173: currentModulation = MODULATION_FSK;
 36902                           
 36903                           ; BSR set to: 0
 36904  00641E  0E00               	movlw	0
 36905  006420                     L26:
 36906  006420  6F67               	movwf	RADIO_WriteMode@currentModulation& (0+255),b
 36907                           
 36908                           ; BSR set to: 0
 36909                           ;radio_driver_SX1276.c: 174: }
 36910                           ;radio_driver_SX1276.c: 176: currentMode = opMode & 0x07;
 36911                           
 36912                           ; BSR set to: 0
 36913  006422  516B               	movf	RADIO_WriteMode@opMode& (0+255),w,b
 36914  006424  0B07               	andlw	7
 36915  006426  6F69               	movwf	RADIO_WriteMode@currentMode& (0+255),b
 36916                           
 36917                           ; BSR set to: 0
 36918                           ;radio_driver_SX1276.c: 180: if (newModulation != currentModulation)
 36919  006428  5167               	movf	RADIO_WriteMode@currentModulation& (0+255),w,b
 36920  00642A  1965               	xorwf	RADIO_WriteMode@newModulation& (0+255),w,b
 36921  00642C  B4D8               	btfsc	status,2,c
 36922  00642E  D01B               	goto	l166
 36923                           
 36924                           ; BSR set to: 0
 36925                           ;radio_driver_SX1276.c: 181: {
 36926                           ;radio_driver_SX1276.c: 183: if (MODE_SLEEP != currentMode)
 36927  006430  5169               	movf	RADIO_WriteMode@currentMode& (0+255),w,b
 36928  006432  B4D8               	btfsc	status,2,c
 36929  006434  D009               	goto	l167
 36930                           
 36931                           ; BSR set to: 0
 36932                           ;radio_driver_SX1276.c: 184: {
 36933                           ;radio_driver_SX1276.c: 186: RADIO_RegisterWrite(0x01, opMode & (~0x07));
 36934  006436  516B               	movf	RADIO_WriteMode@opMode& (0+255),w,b
 36935  006438  0BF8               	andlw	248
 36936  00643A  6F62               	movwf	RADIO_RegisterWrite@value& (0+255),b
 36937  00643C  0E01               	movlw	1
 36938  00643E  ECDE  F048         	call	_RADIO_RegisterWrite
 36939                           
 36940                           ;radio_driver_SX1276.c: 187: currentMode = MODE_SLEEP;
 36941  006442  0E00               	movlw	0
 36942  006444  0100               	movlb	0	; () banked
 36943  006446  6F69               	movwf	RADIO_WriteMode@currentMode& (0+255),b
 36944  006448                     l167:
 36945                           
 36946                           ; BSR set to: 0
 36947                           ;radio_driver_SX1276.c: 188: }
 36948                           ;radio_driver_SX1276.c: 190: if (MODULATION_FSK == newModulation)
 36949                           
 36950                           ; BSR set to: 0
 36951  006448  5165               	movf	RADIO_WriteMode@newModulation& (0+255),w,b
 36952  00644A  A4D8               	btfss	status,2,c
 36953  00644C  D003               	goto	l168
 36954                           
 36955                           ; BSR set to: 0
 36956                           ;radio_driver_SX1276.c: 191: {
 36957                           ;radio_driver_SX1276.c: 193: opMode = opMode & (~0x87);
 36958  00644E  516B               	movf	RADIO_WriteMode@opMode& (0+255),w,b
 36959  006450  0B78               	andlw	120
 36960  006452  D003               	goto	L27
 36961  006454                     l168:
 36962                           
 36963                           ; BSR set to: 0
 36964                           ;radio_driver_SX1276.c: 195: else
 36965                           ;radio_driver_SX1276.c: 196: {
 36966                           ;radio_driver_SX1276.c: 198: opMode = 0x80 | (opMode & (~0x87));
 36967                           
 36968                           ; BSR set to: 0
 36969  006454  516B               	movf	RADIO_WriteMode@opMode& (0+255),w,b
 36970  006456  0B78               	andlw	120
 36971  006458  0980               	iorlw	128
 36972  00645A                     L27:
 36973  00645A  6F6B               	movwf	RADIO_WriteMode@opMode& (0+255),b
 36974                           
 36975                           ; BSR set to: 0
 36976                           ;radio_driver_SX1276.c: 199: }
 36977                           ;radio_driver_SX1276.c: 200: RADIO_RegisterWrite(0x01, opMode);
 36978                           
 36979                           ; BSR set to: 0
 36980  00645C  C06B  F062         	movff	RADIO_WriteMode@opMode,RADIO_RegisterWrite@value
 36981  006460  0E01               	movlw	1
 36982  006462  ECDE  F048         	call	_RADIO_RegisterWrite
 36983  006466                     l166:
 36984                           
 36985                           ;radio_driver_SX1276.c: 201: }
 36986                           ;radio_driver_SX1276.c: 207: if (newMode != currentMode)
 36987  006466  0100               	movlb	0	; () banked
 36988  006468  5169               	movf	RADIO_WriteMode@currentMode& (0+255),w,b
 36989  00646A  196A               	xorwf	RADIO_WriteMode@newMode& (0+255),w,b
 36990  00646C  B4D8               	btfsc	status,2,c
 36991  00646E  0012               	return	
 36992                           
 36993                           ; BSR set to: 0
 36994                           ;radio_driver_SX1276.c: 208: {
 36995                           ;radio_driver_SX1276.c: 211: if ((MODE_SLEEP != newMode) && (1 == blocking))
 36996  006470  516A               	movf	RADIO_WriteMode@newMode& (0+255),w,b
 36997  006472  B4D8               	btfsc	status,2,c
 36998  006474  D015               	goto	l171
 36999                           
 37000                           ; BSR set to: 0
 37001  006476  0566               	decf	RADIO_WriteMode@blocking& (0+255),w,b
 37002  006478  A4D8               	btfss	status,2,c
 37003  00647A  D012               	goto	l171
 37004                           
 37005                           ; BSR set to: 0
 37006                           ;radio_driver_SX1276.c: 212: {
 37007                           ;radio_driver_SX1276.c: 213: dioMapping = RADIO_RegisterRead(0x41);
 37008  00647C  0E41               	movlw	65
 37009  00647E  EC07  F048         	call	_RADIO_RegisterRead
 37010  006482  0100               	movlb	0	; () banked
 37011  006484  6F68               	movwf	RADIO_WriteMode@dioMapping& (0+255),b
 37012                           
 37013                           ; BSR set to: 0
 37014                           ;radio_driver_SX1276.c: 214: if (MODULATION_FSK == newModulation)
 37015  006486  5165               	movf	RADIO_WriteMode@newModulation& (0+255),w,b
 37016  006488  A4D8               	btfss	status,2,c
 37017  00648A  D003               	goto	l172
 37018                           
 37019                           ; BSR set to: 0
 37020                           ;radio_driver_SX1276.c: 215: {
 37021                           ;radio_driver_SX1276.c: 217: dioMapping |= 0x30;
 37022  00648C  0E30               	movlw	48
 37023  00648E  1368               	iorwf	RADIO_WriteMode@dioMapping& (0+255),f,b
 37024                           
 37025                           ;radio_driver_SX1276.c: 218: }
 37026  006490  D002               	goto	l173
 37027  006492                     l172:
 37028                           
 37029                           ; BSR set to: 0
 37030                           ;radio_driver_SX1276.c: 219: else
 37031                           ;radio_driver_SX1276.c: 220: {
 37032                           ;radio_driver_SX1276.c: 222: dioMapping &= ~0x30;
 37033                           
 37034                           ; BSR set to: 0
 37035  006492  0ECF               	movlw	207
 37036  006494  1768               	andwf	RADIO_WriteMode@dioMapping& (0+255),f,b
 37037  006496                     l173:
 37038                           
 37039                           ; BSR set to: 0
 37040                           ;radio_driver_SX1276.c: 223: }
 37041                           ;radio_driver_SX1276.c: 224: RADIO_RegisterWrite(0x41, dioMapping);
 37042                           
 37043                           ; BSR set to: 0
 37044  006496  C068  F062         	movff	RADIO_WriteMode@dioMapping,RADIO_RegisterWrite@value
 37045  00649A  0E41               	movlw	65
 37046  00649C  ECDE  F048         	call	_RADIO_RegisterWrite
 37047  0064A0                     l171:
 37048                           
 37049                           ;radio_driver_SX1276.c: 225: }
 37050                           ;radio_driver_SX1276.c: 228: opMode &= ~0x07;
 37051  0064A0  0EF8               	movlw	248
 37052  0064A2  0100               	movlb	0	; () banked
 37053  0064A4  176B               	andwf	RADIO_WriteMode@opMode& (0+255),f,b
 37054                           
 37055                           ; BSR set to: 0
 37056                           ;radio_driver_SX1276.c: 229: opMode |= newMode;
 37057  0064A6  516A               	movf	RADIO_WriteMode@newMode& (0+255),w,b
 37058  0064A8  136B               	iorwf	RADIO_WriteMode@opMode& (0+255),f,b
 37059                           
 37060                           ; BSR set to: 0
 37061                           ;radio_driver_SX1276.c: 230: RADIO_RegisterWrite(0x01, opMode);
 37062  0064AA  C06B  F062         	movff	RADIO_WriteMode@opMode,RADIO_RegisterWrite@value
 37063  0064AE  0E01               	movlw	1
 37064  0064B0  ECDE  F048         	call	_RADIO_RegisterWrite
 37065                           
 37066                           ;radio_driver_SX1276.c: 233: if (1 == blocking)
 37067  0064B4  0100               	movlb	0	; () banked
 37068  0064B6  0566               	decf	RADIO_WriteMode@blocking& (0+255),w,b
 37069  0064B8  A4D8               	btfss	status,2,c
 37070  0064BA  0012               	return	
 37071                           
 37072                           ; BSR set to: 0
 37073                           ;radio_driver_SX1276.c: 234: {
 37074                           ;radio_driver_SX1276.c: 235: if (MODE_SLEEP != newMode)
 37075  0064BC  516A               	movf	RADIO_WriteMode@newMode& (0+255),w,b
 37076  0064BE  B4D8               	btfsc	status,2,c
 37077  0064C0  D006               	goto	l175
 37078  0064C2                     u8100:
 37079                           
 37080                           ; BSR set to: 0
 37081                           
 37082                           ;radio_driver_SX1276.c: 238: ;
 37083                           
 37084                           ; BSR set to: 0
 37085                           
 37086                           ; BSR set to: 0
 37087                           ;radio_driver_SX1276.c: 236: {
 37088                           ;radio_driver_SX1276.c: 237: while (HALDIO5PinValue() == 0)
 37089  0064C2  EC54  F04A         	call	_HALDIO5PinValue	;wreg free
 37090  0064C6  0900               	iorlw	0
 37091  0064C8  A4D8               	btfss	status,2,c
 37092  0064CA  0012               	return	
 37093  0064CC  D7FA               	goto	u8100
 37094  0064CE                     l175:
 37095                           
 37096                           ;radio_driver_SX1276.c: 240: else
 37097                           ;radio_driver_SX1276.c: 241: {
 37098                           ;radio_driver_SX1276.c: 242: SystemBlockingWaitMs(1);
 37099  0064CE  0E01               	movlw	1
 37100  0064D0  0100               	movlb	0	; () banked
 37101  0064D2  6F60               	movwf	SystemBlockingWaitMs@ms& (0+255),b
 37102  0064D4  0E00               	movlw	0
 37103  0064D6  6F61               	movwf	(SystemBlockingWaitMs@ms+1)& (0+255),b
 37104  0064D8  0E00               	movlw	0
 37105  0064DA  6F62               	movwf	(SystemBlockingWaitMs@ms+2)& (0+255),b
 37106  0064DC  0E00               	movlw	0
 37107  0064DE  6F63               	movwf	(SystemBlockingWaitMs@ms+3)& (0+255),b
 37108  0064E0  ECBE  F046         	call	_SystemBlockingWaitMs	;wreg free
 37109  0064E4  0012               	return	
 37110  0064E6                     __end_of_RADIO_WriteMode:
 37111                           	opt stack 0
 37112                           tosu	equ	0xFFF
 37113                           tosh	equ	0xFFE
 37114                           tosl	equ	0xFFD
 37115                           pclath	equ	0xFFA
 37116                           tblptru	equ	0xFF8
 37117                           tblptrh	equ	0xFF7
 37118                           tblptrl	equ	0xFF6
 37119                           tablat	equ	0xFF5
 37120                           prodh	equ	0xFF4
 37121                           prodl	equ	0xFF3
 37122                           intcon	equ	0xFF2
 37123                           intcon2	equ	0xFF1
 37124                           intcon3	equ	0xFF0
 37125                           indf0	equ	0xFEF
 37126                           postinc0	equ	0xFEE
 37127                           plusw0	equ	0xFEB
 37128                           fsr0h	equ	0xFEA
 37129                           fsr0l	equ	0xFE9
 37130                           wreg	equ	0xFE8
 37131                           postinc1	equ	0xFE6
 37132                           postdec1	equ	0xFE5
 37133                           plusw1	equ	0xFE3
 37134                           fsr1h	equ	0xFE2
 37135                           fsr1l	equ	0xFE1
 37136                           indf2	equ	0xFDF
 37137                           postinc2	equ	0xFDE
 37138                           postdec2	equ	0xFDD
 37139                           plusw2	equ	0xFDB
 37140                           fsr2h	equ	0xFDA
 37141                           fsr2l	equ	0xFD9
 37142                           status	equ	0xFD8
 37143                           
 37144 ;; *************** function _RADIO_RegisterRead *****************
 37145 ;; Defined at:
 37146 ;;		line 134 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 37147 ;; Parameters:    Size  Location     Type
 37148 ;;  reg             1    wreg     unsigned char 
 37149 ;; Auto vars:     Size  Location     Type
 37150 ;;  reg             1    2[BANK0 ] unsigned char 
 37151 ;;  readValue       1    3[BANK0 ] unsigned char 
 37152 ;; Return value:  Size  Location     Type
 37153 ;;                  1    wreg      unsigned char 
 37154 ;; Registers used:
 37155 ;;		wreg, status,2, status,0, cstack
 37156 ;; Tracked objects:
 37157 ;;		On entry : 0/0
 37158 ;;		On exit  : 0/0
 37159 ;;		Unchanged: 0/0
 37160 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 37161 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 37162 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 37163 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 37164 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 37165 ;;Total ram usage:        2 bytes
 37166 ;; Hardware stack levels used:    1
 37167 ;; Hardware stack levels required when called:    9
 37168 ;; This function calls:
 37169 ;;		_HALSPICSAssert
 37170 ;;		_HALSPICSDeassert
 37171 ;;		_HALSPISend
 37172 ;; This function is called by:
 37173 ;;		_RADIO_WriteMode
 37174 ;;		_RADIO_WritePower
 37175 ;;		_RADIO_Init
 37176 ;;		_RADIO_WriteConfiguration
 37177 ;;		_RADIO_Transmit
 37178 ;;		_RADIO_RxDone
 37179 ;;		_RADIO_FSKPayloadReady
 37180 ;;		_RADIO_FSKPacketSent
 37181 ;;		_RADIO_FHSSChangeChannel
 37182 ;;		_RADIO_DIO0
 37183 ;;		_RADIO_DIO1
 37184 ;;		_RADIO_DIO2
 37185 ;;		_RADIO_DIO3
 37186 ;;		_RADIO_DIO4
 37187 ;;		_RADIO_DIO5
 37188 ;;		_RADIO_ReadRandom
 37189 ;;		_RADIO_RxFSKTimeout
 37190 ;; This function uses a non-reentrant model
 37191 ;;
 37192                           
 37193                           	psect	text170
 37194  00900E                     __ptext170:
 37195                           	opt stack 0
 37196  00900E                     _RADIO_RegisterRead:
 37197                           	opt stack 18
 37198                           
 37199                           ;incstack = 0
 37200                           ;RADIO_RegisterRead@reg stored from wreg
 37201  00900E  0100               	movlb	0	; () banked
 37202  009010  6F62               	movwf	RADIO_RegisterRead@reg& (0+255),b
 37203                           
 37204                           ;radio_driver_SX1276.c: 136: uint8_t readValue;
 37205                           ;radio_driver_SX1276.c: 137: reg &= 0x7F;
 37206  009012  0100               	movlb	0	; () banked
 37207  009014  9F62               	bcf	RADIO_RegisterRead@reg& (0+255),7,b
 37208                           
 37209                           ; BSR set to: 0
 37210                           ;radio_driver_SX1276.c: 138: HALSPICSAssert();
 37211  009016  ECEF  F04A         	call	_HALSPICSAssert	;wreg free
 37212                           
 37213                           ;radio_driver_SX1276.c: 139: HALSPISend(reg);
 37214  00901A  0100               	movlb	0	; () banked
 37215  00901C  5162               	movf	RADIO_RegisterRead@reg& (0+255),w,b
 37216  00901E  EC47  F04A         	call	_HALSPISend
 37217                           
 37218                           ;radio_driver_SX1276.c: 140: readValue = HALSPISend(0xFF);
 37219  009022  0EFF               	movlw	255
 37220  009024  EC47  F04A         	call	_HALSPISend
 37221  009028  0100               	movlb	0	; () banked
 37222  00902A  6F63               	movwf	RADIO_RegisterRead@readValue& (0+255),b
 37223                           
 37224                           ; BSR set to: 0
 37225                           ;radio_driver_SX1276.c: 141: HALSPICSDeassert();
 37226  00902C  ECED  F04A         	call	_HALSPICSDeassert	;wreg free
 37227                           
 37228                           ;radio_driver_SX1276.c: 142: return readValue;
 37229  009030  0100               	movlb	0	; () banked
 37230  009032  5163               	movf	RADIO_RegisterRead@readValue& (0+255),w,b
 37231  009034  0012               	return	
 37232  009036                     __end_of_RADIO_RegisterRead:
 37233                           	opt stack 0
 37234                           tosu	equ	0xFFF
 37235                           tosh	equ	0xFFE
 37236                           tosl	equ	0xFFD
 37237                           pclath	equ	0xFFA
 37238                           tblptru	equ	0xFF8
 37239                           tblptrh	equ	0xFF7
 37240                           tblptrl	equ	0xFF6
 37241                           tablat	equ	0xFF5
 37242                           prodh	equ	0xFF4
 37243                           prodl	equ	0xFF3
 37244                           intcon	equ	0xFF2
 37245                           intcon2	equ	0xFF1
 37246                           intcon3	equ	0xFF0
 37247                           indf0	equ	0xFEF
 37248                           postinc0	equ	0xFEE
 37249                           plusw0	equ	0xFEB
 37250                           fsr0h	equ	0xFEA
 37251                           fsr0l	equ	0xFE9
 37252                           wreg	equ	0xFE8
 37253                           postinc1	equ	0xFE6
 37254                           postdec1	equ	0xFE5
 37255                           plusw1	equ	0xFE3
 37256                           fsr1h	equ	0xFE2
 37257                           fsr1l	equ	0xFE1
 37258                           indf2	equ	0xFDF
 37259                           postinc2	equ	0xFDE
 37260                           postdec2	equ	0xFDD
 37261                           plusw2	equ	0xFDB
 37262                           fsr2h	equ	0xFDA
 37263                           fsr2l	equ	0xFD9
 37264                           status	equ	0xFD8
 37265                           
 37266 ;; *************** function _HALDIO5PinValue *****************
 37267 ;; Defined at:
 37268 ;;		line 95 in file "mcc_generated_files/LoRaWAN/radio_driver_hal.c"
 37269 ;; Parameters:    Size  Location     Type
 37270 ;;		None
 37271 ;; Auto vars:     Size  Location     Type
 37272 ;;		None
 37273 ;; Return value:  Size  Location     Type
 37274 ;;                  1    wreg      unsigned char 
 37275 ;; Registers used:
 37276 ;;		wreg
 37277 ;; Tracked objects:
 37278 ;;		On entry : 0/0
 37279 ;;		On exit  : 0/0
 37280 ;;		Unchanged: 0/0
 37281 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 37282 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 37283 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 37284 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 37285 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 37286 ;;Total ram usage:        0 bytes
 37287 ;; Hardware stack levels used:    1
 37288 ;; Hardware stack levels required when called:    7
 37289 ;; This function calls:
 37290 ;;		Nothing
 37291 ;; This function is called by:
 37292 ;;		_RADIO_WriteMode
 37293 ;; This function uses a non-reentrant model
 37294 ;;
 37295                           
 37296                           	psect	text171
 37297  0094A8                     __ptext171:
 37298                           	opt stack 0
 37299  0094A8                     _HALDIO5PinValue:
 37300                           	opt stack 20
 37301                           
 37302                           ;radio_driver_hal.c: 97: return PORTBbits.RB0;
 37303                           
 37304                           ; BSR set to: 0
 37305                           ;incstack = 0
 37306  0094A8  A081               	btfss	3969,0,c	;volatile
 37307  0094AA  D002               	goto	u7690
 37308  0094AC  0E01               	movlw	1
 37309  0094AE  0012               	return	
 37310  0094B0                     u7690:
 37311  0094B0  0E00               	movlw	0
 37312  0094B2  0012               	return	
 37313  0094B4                     __end_of_HALDIO5PinValue:
 37314                           	opt stack 0
 37315                           tosu	equ	0xFFF
 37316                           tosh	equ	0xFFE
 37317                           tosl	equ	0xFFD
 37318                           pclath	equ	0xFFA
 37319                           tblptru	equ	0xFF8
 37320                           tblptrh	equ	0xFF7
 37321                           tblptrl	equ	0xFF6
 37322                           tablat	equ	0xFF5
 37323                           prodh	equ	0xFF4
 37324                           prodl	equ	0xFF3
 37325                           intcon	equ	0xFF2
 37326                           intcon2	equ	0xFF1
 37327                           intcon3	equ	0xFF0
 37328                           indf0	equ	0xFEF
 37329                           postinc0	equ	0xFEE
 37330                           plusw0	equ	0xFEB
 37331                           fsr0h	equ	0xFEA
 37332                           fsr0l	equ	0xFE9
 37333                           wreg	equ	0xFE8
 37334                           postinc1	equ	0xFE6
 37335                           postdec1	equ	0xFE5
 37336                           plusw1	equ	0xFE3
 37337                           fsr1h	equ	0xFE2
 37338                           fsr1l	equ	0xFE1
 37339                           indf2	equ	0xFDF
 37340                           postinc2	equ	0xFDE
 37341                           postdec2	equ	0xFDD
 37342                           plusw2	equ	0xFDB
 37343                           fsr2h	equ	0xFDA
 37344                           fsr2l	equ	0xFD9
 37345                           status	equ	0xFD8
 37346                           
 37347 ;; *************** function _RADIO_WriteFrequency *****************
 37348 ;; Defined at:
 37349 ;;		line 262 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 37350 ;; Parameters:    Size  Location     Type
 37351 ;;  frequency       4   13[BANK0 ] unsigned long 
 37352 ;; Auto vars:     Size  Location     Type
 37353 ;;  num             4   21[BANK0 ] unsigned long 
 37354 ;;  num_mod         4   17[BANK0 ] unsigned long 
 37355 ;; Return value:  Size  Location     Type
 37356 ;;                  1    wreg      void 
 37357 ;; Registers used:
 37358 ;;		wreg, status,2, status,0, cstack
 37359 ;; Tracked objects:
 37360 ;;		On entry : 0/0
 37361 ;;		On exit  : 0/0
 37362 ;;		Unchanged: 0/0
 37363 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 37364 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 37365 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 37366 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 37367 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 37368 ;;Total ram usage:       12 bytes
 37369 ;; Hardware stack levels used:    1
 37370 ;; Hardware stack levels required when called:   10
 37371 ;; This function calls:
 37372 ;;		_RADIO_RegisterWrite
 37373 ;;		___lldiv
 37374 ;;		___llmod
 37375 ;; This function is called by:
 37376 ;;		_RADIO_Init
 37377 ;;		_RADIO_WriteConfiguration
 37378 ;;		_RADIO_FHSSChangeChannel
 37379 ;; This function uses a non-reentrant model
 37380 ;;
 37381                           
 37382                           	psect	text172
 37383  0067C4                     __ptext172:
 37384                           	opt stack 0
 37385  0067C4                     _RADIO_WriteFrequency:
 37386                           	opt stack 17
 37387                           
 37388                           ;radio_driver_SX1276.c: 264: uint32_t num, num_mod;
 37389                           ;radio_driver_SX1276.c: 272: num = frequency / 15625;
 37390                           
 37391                           ;incstack = 0
 37392  0067C4  C06D  F060         	movff	RADIO_WriteFrequency@frequency,___lldiv@dividend
 37393  0067C8  C06E  F061         	movff	RADIO_WriteFrequency@frequency+1,___lldiv@dividend+1
 37394  0067CC  C06F  F062         	movff	RADIO_WriteFrequency@frequency+2,___lldiv@dividend+2
 37395  0067D0  C070  F063         	movff	RADIO_WriteFrequency@frequency+3,___lldiv@dividend+3
 37396  0067D4  0E09               	movlw	9
 37397  0067D6  0100               	movlb	0	; () banked
 37398  0067D8  6F64               	movwf	___lldiv@divisor& (0+255),b
 37399  0067DA  0E3D               	movlw	61
 37400  0067DC  6F65               	movwf	(___lldiv@divisor+1)& (0+255),b
 37401  0067DE  0E00               	movlw	0
 37402  0067E0  6F66               	movwf	(___lldiv@divisor+2)& (0+255),b
 37403  0067E2  0E00               	movlw	0
 37404  0067E4  6F67               	movwf	(___lldiv@divisor+3)& (0+255),b
 37405  0067E6  EC0A  F03D         	call	___lldiv	;wreg free
 37406  0067EA  C060  F075         	movff	?___lldiv,RADIO_WriteFrequency@num
 37407  0067EE  C061  F076         	movff	?___lldiv+1,RADIO_WriteFrequency@num+1
 37408  0067F2  C062  F077         	movff	?___lldiv+2,RADIO_WriteFrequency@num+2
 37409  0067F6  C063  F078         	movff	?___lldiv+3,RADIO_WriteFrequency@num+3
 37410                           
 37411                           ;radio_driver_SX1276.c: 273: num_mod = frequency % 15625;
 37412  0067FA  C06D  F060         	movff	RADIO_WriteFrequency@frequency,___llmod@dividend
 37413  0067FE  C06E  F061         	movff	RADIO_WriteFrequency@frequency+1,___llmod@dividend+1
 37414  006802  C06F  F062         	movff	RADIO_WriteFrequency@frequency+2,___llmod@dividend+2
 37415  006806  C070  F063         	movff	RADIO_WriteFrequency@frequency+3,___llmod@dividend+3
 37416  00680A  0E09               	movlw	9
 37417  00680C  0100               	movlb	0	; () banked
 37418  00680E  6F64               	movwf	___llmod@divisor& (0+255),b
 37419  006810  0E3D               	movlw	61
 37420  006812  6F65               	movwf	(___llmod@divisor+1)& (0+255),b
 37421  006814  0E00               	movlw	0
 37422  006816  6F66               	movwf	(___llmod@divisor+2)& (0+255),b
 37423  006818  0E00               	movlw	0
 37424  00681A  6F67               	movwf	(___llmod@divisor+3)& (0+255),b
 37425  00681C  ECCE  F03F         	call	___llmod	;wreg free
 37426  006820  C060  F071         	movff	?___llmod,RADIO_WriteFrequency@num_mod
 37427  006824  C061  F072         	movff	?___llmod+1,RADIO_WriteFrequency@num_mod+1
 37428  006828  C062  F073         	movff	?___llmod+2,RADIO_WriteFrequency@num_mod+2
 37429  00682C  C063  F074         	movff	?___llmod+3,RADIO_WriteFrequency@num_mod+3
 37430                           
 37431                           ;radio_driver_SX1276.c: 277: num <<= (8);
 37432  006830  C077  F078         	movff	RADIO_WriteFrequency@num+2,RADIO_WriteFrequency@num+3
 37433  006834  C076  F077         	movff	RADIO_WriteFrequency@num+1,RADIO_WriteFrequency@num+2
 37434  006838  C075  F076         	movff	RADIO_WriteFrequency@num,RADIO_WriteFrequency@num+1
 37435  00683C  0100               	movlb	0	; () banked
 37436  00683E  6B75               	clrf	RADIO_WriteFrequency@num& (0+255),b
 37437                           
 37438                           ; BSR set to: 0
 37439                           ;radio_driver_SX1276.c: 278: num_mod <<= (8);
 37440  006840  C073  F074         	movff	RADIO_WriteFrequency@num_mod+2,RADIO_WriteFrequency@num_mod+3
 37441  006844  C072  F073         	movff	RADIO_WriteFrequency@num_mod+1,RADIO_WriteFrequency@num_mod+2
 37442  006848  C071  F072         	movff	RADIO_WriteFrequency@num_mod,RADIO_WriteFrequency@num_mod+1
 37443  00684C  6B71               	clrf	RADIO_WriteFrequency@num_mod& (0+255),b
 37444                           
 37445                           ;radio_driver_SX1276.c: 282: num_mod = num_mod / 15625;
 37446  00684E  C071  F060         	movff	RADIO_WriteFrequency@num_mod,___lldiv@dividend
 37447  006852  C072  F061         	movff	RADIO_WriteFrequency@num_mod+1,___lldiv@dividend+1
 37448  006856  C073  F062         	movff	RADIO_WriteFrequency@num_mod+2,___lldiv@dividend+2
 37449  00685A  C074  F063         	movff	RADIO_WriteFrequency@num_mod+3,___lldiv@dividend+3
 37450  00685E  0E09               	movlw	9
 37451  006860  6F64               	movwf	___lldiv@divisor& (0+255),b
 37452  006862  0E3D               	movlw	61
 37453  006864  6F65               	movwf	(___lldiv@divisor+1)& (0+255),b
 37454  006866  0E00               	movlw	0
 37455  006868  6F66               	movwf	(___lldiv@divisor+2)& (0+255),b
 37456  00686A  0E00               	movlw	0
 37457  00686C  6F67               	movwf	(___lldiv@divisor+3)& (0+255),b
 37458  00686E  EC0A  F03D         	call	___lldiv	;wreg free
 37459  006872  C060  F071         	movff	?___lldiv,RADIO_WriteFrequency@num_mod
 37460  006876  C061  F072         	movff	?___lldiv+1,RADIO_WriteFrequency@num_mod+1
 37461  00687A  C062  F073         	movff	?___lldiv+2,RADIO_WriteFrequency@num_mod+2
 37462  00687E  C063  F074         	movff	?___lldiv+3,RADIO_WriteFrequency@num_mod+3
 37463                           
 37464                           ;radio_driver_SX1276.c: 283: num += num_mod;
 37465  006882  0100               	movlb	0	; () banked
 37466  006884  5171               	movf	RADIO_WriteFrequency@num_mod& (0+255),w,b
 37467  006886  2775               	addwf	RADIO_WriteFrequency@num& (0+255),f,b
 37468  006888  5172               	movf	(RADIO_WriteFrequency@num_mod+1)& (0+255),w,b
 37469  00688A  2376               	addwfc	(RADIO_WriteFrequency@num+1)& (0+255),f,b
 37470  00688C  5173               	movf	(RADIO_WriteFrequency@num_mod+2)& (0+255),w,b
 37471  00688E  2377               	addwfc	(RADIO_WriteFrequency@num+2)& (0+255),f,b
 37472  006890  5174               	movf	(RADIO_WriteFrequency@num_mod+3)& (0+255),w,b
 37473  006892  2378               	addwfc	(RADIO_WriteFrequency@num+3)& (0+255),f,b
 37474                           
 37475                           ; BSR set to: 0
 37476                           ;radio_driver_SX1276.c: 287: RADIO_RegisterWrite(0x06, (num >> (16)) & 0xFF);
 37477  006894  C077  F062         	movff	RADIO_WriteFrequency@num+2,RADIO_RegisterWrite@value
 37478  006898  0E06               	movlw	6
 37479  00689A  ECDE  F048         	call	_RADIO_RegisterWrite
 37480                           
 37481                           ;radio_driver_SX1276.c: 288: RADIO_RegisterWrite(0x07, (num >> (8)) & 0xFF);
 37482  00689E  C076  F062         	movff	RADIO_WriteFrequency@num+1,RADIO_RegisterWrite@value
 37483  0068A2  0E07               	movlw	7
 37484  0068A4  ECDE  F048         	call	_RADIO_RegisterWrite
 37485                           
 37486                           ;radio_driver_SX1276.c: 289: RADIO_RegisterWrite(0x08, num & 0xFF);
 37487  0068A8  C075  F062         	movff	RADIO_WriteFrequency@num,RADIO_RegisterWrite@value
 37488  0068AC  0E08               	movlw	8
 37489  0068AE  ECDE  F048         	call	_RADIO_RegisterWrite
 37490  0068B2  0012               	return		;funcret
 37491  0068B4                     __end_of_RADIO_WriteFrequency:
 37492                           	opt stack 0
 37493                           tosu	equ	0xFFF
 37494                           tosh	equ	0xFFE
 37495                           tosl	equ	0xFFD
 37496                           pclath	equ	0xFFA
 37497                           tblptru	equ	0xFF8
 37498                           tblptrh	equ	0xFF7
 37499                           tblptrl	equ	0xFF6
 37500                           tablat	equ	0xFF5
 37501                           prodh	equ	0xFF4
 37502                           prodl	equ	0xFF3
 37503                           intcon	equ	0xFF2
 37504                           intcon2	equ	0xFF1
 37505                           intcon3	equ	0xFF0
 37506                           indf0	equ	0xFEF
 37507                           postinc0	equ	0xFEE
 37508                           plusw0	equ	0xFEB
 37509                           fsr0h	equ	0xFEA
 37510                           fsr0l	equ	0xFE9
 37511                           wreg	equ	0xFE8
 37512                           postinc1	equ	0xFE6
 37513                           postdec1	equ	0xFE5
 37514                           plusw1	equ	0xFE3
 37515                           fsr1h	equ	0xFE2
 37516                           fsr1l	equ	0xFE1
 37517                           indf2	equ	0xFDF
 37518                           postinc2	equ	0xFDE
 37519                           postdec2	equ	0xFDD
 37520                           plusw2	equ	0xFDB
 37521                           fsr2h	equ	0xFDA
 37522                           fsr2l	equ	0xFD9
 37523                           status	equ	0xFD8
 37524                           
 37525 ;; *************** function ___llmod *****************
 37526 ;; Defined at:
 37527 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\llmod.c"
 37528 ;; Parameters:    Size  Location     Type
 37529 ;;  dividend        4    0[BANK0 ] unsigned long 
 37530 ;;  divisor         4    4[BANK0 ] unsigned long 
 37531 ;; Auto vars:     Size  Location     Type
 37532 ;;  counter         1    8[BANK0 ] unsigned char 
 37533 ;; Return value:  Size  Location     Type
 37534 ;;                  4    0[BANK0 ] unsigned long 
 37535 ;; Registers used:
 37536 ;;		wreg, status,2, status,0
 37537 ;; Tracked objects:
 37538 ;;		On entry : 0/0
 37539 ;;		On exit  : 0/0
 37540 ;;		Unchanged: 0/0
 37541 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 37542 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 37543 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 37544 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 37545 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 37546 ;;Total ram usage:        9 bytes
 37547 ;; Hardware stack levels used:    1
 37548 ;; Hardware stack levels required when called:    7
 37549 ;; This function calls:
 37550 ;;		Nothing
 37551 ;; This function is called by:
 37552 ;;		_RADIO_WriteFrequency
 37553 ;; This function uses a non-reentrant model
 37554 ;;
 37555                           
 37556                           	psect	text173
 37557  007F9C                     __ptext173:
 37558                           	opt stack 0
 37559  007F9C                     ___llmod:
 37560                           	opt stack 19
 37561                           
 37562                           ;incstack = 0
 37563  007F9C  0100               	movlb	0	; () banked
 37564  007F9E  5164               	movf	___llmod@divisor& (0+255),w,b
 37565  007FA0  1165               	iorwf	(___llmod@divisor+1)& (0+255),w,b
 37566  007FA2  1166               	iorwf	(___llmod@divisor+2)& (0+255),w,b
 37567  007FA4  1167               	iorwf	(___llmod@divisor+3)& (0+255),w,b
 37568  007FA6  B4D8               	btfsc	status,2,c
 37569  007FA8  D024               	goto	l3197
 37570                           
 37571                           ; BSR set to: 0
 37572  007FAA  0E01               	movlw	1
 37573  007FAC  6F68               	movwf	___llmod@counter& (0+255),b
 37574  007FAE  D006               	goto	l3192
 37575  007FB0                     
 37576                           ; BSR set to: 0
 37577                           
 37578                           ; BSR set to: 0
 37579  007FB0  90D8               	bcf	status,0,c
 37580  007FB2  3764               	rlcf	___llmod@divisor& (0+255),f,b
 37581  007FB4  3765               	rlcf	(___llmod@divisor+1)& (0+255),f,b
 37582  007FB6  3766               	rlcf	(___llmod@divisor+2)& (0+255),f,b
 37583  007FB8  3767               	rlcf	(___llmod@divisor+3)& (0+255),f,b
 37584  007FBA  2B68               	incf	___llmod@counter& (0+255),f,b
 37585  007FBC                     l3192:
 37586                           
 37587                           ; BSR set to: 0
 37588                           
 37589                           ; BSR set to: 0
 37590  007FBC  AF67               	btfss	(___llmod@divisor+3)& (0+255),7,b
 37591  007FBE  D7F8               	goto	l3193
 37592  007FC0                     u7920:
 37593                           
 37594                           ; BSR set to: 0
 37595                           
 37596                           ; BSR set to: 0
 37597                           
 37598                           ; BSR set to: 0
 37599  007FC0  5164               	movf	___llmod@divisor& (0+255),w,b
 37600  007FC2  5D60               	subwf	___llmod@dividend& (0+255),w,b
 37601  007FC4  5165               	movf	(___llmod@divisor+1)& (0+255),w,b
 37602  007FC6  5961               	subwfb	(___llmod@dividend+1)& (0+255),w,b
 37603  007FC8  5166               	movf	(___llmod@divisor+2)& (0+255),w,b
 37604  007FCA  5962               	subwfb	(___llmod@dividend+2)& (0+255),w,b
 37605  007FCC  5167               	movf	(___llmod@divisor+3)& (0+255),w,b
 37606  007FCE  5963               	subwfb	(___llmod@dividend+3)& (0+255),w,b
 37607  007FD0  A0D8               	btfss	status,0,c
 37608  007FD2  D008               	goto	l3196
 37609                           
 37610                           ; BSR set to: 0
 37611  007FD4  5164               	movf	___llmod@divisor& (0+255),w,b
 37612  007FD6  5F60               	subwf	___llmod@dividend& (0+255),f,b
 37613  007FD8  5165               	movf	(___llmod@divisor+1)& (0+255),w,b
 37614  007FDA  5B61               	subwfb	(___llmod@dividend+1)& (0+255),f,b
 37615  007FDC  5166               	movf	(___llmod@divisor+2)& (0+255),w,b
 37616  007FDE  5B62               	subwfb	(___llmod@dividend+2)& (0+255),f,b
 37617  007FE0  5167               	movf	(___llmod@divisor+3)& (0+255),w,b
 37618  007FE2  5B63               	subwfb	(___llmod@dividend+3)& (0+255),f,b
 37619  007FE4                     l3196:
 37620                           
 37621                           ; BSR set to: 0
 37622                           
 37623                           ; BSR set to: 0
 37624  007FE4  90D8               	bcf	status,0,c
 37625  007FE6  3367               	rrcf	(___llmod@divisor+3)& (0+255),f,b
 37626  007FE8  3366               	rrcf	(___llmod@divisor+2)& (0+255),f,b
 37627  007FEA  3365               	rrcf	(___llmod@divisor+1)& (0+255),f,b
 37628  007FEC  3364               	rrcf	___llmod@divisor& (0+255),f,b
 37629                           
 37630                           ; BSR set to: 0
 37631  007FEE  2F68               	decfsz	___llmod@counter& (0+255),f,b
 37632  007FF0  D7E7               	goto	u7920
 37633  007FF2                     l3197:
 37634                           
 37635                           ; BSR set to: 0
 37636                           
 37637                           ; BSR set to: 0
 37638  007FF2  C060  F060         	movff	___llmod@dividend,?___llmod
 37639  007FF6  C061  F061         	movff	___llmod@dividend+1,?___llmod+1
 37640  007FFA  C062  F062         	movff	___llmod@dividend+2,?___llmod+2
 37641  007FFE  C063  F063         	movff	___llmod@dividend+3,?___llmod+3
 37642                           
 37643                           ; BSR set to: 0
 37644  008002  0012               	return		;funcret
 37645  008004                     __end_of___llmod:
 37646                           	opt stack 0
 37647                           tosu	equ	0xFFF
 37648                           tosh	equ	0xFFE
 37649                           tosl	equ	0xFFD
 37650                           pclath	equ	0xFFA
 37651                           tblptru	equ	0xFF8
 37652                           tblptrh	equ	0xFF7
 37653                           tblptrl	equ	0xFF6
 37654                           tablat	equ	0xFF5
 37655                           prodh	equ	0xFF4
 37656                           prodl	equ	0xFF3
 37657                           intcon	equ	0xFF2
 37658                           intcon2	equ	0xFF1
 37659                           intcon3	equ	0xFF0
 37660                           indf0	equ	0xFEF
 37661                           postinc0	equ	0xFEE
 37662                           plusw0	equ	0xFEB
 37663                           fsr0h	equ	0xFEA
 37664                           fsr0l	equ	0xFE9
 37665                           wreg	equ	0xFE8
 37666                           postinc1	equ	0xFE6
 37667                           postdec1	equ	0xFE5
 37668                           plusw1	equ	0xFE3
 37669                           fsr1h	equ	0xFE2
 37670                           fsr1l	equ	0xFE1
 37671                           indf2	equ	0xFDF
 37672                           postinc2	equ	0xFDE
 37673                           postdec2	equ	0xFDD
 37674                           plusw2	equ	0xFDB
 37675                           fsr2h	equ	0xFDA
 37676                           fsr2l	equ	0xFD9
 37677                           status	equ	0xFD8
 37678                           
 37679 ;; *************** function _RADIO_RegisterWrite *****************
 37680 ;; Defined at:
 37681 ;;		line 126 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 37682 ;; Parameters:    Size  Location     Type
 37683 ;;  reg             1    wreg     unsigned char 
 37684 ;;  value           1    2[BANK0 ] unsigned char 
 37685 ;; Auto vars:     Size  Location     Type
 37686 ;;  reg             1    3[BANK0 ] unsigned char 
 37687 ;; Return value:  Size  Location     Type
 37688 ;;                  1    wreg      void 
 37689 ;; Registers used:
 37690 ;;		wreg, status,2, status,0, cstack
 37691 ;; Tracked objects:
 37692 ;;		On entry : 0/0
 37693 ;;		On exit  : 0/0
 37694 ;;		Unchanged: 0/0
 37695 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 37696 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 37697 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 37698 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 37699 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 37700 ;;Total ram usage:        2 bytes
 37701 ;; Hardware stack levels used:    1
 37702 ;; Hardware stack levels required when called:    9
 37703 ;; This function calls:
 37704 ;;		_HALSPICSAssert
 37705 ;;		_HALSPICSDeassert
 37706 ;;		_HALSPISend
 37707 ;; This function is called by:
 37708 ;;		_RADIO_WriteMode
 37709 ;;		_RADIO_WriteFrequency
 37710 ;;		_RADIO_WriteFSKFrequencyDeviation
 37711 ;;		_RADIO_WriteFSKBitRate
 37712 ;;		_RADIO_WritePower
 37713 ;;		_RADIO_Init
 37714 ;;		_RADIO_WriteConfiguration
 37715 ;;		_RADIO_Transmit
 37716 ;;		_RADIO_ReceiveStart
 37717 ;;		_RADIO_RxDone
 37718 ;;		_RADIO_RxTimeout
 37719 ;;		_RADIO_TxDone
 37720 ;;		_RADIO_UnhandledInterrupt
 37721 ;;		_RADIO_FHSSChangeChannel
 37722 ;;		_RADIO_ReadRandom
 37723 ;;		_RADIO_TransmitCW
 37724 ;; This function uses a non-reentrant model
 37725 ;;
 37726                           
 37727                           	psect	text174
 37728  0091BC                     __ptext174:
 37729                           	opt stack 0
 37730  0091BC                     _RADIO_RegisterWrite:
 37731                           	opt stack 18
 37732                           
 37733                           ; BSR set to: 0
 37734                           ;incstack = 0
 37735                           ;RADIO_RegisterWrite@reg stored from wreg
 37736  0091BC  0100               	movlb	0	; () banked
 37737  0091BE  6F63               	movwf	RADIO_RegisterWrite@reg& (0+255),b
 37738                           
 37739                           ;radio_driver_SX1276.c: 128: HALSPICSAssert();
 37740  0091C0  ECEF  F04A         	call	_HALSPICSAssert	;wreg free
 37741                           
 37742                           ;radio_driver_SX1276.c: 129: HALSPISend(0x80 | reg);
 37743  0091C4  0100               	movlb	0	; () banked
 37744  0091C6  5163               	movf	RADIO_RegisterWrite@reg& (0+255),w,b
 37745  0091C8  0980               	iorlw	128
 37746  0091CA  EC47  F04A         	call	_HALSPISend
 37747                           
 37748                           ;radio_driver_SX1276.c: 130: HALSPISend(value);
 37749  0091CE  0100               	movlb	0	; () banked
 37750  0091D0  5162               	movf	RADIO_RegisterWrite@value& (0+255),w,b
 37751  0091D2  EC47  F04A         	call	_HALSPISend
 37752                           
 37753                           ;radio_driver_SX1276.c: 131: HALSPICSDeassert();
 37754  0091D6  ECED  F04A         	call	_HALSPICSDeassert	;wreg free
 37755  0091DA  0012               	return		;funcret
 37756  0091DC                     __end_of_RADIO_RegisterWrite:
 37757                           	opt stack 0
 37758                           tosu	equ	0xFFF
 37759                           tosh	equ	0xFFE
 37760                           tosl	equ	0xFFD
 37761                           pclath	equ	0xFFA
 37762                           tblptru	equ	0xFF8
 37763                           tblptrh	equ	0xFF7
 37764                           tblptrl	equ	0xFF6
 37765                           tablat	equ	0xFF5
 37766                           prodh	equ	0xFF4
 37767                           prodl	equ	0xFF3
 37768                           intcon	equ	0xFF2
 37769                           intcon2	equ	0xFF1
 37770                           intcon3	equ	0xFF0
 37771                           indf0	equ	0xFEF
 37772                           postinc0	equ	0xFEE
 37773                           plusw0	equ	0xFEB
 37774                           fsr0h	equ	0xFEA
 37775                           fsr0l	equ	0xFE9
 37776                           wreg	equ	0xFE8
 37777                           postinc1	equ	0xFE6
 37778                           postdec1	equ	0xFE5
 37779                           plusw1	equ	0xFE3
 37780                           fsr1h	equ	0xFE2
 37781                           fsr1l	equ	0xFE1
 37782                           indf2	equ	0xFDF
 37783                           postinc2	equ	0xFDE
 37784                           postdec2	equ	0xFDD
 37785                           plusw2	equ	0xFDB
 37786                           fsr2h	equ	0xFDA
 37787                           fsr2l	equ	0xFD9
 37788                           status	equ	0xFD8
 37789                           
 37790 ;; *************** function _HALSPISend *****************
 37791 ;; Defined at:
 37792 ;;		line 73 in file "mcc_generated_files/LoRaWAN/radio_driver_hal.c"
 37793 ;; Parameters:    Size  Location     Type
 37794 ;;  data            1    wreg     unsigned char 
 37795 ;; Auto vars:     Size  Location     Type
 37796 ;;  data            1    1[BANK0 ] unsigned char 
 37797 ;; Return value:  Size  Location     Type
 37798 ;;                  1    wreg      unsigned char 
 37799 ;; Registers used:
 37800 ;;		wreg, status,2, cstack
 37801 ;; Tracked objects:
 37802 ;;		On entry : 0/0
 37803 ;;		On exit  : 0/0
 37804 ;;		Unchanged: 0/0
 37805 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 37806 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 37807 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 37808 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 37809 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 37810 ;;Total ram usage:        1 bytes
 37811 ;; Hardware stack levels used:    1
 37812 ;; Hardware stack levels required when called:    8
 37813 ;; This function calls:
 37814 ;;		_SPI2_Exchange8bit
 37815 ;; This function is called by:
 37816 ;;		_RADIO_RegisterWrite
 37817 ;;		_RADIO_RegisterRead
 37818 ;;		_RADIO_Transmit
 37819 ;;		_RADIO_RxDone
 37820 ;;		_RADIO_FSKPayloadReady
 37821 ;; This function uses a non-reentrant model
 37822 ;;
 37823                           
 37824                           	psect	text175
 37825  00948E                     __ptext175:
 37826                           	opt stack 0
 37827  00948E                     _HALSPISend:
 37828                           	opt stack 18
 37829                           
 37830                           ;incstack = 0
 37831                           ;HALSPISend@data stored from wreg
 37832  00948E  0100               	movlb	0	; () banked
 37833  009490  6F61               	movwf	HALSPISend@data& (0+255),b
 37834                           
 37835                           ;radio_driver_hal.c: 75: return SPI2_Exchange8bit(data);
 37836  009492  0100               	movlb	0	; () banked
 37837  009494  5161               	movf	HALSPISend@data& (0+255),w,b
 37838  009496  EC00  F04A         	call	_SPI2_Exchange8bit
 37839  00949A  0012               	return	
 37840  00949C                     __end_of_HALSPISend:
 37841                           	opt stack 0
 37842                           tosu	equ	0xFFF
 37843                           tosh	equ	0xFFE
 37844                           tosl	equ	0xFFD
 37845                           pclath	equ	0xFFA
 37846                           tblptru	equ	0xFF8
 37847                           tblptrh	equ	0xFF7
 37848                           tblptrl	equ	0xFF6
 37849                           tablat	equ	0xFF5
 37850                           prodh	equ	0xFF4
 37851                           prodl	equ	0xFF3
 37852                           intcon	equ	0xFF2
 37853                           intcon2	equ	0xFF1
 37854                           intcon3	equ	0xFF0
 37855                           indf0	equ	0xFEF
 37856                           postinc0	equ	0xFEE
 37857                           plusw0	equ	0xFEB
 37858                           fsr0h	equ	0xFEA
 37859                           fsr0l	equ	0xFE9
 37860                           wreg	equ	0xFE8
 37861                           postinc1	equ	0xFE6
 37862                           postdec1	equ	0xFE5
 37863                           plusw1	equ	0xFE3
 37864                           fsr1h	equ	0xFE2
 37865                           fsr1l	equ	0xFE1
 37866                           indf2	equ	0xFDF
 37867                           postinc2	equ	0xFDE
 37868                           postdec2	equ	0xFDD
 37869                           plusw2	equ	0xFDB
 37870                           fsr2h	equ	0xFDA
 37871                           fsr2l	equ	0xFD9
 37872                           status	equ	0xFD8
 37873                           
 37874 ;; *************** function _SPI2_Exchange8bit *****************
 37875 ;; Defined at:
 37876 ;;		line 79 in file "mcc_generated_files/spi2.c"
 37877 ;; Parameters:    Size  Location     Type
 37878 ;;  data            1    wreg     unsigned char 
 37879 ;; Auto vars:     Size  Location     Type
 37880 ;;  data            1    0[BANK0 ] unsigned char 
 37881 ;; Return value:  Size  Location     Type
 37882 ;;                  1    wreg      unsigned char 
 37883 ;; Registers used:
 37884 ;;		wreg, status,2
 37885 ;; Tracked objects:
 37886 ;;		On entry : 0/0
 37887 ;;		On exit  : 0/0
 37888 ;;		Unchanged: 0/0
 37889 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 37890 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 37891 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 37892 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 37893 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 37894 ;;Total ram usage:        1 bytes
 37895 ;; Hardware stack levels used:    1
 37896 ;; Hardware stack levels required when called:    7
 37897 ;; This function calls:
 37898 ;;		Nothing
 37899 ;; This function is called by:
 37900 ;;		_HALSPISend
 37901 ;;		_SPI2_Exchange8bitBuffer
 37902 ;; This function uses a non-reentrant model
 37903 ;;
 37904                           
 37905                           	psect	text176
 37906  009400                     __ptext176:
 37907                           	opt stack 0
 37908  009400                     _SPI2_Exchange8bit:
 37909                           	opt stack 18
 37910                           
 37911                           ;incstack = 0
 37912                           ;SPI2_Exchange8bit@data stored from wreg
 37913  009400  0100               	movlb	0	; () banked
 37914  009402  6F60               	movwf	SPI2_Exchange8bit@data& (0+255),b
 37915                           
 37916                           ;spi2.c: 82: SSP2CON1bits.WCOL = 0;
 37917  009404  9E6C               	bcf	3948,7,c	;volatile
 37918                           
 37919                           ;spi2.c: 84: SSP2BUF = data;
 37920  009406  C060  FF6F         	movff	SPI2_Exchange8bit@data,3951	;volatile
 37921  00940A                     
 37922                           ;spi2.c: 87: {
 37923  00940A  A06D               	btfss	3949,0,c	;volatile
 37924  00940C  D7FE               	goto	l2370
 37925                           
 37926                           ;spi2.c: 88: }
 37927                           ;spi2.c: 90: return (SSP2BUF);
 37928  00940E  506F               	movf	3951,w,c	;volatile
 37929  009410  0012               	return		;funcret
 37930  009412                     __end_of_SPI2_Exchange8bit:
 37931                           	opt stack 0
 37932                           tosu	equ	0xFFF
 37933                           tosh	equ	0xFFE
 37934                           tosl	equ	0xFFD
 37935                           pclath	equ	0xFFA
 37936                           tblptru	equ	0xFF8
 37937                           tblptrh	equ	0xFF7
 37938                           tblptrl	equ	0xFF6
 37939                           tablat	equ	0xFF5
 37940                           prodh	equ	0xFF4
 37941                           prodl	equ	0xFF3
 37942                           intcon	equ	0xFF2
 37943                           intcon2	equ	0xFF1
 37944                           intcon3	equ	0xFF0
 37945                           indf0	equ	0xFEF
 37946                           postinc0	equ	0xFEE
 37947                           plusw0	equ	0xFEB
 37948                           fsr0h	equ	0xFEA
 37949                           fsr0l	equ	0xFE9
 37950                           wreg	equ	0xFE8
 37951                           postinc1	equ	0xFE6
 37952                           postdec1	equ	0xFE5
 37953                           plusw1	equ	0xFE3
 37954                           fsr1h	equ	0xFE2
 37955                           fsr1l	equ	0xFE1
 37956                           indf2	equ	0xFDF
 37957                           postinc2	equ	0xFDE
 37958                           postdec2	equ	0xFDD
 37959                           plusw2	equ	0xFDB
 37960                           fsr2h	equ	0xFDA
 37961                           fsr2l	equ	0xFD9
 37962                           status	equ	0xFD8
 37963                           
 37964 ;; *************** function _HALSPICSDeassert *****************
 37965 ;; Defined at:
 37966 ;;		line 68 in file "mcc_generated_files/LoRaWAN/radio_driver_hal.c"
 37967 ;; Parameters:    Size  Location     Type
 37968 ;;		None
 37969 ;; Auto vars:     Size  Location     Type
 37970 ;;		None
 37971 ;; Return value:  Size  Location     Type
 37972 ;;                  1    wreg      void 
 37973 ;; Registers used:
 37974 ;;		None
 37975 ;; Tracked objects:
 37976 ;;		On entry : 0/0
 37977 ;;		On exit  : 0/0
 37978 ;;		Unchanged: 0/0
 37979 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 37980 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 37981 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 37982 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 37983 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 37984 ;;Total ram usage:        0 bytes
 37985 ;; Hardware stack levels used:    1
 37986 ;; Hardware stack levels required when called:    7
 37987 ;; This function calls:
 37988 ;;		Nothing
 37989 ;; This function is called by:
 37990 ;;		_RADIO_RegisterWrite
 37991 ;;		_RADIO_RegisterRead
 37992 ;;		_RADIO_Transmit
 37993 ;;		_RADIO_RxDone
 37994 ;;		_RADIO_FSKPayloadReady
 37995 ;; This function uses a non-reentrant model
 37996 ;;
 37997                           
 37998                           	psect	text177
 37999  0095DA                     __ptext177:
 38000                           	opt stack 0
 38001  0095DA                     _HALSPICSDeassert:
 38002                           	opt stack 19
 38003                           
 38004                           ;incstack = 0
 38005                           ;radio_driver_hal.c: 70: do { LATD3 = 1; } while(0);
 38006  0095DA  868C               	bsf	3980,3,c	;volatile
 38007  0095DC  0012               	return	
 38008  0095DE                     __end_of_HALSPICSDeassert:
 38009                           	opt stack 0
 38010                           tosu	equ	0xFFF
 38011                           tosh	equ	0xFFE
 38012                           tosl	equ	0xFFD
 38013                           pclath	equ	0xFFA
 38014                           tblptru	equ	0xFF8
 38015                           tblptrh	equ	0xFF7
 38016                           tblptrl	equ	0xFF6
 38017                           tablat	equ	0xFF5
 38018                           prodh	equ	0xFF4
 38019                           prodl	equ	0xFF3
 38020                           intcon	equ	0xFF2
 38021                           intcon2	equ	0xFF1
 38022                           intcon3	equ	0xFF0
 38023                           indf0	equ	0xFEF
 38024                           postinc0	equ	0xFEE
 38025                           plusw0	equ	0xFEB
 38026                           fsr0h	equ	0xFEA
 38027                           fsr0l	equ	0xFE9
 38028                           wreg	equ	0xFE8
 38029                           postinc1	equ	0xFE6
 38030                           postdec1	equ	0xFE5
 38031                           plusw1	equ	0xFE3
 38032                           fsr1h	equ	0xFE2
 38033                           fsr1l	equ	0xFE1
 38034                           indf2	equ	0xFDF
 38035                           postinc2	equ	0xFDE
 38036                           postdec2	equ	0xFDD
 38037                           plusw2	equ	0xFDB
 38038                           fsr2h	equ	0xFDA
 38039                           fsr2l	equ	0xFD9
 38040                           status	equ	0xFD8
 38041                           
 38042 ;; *************** function _HALSPICSAssert *****************
 38043 ;; Defined at:
 38044 ;;		line 63 in file "mcc_generated_files/LoRaWAN/radio_driver_hal.c"
 38045 ;; Parameters:    Size  Location     Type
 38046 ;;		None
 38047 ;; Auto vars:     Size  Location     Type
 38048 ;;		None
 38049 ;; Return value:  Size  Location     Type
 38050 ;;                  1    wreg      void 
 38051 ;; Registers used:
 38052 ;;		None
 38053 ;; Tracked objects:
 38054 ;;		On entry : 0/0
 38055 ;;		On exit  : 0/0
 38056 ;;		Unchanged: 0/0
 38057 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 38058 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 38059 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 38060 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 38061 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 38062 ;;Total ram usage:        0 bytes
 38063 ;; Hardware stack levels used:    1
 38064 ;; Hardware stack levels required when called:    7
 38065 ;; This function calls:
 38066 ;;		Nothing
 38067 ;; This function is called by:
 38068 ;;		_RADIO_RegisterWrite
 38069 ;;		_RADIO_RegisterRead
 38070 ;;		_RADIO_Transmit
 38071 ;;		_RADIO_RxDone
 38072 ;;		_RADIO_FSKPayloadReady
 38073 ;; This function uses a non-reentrant model
 38074 ;;
 38075                           
 38076                           	psect	text178
 38077  0095DE                     __ptext178:
 38078                           	opt stack 0
 38079  0095DE                     _HALSPICSAssert:
 38080                           	opt stack 19
 38081                           
 38082                           ;incstack = 0
 38083                           ;radio_driver_hal.c: 65: do { LATD3 = 0; } while(0);
 38084  0095DE  968C               	bcf	3980,3,c	;volatile
 38085  0095E0  0012               	return	
 38086  0095E2                     __end_of_HALSPICSAssert:
 38087                           	opt stack 0
 38088                           tosu	equ	0xFFF
 38089                           tosh	equ	0xFFE
 38090                           tosl	equ	0xFFD
 38091                           pclath	equ	0xFFA
 38092                           tblptru	equ	0xFF8
 38093                           tblptrh	equ	0xFF7
 38094                           tblptrl	equ	0xFF6
 38095                           tablat	equ	0xFF5
 38096                           prodh	equ	0xFF4
 38097                           prodl	equ	0xFF3
 38098                           intcon	equ	0xFF2
 38099                           intcon2	equ	0xFF1
 38100                           intcon3	equ	0xFF0
 38101                           indf0	equ	0xFEF
 38102                           postinc0	equ	0xFEE
 38103                           plusw0	equ	0xFEB
 38104                           fsr0h	equ	0xFEA
 38105                           fsr0l	equ	0xFE9
 38106                           wreg	equ	0xFE8
 38107                           postinc1	equ	0xFE6
 38108                           postdec1	equ	0xFE5
 38109                           plusw1	equ	0xFE3
 38110                           fsr1h	equ	0xFE2
 38111                           fsr1l	equ	0xFE1
 38112                           indf2	equ	0xFDF
 38113                           postinc2	equ	0xFDE
 38114                           postdec2	equ	0xFDD
 38115                           plusw2	equ	0xFDB
 38116                           fsr2h	equ	0xFDA
 38117                           fsr2l	equ	0xFD9
 38118                           status	equ	0xFD8
 38119                           
 38120 ;; *************** function _RADIO_Reset *****************
 38121 ;; Defined at:
 38122 ;;		line 249 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 38123 ;; Parameters:    Size  Location     Type
 38124 ;;		None
 38125 ;; Auto vars:     Size  Location     Type
 38126 ;;		None
 38127 ;; Return value:  Size  Location     Type
 38128 ;;                  1    wreg      void 
 38129 ;; Registers used:
 38130 ;;		wreg, status,2, status,0, cstack
 38131 ;; Tracked objects:
 38132 ;;		On entry : 0/0
 38133 ;;		On exit  : 0/0
 38134 ;;		Unchanged: 0/0
 38135 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 38136 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 38137 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 38138 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 38139 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 38140 ;;Total ram usage:        0 bytes
 38141 ;; Hardware stack levels used:    1
 38142 ;; Hardware stack levels required when called:    8
 38143 ;; This function calls:
 38144 ;;		_HALResetPinMakeInput
 38145 ;;		_HALResetPinMakeOutput
 38146 ;;		_HALResetPinOutputValue
 38147 ;;		_SystemBlockingWaitMs
 38148 ;; This function is called by:
 38149 ;;		_RADIO_Init
 38150 ;; This function uses a non-reentrant model
 38151 ;;
 38152                           
 38153                           	psect	text179
 38154  0088F8                     __ptext179:
 38155                           	opt stack 0
 38156  0088F8                     _RADIO_Reset:
 38157                           	opt stack 20
 38158                           
 38159                           ;radio_driver_SX1276.c: 251: HALResetPinMakeOutput();
 38160                           
 38161                           ;incstack = 0
 38162  0088F8  ECF1  F04A         	call	_HALResetPinMakeOutput	;wreg free
 38163                           
 38164                           ;radio_driver_SX1276.c: 252: HALResetPinOutputValue(0);
 38165  0088FC  0E00               	movlw	0
 38166  0088FE  EC94  F049         	call	_HALResetPinOutputValue
 38167                           
 38168                           ;radio_driver_SX1276.c: 253: SystemBlockingWaitMs(1);
 38169  008902  0E01               	movlw	1
 38170  008904  0100               	movlb	0	; () banked
 38171  008906  6F60               	movwf	SystemBlockingWaitMs@ms& (0+255),b
 38172  008908  0E00               	movlw	0
 38173  00890A  6F61               	movwf	(SystemBlockingWaitMs@ms+1)& (0+255),b
 38174  00890C  0E00               	movlw	0
 38175  00890E  6F62               	movwf	(SystemBlockingWaitMs@ms+2)& (0+255),b
 38176  008910  0E00               	movlw	0
 38177  008912  6F63               	movwf	(SystemBlockingWaitMs@ms+3)& (0+255),b
 38178  008914  ECBE  F046         	call	_SystemBlockingWaitMs	;wreg free
 38179                           
 38180                           ;radio_driver_SX1276.c: 254: HALResetPinMakeInput();
 38181  008918  ECF3  F04A         	call	_HALResetPinMakeInput	;wreg free
 38182                           
 38183                           ;radio_driver_SX1276.c: 255: SystemBlockingWaitMs(10);
 38184  00891C  0E0A               	movlw	10
 38185  00891E  0100               	movlb	0	; () banked
 38186  008920  6F60               	movwf	SystemBlockingWaitMs@ms& (0+255),b
 38187  008922  0E00               	movlw	0
 38188  008924  6F61               	movwf	(SystemBlockingWaitMs@ms+1)& (0+255),b
 38189  008926  0E00               	movlw	0
 38190  008928  6F62               	movwf	(SystemBlockingWaitMs@ms+2)& (0+255),b
 38191  00892A  0E00               	movlw	0
 38192  00892C  6F63               	movwf	(SystemBlockingWaitMs@ms+3)& (0+255),b
 38193  00892E  ECBE  F046         	call	_SystemBlockingWaitMs	;wreg free
 38194                           
 38195                           ;radio_driver_SX1276.c: 257: HALResetPinOutputValue(1);
 38196  008932  0E01               	movlw	1
 38197  008934  EC94  F049         	call	_HALResetPinOutputValue
 38198                           
 38199                           ;radio_driver_SX1276.c: 258: HALResetPinMakeOutput();
 38200  008938  ECF1  F04A         	call	_HALResetPinMakeOutput	;wreg free
 38201  00893C  0012               	return		;funcret
 38202  00893E                     __end_of_RADIO_Reset:
 38203                           	opt stack 0
 38204                           tosu	equ	0xFFF
 38205                           tosh	equ	0xFFE
 38206                           tosl	equ	0xFFD
 38207                           pclath	equ	0xFFA
 38208                           tblptru	equ	0xFF8
 38209                           tblptrh	equ	0xFF7
 38210                           tblptrl	equ	0xFF6
 38211                           tablat	equ	0xFF5
 38212                           prodh	equ	0xFF4
 38213                           prodl	equ	0xFF3
 38214                           intcon	equ	0xFF2
 38215                           intcon2	equ	0xFF1
 38216                           intcon3	equ	0xFF0
 38217                           indf0	equ	0xFEF
 38218                           postinc0	equ	0xFEE
 38219                           plusw0	equ	0xFEB
 38220                           fsr0h	equ	0xFEA
 38221                           fsr0l	equ	0xFE9
 38222                           wreg	equ	0xFE8
 38223                           postinc1	equ	0xFE6
 38224                           postdec1	equ	0xFE5
 38225                           plusw1	equ	0xFE3
 38226                           fsr1h	equ	0xFE2
 38227                           fsr1l	equ	0xFE1
 38228                           indf2	equ	0xFDF
 38229                           postinc2	equ	0xFDE
 38230                           postdec2	equ	0xFDD
 38231                           plusw2	equ	0xFDB
 38232                           fsr2h	equ	0xFDA
 38233                           fsr2l	equ	0xFD9
 38234                           status	equ	0xFD8
 38235                           
 38236 ;; *************** function _SystemBlockingWaitMs *****************
 38237 ;; Defined at:
 38238 ;;		line 145 in file "mcc_generated_files/LoRaWAN/sw_timer.c"
 38239 ;; Parameters:    Size  Location     Type
 38240 ;;  ms              4    0[BANK0 ] unsigned long 
 38241 ;; Auto vars:     Size  Location     Type
 38242 ;;		None
 38243 ;; Return value:  Size  Location     Type
 38244 ;;                  1    wreg      void 
 38245 ;; Registers used:
 38246 ;;		wreg, status,2, status,0
 38247 ;; Tracked objects:
 38248 ;;		On entry : 0/0
 38249 ;;		On exit  : 0/0
 38250 ;;		Unchanged: 0/0
 38251 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 38252 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 38253 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 38254 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 38255 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 38256 ;;Total ram usage:        5 bytes
 38257 ;; Hardware stack levels used:    1
 38258 ;; Hardware stack levels required when called:    7
 38259 ;; This function calls:
 38260 ;;		Nothing
 38261 ;; This function is called by:
 38262 ;;		_RADIO_WriteMode
 38263 ;;		_RADIO_Reset
 38264 ;;		_RADIO_ReadRandom
 38265 ;;		_RADIO_StopCW
 38266 ;; This function uses a non-reentrant model
 38267 ;;
 38268                           
 38269                           	psect	text180
 38270  008D7C                     __ptext180:
 38271                           	opt stack 0
 38272  008D7C                     _SystemBlockingWaitMs:
 38273                           	opt stack 20
 38274                           
 38275                           ;sw_timer.c: 147: while (ms > 0)
 38276                           
 38277                           ;incstack = 0
 38278  008D7C  D00F               	goto	l1543
 38279  008D7E                     
 38280                           ;sw_timer.c: 148: {
 38281                           ;sw_timer.c: 149: _delay((unsigned long)((1)*(16000000/4000.0)));
 38282  008D7E  0E06               	movlw	6
 38283  008D80  0100               	movlb	0	; () banked
 38284  008D82  6F64               	movwf	??_SystemBlockingWaitMs& (0+255),b
 38285  008D84  0E30               	movlw	48
 38286  008D86                     u17187:
 38287  008D86  2EE8               	decfsz	wreg,f,c
 38288  008D88  D7FE               	bra	u17187
 38289  008D8A  2F64               	decfsz	??_SystemBlockingWaitMs& (0+255),f,b
 38290  008D8C  D7FC               	bra	u17187
 38291  008D8E  F000               	nop	
 38292                           
 38293                           ;sw_timer.c: 150: ms--;
 38294  008D90  0100               	movlb	0	; () banked
 38295  008D92  0760               	decf	SystemBlockingWaitMs@ms& (0+255),f,b
 38296  008D94  0E00               	movlw	0
 38297  008D96  5B61               	subwfb	(SystemBlockingWaitMs@ms+1)& (0+255),f,b
 38298  008D98  5B62               	subwfb	(SystemBlockingWaitMs@ms+2)& (0+255),f,b
 38299  008D9A  5B63               	subwfb	(SystemBlockingWaitMs@ms+3)& (0+255),f,b
 38300  008D9C                     l1543:
 38301                           
 38302                           ; BSR set to: 0
 38303  008D9C  0100               	movlb	0	; () banked
 38304  008D9E  5160               	movf	SystemBlockingWaitMs@ms& (0+255),w,b
 38305  008DA0  1161               	iorwf	(SystemBlockingWaitMs@ms+1)& (0+255),w,b
 38306  008DA2  1162               	iorwf	(SystemBlockingWaitMs@ms+2)& (0+255),w,b
 38307  008DA4  1163               	iorwf	(SystemBlockingWaitMs@ms+3)& (0+255),w,b
 38308  008DA6  B4D8               	btfsc	status,2,c
 38309  008DA8  0012               	return	
 38310  008DAA  D7E9               	goto	l1544
 38311  008DAC                     __end_of_SystemBlockingWaitMs:
 38312                           	opt stack 0
 38313                           tosu	equ	0xFFF
 38314                           tosh	equ	0xFFE
 38315                           tosl	equ	0xFFD
 38316                           pclath	equ	0xFFA
 38317                           tblptru	equ	0xFF8
 38318                           tblptrh	equ	0xFF7
 38319                           tblptrl	equ	0xFF6
 38320                           tablat	equ	0xFF5
 38321                           prodh	equ	0xFF4
 38322                           prodl	equ	0xFF3
 38323                           intcon	equ	0xFF2
 38324                           intcon2	equ	0xFF1
 38325                           intcon3	equ	0xFF0
 38326                           indf0	equ	0xFEF
 38327                           postinc0	equ	0xFEE
 38328                           plusw0	equ	0xFEB
 38329                           fsr0h	equ	0xFEA
 38330                           fsr0l	equ	0xFE9
 38331                           wreg	equ	0xFE8
 38332                           postinc1	equ	0xFE6
 38333                           postdec1	equ	0xFE5
 38334                           plusw1	equ	0xFE3
 38335                           fsr1h	equ	0xFE2
 38336                           fsr1l	equ	0xFE1
 38337                           indf2	equ	0xFDF
 38338                           postinc2	equ	0xFDE
 38339                           postdec2	equ	0xFDD
 38340                           plusw2	equ	0xFDB
 38341                           fsr2h	equ	0xFDA
 38342                           fsr2l	equ	0xFD9
 38343                           status	equ	0xFD8
 38344                           
 38345 ;; *************** function _HALResetPinOutputValue *****************
 38346 ;; Defined at:
 38347 ;;		line 55 in file "mcc_generated_files/LoRaWAN/radio_driver_hal.c"
 38348 ;; Parameters:    Size  Location     Type
 38349 ;;  value           1    wreg     unsigned char 
 38350 ;; Auto vars:     Size  Location     Type
 38351 ;;  value           1    0[BANK0 ] unsigned char 
 38352 ;; Return value:  Size  Location     Type
 38353 ;;                  1    wreg      void 
 38354 ;; Registers used:
 38355 ;;		wreg, status,2, status,0
 38356 ;; Tracked objects:
 38357 ;;		On entry : 0/0
 38358 ;;		On exit  : 0/0
 38359 ;;		Unchanged: 0/0
 38360 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 38361 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 38362 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 38363 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 38364 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 38365 ;;Total ram usage:        1 bytes
 38366 ;; Hardware stack levels used:    1
 38367 ;; Hardware stack levels required when called:    7
 38368 ;; This function calls:
 38369 ;;		Nothing
 38370 ;; This function is called by:
 38371 ;;		_RADIO_Reset
 38372 ;; This function uses a non-reentrant model
 38373 ;;
 38374                           
 38375                           	psect	text181
 38376  009328                     __ptext181:
 38377                           	opt stack 0
 38378  009328                     _HALResetPinOutputValue:
 38379                           	opt stack 20
 38380                           
 38381                           ; BSR set to: 0
 38382                           ;incstack = 0
 38383                           ;HALResetPinOutputValue@value stored from wreg
 38384  009328  0100               	movlb	0	; () banked
 38385  00932A  6F60               	movwf	HALResetPinOutputValue@value& (0+255),b
 38386                           
 38387                           ;radio_driver_hal.c: 57: if (value == 0)
 38388  00932C  0100               	movlb	0	; () banked
 38389  00932E  5160               	movf	HALResetPinOutputValue@value& (0+255),w,b
 38390  009330  A4D8               	btfss	status,2,c
 38391  009332  D002               	goto	l77
 38392                           
 38393                           ; BSR set to: 0
 38394                           
 38395                           ;radio_driver_hal.c: 58: do { LATC2 = 0; } while(0);
 38396  009334  948B               	bcf	3979,2,c	;volatile
 38397                           
 38398                           ; BSR set to: 0
 38399  009336  0012               	return	
 38400  009338                     l77:
 38401                           
 38402                           ; BSR set to: 0
 38403                           ;radio_driver_hal.c: 59: else if (value == 1)
 38404                           
 38405                           ; BSR set to: 0
 38406  009338  0560               	decf	HALResetPinOutputValue@value& (0+255),w,b
 38407  00933A  A4D8               	btfss	status,2,c
 38408  00933C  0012               	return	
 38409                           
 38410                           ; BSR set to: 0
 38411                           
 38412                           ;radio_driver_hal.c: 60: do { LATC2 = 1; } while(0);
 38413  00933E  848B               	bsf	3979,2,c	;volatile
 38414                           
 38415                           ; BSR set to: 0
 38416                           
 38417                           ; BSR set to: 0
 38418  009340  0012               	return	
 38419  009342                     __end_of_HALResetPinOutputValue:
 38420                           	opt stack 0
 38421                           tosu	equ	0xFFF
 38422                           tosh	equ	0xFFE
 38423                           tosl	equ	0xFFD
 38424                           pclath	equ	0xFFA
 38425                           tblptru	equ	0xFF8
 38426                           tblptrh	equ	0xFF7
 38427                           tblptrl	equ	0xFF6
 38428                           tablat	equ	0xFF5
 38429                           prodh	equ	0xFF4
 38430                           prodl	equ	0xFF3
 38431                           intcon	equ	0xFF2
 38432                           intcon2	equ	0xFF1
 38433                           intcon3	equ	0xFF0
 38434                           indf0	equ	0xFEF
 38435                           postinc0	equ	0xFEE
 38436                           plusw0	equ	0xFEB
 38437                           fsr0h	equ	0xFEA
 38438                           fsr0l	equ	0xFE9
 38439                           wreg	equ	0xFE8
 38440                           postinc1	equ	0xFE6
 38441                           postdec1	equ	0xFE5
 38442                           plusw1	equ	0xFE3
 38443                           fsr1h	equ	0xFE2
 38444                           fsr1l	equ	0xFE1
 38445                           indf2	equ	0xFDF
 38446                           postinc2	equ	0xFDE
 38447                           postdec2	equ	0xFDD
 38448                           plusw2	equ	0xFDB
 38449                           fsr2h	equ	0xFDA
 38450                           fsr2l	equ	0xFD9
 38451                           status	equ	0xFD8
 38452                           
 38453 ;; *************** function _HALResetPinMakeOutput *****************
 38454 ;; Defined at:
 38455 ;;		line 45 in file "mcc_generated_files/LoRaWAN/radio_driver_hal.c"
 38456 ;; Parameters:    Size  Location     Type
 38457 ;;		None
 38458 ;; Auto vars:     Size  Location     Type
 38459 ;;		None
 38460 ;; Return value:  Size  Location     Type
 38461 ;;                  1    wreg      void 
 38462 ;; Registers used:
 38463 ;;		None
 38464 ;; Tracked objects:
 38465 ;;		On entry : 0/0
 38466 ;;		On exit  : 0/0
 38467 ;;		Unchanged: 0/0
 38468 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 38469 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 38470 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 38471 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 38472 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 38473 ;;Total ram usage:        0 bytes
 38474 ;; Hardware stack levels used:    1
 38475 ;; Hardware stack levels required when called:    7
 38476 ;; This function calls:
 38477 ;;		Nothing
 38478 ;; This function is called by:
 38479 ;;		_RADIO_Reset
 38480 ;; This function uses a non-reentrant model
 38481 ;;
 38482                           
 38483                           	psect	text182
 38484  0095E2                     __ptext182:
 38485                           	opt stack 0
 38486  0095E2                     _HALResetPinMakeOutput:
 38487                           	opt stack 20
 38488                           
 38489                           ; BSR set to: 0
 38490                           ;incstack = 0
 38491                           ;radio_driver_hal.c: 47: do { TRISC2 = 0; } while(0);
 38492  0095E2  9494               	bcf	3988,2,c	;volatile
 38493  0095E4  0012               	return	
 38494  0095E6                     __end_of_HALResetPinMakeOutput:
 38495                           	opt stack 0
 38496                           tosu	equ	0xFFF
 38497                           tosh	equ	0xFFE
 38498                           tosl	equ	0xFFD
 38499                           pclath	equ	0xFFA
 38500                           tblptru	equ	0xFF8
 38501                           tblptrh	equ	0xFF7
 38502                           tblptrl	equ	0xFF6
 38503                           tablat	equ	0xFF5
 38504                           prodh	equ	0xFF4
 38505                           prodl	equ	0xFF3
 38506                           intcon	equ	0xFF2
 38507                           intcon2	equ	0xFF1
 38508                           intcon3	equ	0xFF0
 38509                           indf0	equ	0xFEF
 38510                           postinc0	equ	0xFEE
 38511                           plusw0	equ	0xFEB
 38512                           fsr0h	equ	0xFEA
 38513                           fsr0l	equ	0xFE9
 38514                           wreg	equ	0xFE8
 38515                           postinc1	equ	0xFE6
 38516                           postdec1	equ	0xFE5
 38517                           plusw1	equ	0xFE3
 38518                           fsr1h	equ	0xFE2
 38519                           fsr1l	equ	0xFE1
 38520                           indf2	equ	0xFDF
 38521                           postinc2	equ	0xFDE
 38522                           postdec2	equ	0xFDD
 38523                           plusw2	equ	0xFDB
 38524                           fsr2h	equ	0xFDA
 38525                           fsr2l	equ	0xFD9
 38526                           status	equ	0xFD8
 38527                           
 38528 ;; *************** function _HALResetPinMakeInput *****************
 38529 ;; Defined at:
 38530 ;;		line 50 in file "mcc_generated_files/LoRaWAN/radio_driver_hal.c"
 38531 ;; Parameters:    Size  Location     Type
 38532 ;;		None
 38533 ;; Auto vars:     Size  Location     Type
 38534 ;;		None
 38535 ;; Return value:  Size  Location     Type
 38536 ;;                  1    wreg      void 
 38537 ;; Registers used:
 38538 ;;		None
 38539 ;; Tracked objects:
 38540 ;;		On entry : 0/0
 38541 ;;		On exit  : 0/0
 38542 ;;		Unchanged: 0/0
 38543 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 38544 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 38545 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 38546 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 38547 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 38548 ;;Total ram usage:        0 bytes
 38549 ;; Hardware stack levels used:    1
 38550 ;; Hardware stack levels required when called:    7
 38551 ;; This function calls:
 38552 ;;		Nothing
 38553 ;; This function is called by:
 38554 ;;		_RADIO_Reset
 38555 ;; This function uses a non-reentrant model
 38556 ;;
 38557                           
 38558                           	psect	text183
 38559  0095E6                     __ptext183:
 38560                           	opt stack 0
 38561  0095E6                     _HALResetPinMakeInput:
 38562                           	opt stack 20
 38563                           
 38564                           ;incstack = 0
 38565                           ;radio_driver_hal.c: 52: do { TRISC2 = 1; } while(0);
 38566  0095E6  8494               	bsf	3988,2,c	;volatile
 38567  0095E8  0012               	return	
 38568  0095EA                     __end_of_HALResetPinMakeInput:
 38569                           	opt stack 0
 38570                           tosu	equ	0xFFF
 38571                           tosh	equ	0xFFE
 38572                           tosl	equ	0xFFD
 38573                           pclath	equ	0xFFA
 38574                           tblptru	equ	0xFF8
 38575                           tblptrh	equ	0xFF7
 38576                           tblptrl	equ	0xFF6
 38577                           tablat	equ	0xFF5
 38578                           prodh	equ	0xFF4
 38579                           prodl	equ	0xFF3
 38580                           intcon	equ	0xFF2
 38581                           intcon2	equ	0xFF1
 38582                           intcon3	equ	0xFF0
 38583                           indf0	equ	0xFEF
 38584                           postinc0	equ	0xFEE
 38585                           plusw0	equ	0xFEB
 38586                           fsr0h	equ	0xFEA
 38587                           fsr0l	equ	0xFE9
 38588                           wreg	equ	0xFE8
 38589                           postinc1	equ	0xFE6
 38590                           postdec1	equ	0xFE5
 38591                           plusw1	equ	0xFE3
 38592                           fsr1h	equ	0xFE2
 38593                           fsr1l	equ	0xFE1
 38594                           indf2	equ	0xFDF
 38595                           postinc2	equ	0xFDE
 38596                           postdec2	equ	0xFDD
 38597                           plusw2	equ	0xFDB
 38598                           fsr2h	equ	0xFDA
 38599                           fsr2l	equ	0xFD9
 38600                           status	equ	0xFD8
 38601                           
 38602 ;; *************** function _LORAWAN_LinkCheckConfigure *****************
 38603 ;; Defined at:
 38604 ;;		line 755 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 38605 ;; Parameters:    Size  Location     Type
 38606 ;;  period          2   70[BANK0 ] unsigned int 
 38607 ;; Auto vars:     Size  Location     Type
 38608 ;;  iCtr            1   80[BANK0 ] unsigned char 
 38609 ;; Return value:  Size  Location     Type
 38610 ;;                  1    wreg      void 
 38611 ;; Registers used:
 38612 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 38613 ;; Tracked objects:
 38614 ;;		On entry : 0/0
 38615 ;;		On exit  : 0/0
 38616 ;;		Unchanged: 0/0
 38617 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 38618 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 38619 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 38620 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 38621 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 38622 ;;Total ram usage:       11 bytes
 38623 ;; Hardware stack levels used:    1
 38624 ;; Hardware stack levels required when called:   11
 38625 ;; This function calls:
 38626 ;;		_SwTimerSetTimeout
 38627 ;;		_SwTimerStart
 38628 ;;		_SwTimerStop
 38629 ;;		___lldiv
 38630 ;;		___lmul
 38631 ;; This function is called by:
 38632 ;;		_LORAWAN_Reset
 38633 ;; This function uses a non-reentrant model
 38634 ;;
 38635                           
 38636                           	psect	text184
 38637  005810                     __ptext184:
 38638                           	opt stack 0
 38639  005810                     _LORAWAN_LinkCheckConfigure:
 38640                           	opt stack 17
 38641                           
 38642                           ;lorawan.c: 757: uint8_t iCtr;
 38643                           ;lorawan.c: 759: loRa.periodForLinkCheck = period * 1000UL;
 38644                           
 38645                           ;incstack = 0
 38646  005810  C0A6  F09A         	movff	LORAWAN_LinkCheckConfigure@period,___lmul@multiplier
 38647  005814  C0A7  F09B         	movff	LORAWAN_LinkCheckConfigure@period+1,___lmul@multiplier+1
 38648  005818  0100               	movlb	0	; () banked
 38649  00581A  6B9C               	clrf	(___lmul@multiplier+2)& (0+255),b
 38650  00581C  6B9D               	clrf	(___lmul@multiplier+3)& (0+255),b
 38651  00581E  0EE8               	movlw	232
 38652  005820  6F9E               	movwf	___lmul@multiplicand& (0+255),b
 38653  005822  0E03               	movlw	3
 38654  005824  6F9F               	movwf	(___lmul@multiplicand+1)& (0+255),b
 38655  005826  0E00               	movlw	0
 38656  005828  6FA0               	movwf	(___lmul@multiplicand+2)& (0+255),b
 38657  00582A  0E00               	movlw	0
 38658  00582C  6FA1               	movwf	(___lmul@multiplicand+3)& (0+255),b
 38659  00582E  EC73  F042         	call	___lmul	;wreg free
 38660  005832  C09A  F2D2         	movff	?___lmul,_loRa+204
 38661  005836  C09B  F2D3         	movff	?___lmul+1,_loRa+205
 38662  00583A  C09C  F2D4         	movff	?___lmul+2,_loRa+206
 38663  00583E  C09D  F2D5         	movff	?___lmul+3,_loRa+207
 38664                           
 38665                           ;lorawan.c: 761: if (period == 0)
 38666  005842  0100               	movlb	0	; () banked
 38667  005844  51A6               	movf	LORAWAN_LinkCheckConfigure@period& (0+255),w,b
 38668  005846  11A7               	iorwf	(LORAWAN_LinkCheckConfigure@period+1)& (0+255),w,b
 38669  005848  A4D8               	btfss	status,2,c
 38670  00584A  D02B               	goto	l1024
 38671                           
 38672                           ; BSR set to: 0
 38673                           ;lorawan.c: 762: {
 38674                           ;lorawan.c: 763: SwTimerStop(loRa.linkCheckTimerId);
 38675  00584C  0102               	movlb	2	; () banked
 38676  00584E  51ED               	movf	(_loRa+231)& (0+255),w,b
 38677  005850  EC1B  F048         	call	_SwTimerStop
 38678                           
 38679                           ;lorawan.c: 764: loRa.macStatus.linkCheck = 0;
 38680  005854  0102               	movlb	2	; () banked
 38681  005856  9509               	bcf	(_loRa+3)& (0+255),2,b
 38682                           
 38683                           ; BSR set to: 2
 38684                           ;lorawan.c: 765: for(iCtr = 0; iCtr < loRa.crtMacCmdIndex; iCtr ++)
 38685  005858  0E00               	movlw	0
 38686  00585A  0100               	movlb	0	; () banked
 38687  00585C  6FB0               	movwf	LORAWAN_LinkCheckConfigure@iCtr& (0+255),b
 38688  00585E  D01A               	goto	l1025
 38689  005860                     
 38690                           ; BSR set to: 0
 38691                           ;lorawan.c: 766: {
 38692                           ;lorawan.c: 767: if(loRa.macCommands[iCtr].receivedCid == LINK_CHECK_CID)
 38693                           
 38694                           ; BSR set to: 0
 38695  005860  51B0               	movf	LORAWAN_LinkCheckConfigure@iCtr& (0+255),w,b
 38696  005862  0D02               	mullw	2
 38697  005864  0EAE               	movlw	low (_loRa+168)
 38698  005866  24F3               	addwf	prodl,w,c
 38699  005868  6ED9               	movwf	fsr2l,c
 38700  00586A  0E02               	movlw	high (_loRa+168)
 38701  00586C  20F4               	addwfc	prodh,w,c
 38702  00586E  6EDA               	movwf	fsr2h,c
 38703  005870  0E02               	movlw	2
 38704  005872  18DE               	xorwf	postinc2,w,c
 38705  005874  A4D8               	btfss	status,2,c
 38706  005876  D00C               	goto	l1027
 38707                           
 38708                           ; BSR set to: 0
 38709                           ;lorawan.c: 768: {
 38710                           ;lorawan.c: 771: loRa.macCommands[iCtr].receivedCid = 0xFF;
 38711  005878  51B0               	movf	LORAWAN_LinkCheckConfigure@iCtr& (0+255),w,b
 38712  00587A  0D02               	mullw	2
 38713  00587C  0EAE               	movlw	low (_loRa+168)
 38714  00587E  24F3               	addwf	prodl,w,c
 38715  005880  6ED9               	movwf	fsr2l,c
 38716  005882  0E02               	movlw	high (_loRa+168)
 38717  005884  20F4               	addwfc	prodh,w,c
 38718  005886  6EDA               	movwf	fsr2h,c
 38719  005888  0EFF               	movlw	255
 38720  00588A  6EDF               	movwf	indf2,c
 38721                           
 38722                           ; BSR set to: 0
 38723                           ;lorawan.c: 772: loRa.crtMacCmdIndex --;
 38724  00588C  0102               	movlb	2	; () banked
 38725  00588E  07AD               	decf	(_loRa+167)& (0+255),f,b
 38726  005890                     l1027:
 38727                           
 38728                           ; BSR set to: 2
 38729  005890  0100               	movlb	0	; () banked
 38730  005892  2BB0               	incf	LORAWAN_LinkCheckConfigure@iCtr& (0+255),f,b
 38731  005894                     l1025:
 38732                           
 38733                           ; BSR set to: 0
 38734                           
 38735                           ; BSR set to: 0
 38736  005894  0102               	movlb	2	; () banked
 38737  005896  51AD               	movf	(_loRa+167)& (0+255),w,b
 38738  005898  0100               	movlb	0	; () banked
 38739  00589A  5DB0               	subwf	LORAWAN_LinkCheckConfigure@iCtr& (0+255),w,b
 38740  00589C  B0D8               	btfsc	status,0,c
 38741  00589E  0012               	return	
 38742  0058A0  D7DF               	goto	l1026
 38743  0058A2                     l1024:
 38744                           
 38745                           ; BSR set to: 0
 38746                           ;lorawan.c: 776: else
 38747                           ;lorawan.c: 777: {
 38748                           ;lorawan.c: 778: loRa.macStatus.linkCheck = 1;
 38749  0058A2  0102               	movlb	2	; () banked
 38750  0058A4  8509               	bsf	(_loRa+3)& (0+255),2,b
 38751                           
 38752                           ;lorawan.c: 781: if (loRa.macStatus.networkJoined == 1)
 38753  0058A6  A908               	btfss	(_loRa+2)& (0+255),4,b
 38754  0058A8  0012               	return	
 38755                           
 38756                           ; BSR set to: 2
 38757                           ;lorawan.c: 782: {
 38758                           ;lorawan.c: 783: SwTimerSetTimeout(loRa.linkCheckTimerId, ((loRa.periodForLinkCheck) < 0
      +                          x000FFFFFUL ? ( (((uint32_t)(loRa.periodForLinkCheck)) << (12)) / 125UL ) : ( (((uint32_
      +                          t)(loRa.periodForLinkCheck)) / 125UL) << (12) ) ));
 38759  0058AA  51D5               	movf	(_loRa+207)& (0+255),w,b
 38760  0058AC  E107               	bnz	u12940
 38761  0058AE  29D2               	incf	(_loRa+204)& (0+255),w,b
 38762  0058B0  0EFF               	movlw	255
 38763  0058B2  59D3               	subwfb	(_loRa+205)& (0+255),w,b
 38764  0058B4  0E0F               	movlw	15
 38765  0058B6  59D4               	subwfb	(_loRa+206)& (0+255),w,b
 38766  0058B8  A0D8               	btfss	status,0,c
 38767  0058BA  D01D               	goto	l1032
 38768  0058BC                     u12940:
 38769                           
 38770                           ; BSR set to: 2
 38771  0058BC  C2D2  F060         	movff	_loRa+204,___lldiv@dividend
 38772  0058C0  C2D3  F061         	movff	_loRa+205,___lldiv@dividend+1
 38773  0058C4  C2D4  F062         	movff	_loRa+206,___lldiv@dividend+2
 38774  0058C8  C2D5  F063         	movff	_loRa+207,___lldiv@dividend+3
 38775  0058CC  0E7D               	movlw	125
 38776  0058CE  0100               	movlb	0	; () banked
 38777  0058D0  6F64               	movwf	___lldiv@divisor& (0+255),b
 38778  0058D2  0E00               	movlw	0
 38779  0058D4  6F65               	movwf	(___lldiv@divisor+1)& (0+255),b
 38780  0058D6  0E00               	movlw	0
 38781  0058D8  6F66               	movwf	(___lldiv@divisor+2)& (0+255),b
 38782  0058DA  0E00               	movlw	0
 38783  0058DC  6F67               	movwf	(___lldiv@divisor+3)& (0+255),b
 38784  0058DE  EC0A  F03D         	call	___lldiv	;wreg free
 38785  0058E2  0E0C               	movlw	12
 38786  0058E4                     u12955:
 38787  0058E4  90D8               	bcf	status,0,c
 38788  0058E6  0100               	movlb	0	; () banked
 38789  0058E8  3760               	rlcf	?___lldiv& (0+255),f,b
 38790  0058EA  3761               	rlcf	(?___lldiv+1)& (0+255),f,b
 38791  0058EC  3762               	rlcf	(?___lldiv+2)& (0+255),f,b
 38792  0058EE  3763               	rlcf	(?___lldiv+3)& (0+255),f,b
 38793  0058F0  2EE8               	decfsz	wreg,f,c
 38794  0058F2  D7F8               	goto	u12955
 38795  0058F4  D023               	goto	L28
 38796  0058F6                     l1032:
 38797                           
 38798                           ; BSR set to: 0
 38799  0058F6  C2D2  F0A8         	movff	_loRa+204,??_LORAWAN_LinkCheckConfigure
 38800  0058FA  C2D3  F0A9         	movff	_loRa+205,??_LORAWAN_LinkCheckConfigure+1
 38801  0058FE  C2D4  F0AA         	movff	_loRa+206,??_LORAWAN_LinkCheckConfigure+2
 38802  005902  C2D5  F0AB         	movff	_loRa+207,??_LORAWAN_LinkCheckConfigure+3
 38803  005906  0E0C               	movlw	12
 38804  005908                     u12965:
 38805  005908  90D8               	bcf	status,0,c
 38806  00590A  0100               	movlb	0	; () banked
 38807  00590C  37A8               	rlcf	??_LORAWAN_LinkCheckConfigure& (0+255),f,b
 38808  00590E  37A9               	rlcf	(??_LORAWAN_LinkCheckConfigure+1)& (0+255),f,b
 38809  005910  37AA               	rlcf	(??_LORAWAN_LinkCheckConfigure+2)& (0+255),f,b
 38810  005912  37AB               	rlcf	(??_LORAWAN_LinkCheckConfigure+3)& (0+255),f,b
 38811  005914  2EE8               	decfsz	wreg,f,c
 38812  005916  D7F8               	goto	u12965
 38813  005918  C0A8  F060         	movff	??_LORAWAN_LinkCheckConfigure,___lldiv@dividend
 38814  00591C  C0A9  F061         	movff	??_LORAWAN_LinkCheckConfigure+1,___lldiv@dividend+1
 38815  005920  C0AA  F062         	movff	??_LORAWAN_LinkCheckConfigure+2,___lldiv@dividend+2
 38816  005924  C0AB  F063         	movff	??_LORAWAN_LinkCheckConfigure+3,___lldiv@dividend+3
 38817  005928  0E7D               	movlw	125
 38818  00592A  6F64               	movwf	___lldiv@divisor& (0+255),b
 38819  00592C  0E00               	movlw	0
 38820  00592E  6F65               	movwf	(___lldiv@divisor+1)& (0+255),b
 38821  005930  0E00               	movlw	0
 38822  005932  6F66               	movwf	(___lldiv@divisor+2)& (0+255),b
 38823  005934  0E00               	movlw	0
 38824  005936  6F67               	movwf	(___lldiv@divisor+3)& (0+255),b
 38825  005938  EC0A  F03D         	call	___lldiv	;wreg free
 38826  00593C                     L28:
 38827  00593C  C060  F0AC         	movff	?___lldiv,_LORAWAN_LinkCheckConfigure$1514
 38828  005940  C061  F0AD         	movff	?___lldiv+1,_LORAWAN_LinkCheckConfigure$1514+1
 38829  005944  C062  F0AE         	movff	?___lldiv+2,_LORAWAN_LinkCheckConfigure$1514+2
 38830  005948  C063  F0AF         	movff	?___lldiv+3,_LORAWAN_LinkCheckConfigure$1514+3
 38831  00594C  C0AC  F06D         	movff	_LORAWAN_LinkCheckConfigure$1514,SwTimerSetTimeout@timeout
 38832  005950  C0AD  F06E         	movff	_LORAWAN_LinkCheckConfigure$1514+1,SwTimerSetTimeout@timeout+1
 38833  005954  C0AE  F06F         	movff	_LORAWAN_LinkCheckConfigure$1514+2,SwTimerSetTimeout@timeout+2
 38834  005958  C0AF  F070         	movff	_LORAWAN_LinkCheckConfigure$1514+3,SwTimerSetTimeout@timeout+3
 38835  00595C  0102               	movlb	2	; () banked
 38836  00595E  51ED               	movf	(_loRa+231)& (0+255),w,b
 38837  005960  EC27  F045         	call	_SwTimerSetTimeout
 38838                           
 38839                           ;lorawan.c: 784: SwTimerStart(loRa.linkCheckTimerId);
 38840  005964  0102               	movlb	2	; () banked
 38841  005966  51ED               	movf	(_loRa+231)& (0+255),w,b
 38842  005968  ECDA  F03A         	call	_SwTimerStart
 38843  00596C  0012               	return	
 38844  00596E                     __end_of_LORAWAN_LinkCheckConfigure:
 38845                           	opt stack 0
 38846                           tosu	equ	0xFFF
 38847                           tosh	equ	0xFFE
 38848                           tosl	equ	0xFFD
 38849                           pclath	equ	0xFFA
 38850                           tblptru	equ	0xFF8
 38851                           tblptrh	equ	0xFF7
 38852                           tblptrl	equ	0xFF6
 38853                           tablat	equ	0xFF5
 38854                           prodh	equ	0xFF4
 38855                           prodl	equ	0xFF3
 38856                           intcon	equ	0xFF2
 38857                           intcon2	equ	0xFF1
 38858                           intcon3	equ	0xFF0
 38859                           indf0	equ	0xFEF
 38860                           postinc0	equ	0xFEE
 38861                           plusw0	equ	0xFEB
 38862                           fsr0h	equ	0xFEA
 38863                           fsr0l	equ	0xFE9
 38864                           wreg	equ	0xFE8
 38865                           postinc1	equ	0xFE6
 38866                           postdec1	equ	0xFE5
 38867                           plusw1	equ	0xFE3
 38868                           fsr1h	equ	0xFE2
 38869                           fsr1l	equ	0xFE1
 38870                           indf2	equ	0xFDF
 38871                           postinc2	equ	0xFDE
 38872                           postdec2	equ	0xFDD
 38873                           plusw2	equ	0xFDB
 38874                           fsr2h	equ	0xFDA
 38875                           fsr2l	equ	0xFD9
 38876                           status	equ	0xFD8
 38877                           
 38878 ;; *************** function ___lmul *****************
 38879 ;; Defined at:
 38880 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul32.c"
 38881 ;; Parameters:    Size  Location     Type
 38882 ;;  multiplier      4   58[BANK0 ] unsigned long 
 38883 ;;  multiplicand    4   62[BANK0 ] unsigned long 
 38884 ;; Auto vars:     Size  Location     Type
 38885 ;;  product         4   66[BANK0 ] unsigned long 
 38886 ;; Return value:  Size  Location     Type
 38887 ;;                  4   58[BANK0 ] unsigned long 
 38888 ;; Registers used:
 38889 ;;		wreg, status,2, status,0
 38890 ;; Tracked objects:
 38891 ;;		On entry : 0/0
 38892 ;;		On exit  : 0/0
 38893 ;;		Unchanged: 0/0
 38894 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 38895 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 38896 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 38897 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 38898 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 38899 ;;Total ram usage:       12 bytes
 38900 ;; Hardware stack levels used:    1
 38901 ;; Hardware stack levels required when called:    7
 38902 ;; This function calls:
 38903 ;;		Nothing
 38904 ;; This function is called by:
 38905 ;;		_RADIO_WriteConfiguration
 38906 ;;		_RADIO_TxDone
 38907 ;;		_RADIO_FSKPacketSent
 38908 ;;		_LORAWAN_LinkCheckConfigure
 38909 ;;		_LORAWAN_TxDone
 38910 ;;		_ExecuteNewChannel
 38911 ;;		_ExecuteRxParamSetupReq
 38912 ;;		_UpdateCfList
 38913 ;;		_rand
 38914 ;;		_LORAWAN_Pause
 38915 ;; This function uses a non-reentrant model
 38916 ;;
 38917                           
 38918                           	psect	text185
 38919  0084E6                     __ptext185:
 38920                           	opt stack 0
 38921  0084E6                     ___lmul:
 38922                           	opt stack 18
 38923                           
 38924                           ;incstack = 0
 38925  0084E6  0E00               	movlw	0
 38926  0084E8  0100               	movlb	0	; () banked
 38927  0084EA  6FA2               	movwf	___lmul@product& (0+255),b
 38928  0084EC  0E00               	movlw	0
 38929  0084EE  6FA3               	movwf	(___lmul@product+1)& (0+255),b
 38930  0084F0  0E00               	movlw	0
 38931  0084F2  6FA4               	movwf	(___lmul@product+2)& (0+255),b
 38932  0084F4  0E00               	movlw	0
 38933  0084F6  6FA5               	movwf	(___lmul@product+3)& (0+255),b
 38934  0084F8                     
 38935                           ; BSR set to: 0
 38936                           
 38937                           ; BSR set to: 0
 38938  0084F8  A19A               	btfss	___lmul@multiplier& (0+255),0,b
 38939  0084FA  D008               	goto	l2844
 38940                           
 38941                           ; BSR set to: 0
 38942  0084FC  519E               	movf	___lmul@multiplicand& (0+255),w,b
 38943  0084FE  27A2               	addwf	___lmul@product& (0+255),f,b
 38944  008500  519F               	movf	(___lmul@multiplicand+1)& (0+255),w,b
 38945  008502  23A3               	addwfc	(___lmul@product+1)& (0+255),f,b
 38946  008504  51A0               	movf	(___lmul@multiplicand+2)& (0+255),w,b
 38947  008506  23A4               	addwfc	(___lmul@product+2)& (0+255),f,b
 38948  008508  51A1               	movf	(___lmul@multiplicand+3)& (0+255),w,b
 38949  00850A  23A5               	addwfc	(___lmul@product+3)& (0+255),f,b
 38950  00850C                     l2844:
 38951                           
 38952                           ; BSR set to: 0
 38953                           
 38954                           ; BSR set to: 0
 38955  00850C  90D8               	bcf	status,0,c
 38956  00850E  379E               	rlcf	___lmul@multiplicand& (0+255),f,b
 38957  008510  379F               	rlcf	(___lmul@multiplicand+1)& (0+255),f,b
 38958  008512  37A0               	rlcf	(___lmul@multiplicand+2)& (0+255),f,b
 38959  008514  37A1               	rlcf	(___lmul@multiplicand+3)& (0+255),f,b
 38960                           
 38961                           ; BSR set to: 0
 38962  008516  90D8               	bcf	status,0,c
 38963  008518  339D               	rrcf	(___lmul@multiplier+3)& (0+255),f,b
 38964  00851A  339C               	rrcf	(___lmul@multiplier+2)& (0+255),f,b
 38965  00851C  339B               	rrcf	(___lmul@multiplier+1)& (0+255),f,b
 38966  00851E  339A               	rrcf	___lmul@multiplier& (0+255),f,b
 38967  008520  519A               	movf	___lmul@multiplier& (0+255),w,b
 38968  008522  119B               	iorwf	(___lmul@multiplier+1)& (0+255),w,b
 38969  008524  119C               	iorwf	(___lmul@multiplier+2)& (0+255),w,b
 38970  008526  119D               	iorwf	(___lmul@multiplier+3)& (0+255),w,b
 38971  008528  A4D8               	btfss	status,2,c
 38972  00852A  D7E6               	goto	l2843
 38973                           
 38974                           ; BSR set to: 0
 38975  00852C  C0A2  F09A         	movff	___lmul@product,?___lmul
 38976  008530  C0A3  F09B         	movff	___lmul@product+1,?___lmul+1
 38977  008534  C0A4  F09C         	movff	___lmul@product+2,?___lmul+2
 38978  008538  C0A5  F09D         	movff	___lmul@product+3,?___lmul+3
 38979                           
 38980                           ; BSR set to: 0
 38981  00853C  0012               	return		;funcret
 38982  00853E                     __end_of___lmul:
 38983                           	opt stack 0
 38984                           tosu	equ	0xFFF
 38985                           tosh	equ	0xFFE
 38986                           tosl	equ	0xFFD
 38987                           pclath	equ	0xFFA
 38988                           tblptru	equ	0xFF8
 38989                           tblptrh	equ	0xFF7
 38990                           tblptrl	equ	0xFF6
 38991                           tablat	equ	0xFF5
 38992                           prodh	equ	0xFF4
 38993                           prodl	equ	0xFF3
 38994                           intcon	equ	0xFF2
 38995                           intcon2	equ	0xFF1
 38996                           intcon3	equ	0xFF0
 38997                           indf0	equ	0xFEF
 38998                           postinc0	equ	0xFEE
 38999                           plusw0	equ	0xFEB
 39000                           fsr0h	equ	0xFEA
 39001                           fsr0l	equ	0xFE9
 39002                           wreg	equ	0xFE8
 39003                           postinc1	equ	0xFE6
 39004                           postdec1	equ	0xFE5
 39005                           plusw1	equ	0xFE3
 39006                           fsr1h	equ	0xFE2
 39007                           fsr1l	equ	0xFE1
 39008                           indf2	equ	0xFDF
 39009                           postinc2	equ	0xFDE
 39010                           postdec2	equ	0xFDD
 39011                           plusw2	equ	0xFDB
 39012                           fsr2h	equ	0xFDA
 39013                           fsr2l	equ	0xFD9
 39014                           status	equ	0xFD8
 39015                           
 39016 ;; *************** function ___lldiv *****************
 39017 ;; Defined at:
 39018 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lldiv.c"
 39019 ;; Parameters:    Size  Location     Type
 39020 ;;  dividend        4    0[BANK0 ] unsigned long 
 39021 ;;  divisor         4    4[BANK0 ] unsigned long 
 39022 ;; Auto vars:     Size  Location     Type
 39023 ;;  quotient        4    8[BANK0 ] unsigned long 
 39024 ;;  counter         1   12[BANK0 ] unsigned char 
 39025 ;; Return value:  Size  Location     Type
 39026 ;;                  4    0[BANK0 ] unsigned long 
 39027 ;; Registers used:
 39028 ;;		wreg, status,2, status,0
 39029 ;; Tracked objects:
 39030 ;;		On entry : 0/0
 39031 ;;		On exit  : 0/0
 39032 ;;		Unchanged: 0/0
 39033 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 39034 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 39035 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 39036 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 39037 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 39038 ;;Total ram usage:       13 bytes
 39039 ;; Hardware stack levels used:    1
 39040 ;; Hardware stack levels required when called:    7
 39041 ;; This function calls:
 39042 ;;		Nothing
 39043 ;; This function is called by:
 39044 ;;		_RADIO_WriteFrequency
 39045 ;;		_RADIO_WriteFSKFrequencyDeviation
 39046 ;;		_RADIO_WriteFSKBitRate
 39047 ;;		_RADIO_Transmit
 39048 ;;		_RADIO_ReceiveStart
 39049 ;;		_LORAWAN_LinkCheckConfigure
 39050 ;;		_LORAWAN_LinkCheckCallback
 39051 ;;		_UpdateRetransmissionAckTimeoutState
 39052 ;;		_UpdateJoinSuccessState
 39053 ;;		_LORAWAN_TxDone
 39054 ;;		_LORAWAN_RxTimeout
 39055 ;;		_StartReTxTimer
 39056 ;;		_DutyCycleCallback
 39057 ;; This function uses a non-reentrant model
 39058 ;;
 39059                           
 39060                           	psect	text186
 39061  007A14                     __ptext186:
 39062                           	opt stack 0
 39063  007A14                     ___lldiv:
 39064                           	opt stack 21
 39065                           
 39066                           ; BSR set to: 0
 39067                           ;incstack = 0
 39068  007A14  0E00               	movlw	0
 39069  007A16  0100               	movlb	0	; () banked
 39070  007A18  6F68               	movwf	___lldiv@quotient& (0+255),b
 39071  007A1A  0E00               	movlw	0
 39072  007A1C  6F69               	movwf	(___lldiv@quotient+1)& (0+255),b
 39073  007A1E  0E00               	movlw	0
 39074  007A20  6F6A               	movwf	(___lldiv@quotient+2)& (0+255),b
 39075  007A22  0E00               	movlw	0
 39076  007A24  6F6B               	movwf	(___lldiv@quotient+3)& (0+255),b
 39077                           
 39078                           ; BSR set to: 0
 39079  007A26  5164               	movf	___lldiv@divisor& (0+255),w,b
 39080  007A28  1165               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
 39081  007A2A  1166               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
 39082  007A2C  1167               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
 39083  007A2E  B4D8               	btfsc	status,2,c
 39084  007A30  D02A               	goto	l3187
 39085                           
 39086                           ; BSR set to: 0
 39087  007A32  0E01               	movlw	1
 39088  007A34  6F6C               	movwf	___lldiv@counter& (0+255),b
 39089  007A36  D006               	goto	l3182
 39090  007A38                     
 39091                           ; BSR set to: 0
 39092                           
 39093                           ; BSR set to: 0
 39094  007A38  90D8               	bcf	status,0,c
 39095  007A3A  3764               	rlcf	___lldiv@divisor& (0+255),f,b
 39096  007A3C  3765               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
 39097  007A3E  3766               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
 39098  007A40  3767               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
 39099  007A42  2B6C               	incf	___lldiv@counter& (0+255),f,b
 39100  007A44                     l3182:
 39101                           
 39102                           ; BSR set to: 0
 39103                           
 39104                           ; BSR set to: 0
 39105  007A44  AF67               	btfss	(___lldiv@divisor+3)& (0+255),7,b
 39106  007A46  D7F8               	goto	l3183
 39107  007A48                     u7890:
 39108                           
 39109                           ; BSR set to: 0
 39110                           
 39111                           ; BSR set to: 0
 39112                           
 39113                           ; BSR set to: 0
 39114  007A48  90D8               	bcf	status,0,c
 39115  007A4A  3768               	rlcf	___lldiv@quotient& (0+255),f,b
 39116  007A4C  3769               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
 39117  007A4E  376A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
 39118  007A50  376B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
 39119                           
 39120                           ; BSR set to: 0
 39121  007A52  5164               	movf	___lldiv@divisor& (0+255),w,b
 39122  007A54  5D60               	subwf	___lldiv@dividend& (0+255),w,b
 39123  007A56  5165               	movf	(___lldiv@divisor+1)& (0+255),w,b
 39124  007A58  5961               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
 39125  007A5A  5166               	movf	(___lldiv@divisor+2)& (0+255),w,b
 39126  007A5C  5962               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
 39127  007A5E  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
 39128  007A60  5963               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
 39129  007A62  A0D8               	btfss	status,0,c
 39130  007A64  D009               	goto	l3186
 39131                           
 39132                           ; BSR set to: 0
 39133  007A66  5164               	movf	___lldiv@divisor& (0+255),w,b
 39134  007A68  5F60               	subwf	___lldiv@dividend& (0+255),f,b
 39135  007A6A  5165               	movf	(___lldiv@divisor+1)& (0+255),w,b
 39136  007A6C  5B61               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
 39137  007A6E  5166               	movf	(___lldiv@divisor+2)& (0+255),w,b
 39138  007A70  5B62               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
 39139  007A72  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
 39140  007A74  5B63               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
 39141                           
 39142                           ; BSR set to: 0
 39143  007A76  8168               	bsf	___lldiv@quotient& (0+255),0,b
 39144  007A78                     l3186:
 39145                           
 39146                           ; BSR set to: 0
 39147                           
 39148                           ; BSR set to: 0
 39149  007A78  90D8               	bcf	status,0,c
 39150  007A7A  3367               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
 39151  007A7C  3366               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
 39152  007A7E  3365               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
 39153  007A80  3364               	rrcf	___lldiv@divisor& (0+255),f,b
 39154                           
 39155                           ; BSR set to: 0
 39156  007A82  2F6C               	decfsz	___lldiv@counter& (0+255),f,b
 39157  007A84  D7E1               	goto	u7890
 39158  007A86                     l3187:
 39159                           
 39160                           ; BSR set to: 0
 39161                           
 39162                           ; BSR set to: 0
 39163  007A86  C068  F060         	movff	___lldiv@quotient,?___lldiv
 39164  007A8A  C069  F061         	movff	___lldiv@quotient+1,?___lldiv+1
 39165  007A8E  C06A  F062         	movff	___lldiv@quotient+2,?___lldiv+2
 39166  007A92  C06B  F063         	movff	___lldiv@quotient+3,?___lldiv+3
 39167                           
 39168                           ; BSR set to: 0
 39169  007A96  0012               	return		;funcret
 39170  007A98                     __end_of___lldiv:
 39171                           	opt stack 0
 39172                           tosu	equ	0xFFF
 39173                           tosh	equ	0xFFE
 39174                           tosl	equ	0xFFD
 39175                           pclath	equ	0xFFA
 39176                           tblptru	equ	0xFF8
 39177                           tblptrh	equ	0xFF7
 39178                           tblptrl	equ	0xFF6
 39179                           tablat	equ	0xFF5
 39180                           prodh	equ	0xFF4
 39181                           prodl	equ	0xFF3
 39182                           intcon	equ	0xFF2
 39183                           intcon2	equ	0xFF1
 39184                           intcon3	equ	0xFF0
 39185                           indf0	equ	0xFEF
 39186                           postinc0	equ	0xFEE
 39187                           plusw0	equ	0xFEB
 39188                           fsr0h	equ	0xFEA
 39189                           fsr0l	equ	0xFE9
 39190                           wreg	equ	0xFE8
 39191                           postinc1	equ	0xFE6
 39192                           postdec1	equ	0xFE5
 39193                           plusw1	equ	0xFE3
 39194                           fsr1h	equ	0xFE2
 39195                           fsr1l	equ	0xFE1
 39196                           indf2	equ	0xFDF
 39197                           postinc2	equ	0xFDE
 39198                           postdec2	equ	0xFDD
 39199                           plusw2	equ	0xFDB
 39200                           fsr2h	equ	0xFDA
 39201                           fsr2l	equ	0xFD9
 39202                           status	equ	0xFD8
 39203                           
 39204 ;; *************** function _SwTimerStop *****************
 39205 ;; Defined at:
 39206 ;;		line 233 in file "mcc_generated_files/LoRaWAN/sw_timer.c"
 39207 ;; Parameters:    Size  Location     Type
 39208 ;;  timerId         1    wreg     unsigned char 
 39209 ;; Auto vars:     Size  Location     Type
 39210 ;;  timerId         1    0[BANK0 ] unsigned char 
 39211 ;; Return value:  Size  Location     Type
 39212 ;;                  1    wreg      void 
 39213 ;; Registers used:
 39214 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 39215 ;; Tracked objects:
 39216 ;;		On entry : 0/0
 39217 ;;		On exit  : 0/0
 39218 ;;		Unchanged: 0/0
 39219 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 39220 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 39221 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 39222 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 39223 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 39224 ;;Total ram usage:        1 bytes
 39225 ;; Hardware stack levels used:    1
 39226 ;; Hardware stack levels required when called:    7
 39227 ;; This function calls:
 39228 ;;		Nothing
 39229 ;; This function is called by:
 39230 ;;		_RADIO_Init
 39231 ;;		_RADIO_Transmit
 39232 ;;		_RADIO_RxDone
 39233 ;;		_RADIO_FSKPayloadReady
 39234 ;;		_RADIO_RxTimeout
 39235 ;;		_RADIO_TxDone
 39236 ;;		_RADIO_FSKPacketSent
 39237 ;;		_RADIO_RxFSKTimeout
 39238 ;;		_LORAWAN_LinkCheckConfigure
 39239 ;;		_LORAWAN_RxDone
 39240 ;;		_LORAWAN_TxDone
 39241 ;;		_StopAllSoftwareTimers
 39242 ;; This function uses a non-reentrant model
 39243 ;;
 39244                           
 39245                           	psect	text187
 39246  009036                     __ptext187:
 39247                           	opt stack 0
 39248  009036                     _SwTimerStop:
 39249                           	opt stack 21
 39250                           
 39251                           ; BSR set to: 0
 39252                           ;incstack = 0
 39253                           ;SwTimerStop@timerId stored from wreg
 39254  009036  0100               	movlb	0	; () banked
 39255  009038  6F60               	movwf	SwTimerStop@timerId& (0+255),b
 39256                           
 39257                           ;sw_timer.c: 235: (INTCONbits.GIE = 0);
 39258  00903A  9EF2               	bcf	intcon,7,c	;volatile
 39259                           
 39260                           ;sw_timer.c: 236: swTimers[timerId].running = 0;
 39261  00903C  0100               	movlb	0	; () banked
 39262  00903E  5160               	movf	SwTimerStop@timerId& (0+255),w,b
 39263  009040  0D08               	mullw	8
 39264  009042  0E04               	movlw	4
 39265  009044  26F3               	addwf	prodl,f,c
 39266  009046  0E00               	movlw	0
 39267  009048  22F4               	addwfc	prodh,f,c
 39268  00904A  0E00               	movlw	low _swTimers
 39269  00904C  24F3               	addwf	prodl,w,c
 39270  00904E  6ED9               	movwf	fsr2l,c
 39271  009050  0E03               	movlw	high _swTimers
 39272  009052  20F4               	addwfc	prodh,w,c
 39273  009054  6EDA               	movwf	fsr2h,c
 39274  009056  0E00               	movlw	0
 39275  009058  6EDF               	movwf	indf2,c
 39276                           
 39277                           ; BSR set to: 0
 39278                           ;sw_timer.c: 237: (INTCONbits.GIE = 1);
 39279  00905A  8EF2               	bsf	intcon,7,c	;volatile
 39280                           
 39281                           ; BSR set to: 0
 39282  00905C  0012               	return		;funcret
 39283  00905E                     __end_of_SwTimerStop:
 39284                           	opt stack 0
 39285                           tosu	equ	0xFFF
 39286                           tosh	equ	0xFFE
 39287                           tosl	equ	0xFFD
 39288                           pclath	equ	0xFFA
 39289                           tblptru	equ	0xFF8
 39290                           tblptrh	equ	0xFF7
 39291                           tblptrl	equ	0xFF6
 39292                           tablat	equ	0xFF5
 39293                           prodh	equ	0xFF4
 39294                           prodl	equ	0xFF3
 39295                           intcon	equ	0xFF2
 39296                           intcon2	equ	0xFF1
 39297                           intcon3	equ	0xFF0
 39298                           indf0	equ	0xFEF
 39299                           postinc0	equ	0xFEE
 39300                           plusw0	equ	0xFEB
 39301                           fsr0h	equ	0xFEA
 39302                           fsr0l	equ	0xFE9
 39303                           wreg	equ	0xFE8
 39304                           postinc1	equ	0xFE6
 39305                           postdec1	equ	0xFE5
 39306                           plusw1	equ	0xFE3
 39307                           fsr1h	equ	0xFE2
 39308                           fsr1l	equ	0xFE1
 39309                           indf2	equ	0xFDF
 39310                           postinc2	equ	0xFDE
 39311                           postdec2	equ	0xFDD
 39312                           plusw2	equ	0xFDB
 39313                           fsr2h	equ	0xFDA
 39314                           fsr2l	equ	0xFD9
 39315                           status	equ	0xFD8
 39316                           
 39317 ;; *************** function _SwTimerStart *****************
 39318 ;; Defined at:
 39319 ;;		line 218 in file "mcc_generated_files/LoRaWAN/sw_timer.c"
 39320 ;; Parameters:    Size  Location     Type
 39321 ;;  timerId         1    wreg     unsigned char 
 39322 ;; Auto vars:     Size  Location     Type
 39323 ;;  timerId         1   57[BANK0 ] unsigned char 
 39324 ;;  ticksRemaini    4   53[BANK0 ] unsigned long 
 39325 ;; Return value:  Size  Location     Type
 39326 ;;                  1    wreg      void 
 39327 ;; Registers used:
 39328 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 39329 ;; Tracked objects:
 39330 ;;		On entry : 0/0
 39331 ;;		On exit  : 0/0
 39332 ;;		Unchanged: 0/0
 39333 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 39334 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 39335 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 39336 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 39337 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 39338 ;;Total ram usage:        9 bytes
 39339 ;; Hardware stack levels used:    1
 39340 ;; Hardware stack levels required when called:   10
 39341 ;; This function calls:
 39342 ;;		_SwTimersInterrupt
 39343 ;;		_TMR_OverrideRemaining
 39344 ;; This function is called by:
 39345 ;;		_RADIO_Transmit
 39346 ;;		_RADIO_ReceiveStart
 39347 ;;		_LORAWAN_Join
 39348 ;;		_LORAWAN_LinkCheckConfigure
 39349 ;;		_LORAWAN_LinkCheckCallback
 39350 ;;		_UpdateRetransmissionAckTimeoutState
 39351 ;;		_UpdateJoinSuccessState
 39352 ;;		_LORAWAN_TxDone
 39353 ;;		_LORAWAN_RxTimeout
 39354 ;;		_StartReTxTimer
 39355 ;;		_DutyCycleCallback
 39356 ;; This function uses a non-reentrant model
 39357 ;;
 39358                           
 39359                           	psect	text188
 39360  0075B4                     __ptext188:
 39361                           	opt stack 0
 39362  0075B4                     _SwTimerStart:
 39363                           	opt stack 18
 39364                           
 39365                           ; BSR set to: 0
 39366                           ;incstack = 0
 39367                           ;SwTimerStart@timerId stored from wreg
 39368  0075B4  0100               	movlb	0	; () banked
 39369  0075B6  6F99               	movwf	SwTimerStart@timerId& (0+255),b
 39370                           
 39371                           ;sw_timer.c: 220: uint32_t ticksRemaining;
 39372                           ;sw_timer.c: 222: (INTCONbits.GIE = 0);
 39373  0075B8  9EF2               	bcf	intcon,7,c	;volatile
 39374                           
 39375                           ;sw_timer.c: 223: ticksRemaining = SwTimersInterrupt();
 39376  0075BA  ECF1  F030         	call	_SwTimersInterrupt	;wreg free
 39377  0075BE  C080  F095         	movff	?_SwTimersInterrupt,SwTimerStart@ticksRemaining
 39378  0075C2  C081  F096         	movff	?_SwTimersInterrupt+1,SwTimerStart@ticksRemaining+1
 39379  0075C6  C082  F097         	movff	?_SwTimersInterrupt+2,SwTimerStart@ticksRemaining+2
 39380  0075CA  C083  F098         	movff	?_SwTimersInterrupt+3,SwTimerStart@ticksRemaining+3
 39381                           
 39382                           ;sw_timer.c: 224: if (swTimers[timerId].ticksRemaining < ticksRemaining)
 39383  0075CE  0100               	movlb	0	; () banked
 39384  0075D0  5199               	movf	SwTimerStart@timerId& (0+255),w,b
 39385  0075D2  0D08               	mullw	8
 39386  0075D4  0E00               	movlw	low _swTimers
 39387  0075D6  24F3               	addwf	prodl,w,c
 39388  0075D8  6ED9               	movwf	fsr2l,c
 39389  0075DA  0E03               	movlw	high _swTimers
 39390  0075DC  20F4               	addwfc	prodh,w,c
 39391  0075DE  6EDA               	movwf	fsr2h,c
 39392  0075E0  5195               	movf	SwTimerStart@ticksRemaining& (0+255),w,b
 39393  0075E2  5CDE               	subwf	postinc2,w,c
 39394  0075E4  5196               	movf	(SwTimerStart@ticksRemaining+1)& (0+255),w,b
 39395  0075E6  58DE               	subwfb	postinc2,w,c
 39396  0075E8  5197               	movf	(SwTimerStart@ticksRemaining+2)& (0+255),w,b
 39397  0075EA  58DE               	subwfb	postinc2,w,c
 39398  0075EC  5198               	movf	(SwTimerStart@ticksRemaining+3)& (0+255),w,b
 39399  0075EE  58DE               	subwfb	postinc2,w,c
 39400  0075F0  B0D8               	btfsc	status,0,c
 39401  0075F2  D010               	goto	l1569
 39402                           
 39403                           ; BSR set to: 0
 39404                           ;sw_timer.c: 225: {
 39405                           ;sw_timer.c: 226: ticksRemaining = swTimers[timerId].ticksRemaining;
 39406  0075F4  5199               	movf	SwTimerStart@timerId& (0+255),w,b
 39407  0075F6  0D08               	mullw	8
 39408  0075F8  0E00               	movlw	low _swTimers
 39409  0075FA  24F3               	addwf	prodl,w,c
 39410  0075FC  6ED9               	movwf	fsr2l,c
 39411  0075FE  0E03               	movlw	high _swTimers
 39412  007600  20F4               	addwfc	prodh,w,c
 39413  007602  6EDA               	movwf	fsr2h,c
 39414  007604  CFDE F095          	movff	postinc2,SwTimerStart@ticksRemaining
 39415  007608  CFDE F096          	movff	postinc2,SwTimerStart@ticksRemaining+1
 39416  00760C  CFDE F097          	movff	postinc2,SwTimerStart@ticksRemaining+2
 39417  007610  CFDE F098          	movff	postinc2,SwTimerStart@ticksRemaining+3
 39418  007614                     l1569:
 39419                           
 39420                           ; BSR set to: 0
 39421                           ;sw_timer.c: 227: }
 39422                           ;sw_timer.c: 228: TMR_OverrideRemaining(ticksRemaining);
 39423                           
 39424                           ; BSR set to: 0
 39425  007614  C095  F06A         	movff	SwTimerStart@ticksRemaining,TMR_OverrideRemaining@ticksRemaining
 39426  007618  C096  F06B         	movff	SwTimerStart@ticksRemaining+1,TMR_OverrideRemaining@ticksRemaining+1
 39427  00761C  C097  F06C         	movff	SwTimerStart@ticksRemaining+2,TMR_OverrideRemaining@ticksRemaining+2
 39428  007620  C098  F06D         	movff	SwTimerStart@ticksRemaining+3,TMR_OverrideRemaining@ticksRemaining+3
 39429  007624  EC8C  F03A         	call	_TMR_OverrideRemaining	;wreg free
 39430                           
 39431                           ;sw_timer.c: 229: swTimers[timerId].running = 1;
 39432  007628  0100               	movlb	0	; () banked
 39433  00762A  5199               	movf	SwTimerStart@timerId& (0+255),w,b
 39434  00762C  0D08               	mullw	8
 39435  00762E  0E04               	movlw	4
 39436  007630  26F3               	addwf	prodl,f,c
 39437  007632  0E00               	movlw	0
 39438  007634  22F4               	addwfc	prodh,f,c
 39439  007636  0E00               	movlw	low _swTimers
 39440  007638  24F3               	addwf	prodl,w,c
 39441  00763A  6ED9               	movwf	fsr2l,c
 39442  00763C  0E03               	movlw	high _swTimers
 39443  00763E  20F4               	addwfc	prodh,w,c
 39444  007640  6EDA               	movwf	fsr2h,c
 39445  007642  0E01               	movlw	1
 39446  007644  6EDF               	movwf	indf2,c
 39447                           
 39448                           ; BSR set to: 0
 39449                           ;sw_timer.c: 230: (INTCONbits.GIE = 1);
 39450  007646  8EF2               	bsf	intcon,7,c	;volatile
 39451                           
 39452                           ; BSR set to: 0
 39453  007648  0012               	return		;funcret
 39454  00764A                     __end_of_SwTimerStart:
 39455                           	opt stack 0
 39456                           tosu	equ	0xFFF
 39457                           tosh	equ	0xFFE
 39458                           tosl	equ	0xFFD
 39459                           pclath	equ	0xFFA
 39460                           tblptru	equ	0xFF8
 39461                           tblptrh	equ	0xFF7
 39462                           tblptrl	equ	0xFF6
 39463                           tablat	equ	0xFF5
 39464                           prodh	equ	0xFF4
 39465                           prodl	equ	0xFF3
 39466                           intcon	equ	0xFF2
 39467                           intcon2	equ	0xFF1
 39468                           intcon3	equ	0xFF0
 39469                           indf0	equ	0xFEF
 39470                           postinc0	equ	0xFEE
 39471                           plusw0	equ	0xFEB
 39472                           fsr0h	equ	0xFEA
 39473                           fsr0l	equ	0xFE9
 39474                           wreg	equ	0xFE8
 39475                           postinc1	equ	0xFE6
 39476                           postdec1	equ	0xFE5
 39477                           plusw1	equ	0xFE3
 39478                           fsr1h	equ	0xFE2
 39479                           fsr1l	equ	0xFE1
 39480                           indf2	equ	0xFDF
 39481                           postinc2	equ	0xFDE
 39482                           postdec2	equ	0xFDD
 39483                           plusw2	equ	0xFDB
 39484                           fsr2h	equ	0xFDA
 39485                           fsr2l	equ	0xFD9
 39486                           status	equ	0xFD8
 39487                           
 39488 ;; *************** function _TMR_OverrideRemaining *****************
 39489 ;; Defined at:
 39490 ;;		line 65 in file "mcc_generated_files/LoRaWAN/sw_timer.c"
 39491 ;; Parameters:    Size  Location     Type
 39492 ;;  ticksRemaini    4   10[BANK0 ] unsigned long 
 39493 ;; Auto vars:     Size  Location     Type
 39494 ;;  oldReloadVal    2   18[BANK0 ] unsigned int 
 39495 ;;  tmrVal          2   16[BANK0 ] unsigned int 
 39496 ;; Return value:  Size  Location     Type
 39497 ;;                  1    wreg      void 
 39498 ;; Registers used:
 39499 ;;		wreg, status,2, status,0, cstack
 39500 ;; Tracked objects:
 39501 ;;		On entry : 0/0
 39502 ;;		On exit  : 0/0
 39503 ;;		Unchanged: 0/0
 39504 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 39505 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 39506 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 39507 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 39508 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 39509 ;;Total ram usage:       10 bytes
 39510 ;; Hardware stack levels used:    1
 39511 ;; Hardware stack levels required when called:    9
 39512 ;; This function calls:
 39513 ;;		_TMR_SwapTimer
 39514 ;; This function is called by:
 39515 ;;		_SwTimerStart
 39516 ;; This function uses a non-reentrant model
 39517 ;;
 39518                           
 39519                           	psect	text189
 39520  007518                     __ptext189:
 39521                           	opt stack 0
 39522  007518                     _TMR_OverrideRemaining:
 39523                           	opt stack 18
 39524                           
 39525                           ;sw_timer.c: 67: uint16_t tmrVal;
 39526                           ;sw_timer.c: 68: uint16_t oldReloadVal;
 39527                           ;sw_timer.c: 71: if (ticksToScheduledInterrupt > 10)
 39528                           
 39529                           ; BSR set to: 0
 39530                           ;incstack = 0
 39531  007518  5057               	movf	_ticksToScheduledInterrupt+3,w,c	;volatile
 39532  00751A  1056               	iorwf	_ticksToScheduledInterrupt+2,w,c	;volatile
 39533  00751C  1055               	iorwf	_ticksToScheduledInterrupt+1,w,c	;volatile
 39534  00751E  E104               	bnz	u8270
 39535  007520  0E0B               	movlw	11
 39536  007522  5C54               	subwf	_ticksToScheduledInterrupt,w,c	;volatile
 39537  007524  A0D8               	btfss	status,0,c
 39538  007526  0012               	return	
 39539  007528                     u8270:
 39540                           
 39541                           ;sw_timer.c: 72: {
 39542                           ;sw_timer.c: 73: if (ticksRemaining < ticksToScheduledInterrupt)
 39543  007528  5054               	movf	_ticksToScheduledInterrupt,w,c	;volatile
 39544  00752A  0100               	movlb	0	; () banked
 39545  00752C  5D6A               	subwf	TMR_OverrideRemaining@ticksRemaining& (0+255),w,b
 39546  00752E  5055               	movf	_ticksToScheduledInterrupt+1,w,c	;volatile
 39547  007530  596B               	subwfb	(TMR_OverrideRemaining@ticksRemaining+1)& (0+255),w,b
 39548  007532  5056               	movf	_ticksToScheduledInterrupt+2,w,c	;volatile
 39549  007534  596C               	subwfb	(TMR_OverrideRemaining@ticksRemaining+2)& (0+255),w,b
 39550  007536  5057               	movf	_ticksToScheduledInterrupt+3,w,c	;volatile
 39551  007538  596D               	subwfb	(TMR_OverrideRemaining@ticksRemaining+3)& (0+255),w,b
 39552  00753A  B0D8               	btfsc	status,0,c
 39553  00753C  0012               	return	
 39554                           
 39555                           ; BSR set to: 0
 39556                           ;sw_timer.c: 74: {
 39557                           ;sw_timer.c: 75: ticksToScheduledInterrupt = ticksRemaining;
 39558  00753E  C06A  F054         	movff	TMR_OverrideRemaining@ticksRemaining,_ticksToScheduledInterrupt	;volatile
 39559  007542  C06B  F055         	movff	TMR_OverrideRemaining@ticksRemaining+1,_ticksToScheduledInterrupt+1	;volatile
 39560  007546  C06C  F056         	movff	TMR_OverrideRemaining@ticksRemaining+2,_ticksToScheduledInterrupt+2	;volatile
 39561  00754A  C06D  F057         	movff	TMR_OverrideRemaining@ticksRemaining+3,_ticksToScheduledInterrupt+3	;volatile
 39562                           
 39563                           ;sw_timer.c: 76: oldReloadVal = reloadVal;
 39564  00754E  C04C  F072         	movff	_reloadVal,TMR_OverrideRemaining@oldReloadVal	;volatile
 39565  007552  C04D  F073         	movff	_reloadVal+1,TMR_OverrideRemaining@oldReloadVal+1	;volatile
 39566                           
 39567                           ;sw_timer.c: 78: reloadVal = ((uint32_t)0x10000) - ticksRemaining;
 39568  007556  C06A  F06E         	movff	TMR_OverrideRemaining@ticksRemaining,??_TMR_OverrideRemaining
 39569  00755A  C06B  F06F         	movff	TMR_OverrideRemaining@ticksRemaining+1,??_TMR_OverrideRemaining+1
 39570  00755E  1F6E               	comf	??_TMR_OverrideRemaining& (0+255),f,b
 39571  007560  1F6F               	comf	(??_TMR_OverrideRemaining+1)& (0+255),f,b
 39572  007562  4B6E               	infsnz	??_TMR_OverrideRemaining& (0+255),f,b
 39573  007564  2B6F               	incf	(??_TMR_OverrideRemaining+1)& (0+255),f,b
 39574  007566  C06E  F04C         	movff	??_TMR_OverrideRemaining,_reloadVal	;volatile
 39575  00756A  C06F  F04D         	movff	??_TMR_OverrideRemaining+1,_reloadVal+1	;volatile
 39576                           
 39577                           ; BSR set to: 0
 39578                           ;sw_timer.c: 79: tmrVal = TMR_SwapTimer(reloadVal);
 39579  00756E  C04C  F068         	movff	_reloadVal,TMR_SwapTimer@timerVal	;volatile
 39580  007572  C04D  F069         	movff	_reloadVal+1,TMR_SwapTimer@timerVal+1	;volatile
 39581  007576  ECEC  F043         	call	_TMR_SwapTimer	;wreg free
 39582  00757A  C068  F070         	movff	?_TMR_SwapTimer,TMR_OverrideRemaining@tmrVal
 39583  00757E  C069  F071         	movff	?_TMR_SwapTimer+1,TMR_OverrideRemaining@tmrVal+1
 39584                           
 39585                           ;sw_timer.c: 80: ticksAdded += tmrVal - oldReloadVal;
 39586  007582  C072  F06E         	movff	TMR_OverrideRemaining@oldReloadVal,??_TMR_OverrideRemaining
 39587  007586  C073  F06F         	movff	TMR_OverrideRemaining@oldReloadVal+1,??_TMR_OverrideRemaining+1
 39588  00758A  0100               	movlb	0	; () banked
 39589  00758C  1F6E               	comf	??_TMR_OverrideRemaining& (0+255),f,b
 39590  00758E  1F6F               	comf	(??_TMR_OverrideRemaining+1)& (0+255),f,b
 39591  007590  4B6E               	infsnz	??_TMR_OverrideRemaining& (0+255),f,b
 39592  007592  2B6F               	incf	(??_TMR_OverrideRemaining+1)& (0+255),f,b
 39593  007594  5170               	movf	TMR_OverrideRemaining@tmrVal& (0+255),w,b
 39594  007596  276E               	addwf	??_TMR_OverrideRemaining& (0+255),f,b
 39595  007598  5171               	movf	(TMR_OverrideRemaining@tmrVal+1)& (0+255),w,b
 39596  00759A  236F               	addwfc	(??_TMR_OverrideRemaining+1)& (0+255),f,b
 39597  00759C  516E               	movf	??_TMR_OverrideRemaining& (0+255),w,b
 39598  00759E  0101               	movlb	1	; () banked
 39599  0075A0  2708               	addwf	_ticksAdded& (0+255),f,b	;volatile
 39600  0075A2  0100               	movlb	0	; () banked
 39601  0075A4  516F               	movf	(??_TMR_OverrideRemaining+1)& (0+255),w,b
 39602  0075A6  0101               	movlb	1	; () banked
 39603  0075A8  2309               	addwfc	(_ticksAdded+1)& (0+255),f,b	;volatile
 39604  0075AA  0E00               	movlw	0
 39605  0075AC  230A               	addwfc	(_ticksAdded+2)& (0+255),f,b	;volatile
 39606  0075AE  0E00               	movlw	0
 39607  0075B0  230B               	addwfc	(_ticksAdded+3)& (0+255),f,b	;volatile
 39608                           
 39609                           ; BSR set to: 1
 39610  0075B2  0012               	return	
 39611  0075B4                     __end_of_TMR_OverrideRemaining:
 39612                           	opt stack 0
 39613                           tosu	equ	0xFFF
 39614                           tosh	equ	0xFFE
 39615                           tosl	equ	0xFFD
 39616                           pclath	equ	0xFFA
 39617                           tblptru	equ	0xFF8
 39618                           tblptrh	equ	0xFF7
 39619                           tblptrl	equ	0xFF6
 39620                           tablat	equ	0xFF5
 39621                           prodh	equ	0xFF4
 39622                           prodl	equ	0xFF3
 39623                           intcon	equ	0xFF2
 39624                           intcon2	equ	0xFF1
 39625                           intcon3	equ	0xFF0
 39626                           indf0	equ	0xFEF
 39627                           postinc0	equ	0xFEE
 39628                           plusw0	equ	0xFEB
 39629                           fsr0h	equ	0xFEA
 39630                           fsr0l	equ	0xFE9
 39631                           wreg	equ	0xFE8
 39632                           postinc1	equ	0xFE6
 39633                           postdec1	equ	0xFE5
 39634                           plusw1	equ	0xFE3
 39635                           fsr1h	equ	0xFE2
 39636                           fsr1l	equ	0xFE1
 39637                           indf2	equ	0xFDF
 39638                           postinc2	equ	0xFDE
 39639                           postdec2	equ	0xFDD
 39640                           plusw2	equ	0xFDB
 39641                           fsr2h	equ	0xFDA
 39642                           fsr2l	equ	0xFD9
 39643                           status	equ	0xFD8
 39644                           
 39645 ;; *************** function _TMR_SwapTimer *****************
 39646 ;; Defined at:
 39647 ;;		line 112 in file "mcc_generated_files/LoRaWAN/sw_timer.c"
 39648 ;; Parameters:    Size  Location     Type
 39649 ;;  timerVal        2    8[BANK0 ] unsigned int 
 39650 ;; Auto vars:     Size  Location     Type
 39651 ;;		None
 39652 ;; Return value:  Size  Location     Type
 39653 ;;                  2    8[BANK0 ] unsigned int 
 39654 ;; Registers used:
 39655 ;;		wreg, status,2, status,0, cstack
 39656 ;; Tracked objects:
 39657 ;;		On entry : 0/0
 39658 ;;		On exit  : 0/0
 39659 ;;		Unchanged: 0/0
 39660 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 39661 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 39662 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 39663 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 39664 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 39665 ;;Total ram usage:        2 bytes
 39666 ;; Hardware stack levels used:    1
 39667 ;; Hardware stack levels required when called:    8
 39668 ;; This function calls:
 39669 ;;		_TMR1_ReadTimer
 39670 ;;		_TMR1_WriteTimer
 39671 ;; This function is called by:
 39672 ;;		_TMR_OverrideRemaining
 39673 ;; This function uses a non-reentrant model
 39674 ;;
 39675                           
 39676                           	psect	text190
 39677  0087D8                     __ptext190:
 39678                           	opt stack 0
 39679  0087D8                     _TMR_SwapTimer:
 39680                           	opt stack 18
 39681                           
 39682                           ;sw_timer.c: 114: static uint16_t oldVal;
 39683                           ;sw_timer.c: 115: static uint16_t retVal;
 39684                           ;sw_timer.c: 117: oldVal = TMR1_ReadTimer();
 39685                           
 39686                           ;incstack = 0
 39687  0087D8  ECAD  F048         	call	_TMR1_ReadTimer	;wreg free
 39688  0087DC  C060  F148         	movff	?_TMR1_ReadTimer,TMR_SwapTimer@oldVal
 39689  0087E0  C061  F149         	movff	?_TMR1_ReadTimer+1,TMR_SwapTimer@oldVal+1
 39690  0087E4                     
 39691                           ;sw_timer.c: 123: ;
 39692  0087E4  ECAD  F048         	call	_TMR1_ReadTimer	;wreg free
 39693  0087E8  0101               	movlb	1	; () banked
 39694  0087EA  5148               	movf	TMR_SwapTimer@oldVal& (0+255),w,b
 39695  0087EC  0100               	movlb	0	; () banked
 39696  0087EE  1960               	xorwf	?_TMR1_ReadTimer& (0+255),w,b
 39697  0087F0  E106               	bnz	l8893
 39698  0087F2  0101               	movlb	1	; () banked
 39699  0087F4  5149               	movf	(TMR_SwapTimer@oldVal+1)& (0+255),w,b
 39700  0087F6  0100               	movlb	0	; () banked
 39701  0087F8  1961               	xorwf	(?_TMR1_ReadTimer+1)& (0+255),w,b
 39702  0087FA  B4D8               	btfsc	status,2,c
 39703  0087FC  D7F3               	goto	l1535
 39704  0087FE                     l8893:
 39705                           
 39706                           ; BSR set to: 0
 39707                           ;sw_timer.c: 125: TMR1_WriteTimer(timerVal);
 39708  0087FE  C068  F060         	movff	TMR_SwapTimer@timerVal,TMR1_WriteTimer@timerVal
 39709  008802  C069  F061         	movff	TMR_SwapTimer@timerVal+1,TMR1_WriteTimer@timerVal+1
 39710  008806  ECEE  F048         	call	_TMR1_WriteTimer	;wreg free
 39711                           
 39712                           ;sw_timer.c: 128: oldVal++;
 39713  00880A  0101               	movlb	1	; () banked
 39714  00880C  4B48               	infsnz	TMR_SwapTimer@oldVal& (0+255),f,b
 39715  00880E  2B49               	incf	(TMR_SwapTimer@oldVal+1)& (0+255),f,b
 39716                           
 39717                           ; BSR set to: 1
 39718                           ;sw_timer.c: 130: retVal = oldVal;
 39719  008810  C148  F146         	movff	TMR_SwapTimer@oldVal,TMR_SwapTimer@retVal
 39720  008814  C149  F147         	movff	TMR_SwapTimer@oldVal+1,TMR_SwapTimer@retVal+1
 39721                           
 39722                           ; BSR set to: 1
 39723                           ;sw_timer.c: 132: return retVal;
 39724  008818  C146  F068         	movff	TMR_SwapTimer@retVal,?_TMR_SwapTimer
 39725  00881C  C147  F069         	movff	TMR_SwapTimer@retVal+1,?_TMR_SwapTimer+1
 39726  008820  0012               	return	
 39727  008822                     __end_of_TMR_SwapTimer:
 39728                           	opt stack 0
 39729                           tosu	equ	0xFFF
 39730                           tosh	equ	0xFFE
 39731                           tosl	equ	0xFFD
 39732                           pclath	equ	0xFFA
 39733                           tblptru	equ	0xFF8
 39734                           tblptrh	equ	0xFF7
 39735                           tblptrl	equ	0xFF6
 39736                           tablat	equ	0xFF5
 39737                           prodh	equ	0xFF4
 39738                           prodl	equ	0xFF3
 39739                           intcon	equ	0xFF2
 39740                           intcon2	equ	0xFF1
 39741                           intcon3	equ	0xFF0
 39742                           indf0	equ	0xFEF
 39743                           postinc0	equ	0xFEE
 39744                           plusw0	equ	0xFEB
 39745                           fsr0h	equ	0xFEA
 39746                           fsr0l	equ	0xFE9
 39747                           wreg	equ	0xFE8
 39748                           postinc1	equ	0xFE6
 39749                           postdec1	equ	0xFE5
 39750                           plusw1	equ	0xFE3
 39751                           fsr1h	equ	0xFE2
 39752                           fsr1l	equ	0xFE1
 39753                           indf2	equ	0xFDF
 39754                           postinc2	equ	0xFDE
 39755                           postdec2	equ	0xFDD
 39756                           plusw2	equ	0xFDB
 39757                           fsr2h	equ	0xFDA
 39758                           fsr2l	equ	0xFD9
 39759                           status	equ	0xFD8
 39760                           
 39761 ;; *************** function _TMR1_WriteTimer *****************
 39762 ;; Defined at:
 39763 ;;		line 121 in file "mcc_generated_files/tmr1.c"
 39764 ;; Parameters:    Size  Location     Type
 39765 ;;  timerVal        2    0[BANK0 ] unsigned int 
 39766 ;; Auto vars:     Size  Location     Type
 39767 ;;		None
 39768 ;; Return value:  Size  Location     Type
 39769 ;;                  1    wreg      void 
 39770 ;; Registers used:
 39771 ;;		wreg, status,2
 39772 ;; Tracked objects:
 39773 ;;		On entry : 0/0
 39774 ;;		On exit  : 0/0
 39775 ;;		Unchanged: 0/0
 39776 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 39777 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 39778 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 39779 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 39780 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 39781 ;;Total ram usage:        2 bytes
 39782 ;; Hardware stack levels used:    1
 39783 ;; Hardware stack levels required when called:    7
 39784 ;; This function calls:
 39785 ;;		Nothing
 39786 ;; This function is called by:
 39787 ;;		_TMR_SwapTimer
 39788 ;;		_TMR1_Reload
 39789 ;; This function uses a non-reentrant model
 39790 ;;
 39791                           
 39792                           	psect	text191
 39793  0091DC                     __ptext191:
 39794                           	opt stack 0
 39795  0091DC                     _TMR1_WriteTimer:
 39796                           	opt stack 18
 39797                           
 39798                           ;tmr1.c: 123: if (T1CONbits.T1SYNC == 1)
 39799                           
 39800                           ; BSR set to: 1
 39801                           ;incstack = 0
 39802  0091DC  A4CD               	btfss	4045,2,c	;volatile
 39803  0091DE  D008               	goto	l2627
 39804                           
 39805                           ;tmr1.c: 124: {
 39806                           ;tmr1.c: 126: T1CONbits.TMR1ON = 0;
 39807  0091E0  90CD               	bcf	4045,0,c	;volatile
 39808                           
 39809                           ;tmr1.c: 129: TMR1H = (timerVal >> 8);
 39810  0091E2  0100               	movlb	0	; () banked
 39811  0091E4  5161               	movf	(TMR1_WriteTimer@timerVal+1)& (0+255),w,b
 39812  0091E6  6ECF               	movwf	4047,c	;volatile
 39813                           
 39814                           ; BSR set to: 0
 39815                           ;tmr1.c: 130: TMR1L = (uint8_t) timerVal;
 39816  0091E8  C060  FFCE         	movff	TMR1_WriteTimer@timerVal,4046	;volatile
 39817                           
 39818                           ; BSR set to: 0
 39819                           ;tmr1.c: 133: T1CONbits.TMR1ON =1;
 39820  0091EC  80CD               	bsf	4045,0,c	;volatile
 39821                           
 39822                           ;tmr1.c: 134: }
 39823  0091EE  0012               	return	
 39824  0091F0                     l2627:
 39825                           
 39826                           ;tmr1.c: 135: else
 39827                           ;tmr1.c: 136: {
 39828                           ;tmr1.c: 138: TMR1H = (timerVal >> 8);
 39829                           
 39830                           ; BSR set to: 0
 39831  0091F0  0100               	movlb	0	; () banked
 39832  0091F2  5161               	movf	(TMR1_WriteTimer@timerVal+1)& (0+255),w,b
 39833  0091F4  6ECF               	movwf	4047,c	;volatile
 39834                           
 39835                           ; BSR set to: 0
 39836                           ;tmr1.c: 139: TMR1L = (uint8_t) timerVal;
 39837  0091F6  C060  FFCE         	movff	TMR1_WriteTimer@timerVal,4046	;volatile
 39838  0091FA  0012               	return	
 39839  0091FC                     __end_of_TMR1_WriteTimer:
 39840                           	opt stack 0
 39841                           tosu	equ	0xFFF
 39842                           tosh	equ	0xFFE
 39843                           tosl	equ	0xFFD
 39844                           pclath	equ	0xFFA
 39845                           tblptru	equ	0xFF8
 39846                           tblptrh	equ	0xFF7
 39847                           tblptrl	equ	0xFF6
 39848                           tablat	equ	0xFF5
 39849                           prodh	equ	0xFF4
 39850                           prodl	equ	0xFF3
 39851                           intcon	equ	0xFF2
 39852                           intcon2	equ	0xFF1
 39853                           intcon3	equ	0xFF0
 39854                           indf0	equ	0xFEF
 39855                           postinc0	equ	0xFEE
 39856                           plusw0	equ	0xFEB
 39857                           fsr0h	equ	0xFEA
 39858                           fsr0l	equ	0xFE9
 39859                           wreg	equ	0xFE8
 39860                           postinc1	equ	0xFE6
 39861                           postdec1	equ	0xFE5
 39862                           plusw1	equ	0xFE3
 39863                           fsr1h	equ	0xFE2
 39864                           fsr1l	equ	0xFE1
 39865                           indf2	equ	0xFDF
 39866                           postinc2	equ	0xFDE
 39867                           postdec2	equ	0xFDD
 39868                           plusw2	equ	0xFDB
 39869                           fsr2h	equ	0xFDA
 39870                           fsr2l	equ	0xFD9
 39871                           status	equ	0xFD8
 39872                           
 39873 ;; *************** function _SwTimersInterrupt *****************
 39874 ;; Defined at:
 39875 ;;		line 287 in file "mcc_generated_files/LoRaWAN/sw_timer.c"
 39876 ;; Parameters:    Size  Location     Type
 39877 ;;		None
 39878 ;; Auto vars:     Size  Location     Type
 39879 ;;  ticksToNextT    4   44[BANK0 ] unsigned long 
 39880 ;;  timeElapsed     4   40[BANK0 ] unsigned long 
 39881 ;;  i               1   48[BANK0 ] unsigned char 
 39882 ;; Return value:  Size  Location     Type
 39883 ;;                  4   32[BANK0 ] unsigned long 
 39884 ;; Registers used:
 39885 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 39886 ;; Tracked objects:
 39887 ;;		On entry : 0/0
 39888 ;;		On exit  : 0/0
 39889 ;;		Unchanged: 0/0
 39890 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 39891 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 39892 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 39893 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 39894 ;;      Totals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 39895 ;;Total ram usage:       17 bytes
 39896 ;; Hardware stack levels used:    1
 39897 ;; Hardware stack levels required when called:    9
 39898 ;; This function calls:
 39899 ;;		_TMR_GetDeltaTime
 39900 ;; This function is called by:
 39901 ;;		_SwTimerReadValue
 39902 ;;		_SwTimerStart
 39903 ;;		_SwTimersCanSleep
 39904 ;; This function uses a non-reentrant model
 39905 ;;
 39906                           
 39907                           	psect	text192
 39908  0061E2                     __ptext192:
 39909                           	opt stack 0
 39910  0061E2                     _SwTimersInterrupt:
 39911                           	opt stack 18
 39912                           
 39913                           ;sw_timer.c: 289: uint8_t i;
 39914                           ;sw_timer.c: 290: uint32_t timeElapsed;
 39915                           ;sw_timer.c: 291: uint32_t ticksToNextTimerEvent = 0xFFFFFFFF;
 39916                           
 39917                           ; BSR set to: 0
 39918                           ;incstack = 0
 39919  0061E2  0100               	movlb	0	; () banked
 39920  0061E4  698C               	setf	SwTimersInterrupt@ticksToNextTimerEvent& (0+255),b
 39921  0061E6  698D               	setf	(SwTimersInterrupt@ticksToNextTimerEvent+1)& (0+255),b
 39922  0061E8  698E               	setf	(SwTimersInterrupt@ticksToNextTimerEvent+2)& (0+255),b
 39923  0061EA  698F               	setf	(SwTimersInterrupt@ticksToNextTimerEvent+3)& (0+255),b
 39924                           
 39925                           ; BSR set to: 0
 39926                           ;sw_timer.c: 295: timeElapsed = TMR_GetDeltaTime();
 39927  0061EC  EC12  F026         	call	_TMR_GetDeltaTime	;wreg free
 39928  0061F0  C068  F088         	movff	?_TMR_GetDeltaTime,SwTimersInterrupt@timeElapsed
 39929  0061F4  C069  F089         	movff	?_TMR_GetDeltaTime+1,SwTimersInterrupt@timeElapsed+1
 39930  0061F8  C06A  F08A         	movff	?_TMR_GetDeltaTime+2,SwTimersInterrupt@timeElapsed+2
 39931  0061FC  C06B  F08B         	movff	?_TMR_GetDeltaTime+3,SwTimersInterrupt@timeElapsed+3
 39932                           
 39933                           ;sw_timer.c: 297: for (i = 0; i < allocatedTimers; i++)
 39934  006200  0E00               	movlw	0
 39935  006202  0100               	movlb	0	; () banked
 39936  006204  6F90               	movwf	SwTimersInterrupt@i& (0+255),b
 39937  006206  D061               	goto	l1592
 39938  006208                     
 39939                           ; BSR set to: 0
 39940                           ;sw_timer.c: 298: {
 39941                           ;sw_timer.c: 301: if (swTimers[i].running == 1)
 39942                           
 39943                           ; BSR set to: 0
 39944  006208  5190               	movf	SwTimersInterrupt@i& (0+255),w,b
 39945  00620A  0D08               	mullw	8
 39946  00620C  0E04               	movlw	4
 39947  00620E  26F3               	addwf	prodl,f,c
 39948  006210  0E00               	movlw	0
 39949  006212  22F4               	addwfc	prodh,f,c
 39950  006214  0E00               	movlw	low _swTimers
 39951  006216  24F3               	addwf	prodl,w,c
 39952  006218  6ED9               	movwf	fsr2l,c
 39953  00621A  0E03               	movlw	high _swTimers
 39954  00621C  20F4               	addwfc	prodh,w,c
 39955  00621E  6EDA               	movwf	fsr2h,c
 39956  006220  04DE               	decf	postinc2,w,c
 39957  006222  A4D8               	btfss	status,2,c
 39958  006224  D051               	goto	l1597
 39959                           
 39960                           ; BSR set to: 0
 39961                           ;sw_timer.c: 302: {
 39962                           ;sw_timer.c: 303: if (swTimers[i].ticksRemaining <= timeElapsed)
 39963  006226  5190               	movf	SwTimersInterrupt@i& (0+255),w,b
 39964  006228  0D08               	mullw	8
 39965  00622A  0E00               	movlw	low _swTimers
 39966  00622C  24F3               	addwf	prodl,w,c
 39967  00622E  6ED9               	movwf	fsr2l,c
 39968  006230  0E03               	movlw	high _swTimers
 39969  006232  20F4               	addwfc	prodh,w,c
 39970  006234  6EDA               	movwf	fsr2h,c
 39971  006236  50DE               	movf	postinc2,w,c
 39972  006238  5D88               	subwf	SwTimersInterrupt@timeElapsed& (0+255),w,b
 39973  00623A  50DE               	movf	postinc2,w,c
 39974  00623C  5989               	subwfb	(SwTimersInterrupt@timeElapsed+1)& (0+255),w,b
 39975  00623E  50DE               	movf	postinc2,w,c
 39976  006240  598A               	subwfb	(SwTimersInterrupt@timeElapsed+2)& (0+255),w,b
 39977  006242  50DE               	movf	postinc2,w,c
 39978  006244  598B               	subwfb	(SwTimersInterrupt@timeElapsed+3)& (0+255),w,b
 39979  006246  A0D8               	btfss	status,0,c
 39980  006248  D00D               	goto	l1595
 39981                           
 39982                           ; BSR set to: 0
 39983                           ;sw_timer.c: 304: {
 39984                           ;sw_timer.c: 305: swTimers[i].ticksRemaining = 0;
 39985  00624A  5190               	movf	SwTimersInterrupt@i& (0+255),w,b
 39986  00624C  0D08               	mullw	8
 39987  00624E  0E00               	movlw	low _swTimers
 39988  006250  24F3               	addwf	prodl,w,c
 39989  006252  6ED9               	movwf	fsr2l,c
 39990  006254  0E03               	movlw	high _swTimers
 39991  006256  20F4               	addwfc	prodh,w,c
 39992  006258  6EDA               	movwf	fsr2h,c
 39993  00625A  6ADE               	clrf	postinc2,c
 39994  00625C  6ADE               	clrf	postinc2,c
 39995  00625E  6ADE               	clrf	postinc2,c
 39996  006260  6ADD               	clrf	postdec2,c
 39997                           
 39998                           ;sw_timer.c: 306: }
 39999  006262  D032               	goto	l1597
 40000  006264                     l1595:
 40001                           
 40002                           ; BSR set to: 0
 40003                           ;sw_timer.c: 307: else
 40004                           ;sw_timer.c: 308: {
 40005                           ;sw_timer.c: 309: swTimers[i].ticksRemaining -= timeElapsed;
 40006                           
 40007                           ; BSR set to: 0
 40008  006264  5190               	movf	SwTimersInterrupt@i& (0+255),w,b
 40009  006266  0D08               	mullw	8
 40010  006268  0E00               	movlw	low _swTimers
 40011  00626A  24F3               	addwf	prodl,w,c
 40012  00626C  6ED9               	movwf	fsr2l,c
 40013  00626E  0E03               	movlw	high _swTimers
 40014  006270  20F4               	addwfc	prodh,w,c
 40015  006272  6EDA               	movwf	fsr2h,c
 40016  006274  5188               	movf	SwTimersInterrupt@timeElapsed& (0+255),w,b
 40017  006276  5EDE               	subwf	postinc2,f,c
 40018  006278  5189               	movf	(SwTimersInterrupt@timeElapsed+1)& (0+255),w,b
 40019  00627A  5ADE               	subwfb	postinc2,f,c
 40020  00627C  518A               	movf	(SwTimersInterrupt@timeElapsed+2)& (0+255),w,b
 40021  00627E  5ADE               	subwfb	postinc2,f,c
 40022  006280  518B               	movf	(SwTimersInterrupt@timeElapsed+3)& (0+255),w,b
 40023  006282  5ADE               	subwfb	postinc2,f,c
 40024                           
 40025                           ;sw_timer.c: 312: if (swTimers[i].ticksRemaining < ticksToNextTimerEvent)
 40026  006284  5190               	movf	SwTimersInterrupt@i& (0+255),w,b
 40027  006286  0D08               	mullw	8
 40028  006288  0E00               	movlw	low _swTimers
 40029  00628A  24F3               	addwf	prodl,w,c
 40030  00628C  6ED9               	movwf	fsr2l,c
 40031  00628E  0E03               	movlw	high _swTimers
 40032  006290  20F4               	addwfc	prodh,w,c
 40033  006292  6EDA               	movwf	fsr2h,c
 40034  006294  518C               	movf	SwTimersInterrupt@ticksToNextTimerEvent& (0+255),w,b
 40035  006296  5CDE               	subwf	postinc2,w,c
 40036  006298  518D               	movf	(SwTimersInterrupt@ticksToNextTimerEvent+1)& (0+255),w,b
 40037  00629A  58DE               	subwfb	postinc2,w,c
 40038  00629C  518E               	movf	(SwTimersInterrupt@ticksToNextTimerEvent+2)& (0+255),w,b
 40039  00629E  58DE               	subwfb	postinc2,w,c
 40040  0062A0  518F               	movf	(SwTimersInterrupt@ticksToNextTimerEvent+3)& (0+255),w,b
 40041  0062A2  58DE               	subwfb	postinc2,w,c
 40042  0062A4  B0D8               	btfsc	status,0,c
 40043  0062A6  D010               	goto	l1597
 40044                           
 40045                           ; BSR set to: 0
 40046                           ;sw_timer.c: 313: {
 40047                           ;sw_timer.c: 314: ticksToNextTimerEvent = swTimers[i].ticksRemaining;
 40048  0062A8  5190               	movf	SwTimersInterrupt@i& (0+255),w,b
 40049  0062AA  0D08               	mullw	8
 40050  0062AC  0E00               	movlw	low _swTimers
 40051  0062AE  24F3               	addwf	prodl,w,c
 40052  0062B0  6ED9               	movwf	fsr2l,c
 40053  0062B2  0E03               	movlw	high _swTimers
 40054  0062B4  20F4               	addwfc	prodh,w,c
 40055  0062B6  6EDA               	movwf	fsr2h,c
 40056  0062B8  CFDE F08C          	movff	postinc2,SwTimersInterrupt@ticksToNextTimerEvent
 40057  0062BC  CFDE F08D          	movff	postinc2,SwTimersInterrupt@ticksToNextTimerEvent+1
 40058  0062C0  CFDE F08E          	movff	postinc2,SwTimersInterrupt@ticksToNextTimerEvent+2
 40059  0062C4  CFDE F08F          	movff	postinc2,SwTimersInterrupt@ticksToNextTimerEvent+3
 40060  0062C8                     l1597:
 40061                           
 40062                           ; BSR set to: 0
 40063                           
 40064                           ; BSR set to: 0
 40065                           
 40066                           ; BSR set to: 0
 40067                           
 40068                           ; BSR set to: 0
 40069  0062C8  2B90               	incf	SwTimersInterrupt@i& (0+255),f,b
 40070  0062CA                     l1592:
 40071                           
 40072                           ; BSR set to: 0
 40073                           
 40074                           ; BSR set to: 0
 40075  0062CA  0101               	movlb	1	; () banked
 40076  0062CC  5154               	movf	_allocatedTimers& (0+255),w,b	;volatile
 40077  0062CE  0100               	movlb	0	; () banked
 40078  0062D0  5D90               	subwf	SwTimersInterrupt@i& (0+255),w,b
 40079  0062D2  A0D8               	btfss	status,0,c
 40080  0062D4  D799               	goto	l1593
 40081                           
 40082                           ; BSR set to: 0
 40083                           ;sw_timer.c: 315: }
 40084                           ;sw_timer.c: 316: }
 40085                           ;sw_timer.c: 317: }
 40086                           ;sw_timer.c: 318: }
 40087                           ;sw_timer.c: 320: return ticksToNextTimerEvent;
 40088  0062D6  C08C  F080         	movff	SwTimersInterrupt@ticksToNextTimerEvent,?_SwTimersInterrupt
 40089  0062DA  C08D  F081         	movff	SwTimersInterrupt@ticksToNextTimerEvent+1,?_SwTimersInterrupt+1
 40090  0062DE  C08E  F082         	movff	SwTimersInterrupt@ticksToNextTimerEvent+2,?_SwTimersInterrupt+2
 40091  0062E2  C08F  F083         	movff	SwTimersInterrupt@ticksToNextTimerEvent+3,?_SwTimersInterrupt+3
 40092                           
 40093                           ; BSR set to: 0
 40094  0062E6  0012               	return		;funcret
 40095  0062E8                     __end_of_SwTimersInterrupt:
 40096                           	opt stack 0
 40097                           tosu	equ	0xFFF
 40098                           tosh	equ	0xFFE
 40099                           tosl	equ	0xFFD
 40100                           pclath	equ	0xFFA
 40101                           tblptru	equ	0xFF8
 40102                           tblptrh	equ	0xFF7
 40103                           tblptrl	equ	0xFF6
 40104                           tablat	equ	0xFF5
 40105                           prodh	equ	0xFF4
 40106                           prodl	equ	0xFF3
 40107                           intcon	equ	0xFF2
 40108                           intcon2	equ	0xFF1
 40109                           intcon3	equ	0xFF0
 40110                           indf0	equ	0xFEF
 40111                           postinc0	equ	0xFEE
 40112                           plusw0	equ	0xFEB
 40113                           fsr0h	equ	0xFEA
 40114                           fsr0l	equ	0xFE9
 40115                           wreg	equ	0xFE8
 40116                           postinc1	equ	0xFE6
 40117                           postdec1	equ	0xFE5
 40118                           plusw1	equ	0xFE3
 40119                           fsr1h	equ	0xFE2
 40120                           fsr1l	equ	0xFE1
 40121                           indf2	equ	0xFDF
 40122                           postinc2	equ	0xFDE
 40123                           postdec2	equ	0xFDD
 40124                           plusw2	equ	0xFDB
 40125                           fsr2h	equ	0xFDA
 40126                           fsr2l	equ	0xFD9
 40127                           status	equ	0xFD8
 40128                           
 40129 ;; *************** function _TMR_GetDeltaTime *****************
 40130 ;; Defined at:
 40131 ;;		line 88 in file "mcc_generated_files/LoRaWAN/sw_timer.c"
 40132 ;; Parameters:    Size  Location     Type
 40133 ;;		None
 40134 ;; Auto vars:     Size  Location     Type
 40135 ;;		None
 40136 ;; Return value:  Size  Location     Type
 40137 ;;                  4    8[BANK0 ] unsigned long 
 40138 ;; Registers used:
 40139 ;;		wreg, status,2, status,0, cstack
 40140 ;; Tracked objects:
 40141 ;;		On entry : 0/0
 40142 ;;		On exit  : 0/0
 40143 ;;		Unchanged: 0/0
 40144 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 40145 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 40146 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 40147 ;;      Temps:          0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 40148 ;;      Totals:         0      24       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 40149 ;;Total ram usage:       24 bytes
 40150 ;; Hardware stack levels used:    1
 40151 ;; Hardware stack levels required when called:    8
 40152 ;; This function calls:
 40153 ;;		_TMR1_ReadTimer
 40154 ;; This function is called by:
 40155 ;;		_SwTimersInterrupt
 40156 ;; This function uses a non-reentrant model
 40157 ;;
 40158                           
 40159                           	psect	text193
 40160  004C24                     __ptext193:
 40161                           	opt stack 0
 40162  004C24                     _TMR_GetDeltaTime:
 40163                           	opt stack 18
 40164                           
 40165                           ;sw_timer.c: 90: static uint32_t retVal;
 40166                           ;sw_timer.c: 91: static uint16_t tmrVal;
 40167                           ;sw_timer.c: 93: tmrVal = TMR1_ReadTimer();
 40168                           
 40169                           ; BSR set to: 0
 40170                           ;incstack = 0
 40171  004C24  ECAD  F048         	call	_TMR1_ReadTimer	;wreg free
 40172  004C28  C060  F14A         	movff	?_TMR1_ReadTimer,TMR_GetDeltaTime@tmrVal
 40173  004C2C  C061  F14B         	movff	?_TMR1_ReadTimer+1,TMR_GetDeltaTime@tmrVal+1
 40174                           
 40175                           ;sw_timer.c: 95: if (timerOverflow == 1)
 40176  004C30  0453               	decf	_timerOverflow,w,c	;volatile
 40177  004C32  A4D8               	btfss	status,2,c
 40178  004C34  D079               	goto	l1525
 40179                           
 40180                           ;sw_timer.c: 96: {
 40181                           ;sw_timer.c: 97: timerOverflow = 0;
 40182  004C36  0E00               	movlw	0
 40183  004C38  6E53               	movwf	_timerOverflow,c	;volatile
 40184                           
 40185                           ;sw_timer.c: 98: retVal = ((uint32_t)0x10000) - reloadVal + tmrVal - ticksAccounted + ti
      +                          cksAdded;
 40186  004C3A  C104  F06C         	movff	_ticksAccounted,??_TMR_GetDeltaTime	;volatile
 40187  004C3E  C105  F06D         	movff	_ticksAccounted+1,??_TMR_GetDeltaTime+1	;volatile
 40188  004C42  C106  F06E         	movff	_ticksAccounted+2,??_TMR_GetDeltaTime+2	;volatile
 40189  004C46  C107  F06F         	movff	_ticksAccounted+3,??_TMR_GetDeltaTime+3	;volatile
 40190  004C4A  0100               	movlb	0	; () banked
 40191  004C4C  1F6C               	comf	??_TMR_GetDeltaTime& (0+255),f,b
 40192  004C4E  1F6D               	comf	(??_TMR_GetDeltaTime+1)& (0+255),f,b
 40193  004C50  1F6E               	comf	(??_TMR_GetDeltaTime+2)& (0+255),f,b
 40194  004C52  1F6F               	comf	(??_TMR_GetDeltaTime+3)& (0+255),f,b
 40195  004C54  2B6C               	incf	??_TMR_GetDeltaTime& (0+255),f,b
 40196  004C56  0E00               	movlw	0
 40197  004C58  236D               	addwfc	(??_TMR_GetDeltaTime+1)& (0+255),f,b
 40198  004C5A  236E               	addwfc	(??_TMR_GetDeltaTime+2)& (0+255),f,b
 40199  004C5C  236F               	addwfc	(??_TMR_GetDeltaTime+3)& (0+255),f,b
 40200  004C5E  504C               	movf	_reloadVal,w,c	;volatile
 40201  004C60  6F70               	movwf	(??_TMR_GetDeltaTime+4)& (0+255),b
 40202  004C62  504D               	movf	_reloadVal+1,w,c	;volatile
 40203  004C64  6F71               	movwf	(??_TMR_GetDeltaTime+5)& (0+255),b
 40204  004C66  6B72               	clrf	(??_TMR_GetDeltaTime+6)& (0+255),b
 40205  004C68  6B73               	clrf	(??_TMR_GetDeltaTime+7)& (0+255),b
 40206  004C6A  1F70               	comf	(??_TMR_GetDeltaTime+4)& (0+255),f,b
 40207  004C6C  1F71               	comf	(??_TMR_GetDeltaTime+5)& (0+255),f,b
 40208  004C6E  1F72               	comf	(??_TMR_GetDeltaTime+6)& (0+255),f,b
 40209  004C70  1F73               	comf	(??_TMR_GetDeltaTime+7)& (0+255),f,b
 40210  004C72  2B70               	incf	(??_TMR_GetDeltaTime+4)& (0+255),f,b
 40211  004C74  0E00               	movlw	0
 40212  004C76  2371               	addwfc	(??_TMR_GetDeltaTime+5)& (0+255),f,b
 40213  004C78  2372               	addwfc	(??_TMR_GetDeltaTime+6)& (0+255),f,b
 40214  004C7A  2373               	addwfc	(??_TMR_GetDeltaTime+7)& (0+255),f,b
 40215  004C7C  0101               	movlb	1	; () banked
 40216  004C7E  514A               	movf	TMR_GetDeltaTime@tmrVal& (0+255),w,b
 40217  004C80  0100               	movlb	0	; () banked
 40218  004C82  2570               	addwf	(??_TMR_GetDeltaTime+4)& (0+255),w,b
 40219  004C84  6F74               	movwf	(??_TMR_GetDeltaTime+8)& (0+255),b
 40220  004C86  0101               	movlb	1	; () banked
 40221  004C88  514B               	movf	(TMR_GetDeltaTime@tmrVal+1)& (0+255),w,b
 40222  004C8A  0100               	movlb	0	; () banked
 40223  004C8C  2171               	addwfc	(??_TMR_GetDeltaTime+5)& (0+255),w,b
 40224  004C8E  6F75               	movwf	(??_TMR_GetDeltaTime+9)& (0+255),b
 40225  004C90  0E00               	movlw	0
 40226  004C92  2172               	addwfc	(??_TMR_GetDeltaTime+6)& (0+255),w,b
 40227  004C94  6F76               	movwf	(??_TMR_GetDeltaTime+10)& (0+255),b
 40228  004C96  0E00               	movlw	0
 40229  004C98  2173               	addwfc	(??_TMR_GetDeltaTime+7)& (0+255),w,b
 40230  004C9A  6F77               	movwf	(??_TMR_GetDeltaTime+11)& (0+255),b
 40231  004C9C  516C               	movf	??_TMR_GetDeltaTime& (0+255),w,b
 40232  004C9E  2574               	addwf	(??_TMR_GetDeltaTime+8)& (0+255),w,b
 40233  004CA0  6F78               	movwf	(??_TMR_GetDeltaTime+12)& (0+255),b
 40234  004CA2  516D               	movf	(??_TMR_GetDeltaTime+1)& (0+255),w,b
 40235  004CA4  2175               	addwfc	(??_TMR_GetDeltaTime+9)& (0+255),w,b
 40236  004CA6  6F79               	movwf	(??_TMR_GetDeltaTime+13)& (0+255),b
 40237  004CA8  516E               	movf	(??_TMR_GetDeltaTime+2)& (0+255),w,b
 40238  004CAA  2176               	addwfc	(??_TMR_GetDeltaTime+10)& (0+255),w,b
 40239  004CAC  6F7A               	movwf	(??_TMR_GetDeltaTime+14)& (0+255),b
 40240  004CAE  516F               	movf	(??_TMR_GetDeltaTime+3)& (0+255),w,b
 40241  004CB0  2177               	addwfc	(??_TMR_GetDeltaTime+11)& (0+255),w,b
 40242  004CB2  6F7B               	movwf	(??_TMR_GetDeltaTime+15)& (0+255),b
 40243  004CB4  0101               	movlb	1	; () banked
 40244  004CB6  5108               	movf	_ticksAdded& (0+255),w,b	;volatile
 40245  004CB8  0100               	movlb	0	; () banked
 40246  004CBA  2578               	addwf	(??_TMR_GetDeltaTime+12)& (0+255),w,b
 40247  004CBC  6F7C               	movwf	(??_TMR_GetDeltaTime+16)& (0+255),b
 40248  004CBE  0101               	movlb	1	; () banked
 40249  004CC0  5109               	movf	(_ticksAdded+1)& (0+255),w,b	;volatile
 40250  004CC2  0100               	movlb	0	; () banked
 40251  004CC4  2179               	addwfc	(??_TMR_GetDeltaTime+13)& (0+255),w,b
 40252  004CC6  6F7D               	movwf	(??_TMR_GetDeltaTime+17)& (0+255),b
 40253  004CC8  0101               	movlb	1	; () banked
 40254  004CCA  510A               	movf	(_ticksAdded+2)& (0+255),w,b	;volatile
 40255  004CCC  0100               	movlb	0	; () banked
 40256  004CCE  217A               	addwfc	(??_TMR_GetDeltaTime+14)& (0+255),w,b
 40257  004CD0  6F7E               	movwf	(??_TMR_GetDeltaTime+18)& (0+255),b
 40258  004CD2  0101               	movlb	1	; () banked
 40259  004CD4  510B               	movf	(_ticksAdded+3)& (0+255),w,b	;volatile
 40260  004CD6  0100               	movlb	0	; () banked
 40261  004CD8  217B               	addwfc	(??_TMR_GetDeltaTime+15)& (0+255),w,b
 40262  004CDA  6F7F               	movwf	(??_TMR_GetDeltaTime+19)& (0+255),b
 40263  004CDC  0E00               	movlw	0
 40264  004CDE  257C               	addwf	(??_TMR_GetDeltaTime+16)& (0+255),w,b
 40265  004CE0  0101               	movlb	1	; () banked
 40266  004CE2  6F00               	movwf	TMR_GetDeltaTime@retVal& (0+255),b
 40267  004CE4  0E00               	movlw	0
 40268  004CE6  0100               	movlb	0	; () banked
 40269  004CE8  217D               	addwfc	(??_TMR_GetDeltaTime+17)& (0+255),w,b
 40270  004CEA  0101               	movlb	1	; () banked
 40271  004CEC  6F01               	movwf	(TMR_GetDeltaTime@retVal+1)& (0+255),b
 40272  004CEE  0E01               	movlw	1
 40273  004CF0  0100               	movlb	0	; () banked
 40274  004CF2  217E               	addwfc	(??_TMR_GetDeltaTime+18)& (0+255),w,b
 40275  004CF4  0101               	movlb	1	; () banked
 40276  004CF6  6F02               	movwf	(TMR_GetDeltaTime@retVal+2)& (0+255),b
 40277  004CF8  0E00               	movlw	0
 40278  004CFA  0100               	movlb	0	; () banked
 40279  004CFC  217F               	addwfc	(??_TMR_GetDeltaTime+19)& (0+255),w,b
 40280  004CFE  0101               	movlb	1	; () banked
 40281  004D00  6F03               	movwf	(TMR_GetDeltaTime@retVal+3)& (0+255),b
 40282                           
 40283                           ; BSR set to: 1
 40284                           ;sw_timer.c: 99: ticksAccounted = tmrVal;
 40285  004D02  C14A  F104         	movff	TMR_GetDeltaTime@tmrVal,_ticksAccounted	;volatile
 40286  004D06  C14B  F105         	movff	TMR_GetDeltaTime@tmrVal+1,_ticksAccounted+1	;volatile
 40287  004D0A  6B06               	clrf	(_ticksAccounted+2)& (0+255),b	;volatile
 40288  004D0C  6B07               	clrf	(_ticksAccounted+3)& (0+255),b	;volatile
 40289                           
 40290                           ; BSR set to: 1
 40291                           ;sw_timer.c: 100: ticksAdded = 0;
 40292  004D0E  0E00               	movlw	0
 40293  004D10  6F08               	movwf	_ticksAdded& (0+255),b	;volatile
 40294  004D12  0E00               	movlw	0
 40295  004D14  6F09               	movwf	(_ticksAdded+1)& (0+255),b	;volatile
 40296  004D16  0E00               	movlw	0
 40297  004D18  6F0A               	movwf	(_ticksAdded+2)& (0+255),b	;volatile
 40298  004D1A  0E00               	movlw	0
 40299  004D1C  6F0B               	movwf	(_ticksAdded+3)& (0+255),b	;volatile
 40300                           
 40301                           ; BSR set to: 1
 40302                           ;sw_timer.c: 101: reloadVal = 0;
 40303  004D1E  0E00               	movlw	0
 40304  004D20  6E4D               	movwf	_reloadVal+1,c	;volatile
 40305  004D22  0E00               	movlw	0
 40306  004D24  6E4C               	movwf	_reloadVal,c	;volatile
 40307                           
 40308                           ;sw_timer.c: 102: }
 40309  004D26  D04B               	goto	l1526
 40310  004D28                     l1525:
 40311                           
 40312                           ;sw_timer.c: 103: else
 40313                           ;sw_timer.c: 104: {
 40314                           ;sw_timer.c: 105: retVal = tmrVal - reloadVal - ticksAccounted + ticksAdded;
 40315                           
 40316                           ; BSR set to: 1
 40317  004D28  C104  F06C         	movff	_ticksAccounted,??_TMR_GetDeltaTime	;volatile
 40318  004D2C  C105  F06D         	movff	_ticksAccounted+1,??_TMR_GetDeltaTime+1	;volatile
 40319  004D30  C106  F06E         	movff	_ticksAccounted+2,??_TMR_GetDeltaTime+2	;volatile
 40320  004D34  C107  F06F         	movff	_ticksAccounted+3,??_TMR_GetDeltaTime+3	;volatile
 40321  004D38  0100               	movlb	0	; () banked
 40322  004D3A  1F6C               	comf	??_TMR_GetDeltaTime& (0+255),f,b
 40323  004D3C  1F6D               	comf	(??_TMR_GetDeltaTime+1)& (0+255),f,b
 40324  004D3E  1F6E               	comf	(??_TMR_GetDeltaTime+2)& (0+255),f,b
 40325  004D40  1F6F               	comf	(??_TMR_GetDeltaTime+3)& (0+255),f,b
 40326  004D42  2B6C               	incf	??_TMR_GetDeltaTime& (0+255),f,b
 40327  004D44  0E00               	movlw	0
 40328  004D46  236D               	addwfc	(??_TMR_GetDeltaTime+1)& (0+255),f,b
 40329  004D48  236E               	addwfc	(??_TMR_GetDeltaTime+2)& (0+255),f,b
 40330  004D4A  236F               	addwfc	(??_TMR_GetDeltaTime+3)& (0+255),f,b
 40331  004D4C  C04C  F070         	movff	_reloadVal,??_TMR_GetDeltaTime+4	;volatile
 40332  004D50  C04D  F071         	movff	_reloadVal+1,??_TMR_GetDeltaTime+5	;volatile
 40333  004D54  1F70               	comf	(??_TMR_GetDeltaTime+4)& (0+255),f,b
 40334  004D56  1F71               	comf	(??_TMR_GetDeltaTime+5)& (0+255),f,b
 40335  004D58  4B70               	infsnz	(??_TMR_GetDeltaTime+4)& (0+255),f,b
 40336  004D5A  2B71               	incf	(??_TMR_GetDeltaTime+5)& (0+255),f,b
 40337  004D5C  0101               	movlb	1	; () banked
 40338  004D5E  514A               	movf	TMR_GetDeltaTime@tmrVal& (0+255),w,b
 40339  004D60  0100               	movlb	0	; () banked
 40340  004D62  2770               	addwf	(??_TMR_GetDeltaTime+4)& (0+255),f,b
 40341  004D64  0101               	movlb	1	; () banked
 40342  004D66  514B               	movf	(TMR_GetDeltaTime@tmrVal+1)& (0+255),w,b
 40343  004D68  0100               	movlb	0	; () banked
 40344  004D6A  2371               	addwfc	(??_TMR_GetDeltaTime+5)& (0+255),f,b
 40345  004D6C  5170               	movf	(??_TMR_GetDeltaTime+4)& (0+255),w,b
 40346  004D6E  256C               	addwf	??_TMR_GetDeltaTime& (0+255),w,b
 40347  004D70  6F72               	movwf	(??_TMR_GetDeltaTime+6)& (0+255),b
 40348  004D72  5171               	movf	(??_TMR_GetDeltaTime+5)& (0+255),w,b
 40349  004D74  216D               	addwfc	(??_TMR_GetDeltaTime+1)& (0+255),w,b
 40350  004D76  6F73               	movwf	(??_TMR_GetDeltaTime+7)& (0+255),b
 40351  004D78  0E00               	movlw	0
 40352  004D7A  216E               	addwfc	(??_TMR_GetDeltaTime+2)& (0+255),w,b
 40353  004D7C  6F74               	movwf	(??_TMR_GetDeltaTime+8)& (0+255),b
 40354  004D7E  0E00               	movlw	0
 40355  004D80  216F               	addwfc	(??_TMR_GetDeltaTime+3)& (0+255),w,b
 40356  004D82  6F75               	movwf	(??_TMR_GetDeltaTime+9)& (0+255),b
 40357  004D84  0101               	movlb	1	; () banked
 40358  004D86  5108               	movf	_ticksAdded& (0+255),w,b	;volatile
 40359  004D88  0100               	movlb	0	; () banked
 40360  004D8A  2572               	addwf	(??_TMR_GetDeltaTime+6)& (0+255),w,b
 40361  004D8C  0101               	movlb	1	; () banked
 40362  004D8E  6F00               	movwf	TMR_GetDeltaTime@retVal& (0+255),b
 40363  004D90  5109               	movf	(_ticksAdded+1)& (0+255),w,b	;volatile
 40364  004D92  0100               	movlb	0	; () banked
 40365  004D94  2173               	addwfc	(??_TMR_GetDeltaTime+7)& (0+255),w,b
 40366  004D96  0101               	movlb	1	; () banked
 40367  004D98  6F01               	movwf	(TMR_GetDeltaTime@retVal+1)& (0+255),b
 40368  004D9A  510A               	movf	(_ticksAdded+2)& (0+255),w,b	;volatile
 40369  004D9C  0100               	movlb	0	; () banked
 40370  004D9E  2174               	addwfc	(??_TMR_GetDeltaTime+8)& (0+255),w,b
 40371  004DA0  0101               	movlb	1	; () banked
 40372  004DA2  6F02               	movwf	(TMR_GetDeltaTime@retVal+2)& (0+255),b
 40373  004DA4  510B               	movf	(_ticksAdded+3)& (0+255),w,b	;volatile
 40374  004DA6  0100               	movlb	0	; () banked
 40375  004DA8  2175               	addwfc	(??_TMR_GetDeltaTime+9)& (0+255),w,b
 40376  004DAA  0101               	movlb	1	; () banked
 40377  004DAC  6F03               	movwf	(TMR_GetDeltaTime@retVal+3)& (0+255),b
 40378                           
 40379                           ;sw_timer.c: 106: ticksAccounted += retVal;
 40380  004DAE  5100               	movf	TMR_GetDeltaTime@retVal& (0+255),w,b
 40381  004DB0  2704               	addwf	_ticksAccounted& (0+255),f,b	;volatile
 40382  004DB2  5101               	movf	(TMR_GetDeltaTime@retVal+1)& (0+255),w,b
 40383  004DB4  2305               	addwfc	(_ticksAccounted+1)& (0+255),f,b	;volatile
 40384  004DB6  5102               	movf	(TMR_GetDeltaTime@retVal+2)& (0+255),w,b
 40385  004DB8  2306               	addwfc	(_ticksAccounted+2)& (0+255),f,b	;volatile
 40386  004DBA  5103               	movf	(TMR_GetDeltaTime@retVal+3)& (0+255),w,b
 40387  004DBC  2307               	addwfc	(_ticksAccounted+3)& (0+255),f,b	;volatile
 40388  004DBE                     l1526:
 40389                           
 40390                           ; BSR set to: 1
 40391                           ;sw_timer.c: 107: }
 40392                           ;sw_timer.c: 109: return retVal;
 40393                           
 40394                           ; BSR set to: 1
 40395  004DBE  C100  F068         	movff	TMR_GetDeltaTime@retVal,?_TMR_GetDeltaTime
 40396  004DC2  C101  F069         	movff	TMR_GetDeltaTime@retVal+1,?_TMR_GetDeltaTime+1
 40397  004DC6  C102  F06A         	movff	TMR_GetDeltaTime@retVal+2,?_TMR_GetDeltaTime+2
 40398  004DCA  C103  F06B         	movff	TMR_GetDeltaTime@retVal+3,?_TMR_GetDeltaTime+3
 40399  004DCE  0012               	return	
 40400  004DD0                     __end_of_TMR_GetDeltaTime:
 40401                           	opt stack 0
 40402                           tosu	equ	0xFFF
 40403                           tosh	equ	0xFFE
 40404                           tosl	equ	0xFFD
 40405                           pclath	equ	0xFFA
 40406                           tblptru	equ	0xFF8
 40407                           tblptrh	equ	0xFF7
 40408                           tblptrl	equ	0xFF6
 40409                           tablat	equ	0xFF5
 40410                           prodh	equ	0xFF4
 40411                           prodl	equ	0xFF3
 40412                           intcon	equ	0xFF2
 40413                           intcon2	equ	0xFF1
 40414                           intcon3	equ	0xFF0
 40415                           indf0	equ	0xFEF
 40416                           postinc0	equ	0xFEE
 40417                           plusw0	equ	0xFEB
 40418                           fsr0h	equ	0xFEA
 40419                           fsr0l	equ	0xFE9
 40420                           wreg	equ	0xFE8
 40421                           postinc1	equ	0xFE6
 40422                           postdec1	equ	0xFE5
 40423                           plusw1	equ	0xFE3
 40424                           fsr1h	equ	0xFE2
 40425                           fsr1l	equ	0xFE1
 40426                           indf2	equ	0xFDF
 40427                           postinc2	equ	0xFDE
 40428                           postdec2	equ	0xFDD
 40429                           plusw2	equ	0xFDB
 40430                           fsr2h	equ	0xFDA
 40431                           fsr2l	equ	0xFD9
 40432                           status	equ	0xFD8
 40433                           
 40434 ;; *************** function _TMR1_ReadTimer *****************
 40435 ;; Defined at:
 40436 ;;		line 105 in file "mcc_generated_files/tmr1.c"
 40437 ;; Parameters:    Size  Location     Type
 40438 ;;		None
 40439 ;; Auto vars:     Size  Location     Type
 40440 ;;  readVal         2    4[BANK0 ] unsigned int 
 40441 ;;  readValLow      1    7[BANK0 ] unsigned char 
 40442 ;;  readValHigh     1    6[BANK0 ] unsigned char 
 40443 ;; Return value:  Size  Location     Type
 40444 ;;                  2    0[BANK0 ] unsigned int 
 40445 ;; Registers used:
 40446 ;;		wreg, status,2
 40447 ;; Tracked objects:
 40448 ;;		On entry : 0/0
 40449 ;;		On exit  : 0/0
 40450 ;;		Unchanged: 0/0
 40451 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 40452 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 40453 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 40454 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 40455 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 40456 ;;Total ram usage:        8 bytes
 40457 ;; Hardware stack levels used:    1
 40458 ;; Hardware stack levels required when called:    7
 40459 ;; This function calls:
 40460 ;;		Nothing
 40461 ;; This function is called by:
 40462 ;;		_TMR_GetDeltaTime
 40463 ;;		_TMR_SwapTimer
 40464 ;; This function uses a non-reentrant model
 40465 ;;
 40466                           
 40467                           	psect	text194
 40468  00915A                     __ptext194:
 40469                           	opt stack 0
 40470  00915A                     _TMR1_ReadTimer:
 40471                           	opt stack 18
 40472                           
 40473                           ;tmr1.c: 107: uint16_t readVal;
 40474                           ;tmr1.c: 108: uint8_t readValHigh;
 40475                           ;tmr1.c: 109: uint8_t readValLow;
 40476                           ;tmr1.c: 111: T1CONbits.T1RD16 = 1;
 40477                           
 40478                           ; BSR set to: 1
 40479                           ;incstack = 0
 40480  00915A  82CD               	bsf	4045,1,c	;volatile
 40481                           
 40482                           ;tmr1.c: 113: readValLow = TMR1L;
 40483  00915C  CFCE F067          	movff	4046,TMR1_ReadTimer@readValLow	;volatile
 40484                           
 40485                           ;tmr1.c: 114: readValHigh = TMR1H;
 40486  009160  CFCF F066          	movff	4047,TMR1_ReadTimer@readValHigh	;volatile
 40487                           
 40488                           ;tmr1.c: 116: readVal = ((uint16_t)readValHigh << 8) | readValLow;
 40489  009164  0100               	movlb	0	; () banked
 40490  009166  5166               	movf	TMR1_ReadTimer@readValHigh& (0+255),w,b
 40491  009168  6F62               	movwf	??_TMR1_ReadTimer& (0+255),b
 40492  00916A  5167               	movf	TMR1_ReadTimer@readValLow& (0+255),w,b
 40493  00916C  6F64               	movwf	TMR1_ReadTimer@readVal& (0+255),b
 40494  00916E  C062  F065         	movff	??_TMR1_ReadTimer,TMR1_ReadTimer@readVal+1
 40495                           
 40496                           ; BSR set to: 0
 40497                           ;tmr1.c: 118: return readVal;
 40498  009172  C064  F060         	movff	TMR1_ReadTimer@readVal,?_TMR1_ReadTimer
 40499  009176  C065  F061         	movff	TMR1_ReadTimer@readVal+1,?_TMR1_ReadTimer+1
 40500  00917A  0012               	return	
 40501  00917C                     __end_of_TMR1_ReadTimer:
 40502                           	opt stack 0
 40503                           tosu	equ	0xFFF
 40504                           tosh	equ	0xFFE
 40505                           tosl	equ	0xFFD
 40506                           pclath	equ	0xFFA
 40507                           tblptru	equ	0xFF8
 40508                           tblptrh	equ	0xFF7
 40509                           tblptrl	equ	0xFF6
 40510                           tablat	equ	0xFF5
 40511                           prodh	equ	0xFF4
 40512                           prodl	equ	0xFF3
 40513                           intcon	equ	0xFF2
 40514                           intcon2	equ	0xFF1
 40515                           intcon3	equ	0xFF0
 40516                           indf0	equ	0xFEF
 40517                           postinc0	equ	0xFEE
 40518                           plusw0	equ	0xFEB
 40519                           fsr0h	equ	0xFEA
 40520                           fsr0l	equ	0xFE9
 40521                           wreg	equ	0xFE8
 40522                           postinc1	equ	0xFE6
 40523                           postdec1	equ	0xFE5
 40524                           plusw1	equ	0xFE3
 40525                           fsr1h	equ	0xFE2
 40526                           fsr1l	equ	0xFE1
 40527                           indf2	equ	0xFDF
 40528                           postinc2	equ	0xFDE
 40529                           postdec2	equ	0xFDD
 40530                           plusw2	equ	0xFDB
 40531                           fsr2h	equ	0xFDA
 40532                           fsr2l	equ	0xFD9
 40533                           status	equ	0xFD8
 40534                           
 40535 ;; *************** function _SwTimerSetTimeout *****************
 40536 ;; Defined at:
 40537 ;;		line 186 in file "mcc_generated_files/LoRaWAN/sw_timer.c"
 40538 ;; Parameters:    Size  Location     Type
 40539 ;;  timerId         1    wreg     unsigned char 
 40540 ;;  timeout         4   13[BANK0 ] unsigned long 
 40541 ;; Auto vars:     Size  Location     Type
 40542 ;;  timerId         1   21[BANK0 ] unsigned char 
 40543 ;; Return value:  Size  Location     Type
 40544 ;;                  1    wreg      void 
 40545 ;; Registers used:
 40546 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 40547 ;; Tracked objects:
 40548 ;;		On entry : 0/0
 40549 ;;		On exit  : 0/0
 40550 ;;		Unchanged: 0/0
 40551 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 40552 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 40553 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 40554 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 40555 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 40556 ;;Total ram usage:        9 bytes
 40557 ;; Hardware stack levels used:    1
 40558 ;; Hardware stack levels required when called:    7
 40559 ;; This function calls:
 40560 ;;		Nothing
 40561 ;; This function is called by:
 40562 ;;		_RADIO_Transmit
 40563 ;;		_RADIO_ReceiveStart
 40564 ;;		_LORAWAN_Join
 40565 ;;		_LORAWAN_LinkCheckConfigure
 40566 ;;		_LORAWAN_LinkCheckCallback
 40567 ;;		_UpdateRetransmissionAckTimeoutState
 40568 ;;		_UpdateJoinSuccessState
 40569 ;;		_LORAWAN_TxDone
 40570 ;;		_LORAWAN_RxTimeout
 40571 ;;		_StartReTxTimer
 40572 ;;		_DutyCycleCallback
 40573 ;; This function uses a non-reentrant model
 40574 ;;
 40575                           
 40576                           	psect	text195
 40577  008A4E                     __ptext195:
 40578                           	opt stack 0
 40579  008A4E                     _SwTimerSetTimeout:
 40580                           	opt stack 21
 40581                           
 40582                           ; BSR set to: 0
 40583                           ;incstack = 0
 40584                           ;SwTimerSetTimeout@timerId stored from wreg
 40585  008A4E  0100               	movlb	0	; () banked
 40586  008A50  6F75               	movwf	SwTimerSetTimeout@timerId& (0+255),b
 40587                           
 40588                           ;sw_timer.c: 188: (INTCONbits.GIE = 0);
 40589  008A52  9EF2               	bcf	intcon,7,c	;volatile
 40590                           
 40591                           ;sw_timer.c: 189: swTimers[timerId].ticksRemaining = timeout - 32;
 40592  008A54  0EE0               	movlw	224
 40593  008A56  0100               	movlb	0	; () banked
 40594  008A58  256D               	addwf	SwTimerSetTimeout@timeout& (0+255),w,b
 40595  008A5A  6F71               	movwf	??_SwTimerSetTimeout& (0+255),b
 40596  008A5C  0EFF               	movlw	255
 40597  008A5E  216E               	addwfc	(SwTimerSetTimeout@timeout+1)& (0+255),w,b
 40598  008A60  6F72               	movwf	(??_SwTimerSetTimeout+1)& (0+255),b
 40599  008A62  0EFF               	movlw	255
 40600  008A64  216F               	addwfc	(SwTimerSetTimeout@timeout+2)& (0+255),w,b
 40601  008A66  6F73               	movwf	(??_SwTimerSetTimeout+2)& (0+255),b
 40602  008A68  0EFF               	movlw	255
 40603  008A6A  2170               	addwfc	(SwTimerSetTimeout@timeout+3)& (0+255),w,b
 40604  008A6C  6F74               	movwf	(??_SwTimerSetTimeout+3)& (0+255),b
 40605  008A6E  5175               	movf	SwTimerSetTimeout@timerId& (0+255),w,b
 40606  008A70  0D08               	mullw	8
 40607  008A72  0E00               	movlw	low _swTimers
 40608  008A74  24F3               	addwf	prodl,w,c
 40609  008A76  6ED9               	movwf	fsr2l,c
 40610  008A78  0E03               	movlw	high _swTimers
 40611  008A7A  20F4               	addwfc	prodh,w,c
 40612  008A7C  6EDA               	movwf	fsr2h,c
 40613  008A7E  C071  FFDE         	movff	??_SwTimerSetTimeout,postinc2
 40614  008A82  C072  FFDE         	movff	??_SwTimerSetTimeout+1,postinc2
 40615  008A86  C073  FFDE         	movff	??_SwTimerSetTimeout+2,postinc2
 40616  008A8A  C074  FFDE         	movff	??_SwTimerSetTimeout+3,postinc2
 40617                           
 40618                           ; BSR set to: 0
 40619                           ;sw_timer.c: 190: (INTCONbits.GIE = 1);
 40620  008A8E  8EF2               	bsf	intcon,7,c	;volatile
 40621                           
 40622                           ; BSR set to: 0
 40623  008A90  0012               	return		;funcret
 40624  008A92                     __end_of_SwTimerSetTimeout:
 40625                           	opt stack 0
 40626                           tosu	equ	0xFFF
 40627                           tosh	equ	0xFFE
 40628                           tosl	equ	0xFFD
 40629                           pclath	equ	0xFFA
 40630                           tblptru	equ	0xFF8
 40631                           tblptrh	equ	0xFF7
 40632                           tblptrl	equ	0xFF6
 40633                           tablat	equ	0xFF5
 40634                           prodh	equ	0xFF4
 40635                           prodl	equ	0xFF3
 40636                           intcon	equ	0xFF2
 40637                           intcon2	equ	0xFF1
 40638                           intcon3	equ	0xFF0
 40639                           indf0	equ	0xFEF
 40640                           postinc0	equ	0xFEE
 40641                           plusw0	equ	0xFEB
 40642                           fsr0h	equ	0xFEA
 40643                           fsr0l	equ	0xFE9
 40644                           wreg	equ	0xFE8
 40645                           postinc1	equ	0xFE6
 40646                           postdec1	equ	0xFE5
 40647                           plusw1	equ	0xFE3
 40648                           fsr1h	equ	0xFE2
 40649                           fsr1l	equ	0xFE1
 40650                           indf2	equ	0xFDF
 40651                           postinc2	equ	0xFDE
 40652                           postdec2	equ	0xFDD
 40653                           plusw2	equ	0xFDB
 40654                           fsr2h	equ	0xFDA
 40655                           fsr2l	equ	0xFD9
 40656                           status	equ	0xFD8
 40657                           
 40658 ;; *************** function _InitDefault868Channels *****************
 40659 ;; Defined at:
 40660 ;;		line 979 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 40661 ;; Parameters:    Size  Location     Type
 40662 ;;		None
 40663 ;; Auto vars:     Size  Location     Type
 40664 ;;  i               1   11[BANK0 ] unsigned char 
 40665 ;; Return value:  Size  Location     Type
 40666 ;;                  1    wreg      void 
 40667 ;; Registers used:
 40668 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 40669 ;; Tracked objects:
 40670 ;;		On entry : 0/0
 40671 ;;		On exit  : 0/0
 40672 ;;		Unchanged: 0/0
 40673 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 40674 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 40675 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 40676 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 40677 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 40678 ;;Total ram usage:        1 bytes
 40679 ;; Hardware stack levels used:    1
 40680 ;; Hardware stack levels required when called:    8
 40681 ;; This function calls:
 40682 ;;		_memcpy
 40683 ;;		_memset
 40684 ;; This function is called by:
 40685 ;;		_LORAWAN_Reset
 40686 ;; This function uses a non-reentrant model
 40687 ;;
 40688                           
 40689                           	psect	text196
 40690  0077F4                     __ptext196:
 40691                           	opt stack 0
 40692  0077F4                     _InitDefault868Channels:
 40693                           	opt stack 20
 40694                           
 40695                           ;lorawan_eu.c: 981: uint8_t i;
 40696                           ;lorawan_eu.c: 983: memset (Channels, 0, sizeof(Channels) );
 40697                           
 40698                           ; BSR set to: 0
 40699                           ;incstack = 0
 40700  0077F4  0E00               	movlw	low _Channels
 40701  0077F6  0100               	movlb	0	; () banked
 40702  0077F8  6F60               	movwf	memset@p1& (0+255),b
 40703  0077FA  0E04               	movlw	high _Channels
 40704  0077FC  6F61               	movwf	(memset@p1+1)& (0+255),b
 40705  0077FE  0E00               	movlw	0
 40706  007800  6F63               	movwf	(memset@c+1)& (0+255),b
 40707  007802  0E00               	movlw	0
 40708  007804  6F62               	movwf	memset@c& (0+255),b
 40709  007806  0E00               	movlw	0
 40710  007808  6F65               	movwf	(memset@n+1)& (0+255),b
 40711  00780A  0EE0               	movlw	224
 40712  00780C  6F64               	movwf	memset@n& (0+255),b
 40713  00780E  ECD6  F046         	call	_memset	;wreg free
 40714                           
 40715                           ;lorawan_eu.c: 984: memcpy (Channels, DefaultChannels868, sizeof(DefaultChannels868) );
 40716  007812  0E00               	movlw	low _Channels
 40717  007814  0100               	movlb	0	; () banked
 40718  007816  6F60               	movwf	memcpy@d1& (0+255),b
 40719  007818  0E04               	movlw	high _Channels
 40720  00781A  6F61               	movwf	(memcpy@d1+1)& (0+255),b
 40721  00781C  0ED2               	movlw	low _DefaultChannels868
 40722  00781E  6F62               	movwf	memcpy@s1& (0+255),b
 40723  007820  0EFF               	movlw	high _DefaultChannels868
 40724  007822  6F63               	movwf	(memcpy@s1+1)& (0+255),b
 40725  007824  0E00               	movlw	0
 40726  007826  6F65               	movwf	(memcpy@n+1)& (0+255),b
 40727  007828  0E2A               	movlw	42
 40728  00782A  6F64               	movwf	memcpy@n& (0+255),b
 40729  00782C  EC5D  F041         	call	_memcpy	;wreg free
 40730                           
 40731                           ;lorawan_eu.c: 985: for (i = 3; i < 16; i++)
 40732  007830  0E03               	movlw	3
 40733  007832  0100               	movlb	0	; () banked
 40734  007834  6F6B               	movwf	InitDefault868Channels@i& (0+255),b
 40735  007836                     l12201:
 40736                           
 40737                           ; BSR set to: 0
 40738  007836  0E0F               	movlw	15
 40739  007838  656B               	cpfsgt	InitDefault868Channels@i& (0+255),b
 40740  00783A  D001               	goto	l2038
 40741  00783C  0012               	return	
 40742  00783E                     l2038:
 40743                           
 40744                           ; BSR set to: 0
 40745                           ;lorawan_eu.c: 986: {
 40746                           ;lorawan_eu.c: 989: Channels[i].dutyCycle = (65535U);
 40747                           
 40748                           ; BSR set to: 0
 40749  00783E  516B               	movf	InitDefault868Channels@i& (0+255),w,b
 40750  007840  0D0E               	mullw	14
 40751  007842  0E06               	movlw	6
 40752  007844  26F3               	addwf	prodl,f,c
 40753  007846  0E00               	movlw	0
 40754  007848  22F4               	addwfc	prodh,f,c
 40755  00784A  0E00               	movlw	low _Channels
 40756  00784C  24F3               	addwf	prodl,w,c
 40757  00784E  6ED9               	movwf	fsr2l,c
 40758  007850  0E04               	movlw	high _Channels
 40759  007852  20F4               	addwfc	prodh,w,c
 40760  007854  6EDA               	movwf	fsr2h,c
 40761  007856  0EFF               	movlw	255
 40762  007858  6EDE               	movwf	postinc2,c
 40763  00785A  0EFF               	movlw	255
 40764  00785C  6EDD               	movwf	postdec2,c
 40765                           
 40766                           ;lorawan_eu.c: 990: Channels[i].dataRange.value = (255);
 40767  00785E  516B               	movf	InitDefault868Channels@i& (0+255),w,b
 40768  007860  0D0E               	mullw	14
 40769  007862  0E05               	movlw	5
 40770  007864  26F3               	addwf	prodl,f,c
 40771  007866  0E00               	movlw	0
 40772  007868  22F4               	addwfc	prodh,f,c
 40773  00786A  0E00               	movlw	low _Channels
 40774  00786C  24F3               	addwf	prodl,w,c
 40775  00786E  6ED9               	movwf	fsr2l,c
 40776  007870  0E04               	movlw	high _Channels
 40777  007872  20F4               	addwfc	prodh,w,c
 40778  007874  6EDA               	movwf	fsr2h,c
 40779  007876  0EFF               	movlw	255
 40780  007878  6EDF               	movwf	indf2,c
 40781                           
 40782                           ; BSR set to: 0
 40783  00787A  2B6B               	incf	InitDefault868Channels@i& (0+255),f,b
 40784  00787C  D7DC               	goto	l12201
 40785  00787E                     __end_of_InitDefault868Channels:
 40786                           	opt stack 0
 40787                           tosu	equ	0xFFF
 40788                           tosh	equ	0xFFE
 40789                           tosl	equ	0xFFD
 40790                           pclath	equ	0xFFA
 40791                           tblptru	equ	0xFF8
 40792                           tblptrh	equ	0xFF7
 40793                           tblptrl	equ	0xFF6
 40794                           tablat	equ	0xFF5
 40795                           prodh	equ	0xFF4
 40796                           prodl	equ	0xFF3
 40797                           intcon	equ	0xFF2
 40798                           intcon2	equ	0xFF1
 40799                           intcon3	equ	0xFF0
 40800                           indf0	equ	0xFEF
 40801                           postinc0	equ	0xFEE
 40802                           plusw0	equ	0xFEB
 40803                           fsr0h	equ	0xFEA
 40804                           fsr0l	equ	0xFE9
 40805                           wreg	equ	0xFE8
 40806                           postinc1	equ	0xFE6
 40807                           postdec1	equ	0xFE5
 40808                           plusw1	equ	0xFE3
 40809                           fsr1h	equ	0xFE2
 40810                           fsr1l	equ	0xFE1
 40811                           indf2	equ	0xFDF
 40812                           postinc2	equ	0xFDE
 40813                           postdec2	equ	0xFDD
 40814                           plusw2	equ	0xFDB
 40815                           fsr2h	equ	0xFDA
 40816                           fsr2l	equ	0xFD9
 40817                           status	equ	0xFD8
 40818                           
 40819 ;; *************** function _InitDefault433Channels *****************
 40820 ;; Defined at:
 40821 ;;		line 994 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 40822 ;; Parameters:    Size  Location     Type
 40823 ;;		None
 40824 ;; Auto vars:     Size  Location     Type
 40825 ;;  i               1   11[BANK0 ] unsigned char 
 40826 ;; Return value:  Size  Location     Type
 40827 ;;                  1    wreg      void 
 40828 ;; Registers used:
 40829 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 40830 ;; Tracked objects:
 40831 ;;		On entry : 0/0
 40832 ;;		On exit  : 0/0
 40833 ;;		Unchanged: 0/0
 40834 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 40835 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 40836 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 40837 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 40838 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 40839 ;;Total ram usage:        1 bytes
 40840 ;; Hardware stack levels used:    1
 40841 ;; Hardware stack levels required when called:    8
 40842 ;; This function calls:
 40843 ;;		_memcpy
 40844 ;;		_memset
 40845 ;; This function is called by:
 40846 ;;		_LORAWAN_Reset
 40847 ;; This function uses a non-reentrant model
 40848 ;;
 40849                           
 40850                           	psect	text197
 40851  00787E                     __ptext197:
 40852                           	opt stack 0
 40853  00787E                     _InitDefault433Channels:
 40854                           	opt stack 20
 40855                           
 40856                           ;lorawan_eu.c: 996: uint8_t i;
 40857                           ;lorawan_eu.c: 998: memset (Channels, 0, sizeof(Channels) );
 40858                           
 40859                           ; BSR set to: 0
 40860                           ;incstack = 0
 40861  00787E  0E00               	movlw	low _Channels
 40862  007880  0100               	movlb	0	; () banked
 40863  007882  6F60               	movwf	memset@p1& (0+255),b
 40864  007884  0E04               	movlw	high _Channels
 40865  007886  6F61               	movwf	(memset@p1+1)& (0+255),b
 40866  007888  0E00               	movlw	0
 40867  00788A  6F63               	movwf	(memset@c+1)& (0+255),b
 40868  00788C  0E00               	movlw	0
 40869  00788E  6F62               	movwf	memset@c& (0+255),b
 40870  007890  0E00               	movlw	0
 40871  007892  6F65               	movwf	(memset@n+1)& (0+255),b
 40872  007894  0EE0               	movlw	224
 40873  007896  6F64               	movwf	memset@n& (0+255),b
 40874  007898  ECD6  F046         	call	_memset	;wreg free
 40875                           
 40876                           ;lorawan_eu.c: 999: memcpy (Channels, DefaultChannels433, sizeof(DefaultChannels433) );
 40877  00789C  0E00               	movlw	low _Channels
 40878  00789E  0100               	movlb	0	; () banked
 40879  0078A0  6F60               	movwf	memcpy@d1& (0+255),b
 40880  0078A2  0E04               	movlw	high _Channels
 40881  0078A4  6F61               	movwf	(memcpy@d1+1)& (0+255),b
 40882  0078A6  0EA8               	movlw	low _DefaultChannels433
 40883  0078A8  6F62               	movwf	memcpy@s1& (0+255),b
 40884  0078AA  0EFF               	movlw	high _DefaultChannels433
 40885  0078AC  6F63               	movwf	(memcpy@s1+1)& (0+255),b
 40886  0078AE  0E00               	movlw	0
 40887  0078B0  6F65               	movwf	(memcpy@n+1)& (0+255),b
 40888  0078B2  0E2A               	movlw	42
 40889  0078B4  6F64               	movwf	memcpy@n& (0+255),b
 40890  0078B6  EC5D  F041         	call	_memcpy	;wreg free
 40891                           
 40892                           ;lorawan_eu.c: 1000: for (i = 3; i < 16; i++)
 40893  0078BA  0E03               	movlw	3
 40894  0078BC  0100               	movlb	0	; () banked
 40895  0078BE  6F6B               	movwf	InitDefault433Channels@i& (0+255),b
 40896  0078C0                     l12217:
 40897                           
 40898                           ; BSR set to: 0
 40899  0078C0  0E0F               	movlw	15
 40900  0078C2  656B               	cpfsgt	InitDefault433Channels@i& (0+255),b
 40901  0078C4  D001               	goto	l2043
 40902  0078C6  0012               	return	
 40903  0078C8                     l2043:
 40904                           
 40905                           ; BSR set to: 0
 40906                           ;lorawan_eu.c: 1001: {
 40907                           ;lorawan_eu.c: 1004: Channels[i].dutyCycle = (65535U);
 40908                           
 40909                           ; BSR set to: 0
 40910  0078C8  516B               	movf	InitDefault433Channels@i& (0+255),w,b
 40911  0078CA  0D0E               	mullw	14
 40912  0078CC  0E06               	movlw	6
 40913  0078CE  26F3               	addwf	prodl,f,c
 40914  0078D0  0E00               	movlw	0
 40915  0078D2  22F4               	addwfc	prodh,f,c
 40916  0078D4  0E00               	movlw	low _Channels
 40917  0078D6  24F3               	addwf	prodl,w,c
 40918  0078D8  6ED9               	movwf	fsr2l,c
 40919  0078DA  0E04               	movlw	high _Channels
 40920  0078DC  20F4               	addwfc	prodh,w,c
 40921  0078DE  6EDA               	movwf	fsr2h,c
 40922  0078E0  0EFF               	movlw	255
 40923  0078E2  6EDE               	movwf	postinc2,c
 40924  0078E4  0EFF               	movlw	255
 40925  0078E6  6EDD               	movwf	postdec2,c
 40926                           
 40927                           ;lorawan_eu.c: 1005: Channels[i].dataRange.value = (255);
 40928  0078E8  516B               	movf	InitDefault433Channels@i& (0+255),w,b
 40929  0078EA  0D0E               	mullw	14
 40930  0078EC  0E05               	movlw	5
 40931  0078EE  26F3               	addwf	prodl,f,c
 40932  0078F0  0E00               	movlw	0
 40933  0078F2  22F4               	addwfc	prodh,f,c
 40934  0078F4  0E00               	movlw	low _Channels
 40935  0078F6  24F3               	addwf	prodl,w,c
 40936  0078F8  6ED9               	movwf	fsr2l,c
 40937  0078FA  0E04               	movlw	high _Channels
 40938  0078FC  20F4               	addwfc	prodh,w,c
 40939  0078FE  6EDA               	movwf	fsr2h,c
 40940  007900  0EFF               	movlw	255
 40941  007902  6EDF               	movwf	indf2,c
 40942                           
 40943                           ; BSR set to: 0
 40944  007904  2B6B               	incf	InitDefault433Channels@i& (0+255),f,b
 40945  007906  D7DC               	goto	l12217
 40946  007908                     __end_of_InitDefault433Channels:
 40947                           	opt stack 0
 40948                           tosu	equ	0xFFF
 40949                           tosh	equ	0xFFE
 40950                           tosl	equ	0xFFD
 40951                           pclath	equ	0xFFA
 40952                           tblptru	equ	0xFF8
 40953                           tblptrh	equ	0xFF7
 40954                           tblptrl	equ	0xFF6
 40955                           tablat	equ	0xFF5
 40956                           prodh	equ	0xFF4
 40957                           prodl	equ	0xFF3
 40958                           intcon	equ	0xFF2
 40959                           intcon2	equ	0xFF1
 40960                           intcon3	equ	0xFF0
 40961                           indf0	equ	0xFEF
 40962                           postinc0	equ	0xFEE
 40963                           plusw0	equ	0xFEB
 40964                           fsr0h	equ	0xFEA
 40965                           fsr0l	equ	0xFE9
 40966                           wreg	equ	0xFE8
 40967                           postinc1	equ	0xFE6
 40968                           postdec1	equ	0xFE5
 40969                           plusw1	equ	0xFE3
 40970                           fsr1h	equ	0xFE2
 40971                           fsr1l	equ	0xFE1
 40972                           indf2	equ	0xFDF
 40973                           postinc2	equ	0xFDE
 40974                           postdec2	equ	0xFDD
 40975                           plusw2	equ	0xFDB
 40976                           fsr2h	equ	0xFDA
 40977                           fsr2l	equ	0xFD9
 40978                           status	equ	0xFD8
 40979                           
 40980 ;; *************** function _memset *****************
 40981 ;; Defined at:
 40982 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\memset.c"
 40983 ;; Parameters:    Size  Location     Type
 40984 ;;  p1              2    0[BANK0 ] PTR void 
 40985 ;;		 -> AssemblePacket@mhdr(1), aesBuffer(16), Channels(224), macBuffer(271), 
 40986 ;;		 -> loRa.activationParameters(105), loRa(245), GenerateSubkey@l(16), AESCmac@x(16), 
 40987 ;;  c               2    2[BANK0 ] int 
 40988 ;;  n               2    4[BANK0 ] unsigned int 
 40989 ;; Auto vars:     Size  Location     Type
 40990 ;;  p               2    6[BANK0 ] PTR unsigned char 
 40991 ;;		 -> AssemblePacket@mhdr(1), aesBuffer(16), Channels(224), macBuffer(271), 
 40992 ;;		 -> loRa.activationParameters(105), loRa(245), GenerateSubkey@l(16), AESCmac@x(16), 
 40993 ;; Return value:  Size  Location     Type
 40994 ;;                  2    0[BANK0 ] PTR void 
 40995 ;; Registers used:
 40996 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 40997 ;; Tracked objects:
 40998 ;;		On entry : 0/0
 40999 ;;		On exit  : 0/0
 41000 ;;		Unchanged: 0/0
 41001 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 41002 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 41003 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 41004 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 41005 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 41006 ;;Total ram usage:        8 bytes
 41007 ;; Hardware stack levels used:    1
 41008 ;; Hardware stack levels required when called:    7
 41009 ;; This function calls:
 41010 ;;		Nothing
 41011 ;; This function is called by:
 41012 ;;		_AESCmac
 41013 ;;		_GenerateSubkey
 41014 ;;		_AssemblePacket
 41015 ;;		_PrepareJoinRequestFrame
 41016 ;;		_PrepareSessionKeys
 41017 ;;		_AssembleEncryptionBlock
 41018 ;;		_LORAWAN_Reset
 41019 ;;		_InitDefault868Channels
 41020 ;;		_InitDefault433Channels
 41021 ;; This function uses a non-reentrant model
 41022 ;;
 41023                           
 41024                           	psect	text198
 41025  008DAC                     __ptext198:
 41026                           	opt stack 0
 41027  008DAC                     _memset:
 41028                           	opt stack 21
 41029                           
 41030                           ; BSR set to: 0
 41031                           ;incstack = 0
 41032  008DAC  C060  F066         	movff	memset@p1,memset@p
 41033  008DB0  C061  F067         	movff	memset@p1+1,memset@p+1
 41034  008DB4  D009               	goto	l3265
 41035  008DB6                     l8973:
 41036  008DB6  C066  FFD9         	movff	memset@p,fsr2l
 41037  008DBA  C067  FFDA         	movff	memset@p+1,fsr2h
 41038  008DBE  C062  FFDF         	movff	memset@c,indf2
 41039  008DC2  0100               	movlb	0	; () banked
 41040  008DC4  4B66               	infsnz	memset@p& (0+255),f,b
 41041  008DC6  2B67               	incf	(memset@p+1)& (0+255),f,b
 41042  008DC8                     l3265:
 41043                           
 41044                           ; BSR set to: 0
 41045  008DC8  0100               	movlb	0	; () banked
 41046  008DCA  0764               	decf	memset@n& (0+255),f,b
 41047  008DCC  A0D8               	btfss	status,0,c
 41048  008DCE  0765               	decf	(memset@n+1)& (0+255),f,b
 41049  008DD0  2964               	incf	memset@n& (0+255),w,b
 41050  008DD2  E1F1               	bnz	l8973
 41051  008DD4  2965               	incf	(memset@n+1)& (0+255),w,b
 41052  008DD6  B4D8               	btfsc	status,2,c
 41053  008DD8  0012               	return	
 41054  008DDA  D7ED               	goto	l3266
 41055  008DDC                     __end_of_memset:
 41056                           	opt stack 0
 41057                           tosu	equ	0xFFF
 41058                           tosh	equ	0xFFE
 41059                           tosl	equ	0xFFD
 41060                           pclath	equ	0xFFA
 41061                           tblptru	equ	0xFF8
 41062                           tblptrh	equ	0xFF7
 41063                           tblptrl	equ	0xFF6
 41064                           tablat	equ	0xFF5
 41065                           prodh	equ	0xFF4
 41066                           prodl	equ	0xFF3
 41067                           intcon	equ	0xFF2
 41068                           intcon2	equ	0xFF1
 41069                           intcon3	equ	0xFF0
 41070                           indf0	equ	0xFEF
 41071                           postinc0	equ	0xFEE
 41072                           plusw0	equ	0xFEB
 41073                           fsr0h	equ	0xFEA
 41074                           fsr0l	equ	0xFE9
 41075                           wreg	equ	0xFE8
 41076                           postinc1	equ	0xFE6
 41077                           postdec1	equ	0xFE5
 41078                           plusw1	equ	0xFE3
 41079                           fsr1h	equ	0xFE2
 41080                           fsr1l	equ	0xFE1
 41081                           indf2	equ	0xFDF
 41082                           postinc2	equ	0xFDE
 41083                           postdec2	equ	0xFDD
 41084                           plusw2	equ	0xFDB
 41085                           fsr2h	equ	0xFDA
 41086                           fsr2l	equ	0xFD9
 41087                           status	equ	0xFD8
 41088                           
 41089 ;; *************** function _memcpy *****************
 41090 ;; Defined at:
 41091 ;;		line 27 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\memcpy.c"
 41092 ;; Parameters:    Size  Location     Type
 41093 ;;  d1              2    0[BANK0 ] PTR void 
 41094 ;;		 -> UpdateCfList@frequency(4), ComputeMic@mic(4), ExtractMic@mic(4), aesBuffer(16), 
 41095 ;;		 -> radioBuffer(271), LORAWAN_RxDone@computedMic(4), Channels(224), loRa.activationParameters.applicationEui(8), 
 41096 ;;		 -> loRa.activationParameters.deviceEui(8), macBuffer(271), loRa.activationParameters(105), loRa(245), 
 41097 ;;		 -> AESEncodeLoRa@useKey(16), RadioConfiguration(54), AESCmac@x(16), 
 41098 ;;  s1              2    2[BANK0 ] PTR const void 
 41099 ;;		 -> LORAWAN_RxDone@hdr.cfList(16), radioBuffer.cfList(16), tosend(5), appSKey(16), 
 41100 ;;		 -> nwkSKey(16), FskSyncWordBuff(3), UpdateCfList@joinAccept(2), DefaultChannels433(42), 
 41101 ;;		 -> DefaultChannels868(42), AssembleEncryptionBlock@frameCounter(4), ComputeSessionKeys@joinAcceptBuffer(2), Prepare
      +JoinRequestFrame@mic(4), 
 41102 ;;		 -> loRa.devNonce(2), loRa.fCntUp.valueLow(2), aesBuffer(16), radioBuffer(271), 
 41103 ;;		 -> LORAWAN_RxDone@hdr(2), loRa.activationParameters.applicationKey(16), loRa.activationParameters.applicationSessio
      +nKey(16), loRa.activationParameters.networkSessionKey(16), 
 41104 ;;		 -> loRa.activationParameters.deviceAddress(4), loRa.activationParameters.applicationEui(8), loRa.activationParamete
      +rs.deviceEui(8), loRa.activationParameters.mcastApplicationSessionKey(16), 
 41105 ;;		 -> loRa.activationParameters.mcastNetworkSessionKey(16), loRa.activationParameters.mcastDeviceAddress(4), loRa.fCnt
      +Up(4), loRa.activationParameters(105), 
 41106 ;;		 -> loRa(245), RadioConfiguration.syncWord(8), RadioConfiguration(54), AESCmac@y(16), 
 41107 ;;		 -> NULL(0), 
 41108 ;;  n               2    4[BANK0 ] unsigned int 
 41109 ;; Auto vars:     Size  Location     Type
 41110 ;;  s               2    8[BANK0 ] PTR const unsigned char 
 41111 ;;		 -> LORAWAN_RxDone@hdr.cfList(16), radioBuffer.cfList(16), tosend(5), appSKey(16), 
 41112 ;;		 -> nwkSKey(16), FskSyncWordBuff(3), UpdateCfList@joinAccept(2), DefaultChannels433(42), 
 41113 ;;		 -> DefaultChannels868(42), AssembleEncryptionBlock@frameCounter(4), ComputeSessionKeys@joinAcceptBuffer(2), Prepare
      +JoinRequestFrame@mic(4), 
 41114 ;;		 -> loRa.devNonce(2), loRa.fCntUp.valueLow(2), aesBuffer(16), radioBuffer(271), 
 41115 ;;		 -> LORAWAN_RxDone@hdr(2), loRa.activationParameters.applicationKey(16), loRa.activationParameters.applicationSessio
      +nKey(16), loRa.activationParameters.networkSessionKey(16), 
 41116 ;;		 -> loRa.activationParameters.deviceAddress(4), loRa.activationParameters.applicationEui(8), loRa.activationParamete
      +rs.deviceEui(8), loRa.activationParameters.mcastApplicationSessionKey(16), 
 41117 ;;		 -> loRa.activationParameters.mcastNetworkSessionKey(16), loRa.activationParameters.mcastDeviceAddress(4), loRa.fCnt
      +Up(4), loRa.activationParameters(105), 
 41118 ;;		 -> loRa(245), RadioConfiguration.syncWord(8), RadioConfiguration(54), AESCmac@y(16), 
 41119 ;;		 -> NULL(0), 
 41120 ;;  d               2    6[BANK0 ] PTR unsigned char 
 41121 ;;		 -> UpdateCfList@frequency(4), ComputeMic@mic(4), ExtractMic@mic(4), aesBuffer(16), 
 41122 ;;		 -> radioBuffer(271), LORAWAN_RxDone@computedMic(4), Channels(224), loRa.activationParameters.applicationEui(8), 
 41123 ;;		 -> loRa.activationParameters.deviceEui(8), macBuffer(271), loRa.activationParameters(105), loRa(245), 
 41124 ;;		 -> AESEncodeLoRa@useKey(16), RadioConfiguration(54), AESCmac@x(16), 
 41125 ;;  tmp             1   10[BANK0 ] unsigned char 
 41126 ;; Return value:  Size  Location     Type
 41127 ;;                  2    0[BANK0 ] PTR void 
 41128 ;; Registers used:
 41129 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 41130 ;; Tracked objects:
 41131 ;;		On entry : 0/0
 41132 ;;		On exit  : 0/0
 41133 ;;		Unchanged: 0/0
 41134 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 41135 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 41136 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 41137 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 41138 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 41139 ;;Total ram usage:       11 bytes
 41140 ;; Hardware stack levels used:    1
 41141 ;; Hardware stack levels required when called:    7
 41142 ;; This function calls:
 41143 ;;		Nothing
 41144 ;; This function is called by:
 41145 ;;		_AESCmac
 41146 ;;		_RADIO_SetFSKSyncWord
 41147 ;;		_AESEncodeLoRa
 41148 ;;		_LORAWAN_SetNetworkSessionKey
 41149 ;;		_LORAWAN_SetApplicationSessionKey
 41150 ;;		_LORAWAN_RxDone
 41151 ;;		_AssemblePacket
 41152 ;;		_PrepareJoinRequestFrame
 41153 ;;		_PrepareSessionKeys
 41154 ;;		_AssembleEncryptionBlock
 41155 ;;		_ExtractMic
 41156 ;;		_ComputeMic
 41157 ;;		_UpdateCfList
 41158 ;;		_InitDefault868Channels
 41159 ;;		_InitDefault433Channels
 41160 ;;		_RADIO_GetData
 41161 ;;		_RADIO_GetFSKSyncWord
 41162 ;;		_LORAWAN_SetMcastNetworkSessionKey
 41163 ;;		_LORAWAN_SetMcastApplicationSessionKey
 41164 ;;		_LORAWAN_GetMcastApplicationSessionKey
 41165 ;;		_LORAWAN_GetMcastNetworkSessionKey
 41166 ;;		_LORAWAN_SetDeviceEui
 41167 ;;		_LORAWAN_GetDeviceEui
 41168 ;;		_LORAWAN_SetApplicationEui
 41169 ;;		_LORAWAN_GetApplicationEui
 41170 ;;		_LORAWAN_GetNetworkSessionKey
 41171 ;;		_LORAWAN_GetApplicationSessionKey
 41172 ;;		_LORAWAN_SetApplicationKey
 41173 ;;		_LORAWAN_GetApplicationKey
 41174 ;; This function uses a non-reentrant model
 41175 ;;
 41176                           
 41177                           	psect	text199
 41178  0082BA                     __ptext199:
 41179                           	opt stack 0
 41180  0082BA                     _memcpy:
 41181                           	opt stack 22
 41182                           
 41183                           ; BSR set to: 0
 41184                           ;incstack = 0
 41185  0082BA  C062  F068         	movff	memcpy@s1,memcpy@s
 41186  0082BE  C063  F069         	movff	memcpy@s1+1,memcpy@s+1
 41187  0082C2  C060  F066         	movff	memcpy@d1,memcpy@d
 41188  0082C6  C061  F067         	movff	memcpy@d1+1,memcpy@d+1
 41189  0082CA  D01D               	goto	l3259
 41190  0082CC                     l8761:
 41191  0082CC  C068  FFF6         	movff	memcpy@s,tblptrl
 41192  0082D0  C069  FFF7         	movff	memcpy@s+1,tblptrh
 41193  0082D4  0E00               	movlw	low (__mediumconst shr (0+16))
 41194  0082D6  6EF8               	movwf	tblptru,c
 41195  0082D8  0E0F               	movlw	(high __ramtop+-1)
 41196  0082DA  64F7               	cpfsgt	tblptrh,c
 41197  0082DC  D003               	bra	u7677
 41198  0082DE  0008               	tblrd		*
 41199  0082E0  50F5               	movf	tablat,w,c
 41200  0082E2  D005               	bra	u7670
 41201  0082E4                     u7677:
 41202  0082E4  CFF6 FFE9          	movff	tblptrl,fsr0l
 41203  0082E8  CFF7 FFEA          	movff	tblptrh,fsr0h
 41204  0082EC  50EF               	movf	indf0,w,c
 41205  0082EE                     u7670:
 41206  0082EE  0100               	movlb	0	; () banked
 41207  0082F0  6F6A               	movwf	memcpy@tmp& (0+255),b
 41208                           
 41209                           ; BSR set to: 0
 41210  0082F2  4B68               	infsnz	memcpy@s& (0+255),f,b
 41211  0082F4  2B69               	incf	(memcpy@s+1)& (0+255),f,b
 41212                           
 41213                           ; BSR set to: 0
 41214  0082F6  C066  FFD9         	movff	memcpy@d,fsr2l
 41215  0082FA  C067  FFDA         	movff	memcpy@d+1,fsr2h
 41216  0082FE  C06A  FFDF         	movff	memcpy@tmp,indf2
 41217                           
 41218                           ; BSR set to: 0
 41219  008302  4B66               	infsnz	memcpy@d& (0+255),f,b
 41220  008304  2B67               	incf	(memcpy@d+1)& (0+255),f,b
 41221  008306                     l3259:
 41222                           
 41223                           ; BSR set to: 0
 41224  008306  0100               	movlb	0	; () banked
 41225  008308  0764               	decf	memcpy@n& (0+255),f,b
 41226  00830A  A0D8               	btfss	status,0,c
 41227  00830C  0765               	decf	(memcpy@n+1)& (0+255),f,b
 41228  00830E  2964               	incf	memcpy@n& (0+255),w,b
 41229  008310  E1DD               	bnz	l8761
 41230  008312  2965               	incf	(memcpy@n+1)& (0+255),w,b
 41231  008314  B4D8               	btfsc	status,2,c
 41232  008316  0012               	return	
 41233  008318  D7D9               	goto	l3260
 41234  00831A                     __end_of_memcpy:
 41235                           	opt stack 0
 41236                           tosu	equ	0xFFF
 41237                           tosh	equ	0xFFE
 41238                           tosl	equ	0xFFD
 41239                           pclath	equ	0xFFA
 41240                           tblptru	equ	0xFF8
 41241                           tblptrh	equ	0xFF7
 41242                           tblptrl	equ	0xFF6
 41243                           tablat	equ	0xFF5
 41244                           prodh	equ	0xFF4
 41245                           prodl	equ	0xFF3
 41246                           intcon	equ	0xFF2
 41247                           intcon2	equ	0xFF1
 41248                           intcon3	equ	0xFF0
 41249                           indf0	equ	0xFEF
 41250                           postinc0	equ	0xFEE
 41251                           plusw0	equ	0xFEB
 41252                           fsr0h	equ	0xFEA
 41253                           fsr0l	equ	0xFE9
 41254                           wreg	equ	0xFE8
 41255                           postinc1	equ	0xFE6
 41256                           postdec1	equ	0xFE5
 41257                           plusw1	equ	0xFE3
 41258                           fsr1h	equ	0xFE2
 41259                           fsr1l	equ	0xFE1
 41260                           indf2	equ	0xFDF
 41261                           postinc2	equ	0xFDE
 41262                           postdec2	equ	0xFDD
 41263                           plusw2	equ	0xFDB
 41264                           fsr2h	equ	0xFDA
 41265                           fsr2l	equ	0xFD9
 41266                           status	equ	0xFD8
 41267                           
 41268 ;; *************** function _CreateAllSoftwareTimers *****************
 41269 ;; Defined at:
 41270 ;;		line 937 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 41271 ;; Parameters:    Size  Location     Type
 41272 ;;		None
 41273 ;; Auto vars:     Size  Location     Type
 41274 ;;		None
 41275 ;; Return value:  Size  Location     Type
 41276 ;;                  1    wreg      void 
 41277 ;; Registers used:
 41278 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 41279 ;; Tracked objects:
 41280 ;;		On entry : 0/0
 41281 ;;		On exit  : 0/0
 41282 ;;		Unchanged: 0/0
 41283 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 41284 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 41285 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 41286 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 41287 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 41288 ;;Total ram usage:        0 bytes
 41289 ;; Hardware stack levels used:    1
 41290 ;; Hardware stack levels required when called:    8
 41291 ;; This function calls:
 41292 ;;		_SwTimerCreate
 41293 ;; This function is called by:
 41294 ;;		_LORAWAN_Init
 41295 ;; This function uses a non-reentrant model
 41296 ;;
 41297                           
 41298                           	psect	text200
 41299  008738                     __ptext200:
 41300                           	opt stack 0
 41301  008738                     _CreateAllSoftwareTimers:
 41302                           	opt stack 21
 41303                           
 41304                           ;lorawan_eu.c: 939: loRa.joinAccept1TimerId = SwTimerCreate();
 41305                           
 41306                           ; BSR set to: 0
 41307                           ;incstack = 0
 41308  008738  EC6D  F03B         	call	_SwTimerCreate	;wreg free
 41309  00873C  0102               	movlb	2	; () banked
 41310  00873E  6FE8               	movwf	(_loRa+226)& (0+255),b
 41311                           
 41312                           ;lorawan_eu.c: 940: loRa.joinAccept2TimerId = SwTimerCreate();
 41313  008740  EC6D  F03B         	call	_SwTimerCreate	;wreg free
 41314  008744  0102               	movlb	2	; () banked
 41315  008746  6FE9               	movwf	(_loRa+227)& (0+255),b
 41316                           
 41317                           ;lorawan_eu.c: 941: loRa.receiveWindow1TimerId = SwTimerCreate();
 41318  008748  EC6D  F03B         	call	_SwTimerCreate	;wreg free
 41319  00874C  0102               	movlb	2	; () banked
 41320  00874E  6FEA               	movwf	(_loRa+228)& (0+255),b
 41321                           
 41322                           ;lorawan_eu.c: 942: loRa.receiveWindow2TimerId = SwTimerCreate();
 41323  008750  EC6D  F03B         	call	_SwTimerCreate	;wreg free
 41324  008754  0102               	movlb	2	; () banked
 41325  008756  6FEB               	movwf	(_loRa+229)& (0+255),b
 41326                           
 41327                           ;lorawan_eu.c: 943: loRa.linkCheckTimerId = SwTimerCreate();
 41328  008758  EC6D  F03B         	call	_SwTimerCreate	;wreg free
 41329  00875C  0102               	movlb	2	; () banked
 41330  00875E  6FED               	movwf	(_loRa+231)& (0+255),b
 41331                           
 41332                           ;lorawan_eu.c: 944: loRa.ackTimeoutTimerId = SwTimerCreate();
 41333  008760  EC6D  F03B         	call	_SwTimerCreate	;wreg free
 41334  008764  0102               	movlb	2	; () banked
 41335  008766  6FEE               	movwf	(_loRa+232)& (0+255),b
 41336                           
 41337                           ;lorawan_eu.c: 945: loRa.automaticReplyTimerId = SwTimerCreate();
 41338  008768  EC6D  F03B         	call	_SwTimerCreate	;wreg free
 41339  00876C  0102               	movlb	2	; () banked
 41340  00876E  6FEC               	movwf	(_loRa+230)& (0+255),b
 41341                           
 41342                           ;lorawan_eu.c: 946: loRa.unconfirmedRetransmisionTimerId = SwTimerCreate();
 41343  008770  EC6D  F03B         	call	_SwTimerCreate	;wreg free
 41344  008774  0102               	movlb	2	; () banked
 41345  008776  6FF0               	movwf	(_loRa+234)& (0+255),b
 41346                           
 41347                           ;lorawan_eu.c: 947: loRa.abpJoinTimerId = SwTimerCreate();
 41348  008778  EC6D  F03B         	call	_SwTimerCreate	;wreg free
 41349  00877C  0102               	movlb	2	; () banked
 41350  00877E  6FF9               	movwf	(_loRa+243)& (0+255),b
 41351                           
 41352                           ;lorawan_eu.c: 948: loRa.dutyCycleTimerId = SwTimerCreate();
 41353  008780  EC6D  F03B         	call	_SwTimerCreate	;wreg free
 41354  008784  0102               	movlb	2	; () banked
 41355  008786  6FEF               	movwf	(_loRa+233)& (0+255),b
 41356                           
 41357                           ; BSR set to: 2
 41358  008788  0012               	return		;funcret
 41359  00878A                     __end_of_CreateAllSoftwareTimers:
 41360                           	opt stack 0
 41361                           tosu	equ	0xFFF
 41362                           tosh	equ	0xFFE
 41363                           tosl	equ	0xFFD
 41364                           pclath	equ	0xFFA
 41365                           tblptru	equ	0xFF8
 41366                           tblptrh	equ	0xFF7
 41367                           tblptrl	equ	0xFF6
 41368                           tablat	equ	0xFF5
 41369                           prodh	equ	0xFF4
 41370                           prodl	equ	0xFF3
 41371                           intcon	equ	0xFF2
 41372                           intcon2	equ	0xFF1
 41373                           intcon3	equ	0xFF0
 41374                           indf0	equ	0xFEF
 41375                           postinc0	equ	0xFEE
 41376                           plusw0	equ	0xFEB
 41377                           fsr0h	equ	0xFEA
 41378                           fsr0l	equ	0xFE9
 41379                           wreg	equ	0xFE8
 41380                           postinc1	equ	0xFE6
 41381                           postdec1	equ	0xFE5
 41382                           plusw1	equ	0xFE3
 41383                           fsr1h	equ	0xFE2
 41384                           fsr1l	equ	0xFE1
 41385                           indf2	equ	0xFDF
 41386                           postinc2	equ	0xFDE
 41387                           postdec2	equ	0xFDD
 41388                           plusw2	equ	0xFDB
 41389                           fsr2h	equ	0xFDA
 41390                           fsr2l	equ	0xFD9
 41391                           status	equ	0xFD8
 41392                           
 41393 ;; *************** function _SwTimerCreate *****************
 41394 ;; Defined at:
 41395 ;;		line 154 in file "mcc_generated_files/LoRaWAN/sw_timer.c"
 41396 ;; Parameters:    Size  Location     Type
 41397 ;;		None
 41398 ;; Auto vars:     Size  Location     Type
 41399 ;;  retVal          1    0[BANK0 ] unsigned char 
 41400 ;; Return value:  Size  Location     Type
 41401 ;;                  1    wreg      unsigned char 
 41402 ;; Registers used:
 41403 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 41404 ;; Tracked objects:
 41405 ;;		On entry : 0/0
 41406 ;;		On exit  : 0/0
 41407 ;;		Unchanged: 0/0
 41408 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 41409 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 41410 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 41411 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 41412 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 41413 ;;Total ram usage:        1 bytes
 41414 ;; Hardware stack levels used:    1
 41415 ;; Hardware stack levels required when called:    7
 41416 ;; This function calls:
 41417 ;;		Nothing
 41418 ;; This function is called by:
 41419 ;;		_RADIO_Init
 41420 ;;		_CreateAllSoftwareTimers
 41421 ;; This function uses a non-reentrant model
 41422 ;;
 41423                           
 41424                           	psect	text201
 41425  0076DA                     __ptext201:
 41426                           	opt stack 0
 41427  0076DA                     _SwTimerCreate:
 41428                           	opt stack 21
 41429                           
 41430                           ;sw_timer.c: 156: uint8_t retVal;
 41431                           ;sw_timer.c: 157: if (allocatedTimers < 20)
 41432                           
 41433                           ; BSR set to: 2
 41434                           ;incstack = 0
 41435  0076DA  0E14               	movlw	20
 41436  0076DC  0101               	movlb	1	; () banked
 41437  0076DE  6154               	cpfslt	_allocatedTimers& (0+255),b	;volatile
 41438  0076E0  D040               	goto	l1549
 41439                           
 41440                           ; BSR set to: 1
 41441                           ;sw_timer.c: 158: {
 41442                           ;sw_timer.c: 159: (INTCONbits.GIE = 0);
 41443  0076E2  9EF2               	bcf	intcon,7,c	;volatile
 41444                           
 41445                           ;sw_timer.c: 160: retVal = allocatedTimers;
 41446  0076E4  C154  F060         	movff	_allocatedTimers,SwTimerCreate@retVal	;volatile
 41447                           
 41448                           ; BSR set to: 1
 41449                           ;sw_timer.c: 161: swTimers[retVal].running = 0;
 41450  0076E8  0100               	movlb	0	; () banked
 41451  0076EA  5160               	movf	SwTimerCreate@retVal& (0+255),w,b
 41452  0076EC  0D08               	mullw	8
 41453  0076EE  0E04               	movlw	4
 41454  0076F0  26F3               	addwf	prodl,f,c
 41455  0076F2  0E00               	movlw	0
 41456  0076F4  22F4               	addwfc	prodh,f,c
 41457  0076F6  0E00               	movlw	low _swTimers
 41458  0076F8  24F3               	addwf	prodl,w,c
 41459  0076FA  6ED9               	movwf	fsr2l,c
 41460  0076FC  0E03               	movlw	high _swTimers
 41461  0076FE  20F4               	addwfc	prodh,w,c
 41462  007700  6EDA               	movwf	fsr2h,c
 41463  007702  0E00               	movlw	0
 41464  007704  6EDF               	movwf	indf2,c
 41465                           
 41466                           ;sw_timer.c: 162: swTimers[retVal].ticksRemaining = 0;
 41467  007706  5160               	movf	SwTimerCreate@retVal& (0+255),w,b
 41468  007708  0D08               	mullw	8
 41469  00770A  0E00               	movlw	low _swTimers
 41470  00770C  24F3               	addwf	prodl,w,c
 41471  00770E  6ED9               	movwf	fsr2l,c
 41472  007710  0E03               	movlw	high _swTimers
 41473  007712  20F4               	addwfc	prodh,w,c
 41474  007714  6EDA               	movwf	fsr2h,c
 41475  007716  6ADE               	clrf	postinc2,c
 41476  007718  6ADE               	clrf	postinc2,c
 41477  00771A  6ADE               	clrf	postinc2,c
 41478  00771C  6ADD               	clrf	postdec2,c
 41479                           
 41480                           ;sw_timer.c: 163: swTimers[retVal].callbackParameter = 0;
 41481  00771E  5160               	movf	SwTimerCreate@retVal& (0+255),w,b
 41482  007720  0D08               	mullw	8
 41483  007722  0E05               	movlw	5
 41484  007724  26F3               	addwf	prodl,f,c
 41485  007726  0E00               	movlw	0
 41486  007728  22F4               	addwfc	prodh,f,c
 41487  00772A  0E00               	movlw	low _swTimers
 41488  00772C  24F3               	addwf	prodl,w,c
 41489  00772E  6ED9               	movwf	fsr2l,c
 41490  007730  0E03               	movlw	high _swTimers
 41491  007732  20F4               	addwfc	prodh,w,c
 41492  007734  6EDA               	movwf	fsr2h,c
 41493  007736  0E00               	movlw	0
 41494  007738  6EDF               	movwf	indf2,c
 41495                           
 41496                           ;sw_timer.c: 164: swTimers[retVal].callback = (0);
 41497  00773A  5160               	movf	SwTimerCreate@retVal& (0+255),w,b
 41498  00773C  0D08               	mullw	8
 41499  00773E  0E06               	movlw	6
 41500  007740  26F3               	addwf	prodl,f,c
 41501  007742  0E00               	movlw	0
 41502  007744  22F4               	addwfc	prodh,f,c
 41503  007746  0E00               	movlw	low _swTimers
 41504  007748  24F3               	addwf	prodl,w,c
 41505  00774A  6ED9               	movwf	fsr2l,c
 41506  00774C  0E03               	movlw	high _swTimers
 41507  00774E  20F4               	addwfc	prodh,w,c
 41508  007750  6EDA               	movwf	fsr2h,c
 41509  007752  0E00               	movlw	0
 41510  007754  6EDE               	movwf	postinc2,c
 41511  007756  0E00               	movlw	0
 41512  007758  6EDD               	movwf	postdec2,c
 41513                           
 41514                           ; BSR set to: 0
 41515                           ;sw_timer.c: 165: allocatedTimers++;
 41516  00775A  0101               	movlb	1	; () banked
 41517  00775C  2B54               	incf	_allocatedTimers& (0+255),f,b	;volatile
 41518                           
 41519                           ; BSR set to: 1
 41520                           ;sw_timer.c: 166: (INTCONbits.GIE = 1);
 41521  00775E  8EF2               	bsf	intcon,7,c	;volatile
 41522                           
 41523                           ;sw_timer.c: 167: }
 41524  007760  D001               	goto	l1553
 41525  007762                     l1549:
 41526                           
 41527                           ;sw_timer.c: 171: {
 41528                           
 41529                           ; BSR set to: 1
 41530                           ;sw_timer.c: 168: else
 41531                           ;sw_timer.c: 169: {
 41532                           ;sw_timer.c: 170: while(1)
 41533  007762  D7FF               	goto	l1549
 41534  007764                     l1553:
 41535                           
 41536                           ;sw_timer.c: 175: }
 41537                           ;sw_timer.c: 176: }
 41538                           ;sw_timer.c: 177: return retVal;
 41539  007764  0100               	movlb	0	; () banked
 41540  007766  5160               	movf	SwTimerCreate@retVal& (0+255),w,b
 41541  007768  0012               	return	
 41542  00776A                     __end_of_SwTimerCreate:
 41543                           	opt stack 0
 41544                           tosu	equ	0xFFF
 41545                           tosh	equ	0xFFE
 41546                           tosl	equ	0xFFD
 41547                           pclath	equ	0xFFA
 41548                           tblptru	equ	0xFF8
 41549                           tblptrh	equ	0xFF7
 41550                           tblptrl	equ	0xFF6
 41551                           tablat	equ	0xFF5
 41552                           prodh	equ	0xFF4
 41553                           prodl	equ	0xFF3
 41554                           intcon	equ	0xFF2
 41555                           intcon2	equ	0xFF1
 41556                           intcon3	equ	0xFF0
 41557                           indf0	equ	0xFEF
 41558                           postinc0	equ	0xFEE
 41559                           plusw0	equ	0xFEB
 41560                           fsr0h	equ	0xFEA
 41561                           fsr0l	equ	0xFE9
 41562                           wreg	equ	0xFE8
 41563                           postinc1	equ	0xFE6
 41564                           postdec1	equ	0xFE5
 41565                           plusw1	equ	0xFE3
 41566                           fsr1h	equ	0xFE2
 41567                           fsr1l	equ	0xFE1
 41568                           indf2	equ	0xFDF
 41569                           postinc2	equ	0xFDE
 41570                           postdec2	equ	0xFDD
 41571                           plusw2	equ	0xFDB
 41572                           fsr2h	equ	0xFDA
 41573                           fsr2l	equ	0xFD9
 41574                           status	equ	0xFD8
 41575                           
 41576 ;; *************** function _EUSART1_Write *****************
 41577 ;; Defined at:
 41578 ;;		line 202 in file "mcc_generated_files/eusart1.c"
 41579 ;; Parameters:    Size  Location     Type
 41580 ;;  txData          1    wreg     unsigned char 
 41581 ;; Auto vars:     Size  Location     Type
 41582 ;;  txData          1    0[BANK0 ] unsigned char 
 41583 ;; Return value:  Size  Location     Type
 41584 ;;                  1    wreg      void 
 41585 ;; Registers used:
 41586 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 41587 ;; Tracked objects:
 41588 ;;		On entry : 0/0
 41589 ;;		On exit  : 0/0
 41590 ;;		Unchanged: 0/0
 41591 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 41592 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 41593 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 41594 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 41595 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 41596 ;;Total ram usage:        1 bytes
 41597 ;; Hardware stack levels used:    1
 41598 ;; Hardware stack levels required when called:    7
 41599 ;; This function calls:
 41600 ;;		Nothing
 41601 ;; This function is called by:
 41602 ;;		_main
 41603 ;; This function uses a non-reentrant model
 41604 ;;
 41605                           
 41606                           	psect	text202
 41607  008BD6                     __ptext202:
 41608                           	opt stack 0
 41609  008BD6                     _EUSART1_Write:
 41610                           	opt stack 23
 41611                           
 41612                           ; BSR set to: 0
 41613                           ;incstack = 0
 41614                           ;EUSART1_Write@txData stored from wreg
 41615  008BD6  0100               	movlb	0	; () banked
 41616  008BD8  6F60               	movwf	EUSART1_Write@txData& (0+255),b
 41617  008BDA                     
 41618                           ;eusart1.c: 205: {
 41619                           
 41620                           ;eusart1.c: 204: while(0 == eusart1TxBufferRemaining)
 41621  008BDA  0101               	movlb	1	; () banked
 41622  008BDC  51FF               	movf	_eusart1TxBufferRemaining& (0+255),w,b	;volatile
 41623  008BDE  B4D8               	btfsc	status,2,c
 41624  008BE0  D7FC               	goto	l12909
 41625                           
 41626                           ; BSR set to: 1
 41627                           ;eusart1.c: 206: }
 41628                           ;eusart1.c: 208: if(0 == PIE1bits.TX1IE)
 41629  008BE2  B89D               	btfsc	3997,4,c	;volatile
 41630  008BE4  D003               	goto	l2540
 41631                           
 41632                           ; BSR set to: 1
 41633                           ;eusart1.c: 209: {
 41634                           ;eusart1.c: 210: TXREG1 = txData;
 41635  008BE6  C060  FFAD         	movff	EUSART1_Write@txData,4013	;volatile
 41636                           
 41637                           ;eusart1.c: 211: }
 41638  008BEA  D012               	goto	l2541
 41639  008BEC                     l2540:
 41640                           
 41641                           ; BSR set to: 1
 41642                           ;eusart1.c: 212: else
 41643                           ;eusart1.c: 213: {
 41644                           ;eusart1.c: 214: PIE1bits.TX1IE = 0;
 41645  008BEC  989D               	bcf	3997,4,c	;volatile
 41646                           
 41647                           ; BSR set to: 1
 41648                           ;eusart1.c: 215: eusart1TxBuffer[eusart1TxHead++] = txData;
 41649  008BEE  5051               	movf	_eusart1TxHead,w,c	;volatile
 41650  008BF0  0D01               	mullw	1
 41651  008BF2  0E51               	movlw	low _eusart1TxBuffer
 41652  008BF4  24F3               	addwf	prodl,w,c
 41653  008BF6  6ED9               	movwf	fsr2l,c
 41654  008BF8  0E01               	movlw	high _eusart1TxBuffer
 41655  008BFA  20F4               	addwfc	prodh,w,c
 41656  008BFC  6EDA               	movwf	fsr2h,c
 41657  008BFE  C060  FFDF         	movff	EUSART1_Write@txData,indf2
 41658                           
 41659                           ; BSR set to: 1
 41660  008C02  2A51               	incf	_eusart1TxHead,f,c	;volatile
 41661                           
 41662                           ; BSR set to: 1
 41663                           ;eusart1.c: 216: if(sizeof(eusart1TxBuffer) <= eusart1TxHead)
 41664  008C04  5051               	movf	_eusart1TxHead,w,c	;volatile
 41665  008C06  B4D8               	btfsc	status,2,c
 41666  008C08  D002               	goto	l2542
 41667                           
 41668                           ; BSR set to: 1
 41669                           ;eusart1.c: 217: {
 41670                           ;eusart1.c: 218: eusart1TxHead = 0;
 41671  008C0A  0E00               	movlw	0
 41672  008C0C  6E51               	movwf	_eusart1TxHead,c	;volatile
 41673  008C0E                     l2542:
 41674                           
 41675                           ; BSR set to: 1
 41676                           ;eusart1.c: 219: }
 41677                           ;eusart1.c: 220: eusart1TxBufferRemaining--;
 41678                           
 41679                           ; BSR set to: 1
 41680  008C0E  07FF               	decf	_eusart1TxBufferRemaining& (0+255),f,b	;volatile
 41681  008C10                     l2541:
 41682                           
 41683                           ; BSR set to: 1
 41684                           ;eusart1.c: 221: }
 41685                           ;eusart1.c: 222: PIE1bits.TX1IE = 1;
 41686                           
 41687                           ; BSR set to: 1
 41688  008C10  889D               	bsf	3997,4,c	;volatile
 41689                           
 41690                           ; BSR set to: 1
 41691  008C12  0012               	return		;funcret
 41692  008C14                     __end_of_EUSART1_Write:
 41693                           	opt stack 0
 41694                           tosu	equ	0xFFF
 41695                           tosh	equ	0xFFE
 41696                           tosl	equ	0xFFD
 41697                           pclath	equ	0xFFA
 41698                           tblptru	equ	0xFF8
 41699                           tblptrh	equ	0xFF7
 41700                           tblptrl	equ	0xFF6
 41701                           tablat	equ	0xFF5
 41702                           prodh	equ	0xFF4
 41703                           prodl	equ	0xFF3
 41704                           intcon	equ	0xFF2
 41705                           intcon2	equ	0xFF1
 41706                           intcon3	equ	0xFF0
 41707                           indf0	equ	0xFEF
 41708                           postinc0	equ	0xFEE
 41709                           plusw0	equ	0xFEB
 41710                           fsr0h	equ	0xFEA
 41711                           fsr0l	equ	0xFE9
 41712                           wreg	equ	0xFE8
 41713                           postinc1	equ	0xFE6
 41714                           postdec1	equ	0xFE5
 41715                           plusw1	equ	0xFE3
 41716                           fsr1h	equ	0xFE2
 41717                           fsr1l	equ	0xFE1
 41718                           indf2	equ	0xFDF
 41719                           postinc2	equ	0xFDE
 41720                           postdec2	equ	0xFDD
 41721                           plusw2	equ	0xFDB
 41722                           fsr2h	equ	0xFDA
 41723                           fsr2l	equ	0xFD9
 41724                           status	equ	0xFD8
 41725                           
 41726 ;; *************** function _INTERRUPT_InterruptManager *****************
 41727 ;; Defined at:
 41728 ;;		line 58 in file "mcc_generated_files/interrupt_manager.c"
 41729 ;; Parameters:    Size  Location     Type
 41730 ;;		None
 41731 ;; Auto vars:     Size  Location     Type
 41732 ;;		None
 41733 ;; Return value:  Size  Location     Type
 41734 ;;                  1    wreg      void 
 41735 ;; Registers used:
 41736 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
 41737 ;; Tracked objects:
 41738 ;;		On entry : 0/0
 41739 ;;		On exit  : 0/0
 41740 ;;		Unchanged: 0/0
 41741 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 41742 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 41743 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 41744 ;;      Temps:         10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 41745 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 41746 ;;Total ram usage:       10 bytes
 41747 ;; Hardware stack levels used:    1
 41748 ;; Hardware stack levels required when called:    6
 41749 ;; This function calls:
 41750 ;;		Absolute function
 41751 ;;		_EUSART1_Receive_ISR
 41752 ;;		_EUSART1_Transmit_ISR
 41753 ;;		_INT1_ISR
 41754 ;;		_INT2_ISR
 41755 ;;		_PIN_MANAGER_IOC
 41756 ;;		_TMR1_ISR
 41757 ;; This function is called by:
 41758 ;;		Interrupt level 2
 41759 ;; This function uses a non-reentrant model
 41760 ;;
 41761                           
 41762                           	psect	intcode
 41763  000008                     __pintcode:
 41764                           	opt stack 0
 41765  000008                     _INTERRUPT_InterruptManager:
 41766                           	opt stack 12
 41767                           
 41768                           ; BSR set to: 1
 41769                           ;incstack = 0
 41770  000008  CFFA F034          	movff	pclath,??_INTERRUPT_InterruptManager
 41771  00000C  CFFB F035          	movff	pclatu,??_INTERRUPT_InterruptManager+1
 41772  000010  CFE9 F036          	movff	fsr0l,??_INTERRUPT_InterruptManager+2
 41773  000014  CFEA F037          	movff	fsr0h,??_INTERRUPT_InterruptManager+3
 41774  000018  CFE1 F038          	movff	fsr1l,??_INTERRUPT_InterruptManager+4
 41775  00001C  CFE2 F039          	movff	fsr1h,??_INTERRUPT_InterruptManager+5
 41776  000020  CFD9 F03A          	movff	fsr2l,??_INTERRUPT_InterruptManager+6
 41777  000024  CFDA F03B          	movff	fsr2h,??_INTERRUPT_InterruptManager+7
 41778  000028  CFF3 F03C          	movff	prodl,??_INTERRUPT_InterruptManager+8
 41779  00002C  CFF4 F03D          	movff	prodh,??_INTERRUPT_InterruptManager+9
 41780  000030  EE1A  F028         	lfsr	1,___inthi_sp
 41781                           
 41782                           ;interrupt_manager.c: 61: if(INTCON3bits.INT1IE == 1 && INTCON3bits.INT1IF == 1)
 41783  000034  B6F0               	btfsc	intcon3,3,c	;volatile
 41784  000036  A0F0               	btfss	intcon3,0,c	;volatile
 41785  000038  D003               	goto	i2l2244
 41786                           
 41787                           ;interrupt_manager.c: 62: {
 41788                           ;interrupt_manager.c: 63: INT1_ISR();
 41789  00003A  ECCB  F04A         	call	_INT1_ISR	;wreg free
 41790                           
 41791                           ;interrupt_manager.c: 64: }
 41792  00003E  D031               	goto	i2u1714_49
 41793  000040                     i2l2244:
 41794                           
 41795                           ;interrupt_manager.c: 65: else if(INTCON3bits.INT2IE == 1 && INTCON3bits.INT2IF == 1)
 41796  000040  B8F0               	btfsc	intcon3,4,c	;volatile
 41797  000042  A2F0               	btfss	intcon3,1,c	;volatile
 41798  000044  D003               	goto	i2l2246
 41799                           
 41800                           ;interrupt_manager.c: 66: {
 41801                           ;interrupt_manager.c: 67: INT2_ISR();
 41802  000046  ECC7  F04A         	call	_INT2_ISR	;wreg free
 41803                           
 41804                           ;interrupt_manager.c: 68: }
 41805  00004A  D02B               	goto	i2u1714_49
 41806  00004C                     i2l2246:
 41807                           
 41808                           ;interrupt_manager.c: 69: else if(INTCONbits.RBIE == 1 && INTCONbits.RBIF == 1)
 41809  00004C  B6F2               	btfsc	intcon,3,c	;volatile
 41810  00004E  A0F2               	btfss	intcon,0,c	;volatile
 41811  000050  D003               	goto	i2l2248
 41812                           
 41813                           ;interrupt_manager.c: 70: {
 41814                           ;interrupt_manager.c: 71: PIN_MANAGER_IOC();
 41815  000052  ECBE  F04A         	call	_PIN_MANAGER_IOC	;wreg free
 41816                           
 41817                           ;interrupt_manager.c: 72: }
 41818  000056  D025               	goto	i2u1714_49
 41819  000058                     i2l2248:
 41820                           
 41821                           ;interrupt_manager.c: 73: else if(INTCONbits.PEIE == 1)
 41822  000058  ACF2               	btfss	intcon,6,c	;volatile
 41823  00005A  D023               	goto	i2u1714_49
 41824                           
 41825                           ;interrupt_manager.c: 74: {
 41826                           ;interrupt_manager.c: 75: if(PIE1bits.TMR1IE == 1 && PIR1bits.TMR1IF == 1)
 41827  00005C  B09D               	btfsc	3997,0,c	;volatile
 41828  00005E  A09E               	btfss	3998,0,c	;volatile
 41829  000060  D002               	goto	i2l2251
 41830                           
 41831                           ;interrupt_manager.c: 76: {
 41832                           ;interrupt_manager.c: 77: TMR1_ISR();
 41833  000062  ECE4  F049         	call	_TMR1_ISR	;wreg free
 41834  000066                     i2l2251:
 41835                           
 41836                           ;interrupt_manager.c: 78: }
 41837                           ;interrupt_manager.c: 79: if(PIE1bits.TX1IE == 1 && PIR1bits.TX1IF == 1)
 41838  000066  B89D               	btfsc	3997,4,c	;volatile
 41839  000068  A89E               	btfss	3998,4,c	;volatile
 41840  00006A  D00C               	goto	i2u1711_49
 41841                           
 41842                           ;interrupt_manager.c: 80: {
 41843                           ;interrupt_manager.c: 81: EUSART1_TxDefaultInterruptHandler();
 41844  00006C  D801               	call	i2u1711_48
 41845  00006E  D00A               	goto	i2u1711_49
 41846  000070                     i2u1711_48:
 41847  000070  0005               	push	
 41848  000072  6EFA               	movwf	pclath,c
 41849  000074  0103               	movlb	3	; () banked
 41850  000076  51F1               	movf	_EUSART1_TxDefaultInterruptHandler& (0+255),w,b
 41851  000078  6EFD               	movwf	tosl,c
 41852  00007A  51F2               	movf	(_EUSART1_TxDefaultInterruptHandler+1)& (0+255),w,b
 41853  00007C  6EFE               	movwf	tosh,c
 41854  00007E  6AFF               	clrf	tosu,c
 41855  000080  50FA               	movf	pclath,w,c
 41856  000082  0012               	return		;indir
 41857  000084                     i2u1711_49:
 41858                           
 41859                           ;interrupt_manager.c: 82: }
 41860                           ;interrupt_manager.c: 83: if(PIE1bits.RC1IE == 1 && PIR1bits.RC1IF == 1)
 41861  000084  BA9D               	btfsc	3997,5,c	;volatile
 41862  000086  AA9E               	btfss	3998,5,c	;volatile
 41863  000088  D00C               	goto	i2u1714_49
 41864                           
 41865                           ;interrupt_manager.c: 84: {
 41866                           ;interrupt_manager.c: 85: EUSART1_RxDefaultInterruptHandler();
 41867  00008A  D801               	call	i2u1714_48
 41868  00008C  D00A               	goto	i2u1714_49
 41869  00008E                     i2u1714_48:
 41870  00008E  0005               	push	
 41871  000090  6EFA               	movwf	pclath,c
 41872  000092  0103               	movlb	3	; () banked
 41873  000094  51EF               	movf	_EUSART1_RxDefaultInterruptHandler& (0+255),w,b
 41874  000096  6EFD               	movwf	tosl,c
 41875  000098  51F0               	movf	(_EUSART1_RxDefaultInterruptHandler+1)& (0+255),w,b
 41876  00009A  6EFE               	movwf	tosh,c
 41877  00009C  6AFF               	clrf	tosu,c
 41878  00009E  50FA               	movf	pclath,w,c
 41879  0000A0  0012               	return		;indir
 41880  0000A2                     i2u1714_49:
 41881                           
 41882                           ;interrupt_manager.c: 92: else
 41883                           ;interrupt_manager.c: 93: {
 41884                           
 41885                           ;interrupt_manager.c: 90: }
 41886                           ;interrupt_manager.c: 91: }
 41887                           
 41888                           ;interrupt_manager.c: 87: else
 41889                           ;interrupt_manager.c: 88: {
 41890                           
 41891                           ;interrupt_manager.c: 86: }
 41892  0000A2  C03D  FFF4         	movff	??_INTERRUPT_InterruptManager+9,prodh
 41893  0000A6  C03C  FFF3         	movff	??_INTERRUPT_InterruptManager+8,prodl
 41894  0000AA  C03B  FFDA         	movff	??_INTERRUPT_InterruptManager+7,fsr2h
 41895  0000AE  C03A  FFD9         	movff	??_INTERRUPT_InterruptManager+6,fsr2l
 41896  0000B2  C039  FFE2         	movff	??_INTERRUPT_InterruptManager+5,fsr1h
 41897  0000B6  C038  FFE1         	movff	??_INTERRUPT_InterruptManager+4,fsr1l
 41898  0000BA  C037  FFEA         	movff	??_INTERRUPT_InterruptManager+3,fsr0h
 41899  0000BE  C036  FFE9         	movff	??_INTERRUPT_InterruptManager+2,fsr0l
 41900  0000C2  C035  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
 41901  0000C6  C034  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
 41902  0000CA  0011               	retfie		f
 41903  0000CC                     __end_of_INTERRUPT_InterruptManager:
 41904                           	opt stack 0
 41905                           tosu	equ	0xFFF
 41906                           tosh	equ	0xFFE
 41907                           tosl	equ	0xFFD
 41908                           pclatu	equ	0xFFB
 41909                           pclath	equ	0xFFA
 41910                           tblptru	equ	0xFF8
 41911                           tblptrh	equ	0xFF7
 41912                           tblptrl	equ	0xFF6
 41913                           tablat	equ	0xFF5
 41914                           prodh	equ	0xFF4
 41915                           prodl	equ	0xFF3
 41916                           intcon	equ	0xFF2
 41917                           intcon2	equ	0xFF1
 41918                           intcon3	equ	0xFF0
 41919                           indf0	equ	0xFEF
 41920                           postinc0	equ	0xFEE
 41921                           plusw0	equ	0xFEB
 41922                           fsr0h	equ	0xFEA
 41923                           fsr0l	equ	0xFE9
 41924                           wreg	equ	0xFE8
 41925                           postinc1	equ	0xFE6
 41926                           postdec1	equ	0xFE5
 41927                           plusw1	equ	0xFE3
 41928                           fsr1h	equ	0xFE2
 41929                           fsr1l	equ	0xFE1
 41930                           indf2	equ	0xFDF
 41931                           postinc2	equ	0xFDE
 41932                           postdec2	equ	0xFDD
 41933                           plusw2	equ	0xFDB
 41934                           fsr2h	equ	0xFDA
 41935                           fsr2l	equ	0xFD9
 41936                           status	equ	0xFD8
 41937                           
 41938 ;; *************** function _TMR1_ISR *****************
 41939 ;; Defined at:
 41940 ;;		line 158 in file "mcc_generated_files/tmr1.c"
 41941 ;; Parameters:    Size  Location     Type
 41942 ;;		None
 41943 ;; Auto vars:     Size  Location     Type
 41944 ;;		None
 41945 ;; Return value:  Size  Location     Type
 41946 ;;                  1    wreg      void 
 41947 ;; Registers used:
 41948 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
 41949 ;; Tracked objects:
 41950 ;;		On entry : 0/0
 41951 ;;		On exit  : 0/0
 41952 ;;		Unchanged: 0/0
 41953 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 41954 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 41955 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 41956 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 41957 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 41958 ;;Total ram usage:        0 bytes
 41959 ;; Hardware stack levels used:    1
 41960 ;; Hardware stack levels required when called:    5
 41961 ;; This function calls:
 41962 ;;		_TMR1_CallBack
 41963 ;;		i2_TMR1_WriteTimer
 41964 ;; This function is called by:
 41965 ;;		_INTERRUPT_InterruptManager
 41966 ;; This function uses a non-reentrant model
 41967 ;;
 41968                           
 41969                           	psect	text204
 41970  0093C8                     __ptext204:
 41971                           	opt stack 0
 41972  0093C8                     _TMR1_ISR:
 41973                           	opt stack 12
 41974                           
 41975                           ;tmr1.c: 162: PIR1bits.TMR1IF = 0;
 41976                           
 41977                           ;incstack = 0
 41978  0093C8  909E               	bcf	3998,0,c	;volatile
 41979                           
 41980                           ;tmr1.c: 163: TMR1_WriteTimer(timer1ReloadVal);
 41981  0093CA  C1FD  F001         	movff	_timer1ReloadVal,i2TMR1_WriteTimer@timerVal	;volatile
 41982  0093CE  C1FE  F002         	movff	_timer1ReloadVal+1,i2TMR1_WriteTimer@timerVal+1	;volatile
 41983  0093D2  EC79  F049         	call	i2_TMR1_WriteTimer	;wreg free
 41984                           
 41985                           ;tmr1.c: 167: TMR1_CallBack();
 41986  0093D6  ECFE  F048         	call	_TMR1_CallBack	;wreg free
 41987  0093DA  0012               	return		;funcret
 41988  0093DC                     __end_of_TMR1_ISR:
 41989                           	opt stack 0
 41990                           tosu	equ	0xFFF
 41991                           tosh	equ	0xFFE
 41992                           tosl	equ	0xFFD
 41993                           pclatu	equ	0xFFB
 41994                           pclath	equ	0xFFA
 41995                           tblptru	equ	0xFF8
 41996                           tblptrh	equ	0xFF7
 41997                           tblptrl	equ	0xFF6
 41998                           tablat	equ	0xFF5
 41999                           prodh	equ	0xFF4
 42000                           prodl	equ	0xFF3
 42001                           intcon	equ	0xFF2
 42002                           intcon2	equ	0xFF1
 42003                           intcon3	equ	0xFF0
 42004                           indf0	equ	0xFEF
 42005                           postinc0	equ	0xFEE
 42006                           plusw0	equ	0xFEB
 42007                           fsr0h	equ	0xFEA
 42008                           fsr0l	equ	0xFE9
 42009                           wreg	equ	0xFE8
 42010                           postinc1	equ	0xFE6
 42011                           postdec1	equ	0xFE5
 42012                           plusw1	equ	0xFE3
 42013                           fsr1h	equ	0xFE2
 42014                           fsr1l	equ	0xFE1
 42015                           indf2	equ	0xFDF
 42016                           postinc2	equ	0xFDE
 42017                           postdec2	equ	0xFDD
 42018                           plusw2	equ	0xFDB
 42019                           fsr2h	equ	0xFDA
 42020                           fsr2l	equ	0xFD9
 42021                           status	equ	0xFD8
 42022                           
 42023 ;; *************** function _TMR1_CallBack *****************
 42024 ;; Defined at:
 42025 ;;		line 170 in file "mcc_generated_files/tmr1.c"
 42026 ;; Parameters:    Size  Location     Type
 42027 ;;		None
 42028 ;; Auto vars:     Size  Location     Type
 42029 ;;		None
 42030 ;; Return value:  Size  Location     Type
 42031 ;;                  1    wreg      void 
 42032 ;; Registers used:
 42033 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
 42034 ;; Tracked objects:
 42035 ;;		On entry : 0/0
 42036 ;;		On exit  : 0/0
 42037 ;;		Unchanged: 0/0
 42038 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 42039 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 42040 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 42041 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 42042 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 42043 ;;Total ram usage:        0 bytes
 42044 ;; Hardware stack levels used:    1
 42045 ;; Hardware stack levels required when called:    4
 42046 ;; This function calls:
 42047 ;;		Absolute function
 42048 ;;		_TMR1_DefaultInterruptHandler
 42049 ;;		_TMR_ISR_lora
 42050 ;; This function is called by:
 42051 ;;		_TMR1_ISR
 42052 ;; This function uses a non-reentrant model
 42053 ;;
 42054                           
 42055                           	psect	text205
 42056  0091FC                     __ptext205:
 42057                           	opt stack 0
 42058  0091FC                     _TMR1_CallBack:
 42059                           	opt stack 12
 42060                           
 42061                           ;tmr1.c: 173: if(TMR1_InterruptHandler)
 42062                           
 42063                           ;incstack = 0
 42064  0091FC  0103               	movlb	3	; () banked
 42065  0091FE  51E5               	movf	_TMR1_InterruptHandler& (0+255),w,b
 42066  009200  11E6               	iorwf	(_TMR1_InterruptHandler+1)& (0+255),w,b
 42067  009202  B4D8               	btfsc	status,2,c
 42068  009204  0012               	return	
 42069                           
 42070                           ; BSR set to: 3
 42071                           ;tmr1.c: 174: {
 42072                           ;tmr1.c: 175: TMR1_InterruptHandler();
 42073  009206  D801               	call	i2u1681_48
 42074  009208  0012               	return	
 42075  00920A                     i2u1681_48:
 42076  00920A  0005               	push	
 42077  00920C  6EFA               	movwf	pclath,c
 42078  00920E  51E5               	movf	_TMR1_InterruptHandler& (0+255),w,b
 42079  009210  6EFD               	movwf	tosl,c
 42080  009212  51E6               	movf	(_TMR1_InterruptHandler+1)& (0+255),w,b
 42081  009214  6EFE               	movwf	tosh,c
 42082  009216  6AFF               	clrf	tosu,c
 42083  009218  50FA               	movf	pclath,w,c
 42084  00921A  0012               	return		;indir
 42085  00921C                     __end_of_TMR1_CallBack:
 42086                           	opt stack 0
 42087                           tosu	equ	0xFFF
 42088                           tosh	equ	0xFFE
 42089                           tosl	equ	0xFFD
 42090                           pclatu	equ	0xFFB
 42091                           pclath	equ	0xFFA
 42092                           tblptru	equ	0xFF8
 42093                           tblptrh	equ	0xFF7
 42094                           tblptrl	equ	0xFF6
 42095                           tablat	equ	0xFF5
 42096                           prodh	equ	0xFF4
 42097                           prodl	equ	0xFF3
 42098                           intcon	equ	0xFF2
 42099                           intcon2	equ	0xFF1
 42100                           intcon3	equ	0xFF0
 42101                           indf0	equ	0xFEF
 42102                           postinc0	equ	0xFEE
 42103                           plusw0	equ	0xFEB
 42104                           fsr0h	equ	0xFEA
 42105                           fsr0l	equ	0xFE9
 42106                           wreg	equ	0xFE8
 42107                           postinc1	equ	0xFE6
 42108                           postdec1	equ	0xFE5
 42109                           plusw1	equ	0xFE3
 42110                           fsr1h	equ	0xFE2
 42111                           fsr1l	equ	0xFE1
 42112                           indf2	equ	0xFDF
 42113                           postinc2	equ	0xFDE
 42114                           postdec2	equ	0xFDD
 42115                           plusw2	equ	0xFDB
 42116                           fsr2h	equ	0xFDA
 42117                           fsr2l	equ	0xFD9
 42118                           status	equ	0xFD8
 42119                           
 42120 ;; *************** function _TMR1_DefaultInterruptHandler *****************
 42121 ;; Defined at:
 42122 ;;		line 183 in file "mcc_generated_files/tmr1.c"
 42123 ;; Parameters:    Size  Location     Type
 42124 ;;		None
 42125 ;; Auto vars:     Size  Location     Type
 42126 ;;		None
 42127 ;; Return value:  Size  Location     Type
 42128 ;;                  1    wreg      void 
 42129 ;; Registers used:
 42130 ;;		None
 42131 ;; Tracked objects:
 42132 ;;		On entry : 0/0
 42133 ;;		On exit  : 0/0
 42134 ;;		Unchanged: 0/0
 42135 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 42136 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 42137 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 42138 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 42139 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 42140 ;;Total ram usage:        0 bytes
 42141 ;; Hardware stack levels used:    1
 42142 ;; This function calls:
 42143 ;;		Nothing
 42144 ;; This function is called by:
 42145 ;;		_TMR1_Initialize
 42146 ;;		_TMR1_CallBack
 42147 ;; This function uses a non-reentrant model
 42148 ;;
 42149                           
 42150                           	psect	text206
 42151  0095F4                     __ptext206:
 42152                           	opt stack 0
 42153  0095F4                     _TMR1_DefaultInterruptHandler:
 42154                           	opt stack 15
 42155                           
 42156                           ;incstack = 0
 42157  0095F4  0012               	return		;funcret
 42158  0095F6                     __end_of_TMR1_DefaultInterruptHandler:
 42159                           	opt stack 0
 42160                           tosu	equ	0xFFF
 42161                           tosh	equ	0xFFE
 42162                           tosl	equ	0xFFD
 42163                           pclatu	equ	0xFFB
 42164                           pclath	equ	0xFFA
 42165                           tblptru	equ	0xFF8
 42166                           tblptrh	equ	0xFF7
 42167                           tblptrl	equ	0xFF6
 42168                           tablat	equ	0xFF5
 42169                           prodh	equ	0xFF4
 42170                           prodl	equ	0xFF3
 42171                           intcon	equ	0xFF2
 42172                           intcon2	equ	0xFF1
 42173                           intcon3	equ	0xFF0
 42174                           indf0	equ	0xFEF
 42175                           postinc0	equ	0xFEE
 42176                           plusw0	equ	0xFEB
 42177                           fsr0h	equ	0xFEA
 42178                           fsr0l	equ	0xFE9
 42179                           wreg	equ	0xFE8
 42180                           postinc1	equ	0xFE6
 42181                           postdec1	equ	0xFE5
 42182                           plusw1	equ	0xFE3
 42183                           fsr1h	equ	0xFE2
 42184                           fsr1l	equ	0xFE1
 42185                           indf2	equ	0xFDF
 42186                           postinc2	equ	0xFDE
 42187                           postdec2	equ	0xFDD
 42188                           plusw2	equ	0xFDB
 42189                           fsr2h	equ	0xFDA
 42190                           fsr2l	equ	0xFD9
 42191                           status	equ	0xFD8
 42192                           
 42193 ;; *************** function _TMR_ISR_lora *****************
 42194 ;; Defined at:
 42195 ;;		line 59 in file "mcc_generated_files/LoRaWAN/tmr_lora_addons.c"
 42196 ;; Parameters:    Size  Location     Type
 42197 ;;		None
 42198 ;; Auto vars:     Size  Location     Type
 42199 ;;		None
 42200 ;; Return value:  Size  Location     Type
 42201 ;;                  1    wreg      void 
 42202 ;; Registers used:
 42203 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 42204 ;; Tracked objects:
 42205 ;;		On entry : 0/0
 42206 ;;		On exit  : 0/0
 42207 ;;		Unchanged: 0/0
 42208 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 42209 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 42210 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 42211 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 42212 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 42213 ;;Total ram usage:        2 bytes
 42214 ;; Hardware stack levels used:    1
 42215 ;; Hardware stack levels required when called:    3
 42216 ;; This function calls:
 42217 ;;		i2_SwTimersInterrupt
 42218 ;;		i2_TMR_SwapTimer
 42219 ;; This function is called by:
 42220 ;;		_TMR_ISR_Lora_Init
 42221 ;;		_TMR1_CallBack
 42222 ;; This function uses a non-reentrant model
 42223 ;;
 42224                           
 42225                           	psect	text207
 42226  00853E                     __ptext207:
 42227                           	opt stack 0
 42228  00853E                     _TMR_ISR_lora:
 42229                           	opt stack 12
 42230                           
 42231                           ;tmr_lora_addons.c: 61: timerOverflow = 1;
 42232                           
 42233                           ;incstack = 0
 42234  00853E  0E01               	movlw	1
 42235  008540  6E53               	movwf	_timerOverflow,c	;volatile
 42236                           
 42237                           ;tmr_lora_addons.c: 63: ticksToScheduledInterrupt = SwTimersInterrupt();
 42238  008542  EC74  F031         	call	i2_SwTimersInterrupt	;wreg free
 42239  008546  C021  F054         	movff	?i2_SwTimersInterrupt,_ticksToScheduledInterrupt	;volatile
 42240  00854A  C022  F055         	movff	?i2_SwTimersInterrupt+1,_ticksToScheduledInterrupt+1	;volatile
 42241  00854E  C023  F056         	movff	?i2_SwTimersInterrupt+2,_ticksToScheduledInterrupt+2	;volatile
 42242  008552  C024  F057         	movff	?i2_SwTimersInterrupt+3,_ticksToScheduledInterrupt+3	;volatile
 42243                           
 42244                           ;tmr_lora_addons.c: 65: if (ticksToScheduledInterrupt < ((uint32_t)0x10000))
 42245  008556  5057               	movf	_ticksToScheduledInterrupt+3,w,c	;volatile
 42246  008558  E11D               	bnz	i2l2171
 42247  00855A  0456               	decf	_ticksToScheduledInterrupt+2,w,c	;volatile
 42248  00855C  B0D8               	btfsc	status,0,c
 42249  00855E  0012               	return	
 42250                           
 42251                           ;tmr_lora_addons.c: 66: {
 42252                           ;tmr_lora_addons.c: 67: reloadVal = ((uint32_t)0x10000) - ticksToScheduledInterrupt;
 42253  008560  C054  F032         	movff	_ticksToScheduledInterrupt,??_TMR_ISR_lora	;volatile
 42254  008564  C055  F033         	movff	_ticksToScheduledInterrupt+1,??_TMR_ISR_lora+1	;volatile
 42255  008568  1E32               	comf	??_TMR_ISR_lora,f,c
 42256  00856A  1E33               	comf	??_TMR_ISR_lora+1,f,c
 42257  00856C  4A32               	infsnz	??_TMR_ISR_lora,f,c
 42258  00856E  2A33               	incf	??_TMR_ISR_lora+1,f,c
 42259  008570  C032  F04C         	movff	??_TMR_ISR_lora,_reloadVal	;volatile
 42260  008574  C033  F04D         	movff	??_TMR_ISR_lora+1,_reloadVal+1	;volatile
 42261                           
 42262                           ;tmr_lora_addons.c: 68: ticksAdded = TMR_SwapTimer(reloadVal);
 42263  008578  C04C  F009         	movff	_reloadVal,i2TMR_SwapTimer@timerVal	;volatile
 42264  00857C  C04D  F00A         	movff	_reloadVal+1,i2TMR_SwapTimer@timerVal+1	;volatile
 42265  008580  EC49  F045         	call	i2_TMR_SwapTimer	;wreg free
 42266  008584  C009  F108         	movff	?i2_TMR_SwapTimer,_ticksAdded	;volatile
 42267  008588  C00A  F109         	movff	?i2_TMR_SwapTimer+1,_ticksAdded+1	;volatile
 42268  00858C  0101               	movlb	1	; () banked
 42269  00858E  6B0A               	clrf	(_ticksAdded+2)& (0+255),b	;volatile
 42270  008590  6B0B               	clrf	(_ticksAdded+3)& (0+255),b	;volatile
 42271  008592  0012               	return	
 42272  008594                     i2l2171:
 42273  008594  0012               	return		;funcret
 42274  008596                     __end_of_TMR_ISR_lora:
 42275                           	opt stack 0
 42276                           tosu	equ	0xFFF
 42277                           tosh	equ	0xFFE
 42278                           tosl	equ	0xFFD
 42279                           pclatu	equ	0xFFB
 42280                           pclath	equ	0xFFA
 42281                           tblptru	equ	0xFF8
 42282                           tblptrh	equ	0xFF7
 42283                           tblptrl	equ	0xFF6
 42284                           tablat	equ	0xFF5
 42285                           prodh	equ	0xFF4
 42286                           prodl	equ	0xFF3
 42287                           intcon	equ	0xFF2
 42288                           intcon2	equ	0xFF1
 42289                           intcon3	equ	0xFF0
 42290                           indf0	equ	0xFEF
 42291                           postinc0	equ	0xFEE
 42292                           plusw0	equ	0xFEB
 42293                           fsr0h	equ	0xFEA
 42294                           fsr0l	equ	0xFE9
 42295                           wreg	equ	0xFE8
 42296                           postinc1	equ	0xFE6
 42297                           postdec1	equ	0xFE5
 42298                           plusw1	equ	0xFE3
 42299                           fsr1h	equ	0xFE2
 42300                           fsr1l	equ	0xFE1
 42301                           indf2	equ	0xFDF
 42302                           postinc2	equ	0xFDE
 42303                           postdec2	equ	0xFDD
 42304                           plusw2	equ	0xFDB
 42305                           fsr2h	equ	0xFDA
 42306                           fsr2l	equ	0xFD9
 42307                           status	equ	0xFD8
 42308                           
 42309 ;; *************** function i2_TMR_SwapTimer *****************
 42310 ;; Defined at:
 42311 ;;		line 112 in file "mcc_generated_files/LoRaWAN/sw_timer.c"
 42312 ;; Parameters:    Size  Location     Type
 42313 ;;  timerVal        2    8[COMRAM] unsigned int 
 42314 ;; Auto vars:     Size  Location     Type
 42315 ;;		None
 42316 ;; Return value:  Size  Location     Type
 42317 ;;                  2    8[COMRAM] unsigned int 
 42318 ;; Registers used:
 42319 ;;		wreg, status,2, status,0, cstack
 42320 ;; Tracked objects:
 42321 ;;		On entry : 0/0
 42322 ;;		On exit  : 0/0
 42323 ;;		Unchanged: 0/0
 42324 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 42325 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 42326 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 42327 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 42328 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 42329 ;;Total ram usage:        2 bytes
 42330 ;; Hardware stack levels used:    1
 42331 ;; Hardware stack levels required when called:    1
 42332 ;; This function calls:
 42333 ;;		i2_TMR1_ReadTimer
 42334 ;;		i2_TMR1_WriteTimer
 42335 ;; This function is called by:
 42336 ;;		_TMR_ISR_lora
 42337 ;; This function uses a non-reentrant model
 42338 ;;
 42339                           
 42340                           	psect	text208
 42341  008A92                     __ptext208:
 42342                           	opt stack 0
 42343  008A92                     i2_TMR_SwapTimer:
 42344                           	opt stack 13
 42345                           
 42346                           ;sw_timer.c: 114: static uint16_t oldVal;
 42347                           ;sw_timer.c: 115: static uint16_t retVal;
 42348                           ;sw_timer.c: 117: oldVal = TMR1_ReadTimer();
 42349                           
 42350                           ;incstack = 0
 42351  008A92  EC0E  F049         	call	i2_TMR1_ReadTimer	;wreg free
 42352  008A96  C001  F148         	movff	?i2_TMR1_ReadTimer,TMR_SwapTimer@oldVal
 42353  008A9A  C002  F149         	movff	?i2_TMR1_ReadTimer+1,TMR_SwapTimer@oldVal+1
 42354  008A9E                     
 42355                           ;sw_timer.c: 123: ;
 42356  008A9E  EC0E  F049         	call	i2_TMR1_ReadTimer	;wreg free
 42357  008AA2  0101               	movlb	1	; () banked
 42358  008AA4  5148               	movf	TMR_SwapTimer@oldVal& (0+255),w,b
 42359  008AA6  1801               	xorwf	?i2_TMR1_ReadTimer,w,c
 42360  008AA8  E104               	bnz	i2l11759
 42361  008AAA  5149               	movf	(TMR_SwapTimer@oldVal+1)& (0+255),w,b
 42362  008AAC  1802               	xorwf	?i2_TMR1_ReadTimer+1,w,c
 42363  008AAE  B4D8               	btfsc	status,2,c
 42364  008AB0  D7F6               	goto	i2l1535
 42365  008AB2                     i2l11759:
 42366                           
 42367                           ; BSR set to: 1
 42368                           ;sw_timer.c: 125: TMR1_WriteTimer(timerVal);
 42369  008AB2  C009  F001         	movff	i2TMR_SwapTimer@timerVal,i2TMR1_WriteTimer@timerVal
 42370  008AB6  C00A  F002         	movff	i2TMR_SwapTimer@timerVal+1,i2TMR1_WriteTimer@timerVal+1
 42371  008ABA  EC79  F049         	call	i2_TMR1_WriteTimer	;wreg free
 42372                           
 42373                           ;sw_timer.c: 128: oldVal++;
 42374  008ABE  0101               	movlb	1	; () banked
 42375  008AC0  4B48               	infsnz	TMR_SwapTimer@oldVal& (0+255),f,b
 42376  008AC2  2B49               	incf	(TMR_SwapTimer@oldVal+1)& (0+255),f,b
 42377                           
 42378                           ; BSR set to: 1
 42379                           ;sw_timer.c: 130: retVal = oldVal;
 42380  008AC4  C148  F146         	movff	TMR_SwapTimer@oldVal,TMR_SwapTimer@retVal
 42381  008AC8  C149  F147         	movff	TMR_SwapTimer@oldVal+1,TMR_SwapTimer@retVal+1
 42382                           
 42383                           ; BSR set to: 1
 42384                           ;sw_timer.c: 132: return retVal;
 42385  008ACC  C146  F009         	movff	TMR_SwapTimer@retVal,?i2_TMR_SwapTimer
 42386  008AD0  C147  F00A         	movff	TMR_SwapTimer@retVal+1,?i2_TMR_SwapTimer+1
 42387  008AD4  0012               	return	
 42388  008AD6                     __end_ofi2_TMR_SwapTimer:
 42389                           	opt stack 0
 42390                           tosu	equ	0xFFF
 42391                           tosh	equ	0xFFE
 42392                           tosl	equ	0xFFD
 42393                           pclatu	equ	0xFFB
 42394                           pclath	equ	0xFFA
 42395                           tblptru	equ	0xFF8
 42396                           tblptrh	equ	0xFF7
 42397                           tblptrl	equ	0xFF6
 42398                           tablat	equ	0xFF5
 42399                           prodh	equ	0xFF4
 42400                           prodl	equ	0xFF3
 42401                           intcon	equ	0xFF2
 42402                           intcon2	equ	0xFF1
 42403                           intcon3	equ	0xFF0
 42404                           indf0	equ	0xFEF
 42405                           postinc0	equ	0xFEE
 42406                           plusw0	equ	0xFEB
 42407                           fsr0h	equ	0xFEA
 42408                           fsr0l	equ	0xFE9
 42409                           wreg	equ	0xFE8
 42410                           postinc1	equ	0xFE6
 42411                           postdec1	equ	0xFE5
 42412                           plusw1	equ	0xFE3
 42413                           fsr1h	equ	0xFE2
 42414                           fsr1l	equ	0xFE1
 42415                           indf2	equ	0xFDF
 42416                           postinc2	equ	0xFDE
 42417                           postdec2	equ	0xFDD
 42418                           plusw2	equ	0xFDB
 42419                           fsr2h	equ	0xFDA
 42420                           fsr2l	equ	0xFD9
 42421                           status	equ	0xFD8
 42422                           
 42423 ;; *************** function i2_TMR1_WriteTimer *****************
 42424 ;; Defined at:
 42425 ;;		line 121 in file "mcc_generated_files/tmr1.c"
 42426 ;; Parameters:    Size  Location     Type
 42427 ;;  timerVal        2    0[COMRAM] unsigned int 
 42428 ;; Auto vars:     Size  Location     Type
 42429 ;;		None
 42430 ;; Return value:  Size  Location     Type
 42431 ;;                  1    wreg      void 
 42432 ;; Registers used:
 42433 ;;		wreg, status,2
 42434 ;; Tracked objects:
 42435 ;;		On entry : 0/0
 42436 ;;		On exit  : 0/0
 42437 ;;		Unchanged: 0/0
 42438 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 42439 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 42440 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 42441 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 42442 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 42443 ;;Total ram usage:        2 bytes
 42444 ;; Hardware stack levels used:    1
 42445 ;; This function calls:
 42446 ;;		Nothing
 42447 ;; This function is called by:
 42448 ;;		_TMR1_ISR
 42449 ;;		i2_TMR_SwapTimer
 42450 ;; This function uses a non-reentrant model
 42451 ;;
 42452                           
 42453                           	psect	text209
 42454  0092F2                     __ptext209:
 42455                           	opt stack 0
 42456  0092F2                     i2_TMR1_WriteTimer:
 42457                           	opt stack 16
 42458                           
 42459                           ;tmr1.c: 123: if (T1CONbits.T1SYNC == 1)
 42460                           
 42461                           ; BSR set to: 1
 42462                           ;incstack = 0
 42463  0092F2  A4CD               	btfss	4045,2,c	;volatile
 42464  0092F4  D007               	goto	i2l2627
 42465                           
 42466                           ;tmr1.c: 124: {
 42467                           ;tmr1.c: 126: T1CONbits.TMR1ON = 0;
 42468  0092F6  90CD               	bcf	4045,0,c	;volatile
 42469                           
 42470                           ;tmr1.c: 129: TMR1H = (timerVal >> 8);
 42471  0092F8  5002               	movf	i2TMR1_WriteTimer@timerVal+1,w,c
 42472  0092FA  6ECF               	movwf	4047,c	;volatile
 42473                           
 42474                           ;tmr1.c: 130: TMR1L = (uint8_t) timerVal;
 42475  0092FC  C001  FFCE         	movff	i2TMR1_WriteTimer@timerVal,4046	;volatile
 42476                           
 42477                           ;tmr1.c: 133: T1CONbits.TMR1ON =1;
 42478  009300  80CD               	bsf	4045,0,c	;volatile
 42479                           
 42480                           ;tmr1.c: 134: }
 42481  009302  0012               	return	
 42482  009304                     i2l2627:
 42483                           
 42484                           ;tmr1.c: 135: else
 42485                           ;tmr1.c: 136: {
 42486                           ;tmr1.c: 138: TMR1H = (timerVal >> 8);
 42487  009304  5002               	movf	i2TMR1_WriteTimer@timerVal+1,w,c
 42488  009306  6ECF               	movwf	4047,c	;volatile
 42489                           
 42490                           ;tmr1.c: 139: TMR1L = (uint8_t) timerVal;
 42491  009308  C001  FFCE         	movff	i2TMR1_WriteTimer@timerVal,4046	;volatile
 42492  00930C  0012               	return	
 42493  00930E                     __end_ofi2_TMR1_WriteTimer:
 42494                           	opt stack 0
 42495                           tosu	equ	0xFFF
 42496                           tosh	equ	0xFFE
 42497                           tosl	equ	0xFFD
 42498                           pclatu	equ	0xFFB
 42499                           pclath	equ	0xFFA
 42500                           tblptru	equ	0xFF8
 42501                           tblptrh	equ	0xFF7
 42502                           tblptrl	equ	0xFF6
 42503                           tablat	equ	0xFF5
 42504                           prodh	equ	0xFF4
 42505                           prodl	equ	0xFF3
 42506                           intcon	equ	0xFF2
 42507                           intcon2	equ	0xFF1
 42508                           intcon3	equ	0xFF0
 42509                           indf0	equ	0xFEF
 42510                           postinc0	equ	0xFEE
 42511                           plusw0	equ	0xFEB
 42512                           fsr0h	equ	0xFEA
 42513                           fsr0l	equ	0xFE9
 42514                           wreg	equ	0xFE8
 42515                           postinc1	equ	0xFE6
 42516                           postdec1	equ	0xFE5
 42517                           plusw1	equ	0xFE3
 42518                           fsr1h	equ	0xFE2
 42519                           fsr1l	equ	0xFE1
 42520                           indf2	equ	0xFDF
 42521                           postinc2	equ	0xFDE
 42522                           postdec2	equ	0xFDD
 42523                           plusw2	equ	0xFDB
 42524                           fsr2h	equ	0xFDA
 42525                           fsr2l	equ	0xFD9
 42526                           status	equ	0xFD8
 42527                           
 42528 ;; *************** function i2_SwTimersInterrupt *****************
 42529 ;; Defined at:
 42530 ;;		line 287 in file "mcc_generated_files/LoRaWAN/sw_timer.c"
 42531 ;; Parameters:    Size  Location     Type
 42532 ;;		None
 42533 ;; Auto vars:     Size  Location     Type
 42534 ;;  SwTimersInte    4   44[COMRAM] unsigned long 
 42535 ;;  SwTimersInte    4   40[COMRAM] unsigned long 
 42536 ;;  SwTimersInte    1   48[COMRAM] unsigned char 
 42537 ;; Return value:  Size  Location     Type
 42538 ;;                  4   32[COMRAM] unsigned long 
 42539 ;; Registers used:
 42540 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 42541 ;; Tracked objects:
 42542 ;;		On entry : 0/0
 42543 ;;		On exit  : 0/0
 42544 ;;		Unchanged: 0/0
 42545 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 42546 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 42547 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 42548 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 42549 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 42550 ;;Total ram usage:       17 bytes
 42551 ;; Hardware stack levels used:    1
 42552 ;; Hardware stack levels required when called:    2
 42553 ;; This function calls:
 42554 ;;		i2_TMR_GetDeltaTime
 42555 ;; This function is called by:
 42556 ;;		_TMR_ISR_lora
 42557 ;; This function uses a non-reentrant model
 42558 ;;
 42559                           
 42560                           	psect	text210
 42561  0062E8                     __ptext210:
 42562                           	opt stack 0
 42563  0062E8                     i2_SwTimersInterrupt:
 42564                           	opt stack 12
 42565                           
 42566                           ;sw_timer.c: 289: uint8_t i;
 42567                           ;sw_timer.c: 290: uint32_t timeElapsed;
 42568                           ;sw_timer.c: 291: uint32_t ticksToNextTimerEvent = 0xFFFFFFFF;
 42569                           
 42570                           ;incstack = 0
 42571  0062E8  682D               	setf	i2SwTimersInterrupt@ticksToNextTimerEvent,c
 42572  0062EA  682E               	setf	i2SwTimersInterrupt@ticksToNextTimerEvent+1,c
 42573  0062EC  682F               	setf	i2SwTimersInterrupt@ticksToNextTimerEvent+2,c
 42574  0062EE  6830               	setf	i2SwTimersInterrupt@ticksToNextTimerEvent+3,c
 42575                           
 42576                           ;sw_timer.c: 295: timeElapsed = TMR_GetDeltaTime();
 42577  0062F0  ECED  F029         	call	i2_TMR_GetDeltaTime	;wreg free
 42578  0062F4  C009  F029         	movff	?i2_TMR_GetDeltaTime,i2SwTimersInterrupt@timeElapsed
 42579  0062F8  C00A  F02A         	movff	?i2_TMR_GetDeltaTime+1,i2SwTimersInterrupt@timeElapsed+1
 42580  0062FC  C00B  F02B         	movff	?i2_TMR_GetDeltaTime+2,i2SwTimersInterrupt@timeElapsed+2
 42581  006300  C00C  F02C         	movff	?i2_TMR_GetDeltaTime+3,i2SwTimersInterrupt@timeElapsed+3
 42582                           
 42583                           ;sw_timer.c: 297: for (i = 0; i < allocatedTimers; i++)
 42584  006304  0E00               	movlw	0
 42585  006306  6E31               	movwf	i2SwTimersInterrupt@i,c
 42586  006308  D061               	goto	i2l1592
 42587  00630A                     
 42588                           ;sw_timer.c: 298: {
 42589                           ;sw_timer.c: 301: if (swTimers[i].running == 1)
 42590  00630A  5031               	movf	i2SwTimersInterrupt@i,w,c
 42591  00630C  0D08               	mullw	8
 42592  00630E  0E04               	movlw	4
 42593  006310  26F3               	addwf	prodl,f,c
 42594  006312  0E00               	movlw	0
 42595  006314  22F4               	addwfc	prodh,f,c
 42596  006316  0E00               	movlw	low _swTimers
 42597  006318  24F3               	addwf	prodl,w,c
 42598  00631A  6ED9               	movwf	fsr2l,c
 42599  00631C  0E03               	movlw	high _swTimers
 42600  00631E  20F4               	addwfc	prodh,w,c
 42601  006320  6EDA               	movwf	fsr2h,c
 42602  006322  04DE               	decf	postinc2,w,c
 42603  006324  A4D8               	btfss	status,2,c
 42604  006326  D051               	goto	i2l1597
 42605                           
 42606                           ;sw_timer.c: 302: {
 42607                           ;sw_timer.c: 303: if (swTimers[i].ticksRemaining <= timeElapsed)
 42608  006328  5031               	movf	i2SwTimersInterrupt@i,w,c
 42609  00632A  0D08               	mullw	8
 42610  00632C  0E00               	movlw	low _swTimers
 42611  00632E  24F3               	addwf	prodl,w,c
 42612  006330  6ED9               	movwf	fsr2l,c
 42613  006332  0E03               	movlw	high _swTimers
 42614  006334  20F4               	addwfc	prodh,w,c
 42615  006336  6EDA               	movwf	fsr2h,c
 42616  006338  50DE               	movf	postinc2,w,c
 42617  00633A  5C29               	subwf	i2SwTimersInterrupt@timeElapsed,w,c
 42618  00633C  50DE               	movf	postinc2,w,c
 42619  00633E  582A               	subwfb	i2SwTimersInterrupt@timeElapsed+1,w,c
 42620  006340  50DE               	movf	postinc2,w,c
 42621  006342  582B               	subwfb	i2SwTimersInterrupt@timeElapsed+2,w,c
 42622  006344  50DE               	movf	postinc2,w,c
 42623  006346  582C               	subwfb	i2SwTimersInterrupt@timeElapsed+3,w,c
 42624  006348  A0D8               	btfss	status,0,c
 42625  00634A  D00D               	goto	i2l1595
 42626                           
 42627                           ;sw_timer.c: 304: {
 42628                           ;sw_timer.c: 305: swTimers[i].ticksRemaining = 0;
 42629  00634C  5031               	movf	i2SwTimersInterrupt@i,w,c
 42630  00634E  0D08               	mullw	8
 42631  006350  0E00               	movlw	low _swTimers
 42632  006352  24F3               	addwf	prodl,w,c
 42633  006354  6ED9               	movwf	fsr2l,c
 42634  006356  0E03               	movlw	high _swTimers
 42635  006358  20F4               	addwfc	prodh,w,c
 42636  00635A  6EDA               	movwf	fsr2h,c
 42637  00635C  6ADE               	clrf	postinc2,c
 42638  00635E  6ADE               	clrf	postinc2,c
 42639  006360  6ADE               	clrf	postinc2,c
 42640  006362  6ADD               	clrf	postdec2,c
 42641                           
 42642                           ;sw_timer.c: 306: }
 42643  006364  D032               	goto	i2l1597
 42644  006366                     i2l1595:
 42645                           
 42646                           ;sw_timer.c: 307: else
 42647                           ;sw_timer.c: 308: {
 42648                           ;sw_timer.c: 309: swTimers[i].ticksRemaining -= timeElapsed;
 42649  006366  5031               	movf	i2SwTimersInterrupt@i,w,c
 42650  006368  0D08               	mullw	8
 42651  00636A  0E00               	movlw	low _swTimers
 42652  00636C  24F3               	addwf	prodl,w,c
 42653  00636E  6ED9               	movwf	fsr2l,c
 42654  006370  0E03               	movlw	high _swTimers
 42655  006372  20F4               	addwfc	prodh,w,c
 42656  006374  6EDA               	movwf	fsr2h,c
 42657  006376  5029               	movf	i2SwTimersInterrupt@timeElapsed,w,c
 42658  006378  5EDE               	subwf	postinc2,f,c
 42659  00637A  502A               	movf	i2SwTimersInterrupt@timeElapsed+1,w,c
 42660  00637C  5ADE               	subwfb	postinc2,f,c
 42661  00637E  502B               	movf	i2SwTimersInterrupt@timeElapsed+2,w,c
 42662  006380  5ADE               	subwfb	postinc2,f,c
 42663  006382  502C               	movf	i2SwTimersInterrupt@timeElapsed+3,w,c
 42664  006384  5ADE               	subwfb	postinc2,f,c
 42665                           
 42666                           ;sw_timer.c: 312: if (swTimers[i].ticksRemaining < ticksToNextTimerEvent)
 42667  006386  5031               	movf	i2SwTimersInterrupt@i,w,c
 42668  006388  0D08               	mullw	8
 42669  00638A  0E00               	movlw	low _swTimers
 42670  00638C  24F3               	addwf	prodl,w,c
 42671  00638E  6ED9               	movwf	fsr2l,c
 42672  006390  0E03               	movlw	high _swTimers
 42673  006392  20F4               	addwfc	prodh,w,c
 42674  006394  6EDA               	movwf	fsr2h,c
 42675  006396  502D               	movf	i2SwTimersInterrupt@ticksToNextTimerEvent,w,c
 42676  006398  5CDE               	subwf	postinc2,w,c
 42677  00639A  502E               	movf	i2SwTimersInterrupt@ticksToNextTimerEvent+1,w,c
 42678  00639C  58DE               	subwfb	postinc2,w,c
 42679  00639E  502F               	movf	i2SwTimersInterrupt@ticksToNextTimerEvent+2,w,c
 42680  0063A0  58DE               	subwfb	postinc2,w,c
 42681  0063A2  5030               	movf	i2SwTimersInterrupt@ticksToNextTimerEvent+3,w,c
 42682  0063A4  58DE               	subwfb	postinc2,w,c
 42683  0063A6  B0D8               	btfsc	status,0,c
 42684  0063A8  D010               	goto	i2l1597
 42685                           
 42686                           ;sw_timer.c: 313: {
 42687                           ;sw_timer.c: 314: ticksToNextTimerEvent = swTimers[i].ticksRemaining;
 42688  0063AA  5031               	movf	i2SwTimersInterrupt@i,w,c
 42689  0063AC  0D08               	mullw	8
 42690  0063AE  0E00               	movlw	low _swTimers
 42691  0063B0  24F3               	addwf	prodl,w,c
 42692  0063B2  6ED9               	movwf	fsr2l,c
 42693  0063B4  0E03               	movlw	high _swTimers
 42694  0063B6  20F4               	addwfc	prodh,w,c
 42695  0063B8  6EDA               	movwf	fsr2h,c
 42696  0063BA  CFDE F02D          	movff	postinc2,i2SwTimersInterrupt@ticksToNextTimerEvent
 42697  0063BE  CFDE F02E          	movff	postinc2,i2SwTimersInterrupt@ticksToNextTimerEvent+1
 42698  0063C2  CFDE F02F          	movff	postinc2,i2SwTimersInterrupt@ticksToNextTimerEvent+2
 42699  0063C6  CFDE F030          	movff	postinc2,i2SwTimersInterrupt@ticksToNextTimerEvent+3
 42700  0063CA                     i2l1597:
 42701  0063CA  2A31               	incf	i2SwTimersInterrupt@i,f,c
 42702  0063CC                     i2l1592:
 42703  0063CC  0101               	movlb	1	; () banked
 42704  0063CE  5154               	movf	_allocatedTimers& (0+255),w,b	;volatile
 42705  0063D0  5C31               	subwf	i2SwTimersInterrupt@i,w,c
 42706  0063D2  A0D8               	btfss	status,0,c
 42707  0063D4  D79A               	goto	i2l1593
 42708                           
 42709                           ; BSR set to: 1
 42710                           ;sw_timer.c: 315: }
 42711                           ;sw_timer.c: 316: }
 42712                           ;sw_timer.c: 317: }
 42713                           ;sw_timer.c: 318: }
 42714                           ;sw_timer.c: 320: return ticksToNextTimerEvent;
 42715  0063D6  C02D  F021         	movff	i2SwTimersInterrupt@ticksToNextTimerEvent,?i2_SwTimersInterrupt
 42716  0063DA  C02E  F022         	movff	i2SwTimersInterrupt@ticksToNextTimerEvent+1,?i2_SwTimersInterrupt+1
 42717  0063DE  C02F  F023         	movff	i2SwTimersInterrupt@ticksToNextTimerEvent+2,?i2_SwTimersInterrupt+2
 42718  0063E2  C030  F024         	movff	i2SwTimersInterrupt@ticksToNextTimerEvent+3,?i2_SwTimersInterrupt+3
 42719                           
 42720                           ; BSR set to: 1
 42721  0063E6  0012               	return		;funcret
 42722  0063E8                     __end_ofi2_SwTimersInterrupt:
 42723                           	opt stack 0
 42724                           tosu	equ	0xFFF
 42725                           tosh	equ	0xFFE
 42726                           tosl	equ	0xFFD
 42727                           pclatu	equ	0xFFB
 42728                           pclath	equ	0xFFA
 42729                           tblptru	equ	0xFF8
 42730                           tblptrh	equ	0xFF7
 42731                           tblptrl	equ	0xFF6
 42732                           tablat	equ	0xFF5
 42733                           prodh	equ	0xFF4
 42734                           prodl	equ	0xFF3
 42735                           intcon	equ	0xFF2
 42736                           intcon2	equ	0xFF1
 42737                           intcon3	equ	0xFF0
 42738                           indf0	equ	0xFEF
 42739                           postinc0	equ	0xFEE
 42740                           plusw0	equ	0xFEB
 42741                           fsr0h	equ	0xFEA
 42742                           fsr0l	equ	0xFE9
 42743                           wreg	equ	0xFE8
 42744                           postinc1	equ	0xFE6
 42745                           postdec1	equ	0xFE5
 42746                           plusw1	equ	0xFE3
 42747                           fsr1h	equ	0xFE2
 42748                           fsr1l	equ	0xFE1
 42749                           indf2	equ	0xFDF
 42750                           postinc2	equ	0xFDE
 42751                           postdec2	equ	0xFDD
 42752                           plusw2	equ	0xFDB
 42753                           fsr2h	equ	0xFDA
 42754                           fsr2l	equ	0xFD9
 42755                           status	equ	0xFD8
 42756                           
 42757 ;; *************** function i2_TMR_GetDeltaTime *****************
 42758 ;; Defined at:
 42759 ;;		line 88 in file "mcc_generated_files/LoRaWAN/sw_timer.c"
 42760 ;; Parameters:    Size  Location     Type
 42761 ;;		None
 42762 ;; Auto vars:     Size  Location     Type
 42763 ;;		None
 42764 ;; Return value:  Size  Location     Type
 42765 ;;                  4    8[COMRAM] unsigned long 
 42766 ;; Registers used:
 42767 ;;		wreg, status,2, status,0, cstack
 42768 ;; Tracked objects:
 42769 ;;		On entry : 0/0
 42770 ;;		On exit  : 0/0
 42771 ;;		Unchanged: 0/0
 42772 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 42773 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 42774 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 42775 ;;      Temps:         20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 42776 ;;      Totals:        24       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 42777 ;;Total ram usage:       24 bytes
 42778 ;; Hardware stack levels used:    1
 42779 ;; Hardware stack levels required when called:    1
 42780 ;; This function calls:
 42781 ;;		i2_TMR1_ReadTimer
 42782 ;; This function is called by:
 42783 ;;		i2_SwTimersInterrupt
 42784 ;; This function uses a non-reentrant model
 42785 ;;
 42786                           
 42787                           	psect	text211
 42788  0053DA                     __ptext211:
 42789                           	opt stack 0
 42790  0053DA                     i2_TMR_GetDeltaTime:
 42791                           	opt stack 12
 42792                           
 42793                           ;sw_timer.c: 90: static uint32_t retVal;
 42794                           ;sw_timer.c: 91: static uint16_t tmrVal;
 42795                           ;sw_timer.c: 93: tmrVal = TMR1_ReadTimer();
 42796                           
 42797                           ; BSR set to: 1
 42798                           ;incstack = 0
 42799  0053DA  EC0E  F049         	call	i2_TMR1_ReadTimer	;wreg free
 42800  0053DE  C001  F14A         	movff	?i2_TMR1_ReadTimer,TMR_GetDeltaTime@tmrVal
 42801  0053E2  C002  F14B         	movff	?i2_TMR1_ReadTimer+1,TMR_GetDeltaTime@tmrVal+1
 42802                           
 42803                           ;sw_timer.c: 95: if (timerOverflow == 1)
 42804  0053E6  0453               	decf	_timerOverflow,w,c	;volatile
 42805  0053E8  A4D8               	btfss	status,2,c
 42806  0053EA  D066               	goto	i2l1525
 42807                           
 42808                           ;sw_timer.c: 96: {
 42809                           ;sw_timer.c: 97: timerOverflow = 0;
 42810  0053EC  0E00               	movlw	0
 42811  0053EE  6E53               	movwf	_timerOverflow,c	;volatile
 42812                           
 42813                           ;sw_timer.c: 98: retVal = ((uint32_t)0x10000) - reloadVal + tmrVal - ticksAccounted + ti
      +                          cksAdded;
 42814  0053F0  C104  F00D         	movff	_ticksAccounted,??i2_TMR_GetDeltaTime	;volatile
 42815  0053F4  C105  F00E         	movff	_ticksAccounted+1,??i2_TMR_GetDeltaTime+1	;volatile
 42816  0053F8  C106  F00F         	movff	_ticksAccounted+2,??i2_TMR_GetDeltaTime+2	;volatile
 42817  0053FC  C107  F010         	movff	_ticksAccounted+3,??i2_TMR_GetDeltaTime+3	;volatile
 42818  005400  1E0D               	comf	??i2_TMR_GetDeltaTime,f,c
 42819  005402  1E0E               	comf	??i2_TMR_GetDeltaTime+1,f,c
 42820  005404  1E0F               	comf	??i2_TMR_GetDeltaTime+2,f,c
 42821  005406  1E10               	comf	??i2_TMR_GetDeltaTime+3,f,c
 42822  005408  2A0D               	incf	??i2_TMR_GetDeltaTime,f,c
 42823  00540A  0E00               	movlw	0
 42824  00540C  220E               	addwfc	??i2_TMR_GetDeltaTime+1,f,c
 42825  00540E  220F               	addwfc	??i2_TMR_GetDeltaTime+2,f,c
 42826  005410  2210               	addwfc	??i2_TMR_GetDeltaTime+3,f,c
 42827  005412  504C               	movf	_reloadVal,w,c	;volatile
 42828  005414  6E11               	movwf	(??i2_TMR_GetDeltaTime+4)& (0+255),c
 42829  005416  504D               	movf	_reloadVal+1,w,c	;volatile
 42830  005418  6E12               	movwf	(??i2_TMR_GetDeltaTime+5)& (0+255),c
 42831  00541A  6A13               	clrf	(??i2_TMR_GetDeltaTime+6)& (0+255),c
 42832  00541C  6A14               	clrf	(??i2_TMR_GetDeltaTime+7)& (0+255),c
 42833  00541E  1E11               	comf	??i2_TMR_GetDeltaTime+4,f,c
 42834  005420  1E12               	comf	??i2_TMR_GetDeltaTime+5,f,c
 42835  005422  1E13               	comf	??i2_TMR_GetDeltaTime+6,f,c
 42836  005424  1E14               	comf	??i2_TMR_GetDeltaTime+7,f,c
 42837  005426  2A11               	incf	??i2_TMR_GetDeltaTime+4,f,c
 42838  005428  0E00               	movlw	0
 42839  00542A  2212               	addwfc	??i2_TMR_GetDeltaTime+5,f,c
 42840  00542C  2213               	addwfc	??i2_TMR_GetDeltaTime+6,f,c
 42841  00542E  2214               	addwfc	??i2_TMR_GetDeltaTime+7,f,c
 42842  005430  0101               	movlb	1	; () banked
 42843  005432  514A               	movf	TMR_GetDeltaTime@tmrVal& (0+255),w,b
 42844  005434  2411               	addwf	??i2_TMR_GetDeltaTime+4,w,c
 42845  005436  6E15               	movwf	(??i2_TMR_GetDeltaTime+8)& (0+255),c
 42846  005438  514B               	movf	(TMR_GetDeltaTime@tmrVal+1)& (0+255),w,b
 42847  00543A  2012               	addwfc	??i2_TMR_GetDeltaTime+5,w,c
 42848  00543C  6E16               	movwf	(??i2_TMR_GetDeltaTime+9)& (0+255),c
 42849  00543E  0E00               	movlw	0
 42850  005440  2013               	addwfc	??i2_TMR_GetDeltaTime+6,w,c
 42851  005442  6E17               	movwf	(??i2_TMR_GetDeltaTime+10)& (0+255),c
 42852  005444  0E00               	movlw	0
 42853  005446  2014               	addwfc	??i2_TMR_GetDeltaTime+7,w,c
 42854  005448  6E18               	movwf	(??i2_TMR_GetDeltaTime+11)& (0+255),c
 42855  00544A  500D               	movf	??i2_TMR_GetDeltaTime,w,c
 42856  00544C  2415               	addwf	??i2_TMR_GetDeltaTime+8,w,c
 42857  00544E  6E19               	movwf	(??i2_TMR_GetDeltaTime+12)& (0+255),c
 42858  005450  500E               	movf	??i2_TMR_GetDeltaTime+1,w,c
 42859  005452  2016               	addwfc	??i2_TMR_GetDeltaTime+9,w,c
 42860  005454  6E1A               	movwf	(??i2_TMR_GetDeltaTime+13)& (0+255),c
 42861  005456  500F               	movf	??i2_TMR_GetDeltaTime+2,w,c
 42862  005458  2017               	addwfc	??i2_TMR_GetDeltaTime+10,w,c
 42863  00545A  6E1B               	movwf	(??i2_TMR_GetDeltaTime+14)& (0+255),c
 42864  00545C  5010               	movf	??i2_TMR_GetDeltaTime+3,w,c
 42865  00545E  2018               	addwfc	??i2_TMR_GetDeltaTime+11,w,c
 42866  005460  6E1C               	movwf	(??i2_TMR_GetDeltaTime+15)& (0+255),c
 42867  005462  5108               	movf	_ticksAdded& (0+255),w,b	;volatile
 42868  005464  2419               	addwf	??i2_TMR_GetDeltaTime+12,w,c
 42869  005466  6E1D               	movwf	(??i2_TMR_GetDeltaTime+16)& (0+255),c
 42870  005468  5109               	movf	(_ticksAdded+1)& (0+255),w,b	;volatile
 42871  00546A  201A               	addwfc	??i2_TMR_GetDeltaTime+13,w,c
 42872  00546C  6E1E               	movwf	(??i2_TMR_GetDeltaTime+17)& (0+255),c
 42873  00546E  510A               	movf	(_ticksAdded+2)& (0+255),w,b	;volatile
 42874  005470  201B               	addwfc	??i2_TMR_GetDeltaTime+14,w,c
 42875  005472  6E1F               	movwf	(??i2_TMR_GetDeltaTime+18)& (0+255),c
 42876  005474  510B               	movf	(_ticksAdded+3)& (0+255),w,b	;volatile
 42877  005476  201C               	addwfc	??i2_TMR_GetDeltaTime+15,w,c
 42878  005478  6E20               	movwf	(??i2_TMR_GetDeltaTime+19)& (0+255),c
 42879  00547A  0E00               	movlw	0
 42880  00547C  241D               	addwf	??i2_TMR_GetDeltaTime+16,w,c
 42881  00547E  6F00               	movwf	TMR_GetDeltaTime@retVal& (0+255),b
 42882  005480  0E00               	movlw	0
 42883  005482  201E               	addwfc	??i2_TMR_GetDeltaTime+17,w,c
 42884  005484  6F01               	movwf	(TMR_GetDeltaTime@retVal+1)& (0+255),b
 42885  005486  0E01               	movlw	1
 42886  005488  201F               	addwfc	??i2_TMR_GetDeltaTime+18,w,c
 42887  00548A  6F02               	movwf	(TMR_GetDeltaTime@retVal+2)& (0+255),b
 42888  00548C  0E00               	movlw	0
 42889  00548E  2020               	addwfc	??i2_TMR_GetDeltaTime+19,w,c
 42890  005490  6F03               	movwf	(TMR_GetDeltaTime@retVal+3)& (0+255),b
 42891                           
 42892                           ; BSR set to: 1
 42893                           ;sw_timer.c: 99: ticksAccounted = tmrVal;
 42894  005492  C14A  F104         	movff	TMR_GetDeltaTime@tmrVal,_ticksAccounted	;volatile
 42895  005496  C14B  F105         	movff	TMR_GetDeltaTime@tmrVal+1,_ticksAccounted+1	;volatile
 42896  00549A  6B06               	clrf	(_ticksAccounted+2)& (0+255),b	;volatile
 42897  00549C  6B07               	clrf	(_ticksAccounted+3)& (0+255),b	;volatile
 42898                           
 42899                           ; BSR set to: 1
 42900                           ;sw_timer.c: 100: ticksAdded = 0;
 42901  00549E  0E00               	movlw	0
 42902  0054A0  6F08               	movwf	_ticksAdded& (0+255),b	;volatile
 42903  0054A2  0E00               	movlw	0
 42904  0054A4  6F09               	movwf	(_ticksAdded+1)& (0+255),b	;volatile
 42905  0054A6  0E00               	movlw	0
 42906  0054A8  6F0A               	movwf	(_ticksAdded+2)& (0+255),b	;volatile
 42907  0054AA  0E00               	movlw	0
 42908  0054AC  6F0B               	movwf	(_ticksAdded+3)& (0+255),b	;volatile
 42909                           
 42910                           ; BSR set to: 1
 42911                           ;sw_timer.c: 101: reloadVal = 0;
 42912  0054AE  0E00               	movlw	0
 42913  0054B0  6E4D               	movwf	_reloadVal+1,c	;volatile
 42914  0054B2  0E00               	movlw	0
 42915  0054B4  6E4C               	movwf	_reloadVal,c	;volatile
 42916                           
 42917                           ;sw_timer.c: 102: }
 42918  0054B6  D03E               	goto	i2l1526
 42919  0054B8                     i2l1525:
 42920                           
 42921                           ;sw_timer.c: 103: else
 42922                           ;sw_timer.c: 104: {
 42923                           ;sw_timer.c: 105: retVal = tmrVal - reloadVal - ticksAccounted + ticksAdded;
 42924                           
 42925                           ; BSR set to: 1
 42926  0054B8  C104  F00D         	movff	_ticksAccounted,??i2_TMR_GetDeltaTime	;volatile
 42927  0054BC  C105  F00E         	movff	_ticksAccounted+1,??i2_TMR_GetDeltaTime+1	;volatile
 42928  0054C0  C106  F00F         	movff	_ticksAccounted+2,??i2_TMR_GetDeltaTime+2	;volatile
 42929  0054C4  C107  F010         	movff	_ticksAccounted+3,??i2_TMR_GetDeltaTime+3	;volatile
 42930  0054C8  1E0D               	comf	??i2_TMR_GetDeltaTime,f,c
 42931  0054CA  1E0E               	comf	??i2_TMR_GetDeltaTime+1,f,c
 42932  0054CC  1E0F               	comf	??i2_TMR_GetDeltaTime+2,f,c
 42933  0054CE  1E10               	comf	??i2_TMR_GetDeltaTime+3,f,c
 42934  0054D0  2A0D               	incf	??i2_TMR_GetDeltaTime,f,c
 42935  0054D2  0E00               	movlw	0
 42936  0054D4  220E               	addwfc	??i2_TMR_GetDeltaTime+1,f,c
 42937  0054D6  220F               	addwfc	??i2_TMR_GetDeltaTime+2,f,c
 42938  0054D8  2210               	addwfc	??i2_TMR_GetDeltaTime+3,f,c
 42939  0054DA  C04C  F011         	movff	_reloadVal,??i2_TMR_GetDeltaTime+4	;volatile
 42940  0054DE  C04D  F012         	movff	_reloadVal+1,??i2_TMR_GetDeltaTime+5	;volatile
 42941  0054E2  1E11               	comf	??i2_TMR_GetDeltaTime+4,f,c
 42942  0054E4  1E12               	comf	??i2_TMR_GetDeltaTime+5,f,c
 42943  0054E6  4A11               	infsnz	??i2_TMR_GetDeltaTime+4,f,c
 42944  0054E8  2A12               	incf	??i2_TMR_GetDeltaTime+5,f,c
 42945  0054EA  0101               	movlb	1	; () banked
 42946  0054EC  514A               	movf	TMR_GetDeltaTime@tmrVal& (0+255),w,b
 42947  0054EE  2611               	addwf	??i2_TMR_GetDeltaTime+4,f,c
 42948  0054F0  514B               	movf	(TMR_GetDeltaTime@tmrVal+1)& (0+255),w,b
 42949  0054F2  2212               	addwfc	??i2_TMR_GetDeltaTime+5,f,c
 42950  0054F4  5011               	movf	??i2_TMR_GetDeltaTime+4,w,c
 42951  0054F6  240D               	addwf	??i2_TMR_GetDeltaTime,w,c
 42952  0054F8  6E13               	movwf	(??i2_TMR_GetDeltaTime+6)& (0+255),c
 42953  0054FA  5012               	movf	??i2_TMR_GetDeltaTime+5,w,c
 42954  0054FC  200E               	addwfc	??i2_TMR_GetDeltaTime+1,w,c
 42955  0054FE  6E14               	movwf	(??i2_TMR_GetDeltaTime+7)& (0+255),c
 42956  005500  0E00               	movlw	0
 42957  005502  200F               	addwfc	??i2_TMR_GetDeltaTime+2,w,c
 42958  005504  6E15               	movwf	(??i2_TMR_GetDeltaTime+8)& (0+255),c
 42959  005506  0E00               	movlw	0
 42960  005508  2010               	addwfc	??i2_TMR_GetDeltaTime+3,w,c
 42961  00550A  6E16               	movwf	(??i2_TMR_GetDeltaTime+9)& (0+255),c
 42962  00550C  5108               	movf	_ticksAdded& (0+255),w,b	;volatile
 42963  00550E  2413               	addwf	??i2_TMR_GetDeltaTime+6,w,c
 42964  005510  6F00               	movwf	TMR_GetDeltaTime@retVal& (0+255),b
 42965  005512  5109               	movf	(_ticksAdded+1)& (0+255),w,b	;volatile
 42966  005514  2014               	addwfc	??i2_TMR_GetDeltaTime+7,w,c
 42967  005516  6F01               	movwf	(TMR_GetDeltaTime@retVal+1)& (0+255),b
 42968  005518  510A               	movf	(_ticksAdded+2)& (0+255),w,b	;volatile
 42969  00551A  2015               	addwfc	??i2_TMR_GetDeltaTime+8,w,c
 42970  00551C  6F02               	movwf	(TMR_GetDeltaTime@retVal+2)& (0+255),b
 42971  00551E  510B               	movf	(_ticksAdded+3)& (0+255),w,b	;volatile
 42972  005520  2016               	addwfc	??i2_TMR_GetDeltaTime+9,w,c
 42973  005522  6F03               	movwf	(TMR_GetDeltaTime@retVal+3)& (0+255),b
 42974                           
 42975                           ;sw_timer.c: 106: ticksAccounted += retVal;
 42976  005524  5100               	movf	TMR_GetDeltaTime@retVal& (0+255),w,b
 42977  005526  2704               	addwf	_ticksAccounted& (0+255),f,b	;volatile
 42978  005528  5101               	movf	(TMR_GetDeltaTime@retVal+1)& (0+255),w,b
 42979  00552A  2305               	addwfc	(_ticksAccounted+1)& (0+255),f,b	;volatile
 42980  00552C  5102               	movf	(TMR_GetDeltaTime@retVal+2)& (0+255),w,b
 42981  00552E  2306               	addwfc	(_ticksAccounted+2)& (0+255),f,b	;volatile
 42982  005530  5103               	movf	(TMR_GetDeltaTime@retVal+3)& (0+255),w,b
 42983  005532  2307               	addwfc	(_ticksAccounted+3)& (0+255),f,b	;volatile
 42984  005534                     i2l1526:
 42985                           
 42986                           ; BSR set to: 1
 42987                           ;sw_timer.c: 107: }
 42988                           ;sw_timer.c: 109: return retVal;
 42989                           
 42990                           ; BSR set to: 1
 42991  005534  C100  F009         	movff	TMR_GetDeltaTime@retVal,?i2_TMR_GetDeltaTime
 42992  005538  C101  F00A         	movff	TMR_GetDeltaTime@retVal+1,?i2_TMR_GetDeltaTime+1
 42993  00553C  C102  F00B         	movff	TMR_GetDeltaTime@retVal+2,?i2_TMR_GetDeltaTime+2
 42994  005540  C103  F00C         	movff	TMR_GetDeltaTime@retVal+3,?i2_TMR_GetDeltaTime+3
 42995  005544  0012               	return	
 42996  005546                     __end_ofi2_TMR_GetDeltaTime:
 42997                           	opt stack 0
 42998                           tosu	equ	0xFFF
 42999                           tosh	equ	0xFFE
 43000                           tosl	equ	0xFFD
 43001                           pclatu	equ	0xFFB
 43002                           pclath	equ	0xFFA
 43003                           tblptru	equ	0xFF8
 43004                           tblptrh	equ	0xFF7
 43005                           tblptrl	equ	0xFF6
 43006                           tablat	equ	0xFF5
 43007                           prodh	equ	0xFF4
 43008                           prodl	equ	0xFF3
 43009                           intcon	equ	0xFF2
 43010                           intcon2	equ	0xFF1
 43011                           intcon3	equ	0xFF0
 43012                           indf0	equ	0xFEF
 43013                           postinc0	equ	0xFEE
 43014                           plusw0	equ	0xFEB
 43015                           fsr0h	equ	0xFEA
 43016                           fsr0l	equ	0xFE9
 43017                           wreg	equ	0xFE8
 43018                           postinc1	equ	0xFE6
 43019                           postdec1	equ	0xFE5
 43020                           plusw1	equ	0xFE3
 43021                           fsr1h	equ	0xFE2
 43022                           fsr1l	equ	0xFE1
 43023                           indf2	equ	0xFDF
 43024                           postinc2	equ	0xFDE
 43025                           postdec2	equ	0xFDD
 43026                           plusw2	equ	0xFDB
 43027                           fsr2h	equ	0xFDA
 43028                           fsr2l	equ	0xFD9
 43029                           status	equ	0xFD8
 43030                           
 43031 ;; *************** function i2_TMR1_ReadTimer *****************
 43032 ;; Defined at:
 43033 ;;		line 105 in file "mcc_generated_files/tmr1.c"
 43034 ;; Parameters:    Size  Location     Type
 43035 ;;		None
 43036 ;; Auto vars:     Size  Location     Type
 43037 ;;  TMR1_ReadTim    2    4[COMRAM] unsigned int 
 43038 ;;  TMR1_ReadTim    1    7[COMRAM] unsigned char 
 43039 ;;  TMR1_ReadTim    1    6[COMRAM] unsigned char 
 43040 ;; Return value:  Size  Location     Type
 43041 ;;                  2    0[COMRAM] unsigned int 
 43042 ;; Registers used:
 43043 ;;		wreg, status,2
 43044 ;; Tracked objects:
 43045 ;;		On entry : 0/0
 43046 ;;		On exit  : 0/0
 43047 ;;		Unchanged: 0/0
 43048 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 43049 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 43050 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 43051 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 43052 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 43053 ;;Total ram usage:        8 bytes
 43054 ;; Hardware stack levels used:    1
 43055 ;; This function calls:
 43056 ;;		Nothing
 43057 ;; This function is called by:
 43058 ;;		i2_TMR_GetDeltaTime
 43059 ;;		i2_TMR_SwapTimer
 43060 ;; This function uses a non-reentrant model
 43061 ;;
 43062                           
 43063                           	psect	text212
 43064  00921C                     __ptext212:
 43065                           	opt stack 0
 43066  00921C                     i2_TMR1_ReadTimer:
 43067                           	opt stack 13
 43068                           
 43069                           ;tmr1.c: 107: uint16_t readVal;
 43070                           ;tmr1.c: 108: uint8_t readValHigh;
 43071                           ;tmr1.c: 109: uint8_t readValLow;
 43072                           ;tmr1.c: 111: T1CONbits.T1RD16 = 1;
 43073                           
 43074                           ; BSR set to: 1
 43075                           ;incstack = 0
 43076  00921C  82CD               	bsf	4045,1,c	;volatile
 43077                           
 43078                           ;tmr1.c: 113: readValLow = TMR1L;
 43079  00921E  CFCE F008          	movff	4046,i2TMR1_ReadTimer@readValLow	;volatile
 43080                           
 43081                           ;tmr1.c: 114: readValHigh = TMR1H;
 43082  009222  CFCF F007          	movff	4047,i2TMR1_ReadTimer@readValHigh	;volatile
 43083                           
 43084                           ;tmr1.c: 116: readVal = ((uint16_t)readValHigh << 8) | readValLow;
 43085  009226  5007               	movf	i2TMR1_ReadTimer@readValHigh,w,c
 43086  009228  6E03               	movwf	??i2_TMR1_ReadTimer& (0+255),c
 43087  00922A  5008               	movf	i2TMR1_ReadTimer@readValLow,w,c
 43088  00922C  6E05               	movwf	i2TMR1_ReadTimer@readVal,c
 43089  00922E  C003  F006         	movff	??i2_TMR1_ReadTimer,i2TMR1_ReadTimer@readVal+1
 43090                           
 43091                           ;tmr1.c: 118: return readVal;
 43092  009232  C005  F001         	movff	i2TMR1_ReadTimer@readVal,?i2_TMR1_ReadTimer
 43093  009236  C006  F002         	movff	i2TMR1_ReadTimer@readVal+1,?i2_TMR1_ReadTimer+1
 43094  00923A  0012               	return	
 43095  00923C                     __end_ofi2_TMR1_ReadTimer:
 43096                           	opt stack 0
 43097                           tosu	equ	0xFFF
 43098                           tosh	equ	0xFFE
 43099                           tosl	equ	0xFFD
 43100                           pclatu	equ	0xFFB
 43101                           pclath	equ	0xFFA
 43102                           tblptru	equ	0xFF8
 43103                           tblptrh	equ	0xFF7
 43104                           tblptrl	equ	0xFF6
 43105                           tablat	equ	0xFF5
 43106                           prodh	equ	0xFF4
 43107                           prodl	equ	0xFF3
 43108                           intcon	equ	0xFF2
 43109                           intcon2	equ	0xFF1
 43110                           intcon3	equ	0xFF0
 43111                           indf0	equ	0xFEF
 43112                           postinc0	equ	0xFEE
 43113                           plusw0	equ	0xFEB
 43114                           fsr0h	equ	0xFEA
 43115                           fsr0l	equ	0xFE9
 43116                           wreg	equ	0xFE8
 43117                           postinc1	equ	0xFE6
 43118                           postdec1	equ	0xFE5
 43119                           plusw1	equ	0xFE3
 43120                           fsr1h	equ	0xFE2
 43121                           fsr1l	equ	0xFE1
 43122                           indf2	equ	0xFDF
 43123                           postinc2	equ	0xFDE
 43124                           postdec2	equ	0xFDD
 43125                           plusw2	equ	0xFDB
 43126                           fsr2h	equ	0xFDA
 43127                           fsr2l	equ	0xFD9
 43128                           status	equ	0xFD8
 43129                           
 43130 ;; *************** function _PIN_MANAGER_IOC *****************
 43131 ;; Defined at:
 43132 ;;		line 110 in file "mcc_generated_files/pin_manager.c"
 43133 ;; Parameters:    Size  Location     Type
 43134 ;;		None
 43135 ;; Auto vars:     Size  Location     Type
 43136 ;;		None
 43137 ;; Return value:  Size  Location     Type
 43138 ;;                  1    wreg      void 
 43139 ;; Registers used:
 43140 ;;		wreg, status,2, status,0, pclath, tosl, cstack
 43141 ;; Tracked objects:
 43142 ;;		On entry : 0/0
 43143 ;;		On exit  : 0/0
 43144 ;;		Unchanged: 0/0
 43145 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 43146 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 43147 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 43148 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 43149 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 43150 ;;Total ram usage:        0 bytes
 43151 ;; Hardware stack levels used:    1
 43152 ;; Hardware stack levels required when called:    2
 43153 ;; This function calls:
 43154 ;;		_IOCB4_ISR
 43155 ;; This function is called by:
 43156 ;;		_INTERRUPT_InterruptManager
 43157 ;; This function uses a non-reentrant model
 43158 ;;
 43159                           
 43160                           	psect	text213
 43161  00957C                     __ptext213:
 43162                           	opt stack 0
 43163  00957C                     _PIN_MANAGER_IOC:
 43164                           	opt stack 15
 43165                           
 43166                           ;pin_manager.c: 113: if(IOCBbits.IOCB4 == 1)
 43167                           
 43168                           ;incstack = 0
 43169  00957C  B862               	btfsc	3938,4,c	;volatile
 43170                           
 43171                           ;pin_manager.c: 114: {
 43172                           ;pin_manager.c: 115: IOCB4_ISR();
 43173  00957E  EC1E  F049         	call	_IOCB4_ISR	;wreg free
 43174                           
 43175                           ;pin_manager.c: 116: }
 43176                           ;pin_manager.c: 118: INTCONbits.RBIF = 0;
 43177  009582  90F2               	bcf	intcon,0,c	;volatile
 43178  009584  0012               	return		;funcret
 43179  009586                     __end_of_PIN_MANAGER_IOC:
 43180                           	opt stack 0
 43181                           tosu	equ	0xFFF
 43182                           tosh	equ	0xFFE
 43183                           tosl	equ	0xFFD
 43184                           pclatu	equ	0xFFB
 43185                           pclath	equ	0xFFA
 43186                           tblptru	equ	0xFF8
 43187                           tblptrh	equ	0xFF7
 43188                           tblptrl	equ	0xFF6
 43189                           tablat	equ	0xFF5
 43190                           prodh	equ	0xFF4
 43191                           prodl	equ	0xFF3
 43192                           intcon	equ	0xFF2
 43193                           intcon2	equ	0xFF1
 43194                           intcon3	equ	0xFF0
 43195                           indf0	equ	0xFEF
 43196                           postinc0	equ	0xFEE
 43197                           plusw0	equ	0xFEB
 43198                           fsr0h	equ	0xFEA
 43199                           fsr0l	equ	0xFE9
 43200                           wreg	equ	0xFE8
 43201                           postinc1	equ	0xFE6
 43202                           postdec1	equ	0xFE5
 43203                           plusw1	equ	0xFE3
 43204                           fsr1h	equ	0xFE2
 43205                           fsr1l	equ	0xFE1
 43206                           indf2	equ	0xFDF
 43207                           postinc2	equ	0xFDE
 43208                           postdec2	equ	0xFDD
 43209                           plusw2	equ	0xFDB
 43210                           fsr2h	equ	0xFDA
 43211                           fsr2l	equ	0xFD9
 43212                           status	equ	0xFD8
 43213                           
 43214 ;; *************** function _IOCB4_ISR *****************
 43215 ;; Defined at:
 43216 ;;		line 124 in file "mcc_generated_files/pin_manager.c"
 43217 ;; Parameters:    Size  Location     Type
 43218 ;;		None
 43219 ;; Auto vars:     Size  Location     Type
 43220 ;;		None
 43221 ;; Return value:  Size  Location     Type
 43222 ;;                  1    wreg      void 
 43223 ;; Registers used:
 43224 ;;		wreg, status,2, status,0, pclath, tosl, cstack
 43225 ;; Tracked objects:
 43226 ;;		On entry : 0/0
 43227 ;;		On exit  : 0/0
 43228 ;;		Unchanged: 0/0
 43229 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 43230 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 43231 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 43232 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 43233 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 43234 ;;Total ram usage:        0 bytes
 43235 ;; Hardware stack levels used:    1
 43236 ;; Hardware stack levels required when called:    1
 43237 ;; This function calls:
 43238 ;;		Absolute function
 43239 ;;		_DIO2_ISR_Lora
 43240 ;;		_IOCB4_DefaultInterruptHandler
 43241 ;; This function is called by:
 43242 ;;		_PIN_MANAGER_IOC
 43243 ;; This function uses a non-reentrant model
 43244 ;;
 43245                           
 43246                           	psect	text214
 43247  00923C                     __ptext214:
 43248                           	opt stack 0
 43249  00923C                     _IOCB4_ISR:
 43250                           	opt stack 15
 43251                           
 43252                           ;pin_manager.c: 129: if(IOCB4_InterruptHandler)
 43253                           
 43254                           ;incstack = 0
 43255  00923C  0103               	movlb	3	; () banked
 43256  00923E  51ED               	movf	_IOCB4_InterruptHandler& (0+255),w,b
 43257  009240  11EE               	iorwf	(_IOCB4_InterruptHandler+1)& (0+255),w,b
 43258  009242  B4D8               	btfsc	status,2,c
 43259  009244  0012               	return	
 43260                           
 43261                           ; BSR set to: 3
 43262                           ;pin_manager.c: 130: {
 43263                           ;pin_manager.c: 131: IOCB4_InterruptHandler();
 43264  009246  D801               	call	i2u1679_48
 43265  009248  0012               	return	
 43266  00924A                     i2u1679_48:
 43267  00924A  0005               	push	
 43268  00924C  6EFA               	movwf	pclath,c
 43269  00924E  51ED               	movf	_IOCB4_InterruptHandler& (0+255),w,b
 43270  009250  6EFD               	movwf	tosl,c
 43271  009252  51EE               	movf	(_IOCB4_InterruptHandler+1)& (0+255),w,b
 43272  009254  6EFE               	movwf	tosh,c
 43273  009256  6AFF               	clrf	tosu,c
 43274  009258  50FA               	movf	pclath,w,c
 43275  00925A  0012               	return		;indir
 43276  00925C                     __end_of_IOCB4_ISR:
 43277                           	opt stack 0
 43278                           tosu	equ	0xFFF
 43279                           tosh	equ	0xFFE
 43280                           tosl	equ	0xFFD
 43281                           pclatu	equ	0xFFB
 43282                           pclath	equ	0xFFA
 43283                           tblptru	equ	0xFF8
 43284                           tblptrh	equ	0xFF7
 43285                           tblptrl	equ	0xFF6
 43286                           tablat	equ	0xFF5
 43287                           prodh	equ	0xFF4
 43288                           prodl	equ	0xFF3
 43289                           intcon	equ	0xFF2
 43290                           intcon2	equ	0xFF1
 43291                           intcon3	equ	0xFF0
 43292                           indf0	equ	0xFEF
 43293                           postinc0	equ	0xFEE
 43294                           plusw0	equ	0xFEB
 43295                           fsr0h	equ	0xFEA
 43296                           fsr0l	equ	0xFE9
 43297                           wreg	equ	0xFE8
 43298                           postinc1	equ	0xFE6
 43299                           postdec1	equ	0xFE5
 43300                           plusw1	equ	0xFE3
 43301                           fsr1h	equ	0xFE2
 43302                           fsr1l	equ	0xFE1
 43303                           indf2	equ	0xFDF
 43304                           postinc2	equ	0xFDE
 43305                           postdec2	equ	0xFDD
 43306                           plusw2	equ	0xFDB
 43307                           fsr2h	equ	0xFDA
 43308                           fsr2l	equ	0xFD9
 43309                           status	equ	0xFD8
 43310                           
 43311 ;; *************** function _DIO2_ISR_Lora *****************
 43312 ;; Defined at:
 43313 ;;		line 73 in file "mcc_generated_files/LoRaWAN/interrupt_manager_lora_addons.c"
 43314 ;; Parameters:    Size  Location     Type
 43315 ;;		None
 43316 ;; Auto vars:     Size  Location     Type
 43317 ;;		None
 43318 ;; Return value:  Size  Location     Type
 43319 ;;                  1    wreg      void 
 43320 ;; Registers used:
 43321 ;;		status,2, status,0
 43322 ;; Tracked objects:
 43323 ;;		On entry : 0/0
 43324 ;;		On exit  : 0/0
 43325 ;;		Unchanged: 0/0
 43326 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 43327 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 43328 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 43329 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 43330 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 43331 ;;Total ram usage:        0 bytes
 43332 ;; Hardware stack levels used:    1
 43333 ;; This function calls:
 43334 ;;		Nothing
 43335 ;; This function is called by:
 43336 ;;		_DIO2_ISR_Lora_Init
 43337 ;;		_IOCB4_ISR
 43338 ;; This function uses a non-reentrant model
 43339 ;;
 43340                           
 43341                           	psect	text215
 43342  0095B0                     __ptext215:
 43343                           	opt stack 0
 43344  0095B0                     _DIO2_ISR_Lora:
 43345                           	opt stack 15
 43346                           
 43347                           ;interrupt_manager_lora_addons.c: 75: dioStatus |= 0x04;
 43348                           
 43349                           ;incstack = 0
 43350  0095B0  0101               	movlb	1	; () banked
 43351  0095B2  8556               	bsf	_dioStatus& (0+255),2,b	;volatile
 43352                           
 43353                           ; BSR set to: 1
 43354  0095B4  0012               	return		;funcret
 43355  0095B6                     __end_of_DIO2_ISR_Lora:
 43356                           	opt stack 0
 43357                           tosu	equ	0xFFF
 43358                           tosh	equ	0xFFE
 43359                           tosl	equ	0xFFD
 43360                           pclatu	equ	0xFFB
 43361                           pclath	equ	0xFFA
 43362                           tblptru	equ	0xFF8
 43363                           tblptrh	equ	0xFF7
 43364                           tblptrl	equ	0xFF6
 43365                           tablat	equ	0xFF5
 43366                           prodh	equ	0xFF4
 43367                           prodl	equ	0xFF3
 43368                           intcon	equ	0xFF2
 43369                           intcon2	equ	0xFF1
 43370                           intcon3	equ	0xFF0
 43371                           indf0	equ	0xFEF
 43372                           postinc0	equ	0xFEE
 43373                           plusw0	equ	0xFEB
 43374                           fsr0h	equ	0xFEA
 43375                           fsr0l	equ	0xFE9
 43376                           wreg	equ	0xFE8
 43377                           postinc1	equ	0xFE6
 43378                           postdec1	equ	0xFE5
 43379                           plusw1	equ	0xFE3
 43380                           fsr1h	equ	0xFE2
 43381                           fsr1l	equ	0xFE1
 43382                           indf2	equ	0xFDF
 43383                           postinc2	equ	0xFDE
 43384                           postdec2	equ	0xFDD
 43385                           plusw2	equ	0xFDB
 43386                           fsr2h	equ	0xFDA
 43387                           fsr2l	equ	0xFD9
 43388                           status	equ	0xFD8
 43389                           
 43390 ;; *************** function _IOCB4_DefaultInterruptHandler *****************
 43391 ;; Defined at:
 43392 ;;		line 145 in file "mcc_generated_files/pin_manager.c"
 43393 ;; Parameters:    Size  Location     Type
 43394 ;;		None
 43395 ;; Auto vars:     Size  Location     Type
 43396 ;;		None
 43397 ;; Return value:  Size  Location     Type
 43398 ;;                  1    wreg      void 
 43399 ;; Registers used:
 43400 ;;		None
 43401 ;; Tracked objects:
 43402 ;;		On entry : 0/0
 43403 ;;		On exit  : 0/0
 43404 ;;		Unchanged: 0/0
 43405 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 43406 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 43407 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 43408 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 43409 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 43410 ;;Total ram usage:        0 bytes
 43411 ;; Hardware stack levels used:    1
 43412 ;; This function calls:
 43413 ;;		Nothing
 43414 ;; This function is called by:
 43415 ;;		_PIN_MANAGER_Initialize
 43416 ;;		_IOCB4_ISR
 43417 ;; This function uses a non-reentrant model
 43418 ;;
 43419                           
 43420                           	psect	text216
 43421  0095F6                     __ptext216:
 43422                           	opt stack 0
 43423  0095F6                     _IOCB4_DefaultInterruptHandler:
 43424                           	opt stack 15
 43425                           
 43426                           ; BSR set to: 1
 43427                           ;incstack = 0
 43428  0095F6  0012               	return		;funcret
 43429  0095F8                     __end_of_IOCB4_DefaultInterruptHandler:
 43430                           	opt stack 0
 43431                           tosu	equ	0xFFF
 43432                           tosh	equ	0xFFE
 43433                           tosl	equ	0xFFD
 43434                           pclatu	equ	0xFFB
 43435                           pclath	equ	0xFFA
 43436                           tblptru	equ	0xFF8
 43437                           tblptrh	equ	0xFF7
 43438                           tblptrl	equ	0xFF6
 43439                           tablat	equ	0xFF5
 43440                           prodh	equ	0xFF4
 43441                           prodl	equ	0xFF3
 43442                           intcon	equ	0xFF2
 43443                           intcon2	equ	0xFF1
 43444                           intcon3	equ	0xFF0
 43445                           indf0	equ	0xFEF
 43446                           postinc0	equ	0xFEE
 43447                           plusw0	equ	0xFEB
 43448                           fsr0h	equ	0xFEA
 43449                           fsr0l	equ	0xFE9
 43450                           wreg	equ	0xFE8
 43451                           postinc1	equ	0xFE6
 43452                           postdec1	equ	0xFE5
 43453                           plusw1	equ	0xFE3
 43454                           fsr1h	equ	0xFE2
 43455                           fsr1l	equ	0xFE1
 43456                           indf2	equ	0xFDF
 43457                           postinc2	equ	0xFDE
 43458                           postdec2	equ	0xFDD
 43459                           plusw2	equ	0xFDB
 43460                           fsr2h	equ	0xFDA
 43461                           fsr2l	equ	0xFD9
 43462                           status	equ	0xFD8
 43463                           
 43464 ;; *************** function _INT2_ISR *****************
 43465 ;; Defined at:
 43466 ;;		line 59 in file "mcc_generated_files/ext_int.c"
 43467 ;; Parameters:    Size  Location     Type
 43468 ;;		None
 43469 ;; Auto vars:     Size  Location     Type
 43470 ;;		None
 43471 ;; Return value:  Size  Location     Type
 43472 ;;                  1    wreg      void 
 43473 ;; Registers used:
 43474 ;;		wreg, status,2, status,0, pclath, tosl, cstack
 43475 ;; Tracked objects:
 43476 ;;		On entry : 0/0
 43477 ;;		On exit  : 0/0
 43478 ;;		Unchanged: 0/0
 43479 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 43480 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 43481 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 43482 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 43483 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 43484 ;;Total ram usage:        0 bytes
 43485 ;; Hardware stack levels used:    1
 43486 ;; Hardware stack levels required when called:    2
 43487 ;; This function calls:
 43488 ;;		_INT2_CallBack
 43489 ;; This function is called by:
 43490 ;;		_INTERRUPT_InterruptManager
 43491 ;; This function uses a non-reentrant model
 43492 ;;
 43493                           
 43494                           	psect	text217
 43495  00958E                     __ptext217:
 43496                           	opt stack 0
 43497  00958E                     _INT2_ISR:
 43498                           	opt stack 15
 43499                           
 43500                           ;ext_int.c: 61: (INTCON3bits.INT2IF = 0);
 43501                           
 43502                           ;incstack = 0
 43503  00958E  92F0               	bcf	intcon3,1,c	;volatile
 43504                           
 43505                           ;ext_int.c: 64: INT2_CallBack();
 43506  009590  EC2E  F049         	call	_INT2_CallBack	;wreg free
 43507  009594  0012               	return		;funcret
 43508  009596                     __end_of_INT2_ISR:
 43509                           	opt stack 0
 43510                           tosu	equ	0xFFF
 43511                           tosh	equ	0xFFE
 43512                           tosl	equ	0xFFD
 43513                           pclatu	equ	0xFFB
 43514                           pclath	equ	0xFFA
 43515                           tblptru	equ	0xFF8
 43516                           tblptrh	equ	0xFF7
 43517                           tblptrl	equ	0xFF6
 43518                           tablat	equ	0xFF5
 43519                           prodh	equ	0xFF4
 43520                           prodl	equ	0xFF3
 43521                           intcon	equ	0xFF2
 43522                           intcon2	equ	0xFF1
 43523                           intcon3	equ	0xFF0
 43524                           indf0	equ	0xFEF
 43525                           postinc0	equ	0xFEE
 43526                           plusw0	equ	0xFEB
 43527                           fsr0h	equ	0xFEA
 43528                           fsr0l	equ	0xFE9
 43529                           wreg	equ	0xFE8
 43530                           postinc1	equ	0xFE6
 43531                           postdec1	equ	0xFE5
 43532                           plusw1	equ	0xFE3
 43533                           fsr1h	equ	0xFE2
 43534                           fsr1l	equ	0xFE1
 43535                           indf2	equ	0xFDF
 43536                           postinc2	equ	0xFDE
 43537                           postdec2	equ	0xFDD
 43538                           plusw2	equ	0xFDB
 43539                           fsr2h	equ	0xFDA
 43540                           fsr2l	equ	0xFD9
 43541                           status	equ	0xFD8
 43542                           
 43543 ;; *************** function _INT2_CallBack *****************
 43544 ;; Defined at:
 43545 ;;		line 68 in file "mcc_generated_files/ext_int.c"
 43546 ;; Parameters:    Size  Location     Type
 43547 ;;		None
 43548 ;; Auto vars:     Size  Location     Type
 43549 ;;		None
 43550 ;; Return value:  Size  Location     Type
 43551 ;;                  1    wreg      void 
 43552 ;; Registers used:
 43553 ;;		wreg, status,2, status,0, pclath, tosl, cstack
 43554 ;; Tracked objects:
 43555 ;;		On entry : 0/0
 43556 ;;		On exit  : 0/0
 43557 ;;		Unchanged: 0/0
 43558 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 43559 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 43560 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 43561 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 43562 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 43563 ;;Total ram usage:        0 bytes
 43564 ;; Hardware stack levels used:    1
 43565 ;; Hardware stack levels required when called:    1
 43566 ;; This function calls:
 43567 ;;		Absolute function
 43568 ;;		_DIO1_ISR_Lora
 43569 ;;		_INT2_DefaultInterruptHandler
 43570 ;; This function is called by:
 43571 ;;		_INT2_ISR
 43572 ;; This function uses a non-reentrant model
 43573 ;;
 43574                           
 43575                           	psect	text218
 43576  00925C                     __ptext218:
 43577                           	opt stack 0
 43578  00925C                     _INT2_CallBack:
 43579                           	opt stack 15
 43580                           
 43581                           ;ext_int.c: 71: if(INT2_InterruptHandler)
 43582                           
 43583                           ;incstack = 0
 43584  00925C  0103               	movlb	3	; () banked
 43585  00925E  51F3               	movf	_INT2_InterruptHandler& (0+255),w,b
 43586  009260  11F4               	iorwf	(_INT2_InterruptHandler+1)& (0+255),w,b
 43587  009262  B4D8               	btfsc	status,2,c
 43588  009264  0012               	return	
 43589                           
 43590                           ; BSR set to: 3
 43591                           ;ext_int.c: 72: {
 43592                           ;ext_int.c: 73: INT2_InterruptHandler();
 43593  009266  D801               	call	i2u1677_48
 43594  009268  0012               	return	
 43595  00926A                     i2u1677_48:
 43596  00926A  0005               	push	
 43597  00926C  6EFA               	movwf	pclath,c
 43598  00926E  51F3               	movf	_INT2_InterruptHandler& (0+255),w,b
 43599  009270  6EFD               	movwf	tosl,c
 43600  009272  51F4               	movf	(_INT2_InterruptHandler+1)& (0+255),w,b
 43601  009274  6EFE               	movwf	tosh,c
 43602  009276  6AFF               	clrf	tosu,c
 43603  009278  50FA               	movf	pclath,w,c
 43604  00927A  0012               	return		;indir
 43605  00927C                     __end_of_INT2_CallBack:
 43606                           	opt stack 0
 43607                           tosu	equ	0xFFF
 43608                           tosh	equ	0xFFE
 43609                           tosl	equ	0xFFD
 43610                           pclatu	equ	0xFFB
 43611                           pclath	equ	0xFFA
 43612                           tblptru	equ	0xFF8
 43613                           tblptrh	equ	0xFF7
 43614                           tblptrl	equ	0xFF6
 43615                           tablat	equ	0xFF5
 43616                           prodh	equ	0xFF4
 43617                           prodl	equ	0xFF3
 43618                           intcon	equ	0xFF2
 43619                           intcon2	equ	0xFF1
 43620                           intcon3	equ	0xFF0
 43621                           indf0	equ	0xFEF
 43622                           postinc0	equ	0xFEE
 43623                           plusw0	equ	0xFEB
 43624                           fsr0h	equ	0xFEA
 43625                           fsr0l	equ	0xFE9
 43626                           wreg	equ	0xFE8
 43627                           postinc1	equ	0xFE6
 43628                           postdec1	equ	0xFE5
 43629                           plusw1	equ	0xFE3
 43630                           fsr1h	equ	0xFE2
 43631                           fsr1l	equ	0xFE1
 43632                           indf2	equ	0xFDF
 43633                           postinc2	equ	0xFDE
 43634                           postdec2	equ	0xFDD
 43635                           plusw2	equ	0xFDB
 43636                           fsr2h	equ	0xFDA
 43637                           fsr2l	equ	0xFD9
 43638                           status	equ	0xFD8
 43639                           
 43640 ;; *************** function _DIO1_ISR_Lora *****************
 43641 ;; Defined at:
 43642 ;;		line 68 in file "mcc_generated_files/LoRaWAN/interrupt_manager_lora_addons.c"
 43643 ;; Parameters:    Size  Location     Type
 43644 ;;		None
 43645 ;; Auto vars:     Size  Location     Type
 43646 ;;		None
 43647 ;; Return value:  Size  Location     Type
 43648 ;;                  1    wreg      void 
 43649 ;; Registers used:
 43650 ;;		status,2, status,0
 43651 ;; Tracked objects:
 43652 ;;		On entry : 0/0
 43653 ;;		On exit  : 0/0
 43654 ;;		Unchanged: 0/0
 43655 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 43656 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 43657 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 43658 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 43659 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 43660 ;;Total ram usage:        0 bytes
 43661 ;; Hardware stack levels used:    1
 43662 ;; This function calls:
 43663 ;;		Nothing
 43664 ;; This function is called by:
 43665 ;;		_DIO1_ISR_Lora_Init
 43666 ;;		_INT2_CallBack
 43667 ;; This function uses a non-reentrant model
 43668 ;;
 43669                           
 43670                           	psect	text219
 43671  0095B6                     __ptext219:
 43672                           	opt stack 0
 43673  0095B6                     _DIO1_ISR_Lora:
 43674                           	opt stack 15
 43675                           
 43676                           ;interrupt_manager_lora_addons.c: 70: dioStatus |= 0x02;
 43677                           
 43678                           ;incstack = 0
 43679  0095B6  0101               	movlb	1	; () banked
 43680  0095B8  8356               	bsf	_dioStatus& (0+255),1,b	;volatile
 43681                           
 43682                           ; BSR set to: 1
 43683  0095BA  0012               	return		;funcret
 43684  0095BC                     __end_of_DIO1_ISR_Lora:
 43685                           	opt stack 0
 43686                           tosu	equ	0xFFF
 43687                           tosh	equ	0xFFE
 43688                           tosl	equ	0xFFD
 43689                           pclatu	equ	0xFFB
 43690                           pclath	equ	0xFFA
 43691                           tblptru	equ	0xFF8
 43692                           tblptrh	equ	0xFF7
 43693                           tblptrl	equ	0xFF6
 43694                           tablat	equ	0xFF5
 43695                           prodh	equ	0xFF4
 43696                           prodl	equ	0xFF3
 43697                           intcon	equ	0xFF2
 43698                           intcon2	equ	0xFF1
 43699                           intcon3	equ	0xFF0
 43700                           indf0	equ	0xFEF
 43701                           postinc0	equ	0xFEE
 43702                           plusw0	equ	0xFEB
 43703                           fsr0h	equ	0xFEA
 43704                           fsr0l	equ	0xFE9
 43705                           wreg	equ	0xFE8
 43706                           postinc1	equ	0xFE6
 43707                           postdec1	equ	0xFE5
 43708                           plusw1	equ	0xFE3
 43709                           fsr1h	equ	0xFE2
 43710                           fsr1l	equ	0xFE1
 43711                           indf2	equ	0xFDF
 43712                           postinc2	equ	0xFDE
 43713                           postdec2	equ	0xFDD
 43714                           plusw2	equ	0xFDB
 43715                           fsr2h	equ	0xFDA
 43716                           fsr2l	equ	0xFD9
 43717                           status	equ	0xFD8
 43718                           
 43719 ;; *************** function _INT2_DefaultInterruptHandler *****************
 43720 ;; Defined at:
 43721 ;;		line 81 in file "mcc_generated_files/ext_int.c"
 43722 ;; Parameters:    Size  Location     Type
 43723 ;;		None
 43724 ;; Auto vars:     Size  Location     Type
 43725 ;;		None
 43726 ;; Return value:  Size  Location     Type
 43727 ;;                  1    wreg      void 
 43728 ;; Registers used:
 43729 ;;		None
 43730 ;; Tracked objects:
 43731 ;;		On entry : 0/0
 43732 ;;		On exit  : 0/0
 43733 ;;		Unchanged: 0/0
 43734 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 43735 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 43736 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 43737 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 43738 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 43739 ;;Total ram usage:        0 bytes
 43740 ;; Hardware stack levels used:    1
 43741 ;; This function calls:
 43742 ;;		Nothing
 43743 ;; This function is called by:
 43744 ;;		_EXT_INT_Initialize
 43745 ;;		_INT2_CallBack
 43746 ;; This function uses a non-reentrant model
 43747 ;;
 43748                           
 43749                           	psect	text220
 43750  0095F8                     __ptext220:
 43751                           	opt stack 0
 43752  0095F8                     _INT2_DefaultInterruptHandler:
 43753                           	opt stack 15
 43754                           
 43755                           ; BSR set to: 1
 43756                           ;incstack = 0
 43757  0095F8  0012               	return		;funcret
 43758  0095FA                     __end_of_INT2_DefaultInterruptHandler:
 43759                           	opt stack 0
 43760                           tosu	equ	0xFFF
 43761                           tosh	equ	0xFFE
 43762                           tosl	equ	0xFFD
 43763                           pclatu	equ	0xFFB
 43764                           pclath	equ	0xFFA
 43765                           tblptru	equ	0xFF8
 43766                           tblptrh	equ	0xFF7
 43767                           tblptrl	equ	0xFF6
 43768                           tablat	equ	0xFF5
 43769                           prodh	equ	0xFF4
 43770                           prodl	equ	0xFF3
 43771                           intcon	equ	0xFF2
 43772                           intcon2	equ	0xFF1
 43773                           intcon3	equ	0xFF0
 43774                           indf0	equ	0xFEF
 43775                           postinc0	equ	0xFEE
 43776                           plusw0	equ	0xFEB
 43777                           fsr0h	equ	0xFEA
 43778                           fsr0l	equ	0xFE9
 43779                           wreg	equ	0xFE8
 43780                           postinc1	equ	0xFE6
 43781                           postdec1	equ	0xFE5
 43782                           plusw1	equ	0xFE3
 43783                           fsr1h	equ	0xFE2
 43784                           fsr1l	equ	0xFE1
 43785                           indf2	equ	0xFDF
 43786                           postinc2	equ	0xFDE
 43787                           postdec2	equ	0xFDD
 43788                           plusw2	equ	0xFDB
 43789                           fsr2h	equ	0xFDA
 43790                           fsr2l	equ	0xFD9
 43791                           status	equ	0xFD8
 43792                           
 43793 ;; *************** function _INT1_ISR *****************
 43794 ;; Defined at:
 43795 ;;		line 33 in file "mcc_generated_files/ext_int.c"
 43796 ;; Parameters:    Size  Location     Type
 43797 ;;		None
 43798 ;; Auto vars:     Size  Location     Type
 43799 ;;		None
 43800 ;; Return value:  Size  Location     Type
 43801 ;;                  1    wreg      void 
 43802 ;; Registers used:
 43803 ;;		wreg, status,2, status,0, pclath, tosl, cstack
 43804 ;; Tracked objects:
 43805 ;;		On entry : 0/0
 43806 ;;		On exit  : 0/0
 43807 ;;		Unchanged: 0/0
 43808 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 43809 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 43810 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 43811 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 43812 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 43813 ;;Total ram usage:        0 bytes
 43814 ;; Hardware stack levels used:    1
 43815 ;; Hardware stack levels required when called:    2
 43816 ;; This function calls:
 43817 ;;		_INT1_CallBack
 43818 ;; This function is called by:
 43819 ;;		_INTERRUPT_InterruptManager
 43820 ;; This function uses a non-reentrant model
 43821 ;;
 43822                           
 43823                           	psect	text221
 43824  009596                     __ptext221:
 43825                           	opt stack 0
 43826  009596                     _INT1_ISR:
 43827                           	opt stack 15
 43828                           
 43829                           ;ext_int.c: 35: (INTCON3bits.INT1IF = 0);
 43830                           
 43831                           ;incstack = 0
 43832  009596  90F0               	bcf	intcon3,0,c	;volatile
 43833                           
 43834                           ;ext_int.c: 38: INT1_CallBack();
 43835  009598  EC3E  F049         	call	_INT1_CallBack	;wreg free
 43836  00959C  0012               	return		;funcret
 43837  00959E                     __end_of_INT1_ISR:
 43838                           	opt stack 0
 43839                           tosu	equ	0xFFF
 43840                           tosh	equ	0xFFE
 43841                           tosl	equ	0xFFD
 43842                           pclatu	equ	0xFFB
 43843                           pclath	equ	0xFFA
 43844                           tblptru	equ	0xFF8
 43845                           tblptrh	equ	0xFF7
 43846                           tblptrl	equ	0xFF6
 43847                           tablat	equ	0xFF5
 43848                           prodh	equ	0xFF4
 43849                           prodl	equ	0xFF3
 43850                           intcon	equ	0xFF2
 43851                           intcon2	equ	0xFF1
 43852                           intcon3	equ	0xFF0
 43853                           indf0	equ	0xFEF
 43854                           postinc0	equ	0xFEE
 43855                           plusw0	equ	0xFEB
 43856                           fsr0h	equ	0xFEA
 43857                           fsr0l	equ	0xFE9
 43858                           wreg	equ	0xFE8
 43859                           postinc1	equ	0xFE6
 43860                           postdec1	equ	0xFE5
 43861                           plusw1	equ	0xFE3
 43862                           fsr1h	equ	0xFE2
 43863                           fsr1l	equ	0xFE1
 43864                           indf2	equ	0xFDF
 43865                           postinc2	equ	0xFDE
 43866                           postdec2	equ	0xFDD
 43867                           plusw2	equ	0xFDB
 43868                           fsr2h	equ	0xFDA
 43869                           fsr2l	equ	0xFD9
 43870                           status	equ	0xFD8
 43871                           
 43872 ;; *************** function _INT1_CallBack *****************
 43873 ;; Defined at:
 43874 ;;		line 42 in file "mcc_generated_files/ext_int.c"
 43875 ;; Parameters:    Size  Location     Type
 43876 ;;		None
 43877 ;; Auto vars:     Size  Location     Type
 43878 ;;		None
 43879 ;; Return value:  Size  Location     Type
 43880 ;;                  1    wreg      void 
 43881 ;; Registers used:
 43882 ;;		wreg, status,2, status,0, pclath, tosl, cstack
 43883 ;; Tracked objects:
 43884 ;;		On entry : 0/0
 43885 ;;		On exit  : 0/0
 43886 ;;		Unchanged: 0/0
 43887 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 43888 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 43889 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 43890 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 43891 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 43892 ;;Total ram usage:        0 bytes
 43893 ;; Hardware stack levels used:    1
 43894 ;; Hardware stack levels required when called:    1
 43895 ;; This function calls:
 43896 ;;		Absolute function
 43897 ;;		_DIO0_ISR_Lora
 43898 ;;		_INT1_DefaultInterruptHandler
 43899 ;; This function is called by:
 43900 ;;		_INT1_ISR
 43901 ;; This function uses a non-reentrant model
 43902 ;;
 43903                           
 43904                           	psect	text222
 43905  00927C                     __ptext222:
 43906                           	opt stack 0
 43907  00927C                     _INT1_CallBack:
 43908                           	opt stack 15
 43909                           
 43910                           ;ext_int.c: 45: if(INT1_InterruptHandler)
 43911                           
 43912                           ;incstack = 0
 43913  00927C  0103               	movlb	3	; () banked
 43914  00927E  51F5               	movf	_INT1_InterruptHandler& (0+255),w,b
 43915  009280  11F6               	iorwf	(_INT1_InterruptHandler+1)& (0+255),w,b
 43916  009282  B4D8               	btfsc	status,2,c
 43917  009284  0012               	return	
 43918                           
 43919                           ; BSR set to: 3
 43920                           ;ext_int.c: 46: {
 43921                           ;ext_int.c: 47: INT1_InterruptHandler();
 43922  009286  D801               	call	i2u1675_48
 43923  009288  0012               	return	
 43924  00928A                     i2u1675_48:
 43925  00928A  0005               	push	
 43926  00928C  6EFA               	movwf	pclath,c
 43927  00928E  51F5               	movf	_INT1_InterruptHandler& (0+255),w,b
 43928  009290  6EFD               	movwf	tosl,c
 43929  009292  51F6               	movf	(_INT1_InterruptHandler+1)& (0+255),w,b
 43930  009294  6EFE               	movwf	tosh,c
 43931  009296  6AFF               	clrf	tosu,c
 43932  009298  50FA               	movf	pclath,w,c
 43933  00929A  0012               	return		;indir
 43934  00929C                     __end_of_INT1_CallBack:
 43935                           	opt stack 0
 43936                           tosu	equ	0xFFF
 43937                           tosh	equ	0xFFE
 43938                           tosl	equ	0xFFD
 43939                           pclatu	equ	0xFFB
 43940                           pclath	equ	0xFFA
 43941                           tblptru	equ	0xFF8
 43942                           tblptrh	equ	0xFF7
 43943                           tblptrl	equ	0xFF6
 43944                           tablat	equ	0xFF5
 43945                           prodh	equ	0xFF4
 43946                           prodl	equ	0xFF3
 43947                           intcon	equ	0xFF2
 43948                           intcon2	equ	0xFF1
 43949                           intcon3	equ	0xFF0
 43950                           indf0	equ	0xFEF
 43951                           postinc0	equ	0xFEE
 43952                           plusw0	equ	0xFEB
 43953                           fsr0h	equ	0xFEA
 43954                           fsr0l	equ	0xFE9
 43955                           wreg	equ	0xFE8
 43956                           postinc1	equ	0xFE6
 43957                           postdec1	equ	0xFE5
 43958                           plusw1	equ	0xFE3
 43959                           fsr1h	equ	0xFE2
 43960                           fsr1l	equ	0xFE1
 43961                           indf2	equ	0xFDF
 43962                           postinc2	equ	0xFDE
 43963                           postdec2	equ	0xFDD
 43964                           plusw2	equ	0xFDB
 43965                           fsr2h	equ	0xFDA
 43966                           fsr2l	equ	0xFD9
 43967                           status	equ	0xFD8
 43968                           
 43969 ;; *************** function _DIO0_ISR_Lora *****************
 43970 ;; Defined at:
 43971 ;;		line 63 in file "mcc_generated_files/LoRaWAN/interrupt_manager_lora_addons.c"
 43972 ;; Parameters:    Size  Location     Type
 43973 ;;		None
 43974 ;; Auto vars:     Size  Location     Type
 43975 ;;		None
 43976 ;; Return value:  Size  Location     Type
 43977 ;;                  1    wreg      void 
 43978 ;; Registers used:
 43979 ;;		status,2, status,0
 43980 ;; Tracked objects:
 43981 ;;		On entry : 0/0
 43982 ;;		On exit  : 0/0
 43983 ;;		Unchanged: 0/0
 43984 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 43985 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 43986 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 43987 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 43988 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 43989 ;;Total ram usage:        0 bytes
 43990 ;; Hardware stack levels used:    1
 43991 ;; This function calls:
 43992 ;;		Nothing
 43993 ;; This function is called by:
 43994 ;;		_DIO0_ISR_Lora_Init
 43995 ;;		_INT1_CallBack
 43996 ;; This function uses a non-reentrant model
 43997 ;;
 43998                           
 43999                           	psect	text223
 44000  0095BC                     __ptext223:
 44001                           	opt stack 0
 44002  0095BC                     _DIO0_ISR_Lora:
 44003                           	opt stack 15
 44004                           
 44005                           ;interrupt_manager_lora_addons.c: 65: dioStatus |= 0x01;
 44006                           
 44007                           ;incstack = 0
 44008  0095BC  0101               	movlb	1	; () banked
 44009  0095BE  8156               	bsf	_dioStatus& (0+255),0,b	;volatile
 44010                           
 44011                           ; BSR set to: 1
 44012  0095C0  0012               	return		;funcret
 44013  0095C2                     __end_of_DIO0_ISR_Lora:
 44014                           	opt stack 0
 44015                           tosu	equ	0xFFF
 44016                           tosh	equ	0xFFE
 44017                           tosl	equ	0xFFD
 44018                           pclatu	equ	0xFFB
 44019                           pclath	equ	0xFFA
 44020                           tblptru	equ	0xFF8
 44021                           tblptrh	equ	0xFF7
 44022                           tblptrl	equ	0xFF6
 44023                           tablat	equ	0xFF5
 44024                           prodh	equ	0xFF4
 44025                           prodl	equ	0xFF3
 44026                           intcon	equ	0xFF2
 44027                           intcon2	equ	0xFF1
 44028                           intcon3	equ	0xFF0
 44029                           indf0	equ	0xFEF
 44030                           postinc0	equ	0xFEE
 44031                           plusw0	equ	0xFEB
 44032                           fsr0h	equ	0xFEA
 44033                           fsr0l	equ	0xFE9
 44034                           wreg	equ	0xFE8
 44035                           postinc1	equ	0xFE6
 44036                           postdec1	equ	0xFE5
 44037                           plusw1	equ	0xFE3
 44038                           fsr1h	equ	0xFE2
 44039                           fsr1l	equ	0xFE1
 44040                           indf2	equ	0xFDF
 44041                           postinc2	equ	0xFDE
 44042                           postdec2	equ	0xFDD
 44043                           plusw2	equ	0xFDB
 44044                           fsr2h	equ	0xFDA
 44045                           fsr2l	equ	0xFD9
 44046                           status	equ	0xFD8
 44047                           
 44048 ;; *************** function _INT1_DefaultInterruptHandler *****************
 44049 ;; Defined at:
 44050 ;;		line 55 in file "mcc_generated_files/ext_int.c"
 44051 ;; Parameters:    Size  Location     Type
 44052 ;;		None
 44053 ;; Auto vars:     Size  Location     Type
 44054 ;;		None
 44055 ;; Return value:  Size  Location     Type
 44056 ;;                  1    wreg      void 
 44057 ;; Registers used:
 44058 ;;		None
 44059 ;; Tracked objects:
 44060 ;;		On entry : 0/0
 44061 ;;		On exit  : 0/0
 44062 ;;		Unchanged: 0/0
 44063 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 44064 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 44065 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 44066 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 44067 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 44068 ;;Total ram usage:        0 bytes
 44069 ;; Hardware stack levels used:    1
 44070 ;; This function calls:
 44071 ;;		Nothing
 44072 ;; This function is called by:
 44073 ;;		_EXT_INT_Initialize
 44074 ;;		_INT1_CallBack
 44075 ;; This function uses a non-reentrant model
 44076 ;;
 44077                           
 44078                           	psect	text224
 44079  0095FA                     __ptext224:
 44080                           	opt stack 0
 44081  0095FA                     _INT1_DefaultInterruptHandler:
 44082                           	opt stack 15
 44083                           
 44084                           ; BSR set to: 1
 44085                           ;incstack = 0
 44086  0095FA  0012               	return		;funcret
 44087  0095FC                     __end_of_INT1_DefaultInterruptHandler:
 44088                           	opt stack 0
 44089                           tosu	equ	0xFFF
 44090                           tosh	equ	0xFFE
 44091                           tosl	equ	0xFFD
 44092                           pclatu	equ	0xFFB
 44093                           pclath	equ	0xFFA
 44094                           tblptru	equ	0xFF8
 44095                           tblptrh	equ	0xFF7
 44096                           tblptrl	equ	0xFF6
 44097                           tablat	equ	0xFF5
 44098                           prodh	equ	0xFF4
 44099                           prodl	equ	0xFF3
 44100                           intcon	equ	0xFF2
 44101                           intcon2	equ	0xFF1
 44102                           intcon3	equ	0xFF0
 44103                           indf0	equ	0xFEF
 44104                           postinc0	equ	0xFEE
 44105                           plusw0	equ	0xFEB
 44106                           fsr0h	equ	0xFEA
 44107                           fsr0l	equ	0xFE9
 44108                           wreg	equ	0xFE8
 44109                           postinc1	equ	0xFE6
 44110                           postdec1	equ	0xFE5
 44111                           plusw1	equ	0xFE3
 44112                           fsr1h	equ	0xFE2
 44113                           fsr1l	equ	0xFE1
 44114                           indf2	equ	0xFDF
 44115                           postinc2	equ	0xFDE
 44116                           postdec2	equ	0xFDD
 44117                           plusw2	equ	0xFDB
 44118                           fsr2h	equ	0xFDA
 44119                           fsr2l	equ	0xFD9
 44120                           status	equ	0xFD8
 44121                           
 44122 ;; *************** function _EUSART1_Transmit_ISR *****************
 44123 ;; Defined at:
 44124 ;;		line 226 in file "mcc_generated_files/eusart1.c"
 44125 ;; Parameters:    Size  Location     Type
 44126 ;;		None
 44127 ;; Auto vars:     Size  Location     Type
 44128 ;;		None
 44129 ;; Return value:  Size  Location     Type
 44130 ;;                  1    wreg      void 
 44131 ;; Registers used:
 44132 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 44133 ;; Tracked objects:
 44134 ;;		On entry : 0/0
 44135 ;;		On exit  : 0/0
 44136 ;;		Unchanged: 0/0
 44137 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 44138 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 44139 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 44140 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 44141 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 44142 ;;Total ram usage:        0 bytes
 44143 ;; Hardware stack levels used:    1
 44144 ;; This function calls:
 44145 ;;		Nothing
 44146 ;; This function is called by:
 44147 ;;		_EUSART1_Initialize
 44148 ;;		_INTERRUPT_InterruptManager
 44149 ;; This function uses a non-reentrant model
 44150 ;;
 44151                           
 44152                           	psect	text225
 44153  008DDC                     __ptext225:
 44154                           	opt stack 0
 44155  008DDC                     _EUSART1_Transmit_ISR:
 44156                           	opt stack 17
 44157                           
 44158                           ;eusart1.c: 230: if(sizeof(eusart1TxBuffer) > eusart1TxBufferRemaining)
 44159                           
 44160                           ;incstack = 0
 44161  008DDC  0101               	movlb	1	; () banked
 44162  008DDE  51FF               	movf	_eusart1TxBufferRemaining& (0+255),w,b	;volatile
 44163  008DE0  A4D8               	btfss	status,2,c
 44164  008DE2  D012               	goto	i2l2546
 44165                           
 44166                           ; BSR set to: 1
 44167                           ;eusart1.c: 231: {
 44168                           ;eusart1.c: 232: TXREG1 = eusart1TxBuffer[eusart1TxTail++];
 44169  008DE4  5152               	movf	_eusart1TxTail& (0+255),w,b	;volatile
 44170  008DE6  0D01               	mullw	1
 44171  008DE8  0E51               	movlw	low _eusart1TxBuffer
 44172  008DEA  24F3               	addwf	prodl,w,c
 44173  008DEC  6ED9               	movwf	fsr2l,c
 44174  008DEE  0E01               	movlw	high _eusart1TxBuffer
 44175  008DF0  20F4               	addwfc	prodh,w,c
 44176  008DF2  6EDA               	movwf	fsr2h,c
 44177  008DF4  50DF               	movf	indf2,w,c
 44178  008DF6  6EAD               	movwf	4013,c	;volatile
 44179                           
 44180                           ; BSR set to: 1
 44181  008DF8  2B52               	incf	_eusart1TxTail& (0+255),f,b	;volatile
 44182                           
 44183                           ; BSR set to: 1
 44184                           ;eusart1.c: 233: if(sizeof(eusart1TxBuffer) <= eusart1TxTail)
 44185  008DFA  5152               	movf	_eusart1TxTail& (0+255),w,b	;volatile
 44186  008DFC  B4D8               	btfsc	status,2,c
 44187  008DFE  D002               	goto	i2l2547
 44188                           
 44189                           ; BSR set to: 1
 44190                           ;eusart1.c: 234: {
 44191                           ;eusart1.c: 235: eusart1TxTail = 0;
 44192  008E00  0E00               	movlw	0
 44193  008E02  6F52               	movwf	_eusart1TxTail& (0+255),b	;volatile
 44194  008E04                     i2l2547:
 44195                           
 44196                           ; BSR set to: 1
 44197                           ;eusart1.c: 236: }
 44198                           ;eusart1.c: 237: eusart1TxBufferRemaining++;
 44199                           
 44200                           ; BSR set to: 1
 44201  008E04  2BFF               	incf	_eusart1TxBufferRemaining& (0+255),f,b	;volatile
 44202                           
 44203                           ;eusart1.c: 238: }
 44204  008E06  0012               	return	
 44205  008E08                     i2l2546:
 44206                           
 44207                           ; BSR set to: 1
 44208                           ;eusart1.c: 239: else
 44209                           ;eusart1.c: 240: {
 44210                           ;eusart1.c: 241: PIE1bits.TX1IE = 0;
 44211  008E08  989D               	bcf	3997,4,c	;volatile
 44212  008E0A  0012               	return	
 44213  008E0C                     __end_of_EUSART1_Transmit_ISR:
 44214                           	opt stack 0
 44215                           tosu	equ	0xFFF
 44216                           tosh	equ	0xFFE
 44217                           tosl	equ	0xFFD
 44218                           pclatu	equ	0xFFB
 44219                           pclath	equ	0xFFA
 44220                           tblptru	equ	0xFF8
 44221                           tblptrh	equ	0xFF7
 44222                           tblptrl	equ	0xFF6
 44223                           tablat	equ	0xFF5
 44224                           prodh	equ	0xFF4
 44225                           prodl	equ	0xFF3
 44226                           intcon	equ	0xFF2
 44227                           intcon2	equ	0xFF1
 44228                           intcon3	equ	0xFF0
 44229                           indf0	equ	0xFEF
 44230                           postinc0	equ	0xFEE
 44231                           plusw0	equ	0xFEB
 44232                           fsr0h	equ	0xFEA
 44233                           fsr0l	equ	0xFE9
 44234                           wreg	equ	0xFE8
 44235                           postinc1	equ	0xFE6
 44236                           postdec1	equ	0xFE5
 44237                           plusw1	equ	0xFE3
 44238                           fsr1h	equ	0xFE2
 44239                           fsr1l	equ	0xFE1
 44240                           indf2	equ	0xFDF
 44241                           postinc2	equ	0xFDE
 44242                           postdec2	equ	0xFDD
 44243                           plusw2	equ	0xFDB
 44244                           fsr2h	equ	0xFDA
 44245                           fsr2l	equ	0xFD9
 44246                           status	equ	0xFD8
 44247                           
 44248 ;; *************** function _EUSART1_Receive_ISR *****************
 44249 ;; Defined at:
 44250 ;;		line 245 in file "mcc_generated_files/eusart1.c"
 44251 ;; Parameters:    Size  Location     Type
 44252 ;;		None
 44253 ;; Auto vars:     Size  Location     Type
 44254 ;;		None
 44255 ;; Return value:  Size  Location     Type
 44256 ;;                  1    wreg      void 
 44257 ;; Registers used:
 44258 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
 44259 ;; Tracked objects:
 44260 ;;		On entry : 0/0
 44261 ;;		On exit  : 0/0
 44262 ;;		Unchanged: 0/0
 44263 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 44264 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 44265 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 44266 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 44267 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 44268 ;;Total ram usage:        3 bytes
 44269 ;; Hardware stack levels used:    1
 44270 ;; Hardware stack levels required when called:    2
 44271 ;; This function calls:
 44272 ;;		Absolute function
 44273 ;;		_EUSART1_DefaultErrorHandler
 44274 ;;		_EUSART1_DefaultFramingErrorHandler
 44275 ;;		_EUSART1_DefaultOverrunErrorHandler
 44276 ;;		_EUSART1_Read
 44277 ;;		_EUSART1_RxDataHandler
 44278 ;;		_strncat
 44279 ;; This function is called by:
 44280 ;;		_EUSART1_Initialize
 44281 ;;		_INTERRUPT_InterruptManager
 44282 ;; This function uses a non-reentrant model
 44283 ;;
 44284                           
 44285                           	psect	text226
 44286  003DBC                     __ptext226:
 44287                           	opt stack 0
 44288  003DBC                     _EUSART1_Receive_ISR:
 44289                           	opt stack 15
 44290                           
 44291                           ;eusart1.c: 248: eusart1RxStatusBuffer[eusart1RxHead].status = 0;
 44292                           
 44293                           ; BSR set to: 1
 44294                           ;incstack = 0
 44295  003DBC  5050               	movf	_eusart1RxHead,w,c	;volatile
 44296  003DBE  0D01               	mullw	1
 44297  003DC0  0E4E               	movlw	low _eusart1RxStatusBuffer
 44298  003DC2  24F3               	addwf	prodl,w,c
 44299  003DC4  6ED9               	movwf	fsr2l,c
 44300  003DC6  0E00               	movlw	high _eusart1RxStatusBuffer
 44301  003DC8  20F4               	addwfc	prodh,w,c
 44302  003DCA  6EDA               	movwf	fsr2h,c
 44303  003DCC  0E00               	movlw	0
 44304  003DCE  6EDF               	movwf	indf2,c
 44305                           
 44306                           ;eusart1.c: 250: if(RCSTA1bits.FERR){
 44307  003DD0  A4AB               	btfss	4011,2,c	;volatile
 44308  003DD2  D015               	goto	i2u1690_49
 44309                           
 44310                           ;eusart1.c: 251: eusart1RxStatusBuffer[eusart1RxHead].ferr = 1;
 44311  003DD4  5050               	movf	_eusart1RxHead,w,c	;volatile
 44312  003DD6  0D01               	mullw	1
 44313  003DD8  0E4E               	movlw	low _eusart1RxStatusBuffer
 44314  003DDA  24F3               	addwf	prodl,w,c
 44315  003DDC  6ED9               	movwf	fsr2l,c
 44316  003DDE  0E00               	movlw	high _eusart1RxStatusBuffer
 44317  003DE0  20F4               	addwfc	prodh,w,c
 44318  003DE2  6EDA               	movwf	fsr2h,c
 44319  003DE4  82DF               	bsf	indf2,1,c
 44320                           
 44321                           ;eusart1.c: 252: EUSART1_FramingErrorHandler();
 44322  003DE6  D801               	call	i2u1690_48
 44323  003DE8  D00A               	goto	i2u1690_49
 44324  003DEA                     i2u1690_48:
 44325  003DEA  0005               	push	
 44326  003DEC  6EFA               	movwf	pclath,c
 44327  003DEE  0103               	movlb	3	; () banked
 44328  003DF0  51EB               	movf	_EUSART1_FramingErrorHandler& (0+255),w,b
 44329  003DF2  6EFD               	movwf	tosl,c
 44330  003DF4  51EC               	movf	(_EUSART1_FramingErrorHandler+1)& (0+255),w,b
 44331  003DF6  6EFE               	movwf	tosh,c
 44332  003DF8  6AFF               	clrf	tosu,c
 44333  003DFA  50FA               	movf	pclath,w,c
 44334  003DFC  0012               	return		;indir
 44335  003DFE                     i2u1690_49:
 44336                           
 44337                           ;eusart1.c: 253: }
 44338                           ;eusart1.c: 255: if(RCSTA1bits.OERR){
 44339  003DFE  A2AB               	btfss	4011,1,c	;volatile
 44340  003E00  D015               	goto	i2u1692_49
 44341                           
 44342                           ;eusart1.c: 256: eusart1RxStatusBuffer[eusart1RxHead].oerr = 1;
 44343  003E02  5050               	movf	_eusart1RxHead,w,c	;volatile
 44344  003E04  0D01               	mullw	1
 44345  003E06  0E4E               	movlw	low _eusart1RxStatusBuffer
 44346  003E08  24F3               	addwf	prodl,w,c
 44347  003E0A  6ED9               	movwf	fsr2l,c
 44348  003E0C  0E00               	movlw	high _eusart1RxStatusBuffer
 44349  003E0E  20F4               	addwfc	prodh,w,c
 44350  003E10  6EDA               	movwf	fsr2h,c
 44351  003E12  84DF               	bsf	indf2,2,c
 44352                           
 44353                           ;eusart1.c: 257: EUSART1_OverrunErrorHandler();
 44354  003E14  D801               	call	i2u1692_48
 44355  003E16  D00A               	goto	i2u1692_49
 44356  003E18                     i2u1692_48:
 44357  003E18  0005               	push	
 44358  003E1A  6EFA               	movwf	pclath,c
 44359  003E1C  0103               	movlb	3	; () banked
 44360  003E1E  51E9               	movf	_EUSART1_OverrunErrorHandler& (0+255),w,b
 44361  003E20  6EFD               	movwf	tosl,c
 44362  003E22  51EA               	movf	(_EUSART1_OverrunErrorHandler+1)& (0+255),w,b
 44363  003E24  6EFE               	movwf	tosh,c
 44364  003E26  6AFF               	clrf	tosu,c
 44365  003E28  50FA               	movf	pclath,w,c
 44366  003E2A  0012               	return		;indir
 44367  003E2C                     i2u1692_49:
 44368                           
 44369                           ;eusart1.c: 258: }
 44370                           ;eusart1.c: 260: if(eusart1RxStatusBuffer[eusart1RxHead].status){
 44371  003E2C  5050               	movf	_eusart1RxHead,w,c	;volatile
 44372  003E2E  0D01               	mullw	1
 44373  003E30  0E4E               	movlw	low _eusart1RxStatusBuffer
 44374  003E32  24F3               	addwf	prodl,w,c
 44375  003E34  6ED9               	movwf	fsr2l,c
 44376  003E36  0E00               	movlw	high _eusart1RxStatusBuffer
 44377  003E38  20F4               	addwfc	prodh,w,c
 44378  003E3A  6EDA               	movwf	fsr2h,c
 44379  003E3C  50DF               	movf	indf2,w,c
 44380  003E3E  B4D8               	btfsc	status,2,c
 44381  003E40  D00C               	goto	i2l2554
 44382                           
 44383                           ;eusart1.c: 261: EUSART1_ErrorHandler();
 44384  003E42  D801               	call	i2u1694_48
 44385  003E44  0012               	return	
 44386  003E46                     i2u1694_48:
 44387  003E46  0005               	push	
 44388  003E48  6EFA               	movwf	pclath,c
 44389  003E4A  0103               	movlb	3	; () banked
 44390  003E4C  51E7               	movf	_EUSART1_ErrorHandler& (0+255),w,b
 44391  003E4E  6EFD               	movwf	tosl,c
 44392  003E50  51E8               	movf	(_EUSART1_ErrorHandler+1)& (0+255),w,b
 44393  003E52  6EFE               	movwf	tosh,c
 44394  003E54  6AFF               	clrf	tosu,c
 44395  003E56  50FA               	movf	pclath,w,c
 44396  003E58  0012               	return		;indir
 44397  003E5A                     i2l2554:
 44398                           
 44399                           ;eusart1.c: 263: EUSART1_RxDataHandler();
 44400  003E5A  EC55  F048         	call	_EUSART1_RxDataHandler	;wreg free
 44401                           
 44402                           ;eusart1.c: 264: LATA=0xF0;
 44403  003E5E  0EF0               	movlw	240
 44404  003E60  6E89               	movwf	3977,c	;volatile
 44405                           
 44406                           ;eusart1.c: 266: datax = EUSART1_Read();
 44407  003E62  EC11  F044         	call	_EUSART1_Read	;wreg free
 44408  003E66  0101               	movlb	1	; () banked
 44409  003E68  6F4D               	movwf	_datax& (0+255),b
 44410                           
 44411                           ; BSR set to: 1
 44412                           ;eusart1.c: 268: datatobesolved = datax;
 44413  003E6A  C14D  F04A         	movff	_datax,_datatobesolved
 44414  003E6E  6A4B               	clrf	_datatobesolved+1,c
 44415                           
 44416                           ; BSR set to: 1
 44417                           ;eusart1.c: 270: bitStatusbefore1 = (datatobesolved >> 0) & 1;
 44418  003E70  0E01               	movlw	1
 44419  003E72  144A               	andwf	_datatobesolved,w,c
 44420  003E74  6F42               	movwf	_bitStatusbefore1& (0+255),b
 44421  003E76  6B43               	clrf	(_bitStatusbefore1+1)& (0+255),b
 44422                           
 44423                           ; BSR set to: 1
 44424                           ;eusart1.c: 271: bitStatusbefore2 = (datatobesolved >> 1) & 1;
 44425  003E78  344B               	rlcf	_datatobesolved+1,w,c
 44426  003E7A  304B               	rrcf	_datatobesolved+1,w,c
 44427  003E7C  6E0A               	movwf	(??_EUSART1_Receive_ISR+1)& (0+255),c
 44428  003E7E  304A               	rrcf	_datatobesolved,w,c
 44429  003E80  6E09               	movwf	??_EUSART1_Receive_ISR& (0+255),c
 44430  003E82  0E01               	movlw	1
 44431  003E84  1409               	andwf	??_EUSART1_Receive_ISR,w,c
 44432  003E86  6F40               	movwf	_bitStatusbefore2& (0+255),b
 44433  003E88  6B41               	clrf	(_bitStatusbefore2+1)& (0+255),b
 44434                           
 44435                           ; BSR set to: 1
 44436                           ;eusart1.c: 272: bitStatusbefore3 = (datatobesolved >> 2) & 1;
 44437  003E8A  C04A  F009         	movff	_datatobesolved,??_EUSART1_Receive_ISR
 44438  003E8E  C04B  F00A         	movff	_datatobesolved+1,??_EUSART1_Receive_ISR+1
 44439  003E92  340A               	rlcf	??_EUSART1_Receive_ISR+1,w,c
 44440  003E94  320A               	rrcf	??_EUSART1_Receive_ISR+1,f,c
 44441  003E96  3209               	rrcf	??_EUSART1_Receive_ISR,f,c
 44442  003E98  340A               	rlcf	??_EUSART1_Receive_ISR+1,w,c
 44443  003E9A  320A               	rrcf	??_EUSART1_Receive_ISR+1,f,c
 44444  003E9C  3209               	rrcf	??_EUSART1_Receive_ISR,f,c
 44445  003E9E  0E01               	movlw	1
 44446  003EA0  1409               	andwf	??_EUSART1_Receive_ISR,w,c
 44447  003EA2  6F3E               	movwf	_bitStatusbefore3& (0+255),b
 44448  003EA4  6B3F               	clrf	(_bitStatusbefore3+1)& (0+255),b
 44449                           
 44450                           ; BSR set to: 1
 44451                           ;eusart1.c: 273: bitStatusbefore4 = (datatobesolved >> 3) & 1;
 44452  003EA6  C04A  F009         	movff	_datatobesolved,??_EUSART1_Receive_ISR
 44453  003EAA  C04B  F00A         	movff	_datatobesolved+1,??_EUSART1_Receive_ISR+1
 44454  003EAE  340A               	rlcf	??_EUSART1_Receive_ISR+1,w,c
 44455  003EB0  320A               	rrcf	??_EUSART1_Receive_ISR+1,f,c
 44456  003EB2  3209               	rrcf	??_EUSART1_Receive_ISR,f,c
 44457  003EB4  340A               	rlcf	??_EUSART1_Receive_ISR+1,w,c
 44458  003EB6  320A               	rrcf	??_EUSART1_Receive_ISR+1,f,c
 44459  003EB8  3209               	rrcf	??_EUSART1_Receive_ISR,f,c
 44460  003EBA  340A               	rlcf	??_EUSART1_Receive_ISR+1,w,c
 44461  003EBC  320A               	rrcf	??_EUSART1_Receive_ISR+1,f,c
 44462  003EBE  3209               	rrcf	??_EUSART1_Receive_ISR,f,c
 44463  003EC0  0E01               	movlw	1
 44464  003EC2  1409               	andwf	??_EUSART1_Receive_ISR,w,c
 44465  003EC4  6F3C               	movwf	_bitStatusbefore4& (0+255),b
 44466  003EC6  6B3D               	clrf	(_bitStatusbefore4+1)& (0+255),b
 44467                           
 44468                           ; BSR set to: 1
 44469                           ;eusart1.c: 274: bitStatusbefore5 = (datatobesolved >> 4) & 1;
 44470  003EC8  C04A  F009         	movff	_datatobesolved,??_EUSART1_Receive_ISR
 44471  003ECC  C04B  F00A         	movff	_datatobesolved+1,??_EUSART1_Receive_ISR+1
 44472  003ED0  0E04               	movlw	4
 44473  003ED2  6E0B               	movwf	(??_EUSART1_Receive_ISR+2)& (0+255),c
 44474  003ED4                     i2u1695_45:
 44475  003ED4  340A               	rlcf	??_EUSART1_Receive_ISR+1,w,c
 44476  003ED6  320A               	rrcf	??_EUSART1_Receive_ISR+1,f,c
 44477  003ED8  3209               	rrcf	??_EUSART1_Receive_ISR,f,c
 44478  003EDA  2E0B               	decfsz	(??_EUSART1_Receive_ISR+2)& (0+255),f,c
 44479  003EDC  D7FB               	goto	i2u1695_45
 44480  003EDE  0E01               	movlw	1
 44481  003EE0  1409               	andwf	??_EUSART1_Receive_ISR,w,c
 44482  003EE2  6F3A               	movwf	_bitStatusbefore5& (0+255),b
 44483  003EE4  6B3B               	clrf	(_bitStatusbefore5+1)& (0+255),b
 44484                           
 44485                           ; BSR set to: 1
 44486                           ;eusart1.c: 275: bitStatusbefore6 = (datatobesolved >> 5) & 1;
 44487  003EE6  C04A  F009         	movff	_datatobesolved,??_EUSART1_Receive_ISR
 44488  003EEA  C04B  F00A         	movff	_datatobesolved+1,??_EUSART1_Receive_ISR+1
 44489  003EEE  0E05               	movlw	5
 44490  003EF0  6E0B               	movwf	(??_EUSART1_Receive_ISR+2)& (0+255),c
 44491  003EF2                     i2u1696_45:
 44492  003EF2  340A               	rlcf	??_EUSART1_Receive_ISR+1,w,c
 44493  003EF4  320A               	rrcf	??_EUSART1_Receive_ISR+1,f,c
 44494  003EF6  3209               	rrcf	??_EUSART1_Receive_ISR,f,c
 44495  003EF8  2E0B               	decfsz	(??_EUSART1_Receive_ISR+2)& (0+255),f,c
 44496  003EFA  D7FB               	goto	i2u1696_45
 44497  003EFC  0E01               	movlw	1
 44498  003EFE  1409               	andwf	??_EUSART1_Receive_ISR,w,c
 44499  003F00  6F38               	movwf	_bitStatusbefore6& (0+255),b
 44500  003F02  6B39               	clrf	(_bitStatusbefore6+1)& (0+255),b
 44501                           
 44502                           ; BSR set to: 1
 44503                           ;eusart1.c: 276: bitStatusbefore7 = (datatobesolved >> 6) & 1;
 44504  003F04  C04A  F009         	movff	_datatobesolved,??_EUSART1_Receive_ISR
 44505  003F08  C04B  F00A         	movff	_datatobesolved+1,??_EUSART1_Receive_ISR+1
 44506  003F0C  0E06               	movlw	6
 44507  003F0E  6E0B               	movwf	(??_EUSART1_Receive_ISR+2)& (0+255),c
 44508  003F10                     i2u1697_45:
 44509  003F10  340A               	rlcf	??_EUSART1_Receive_ISR+1,w,c
 44510  003F12  320A               	rrcf	??_EUSART1_Receive_ISR+1,f,c
 44511  003F14  3209               	rrcf	??_EUSART1_Receive_ISR,f,c
 44512  003F16  2E0B               	decfsz	(??_EUSART1_Receive_ISR+2)& (0+255),f,c
 44513  003F18  D7FB               	goto	i2u1697_45
 44514  003F1A  0E01               	movlw	1
 44515  003F1C  1409               	andwf	??_EUSART1_Receive_ISR,w,c
 44516  003F1E  6F36               	movwf	_bitStatusbefore7& (0+255),b
 44517  003F20  6B37               	clrf	(_bitStatusbefore7+1)& (0+255),b
 44518                           
 44519                           ; BSR set to: 1
 44520                           ;eusart1.c: 278: bitStatus1 = bitStatusbefore1<<0;
 44521  003F22  C142  F134         	movff	_bitStatusbefore1,_bitStatus1
 44522  003F26  C143  F135         	movff	_bitStatusbefore1+1,_bitStatus1+1
 44523                           
 44524                           ; BSR set to: 1
 44525                           ;eusart1.c: 279: bitStatus2 = bitStatusbefore2<<1;
 44526  003F2A  90D8               	bcf	status,0,c
 44527  003F2C  3540               	rlcf	_bitStatusbefore2& (0+255),w,b
 44528  003F2E  6F32               	movwf	_bitStatus2& (0+255),b
 44529  003F30  3541               	rlcf	(_bitStatusbefore2+1)& (0+255),w,b
 44530  003F32  6F33               	movwf	(_bitStatus2+1)& (0+255),b
 44531                           
 44532                           ; BSR set to: 1
 44533                           ;eusart1.c: 280: bitStatus3 = bitStatusbefore3<<2;
 44534  003F34  C13E  F009         	movff	_bitStatusbefore3,??_EUSART1_Receive_ISR
 44535  003F38  C13F  F00A         	movff	_bitStatusbefore3+1,??_EUSART1_Receive_ISR+1
 44536  003F3C  90D8               	bcf	status,0,c
 44537  003F3E  3609               	rlcf	??_EUSART1_Receive_ISR,f,c
 44538  003F40  360A               	rlcf	??_EUSART1_Receive_ISR+1,f,c
 44539  003F42  90D8               	bcf	status,0,c
 44540  003F44  3609               	rlcf	??_EUSART1_Receive_ISR,f,c
 44541  003F46  360A               	rlcf	??_EUSART1_Receive_ISR+1,f,c
 44542  003F48  C009  F130         	movff	??_EUSART1_Receive_ISR,_bitStatus3
 44543  003F4C  C00A  F131         	movff	??_EUSART1_Receive_ISR+1,_bitStatus3+1
 44544                           
 44545                           ; BSR set to: 1
 44546                           ;eusart1.c: 281: bitStatus4 = bitStatusbefore4<<3;
 44547  003F50  C13C  F009         	movff	_bitStatusbefore4,??_EUSART1_Receive_ISR
 44548  003F54  C13D  F00A         	movff	_bitStatusbefore4+1,??_EUSART1_Receive_ISR+1
 44549  003F58  90D8               	bcf	status,0,c
 44550  003F5A  3609               	rlcf	??_EUSART1_Receive_ISR,f,c
 44551  003F5C  360A               	rlcf	??_EUSART1_Receive_ISR+1,f,c
 44552  003F5E  90D8               	bcf	status,0,c
 44553  003F60  3609               	rlcf	??_EUSART1_Receive_ISR,f,c
 44554  003F62  360A               	rlcf	??_EUSART1_Receive_ISR+1,f,c
 44555  003F64  90D8               	bcf	status,0,c
 44556  003F66  3609               	rlcf	??_EUSART1_Receive_ISR,f,c
 44557  003F68  360A               	rlcf	??_EUSART1_Receive_ISR+1,f,c
 44558  003F6A  C009  F12E         	movff	??_EUSART1_Receive_ISR,_bitStatus4
 44559  003F6E  C00A  F12F         	movff	??_EUSART1_Receive_ISR+1,_bitStatus4+1
 44560                           
 44561                           ; BSR set to: 1
 44562                           ;eusart1.c: 282: bitStatus5 = bitStatusbefore5<<4;
 44563  003F72  C13A  F009         	movff	_bitStatusbefore5,??_EUSART1_Receive_ISR
 44564  003F76  C13B  F00A         	movff	_bitStatusbefore5+1,??_EUSART1_Receive_ISR+1
 44565  003F7A  3A09               	swapf	??_EUSART1_Receive_ISR,f,c
 44566  003F7C  3A0A               	swapf	??_EUSART1_Receive_ISR+1,f,c
 44567  003F7E  0EF0               	movlw	240
 44568  003F80  160A               	andwf	??_EUSART1_Receive_ISR+1,f,c
 44569  003F82  5009               	movf	??_EUSART1_Receive_ISR,w,c
 44570  003F84  0B0F               	andlw	15
 44571  003F86  120A               	iorwf	??_EUSART1_Receive_ISR+1,f,c
 44572  003F88  0EF0               	movlw	240
 44573  003F8A  1609               	andwf	??_EUSART1_Receive_ISR,f,c
 44574  003F8C  C009  F12C         	movff	??_EUSART1_Receive_ISR,_bitStatus5
 44575  003F90  C00A  F12D         	movff	??_EUSART1_Receive_ISR+1,_bitStatus5+1
 44576                           
 44577                           ; BSR set to: 1
 44578                           ;eusart1.c: 283: bitStatus6 = bitStatusbefore6<<5;
 44579  003F94  C138  F009         	movff	_bitStatusbefore6,??_EUSART1_Receive_ISR
 44580  003F98  C139  F00A         	movff	_bitStatusbefore6+1,??_EUSART1_Receive_ISR+1
 44581  003F9C  0E05               	movlw	5
 44582  003F9E                     i2u1698_45:
 44583  003F9E  90D8               	bcf	status,0,c
 44584  003FA0  3609               	rlcf	??_EUSART1_Receive_ISR,f,c
 44585  003FA2  360A               	rlcf	??_EUSART1_Receive_ISR+1,f,c
 44586  003FA4  2EE8               	decfsz	wreg,f,c
 44587  003FA6  D7FB               	goto	i2u1698_45
 44588  003FA8  C009  F12A         	movff	??_EUSART1_Receive_ISR,_bitStatus6
 44589  003FAC  C00A  F12B         	movff	??_EUSART1_Receive_ISR+1,_bitStatus6+1
 44590                           
 44591                           ; BSR set to: 1
 44592                           ;eusart1.c: 284: bitStatus7 = bitStatusbefore7<<6;
 44593  003FB0  C136  F009         	movff	_bitStatusbefore7,??_EUSART1_Receive_ISR
 44594  003FB4  C137  F00A         	movff	_bitStatusbefore7+1,??_EUSART1_Receive_ISR+1
 44595  003FB8  0E06               	movlw	6
 44596  003FBA                     i2u1699_45:
 44597  003FBA  90D8               	bcf	status,0,c
 44598  003FBC  3609               	rlcf	??_EUSART1_Receive_ISR,f,c
 44599  003FBE  360A               	rlcf	??_EUSART1_Receive_ISR+1,f,c
 44600  003FC0  2EE8               	decfsz	wreg,f,c
 44601  003FC2  D7FB               	goto	i2u1699_45
 44602  003FC4  C009  F128         	movff	??_EUSART1_Receive_ISR,_bitStatus7
 44603  003FC8  C00A  F129         	movff	??_EUSART1_Receive_ISR+1,_bitStatus7+1
 44604                           
 44605                           ; BSR set to: 1
 44606                           ;eusart1.c: 286: dataresult = bitStatus7 | bitStatus6 | bitStatus5 | bitStatus4 | bitSta
      +                          tus3 | bitStatus2 | bitStatus1;
 44607  003FCC  512A               	movf	_bitStatus6& (0+255),w,b
 44608  003FCE  1128               	iorwf	_bitStatus7& (0+255),w,b
 44609  003FD0  6E09               	movwf	??_EUSART1_Receive_ISR& (0+255),c
 44610  003FD2  512B               	movf	(_bitStatus6+1)& (0+255),w,b
 44611  003FD4  1129               	iorwf	(_bitStatus7+1)& (0+255),w,b
 44612  003FD6  6E0A               	movwf	(??_EUSART1_Receive_ISR+1)& (0+255),c
 44613  003FD8  512C               	movf	_bitStatus5& (0+255),w,b
 44614  003FDA  1209               	iorwf	??_EUSART1_Receive_ISR,f,c
 44615  003FDC  512D               	movf	(_bitStatus5+1)& (0+255),w,b
 44616  003FDE  120A               	iorwf	??_EUSART1_Receive_ISR+1,f,c
 44617  003FE0  512E               	movf	_bitStatus4& (0+255),w,b
 44618  003FE2  1209               	iorwf	??_EUSART1_Receive_ISR,f,c
 44619  003FE4  512F               	movf	(_bitStatus4+1)& (0+255),w,b
 44620  003FE6  120A               	iorwf	??_EUSART1_Receive_ISR+1,f,c
 44621  003FE8  5130               	movf	_bitStatus3& (0+255),w,b
 44622  003FEA  1209               	iorwf	??_EUSART1_Receive_ISR,f,c
 44623  003FEC  5131               	movf	(_bitStatus3+1)& (0+255),w,b
 44624  003FEE  120A               	iorwf	??_EUSART1_Receive_ISR+1,f,c
 44625  003FF0  5132               	movf	_bitStatus2& (0+255),w,b
 44626  003FF2  1209               	iorwf	??_EUSART1_Receive_ISR,f,c
 44627  003FF4  5133               	movf	(_bitStatus2+1)& (0+255),w,b
 44628  003FF6  120A               	iorwf	??_EUSART1_Receive_ISR+1,f,c
 44629  003FF8  5134               	movf	_bitStatus1& (0+255),w,b
 44630  003FFA  1009               	iorwf	??_EUSART1_Receive_ISR,w,c
 44631  003FFC  6F8D               	movwf	_dataresult& (0+255),b
 44632  003FFE  5135               	movf	(_bitStatus1+1)& (0+255),w,b
 44633  004000  100A               	iorwf	??_EUSART1_Receive_ISR+1,w,c
 44634  004002  6F8E               	movwf	(_dataresult+1)& (0+255),b
 44635                           
 44636                           ; BSR set to: 1
 44637                           ;eusart1.c: 288: strncat(dataxstr, &dataresult, 1);
 44638  004004  0E40               	movlw	low _dataxstr
 44639  004006  6E01               	movwf	strncat@to,c
 44640  004008  0E05               	movlw	high _dataxstr
 44641  00400A  6E02               	movwf	strncat@to+1,c
 44642  00400C  0E8D               	movlw	low _dataresult
 44643  00400E  6E03               	movwf	strncat@from,c
 44644  004010  0E01               	movlw	high _dataresult
 44645  004012  6E04               	movwf	strncat@from+1,c
 44646  004014  0E00               	movlw	0
 44647  004016  6E06               	movwf	strncat@size+1,c
 44648  004018  0E01               	movlw	1
 44649  00401A  6E05               	movwf	strncat@size,c
 44650  00401C  EC68  F040         	call	_strncat	;wreg free
 44651  004020  0012               	return	
 44652  004022                     __end_of_EUSART1_Receive_ISR:
 44653                           	opt stack 0
 44654                           tosu	equ	0xFFF
 44655                           tosh	equ	0xFFE
 44656                           tosl	equ	0xFFD
 44657                           pclatu	equ	0xFFB
 44658                           pclath	equ	0xFFA
 44659                           tblptru	equ	0xFF8
 44660                           tblptrh	equ	0xFF7
 44661                           tblptrl	equ	0xFF6
 44662                           tablat	equ	0xFF5
 44663                           prodh	equ	0xFF4
 44664                           prodl	equ	0xFF3
 44665                           intcon	equ	0xFF2
 44666                           intcon2	equ	0xFF1
 44667                           intcon3	equ	0xFF0
 44668                           indf0	equ	0xFEF
 44669                           postinc0	equ	0xFEE
 44670                           plusw0	equ	0xFEB
 44671                           fsr0h	equ	0xFEA
 44672                           fsr0l	equ	0xFE9
 44673                           wreg	equ	0xFE8
 44674                           postinc1	equ	0xFE6
 44675                           postdec1	equ	0xFE5
 44676                           plusw1	equ	0xFE3
 44677                           fsr1h	equ	0xFE2
 44678                           fsr1l	equ	0xFE1
 44679                           indf2	equ	0xFDF
 44680                           postinc2	equ	0xFDE
 44681                           postdec2	equ	0xFDD
 44682                           plusw2	equ	0xFDB
 44683                           fsr2h	equ	0xFDA
 44684                           fsr2l	equ	0xFD9
 44685                           status	equ	0xFD8
 44686                           
 44687 ;; *************** function _strncat *****************
 44688 ;; Defined at:
 44689 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strncat.c"
 44690 ;; Parameters:    Size  Location     Type
 44691 ;;  to              2    0[COMRAM] PTR unsigned char 
 44692 ;;		 -> dataxstr(64), 
 44693 ;;  from            2    2[COMRAM] PTR const unsigned char 
 44694 ;;		 -> dataresult(2), 
 44695 ;;  size            2    4[COMRAM] unsigned int 
 44696 ;; Auto vars:     Size  Location     Type
 44697 ;;  cp              2    6[COMRAM] PTR unsigned char 
 44698 ;;		 -> dataxstr(64), 
 44699 ;; Return value:  Size  Location     Type
 44700 ;;                  2    0[COMRAM] PTR unsigned char 
 44701 ;; Registers used:
 44702 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0
 44703 ;; Tracked objects:
 44704 ;;		On entry : 0/0
 44705 ;;		On exit  : 0/0
 44706 ;;		Unchanged: 0/0
 44707 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 44708 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 44709 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 44710 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 44711 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 44712 ;;Total ram usage:        8 bytes
 44713 ;; Hardware stack levels used:    1
 44714 ;; This function calls:
 44715 ;;		Nothing
 44716 ;; This function is called by:
 44717 ;;		_EUSART1_Receive_ISR
 44718 ;; This function uses a non-reentrant model
 44719 ;;
 44720                           
 44721                           	psect	text227
 44722  0080D0                     __ptext227:
 44723                           	opt stack 0
 44724  0080D0                     _strncat:
 44725                           	opt stack 16
 44726                           
 44727                           ;incstack = 0
 44728  0080D0  C001  F007         	movff	strncat@to,strncat@cp
 44729  0080D4  C002  F008         	movff	strncat@to+1,strncat@cp+1
 44730  0080D8  D002               	goto	i2l3405
 44731  0080DA  4A07               	infsnz	strncat@cp,f,c
 44732  0080DC  2A08               	incf	strncat@cp+1,f,c
 44733  0080DE                     i2l3405:
 44734  0080DE  C007  FFD9         	movff	strncat@cp,fsr2l
 44735  0080E2  C008  FFDA         	movff	strncat@cp+1,fsr2h
 44736  0080E6  50DF               	movf	indf2,w,c
 44737  0080E8  B4D8               	btfsc	status,2,c
 44738  0080EA  D008               	goto	i2l3408
 44739  0080EC  D7F6               	goto	i2l3406
 44740  0080EE  0605               	decf	strncat@size,f,c
 44741  0080F0  A0D8               	btfss	status,0,c
 44742  0080F2  0606               	decf	strncat@size+1,f,c
 44743  0080F4  4A07               	infsnz	strncat@cp,f,c
 44744  0080F6  2A08               	incf	strncat@cp+1,f,c
 44745  0080F8  4A03               	infsnz	strncat@from,f,c
 44746  0080FA  2A04               	incf	strncat@from+1,f,c
 44747  0080FC                     i2l3408:
 44748  0080FC  5005               	movf	strncat@size,w,c
 44749  0080FE  1006               	iorwf	strncat@size+1,w,c
 44750  008100  B4D8               	btfsc	status,2,c
 44751  008102  D00D               	goto	i2u1382_40
 44752  008104  C003  FFD9         	movff	strncat@from,fsr2l
 44753  008108  C004  FFDA         	movff	strncat@from+1,fsr2h
 44754  00810C  C007  FFE9         	movff	strncat@cp,fsr0l
 44755  008110  C008  FFEA         	movff	strncat@cp+1,fsr0h
 44756  008114  CFDF FFEF          	movff	indf2,indf0
 44757  008118  50EF               	movf	indf0,w,c
 44758  00811A  A4D8               	btfss	status,2,c
 44759  00811C  D7E8               	goto	i2l3409
 44760  00811E                     i2u1382_40:
 44761  00811E  5005               	movf	strncat@size,w,c
 44762  008120  1006               	iorwf	strncat@size+1,w,c
 44763  008122  A4D8               	btfss	status,2,c
 44764  008124  0012               	return	
 44765  008126  C007  FFD9         	movff	strncat@cp,fsr2l
 44766  00812A  C008  FFDA         	movff	strncat@cp+1,fsr2h
 44767  00812E  0E00               	movlw	0
 44768  008130  6EDF               	movwf	indf2,c
 44769  008132  0012               	return	
 44770  008134                     __end_of_strncat:
 44771                           	opt stack 0
 44772                           tosu	equ	0xFFF
 44773                           tosh	equ	0xFFE
 44774                           tosl	equ	0xFFD
 44775                           pclatu	equ	0xFFB
 44776                           pclath	equ	0xFFA
 44777                           tblptru	equ	0xFF8
 44778                           tblptrh	equ	0xFF7
 44779                           tblptrl	equ	0xFF6
 44780                           tablat	equ	0xFF5
 44781                           prodh	equ	0xFF4
 44782                           prodl	equ	0xFF3
 44783                           intcon	equ	0xFF2
 44784                           intcon2	equ	0xFF1
 44785                           intcon3	equ	0xFF0
 44786                           indf0	equ	0xFEF
 44787                           postinc0	equ	0xFEE
 44788                           plusw0	equ	0xFEB
 44789                           fsr0h	equ	0xFEA
 44790                           fsr0l	equ	0xFE9
 44791                           wreg	equ	0xFE8
 44792                           postinc1	equ	0xFE6
 44793                           postdec1	equ	0xFE5
 44794                           plusw1	equ	0xFE3
 44795                           fsr1h	equ	0xFE2
 44796                           fsr1l	equ	0xFE1
 44797                           indf2	equ	0xFDF
 44798                           postinc2	equ	0xFDE
 44799                           postdec2	equ	0xFDD
 44800                           plusw2	equ	0xFDB
 44801                           fsr2h	equ	0xFDA
 44802                           fsr2l	equ	0xFD9
 44803                           status	equ	0xFD8
 44804                           
 44805 ;; *************** function _EUSART1_Read *****************
 44806 ;; Defined at:
 44807 ;;		line 180 in file "mcc_generated_files/eusart1.c"
 44808 ;; Parameters:    Size  Location     Type
 44809 ;;		None
 44810 ;; Auto vars:     Size  Location     Type
 44811 ;;  readValue       1    0[COMRAM] unsigned char 
 44812 ;; Return value:  Size  Location     Type
 44813 ;;                  1    wreg      unsigned char 
 44814 ;; Registers used:
 44815 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 44816 ;; Tracked objects:
 44817 ;;		On entry : 0/0
 44818 ;;		On exit  : 0/0
 44819 ;;		Unchanged: 0/0
 44820 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 44821 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 44822 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 44823 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 44824 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 44825 ;;Total ram usage:        1 bytes
 44826 ;; Hardware stack levels used:    1
 44827 ;; This function calls:
 44828 ;;		Nothing
 44829 ;; This function is called by:
 44830 ;;		_EUSART1_Receive_ISR
 44831 ;;		_UART_Read_Text
 44832 ;; This function uses a non-reentrant model
 44833 ;;
 44834                           
 44835                           	psect	text228
 44836  008822                     __ptext228:
 44837                           	opt stack 0
 44838  008822                     _EUSART1_Read:
 44839                           	opt stack 16
 44840                           
 44841                           ;eusart1.c: 182: uint8_t readValue = 0;
 44842                           
 44843                           ;incstack = 0
 44844  008822  0E00               	movlw	0
 44845  008824  6E01               	movwf	EUSART1_Read@readValue,c
 44846  008826                     
 44847                           ;eusart1.c: 185: {
 44848  008826  0101               	movlb	1	; () banked
 44849  008828  514F               	movf	_eusart1RxCount& (0+255),w,b	;volatile
 44850  00882A  B4D8               	btfsc	status,2,c
 44851  00882C  D7FC               	goto	i2l2531
 44852                           
 44853                           ; BSR set to: 1
 44854                           ;eusart1.c: 186: }
 44855                           ;eusart1.c: 188: eusart1RxLastError = eusart1RxStatusBuffer[eusart1RxTail];
 44856                           
 44857                           ; BSR set to: 1
 44858  00882E  504F               	movf	_eusart1RxTail,w,c	;volatile
 44859  008830  0D01               	mullw	1
 44860  008832  0E4E               	movlw	low _eusart1RxStatusBuffer
 44861  008834  24F3               	addwf	prodl,w,c
 44862  008836  6ED9               	movwf	fsr2l,c
 44863  008838  0E00               	movlw	high _eusart1RxStatusBuffer
 44864  00883A  20F4               	addwfc	prodh,w,c
 44865  00883C  6EDA               	movwf	fsr2h,c
 44866  00883E  50DF               	movf	indf2,w,c
 44867  008840  6F4E               	movwf	_eusart1RxLastError& (0+255),b	;volatile
 44868                           
 44869                           ;eusart1.c: 190: readValue = eusart1RxBuffer[eusart1RxTail++];
 44870  008842  504F               	movf	_eusart1RxTail,w,c	;volatile
 44871  008844  0D01               	mullw	1
 44872  008846  0E50               	movlw	low _eusart1RxBuffer
 44873  008848  24F3               	addwf	prodl,w,c
 44874  00884A  6ED9               	movwf	fsr2l,c
 44875  00884C  0E01               	movlw	high _eusart1RxBuffer
 44876  00884E  20F4               	addwfc	prodh,w,c
 44877  008850  6EDA               	movwf	fsr2h,c
 44878  008852  50DF               	movf	indf2,w,c
 44879  008854  6E01               	movwf	EUSART1_Read@readValue,c
 44880                           
 44881                           ; BSR set to: 1
 44882  008856  2A4F               	incf	_eusart1RxTail,f,c	;volatile
 44883                           
 44884                           ; BSR set to: 1
 44885                           ;eusart1.c: 191: if(sizeof(eusart1RxBuffer) <= eusart1RxTail)
 44886  008858  504F               	movf	_eusart1RxTail,w,c	;volatile
 44887  00885A  B4D8               	btfsc	status,2,c
 44888  00885C  D002               	goto	i2l2533
 44889                           
 44890                           ; BSR set to: 1
 44891                           ;eusart1.c: 192: {
 44892                           ;eusart1.c: 193: eusart1RxTail = 0;
 44893  00885E  0E00               	movlw	0
 44894  008860  6E4F               	movwf	_eusart1RxTail,c	;volatile
 44895  008862                     i2l2533:
 44896                           
 44897                           ; BSR set to: 1
 44898                           ;eusart1.c: 194: }
 44899                           ;eusart1.c: 195: PIE1bits.RC1IE = 0;
 44900                           
 44901                           ; BSR set to: 1
 44902  008862  9A9D               	bcf	3997,5,c	;volatile
 44903                           
 44904                           ; BSR set to: 1
 44905                           ;eusart1.c: 196: eusart1RxCount--;
 44906  008864  074F               	decf	_eusart1RxCount& (0+255),f,b	;volatile
 44907                           
 44908                           ; BSR set to: 1
 44909                           ;eusart1.c: 197: PIE1bits.RC1IE = 1;
 44910  008866  8A9D               	bsf	3997,5,c	;volatile
 44911                           
 44912                           ; BSR set to: 1
 44913                           ;eusart1.c: 199: return readValue;
 44914  008868  5001               	movf	EUSART1_Read@readValue,w,c
 44915  00886A  0012               	return	
 44916  00886C                     __end_of_EUSART1_Read:
 44917                           	opt stack 0
 44918                           tosu	equ	0xFFF
 44919                           tosh	equ	0xFFE
 44920                           tosl	equ	0xFFD
 44921                           pclatu	equ	0xFFB
 44922                           pclath	equ	0xFFA
 44923                           tblptru	equ	0xFF8
 44924                           tblptrh	equ	0xFF7
 44925                           tblptrl	equ	0xFF6
 44926                           tablat	equ	0xFF5
 44927                           prodh	equ	0xFF4
 44928                           prodl	equ	0xFF3
 44929                           intcon	equ	0xFF2
 44930                           intcon2	equ	0xFF1
 44931                           intcon3	equ	0xFF0
 44932                           indf0	equ	0xFEF
 44933                           postinc0	equ	0xFEE
 44934                           plusw0	equ	0xFEB
 44935                           fsr0h	equ	0xFEA
 44936                           fsr0l	equ	0xFE9
 44937                           wreg	equ	0xFE8
 44938                           postinc1	equ	0xFE6
 44939                           postdec1	equ	0xFE5
 44940                           plusw1	equ	0xFE3
 44941                           fsr1h	equ	0xFE2
 44942                           fsr1l	equ	0xFE1
 44943                           indf2	equ	0xFDF
 44944                           postinc2	equ	0xFDE
 44945                           postdec2	equ	0xFDD
 44946                           plusw2	equ	0xFDB
 44947                           fsr2h	equ	0xFDA
 44948                           fsr2l	equ	0xFD9
 44949                           status	equ	0xFD8
 44950                           
 44951 ;; *************** function _EUSART1_DefaultOverrunErrorHandler *****************
 44952 ;; Defined at:
 44953 ;;		line 309 in file "mcc_generated_files/eusart1.c"
 44954 ;; Parameters:    Size  Location     Type
 44955 ;;		None
 44956 ;; Auto vars:     Size  Location     Type
 44957 ;;		None
 44958 ;; Return value:  Size  Location     Type
 44959 ;;                  1    wreg      void 
 44960 ;; Registers used:
 44961 ;;		None
 44962 ;; Tracked objects:
 44963 ;;		On entry : 0/0
 44964 ;;		On exit  : 0/0
 44965 ;;		Unchanged: 0/0
 44966 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 44967 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 44968 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 44969 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 44970 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 44971 ;;Total ram usage:        0 bytes
 44972 ;; Hardware stack levels used:    1
 44973 ;; This function calls:
 44974 ;;		Nothing
 44975 ;; This function is called by:
 44976 ;;		_EUSART1_Initialize
 44977 ;;		_EUSART1_Receive_ISR
 44978 ;; This function uses a non-reentrant model
 44979 ;;
 44980                           
 44981                           	psect	text229
 44982  0095C2                     __ptext229:
 44983                           	opt stack 0
 44984  0095C2                     _EUSART1_DefaultOverrunErrorHandler:
 44985                           	opt stack 16
 44986                           
 44987                           ;eusart1.c: 312: RCSTA1bits.CREN = 0;
 44988                           
 44989                           ; BSR set to: 1
 44990                           ;incstack = 0
 44991  0095C2  98AB               	bcf	4011,4,c	;volatile
 44992                           
 44993                           ;eusart1.c: 313: RCSTA1bits.CREN = 1;
 44994  0095C4  88AB               	bsf	4011,4,c	;volatile
 44995  0095C6  0012               	return		;funcret
 44996  0095C8                     __end_of_EUSART1_DefaultOverrunErrorHandler:
 44997                           	opt stack 0
 44998                           tosu	equ	0xFFF
 44999                           tosh	equ	0xFFE
 45000                           tosl	equ	0xFFD
 45001                           pclatu	equ	0xFFB
 45002                           pclath	equ	0xFFA
 45003                           tblptru	equ	0xFF8
 45004                           tblptrh	equ	0xFF7
 45005                           tblptrl	equ	0xFF6
 45006                           tablat	equ	0xFF5
 45007                           prodh	equ	0xFF4
 45008                           prodl	equ	0xFF3
 45009                           intcon	equ	0xFF2
 45010                           intcon2	equ	0xFF1
 45011                           intcon3	equ	0xFF0
 45012                           indf0	equ	0xFEF
 45013                           postinc0	equ	0xFEE
 45014                           plusw0	equ	0xFEB
 45015                           fsr0h	equ	0xFEA
 45016                           fsr0l	equ	0xFE9
 45017                           wreg	equ	0xFE8
 45018                           postinc1	equ	0xFE6
 45019                           postdec1	equ	0xFE5
 45020                           plusw1	equ	0xFE3
 45021                           fsr1h	equ	0xFE2
 45022                           fsr1l	equ	0xFE1
 45023                           indf2	equ	0xFDF
 45024                           postinc2	equ	0xFDE
 45025                           postdec2	equ	0xFDD
 45026                           plusw2	equ	0xFDB
 45027                           fsr2h	equ	0xFDA
 45028                           fsr2l	equ	0xFD9
 45029                           status	equ	0xFD8
 45030                           
 45031 ;; *************** function _EUSART1_DefaultFramingErrorHandler *****************
 45032 ;; Defined at:
 45033 ;;		line 307 in file "mcc_generated_files/eusart1.c"
 45034 ;; Parameters:    Size  Location     Type
 45035 ;;		None
 45036 ;; Auto vars:     Size  Location     Type
 45037 ;;		None
 45038 ;; Return value:  Size  Location     Type
 45039 ;;                  1    wreg      void 
 45040 ;; Registers used:
 45041 ;;		None
 45042 ;; Tracked objects:
 45043 ;;		On entry : 0/0
 45044 ;;		On exit  : 0/0
 45045 ;;		Unchanged: 0/0
 45046 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 45047 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 45048 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 45049 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 45050 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 45051 ;;Total ram usage:        0 bytes
 45052 ;; Hardware stack levels used:    1
 45053 ;; This function calls:
 45054 ;;		Nothing
 45055 ;; This function is called by:
 45056 ;;		_EUSART1_Initialize
 45057 ;;		_EUSART1_Receive_ISR
 45058 ;; This function uses a non-reentrant model
 45059 ;;
 45060                           
 45061                           	psect	text230
 45062  0095FC                     __ptext230:
 45063                           	opt stack 0
 45064  0095FC                     _EUSART1_DefaultFramingErrorHandler:
 45065                           	opt stack 16
 45066                           
 45067                           ;incstack = 0
 45068  0095FC  0012               	return		;funcret
 45069  0095FE                     __end_of_EUSART1_DefaultFramingErrorHandler:
 45070                           	opt stack 0
 45071                           tosu	equ	0xFFF
 45072                           tosh	equ	0xFFE
 45073                           tosl	equ	0xFFD
 45074                           pclatu	equ	0xFFB
 45075                           pclath	equ	0xFFA
 45076                           tblptru	equ	0xFF8
 45077                           tblptrh	equ	0xFF7
 45078                           tblptrl	equ	0xFF6
 45079                           tablat	equ	0xFF5
 45080                           prodh	equ	0xFF4
 45081                           prodl	equ	0xFF3
 45082                           intcon	equ	0xFF2
 45083                           intcon2	equ	0xFF1
 45084                           intcon3	equ	0xFF0
 45085                           indf0	equ	0xFEF
 45086                           postinc0	equ	0xFEE
 45087                           plusw0	equ	0xFEB
 45088                           fsr0h	equ	0xFEA
 45089                           fsr0l	equ	0xFE9
 45090                           wreg	equ	0xFE8
 45091                           postinc1	equ	0xFE6
 45092                           postdec1	equ	0xFE5
 45093                           plusw1	equ	0xFE3
 45094                           fsr1h	equ	0xFE2
 45095                           fsr1l	equ	0xFE1
 45096                           indf2	equ	0xFDF
 45097                           postinc2	equ	0xFDE
 45098                           postdec2	equ	0xFDD
 45099                           plusw2	equ	0xFDB
 45100                           fsr2h	equ	0xFDA
 45101                           fsr2l	equ	0xFD9
 45102                           status	equ	0xFD8
 45103                           
 45104 ;; *************** function _EUSART1_DefaultErrorHandler *****************
 45105 ;; Defined at:
 45106 ;;		line 317 in file "mcc_generated_files/eusart1.c"
 45107 ;; Parameters:    Size  Location     Type
 45108 ;;		None
 45109 ;; Auto vars:     Size  Location     Type
 45110 ;;		None
 45111 ;; Return value:  Size  Location     Type
 45112 ;;                  1    wreg      void 
 45113 ;; Registers used:
 45114 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 45115 ;; Tracked objects:
 45116 ;;		On entry : 0/0
 45117 ;;		On exit  : 0/0
 45118 ;;		Unchanged: 0/0
 45119 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 45120 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 45121 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 45122 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 45123 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 45124 ;;Total ram usage:        0 bytes
 45125 ;; Hardware stack levels used:    1
 45126 ;; Hardware stack levels required when called:    1
 45127 ;; This function calls:
 45128 ;;		_EUSART1_RxDataHandler
 45129 ;; This function is called by:
 45130 ;;		_EUSART1_Initialize
 45131 ;;		_EUSART1_Receive_ISR
 45132 ;; This function uses a non-reentrant model
 45133 ;;
 45134                           
 45135                           	psect	text231
 45136  0095C8                     __ptext231:
 45137                           	opt stack 0
 45138  0095C8                     _EUSART1_DefaultErrorHandler:
 45139                           	opt stack 15
 45140                           
 45141                           ;eusart1.c: 318: EUSART1_RxDataHandler();
 45142                           
 45143                           ;incstack = 0
 45144  0095C8  EC55  F048         	call	_EUSART1_RxDataHandler	;wreg free
 45145  0095CC  0012               	return		;funcret
 45146  0095CE                     __end_of_EUSART1_DefaultErrorHandler:
 45147                           	opt stack 0
 45148                           tosu	equ	0xFFF
 45149                           tosh	equ	0xFFE
 45150                           tosl	equ	0xFFD
 45151                           pclatu	equ	0xFFB
 45152                           pclath	equ	0xFFA
 45153                           tblptru	equ	0xFF8
 45154                           tblptrh	equ	0xFF7
 45155                           tblptrl	equ	0xFF6
 45156                           tablat	equ	0xFF5
 45157                           prodh	equ	0xFF4
 45158                           prodl	equ	0xFF3
 45159                           intcon	equ	0xFF2
 45160                           intcon2	equ	0xFF1
 45161                           intcon3	equ	0xFF0
 45162                           indf0	equ	0xFEF
 45163                           postinc0	equ	0xFEE
 45164                           plusw0	equ	0xFEB
 45165                           fsr0h	equ	0xFEA
 45166                           fsr0l	equ	0xFE9
 45167                           wreg	equ	0xFE8
 45168                           postinc1	equ	0xFE6
 45169                           postdec1	equ	0xFE5
 45170                           plusw1	equ	0xFE3
 45171                           fsr1h	equ	0xFE2
 45172                           fsr1l	equ	0xFE1
 45173                           indf2	equ	0xFDF
 45174                           postinc2	equ	0xFDE
 45175                           postdec2	equ	0xFDD
 45176                           plusw2	equ	0xFDB
 45177                           fsr2h	equ	0xFDA
 45178                           fsr2l	equ	0xFD9
 45179                           status	equ	0xFD8
 45180                           
 45181 ;; *************** function _EUSART1_RxDataHandler *****************
 45182 ;; Defined at:
 45183 ;;		line 297 in file "mcc_generated_files/eusart1.c"
 45184 ;; Parameters:    Size  Location     Type
 45185 ;;		None
 45186 ;; Auto vars:     Size  Location     Type
 45187 ;;		None
 45188 ;; Return value:  Size  Location     Type
 45189 ;;                  1    wreg      void 
 45190 ;; Registers used:
 45191 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 45192 ;; Tracked objects:
 45193 ;;		On entry : 0/0
 45194 ;;		On exit  : 0/0
 45195 ;;		Unchanged: 0/0
 45196 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 45197 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 45198 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 45199 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 45200 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 45201 ;;Total ram usage:        0 bytes
 45202 ;; Hardware stack levels used:    1
 45203 ;; This function calls:
 45204 ;;		Nothing
 45205 ;; This function is called by:
 45206 ;;		_EUSART1_Receive_ISR
 45207 ;;		_EUSART1_DefaultErrorHandler
 45208 ;; This function uses a non-reentrant model
 45209 ;;
 45210                           
 45211                           	psect	text232
 45212  0090AA                     __ptext232:
 45213                           	opt stack 0
 45214  0090AA                     _EUSART1_RxDataHandler:
 45215                           	opt stack 16
 45216                           
 45217                           ;eusart1.c: 299: eusart1RxBuffer[eusart1RxHead++] = RCREG1;
 45218                           
 45219                           ;incstack = 0
 45220  0090AA  5050               	movf	_eusart1RxHead,w,c	;volatile
 45221  0090AC  0D01               	mullw	1
 45222  0090AE  0E50               	movlw	low _eusart1RxBuffer
 45223  0090B0  24F3               	addwf	prodl,w,c
 45224  0090B2  6ED9               	movwf	fsr2l,c
 45225  0090B4  0E01               	movlw	high _eusart1RxBuffer
 45226  0090B6  20F4               	addwfc	prodh,w,c
 45227  0090B8  6EDA               	movwf	fsr2h,c
 45228  0090BA  CFAE FFDF          	movff	4014,indf2	;volatile
 45229  0090BE  2A50               	incf	_eusart1RxHead,f,c	;volatile
 45230                           
 45231                           ;eusart1.c: 300: if(sizeof(eusart1RxBuffer) <= eusart1RxHead)
 45232  0090C0  5050               	movf	_eusart1RxHead,w,c	;volatile
 45233  0090C2  B4D8               	btfsc	status,2,c
 45234  0090C4  D002               	goto	i2l2559
 45235                           
 45236                           ;eusart1.c: 301: {
 45237                           ;eusart1.c: 302: eusart1RxHead = 0;
 45238  0090C6  0E00               	movlw	0
 45239  0090C8  6E50               	movwf	_eusart1RxHead,c	;volatile
 45240  0090CA                     i2l2559:
 45241                           
 45242                           ;eusart1.c: 303: }
 45243                           ;eusart1.c: 304: eusart1RxCount++;
 45244  0090CA  0101               	movlb	1	; () banked
 45245  0090CC  2B4F               	incf	_eusart1RxCount& (0+255),f,b	;volatile
 45246                           
 45247                           ; BSR set to: 1
 45248  0090CE  0012               	return		;funcret
 45249  0090D0                     __end_of_EUSART1_RxDataHandler:
 45250                           	opt stack 0
 45251                           tosu	equ	0xFFF
 45252                           tosh	equ	0xFFE
 45253                           tosl	equ	0xFFD
 45254                           pclatu	equ	0xFFB
 45255                           pclath	equ	0xFFA
 45256                           tblptru	equ	0xFF8
 45257                           tblptrh	equ	0xFF7
 45258                           tblptrl	equ	0xFF6
 45259                           tablat	equ	0xFF5
 45260                           prodh	equ	0xFF4
 45261                           prodl	equ	0xFF3
 45262                           intcon	equ	0xFF2
 45263                           intcon2	equ	0xFF1
 45264                           intcon3	equ	0xFF0
 45265                           indf0	equ	0xFEF
 45266                           postinc0	equ	0xFEE
 45267                           plusw0	equ	0xFEB
 45268                           fsr0h	equ	0xFEA
 45269                           fsr0l	equ	0xFE9
 45270                           wreg	equ	0xFE8
 45271                           postinc1	equ	0xFE6
 45272                           postdec1	equ	0xFE5
 45273                           plusw1	equ	0xFE3
 45274                           fsr1h	equ	0xFE2
 45275                           fsr1l	equ	0xFE1
 45276                           indf2	equ	0xFDF
 45277                           postinc2	equ	0xFDE
 45278                           postdec2	equ	0xFDD
 45279                           plusw2	equ	0xFDB
 45280                           fsr2h	equ	0xFDA
 45281                           fsr2l	equ	0xFD9
 45282                           status	equ	0xFD8
 45283                           tosu	equ	0xFFF
 45284                           tosh	equ	0xFFE
 45285                           tosl	equ	0xFFD
 45286                           pclatu	equ	0xFFB
 45287                           pclath	equ	0xFFA
 45288                           tblptru	equ	0xFF8
 45289                           tblptrh	equ	0xFF7
 45290                           tblptrl	equ	0xFF6
 45291                           tablat	equ	0xFF5
 45292                           prodh	equ	0xFF4
 45293                           prodl	equ	0xFF3
 45294                           intcon	equ	0xFF2
 45295                           intcon2	equ	0xFF1
 45296                           intcon3	equ	0xFF0
 45297                           indf0	equ	0xFEF
 45298                           postinc0	equ	0xFEE
 45299                           plusw0	equ	0xFEB
 45300                           fsr0h	equ	0xFEA
 45301                           fsr0l	equ	0xFE9
 45302                           wreg	equ	0xFE8
 45303                           postinc1	equ	0xFE6
 45304                           postdec1	equ	0xFE5
 45305                           plusw1	equ	0xFE3
 45306                           fsr1h	equ	0xFE2
 45307                           fsr1l	equ	0xFE1
 45308                           indf2	equ	0xFDF
 45309                           postinc2	equ	0xFDE
 45310                           postdec2	equ	0xFDD
 45311                           plusw2	equ	0xFDB
 45312                           fsr2h	equ	0xFDA
 45313                           fsr2l	equ	0xFD9
 45314                           status	equ	0xFD8
 45315                           
 45316                           	psect	text233
 45317  000000                     __ptext233:
 45318                           	opt stack 0
 45319                           tosu	equ	0xFFF
 45320                           tosh	equ	0xFFE
 45321                           tosl	equ	0xFFD
 45322                           pclatu	equ	0xFFB
 45323                           pclath	equ	0xFFA
 45324                           tblptru	equ	0xFF8
 45325                           tblptrh	equ	0xFF7
 45326                           tblptrl	equ	0xFF6
 45327                           tablat	equ	0xFF5
 45328                           prodh	equ	0xFF4
 45329                           prodl	equ	0xFF3
 45330                           intcon	equ	0xFF2
 45331                           intcon2	equ	0xFF1
 45332                           intcon3	equ	0xFF0
 45333                           indf0	equ	0xFEF
 45334                           postinc0	equ	0xFEE
 45335                           plusw0	equ	0xFEB
 45336                           fsr0h	equ	0xFEA
 45337                           fsr0l	equ	0xFE9
 45338                           wreg	equ	0xFE8
 45339                           postinc1	equ	0xFE6
 45340                           postdec1	equ	0xFE5
 45341                           plusw1	equ	0xFE3
 45342                           fsr1h	equ	0xFE2
 45343                           fsr1l	equ	0xFE1
 45344                           indf2	equ	0xFDF
 45345                           postinc2	equ	0xFDE
 45346                           postdec2	equ	0xFDD
 45347                           plusw2	equ	0xFDB
 45348                           fsr2h	equ	0xFDA
 45349                           fsr2l	equ	0xFD9
 45350                           status	equ	0xFD8
 45351                           
 45352                           	psect	rparam
 45353  0000                     tosu	equ	0xFFF
 45354                           tosh	equ	0xFFE
 45355                           tosl	equ	0xFFD
 45356                           pclatu	equ	0xFFB
 45357                           pclath	equ	0xFFA
 45358                           tblptru	equ	0xFF8
 45359                           tblptrh	equ	0xFF7
 45360                           tblptrl	equ	0xFF6
 45361                           tablat	equ	0xFF5
 45362                           prodh	equ	0xFF4
 45363                           prodl	equ	0xFF3
 45364                           intcon	equ	0xFF2
 45365                           intcon2	equ	0xFF1
 45366                           intcon3	equ	0xFF0
 45367                           indf0	equ	0xFEF
 45368                           postinc0	equ	0xFEE
 45369                           plusw0	equ	0xFEB
 45370                           fsr0h	equ	0xFEA
 45371                           fsr0l	equ	0xFE9
 45372                           wreg	equ	0xFE8
 45373                           postinc1	equ	0xFE6
 45374                           postdec1	equ	0xFE5
 45375                           plusw1	equ	0xFE3
 45376                           fsr1h	equ	0xFE2
 45377                           fsr1l	equ	0xFE1
 45378                           indf2	equ	0xFDF
 45379                           postinc2	equ	0xFDE
 45380                           postdec2	equ	0xFDD
 45381                           plusw2	equ	0xFDB
 45382                           fsr2h	equ	0xFDA
 45383                           fsr2l	equ	0xFD9
 45384                           status	equ	0xFD8
 45385                           
 45386                           	psect	temp
 45387  00003E                     btemp:
 45388                           	opt stack 0
 45389  00003E                     	ds	12
 45390  0000                     wtemp0	set	btemp
 45391  0000                     wtemp1	set	btemp+2
 45392  0000                     wtemp2	set	btemp+4
 45393  0000                     wtemp3	set	btemp+6
 45394  0000                     wtemp4	set	btemp+8
 45395  0000                     wtemp5	set	btemp+10
 45396  0000                     wtemp6	set	btemp+1
 45397  0000                     ttemp0	set	btemp
 45398  0000                     ttemp1	set	btemp+3
 45399  0000                     ttemp2	set	btemp+6
 45400  0000                     ttemp3	set	btemp+9
 45401  0000                     ltemp0	set	btemp
 45402  0000                     ltemp1	set	btemp+4
 45403  0000                     ltemp2	set	btemp+8
 45404                           tosu	equ	0xFFF
 45405                           tosh	equ	0xFFE
 45406                           tosl	equ	0xFFD
 45407                           pclatu	equ	0xFFB
 45408                           pclath	equ	0xFFA
 45409                           tblptru	equ	0xFF8
 45410                           tblptrh	equ	0xFF7
 45411                           tblptrl	equ	0xFF6
 45412                           tablat	equ	0xFF5
 45413                           prodh	equ	0xFF4
 45414                           prodl	equ	0xFF3
 45415                           intcon	equ	0xFF2
 45416                           intcon2	equ	0xFF1
 45417                           intcon3	equ	0xFF0
 45418                           indf0	equ	0xFEF
 45419                           postinc0	equ	0xFEE
 45420                           plusw0	equ	0xFEB
 45421                           fsr0h	equ	0xFEA
 45422                           fsr0l	equ	0xFE9
 45423                           wreg	equ	0xFE8
 45424                           postinc1	equ	0xFE6
 45425                           postdec1	equ	0xFE5
 45426                           plusw1	equ	0xFE3
 45427                           fsr1h	equ	0xFE2
 45428                           fsr1l	equ	0xFE1
 45429                           indf2	equ	0xFDF
 45430                           postinc2	equ	0xFDE
 45431                           postdec2	equ	0xFDD
 45432                           plusw2	equ	0xFDB
 45433                           fsr2h	equ	0xFDA
 45434                           fsr2l	equ	0xFD9
 45435                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    408
    Data        68
    BSS         1481
    Persistent  23
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           83     61      75
    BANK0           160    159     159
    BANK1           256    110     256
    BANK2           256      0     255
    BANK3           256      0     247
    BANK4           256      0     240
    BANK5           256      0     128
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           56      0       0

Pointer List with Targets:

    RxData@pData	PTR unsigned char  size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), NULL(NULL[0]), 

    RxPayload$0	PTR unsigned char  size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), NULL(NULL[0]), 

    S823$0$0	PTR unsigned char  size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), NULL(NULL[0]), 

    strncat@from	PTR const unsigned char  size(2) Largest target is 2
		 -> dataresult(BANK1[2]), 

    strncat@to	PTR unsigned char  size(2) Largest target is 64
		 -> dataxstr(BANK5[64]), 

    strncat@cp	PTR unsigned char  size(2) Largest target is 64
		 -> dataxstr(BANK5[64]), 

    memset@p1	PTR void  size(2) Largest target is 271
		 -> AssemblePacket@mhdr(BANK0[1]), aesBuffer(BANK3[16]), Channels(BANK4[224]), macBuffer(BIGRAM[271]), 
		 -> loRa.activationParameters(BANK2[105]), loRa(BANK2[245]), GenerateSubkey@l(BANK0[16]), AESCmac@x(BANK1[16]), 

    memset@p	PTR unsigned char  size(2) Largest target is 271
		 -> AssemblePacket@mhdr(BANK0[1]), aesBuffer(BANK3[16]), Channels(BANK4[224]), macBuffer(BIGRAM[271]), 
		 -> loRa.activationParameters(BANK2[105]), loRa(BANK2[245]), GenerateSubkey@l(BANK0[16]), AESCmac@x(BANK1[16]), 

    memcpy@d1	PTR void  size(2) Largest target is 271
		 -> UpdateCfList@frequency(BANK0[4]), ComputeMic@mic(BANK0[4]), ExtractMic@mic(BANK0[4]), aesBuffer(BANK3[16]), 
		 -> radioBuffer(BIGRAM[271]), LORAWAN_RxDone@computedMic(BANK0[4]), Channels(BANK4[224]), loRa.activationParameters.applicationEui(BANK2[8]), 
		 -> loRa.activationParameters.deviceEui(BANK2[8]), macBuffer(BIGRAM[271]), loRa.activationParameters(BANK2[105]), loRa(BANK2[245]), 
		 -> AESEncodeLoRa@useKey(BANK0[16]), RadioConfiguration(BANK1[54]), AESCmac@x(BANK1[16]), 

    memcpy@d	PTR unsigned char  size(2) Largest target is 271
		 -> UpdateCfList@frequency(BANK0[4]), ComputeMic@mic(BANK0[4]), ExtractMic@mic(BANK0[4]), aesBuffer(BANK3[16]), 
		 -> radioBuffer(BIGRAM[271]), LORAWAN_RxDone@computedMic(BANK0[4]), Channels(BANK4[224]), loRa.activationParameters.applicationEui(BANK2[8]), 
		 -> loRa.activationParameters.deviceEui(BANK2[8]), macBuffer(BIGRAM[271]), loRa.activationParameters(BANK2[105]), loRa(BANK2[245]), 
		 -> AESEncodeLoRa@useKey(BANK0[16]), RadioConfiguration(BANK1[54]), AESCmac@x(BANK1[16]), 

    memcpy@s1	PTR const void  size(2) Largest target is 271
		 -> LORAWAN_RxDone@hdr.cfList(COMRAM[16]), radioBuffer.cfList(BIGRAM[16]), tosend(BANK3[5]), appSKey(BANK4[16]), 
		 -> nwkSKey(BANK3[16]), FskSyncWordBuff(CODE[3]), UpdateCfList@joinAccept(BANK0[2]), DefaultChannels433(CODE[42]), 
		 -> DefaultChannels868(CODE[42]), AssembleEncryptionBlock@frameCounter(BANK0[4]), ComputeSessionKeys@joinAcceptBuffer(BANK0[2]), PrepareJoinRequestFrame@mic(BANK0[4]), 
		 -> loRa.devNonce(BANK2[2]), loRa.fCntUp.valueLow(BANK2[2]), aesBuffer(BANK3[16]), radioBuffer(BIGRAM[271]), 
		 -> LORAWAN_RxDone@hdr(BANK0[2]), loRa.activationParameters.applicationKey(BANK2[16]), loRa.activationParameters.applicationSessionKey(BANK2[16]), loRa.activationParameters.networkSessionKey(BANK2[16]), 
		 -> loRa.activationParameters.deviceAddress(BANK2[4]), loRa.activationParameters.applicationEui(BANK2[8]), loRa.activationParameters.deviceEui(BANK2[8]), loRa.activationParameters.mcastApplicationSessionKey(BANK2[16]), 
		 -> loRa.activationParameters.mcastNetworkSessionKey(BANK2[16]), loRa.activationParameters.mcastDeviceAddress(BANK2[4]), loRa.fCntUp(BANK2[4]), loRa.activationParameters(BANK2[105]), 
		 -> loRa(BANK2[245]), RadioConfiguration.syncWord(BANK1[8]), RadioConfiguration(BANK1[54]), AESCmac@y(BANK1[16]), 
		 -> NULL(NULL[0]), 

    memcpy@s	PTR const unsigned char  size(2) Largest target is 271
		 -> LORAWAN_RxDone@hdr.cfList(COMRAM[16]), radioBuffer.cfList(BIGRAM[16]), tosend(BANK3[5]), appSKey(BANK4[16]), 
		 -> nwkSKey(BANK3[16]), FskSyncWordBuff(CODE[3]), UpdateCfList@joinAccept(BANK0[2]), DefaultChannels433(CODE[42]), 
		 -> DefaultChannels868(CODE[42]), AssembleEncryptionBlock@frameCounter(BANK0[4]), ComputeSessionKeys@joinAcceptBuffer(BANK0[2]), PrepareJoinRequestFrame@mic(BANK0[4]), 
		 -> loRa.devNonce(BANK2[2]), loRa.fCntUp.valueLow(BANK2[2]), aesBuffer(BANK3[16]), radioBuffer(BIGRAM[271]), 
		 -> LORAWAN_RxDone@hdr(BANK0[2]), loRa.activationParameters.applicationKey(BANK2[16]), loRa.activationParameters.applicationSessionKey(BANK2[16]), loRa.activationParameters.networkSessionKey(BANK2[16]), 
		 -> loRa.activationParameters.deviceAddress(BANK2[4]), loRa.activationParameters.applicationEui(BANK2[8]), loRa.activationParameters.deviceEui(BANK2[8]), loRa.activationParameters.mcastApplicationSessionKey(BANK2[16]), 
		 -> loRa.activationParameters.mcastNetworkSessionKey(BANK2[16]), loRa.activationParameters.mcastDeviceAddress(BANK2[4]), loRa.fCntUp(BANK2[4]), loRa.activationParameters(BANK2[105]), 
		 -> loRa(BANK2[245]), RadioConfiguration.syncWord(BANK1[8]), RadioConfiguration(BANK1[54]), AESCmac@y(BANK1[16]), 
		 -> NULL(NULL[0]), 

    TMR1_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR1_DefaultInterruptHandler(), TMR_ISR_lora(), 

    TMR1_InterruptHandler	PTR FTN()void  size(2) Largest target is 4
		 -> TMR1_DefaultInterruptHandler(), TMR_ISR_lora(), Absolute function(), 

    EUSART1_SetRxInterruptHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART1_Receive_ISR(), 

    EUSART1_SetTxInterruptHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART1_Transmit_ISR(), 

    EUSART1_SetErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART1_DefaultErrorHandler(), 

    EUSART1_SetOverrunErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART1_DefaultOverrunErrorHandler(), 

    EUSART1_SetFramingErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART1_DefaultFramingErrorHandler(), 

    sp__strncat	PTR unsigned char  size(2) Largest target is 64
		 -> dataxstr(BANK5[64]), 

    EUSART1_ErrorHandler	PTR FTN()void  size(2) Largest target is 4
		 -> EUSART1_DefaultErrorHandler(), Absolute function(), 

    EUSART1_OverrunErrorHandler	PTR FTN()void  size(2) Largest target is 4
		 -> EUSART1_DefaultOverrunErrorHandler(), Absolute function(), 

    EUSART1_FramingErrorHandler	PTR FTN()void  size(2) Largest target is 4
		 -> EUSART1_DefaultFramingErrorHandler(), Absolute function(), 

    IOCB4_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> IOCB4_DefaultInterruptHandler(), DIO2_ISR_Lora(), 

    IOCB4_InterruptHandler	PTR FTN()void  size(2) Largest target is 4
		 -> IOCB4_DefaultInterruptHandler(), DIO2_ISR_Lora(), Absolute function(), 

    EUSART1_RxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 4
		 -> EUSART1_Receive_ISR(), Absolute function(), 

    EUSART1_TxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 4
		 -> EUSART1_Transmit_ISR(), Absolute function(), 

    INT2_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> INT2_DefaultInterruptHandler(), DIO1_ISR_Lora(), 

    INT2_InterruptHandler	PTR FTN()void  size(2) Largest target is 4
		 -> INT2_DefaultInterruptHandler(), DIO1_ISR_Lora(), Absolute function(), 

    INT1_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> INT1_DefaultInterruptHandler(), DIO0_ISR_Lora(), 

    INT1_InterruptHandler	PTR FTN()void  size(2) Largest target is 4
		 -> INT1_DefaultInterruptHandler(), DIO0_ISR_Lora(), Absolute function(), 

    UpdateCfList@joinAccept	PTR struct . size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), 

    SearchAvailableChannel@channelIndex	PTR unsigned char  size(2) Largest target is 1
		 -> SelectChannelForTransmission@channelIndex(BANK0[1]), LORAWAN_RxDone@channelIndex(BANK0[1]), 

    ExecuteRxParamSetupReq@ptr	PTR unsigned char  size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), 

    ExecuteNewChannel@ptr	PTR unsigned char  size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), 

    ExecuteDevStatus@ptr	PTR unsigned char  size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), 

    ExecuteLinkAdr@redundancy	PTR struct . size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), 

    ExecuteLinkAdr@ptr	PTR unsigned char  size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), 

    ExecuteDutyCycle@ptr	PTR unsigned char  size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), 

    LORAWAN_Init@RxJoinResponse	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> RxJoinResponse(), 

    LORAWAN_Init@RxPayload	PTR FTN(PTR unsigned char ,unsigned char ,enum E7264,)void  size(2) Largest target is 1
		 -> RxData(), 

    EncodeShiftRow@stateTable	PTR unsigned char  size(2) Largest target is 271
		 -> aesBuffer(BANK3[16]), radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), loRa.activationParameters(BANK2[105]), 
		 -> loRa(BANK2[245]), GenerateSubkey@l(BANK0[16]), AESCmac@y(BANK1[16]), AESCmac@x(BANK1[16]), 

    EncKeySchedule@key	PTR unsigned char  size(2) Largest target is 16
		 -> AESEncodeLoRa@useKey(BANK0[16]), 

    AESEncode@key	PTR unsigned char  size(2) Largest target is 16
		 -> AESEncodeLoRa@useKey(BANK0[16]), 

    AESEncode@block	PTR unsigned char  size(2) Largest target is 271
		 -> aesBuffer(BANK3[16]), radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), loRa.activationParameters(BANK2[105]), 
		 -> loRa(BANK2[245]), GenerateSubkey@l(BANK0[16]), AESCmac@y(BANK1[16]), AESCmac@x(BANK1[16]), 

    SwTimerSetCallback@callback	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> DutyCycleCallback(), UpdateJoinSuccessState(), AutomaticReplyCallback(), UnconfirmedTransmissionCallback(), 
		 -> AckRetransmissionCallback(), LORAWAN_LinkCheckCallback(), LORAWAN_ReceiveWindow2Callback(), LORAWAN_ReceiveWindow1Callback(), 
		 -> RADIO_WatchdogTimeout(), RADIO_RxFSKTimeout(), 

    S1968$callback	PTR FTN(unsigned char ,)void  size(2) Largest target is 4
		 -> DutyCycleCallback(), UpdateJoinSuccessState(), AutomaticReplyCallback(), UnconfirmedTransmissionCallback(), 
		 -> AckRetransmissionCallback(), LORAWAN_LinkCheckCallback(), LORAWAN_ReceiveWindow2Callback(), LORAWAN_ReceiveWindow1Callback(), 
		 -> RADIO_WatchdogTimeout(), RADIO_RxFSKTimeout(), Absolute function(), 

    swTimers.callback	PTR FTN(unsigned char ,)void  size(2) Largest target is 4
		 -> DutyCycleCallback(), UpdateJoinSuccessState(), AutomaticReplyCallback(), UnconfirmedTransmissionCallback(), 
		 -> AckRetransmissionCallback(), LORAWAN_LinkCheckCallback(), LORAWAN_ReceiveWindow2Callback(), LORAWAN_ReceiveWindow1Callback(), 
		 -> RADIO_WatchdogTimeout(), RADIO_RxFSKTimeout(), Absolute function(), 

    EncryptFRMPayload@buffer	PTR unsigned char  size(2) Largest target is 271
		 -> tosend(BANK3[5]), radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), NULL(NULL[0]), 

    EncryptFRMPayload@bufferToBeEncrypted	PTR unsigned char  size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), macBuffer(BIGRAM[271]), 

    EncryptFRMPayload@key	PTR unsigned char  size(2) Largest target is 245
		 -> loRa.activationParameters(BANK2[105]), loRa(BANK2[245]), 

    ComputeMic@buffer	PTR unsigned char  size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), macBuffer(BIGRAM[271]), 

    ComputeMic@key	PTR unsigned char  size(2) Largest target is 245
		 -> loRa.activationParameters(BANK2[105]), loRa(BANK2[245]), 

    ExtractMic@buffer	PTR unsigned char  size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), 

    CheckMcastFlags@hdr	PTR struct . size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), 

    CheckFlags@hdr	PTR struct . size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), 

    ComputeSessionKeys@joinAcceptBuffer	PTR struct . size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), 

    PrepareSessionKeys@networkId	PTR unsigned char  size(2) Largest target is 2
		 -> ComputeSessionKeys@joinAcceptBuffer(BANK0[2]), radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), 

    PrepareSessionKeys@appNonce	PTR unsigned char  size(2) Largest target is 2
		 -> ComputeSessionKeys@joinAcceptBuffer(BANK0[2]), radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), 

    PrepareSessionKeys@sessionKey	PTR unsigned char  size(2) Largest target is 245
		 -> loRa.activationParameters(BANK2[105]), loRa(BANK2[245]), 

    IncludeMacCommandsResponse@macBuffer	PTR unsigned char  size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), macBuffer(BIGRAM[271]), 

    IncludeMacCommandsResponse@pBufferIndex	PTR unsigned char  size(2) Largest target is 1
		 -> AssemblePacket@macCmdIdx(BANK0[1]), AssemblePacket@bufferIndex(BANK0[1]), 

    AssemblePacket@buffer	PTR unsigned char  size(2) Largest target is 5
		 -> tosend(BANK3[5]), NULL(NULL[0]), 

    ExecuteRxTimingSetup@ptr	PTR unsigned char  size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), 

    ExecuteLinkCheck@ptr	PTR unsigned char  size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), 

    sp__ExecuteRxTimingSetup	PTR unsigned char  size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), 

    sp__ExecuteNewChannel	PTR unsigned char  size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), 

    sp__ExecuteDevStatus	PTR unsigned char  size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), 

    sp__ExecuteRxParamSetupReq	PTR unsigned char  size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), 

    sp__ExecuteDutyCycle	PTR unsigned char  size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), 

    sp__ExecuteLinkAdr	PTR unsigned char  size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), 

    sp__ExecuteLinkCheck	PTR unsigned char  size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), 

    MacExecuteCommands@buffer	PTR unsigned char  size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), 

    MacExecuteCommands@ptr	PTR unsigned char  size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), 

    sp__MacExecuteCommands	PTR unsigned char  size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), 

    LORAWAN_RxDone@packet	PTR unsigned char  size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), NULL(NULL[0]), 

    LORAWAN_RxDone@hdr	PTR struct . size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), 

    LORAWAN_RxDone@joinAccept	PTR struct . size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), 

    LORAWAN_RxDone@buffer	PTR unsigned char  size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), 

    LORAWAN_SetApplicationSessionKey@applicationSessionKeyNew	PTR unsigned char  size(2) Largest target is 16
		 -> appSKey(BANK4[16]), 

    LORAWAN_SetNetworkSessionKey@networkSessionKeyNew	PTR unsigned char  size(2) Largest target is 16
		 -> nwkSKey(BANK3[16]), 

    LORAWAN_Send@buffer	PTR void  size(2) Largest target is 5
		 -> tosend(BANK3[5]), NULL(NULL[0]), 

    S823$RxJoinResponse	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> RxJoinResponse(), 

    rxPayload.RxJoinResponse	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> RxJoinResponse(), 

    S823$RxAppData	PTR FTN(PTR unsigned char ,unsigned char ,enum E7205,)void  size(2) Largest target is 1
		 -> RxData(), 

    rxPayload.RxAppData	PTR FTN(PTR unsigned char ,unsigned char ,enum E7205,)void  size(2) Largest target is 1
		 -> RxData(), 

    AESEncodeLoRa@block	PTR unsigned char  size(2) Largest target is 271
		 -> aesBuffer(BANK3[16]), radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), loRa.activationParameters(BANK2[105]), 
		 -> loRa(BANK2[245]), GenerateSubkey@l(BANK0[16]), AESCmac@y(BANK1[16]), AESCmac@x(BANK1[16]), 

    AESEncodeLoRa@key	PTR unsigned char  size(2) Largest target is 245
		 -> loRa.activationParameters(BANK2[105]), loRa(BANK2[245]), 

    RADIO_SetFSKSyncWord@syncWord	PTR unsigned char  size(2) Largest target is 3
		 -> FskSyncWordBuff(CODE[3]), 

    RADIO_Transmit@buffer	PTR unsigned char  size(2) Largest target is 271
		 -> macBuffer(BIGRAM[271]), 

    RADIO_Init@radioBuffer	PTR unsigned char  size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), 

    S283$fhssNextFrequency	PTR FTN()unsigned long  size(2) Largest target is 4
		 -> Absolute function(), 

    RadioConfiguration.fhssNextFrequency	PTR FTN()unsigned long  size(2) Largest target is 4
		 -> Absolute function(), 

    S283$dataBuffer	PTR unsigned char  size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), 

    RadioConfiguration.dataBuffer	PTR unsigned char  size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), 

    FillSubKey@source	PTR unsigned char  size(2) Largest target is 16
		 -> GenerateSubkey@l(BANK0[16]), AESCmac@k1(BANK1[16]), 

    FillSubKey@key	PTR unsigned char  size(2) Largest target is 16
		 -> AESCmac@k2(BANK1[16]), AESCmac@k1(BANK1[16]), 

    GenerateSubkey@k2	PTR unsigned char  size(2) Largest target is 16
		 -> AESCmac@k2(BANK1[16]), 

    GenerateSubkey@k1	PTR unsigned char  size(2) Largest target is 16
		 -> AESCmac@k1(BANK1[16]), 

    GenerateSubkey@key	PTR unsigned char  size(2) Largest target is 245
		 -> loRa.activationParameters(BANK2[105]), loRa(BANK2[245]), 

    AESCmac@output	PTR unsigned char  size(2) Largest target is 16
		 -> aesBuffer(BANK3[16]), 

    sp__memcpy	PTR void  size(2) Largest target is 271
		 -> UpdateCfList@frequency(BANK0[4]), ComputeMic@mic(BANK0[4]), ExtractMic@mic(BANK0[4]), aesBuffer(BANK3[16]), 
		 -> radioBuffer(BIGRAM[271]), LORAWAN_RxDone@computedMic(BANK0[4]), Channels(BANK4[224]), loRa.activationParameters.applicationEui(BANK2[8]), 
		 -> loRa.activationParameters.deviceEui(BANK2[8]), macBuffer(BIGRAM[271]), loRa.activationParameters(BANK2[105]), loRa(BANK2[245]), 
		 -> AESEncodeLoRa@useKey(BANK0[16]), RadioConfiguration(BANK1[54]), AESCmac@x(BANK1[16]), 

    sp__memset	PTR void  size(2) Largest target is 271
		 -> AssemblePacket@mhdr(BANK0[1]), aesBuffer(BANK3[16]), Channels(BANK4[224]), macBuffer(BIGRAM[271]), 
		 -> loRa.activationParameters(BANK2[105]), loRa(BANK2[245]), GenerateSubkey@l(BANK0[16]), AESCmac@x(BANK1[16]), 

    AESCmac@input	PTR unsigned char  size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), macBuffer(BIGRAM[271]), 

    AESCmac@key	PTR unsigned char  size(2) Largest target is 245
		 -> loRa.activationParameters(BANK2[105]), loRa(BANK2[245]), 

    AESCmac@ptr	PTR unsigned char  size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), LORAWAN_RxDone@hdr(BANK0[2]), macBuffer(BIGRAM[271]), NULL(NULL[0]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    _TMR1_CallBack->_TMR_ISR_lora
    _TMR_ISR_lora->i2_SwTimersInterrupt
    i2_TMR_SwapTimer->i2_TMR1_ReadTimer
    i2_SwTimersInterrupt->i2_TMR_GetDeltaTime
    i2_TMR_GetDeltaTime->i2_TMR1_ReadTimer
    _EUSART1_Receive_ISR->_strncat

Critical Paths under _main in BANK0

    ___aldiv->___almod
    _TMR1_Initialize->_TMR1_SetInterruptHandler
    _PIN_MANAGER_Initialize->_IOCB4_SetInterruptHandler
    _TMR_ISR_Lora_Init->_TMR1_SetInterruptHandler
    _DIO2_ISR_Lora_Init->_IOCB4_SetInterruptHandler
    _DIO1_ISR_Lora_Init->_INT2_SetInterruptHandler
    _DIO0_ISR_Lora_Init->_INT1_SetInterruptHandler
    _EXT_INT_Initialize->_INT1_SetInterruptHandler
    _EXT_INT_Initialize->_INT2_SetInterruptHandler
    _EUSART1_Initialize->_EUSART1_SetErrorHandler
    _EUSART1_Initialize->_EUSART1_SetFramingErrorHandler
    _EUSART1_Initialize->_EUSART1_SetOverrunErrorHandler
    _EUSART1_Initialize->_EUSART1_SetRxInterruptHandler
    _EUSART1_Initialize->_EUSART1_SetTxInterruptHandler
    _LORAWAN_SetNetworkSessionKey->_memcpy
    _LORAWAN_SetApplicationSessionKey->_memcpy
    _LORAWAN_Mainloop->_RADIO_DIO0
    _UnconfirmedTransmissionCallback->_RADIO_Transmit
    _RADIO_WatchdogTimeout->_RADIO_WriteMode
    _RADIO_RxFSKTimeout->_RADIO_WriteMode
    _LORAWAN_ReceiveWindow1Callback->_RADIO_ReceiveStart
    _LORAWAN_LinkCheckCallback->_SwTimerStart
    _DutyCycleCallback->_SwTimerStart
    _AutomaticReplyCallback->_LORAWAN_Send
    _AckRetransmissionCallback->_RADIO_Transmit
    _RADIO_DIO5->_RADIO_UnhandledInterrupt
    _RADIO_DIO4->_RADIO_UnhandledInterrupt
    _RADIO_DIO3->_RADIO_UnhandledInterrupt
    _RADIO_DIO2->_RADIO_FHSSChangeChannel
    _RADIO_RxTimeout->_LORAWAN_RxTimeout
    _RADIO_FHSSChangeChannel->_RADIO_WriteFrequency
    _RADIO_DIO0->_RADIO_FSKPayloadReady
    _RADIO_DIO0->_RADIO_RxDone
    _RADIO_UnhandledInterrupt->_RADIO_RegisterWrite
    _RADIO_TxDone->_LORAWAN_TxDone
    _RADIO_RxDone->_LORAWAN_RxDone
    _RADIO_FSKPayloadReady->_LORAWAN_RxDone
    _LORAWAN_RxTimeout->_RADIO_Transmit
    _LORAWAN_ReceiveWindow2Callback->_RADIO_ReceiveStart
    _LORAWAN_RxDone->_LORAWAN_Send
    _UpdateRetransmissionAckTimeoutState->_SwTimerStart
    _UpdateJoinSuccessState->_SwTimerStart
    _UpdateCfList->___lmul
    _StartReTxTimer->_SwTimerStart
    _MacExecuteCommands->_ExecuteNewChannel
    _ExecuteRxTimingSetup->_UpdateReceiveDelays
    _UpdateReceiveDelays->___wmul
    _ExecuteRxParamSetupReq->___lmul
    _ExecuteNewChannel->___lmul
    _ValidateDataRange->_ValidateDataRate
    _LORAWAN_SetChannelIdStatus->_UpdateChannelIdStatus
    _ExecuteLinkAdr->_EnableChannels
    _EnableChannels->_EnableChannels1
    _EnableChannels1->_UpdateChannelIdStatus
    _LORAWAN_Send->_AssemblePacket
    _LORAWAN_GetMaxPayloadSize->_CountfOptsLength
    _AssemblePacket->_AESCmac
    _EncryptFRMPayload->_AESEncodeLoRa
    ___awdiv->___awmod
    _AssembleEncryptionBlock->_memcpy
    _ExtractMic->_memcpy
    _ComputeSessionKeys->_AESEncodeLoRa
    _PrepareSessionKeys->_memcpy
    _RADIO_FSKPacketSent->_LORAWAN_TxDone
    _SwTimerReadValue->_SwTimersInterrupt
    _LORAWAN_EnterContinuousReceive->_RADIO_ReceiveStart
    _RADIO_ReceiveStop->_RADIO_WriteMode
    _RADIO_ReceiveStart->_RADIO_WriteConfiguration
    _ConfigureRadioRx->_ConfigureRadio
    _LORAWAN_Join->_PrepareJoinRequestFrame
    _SelectChannelForTransmission->_SearchAvailableChannel
    _SearchAvailableChannel->_Random
    _ConfigureRadioTx->_ConfigureRadio
    _ConfigureRadio->_RADIO_SetFSKSyncWord
    _RADIO_SetFSKSyncWord->_memcpy
    _RADIO_Transmit->_RADIO_WriteConfiguration
    _RADIO_WriteConfiguration->___lmul
    _RADIO_WritePower->_RADIO_RegisterRead
    _RADIO_WritePower->_RADIO_RegisterWrite
    _RADIO_WriteFSKFrequencyDeviation->___lldiv
    _RADIO_WriteFSKBitRate->___lldiv
    _PrepareJoinRequestFrame->_ComputeMic
    _Random->___lwmod
    _rand->___lmul
    ___lwmod->_rand
    _ComputeMic->_AESCmac
    _AESCmac->_GenerateSubkey
    _GenerateSubkey->_AESEncodeLoRa
    _AESEncodeLoRa->_AESEncode
    _AESEncode->_EncKeySchedule
    _LORAWAN_Init->_LORAWAN_Reset
    _srand->_RADIO_ReadRandom
    _SetCallbackSoftwareTimers->_SwTimerSetCallback
    _RADIO_ReadRandom->_RADIO_WriteMode
    _LORAWAN_Reset->_LORAWAN_LinkCheckConfigure
    _StopAllSoftwareTimers->_SwTimerStop
    _RADIO_Init->_RADIO_WriteFrequency
    _RADIO_WriteMode->_SystemBlockingWaitMs
    _RADIO_RegisterRead->_HALSPISend
    _RADIO_WriteFrequency->___lldiv
    _RADIO_RegisterWrite->_HALSPISend
    _HALSPISend->_SPI2_Exchange8bit
    _RADIO_Reset->_SystemBlockingWaitMs
    _LORAWAN_LinkCheckConfigure->___lmul
    ___lmul->_SwTimerReadValue
    _SwTimerStart->_SwTimersInterrupt
    _TMR_OverrideRemaining->_TMR_SwapTimer
    _TMR_SwapTimer->_TMR1_ReadTimer
    _SwTimersInterrupt->_TMR_GetDeltaTime
    _TMR_GetDeltaTime->_TMR1_ReadTimer
    _SwTimerSetTimeout->___lldiv
    _InitDefault868Channels->_memcpy
    _InitDefault433Channels->_memcpy
    _CreateAllSoftwareTimers->_SwTimerCreate

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    _RADIO_RxDone->_LORAWAN_RxDone
    _RADIO_FSKPayloadReady->_LORAWAN_RxDone
    _LORAWAN_RxDone->_AESCmac
    _AssemblePacket->_AESCmac
    _ComputeMic->_AESCmac

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                11    11      0 5807944
                                            153 BANK0      6     6      0
                                            105 BANK1      5     5      0
                      _EUSART1_Write
                       _LORAWAN_Init
                       _LORAWAN_Join
                   _LORAWAN_Mainloop
                       _LORAWAN_Send
   _LORAWAN_SetApplicationSessionKey
           _LORAWAN_SetDeviceAddress
       _LORAWAN_SetNetworkSessionKey
                  _SYSTEM_Initialize
            _TMR5_HasOverflowOccured
                            ___aldiv
                            ___almod
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (1) ___awmod                                              6     2      4    1008
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (1) ___almod                                             10     2      8     474
                                              0 BANK0     10     2      8
 ---------------------------------------------------------------------------------
 (1) ___aldiv                                             14     6      8     478
                                             10 BANK0     14     6      8
                            ___almod (ARG)
 ---------------------------------------------------------------------------------
 (1) _TMR5_HasOverflowOccured                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0    2155
                 _EUSART1_Initialize
                 _EXT_INT_Initialize
               _INTERRUPT_Initialize
               _LORAWAN_PlatformInit
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _SPI2_Initialize
                    _TMR1_Initialize
                    _TMR5_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR5_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Initialize                                      0     0      0     200
           _TMR1_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (2) _SPI2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0     200
          _IOCB4_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _LORAWAN_PlatformInit                                 0     0      0     800
                 _DIO0_ISR_Lora_Init
                 _DIO1_ISR_Lora_Init
                 _DIO2_ISR_Lora_Init
                 _DIO3_ISR_Lora_Init
                 _DIO4_ISR_Lora_Init
                 _DIO5_ISR_Lora_Init
                    _SystemTimerInit
                  _TMR_ISR_Lora_Init
 ---------------------------------------------------------------------------------
 (3) _TMR_ISR_Lora_Init                                    0     0      0     200
           _TMR1_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _TMR1_SetInterruptHandler                             2     0      2     200
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _SystemTimerInit                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _DIO5_ISR_Lora_Init                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _DIO4_ISR_Lora_Init                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _DIO3_ISR_Lora_Init                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _DIO2_ISR_Lora_Init                                   0     0      0     200
          _IOCB4_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _IOCB4_SetInterruptHandler                            2     0      2     200
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _DIO1_ISR_Lora_Init                                   0     0      0     200
           _INT2_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _DIO0_ISR_Lora_Init                                   0     0      0     200
           _INT1_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EXT_INT_Initialize                                   0     0      0     400
           _INT1_SetInterruptHandler
           _INT2_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (4) _INT2_SetInterruptHandler                             2     0      2     200
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (4) _INT1_SetInterruptHandler                             2     0      2     200
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Initialize                                   0     0      0     555
            _EUSART1_SetErrorHandler
     _EUSART1_SetFramingErrorHandler
     _EUSART1_SetOverrunErrorHandler
      _EUSART1_SetRxInterruptHandler
      _EUSART1_SetTxInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _EUSART1_SetTxInterruptHandler                        2     0      2     111
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART1_SetRxInterruptHandler                        2     0      2     111
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART1_SetOverrunErrorHandler                       2     0      2     111
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART1_SetFramingErrorHandler                       2     0      2     111
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART1_SetErrorHandler                              2     0      2     111
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _LORAWAN_SetNetworkSessionKey                         2     0      2   12024
                                             11 BANK0      2     0      2
                             _memcpy
 ---------------------------------------------------------------------------------
 (1) _LORAWAN_SetDeviceAddress                             4     0      4     111
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (1) _LORAWAN_SetApplicationSessionKey                     2     0      2   12024
                                             11 BANK0      2     0      2
                             _memcpy
 ---------------------------------------------------------------------------------
 (1) _LORAWAN_Mainloop                                     0     0      0 5131601
             _INTERRUPT_GetDioStatus
                         _RADIO_DIO0
                         _RADIO_DIO1
                         _RADIO_DIO2
                         _RADIO_DIO3
                         _RADIO_DIO4
                         _RADIO_DIO5
                    _SwTimersExecute
 ---------------------------------------------------------------------------------
 (2) _SwTimersExecute                                      5     5      0 1996459
                                            122 BANK0      5     5      0
                   Absolute function *
          _AckRetransmissionCallback *
             _AutomaticReplyCallback *
                  _DutyCycleCallback *
          _LORAWAN_LinkCheckCallback *
     _LORAWAN_ReceiveWindow1Callback *
     _LORAWAN_ReceiveWindow2Callback *
                 _RADIO_RxFSKTimeout *
              _RADIO_WatchdogTimeout *
    _UnconfirmedTransmissionCallback *
             _UpdateJoinSuccessState *
 ---------------------------------------------------------------------------------
 (3) _UnconfirmedTransmissionCallback                      1     0      1  131857
                     _RADIO_Transmit
_ResetParametersForUnconfirmedTransm
                             _RxData *
       _SelectChannelForTransmission
 ---------------------------------------------------------------------------------
 (3) _RADIO_WatchdogTimeout                                1     0      1  585627
                  _LORAWAN_RxTimeout
                     _LORAWAN_TxDone
                    _RADIO_WriteMode
 ---------------------------------------------------------------------------------
 (3) _RADIO_RxFSKTimeout                                   2     1      1  429571
                  _LORAWAN_RxTimeout
                 _RADIO_RegisterRead
                    _RADIO_WriteMode
                        _SwTimerStop
 ---------------------------------------------------------------------------------
 (3) _LORAWAN_ReceiveWindow1Callback                       5     4      1  134048
                   _ConfigureRadioRx
                         _GetRx1Freq
                 _RADIO_ReceiveStart
                  _RADIO_ReceiveStop
                  _RADIO_ReleaseData
 ---------------------------------------------------------------------------------
 (4) _GetRx1Freq                                           4     0      4       0
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (3) _LORAWAN_LinkCheckCallback                            6     5      1    7908
                  _SwTimerSetTimeout
                       _SwTimerStart
                            ___lldiv
 ---------------------------------------------------------------------------------
 (3) _DutyCycleCallback                                   11    10      1    8219
                  _SwTimerSetTimeout
                       _SwTimerStart
                            ___lldiv
 ---------------------------------------------------------------------------------
 (3) _AutomaticReplyCallback                               1     0      1  274562
                       _LORAWAN_Send
 ---------------------------------------------------------------------------------
 (3) _AckRetransmissionCallback                            2     1      1  140194
               _FindSmallestDataRate
          _LORAWAN_GetMaxPayloadSize
                     _RADIO_Transmit
_ResetParametersForConfirmedTransmis
                             _RxData *
       _SelectChannelForTransmission
_UpdateRetransmissionAckTimeoutState
 ---------------------------------------------------------------------------------
 (16) Absolute function(Fake)                              4     0      4       0
 ---------------------------------------------------------------------------------
 (2) _RADIO_DIO5                                           2     2      0    8478
                                              5 BANK0      2     2      0
                 _RADIO_RegisterRead
           _RADIO_UnhandledInterrupt
 ---------------------------------------------------------------------------------
 (2) _RADIO_DIO4                                           3     3      0    8478
                                              5 BANK0      3     3      0
                 _RADIO_RegisterRead
           _RADIO_UnhandledInterrupt
 ---------------------------------------------------------------------------------
 (2) _RADIO_DIO3                                           2     2      0    8478
                                              5 BANK0      2     2      0
                 _RADIO_RegisterRead
           _RADIO_UnhandledInterrupt
 ---------------------------------------------------------------------------------
 (2) _RADIO_DIO2                                           3     3      0   31054
                                             26 BANK0      3     3      0
            _RADIO_FHSSChangeChannel
                 _RADIO_RegisterRead
           _RADIO_UnhandledInterrupt
 ---------------------------------------------------------------------------------
 (2) _RADIO_DIO1                                           2     2      0  468898
                                            107 BANK0      2     2      0
            _RADIO_FHSSChangeChannel
                 _RADIO_RegisterRead
                    _RADIO_RxTimeout
           _RADIO_UnhandledInterrupt
 ---------------------------------------------------------------------------------
 (3) _RADIO_RxTimeout                                      0     0      0  437823
                  _LORAWAN_RxTimeout
                _RADIO_RegisterWrite
                    _RADIO_WriteMode
                        _SwTimerStop
 ---------------------------------------------------------------------------------
 (3) _RADIO_FHSSChangeChannel                              1     1      0   22553
                                             25 BANK0      1     1      0
                 _RADIO_RegisterRead
                _RADIO_RegisterWrite
               _RADIO_WriteFrequency
 ---------------------------------------------------------------------------------
 (2) _RADIO_DIO0                                           4     4      0 2609733
                                            149 BANK0      4     4      0
                _RADIO_FSKPacketSent
              _RADIO_FSKPayloadReady
                 _RADIO_RegisterRead
                       _RADIO_RxDone
                       _RADIO_TxDone
           _RADIO_UnhandledInterrupt
 ---------------------------------------------------------------------------------
 (3) _RADIO_UnhandledInterrupt                             1     1      0    8387
                                              4 BANK0      1     1      0
                _RADIO_RegisterWrite
 ---------------------------------------------------------------------------------
 (3) _RADIO_TxDone                                        12    12      0  183306
                                            131 BANK0     12    12      0
                     _LORAWAN_TxDone
                _RADIO_RegisterWrite
                    _RADIO_WriteMode
                   _SwTimerReadValue
                        _SwTimerStop
                             ___lmul
 ---------------------------------------------------------------------------------
 (3) _RADIO_RxDone                                         2     2      0  917786
                                            147 BANK0      2     2      0
                     _HALSPICSAssert
                   _HALSPICSDeassert
                         _HALSPISend
                     _LORAWAN_RxDone
                 _RADIO_RegisterRead
                _RADIO_RegisterWrite
                    _RADIO_WriteMode
                        _SwTimerStop
                            ___abdiv
 ---------------------------------------------------------------------------------
 (4) ___abdiv                                              7     6      1     389
                                              0 BANK0      7     6      1
 ---------------------------------------------------------------------------------
 (3) _RADIO_FSKPayloadReady                                2     2      0 1324997
                                            147 BANK0      2     2      0
                     _HALSPICSAssert
                   _HALSPICSDeassert
                         _HALSPISend
                     _LORAWAN_RxDone
                  _LORAWAN_RxTimeout
                 _RADIO_RegisterRead
                    _RADIO_WriteMode
                        _SwTimerStop
 ---------------------------------------------------------------------------------
 (4) _LORAWAN_RxTimeout                                    9     9      0  415988
                                             98 BANK0      9     9      0
     _LORAWAN_ReceiveWindow2Callback
                     _RADIO_Transmit
_ResetParametersForConfirmedTransmis
_ResetParametersForUnconfirmedTransm
                             _RxData *
       _SelectChannelForTransmission
                   _SetJoinFailState
                  _SwTimerSetTimeout
                       _SwTimerStart
                            ___lldiv
 ---------------------------------------------------------------------------------
 (5) _LORAWAN_ReceiveWindow2Callback                       1     0      1  276114
                   _ConfigureRadioRx
     _LORAWAN_EnterContinuousReceive
                    _RADIO_GetStatus
                 _RADIO_ReceiveStart
                  _RADIO_ReceiveStop
                  _RADIO_ReleaseData
_ResetParametersForConfirmedTransmis
_ResetParametersForUnconfirmedTransm
                             _RxData *
 ---------------------------------------------------------------------------------
 (4) _LORAWAN_RxDone                                      28    25      3  895314
                                            122 BANK0     25    25      0
                                            102 BANK1      3     0      3
                            _AESCmac
                      _AESEncodeLoRa
            _AssembleEncryptionBlock
                         _CheckFlags
                    _CheckMcastFlags
                         _ComputeMic
                 _ComputeSessionKeys
                  _EncryptFRMPayload
                         _ExtractMic
     _LORAWAN_EnterContinuousReceive
                       _LORAWAN_Send
                 _MacExecuteCommands
                    _RADIO_GetStatus
                  _RADIO_ReleaseData
                             _RxData *
             _SearchAvailableChannel
                   _SetJoinFailState
             _SetReceptionNotOkState
                     _StartReTxTimer
                        _SwTimerStop
                       _UpdateCfList
                   _UpdateDLSettings
             _UpdateJoinSuccessState
                _UpdateReceiveDelays
_UpdateRetransmissionAckTimeoutState
                             _memcpy
 ---------------------------------------------------------------------------------
 (4) _UpdateRetransmissionAckTimeoutState                  4     4      0    7815
                                             58 BANK0      4     4      0
                  _SwTimerSetTimeout
                       _SwTimerStart
                            ___lldiv
 ---------------------------------------------------------------------------------
 (3) _UpdateJoinSuccessState                               5     4      1    7839
                     _RxJoinResponse *
                  _SwTimerSetTimeout
                       _SwTimerStart
                            ___lldiv
 ---------------------------------------------------------------------------------
 (5) _UpdateDLSettings                                     2     1      1     177
                                              0 BANK0      2     1      1
 ---------------------------------------------------------------------------------
 (5) _UpdateCfList                                         9     7      2   21562
                                             70 BANK0      9     7      2
         _LORAWAN_SetChannelIdStatus
                  _ValidateFrequency
                             ___lmul
                             ___wmul
                             _memcpy
 ---------------------------------------------------------------------------------
 (5) _StartReTxTimer                                       9     9      0    8017
                                             58 BANK0      9     9      0
                  _SwTimerSetTimeout
                       _SwTimerStart
                            ___lldiv
 ---------------------------------------------------------------------------------
 (5) _SetReceptionNotOkState                               0     0      0  142089
     _LORAWAN_EnterContinuousReceive
                             _RxData *
 ---------------------------------------------------------------------------------
 (5) _SetJoinFailState                                     0     0      0       0
                     _RxJoinResponse *
 ---------------------------------------------------------------------------------
 (4) _RxJoinResponse                                       1     1      0       0
 ---------------------------------------------------------------------------------
 (5) _MacExecuteCommands                                   8     5      3   22914
                                             80 BANK0      8     5      3
                   _ExecuteDevStatus
                   _ExecuteDutyCycle
                     _ExecuteLinkAdr
                   _ExecuteLinkCheck
                  _ExecuteNewChannel
             _ExecuteRxParamSetupReq
               _ExecuteRxTimingSetup
 ---------------------------------------------------------------------------------
 (6) _ExecuteRxTimingSetup                                 3     1      2    1784
                                              7 BANK0      3     1      2
                _UpdateReceiveDelays
 ---------------------------------------------------------------------------------
 (5) _UpdateReceiveDelays                                  1     1      0    1627
                                              6 BANK0      1     1      0
                             ___wmul
 ---------------------------------------------------------------------------------
 (6) ___wmul                                               6     2      4    1583
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (6) _ExecuteRxParamSetupReq                               9     7      2    6259
                                             70 BANK0      9     7      2
     _UpdateReceiveWindow2Parameters
                   _ValidateDataRate
                  _ValidateFrequency
                   _ValidateRxOffset
                             ___lmul
 ---------------------------------------------------------------------------------
 (7) _ValidateRxOffset                                     2     2      0      46
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (7) _UpdateReceiveWindow2Parameters                       5     0      5     400
                                              0 BANK0      5     0      5
 ---------------------------------------------------------------------------------
 (6) _ExecuteNewChannel                                   10     8      2   11071
                                             70 BANK0     10     8      2
         _LORAWAN_SetChannelIdStatus
              _UpdateChannelIdStatus
                    _UpdateDataRange
                    _UpdateDutyCycle
                    _UpdateFrequency
                  _ValidateChannelId
                  _ValidateDataRange
                  _ValidateFrequency
                             ___lmul
 ---------------------------------------------------------------------------------
 (6) _ValidateFrequency                                    5     1      4     558
                                              0 BANK0      5     1      4
 ---------------------------------------------------------------------------------
 (7) _ValidateDataRange                                    4     4      0     204
                                              2 BANK0      4     4      0
                   _ValidateDataRate
 ---------------------------------------------------------------------------------
 (7) _UpdateFrequency                                      5     1      4     333
                                              0 BANK0      5     1      4
 ---------------------------------------------------------------------------------
 (7) _UpdateDutyCycle                                      3     1      2     333
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (7) _UpdateDataRange                                      4     3      1     489
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (6) _LORAWAN_SetChannelIdStatus                           3     2      1    2033
                                              4 BANK0      3     2      1
              _UpdateChannelIdStatus
                  _ValidateChannelId
 ---------------------------------------------------------------------------------
 (7) _ValidateChannelId                                    3     2      1     802
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (6) _ExecuteLinkCheck                                     2     0      2     157
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (6) _ExecuteLinkAdr                                      10     8      2    2590
                                             15 BANK0     10     8      2
                     _EnableChannels
              _UpdateCurrentDataRate
                      _UpdateTxPower
                _ValidateChannelMask
            _ValidateChannelMaskCntl
                   _ValidateDataRate
                    _ValidateTxPower
 ---------------------------------------------------------------------------------
 (7) _ValidateTxPower                                      2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (7) _ValidateDataRate                                     2     2      0      46
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (7) _ValidateChannelMaskCntl                              2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (7) _ValidateChannelMask                                  5     3      2     225
                                              0 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (7) _UpdateTxPower                                        1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (7) _UpdateCurrentDataRate                                1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (7) _EnableChannels                                       3     0      3    1647
                                             12 BANK0      3     0      3
                    _EnableChannels1
 ---------------------------------------------------------------------------------
 (8) _EnableChannels1                                      8     3      5    1425
                                              4 BANK0      8     3      5
              _UpdateChannelIdStatus
 ---------------------------------------------------------------------------------
 (7) _UpdateChannelIdStatus                                4     3      1     778
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (6) _ExecuteDutyCycle                                     6     4      2     201
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (6) _ExecuteDevStatus                                     2     0      2     111
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _LORAWAN_Send                                         7     3      4  274562
                                            115 BANK0      7     3      4
                     _AssemblePacket
          _LORAWAN_GetMaxPayloadSize
                  _RADIO_ReceiveStop
                     _RADIO_Transmit
       _SelectChannelForTransmission
 ---------------------------------------------------------------------------------
 (2) _LORAWAN_GetMaxPayloadSize                            3     3      0     184
                                              8 BANK0      3     3      0
                   _CountfOptsLength
 ---------------------------------------------------------------------------------
 (2) _AssemblePacket                                      12     7      5  131832
                                            103 BANK0     12     7      5
                            _AESCmac
            _AssembleEncryptionBlock
                   _CountfOptsLength
                  _EncryptFRMPayload
               _FindSmallestDataRate
         _IncludeMacCommandsResponse
                             _memcpy
                             _memset
 ---------------------------------------------------------------------------------
 (3) _IncludeMacCommandsResponse                          15    10      5    1870
                                              0 BANK0     15    10      5
                 _RADIO_GetPacketSnr
 ---------------------------------------------------------------------------------
 (4) _RADIO_GetPacketSnr                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _FindSmallestDataRate                                 4     4      0     315
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (3) _EncryptFRMPayload                                   22     8     14   39496
                                             49 BANK0     22     8     14
                      _AESEncodeLoRa
            _AssembleEncryptionBlock
                            ___awdiv
 ---------------------------------------------------------------------------------
 (1) ___awdiv                                              8     4      4    1368
                                              6 BANK0      8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (4) _AssembleEncryptionBlock                              9     2      7   17042
                                             11 BANK0      9     2      7
                             _memcpy
                             _memset
 ---------------------------------------------------------------------------------
 (3) _CountfOptsLength                                     8     8      0     136
                                              0 BANK0      8     8      0
 ---------------------------------------------------------------------------------
 (5) _ExtractMic                                          12     8      4   12516
                                             11 BANK0     12     8      4
                             _memcpy
 ---------------------------------------------------------------------------------
 (5) _ComputeSessionKeys                                   2     0      2   32758
                                             49 BANK0      2     0      2
                      _AESEncodeLoRa
                 _PrepareSessionKeys
 ---------------------------------------------------------------------------------
 (6) _PrepareSessionKeys                                   7     1      6   15726
                                             11 BANK0      7     1      6
                             _memcpy
                             _memset
 ---------------------------------------------------------------------------------
 (5) _CheckMcastFlags                                      2     0      2     221
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (5) _CheckFlags                                           2     0      2     177
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _RADIO_FSKPacketSent                                 13    13      0  175054
                                            131 BANK0     13    13      0
                     _LORAWAN_TxDone
                 _RADIO_RegisterRead
                    _RADIO_WriteMode
                   _SwTimerReadValue
                        _SwTimerStop
                             ___lmul
 ---------------------------------------------------------------------------------
 (4) _LORAWAN_TxDone                                      40    38      2  156191
                                             91 BANK0     40    38      2
     _LORAWAN_EnterContinuousReceive
                    _RADIO_GetStatus
                             _RxData *
                   _SwTimerIsRunning
                   _SwTimerReadValue
                  _SwTimerSetTimeout
                       _SwTimerStart
                        _SwTimerStop
                            ___lldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (5) _SwTimerReadValue                                     9     5      4     361
                                             49 BANK0      9     5      4
                  _SwTimersInterrupt
 ---------------------------------------------------------------------------------
 (5) _SwTimerIsRunning                                     2     2      0      45
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (5) _RADIO_GetStatus                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _LORAWAN_EnterContinuousReceive                       0     0      0  138057
                   _ConfigureRadioRx
                 _RADIO_ReceiveStart
                  _RADIO_ReceiveStop
                  _RADIO_ReleaseData
_ResetParametersForConfirmedTransmis
_ResetParametersForUnconfirmedTransm
                             _RxData *
 ---------------------------------------------------------------------------------
 (4) _RxData                                               4     0      4    4032
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (4) _ResetParametersForUnconfirmedTransmission            0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _ResetParametersForConfirmedTransmission              0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _RADIO_ReleaseData                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _RADIO_ReceiveStop                                    0     0      0   13448
                    _RADIO_WriteMode
 ---------------------------------------------------------------------------------
 (6) _RADIO_ReceiveStart                                  10     8      2  107423
                                             81 BANK0     10     8      2
                _RADIO_RegisterWrite
           _RADIO_WriteConfiguration
                    _RADIO_WriteMode
                  _SwTimerSetTimeout
                       _SwTimerStart
                            ___lldiv
 ---------------------------------------------------------------------------------
 (6) _ConfigureRadioRx                                     5     1      4   13154
                                             19 BANK0      5     1      4
                     _ConfigureRadio
                       _RADIO_SetCRC
                _RADIO_SetIQInverted
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_GetDioStatus                               1     1      0      23
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _LORAWAN_Join                                         3     3      0  221138
                                            123 BANK0      3     3      0
            _PrepareJoinRequestFrame
                     _RADIO_Transmit
       _SelectChannelForTransmission
                  _SwTimerSetTimeout
                       _SwTimerStart
               _UpdateJoinInProgress
 ---------------------------------------------------------------------------------
 (2) _UpdateJoinInProgress                                 1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _SelectChannelForTransmission                         3     3      0   19506
                                             91 BANK0      3     3      0
                   _ConfigureRadioTx
             _SearchAvailableChannel
 ---------------------------------------------------------------------------------
 (3) _SearchAvailableChannel                              12     9      3    6348
                                             79 BANK0     12     9      3
                             _Random
 ---------------------------------------------------------------------------------
 (3) _ConfigureRadioTx                                     6     2      4   13022
                                             19 BANK0      6     2      4
                     _ConfigureRadio
                       _RADIO_SetCRC
                _RADIO_SetIQInverted
               _RADIO_SetOutputPower
 ---------------------------------------------------------------------------------
 (4) _RADIO_SetOutputPower                                 1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _RADIO_SetIQInverted                                  1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _RADIO_SetCRC                                         1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _ConfigureRadio                                       5     1      4   12799
                                             14 BANK0      5     1      4
                 _RADIO_SetBandwidth
          _RADIO_SetChannelFrequency
               _RADIO_SetFSKSyncWord
        _RADIO_SetFrequencyHopPeriod
              _RADIO_SetLoRaSyncWord
                _RADIO_SetModulation
           _RADIO_SetSpreadingFactor
 ---------------------------------------------------------------------------------
 (5) _RADIO_SetSpreadingFactor                             1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (5) _RADIO_SetModulation                                  1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (5) _RADIO_SetFrequencyHopPeriod                          2     0      2     111
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (5) _RADIO_SetFSKSyncWord                                 3     1      2   12069
                                             11 BANK0      3     1      2
                             _memcpy
 ---------------------------------------------------------------------------------
 (5) _RADIO_SetChannelFrequency                            4     0      4     243
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (5) _RADIO_SetBandwidth                                   1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _RADIO_Transmit                                      17    14      3  108319
                                             81 BANK0     17    14      3
                     _HALSPICSAssert
                   _HALSPICSDeassert
                         _HALSPISend
                 _RADIO_RegisterRead
                _RADIO_RegisterWrite
           _RADIO_WriteConfiguration
                    _RADIO_WriteMode
                  _SwTimerSetTimeout
                       _SwTimerStart
                        _SwTimerStop
                            ___lldiv
 ---------------------------------------------------------------------------------
 (3) _RADIO_WriteConfiguration                            11     9      2   77416
                                             70 BANK0     11     9      2
                 _RADIO_RegisterRead
                _RADIO_RegisterWrite
              _RADIO_WriteFSKBitRate
   _RADIO_WriteFSKFrequencyDeviation
               _RADIO_WriteFrequency
                    _RADIO_WriteMode
                   _RADIO_WritePower
                             ___lmul
 ---------------------------------------------------------------------------------
 (4) _RADIO_WritePower                                     3     3      0    8759
                                              4 BANK0      3     3      0
                 _RADIO_RegisterRead
                _RADIO_RegisterWrite
 ---------------------------------------------------------------------------------
 (4) _RADIO_WriteFSKFrequencyDeviation                     8     4      4   13513
                                             13 BANK0      8     4      4
                _RADIO_RegisterWrite
                            ___lldiv
 ---------------------------------------------------------------------------------
 (4) _RADIO_WriteFSKBitRate                                8     4      4   13512
                                             13 BANK0      8     4      4
                _RADIO_RegisterWrite
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) _PrepareJoinRequestFrame                             11    11      0   90348
                                            112 BANK0     11    11      0
                         _ComputeMic
                             _Random
                             _memcpy
                             _memset
 ---------------------------------------------------------------------------------
 (4) _Random                                               2     0      2    5409
                                             77 BANK0      2     0      2
                            ___lwmod
                               _rand
 ---------------------------------------------------------------------------------
 (5) _rand                                                 2     0      2    4872
                                             70 BANK0      2     0      2
                             ___lmul
 ---------------------------------------------------------------------------------
 (5) ___lwmod                                              5     1      4     337
                                             72 BANK0      5     1      4
                               _rand (ARG)
 ---------------------------------------------------------------------------------
 (5) _ComputeMic                                           9     4      5   69538
                                            103 BANK0      9     4      5
                            _AESCmac
                             _memcpy
 ---------------------------------------------------------------------------------
 (3) _AESCmac                                            116   109      7   57000
                                             89 BANK0     14     7      7
                                              0 BANK1    102   102      0
                      _AESEncodeLoRa
                     _GenerateSubkey
                             _memcpy
                             _memset
 ---------------------------------------------------------------------------------
 (4) _GenerateSubkey                                      40    34      6   22093
                                             49 BANK0     40    34      6
                      _AESEncodeLoRa
                         _FillSubKey
                             _memset
 ---------------------------------------------------------------------------------
 (5) _FillSubKey                                           8     3      5    1270
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (4) _AESEncodeLoRa                                       20    16      4   16854
                                             29 BANK0     20    16      4
                          _AESEncode
                             _memcpy
 ---------------------------------------------------------------------------------
 (5) _AESEncode                                           24    20      4    3397
                                              6 BANK0     23    19      4
                     _EncKeySchedule
                     _EncodeShiftRow
 ---------------------------------------------------------------------------------
 (6) _EncodeShiftRow                                       3     1      2     709
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (6) _EncKeySchedule                                       6     4      2     839
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (1) _LORAWAN_Init                                         4     0      4  150532
                                             82 BANK0      4     0      4
            _CreateAllSoftwareTimers
                      _LORAWAN_Reset
                         _RADIO_Init
                   _RADIO_ReadRandom
          _SetCallbackSoftwareTimers
              _StopAllSoftwareTimers
                              _srand
 ---------------------------------------------------------------------------------
 (2) _srand                                                2     0      2     111
                                             18 BANK0      2     0      2
                   _RADIO_ReadRandom (ARG)
 ---------------------------------------------------------------------------------
 (2) _SetCallbackSoftwareTimers                            0     0      0    2224
                 _SwTimerSetCallback
 ---------------------------------------------------------------------------------
 (2) _RADIO_ReadRandom                                     6     4      2   22531
                                             12 BANK0      6     4      2
                 _RADIO_RegisterRead
                _RADIO_RegisterWrite
                    _RADIO_WriteMode
               _SystemBlockingWaitMs
 ---------------------------------------------------------------------------------
 (2) _LORAWAN_Reset                                        1     1      0   85775
                                             81 BANK0      1     1      0
             _InitDefault433Channels
             _InitDefault868Channels
         _LORAWAN_LinkCheckConfigure
                         _RADIO_Init
              _RADIO_SetLoRaSyncWord
              _StopAllSoftwareTimers
             _UpdateMinMaxChDataRate
                             _memset
 ---------------------------------------------------------------------------------
 (3) _UpdateMinMaxChDataRate                               2     2      0     156
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _StopAllSoftwareTimers                                0     0      0      22
                        _SwTimerStop
 ---------------------------------------------------------------------------------
 (5) _RADIO_SetLoRaSyncWord                                1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _RADIO_Init                                           7     1      6   39536
                                             25 BANK0      7     1      6
                 _RADIO_RegisterRead
                _RADIO_RegisterWrite
                        _RADIO_Reset
               _RADIO_WriteFrequency
                    _RADIO_WriteMode
                      _SwTimerCreate
                 _SwTimerSetCallback
                        _SwTimerStop
 ---------------------------------------------------------------------------------
 (3) _SwTimerSetCallback                                   4     1      3    2224
                                              0 BANK0      4     1      3
 ---------------------------------------------------------------------------------
 (3) _RADIO_WriteMode                                      7     5      2   13448
                                              5 BANK0      7     5      2
                    _HALDIO5PinValue
                 _RADIO_RegisterRead
                _RADIO_RegisterWrite
               _SystemBlockingWaitMs
 ---------------------------------------------------------------------------------
 (4) _RADIO_RegisterRead                                   2     2      0      90
                                              2 BANK0      2     2      0
                     _HALSPICSAssert
                   _HALSPICSDeassert
                         _HALSPISend
 ---------------------------------------------------------------------------------
 (4) _HALDIO5PinValue                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _RADIO_WriteFrequency                                12     8      4   14097
                                             13 BANK0     12     8      4
                _RADIO_RegisterWrite
                            ___lldiv
                            ___llmod
 ---------------------------------------------------------------------------------
 (5) ___llmod                                              9     1      8     337
                                              0 BANK0      9     1      8
 ---------------------------------------------------------------------------------
 (4) _RADIO_RegisterWrite                                  2     1      1    8365
                                              2 BANK0      2     1      1
                     _HALSPICSAssert
                   _HALSPICSDeassert
                         _HALSPISend
 ---------------------------------------------------------------------------------
 (5) _HALSPISend                                           1     1      0      44
                                              1 BANK0      1     1      0
                  _SPI2_Exchange8bit
 ---------------------------------------------------------------------------------
 (6) _SPI2_Exchange8bit                                    1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (5) _HALSPICSDeassert                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _HALSPICSAssert                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _RADIO_Reset                                          0     0      0     601
               _HALResetPinMakeInput
              _HALResetPinMakeOutput
             _HALResetPinOutputValue
               _SystemBlockingWaitMs
 ---------------------------------------------------------------------------------
 (4) _SystemBlockingWaitMs                                 5     1      4     557
                                              0 BANK0      5     1      4
 ---------------------------------------------------------------------------------
 (4) _HALResetPinOutputValue                               1     1      0      44
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _HALResetPinMakeOutput                                0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _HALResetPinMakeInput                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _LORAWAN_LinkCheckConfigure                          11     9      2   12934
                                             70 BANK0     11     9      2
                  _SwTimerSetTimeout
                       _SwTimerStart
                        _SwTimerStop
                            ___lldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (6) ___lmul                                              12     4      8    4872
                                             58 BANK0     12     4      8
                   _SwTimerReadValue (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8    4968
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (3) _SwTimerStop                                          1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _SwTimerStart                                         9     9      0    1201
                                             49 BANK0      9     9      0
                  _SwTimersInterrupt
              _TMR_OverrideRemaining
 ---------------------------------------------------------------------------------
 (4) _TMR_OverrideRemaining                               10     6      4     773
                                             10 BANK0     10     6      4
                      _TMR_SwapTimer
 ---------------------------------------------------------------------------------
 (5) _TMR_SwapTimer                                        2     0      2     572
                                              8 BANK0      2     0      2
                     _TMR1_ReadTimer
                    _TMR1_WriteTimer
 ---------------------------------------------------------------------------------
 (6) _TMR1_WriteTimer                                      2     0      2     329
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (4) _SwTimersInterrupt                                   17    13      4     316
                                             32 BANK0     17    13      4
                   _TMR_GetDeltaTime
 ---------------------------------------------------------------------------------
 (5) _TMR_GetDeltaTime                                    24    20      4      69
                                              8 BANK0     24    20      4
                     _TMR1_ReadTimer
 ---------------------------------------------------------------------------------
 (6) _TMR1_ReadTimer                                       8     6      2      69
                                              0 BANK0      8     6      2
 ---------------------------------------------------------------------------------
 (3) _SwTimerSetTimeout                                    9     5      4    1646
                                             13 BANK0      9     5      4
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (3) _InitDefault868Channels                               1     1      0   15014
                                             11 BANK0      1     1      0
                             _memcpy
                             _memset
 ---------------------------------------------------------------------------------
 (3) _InitDefault433Channels                               1     1      0   15014
                                             11 BANK0      1     1      0
                             _memcpy
                             _memset
 ---------------------------------------------------------------------------------
 (3) _memset                                               8     2      6    3033
                                              0 BANK0      8     2      6
 ---------------------------------------------------------------------------------
 (2) _memcpy                                              11     5      6   11891
                                              0 BANK0     11     5      6
 ---------------------------------------------------------------------------------
 (2) _CreateAllSoftwareTimers                              0     0      0     111
                      _SwTimerCreate
 ---------------------------------------------------------------------------------
 (3) _SwTimerCreate                                        1     1      0     111
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _EUSART1_Write                                        1     1      0      44
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (13) _INTERRUPT_InterruptManager                         10    10      0    1169
                                             51 COMRAM    10    10      0
                   Absolute function *
                _EUSART1_Receive_ISR *
               _EUSART1_Transmit_ISR *
                           _INT1_ISR
                           _INT2_ISR
                    _PIN_MANAGER_IOC
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (14) _TMR1_ISR                                            0     0      0     713
                      _TMR1_CallBack
                  i2_TMR1_WriteTimer
 ---------------------------------------------------------------------------------
 (15) _TMR1_CallBack                                       0     0      0     573
                   Absolute function *
       _TMR1_DefaultInterruptHandler *
                       _TMR_ISR_lora *
 ---------------------------------------------------------------------------------
 (16) _TMR_ISR_lora                                        2     2      0     573
                                             49 COMRAM     2     2      0
                i2_SwTimersInterrupt
                    i2_TMR_SwapTimer
 ---------------------------------------------------------------------------------
 (17) i2_TMR_SwapTimer                                     2     0      2     257
                                              8 COMRAM     2     0      2
                   i2_TMR1_ReadTimer
                  i2_TMR1_WriteTimer
 ---------------------------------------------------------------------------------
 (15) i2_TMR1_WriteTimer                                   2     0      2     140
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (17) i2_SwTimersInterrupt                                17    13      4     316
                                             32 COMRAM    17    13      4
                 i2_TMR_GetDeltaTime
 ---------------------------------------------------------------------------------
 (18) i2_TMR_GetDeltaTime                                 24    20      4      69
                                              8 COMRAM    24    20      4
                   i2_TMR1_ReadTimer
 ---------------------------------------------------------------------------------
 (18) i2_TMR1_ReadTimer                                    8     6      2      69
                                              0 COMRAM     8     6      2
 ---------------------------------------------------------------------------------
 (16) _TMR1_DefaultInterruptHandler                        0     0      0       0
 ---------------------------------------------------------------------------------
 (14) _PIN_MANAGER_IOC                                     0     0      0       0
                          _IOCB4_ISR
 ---------------------------------------------------------------------------------
 (15) _IOCB4_ISR                                           0     0      0       0
                   Absolute function *
                      _DIO2_ISR_Lora *
      _IOCB4_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (16) _IOCB4_DefaultInterruptHandler                       0     0      0       0
 ---------------------------------------------------------------------------------
 (16) _DIO2_ISR_Lora                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (14) _INT2_ISR                                            0     0      0       0
                      _INT2_CallBack
 ---------------------------------------------------------------------------------
 (15) _INT2_CallBack                                       0     0      0       0
                   Absolute function *
                      _DIO1_ISR_Lora *
       _INT2_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (16) _INT2_DefaultInterruptHandler                        0     0      0       0
 ---------------------------------------------------------------------------------
 (16) _DIO1_ISR_Lora                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (14) _INT1_ISR                                            0     0      0       0
                      _INT1_CallBack
 ---------------------------------------------------------------------------------
 (15) _INT1_CallBack                                       0     0      0       0
                   Absolute function *
                      _DIO0_ISR_Lora *
       _INT1_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (16) _INT1_DefaultInterruptHandler                        0     0      0       0
 ---------------------------------------------------------------------------------
 (16) _DIO0_ISR_Lora                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (14) _EUSART1_Transmit_ISR                                0     0      0       0
 ---------------------------------------------------------------------------------
 (14) _EUSART1_Receive_ISR                                 3     3      0     456
                                              8 COMRAM     3     3      0
                   Absolute function *
        _EUSART1_DefaultErrorHandler *
 _EUSART1_DefaultFramingErrorHandler *
 _EUSART1_DefaultOverrunErrorHandler *
                       _EUSART1_Read
              _EUSART1_RxDataHandler
                            _strncat
 ---------------------------------------------------------------------------------
 (15) _strncat                                             8     2      6     432
                                              0 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (15) _EUSART1_Read                                        1     1      0      24
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (15) _EUSART1_DefaultOverrunErrorHandler                  0     0      0       0
 ---------------------------------------------------------------------------------
 (15) _EUSART1_DefaultFramingErrorHandler                  0     0      0       0
 ---------------------------------------------------------------------------------
 (15) _EUSART1_DefaultErrorHandler                         0     0      0       0
              _EUSART1_RxDataHandler
 ---------------------------------------------------------------------------------
 (15) _EUSART1_RxDataHandler                               0     0      0       0
 ---------------------------------------------------------------------------------
 (16) Absolute function(Fake)                              4     0      4       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 18
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _EUSART1_Write
   _LORAWAN_Init
     _CreateAllSoftwareTimers
       _SwTimerCreate
     _LORAWAN_Reset
       _InitDefault433Channels
         _memcpy
         _memset
       _InitDefault868Channels
         _memcpy
         _memset
       _LORAWAN_LinkCheckConfigure
         _SwTimerSetTimeout
           ___lldiv (ARG)
         _SwTimerStart
           _SwTimersInterrupt
             _TMR_GetDeltaTime
               _TMR1_ReadTimer
           _TMR_OverrideRemaining
             _TMR_SwapTimer
               _TMR1_ReadTimer
               _TMR1_WriteTimer
         _SwTimerStop
         ___lldiv
         ___lmul
           _SwTimerReadValue (ARG)
             _SwTimersInterrupt
               _TMR_GetDeltaTime
                 _TMR1_ReadTimer
       _RADIO_Init
         _RADIO_RegisterRead
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         _RADIO_RegisterWrite
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         _RADIO_Reset
           _HALResetPinMakeInput
           _HALResetPinMakeOutput
           _HALResetPinOutputValue
           _SystemBlockingWaitMs
         _RADIO_WriteFrequency
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           ___lldiv
           ___llmod
         _RADIO_WriteMode
           _HALDIO5PinValue
           _RADIO_RegisterRead
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _SystemBlockingWaitMs
         _SwTimerCreate
         _SwTimerSetCallback
         _SwTimerStop
       _RADIO_SetLoRaSyncWord
       _StopAllSoftwareTimers
         _SwTimerStop
       _UpdateMinMaxChDataRate
       _memset
     _RADIO_Init
       _RADIO_RegisterRead
         _HALSPICSAssert
         _HALSPICSDeassert
         _HALSPISend
           _SPI2_Exchange8bit
       _RADIO_RegisterWrite
         _HALSPICSAssert
         _HALSPICSDeassert
         _HALSPISend
           _SPI2_Exchange8bit
       _RADIO_Reset
         _HALResetPinMakeInput
         _HALResetPinMakeOutput
         _HALResetPinOutputValue
         _SystemBlockingWaitMs
       _RADIO_WriteFrequency
         _RADIO_RegisterWrite
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         ___lldiv
         ___llmod
       _RADIO_WriteMode
         _HALDIO5PinValue
         _RADIO_RegisterRead
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         _RADIO_RegisterWrite
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         _SystemBlockingWaitMs
       _SwTimerCreate
       _SwTimerSetCallback
       _SwTimerStop
     _RADIO_ReadRandom
       _RADIO_RegisterRead
         _HALSPICSAssert
         _HALSPICSDeassert
         _HALSPISend
           _SPI2_Exchange8bit
       _RADIO_RegisterWrite
         _HALSPICSAssert
         _HALSPICSDeassert
         _HALSPISend
           _SPI2_Exchange8bit
       _RADIO_WriteMode
         _HALDIO5PinValue
         _RADIO_RegisterRead
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         _RADIO_RegisterWrite
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         _SystemBlockingWaitMs
       _SystemBlockingWaitMs
     _SetCallbackSoftwareTimers
       _SwTimerSetCallback
     _StopAllSoftwareTimers
       _SwTimerStop
     _srand
       _RADIO_ReadRandom (ARG)
         _RADIO_RegisterRead
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         _RADIO_RegisterWrite
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         _RADIO_WriteMode
           _HALDIO5PinValue
           _RADIO_RegisterRead
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _SystemBlockingWaitMs
         _SystemBlockingWaitMs
   _LORAWAN_Join
     _PrepareJoinRequestFrame
       _ComputeMic
         _AESCmac
           _AESEncodeLoRa
             _AESEncode
               _EncKeySchedule
               _EncodeShiftRow
             _memcpy
           _GenerateSubkey
             _AESEncodeLoRa
               _AESEncode
                 _EncKeySchedule
                 _EncodeShiftRow
               _memcpy
             _FillSubKey
             _memset
           _memcpy
           _memset
         _memcpy
       _Random
         ___lwmod
           _rand (ARG)
             ___lmul
               _SwTimerReadValue (ARG)
                 _SwTimersInterrupt
                   _TMR_GetDeltaTime
                     _TMR1_ReadTimer
         _rand
           ___lmul
             _SwTimerReadValue (ARG)
               _SwTimersInterrupt
                 _TMR_GetDeltaTime
                   _TMR1_ReadTimer
       _memcpy
       _memset
     _RADIO_Transmit
       _HALSPICSAssert
       _HALSPICSDeassert
       _HALSPISend
         _SPI2_Exchange8bit
       _RADIO_RegisterRead
         _HALSPICSAssert
         _HALSPICSDeassert
         _HALSPISend
           _SPI2_Exchange8bit
       _RADIO_RegisterWrite
         _HALSPICSAssert
         _HALSPICSDeassert
         _HALSPISend
           _SPI2_Exchange8bit
       _RADIO_WriteConfiguration
         _RADIO_RegisterRead
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         _RADIO_RegisterWrite
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         _RADIO_WriteFSKBitRate
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           ___lldiv
         _RADIO_WriteFSKFrequencyDeviation
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           ___lldiv
         _RADIO_WriteFrequency
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           ___lldiv
           ___llmod
         _RADIO_WriteMode
           _HALDIO5PinValue
           _RADIO_RegisterRead
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _SystemBlockingWaitMs
         _RADIO_WritePower
           _RADIO_RegisterRead
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
         ___lmul
           _SwTimerReadValue (ARG)
             _SwTimersInterrupt
               _TMR_GetDeltaTime
                 _TMR1_ReadTimer
       _RADIO_WriteMode
         _HALDIO5PinValue
         _RADIO_RegisterRead
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         _RADIO_RegisterWrite
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         _SystemBlockingWaitMs
       _SwTimerSetTimeout
         ___lldiv (ARG)
       _SwTimerStart
         _SwTimersInterrupt
           _TMR_GetDeltaTime
             _TMR1_ReadTimer
         _TMR_OverrideRemaining
           _TMR_SwapTimer
             _TMR1_ReadTimer
             _TMR1_WriteTimer
       _SwTimerStop
       ___lldiv
     _SelectChannelForTransmission
       _ConfigureRadioTx
         _ConfigureRadio
           _RADIO_SetBandwidth
           _RADIO_SetChannelFrequency
           _RADIO_SetFSKSyncWord
             _memcpy
           _RADIO_SetFrequencyHopPeriod
           _RADIO_SetLoRaSyncWord
           _RADIO_SetModulation
           _RADIO_SetSpreadingFactor
         _RADIO_SetCRC
         _RADIO_SetIQInverted
         _RADIO_SetOutputPower
       _SearchAvailableChannel
         _Random
           ___lwmod
             _rand (ARG)
               ___lmul
                 _SwTimerReadValue (ARG)
                   _SwTimersInterrupt
                     _TMR_GetDeltaTime
                       _TMR1_ReadTimer
           _rand
             ___lmul
               _SwTimerReadValue (ARG)
                 _SwTimersInterrupt
                   _TMR_GetDeltaTime
                     _TMR1_ReadTimer
     _SwTimerSetTimeout
       ___lldiv (ARG)
     _SwTimerStart
       _SwTimersInterrupt
         _TMR_GetDeltaTime
           _TMR1_ReadTimer
       _TMR_OverrideRemaining
         _TMR_SwapTimer
           _TMR1_ReadTimer
           _TMR1_WriteTimer
     _UpdateJoinInProgress
   _LORAWAN_Mainloop
     _INTERRUPT_GetDioStatus
     _RADIO_DIO0
       _RADIO_FSKPacketSent
         _LORAWAN_TxDone
           _LORAWAN_EnterContinuousReceive
             _ConfigureRadioRx
               _ConfigureRadio
                 _RADIO_SetBandwidth
                 _RADIO_SetChannelFrequency
                 _RADIO_SetFSKSyncWord
                   _memcpy
                 _RADIO_SetFrequencyHopPeriod
                 _RADIO_SetLoRaSyncWord
                 _RADIO_SetModulation
                 _RADIO_SetSpreadingFactor
               _RADIO_SetCRC
               _RADIO_SetIQInverted
             _RADIO_ReceiveStart
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_WriteConfiguration
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_WriteFSKBitRate
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                 _RADIO_WriteFSKFrequencyDeviation
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                 _RADIO_WriteFrequency
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                   ___llmod
                 _RADIO_WriteMode
                   _HALDIO5PinValue
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _SystemBlockingWaitMs
                 _RADIO_WritePower
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                 ___lmul
                   _SwTimerReadValue (ARG)
                     _SwTimersInterrupt
                       _TMR_GetDeltaTime
                         _TMR1_ReadTimer
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _SystemBlockingWaitMs
               _SwTimerSetTimeout
                 ___lldiv (ARG)
               _SwTimerStart
                 _SwTimersInterrupt
                   _TMR_GetDeltaTime
                     _TMR1_ReadTimer
                 _TMR_OverrideRemaining
                   _TMR_SwapTimer
                     _TMR1_ReadTimer
                     _TMR1_WriteTimer
               ___lldiv
             _RADIO_ReceiveStop
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _SystemBlockingWaitMs
             _RADIO_ReleaseData
             _ResetParametersForConfirmedTransmission
             _ResetParametersForUnconfirmedTransmission
             _RxData *
           _RADIO_GetStatus
           _RxData *
           _SwTimerIsRunning *
           _SwTimerReadValue *
             _SwTimersInterrupt
               _TMR_GetDeltaTime
                 _TMR1_ReadTimer
           _SwTimerSetTimeout *
             ___lldiv (ARG)
           _SwTimerStart *
             _SwTimersInterrupt
               _TMR_GetDeltaTime
                 _TMR1_ReadTimer
             _TMR_OverrideRemaining
               _TMR_SwapTimer
                 _TMR1_ReadTimer
                 _TMR1_WriteTimer
           _SwTimerStop *
           ___lldiv *
           ___lmul *
             _SwTimerReadValue (ARG)
               _SwTimersInterrupt
                 _TMR_GetDeltaTime
                   _TMR1_ReadTimer
         _RADIO_RegisterRead
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         _RADIO_WriteMode
           _HALDIO5PinValue
           _RADIO_RegisterRead
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _SystemBlockingWaitMs
         _SwTimerReadValue
           _SwTimersInterrupt
             _TMR_GetDeltaTime
               _TMR1_ReadTimer
         _SwTimerStop
         ___lmul
           _SwTimerReadValue (ARG)
             _SwTimersInterrupt
               _TMR_GetDeltaTime
                 _TMR1_ReadTimer
       _RADIO_FSKPayloadReady
         _HALSPICSAssert
         _HALSPICSDeassert
         _HALSPISend
           _SPI2_Exchange8bit
         _LORAWAN_RxDone
           _AESCmac
             _AESEncodeLoRa
               _AESEncode
                 _EncKeySchedule
                 _EncodeShiftRow
               _memcpy
             _GenerateSubkey
               _AESEncodeLoRa
                 _AESEncode
                   _EncKeySchedule
                   _EncodeShiftRow
                 _memcpy
               _FillSubKey
               _memset
             _memcpy
             _memset
           _AESEncodeLoRa
             _AESEncode
               _EncKeySchedule
               _EncodeShiftRow
             _memcpy
           _AssembleEncryptionBlock
             _memcpy
             _memset
           _CheckFlags
           _CheckMcastFlags
           _ComputeMic
             _AESCmac
               _AESEncodeLoRa
                 _AESEncode
                   _EncKeySchedule
                   _EncodeShiftRow
                 _memcpy
               _GenerateSubkey
                 _AESEncodeLoRa
                   _AESEncode
                     _EncKeySchedule
                     _EncodeShiftRow
                   _memcpy
                 _FillSubKey
                 _memset
               _memcpy
               _memset
             _memcpy
           _ComputeSessionKeys
             _AESEncodeLoRa
               _AESEncode
                 _EncKeySchedule
                 _EncodeShiftRow
               _memcpy
             _PrepareSessionKeys
               _memcpy
               _memset
           _EncryptFRMPayload
             _AESEncodeLoRa
               _AESEncode
                 _EncKeySchedule
                 _EncodeShiftRow
               _memcpy
             _AssembleEncryptionBlock
               _memcpy
               _memset
             ___awdiv
               ___awmod (ARG)
           _ExtractMic
             _memcpy
           _LORAWAN_EnterContinuousReceive
             _ConfigureRadioRx
               _ConfigureRadio
                 _RADIO_SetBandwidth
                 _RADIO_SetChannelFrequency
                 _RADIO_SetFSKSyncWord
                   _memcpy
                 _RADIO_SetFrequencyHopPeriod
                 _RADIO_SetLoRaSyncWord
                 _RADIO_SetModulation
                 _RADIO_SetSpreadingFactor
               _RADIO_SetCRC
               _RADIO_SetIQInverted
             _RADIO_ReceiveStart
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_WriteConfiguration
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_WriteFSKBitRate
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                 _RADIO_WriteFSKFrequencyDeviation
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                 _RADIO_WriteFrequency
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                   ___llmod
                 _RADIO_WriteMode
                   _HALDIO5PinValue
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _SystemBlockingWaitMs
                 _RADIO_WritePower
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                 ___lmul
                   _SwTimerReadValue (ARG)
                     _SwTimersInterrupt
                       _TMR_GetDeltaTime
                         _TMR1_ReadTimer
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _SystemBlockingWaitMs
               _SwTimerSetTimeout
                 ___lldiv (ARG)
               _SwTimerStart
                 _SwTimersInterrupt
                   _TMR_GetDeltaTime
                     _TMR1_ReadTimer
                 _TMR_OverrideRemaining
                   _TMR_SwapTimer
                     _TMR1_ReadTimer
                     _TMR1_WriteTimer
               ___lldiv
             _RADIO_ReceiveStop
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _SystemBlockingWaitMs
             _RADIO_ReleaseData
             _ResetParametersForConfirmedTransmission
             _ResetParametersForUnconfirmedTransmission
             _RxData *
           _LORAWAN_Send
             _AssemblePacket
               _AESCmac
                 _AESEncodeLoRa
                   _AESEncode
                     _EncKeySchedule
                     _EncodeShiftRow
                   _memcpy
                 _GenerateSubkey
                   _AESEncodeLoRa
                     _AESEncode
                       _EncKeySchedule
                       _EncodeShiftRow
                     _memcpy
                   _FillSubKey
                   _memset
                 _memcpy
                 _memset
               _AssembleEncryptionBlock
                 _memcpy
                 _memset
               _CountfOptsLength
               _EncryptFRMPayload
                 _AESEncodeLoRa
                   _AESEncode
                     _EncKeySchedule
                     _EncodeShiftRow
                   _memcpy
                 _AssembleEncryptionBlock
                   _memcpy
                   _memset
                 ___awdiv
                   ___awmod (ARG)
               _FindSmallestDataRate
               _IncludeMacCommandsResponse
                 _RADIO_GetPacketSnr
               _memcpy
               _memset
             _LORAWAN_GetMaxPayloadSize
               _CountfOptsLength
             _RADIO_ReceiveStop
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _SystemBlockingWaitMs
             _RADIO_Transmit
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
               _RADIO_RegisterRead
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_WriteConfiguration
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_WriteFSKBitRate
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                 _RADIO_WriteFSKFrequencyDeviation
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                 _RADIO_WriteFrequency
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                   ___llmod
                 _RADIO_WriteMode
                   _HALDIO5PinValue
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _SystemBlockingWaitMs
                 _RADIO_WritePower
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                 ___lmul
                   _SwTimerReadValue (ARG)
                     _SwTimersInterrupt
                       _TMR_GetDeltaTime
                         _TMR1_ReadTimer
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _SystemBlockingWaitMs
               _SwTimerSetTimeout
                 ___lldiv (ARG)
               _SwTimerStart
                 _SwTimersInterrupt
                   _TMR_GetDeltaTime
                     _TMR1_ReadTimer
                 _TMR_OverrideRemaining
                   _TMR_SwapTimer
                     _TMR1_ReadTimer
                     _TMR1_WriteTimer
               _SwTimerStop
               ___lldiv
             _SelectChannelForTransmission
               _ConfigureRadioTx
                 _ConfigureRadio
                   _RADIO_SetBandwidth
                   _RADIO_SetChannelFrequency
                   _RADIO_SetFSKSyncWord
                     _memcpy
                   _RADIO_SetFrequencyHopPeriod
                   _RADIO_SetLoRaSyncWord
                   _RADIO_SetModulation
                   _RADIO_SetSpreadingFactor
                 _RADIO_SetCRC
                 _RADIO_SetIQInverted
                 _RADIO_SetOutputPower
               _SearchAvailableChannel
                 _Random
                   ___lwmod
                     _rand (ARG)
                       ___lmul
                         _SwTimerReadValue (ARG)
                           _SwTimersInterrupt
                             _TMR_GetDeltaTime
                               _TMR1_ReadTimer
                   _rand
                     ___lmul
                       _SwTimerReadValue (ARG)
                         _SwTimersInterrupt
                           _TMR_GetDeltaTime
                             _TMR1_ReadTimer
           _MacExecuteCommands
             _ExecuteDevStatus
             _ExecuteDutyCycle
             _ExecuteLinkAdr
               _EnableChannels
                 _EnableChannels1
                   _UpdateChannelIdStatus
               _UpdateCurrentDataRate
               _UpdateTxPower
               _ValidateChannelMask
               _ValidateChannelMaskCntl
               _ValidateDataRate
               _ValidateTxPower
             _ExecuteLinkCheck
             _ExecuteNewChannel
               _LORAWAN_SetChannelIdStatus
                 _UpdateChannelIdStatus
                 _ValidateChannelId
               _UpdateChannelIdStatus
               _UpdateDataRange
               _UpdateDutyCycle
               _UpdateFrequency
               _ValidateChannelId
               _ValidateDataRange
                 _ValidateDataRate
               _ValidateFrequency
               ___lmul
                 _SwTimerReadValue (ARG)
                   _SwTimersInterrupt
                     _TMR_GetDeltaTime
                       _TMR1_ReadTimer
             _ExecuteRxParamSetupReq
               _UpdateReceiveWindow2Parameters
               _ValidateDataRate
               _ValidateFrequency
               _ValidateRxOffset
               ___lmul
                 _SwTimerReadValue (ARG)
                   _SwTimersInterrupt
                     _TMR_GetDeltaTime
                       _TMR1_ReadTimer
             _ExecuteRxTimingSetup
               _UpdateReceiveDelays
                 ___wmul
           _RADIO_GetStatus
           _RADIO_ReleaseData
           _RxData *
           _SearchAvailableChannel *
             _Random
               ___lwmod
                 _rand (ARG)
                   ___lmul
                     _SwTimerReadValue (ARG)
                       _SwTimersInterrupt
                         _TMR_GetDeltaTime
                           _TMR1_ReadTimer
               _rand
                 ___lmul
                   _SwTimerReadValue (ARG)
                     _SwTimersInterrupt
                       _TMR_GetDeltaTime
                         _TMR1_ReadTimer
           _SetJoinFailState *
             _RxJoinResponse *
           _SetReceptionNotOkState *
             _LORAWAN_EnterContinuousReceive
               _ConfigureRadioRx
                 _ConfigureRadio
                   _RADIO_SetBandwidth
                   _RADIO_SetChannelFrequency
                   _RADIO_SetFSKSyncWord
                     _memcpy
                   _RADIO_SetFrequencyHopPeriod
                   _RADIO_SetLoRaSyncWord
                   _RADIO_SetModulation
                   _RADIO_SetSpreadingFactor
                 _RADIO_SetCRC
                 _RADIO_SetIQInverted
               _RADIO_ReceiveStart
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_WriteConfiguration
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_WriteFSKBitRate
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     ___lldiv
                   _RADIO_WriteFSKFrequencyDeviation
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     ___lldiv
                   _RADIO_WriteFrequency
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     ___lldiv
                     ___llmod
                   _RADIO_WriteMode
                     _HALDIO5PinValue
                     _RADIO_RegisterRead
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     _SystemBlockingWaitMs
                   _RADIO_WritePower
                     _RADIO_RegisterRead
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                   ___lmul
                     _SwTimerReadValue (ARG)
                       _SwTimersInterrupt
                         _TMR_GetDeltaTime
                           _TMR1_ReadTimer
                 _RADIO_WriteMode
                   _HALDIO5PinValue
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _SystemBlockingWaitMs
                 _SwTimerSetTimeout
                   ___lldiv (ARG)
                 _SwTimerStart
                   _SwTimersInterrupt
                     _TMR_GetDeltaTime
                       _TMR1_ReadTimer
                   _TMR_OverrideRemaining
                     _TMR_SwapTimer
                       _TMR1_ReadTimer
                       _TMR1_WriteTimer
                 ___lldiv
               _RADIO_ReceiveStop
                 _RADIO_WriteMode
                   _HALDIO5PinValue
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _SystemBlockingWaitMs
               _RADIO_ReleaseData
               _ResetParametersForConfirmedTransmission
               _ResetParametersForUnconfirmedTransmission
               _RxData *
             _RxData *
           _StartReTxTimer *
             _SwTimerSetTimeout
               ___lldiv (ARG)
             _SwTimerStart
               _SwTimersInterrupt
                 _TMR_GetDeltaTime
                   _TMR1_ReadTimer
               _TMR_OverrideRemaining
                 _TMR_SwapTimer
                   _TMR1_ReadTimer
                   _TMR1_WriteTimer
             ___lldiv
           _SwTimerStop *
           _UpdateCfList *
             _LORAWAN_SetChannelIdStatus
               _UpdateChannelIdStatus
               _ValidateChannelId
             _ValidateFrequency
             ___lmul
               _SwTimerReadValue (ARG)
                 _SwTimersInterrupt
                   _TMR_GetDeltaTime
                     _TMR1_ReadTimer
             ___wmul
             _memcpy
           _UpdateDLSettings *
           _UpdateJoinSuccessState *
             _RxJoinResponse *
             _SwTimerSetTimeout *
               ___lldiv (ARG)
             _SwTimerStart *
               _SwTimersInterrupt
                 _TMR_GetDeltaTime
                   _TMR1_ReadTimer
               _TMR_OverrideRemaining
                 _TMR_SwapTimer
                   _TMR1_ReadTimer
                   _TMR1_WriteTimer
             ___lldiv *
           _UpdateReceiveDelays *
             ___wmul
           _UpdateRetransmissionAckTimeoutState *
             _SwTimerSetTimeout
               ___lldiv (ARG)
             _SwTimerStart
               _SwTimersInterrupt
                 _TMR_GetDeltaTime
                   _TMR1_ReadTimer
               _TMR_OverrideRemaining
                 _TMR_SwapTimer
                   _TMR1_ReadTimer
                   _TMR1_WriteTimer
             ___lldiv
           _memcpy *
         _LORAWAN_RxTimeout
           _LORAWAN_ReceiveWindow2Callback
             _ConfigureRadioRx
               _ConfigureRadio
                 _RADIO_SetBandwidth
                 _RADIO_SetChannelFrequency
                 _RADIO_SetFSKSyncWord
                   _memcpy
                 _RADIO_SetFrequencyHopPeriod
                 _RADIO_SetLoRaSyncWord
                 _RADIO_SetModulation
                 _RADIO_SetSpreadingFactor
               _RADIO_SetCRC
               _RADIO_SetIQInverted
             _LORAWAN_EnterContinuousReceive
               _ConfigureRadioRx
                 _ConfigureRadio
                   _RADIO_SetBandwidth
                   _RADIO_SetChannelFrequency
                   _RADIO_SetFSKSyncWord
                     _memcpy
                   _RADIO_SetFrequencyHopPeriod
                   _RADIO_SetLoRaSyncWord
                   _RADIO_SetModulation
                   _RADIO_SetSpreadingFactor
                 _RADIO_SetCRC
                 _RADIO_SetIQInverted
               _RADIO_ReceiveStart
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_WriteConfiguration
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_WriteFSKBitRate
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     ___lldiv
                   _RADIO_WriteFSKFrequencyDeviation
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     ___lldiv
                   _RADIO_WriteFrequency
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     ___lldiv
                     ___llmod
                   _RADIO_WriteMode
                     _HALDIO5PinValue
                     _RADIO_RegisterRead
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     _SystemBlockingWaitMs
                   _RADIO_WritePower
                     _RADIO_RegisterRead
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                   ___lmul
                     _SwTimerReadValue (ARG)
                       _SwTimersInterrupt
                         _TMR_GetDeltaTime
                           _TMR1_ReadTimer
                 _RADIO_WriteMode
                   _HALDIO5PinValue
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _SystemBlockingWaitMs
                 _SwTimerSetTimeout
                   ___lldiv (ARG)
                 _SwTimerStart
                   _SwTimersInterrupt
                     _TMR_GetDeltaTime
                       _TMR1_ReadTimer
                   _TMR_OverrideRemaining
                     _TMR_SwapTimer
                       _TMR1_ReadTimer
                       _TMR1_WriteTimer
                 ___lldiv
               _RADIO_ReceiveStop
                 _RADIO_WriteMode
                   _HALDIO5PinValue
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _SystemBlockingWaitMs
               _RADIO_ReleaseData
               _ResetParametersForConfirmedTransmission
               _ResetParametersForUnconfirmedTransmission
               _RxData *
             _RADIO_GetStatus
             _RADIO_ReceiveStart
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_WriteConfiguration
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_WriteFSKBitRate
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                 _RADIO_WriteFSKFrequencyDeviation
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                 _RADIO_WriteFrequency
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                   ___llmod
                 _RADIO_WriteMode
                   _HALDIO5PinValue
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _SystemBlockingWaitMs
                 _RADIO_WritePower
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                 ___lmul
                   _SwTimerReadValue (ARG)
                     _SwTimersInterrupt
                       _TMR_GetDeltaTime
                         _TMR1_ReadTimer
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _SystemBlockingWaitMs
               _SwTimerSetTimeout
                 ___lldiv (ARG)
               _SwTimerStart
                 _SwTimersInterrupt
                   _TMR_GetDeltaTime
                     _TMR1_ReadTimer
                 _TMR_OverrideRemaining
                   _TMR_SwapTimer
                     _TMR1_ReadTimer
                     _TMR1_WriteTimer
               ___lldiv
             _RADIO_ReceiveStop
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _SystemBlockingWaitMs
             _RADIO_ReleaseData
             _ResetParametersForConfirmedTransmission
             _ResetParametersForUnconfirmedTransmission
             _RxData *
           _RADIO_Transmit
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
             _RADIO_RegisterRead
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _RADIO_RegisterWrite
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _RADIO_WriteConfiguration
               _RADIO_RegisterRead
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_WriteFSKBitRate
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 ___lldiv
               _RADIO_WriteFSKFrequencyDeviation
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 ___lldiv
               _RADIO_WriteFrequency
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 ___lldiv
                 ___llmod
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _SystemBlockingWaitMs
               _RADIO_WritePower
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
               ___lmul
                 _SwTimerReadValue (ARG)
                   _SwTimersInterrupt
                     _TMR_GetDeltaTime
                       _TMR1_ReadTimer
             _RADIO_WriteMode
               _HALDIO5PinValue
               _RADIO_RegisterRead
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _SystemBlockingWaitMs
             _SwTimerSetTimeout
               ___lldiv (ARG)
             _SwTimerStart
               _SwTimersInterrupt
                 _TMR_GetDeltaTime
                   _TMR1_ReadTimer
               _TMR_OverrideRemaining
                 _TMR_SwapTimer
                   _TMR1_ReadTimer
                   _TMR1_WriteTimer
             _SwTimerStop
             ___lldiv
           _ResetParametersForConfirmedTransmission
           _ResetParametersForUnconfirmedTransmission
           _RxData *
           _SelectChannelForTransmission *
             _ConfigureRadioTx
               _ConfigureRadio
                 _RADIO_SetBandwidth
                 _RADIO_SetChannelFrequency
                 _RADIO_SetFSKSyncWord
                   _memcpy
                 _RADIO_SetFrequencyHopPeriod
                 _RADIO_SetLoRaSyncWord
                 _RADIO_SetModulation
                 _RADIO_SetSpreadingFactor
               _RADIO_SetCRC
               _RADIO_SetIQInverted
               _RADIO_SetOutputPower
             _SearchAvailableChannel
               _Random
                 ___lwmod
                   _rand (ARG)
                     ___lmul
                       _SwTimerReadValue (ARG)
                         _SwTimersInterrupt
                           _TMR_GetDeltaTime
                             _TMR1_ReadTimer
                 _rand
                   ___lmul
                     _SwTimerReadValue (ARG)
                       _SwTimersInterrupt
                         _TMR_GetDeltaTime
                           _TMR1_ReadTimer
           _SetJoinFailState *
             _RxJoinResponse *
           _SwTimerSetTimeout *
             ___lldiv (ARG)
           _SwTimerStart *
             _SwTimersInterrupt
               _TMR_GetDeltaTime
                 _TMR1_ReadTimer
             _TMR_OverrideRemaining
               _TMR_SwapTimer
                 _TMR1_ReadTimer
                 _TMR1_WriteTimer
           ___lldiv *
         _RADIO_RegisterRead
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         _RADIO_WriteMode
           _HALDIO5PinValue
           _RADIO_RegisterRead
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _SystemBlockingWaitMs
         _SwTimerStop
       _RADIO_RegisterRead
         _HALSPICSAssert
         _HALSPICSDeassert
         _HALSPISend
           _SPI2_Exchange8bit
       _RADIO_RxDone
         _HALSPICSAssert
         _HALSPICSDeassert
         _HALSPISend
           _SPI2_Exchange8bit
         _LORAWAN_RxDone
           _AESCmac
             _AESEncodeLoRa
               _AESEncode
                 _EncKeySchedule
                 _EncodeShiftRow
               _memcpy
             _GenerateSubkey
               _AESEncodeLoRa
                 _AESEncode
                   _EncKeySchedule
                   _EncodeShiftRow
                 _memcpy
               _FillSubKey
               _memset
             _memcpy
             _memset
           _AESEncodeLoRa
             _AESEncode
               _EncKeySchedule
               _EncodeShiftRow
             _memcpy
           _AssembleEncryptionBlock
             _memcpy
             _memset
           _CheckFlags
           _CheckMcastFlags
           _ComputeMic
             _AESCmac
               _AESEncodeLoRa
                 _AESEncode
                   _EncKeySchedule
                   _EncodeShiftRow
                 _memcpy
               _GenerateSubkey
                 _AESEncodeLoRa
                   _AESEncode
                     _EncKeySchedule
                     _EncodeShiftRow
                   _memcpy
                 _FillSubKey
                 _memset
               _memcpy
               _memset
             _memcpy
           _ComputeSessionKeys
             _AESEncodeLoRa
               _AESEncode
                 _EncKeySchedule
                 _EncodeShiftRow
               _memcpy
             _PrepareSessionKeys
               _memcpy
               _memset
           _EncryptFRMPayload
             _AESEncodeLoRa
               _AESEncode
                 _EncKeySchedule
                 _EncodeShiftRow
               _memcpy
             _AssembleEncryptionBlock
               _memcpy
               _memset
             ___awdiv
               ___awmod (ARG)
           _ExtractMic
             _memcpy
           _LORAWAN_EnterContinuousReceive
             _ConfigureRadioRx
               _ConfigureRadio
                 _RADIO_SetBandwidth
                 _RADIO_SetChannelFrequency
                 _RADIO_SetFSKSyncWord
                   _memcpy
                 _RADIO_SetFrequencyHopPeriod
                 _RADIO_SetLoRaSyncWord
                 _RADIO_SetModulation
                 _RADIO_SetSpreadingFactor
               _RADIO_SetCRC
               _RADIO_SetIQInverted
             _RADIO_ReceiveStart
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_WriteConfiguration
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_WriteFSKBitRate
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                 _RADIO_WriteFSKFrequencyDeviation
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                 _RADIO_WriteFrequency
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                   ___llmod
                 _RADIO_WriteMode
                   _HALDIO5PinValue
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _SystemBlockingWaitMs
                 _RADIO_WritePower
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                 ___lmul
                   _SwTimerReadValue (ARG)
                     _SwTimersInterrupt
                       _TMR_GetDeltaTime
                         _TMR1_ReadTimer
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _SystemBlockingWaitMs
               _SwTimerSetTimeout
                 ___lldiv (ARG)
               _SwTimerStart
                 _SwTimersInterrupt
                   _TMR_GetDeltaTime
                     _TMR1_ReadTimer
                 _TMR_OverrideRemaining
                   _TMR_SwapTimer
                     _TMR1_ReadTimer
                     _TMR1_WriteTimer
               ___lldiv
             _RADIO_ReceiveStop
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _SystemBlockingWaitMs
             _RADIO_ReleaseData
             _ResetParametersForConfirmedTransmission
             _ResetParametersForUnconfirmedTransmission
             _RxData *
           _LORAWAN_Send
             _AssemblePacket
               _AESCmac
                 _AESEncodeLoRa
                   _AESEncode
                     _EncKeySchedule
                     _EncodeShiftRow
                   _memcpy
                 _GenerateSubkey
                   _AESEncodeLoRa
                     _AESEncode
                       _EncKeySchedule
                       _EncodeShiftRow
                     _memcpy
                   _FillSubKey
                   _memset
                 _memcpy
                 _memset
               _AssembleEncryptionBlock
                 _memcpy
                 _memset
               _CountfOptsLength
               _EncryptFRMPayload
                 _AESEncodeLoRa
                   _AESEncode
                     _EncKeySchedule
                     _EncodeShiftRow
                   _memcpy
                 _AssembleEncryptionBlock
                   _memcpy
                   _memset
                 ___awdiv
                   ___awmod (ARG)
               _FindSmallestDataRate
               _IncludeMacCommandsResponse
                 _RADIO_GetPacketSnr
               _memcpy
               _memset
             _LORAWAN_GetMaxPayloadSize
               _CountfOptsLength
             _RADIO_ReceiveStop
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _SystemBlockingWaitMs
             _RADIO_Transmit
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
               _RADIO_RegisterRead
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_WriteConfiguration
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_WriteFSKBitRate
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                 _RADIO_WriteFSKFrequencyDeviation
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                 _RADIO_WriteFrequency
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                   ___llmod
                 _RADIO_WriteMode
                   _HALDIO5PinValue
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _SystemBlockingWaitMs
                 _RADIO_WritePower
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                 ___lmul
                   _SwTimerReadValue (ARG)
                     _SwTimersInterrupt
                       _TMR_GetDeltaTime
                         _TMR1_ReadTimer
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _SystemBlockingWaitMs
               _SwTimerSetTimeout
                 ___lldiv (ARG)
               _SwTimerStart
                 _SwTimersInterrupt
                   _TMR_GetDeltaTime
                     _TMR1_ReadTimer
                 _TMR_OverrideRemaining
                   _TMR_SwapTimer
                     _TMR1_ReadTimer
                     _TMR1_WriteTimer
               _SwTimerStop
               ___lldiv
             _SelectChannelForTransmission
               _ConfigureRadioTx
                 _ConfigureRadio
                   _RADIO_SetBandwidth
                   _RADIO_SetChannelFrequency
                   _RADIO_SetFSKSyncWord
                     _memcpy
                   _RADIO_SetFrequencyHopPeriod
                   _RADIO_SetLoRaSyncWord
                   _RADIO_SetModulation
                   _RADIO_SetSpreadingFactor
                 _RADIO_SetCRC
                 _RADIO_SetIQInverted
                 _RADIO_SetOutputPower
               _SearchAvailableChannel
                 _Random
                   ___lwmod
                     _rand (ARG)
                       ___lmul
                         _SwTimerReadValue (ARG)
                           _SwTimersInterrupt
                             _TMR_GetDeltaTime
                               _TMR1_ReadTimer
                   _rand
                     ___lmul
                       _SwTimerReadValue (ARG)
                         _SwTimersInterrupt
                           _TMR_GetDeltaTime
                             _TMR1_ReadTimer
           _MacExecuteCommands
             _ExecuteDevStatus
             _ExecuteDutyCycle
             _ExecuteLinkAdr
               _EnableChannels
                 _EnableChannels1
                   _UpdateChannelIdStatus
               _UpdateCurrentDataRate
               _UpdateTxPower
               _ValidateChannelMask
               _ValidateChannelMaskCntl
               _ValidateDataRate
               _ValidateTxPower
             _ExecuteLinkCheck
             _ExecuteNewChannel
               _LORAWAN_SetChannelIdStatus
                 _UpdateChannelIdStatus
                 _ValidateChannelId
               _UpdateChannelIdStatus
               _UpdateDataRange
               _UpdateDutyCycle
               _UpdateFrequency
               _ValidateChannelId
               _ValidateDataRange
                 _ValidateDataRate
               _ValidateFrequency
               ___lmul
                 _SwTimerReadValue (ARG)
                   _SwTimersInterrupt
                     _TMR_GetDeltaTime
                       _TMR1_ReadTimer
             _ExecuteRxParamSetupReq
               _UpdateReceiveWindow2Parameters
               _ValidateDataRate
               _ValidateFrequency
               _ValidateRxOffset
               ___lmul
                 _SwTimerReadValue (ARG)
                   _SwTimersInterrupt
                     _TMR_GetDeltaTime
                       _TMR1_ReadTimer
             _ExecuteRxTimingSetup
               _UpdateReceiveDelays
                 ___wmul
           _RADIO_GetStatus
           _RADIO_ReleaseData
           _RxData *
           _SearchAvailableChannel *
             _Random
               ___lwmod
                 _rand (ARG)
                   ___lmul
                     _SwTimerReadValue (ARG)
                       _SwTimersInterrupt
                         _TMR_GetDeltaTime
                           _TMR1_ReadTimer
               _rand
                 ___lmul
                   _SwTimerReadValue (ARG)
                     _SwTimersInterrupt
                       _TMR_GetDeltaTime
                         _TMR1_ReadTimer
           _SetJoinFailState *
             _RxJoinResponse *
           _SetReceptionNotOkState *
             _LORAWAN_EnterContinuousReceive
               _ConfigureRadioRx
                 _ConfigureRadio
                   _RADIO_SetBandwidth
                   _RADIO_SetChannelFrequency
                   _RADIO_SetFSKSyncWord
                     _memcpy
                   _RADIO_SetFrequencyHopPeriod
                   _RADIO_SetLoRaSyncWord
                   _RADIO_SetModulation
                   _RADIO_SetSpreadingFactor
                 _RADIO_SetCRC
                 _RADIO_SetIQInverted
               _RADIO_ReceiveStart
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_WriteConfiguration
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_WriteFSKBitRate
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     ___lldiv
                   _RADIO_WriteFSKFrequencyDeviation
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     ___lldiv
                   _RADIO_WriteFrequency
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     ___lldiv
                     ___llmod
                   _RADIO_WriteMode
                     _HALDIO5PinValue
                     _RADIO_RegisterRead
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     _SystemBlockingWaitMs
                   _RADIO_WritePower
                     _RADIO_RegisterRead
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                   ___lmul
                     _SwTimerReadValue (ARG)
                       _SwTimersInterrupt
                         _TMR_GetDeltaTime
                           _TMR1_ReadTimer
                 _RADIO_WriteMode
                   _HALDIO5PinValue
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _SystemBlockingWaitMs
                 _SwTimerSetTimeout
                   ___lldiv (ARG)
                 _SwTimerStart
                   _SwTimersInterrupt
                     _TMR_GetDeltaTime
                       _TMR1_ReadTimer
                   _TMR_OverrideRemaining
                     _TMR_SwapTimer
                       _TMR1_ReadTimer
                       _TMR1_WriteTimer
                 ___lldiv
               _RADIO_ReceiveStop
                 _RADIO_WriteMode
                   _HALDIO5PinValue
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _SystemBlockingWaitMs
               _RADIO_ReleaseData
               _ResetParametersForConfirmedTransmission
               _ResetParametersForUnconfirmedTransmission
               _RxData *
             _RxData *
           _StartReTxTimer *
             _SwTimerSetTimeout
               ___lldiv (ARG)
             _SwTimerStart
               _SwTimersInterrupt
                 _TMR_GetDeltaTime
                   _TMR1_ReadTimer
               _TMR_OverrideRemaining
                 _TMR_SwapTimer
                   _TMR1_ReadTimer
                   _TMR1_WriteTimer
             ___lldiv
           _SwTimerStop *
           _UpdateCfList *
             _LORAWAN_SetChannelIdStatus
               _UpdateChannelIdStatus
               _ValidateChannelId
             _ValidateFrequency
             ___lmul
               _SwTimerReadValue (ARG)
                 _SwTimersInterrupt
                   _TMR_GetDeltaTime
                     _TMR1_ReadTimer
             ___wmul
             _memcpy
           _UpdateDLSettings *
           _UpdateJoinSuccessState *
             _RxJoinResponse *
             _SwTimerSetTimeout *
               ___lldiv (ARG)
             _SwTimerStart *
               _SwTimersInterrupt
                 _TMR_GetDeltaTime
                   _TMR1_ReadTimer
               _TMR_OverrideRemaining
                 _TMR_SwapTimer
                   _TMR1_ReadTimer
                   _TMR1_WriteTimer
             ___lldiv *
           _UpdateReceiveDelays *
             ___wmul
           _UpdateRetransmissionAckTimeoutState *
             _SwTimerSetTimeout
               ___lldiv (ARG)
             _SwTimerStart
               _SwTimersInterrupt
                 _TMR_GetDeltaTime
                   _TMR1_ReadTimer
               _TMR_OverrideRemaining
                 _TMR_SwapTimer
                   _TMR1_ReadTimer
                   _TMR1_WriteTimer
             ___lldiv
           _memcpy *
         _RADIO_RegisterRead
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         _RADIO_RegisterWrite
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         _RADIO_WriteMode
           _HALDIO5PinValue
           _RADIO_RegisterRead
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _SystemBlockingWaitMs
         _SwTimerStop
         ___abdiv
       _RADIO_TxDone
         _LORAWAN_TxDone
           _LORAWAN_EnterContinuousReceive
             _ConfigureRadioRx
               _ConfigureRadio
                 _RADIO_SetBandwidth
                 _RADIO_SetChannelFrequency
                 _RADIO_SetFSKSyncWord
                   _memcpy
                 _RADIO_SetFrequencyHopPeriod
                 _RADIO_SetLoRaSyncWord
                 _RADIO_SetModulation
                 _RADIO_SetSpreadingFactor
               _RADIO_SetCRC
               _RADIO_SetIQInverted
             _RADIO_ReceiveStart
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_WriteConfiguration
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_WriteFSKBitRate
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                 _RADIO_WriteFSKFrequencyDeviation
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                 _RADIO_WriteFrequency
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                   ___llmod
                 _RADIO_WriteMode
                   _HALDIO5PinValue
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _SystemBlockingWaitMs
                 _RADIO_WritePower
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                 ___lmul
                   _SwTimerReadValue (ARG)
                     _SwTimersInterrupt
                       _TMR_GetDeltaTime
                         _TMR1_ReadTimer
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _SystemBlockingWaitMs
               _SwTimerSetTimeout
                 ___lldiv (ARG)
               _SwTimerStart
                 _SwTimersInterrupt
                   _TMR_GetDeltaTime
                     _TMR1_ReadTimer
                 _TMR_OverrideRemaining
                   _TMR_SwapTimer
                     _TMR1_ReadTimer
                     _TMR1_WriteTimer
               ___lldiv
             _RADIO_ReceiveStop
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _SystemBlockingWaitMs
             _RADIO_ReleaseData
             _ResetParametersForConfirmedTransmission
             _ResetParametersForUnconfirmedTransmission
             _RxData *
           _RADIO_GetStatus
           _RxData *
           _SwTimerIsRunning *
           _SwTimerReadValue *
             _SwTimersInterrupt
               _TMR_GetDeltaTime
                 _TMR1_ReadTimer
           _SwTimerSetTimeout *
             ___lldiv (ARG)
           _SwTimerStart *
             _SwTimersInterrupt
               _TMR_GetDeltaTime
                 _TMR1_ReadTimer
             _TMR_OverrideRemaining
               _TMR_SwapTimer
                 _TMR1_ReadTimer
                 _TMR1_WriteTimer
           _SwTimerStop *
           ___lldiv *
           ___lmul *
             _SwTimerReadValue (ARG)
               _SwTimersInterrupt
                 _TMR_GetDeltaTime
                   _TMR1_ReadTimer
         _RADIO_RegisterWrite
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         _RADIO_WriteMode
           _HALDIO5PinValue
           _RADIO_RegisterRead
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _SystemBlockingWaitMs
         _SwTimerReadValue
           _SwTimersInterrupt
             _TMR_GetDeltaTime
               _TMR1_ReadTimer
         _SwTimerStop
         ___lmul
           _SwTimerReadValue (ARG)
             _SwTimersInterrupt
               _TMR_GetDeltaTime
                 _TMR1_ReadTimer
       _RADIO_UnhandledInterrupt
         _RADIO_RegisterWrite
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
     _RADIO_DIO1
       _RADIO_FHSSChangeChannel
         _RADIO_RegisterRead
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         _RADIO_RegisterWrite
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         _RADIO_WriteFrequency
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           ___lldiv
           ___llmod
       _RADIO_RegisterRead
         _HALSPICSAssert
         _HALSPICSDeassert
         _HALSPISend
           _SPI2_Exchange8bit
       _RADIO_RxTimeout
         _LORAWAN_RxTimeout
           _LORAWAN_ReceiveWindow2Callback
             _ConfigureRadioRx
               _ConfigureRadio
                 _RADIO_SetBandwidth
                 _RADIO_SetChannelFrequency
                 _RADIO_SetFSKSyncWord
                   _memcpy
                 _RADIO_SetFrequencyHopPeriod
                 _RADIO_SetLoRaSyncWord
                 _RADIO_SetModulation
                 _RADIO_SetSpreadingFactor
               _RADIO_SetCRC
               _RADIO_SetIQInverted
             _LORAWAN_EnterContinuousReceive
               _ConfigureRadioRx
                 _ConfigureRadio
                   _RADIO_SetBandwidth
                   _RADIO_SetChannelFrequency
                   _RADIO_SetFSKSyncWord
                     _memcpy
                   _RADIO_SetFrequencyHopPeriod
                   _RADIO_SetLoRaSyncWord
                   _RADIO_SetModulation
                   _RADIO_SetSpreadingFactor
                 _RADIO_SetCRC
                 _RADIO_SetIQInverted
               _RADIO_ReceiveStart
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_WriteConfiguration
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_WriteFSKBitRate
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     ___lldiv
                   _RADIO_WriteFSKFrequencyDeviation
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     ___lldiv
                   _RADIO_WriteFrequency
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     ___lldiv
                     ___llmod
                   _RADIO_WriteMode
                     _HALDIO5PinValue
                     _RADIO_RegisterRead
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     _SystemBlockingWaitMs
                   _RADIO_WritePower
                     _RADIO_RegisterRead
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                   ___lmul
                     _SwTimerReadValue (ARG)
                       _SwTimersInterrupt
                         _TMR_GetDeltaTime
                           _TMR1_ReadTimer
                 _RADIO_WriteMode
                   _HALDIO5PinValue
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _SystemBlockingWaitMs
                 _SwTimerSetTimeout
                   ___lldiv (ARG)
                 _SwTimerStart
                   _SwTimersInterrupt
                     _TMR_GetDeltaTime
                       _TMR1_ReadTimer
                   _TMR_OverrideRemaining
                     _TMR_SwapTimer
                       _TMR1_ReadTimer
                       _TMR1_WriteTimer
                 ___lldiv
               _RADIO_ReceiveStop
                 _RADIO_WriteMode
                   _HALDIO5PinValue
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _SystemBlockingWaitMs
               _RADIO_ReleaseData
               _ResetParametersForConfirmedTransmission
               _ResetParametersForUnconfirmedTransmission
               _RxData *
             _RADIO_GetStatus
             _RADIO_ReceiveStart
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_WriteConfiguration
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_WriteFSKBitRate
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                 _RADIO_WriteFSKFrequencyDeviation
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                 _RADIO_WriteFrequency
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                   ___llmod
                 _RADIO_WriteMode
                   _HALDIO5PinValue
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _SystemBlockingWaitMs
                 _RADIO_WritePower
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                 ___lmul
                   _SwTimerReadValue (ARG)
                     _SwTimersInterrupt
                       _TMR_GetDeltaTime
                         _TMR1_ReadTimer
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _SystemBlockingWaitMs
               _SwTimerSetTimeout
                 ___lldiv (ARG)
               _SwTimerStart
                 _SwTimersInterrupt
                   _TMR_GetDeltaTime
                     _TMR1_ReadTimer
                 _TMR_OverrideRemaining
                   _TMR_SwapTimer
                     _TMR1_ReadTimer
                     _TMR1_WriteTimer
               ___lldiv
             _RADIO_ReceiveStop
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _SystemBlockingWaitMs
             _RADIO_ReleaseData
             _ResetParametersForConfirmedTransmission
             _ResetParametersForUnconfirmedTransmission
             _RxData *
           _RADIO_Transmit
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
             _RADIO_RegisterRead
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _RADIO_RegisterWrite
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _RADIO_WriteConfiguration
               _RADIO_RegisterRead
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_WriteFSKBitRate
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 ___lldiv
               _RADIO_WriteFSKFrequencyDeviation
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 ___lldiv
               _RADIO_WriteFrequency
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 ___lldiv
                 ___llmod
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _SystemBlockingWaitMs
               _RADIO_WritePower
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
               ___lmul
                 _SwTimerReadValue (ARG)
                   _SwTimersInterrupt
                     _TMR_GetDeltaTime
                       _TMR1_ReadTimer
             _RADIO_WriteMode
               _HALDIO5PinValue
               _RADIO_RegisterRead
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _SystemBlockingWaitMs
             _SwTimerSetTimeout
               ___lldiv (ARG)
             _SwTimerStart
               _SwTimersInterrupt
                 _TMR_GetDeltaTime
                   _TMR1_ReadTimer
               _TMR_OverrideRemaining
                 _TMR_SwapTimer
                   _TMR1_ReadTimer
                   _TMR1_WriteTimer
             _SwTimerStop
             ___lldiv
           _ResetParametersForConfirmedTransmission
           _ResetParametersForUnconfirmedTransmission
           _RxData *
           _SelectChannelForTransmission *
             _ConfigureRadioTx
               _ConfigureRadio
                 _RADIO_SetBandwidth
                 _RADIO_SetChannelFrequency
                 _RADIO_SetFSKSyncWord
                   _memcpy
                 _RADIO_SetFrequencyHopPeriod
                 _RADIO_SetLoRaSyncWord
                 _RADIO_SetModulation
                 _RADIO_SetSpreadingFactor
               _RADIO_SetCRC
               _RADIO_SetIQInverted
               _RADIO_SetOutputPower
             _SearchAvailableChannel
               _Random
                 ___lwmod
                   _rand (ARG)
                     ___lmul
                       _SwTimerReadValue (ARG)
                         _SwTimersInterrupt
                           _TMR_GetDeltaTime
                             _TMR1_ReadTimer
                 _rand
                   ___lmul
                     _SwTimerReadValue (ARG)
                       _SwTimersInterrupt
                         _TMR_GetDeltaTime
                           _TMR1_ReadTimer
           _SetJoinFailState *
             _RxJoinResponse *
           _SwTimerSetTimeout *
             ___lldiv (ARG)
           _SwTimerStart *
             _SwTimersInterrupt
               _TMR_GetDeltaTime
                 _TMR1_ReadTimer
             _TMR_OverrideRemaining
               _TMR_SwapTimer
                 _TMR1_ReadTimer
                 _TMR1_WriteTimer
           ___lldiv *
         _RADIO_RegisterWrite
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         _RADIO_WriteMode
           _HALDIO5PinValue
           _RADIO_RegisterRead
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _SystemBlockingWaitMs
         _SwTimerStop
       _RADIO_UnhandledInterrupt
         _RADIO_RegisterWrite
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
     _RADIO_DIO2
       _RADIO_FHSSChangeChannel
         _RADIO_RegisterRead
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         _RADIO_RegisterWrite
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         _RADIO_WriteFrequency
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           ___lldiv
           ___llmod
       _RADIO_RegisterRead
         _HALSPICSAssert
         _HALSPICSDeassert
         _HALSPISend
           _SPI2_Exchange8bit
       _RADIO_UnhandledInterrupt
         _RADIO_RegisterWrite
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
     _RADIO_DIO3
       _RADIO_RegisterRead
         _HALSPICSAssert
         _HALSPICSDeassert
         _HALSPISend
           _SPI2_Exchange8bit
       _RADIO_UnhandledInterrupt
         _RADIO_RegisterWrite
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
     _RADIO_DIO4
       _RADIO_RegisterRead
         _HALSPICSAssert
         _HALSPICSDeassert
         _HALSPISend
           _SPI2_Exchange8bit
       _RADIO_UnhandledInterrupt
         _RADIO_RegisterWrite
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
     _RADIO_DIO5
       _RADIO_RegisterRead
         _HALSPICSAssert
         _HALSPICSDeassert
         _HALSPISend
           _SPI2_Exchange8bit
       _RADIO_UnhandledInterrupt
         _RADIO_RegisterWrite
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
     _SwTimersExecute
       Absolute function(Fake) *
       _AckRetransmissionCallback *
         _FindSmallestDataRate
         _LORAWAN_GetMaxPayloadSize
           _CountfOptsLength
         _RADIO_Transmit
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
           _RADIO_RegisterRead
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _RADIO_WriteConfiguration
             _RADIO_RegisterRead
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _RADIO_RegisterWrite
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _RADIO_WriteFSKBitRate
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               ___lldiv
             _RADIO_WriteFSKFrequencyDeviation
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               ___lldiv
             _RADIO_WriteFrequency
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               ___lldiv
               ___llmod
             _RADIO_WriteMode
               _HALDIO5PinValue
               _RADIO_RegisterRead
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _SystemBlockingWaitMs
             _RADIO_WritePower
               _RADIO_RegisterRead
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
             ___lmul
               _SwTimerReadValue (ARG)
                 _SwTimersInterrupt
                   _TMR_GetDeltaTime
                     _TMR1_ReadTimer
           _RADIO_WriteMode
             _HALDIO5PinValue
             _RADIO_RegisterRead
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _RADIO_RegisterWrite
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _SystemBlockingWaitMs
           _SwTimerSetTimeout
             ___lldiv (ARG)
           _SwTimerStart
             _SwTimersInterrupt
               _TMR_GetDeltaTime
                 _TMR1_ReadTimer
             _TMR_OverrideRemaining
               _TMR_SwapTimer
                 _TMR1_ReadTimer
                 _TMR1_WriteTimer
           _SwTimerStop
           ___lldiv
         _ResetParametersForConfirmedTransmission
         _RxData *
         _SelectChannelForTransmission *
           _ConfigureRadioTx
             _ConfigureRadio
               _RADIO_SetBandwidth
               _RADIO_SetChannelFrequency
               _RADIO_SetFSKSyncWord
                 _memcpy
               _RADIO_SetFrequencyHopPeriod
               _RADIO_SetLoRaSyncWord
               _RADIO_SetModulation
               _RADIO_SetSpreadingFactor
             _RADIO_SetCRC
             _RADIO_SetIQInverted
             _RADIO_SetOutputPower
           _SearchAvailableChannel
             _Random
               ___lwmod
                 _rand (ARG)
                   ___lmul
                     _SwTimerReadValue (ARG)
                       _SwTimersInterrupt
                         _TMR_GetDeltaTime
                           _TMR1_ReadTimer
               _rand
                 ___lmul
                   _SwTimerReadValue (ARG)
                     _SwTimersInterrupt
                       _TMR_GetDeltaTime
                         _TMR1_ReadTimer
         _UpdateRetransmissionAckTimeoutState *
           _SwTimerSetTimeout
             ___lldiv (ARG)
           _SwTimerStart
             _SwTimersInterrupt
               _TMR_GetDeltaTime
                 _TMR1_ReadTimer
             _TMR_OverrideRemaining
               _TMR_SwapTimer
                 _TMR1_ReadTimer
                 _TMR1_WriteTimer
           ___lldiv
       _AutomaticReplyCallback *
         _LORAWAN_Send
           _AssemblePacket
             _AESCmac
               _AESEncodeLoRa
                 _AESEncode
                   _EncKeySchedule
                   _EncodeShiftRow
                 _memcpy
               _GenerateSubkey
                 _AESEncodeLoRa
                   _AESEncode
                     _EncKeySchedule
                     _EncodeShiftRow
                   _memcpy
                 _FillSubKey
                 _memset
               _memcpy
               _memset
             _AssembleEncryptionBlock
               _memcpy
               _memset
             _CountfOptsLength
             _EncryptFRMPayload
               _AESEncodeLoRa
                 _AESEncode
                   _EncKeySchedule
                   _EncodeShiftRow
                 _memcpy
               _AssembleEncryptionBlock
                 _memcpy
                 _memset
               ___awdiv
                 ___awmod (ARG)
             _FindSmallestDataRate
             _IncludeMacCommandsResponse
               _RADIO_GetPacketSnr
             _memcpy
             _memset
           _LORAWAN_GetMaxPayloadSize
             _CountfOptsLength
           _RADIO_ReceiveStop
             _RADIO_WriteMode
               _HALDIO5PinValue
               _RADIO_RegisterRead
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _SystemBlockingWaitMs
           _RADIO_Transmit
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
             _RADIO_RegisterRead
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _RADIO_RegisterWrite
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _RADIO_WriteConfiguration
               _RADIO_RegisterRead
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_WriteFSKBitRate
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 ___lldiv
               _RADIO_WriteFSKFrequencyDeviation
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 ___lldiv
               _RADIO_WriteFrequency
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 ___lldiv
                 ___llmod
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _SystemBlockingWaitMs
               _RADIO_WritePower
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
               ___lmul
                 _SwTimerReadValue (ARG)
                   _SwTimersInterrupt
                     _TMR_GetDeltaTime
                       _TMR1_ReadTimer
             _RADIO_WriteMode
               _HALDIO5PinValue
               _RADIO_RegisterRead
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _SystemBlockingWaitMs
             _SwTimerSetTimeout
               ___lldiv (ARG)
             _SwTimerStart
               _SwTimersInterrupt
                 _TMR_GetDeltaTime
                   _TMR1_ReadTimer
               _TMR_OverrideRemaining
                 _TMR_SwapTimer
                   _TMR1_ReadTimer
                   _TMR1_WriteTimer
             _SwTimerStop
             ___lldiv
           _SelectChannelForTransmission
             _ConfigureRadioTx
               _ConfigureRadio
                 _RADIO_SetBandwidth
                 _RADIO_SetChannelFrequency
                 _RADIO_SetFSKSyncWord
                   _memcpy
                 _RADIO_SetFrequencyHopPeriod
                 _RADIO_SetLoRaSyncWord
                 _RADIO_SetModulation
                 _RADIO_SetSpreadingFactor
               _RADIO_SetCRC
               _RADIO_SetIQInverted
               _RADIO_SetOutputPower
             _SearchAvailableChannel
               _Random
                 ___lwmod
                   _rand (ARG)
                     ___lmul
                       _SwTimerReadValue (ARG)
                         _SwTimersInterrupt
                           _TMR_GetDeltaTime
                             _TMR1_ReadTimer
                 _rand
                   ___lmul
                     _SwTimerReadValue (ARG)
                       _SwTimersInterrupt
                         _TMR_GetDeltaTime
                           _TMR1_ReadTimer
       _DutyCycleCallback *
         _SwTimerSetTimeout
           ___lldiv (ARG)
         _SwTimerStart
           _SwTimersInterrupt
             _TMR_GetDeltaTime
               _TMR1_ReadTimer
           _TMR_OverrideRemaining
             _TMR_SwapTimer
               _TMR1_ReadTimer
               _TMR1_WriteTimer
         ___lldiv
       _LORAWAN_LinkCheckCallback *
         _SwTimerSetTimeout
           ___lldiv (ARG)
         _SwTimerStart
           _SwTimersInterrupt
             _TMR_GetDeltaTime
               _TMR1_ReadTimer
           _TMR_OverrideRemaining
             _TMR_SwapTimer
               _TMR1_ReadTimer
               _TMR1_WriteTimer
         ___lldiv
       _LORAWAN_ReceiveWindow1Callback *
         _ConfigureRadioRx
           _ConfigureRadio
             _RADIO_SetBandwidth
             _RADIO_SetChannelFrequency
             _RADIO_SetFSKSyncWord
               _memcpy
             _RADIO_SetFrequencyHopPeriod
             _RADIO_SetLoRaSyncWord
             _RADIO_SetModulation
             _RADIO_SetSpreadingFactor
           _RADIO_SetCRC
           _RADIO_SetIQInverted
         _GetRx1Freq
         _RADIO_ReceiveStart
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _RADIO_WriteConfiguration
             _RADIO_RegisterRead
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _RADIO_RegisterWrite
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _RADIO_WriteFSKBitRate
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               ___lldiv
             _RADIO_WriteFSKFrequencyDeviation
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               ___lldiv
             _RADIO_WriteFrequency
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               ___lldiv
               ___llmod
             _RADIO_WriteMode
               _HALDIO5PinValue
               _RADIO_RegisterRead
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _SystemBlockingWaitMs
             _RADIO_WritePower
               _RADIO_RegisterRead
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
             ___lmul
               _SwTimerReadValue (ARG)
                 _SwTimersInterrupt
                   _TMR_GetDeltaTime
                     _TMR1_ReadTimer
           _RADIO_WriteMode
             _HALDIO5PinValue
             _RADIO_RegisterRead
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _RADIO_RegisterWrite
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _SystemBlockingWaitMs
           _SwTimerSetTimeout
             ___lldiv (ARG)
           _SwTimerStart
             _SwTimersInterrupt
               _TMR_GetDeltaTime
                 _TMR1_ReadTimer
             _TMR_OverrideRemaining
               _TMR_SwapTimer
                 _TMR1_ReadTimer
                 _TMR1_WriteTimer
           ___lldiv
         _RADIO_ReceiveStop
           _RADIO_WriteMode
             _HALDIO5PinValue
             _RADIO_RegisterRead
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _RADIO_RegisterWrite
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _SystemBlockingWaitMs
         _RADIO_ReleaseData
       _LORAWAN_ReceiveWindow2Callback *
         _ConfigureRadioRx
           _ConfigureRadio
             _RADIO_SetBandwidth
             _RADIO_SetChannelFrequency
             _RADIO_SetFSKSyncWord
               _memcpy
             _RADIO_SetFrequencyHopPeriod
             _RADIO_SetLoRaSyncWord
             _RADIO_SetModulation
             _RADIO_SetSpreadingFactor
           _RADIO_SetCRC
           _RADIO_SetIQInverted
         _LORAWAN_EnterContinuousReceive
           _ConfigureRadioRx
             _ConfigureRadio
               _RADIO_SetBandwidth
               _RADIO_SetChannelFrequency
               _RADIO_SetFSKSyncWord
                 _memcpy
               _RADIO_SetFrequencyHopPeriod
               _RADIO_SetLoRaSyncWord
               _RADIO_SetModulation
               _RADIO_SetSpreadingFactor
             _RADIO_SetCRC
             _RADIO_SetIQInverted
           _RADIO_ReceiveStart
             _RADIO_RegisterWrite
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _RADIO_WriteConfiguration
               _RADIO_RegisterRead
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_WriteFSKBitRate
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 ___lldiv
               _RADIO_WriteFSKFrequencyDeviation
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 ___lldiv
               _RADIO_WriteFrequency
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 ___lldiv
                 ___llmod
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _SystemBlockingWaitMs
               _RADIO_WritePower
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
               ___lmul
                 _SwTimerReadValue (ARG)
                   _SwTimersInterrupt
                     _TMR_GetDeltaTime
                       _TMR1_ReadTimer
             _RADIO_WriteMode
               _HALDIO5PinValue
               _RADIO_RegisterRead
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _SystemBlockingWaitMs
             _SwTimerSetTimeout
               ___lldiv (ARG)
             _SwTimerStart
               _SwTimersInterrupt
                 _TMR_GetDeltaTime
                   _TMR1_ReadTimer
               _TMR_OverrideRemaining
                 _TMR_SwapTimer
                   _TMR1_ReadTimer
                   _TMR1_WriteTimer
             ___lldiv
           _RADIO_ReceiveStop
             _RADIO_WriteMode
               _HALDIO5PinValue
               _RADIO_RegisterRead
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _SystemBlockingWaitMs
           _RADIO_ReleaseData
           _ResetParametersForConfirmedTransmission
           _ResetParametersForUnconfirmedTransmission
           _RxData *
         _RADIO_GetStatus
         _RADIO_ReceiveStart
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _RADIO_WriteConfiguration
             _RADIO_RegisterRead
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _RADIO_RegisterWrite
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _RADIO_WriteFSKBitRate
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               ___lldiv
             _RADIO_WriteFSKFrequencyDeviation
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               ___lldiv
             _RADIO_WriteFrequency
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               ___lldiv
               ___llmod
             _RADIO_WriteMode
               _HALDIO5PinValue
               _RADIO_RegisterRead
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _SystemBlockingWaitMs
             _RADIO_WritePower
               _RADIO_RegisterRead
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
             ___lmul
               _SwTimerReadValue (ARG)
                 _SwTimersInterrupt
                   _TMR_GetDeltaTime
                     _TMR1_ReadTimer
           _RADIO_WriteMode
             _HALDIO5PinValue
             _RADIO_RegisterRead
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _RADIO_RegisterWrite
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _SystemBlockingWaitMs
           _SwTimerSetTimeout
             ___lldiv (ARG)
           _SwTimerStart
             _SwTimersInterrupt
               _TMR_GetDeltaTime
                 _TMR1_ReadTimer
             _TMR_OverrideRemaining
               _TMR_SwapTimer
                 _TMR1_ReadTimer
                 _TMR1_WriteTimer
           ___lldiv
         _RADIO_ReceiveStop
           _RADIO_WriteMode
             _HALDIO5PinValue
             _RADIO_RegisterRead
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _RADIO_RegisterWrite
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _SystemBlockingWaitMs
         _RADIO_ReleaseData
         _ResetParametersForConfirmedTransmission
         _ResetParametersForUnconfirmedTransmission
         _RxData *
       _RADIO_RxFSKTimeout *
         _LORAWAN_RxTimeout
           _LORAWAN_ReceiveWindow2Callback
             _ConfigureRadioRx
               _ConfigureRadio
                 _RADIO_SetBandwidth
                 _RADIO_SetChannelFrequency
                 _RADIO_SetFSKSyncWord
                   _memcpy
                 _RADIO_SetFrequencyHopPeriod
                 _RADIO_SetLoRaSyncWord
                 _RADIO_SetModulation
                 _RADIO_SetSpreadingFactor
               _RADIO_SetCRC
               _RADIO_SetIQInverted
             _LORAWAN_EnterContinuousReceive
               _ConfigureRadioRx
                 _ConfigureRadio
                   _RADIO_SetBandwidth
                   _RADIO_SetChannelFrequency
                   _RADIO_SetFSKSyncWord
                     _memcpy
                   _RADIO_SetFrequencyHopPeriod
                   _RADIO_SetLoRaSyncWord
                   _RADIO_SetModulation
                   _RADIO_SetSpreadingFactor
                 _RADIO_SetCRC
                 _RADIO_SetIQInverted
               _RADIO_ReceiveStart
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_WriteConfiguration
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_WriteFSKBitRate
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     ___lldiv
                   _RADIO_WriteFSKFrequencyDeviation
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     ___lldiv
                   _RADIO_WriteFrequency
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     ___lldiv
                     ___llmod
                   _RADIO_WriteMode
                     _HALDIO5PinValue
                     _RADIO_RegisterRead
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     _SystemBlockingWaitMs
                   _RADIO_WritePower
                     _RADIO_RegisterRead
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                   ___lmul
                     _SwTimerReadValue (ARG)
                       _SwTimersInterrupt
                         _TMR_GetDeltaTime
                           _TMR1_ReadTimer
                 _RADIO_WriteMode
                   _HALDIO5PinValue
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _SystemBlockingWaitMs
                 _SwTimerSetTimeout
                   ___lldiv (ARG)
                 _SwTimerStart
                   _SwTimersInterrupt
                     _TMR_GetDeltaTime
                       _TMR1_ReadTimer
                   _TMR_OverrideRemaining
                     _TMR_SwapTimer
                       _TMR1_ReadTimer
                       _TMR1_WriteTimer
                 ___lldiv
               _RADIO_ReceiveStop
                 _RADIO_WriteMode
                   _HALDIO5PinValue
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _SystemBlockingWaitMs
               _RADIO_ReleaseData
               _ResetParametersForConfirmedTransmission
               _ResetParametersForUnconfirmedTransmission
               _RxData *
             _RADIO_GetStatus
             _RADIO_ReceiveStart
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_WriteConfiguration
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_WriteFSKBitRate
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                 _RADIO_WriteFSKFrequencyDeviation
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                 _RADIO_WriteFrequency
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                   ___llmod
                 _RADIO_WriteMode
                   _HALDIO5PinValue
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _SystemBlockingWaitMs
                 _RADIO_WritePower
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                 ___lmul
                   _SwTimerReadValue (ARG)
                     _SwTimersInterrupt
                       _TMR_GetDeltaTime
                         _TMR1_ReadTimer
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _SystemBlockingWaitMs
               _SwTimerSetTimeout
                 ___lldiv (ARG)
               _SwTimerStart
                 _SwTimersInterrupt
                   _TMR_GetDeltaTime
                     _TMR1_ReadTimer
                 _TMR_OverrideRemaining
                   _TMR_SwapTimer
                     _TMR1_ReadTimer
                     _TMR1_WriteTimer
               ___lldiv
             _RADIO_ReceiveStop
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _SystemBlockingWaitMs
             _RADIO_ReleaseData
             _ResetParametersForConfirmedTransmission
             _ResetParametersForUnconfirmedTransmission
             _RxData *
           _RADIO_Transmit
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
             _RADIO_RegisterRead
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _RADIO_RegisterWrite
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _RADIO_WriteConfiguration
               _RADIO_RegisterRead
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_WriteFSKBitRate
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 ___lldiv
               _RADIO_WriteFSKFrequencyDeviation
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 ___lldiv
               _RADIO_WriteFrequency
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 ___lldiv
                 ___llmod
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _SystemBlockingWaitMs
               _RADIO_WritePower
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
               ___lmul
                 _SwTimerReadValue (ARG)
                   _SwTimersInterrupt
                     _TMR_GetDeltaTime
                       _TMR1_ReadTimer
             _RADIO_WriteMode
               _HALDIO5PinValue
               _RADIO_RegisterRead
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _SystemBlockingWaitMs
             _SwTimerSetTimeout
               ___lldiv (ARG)
             _SwTimerStart
               _SwTimersInterrupt
                 _TMR_GetDeltaTime
                   _TMR1_ReadTimer
               _TMR_OverrideRemaining
                 _TMR_SwapTimer
                   _TMR1_ReadTimer
                   _TMR1_WriteTimer
             _SwTimerStop
             ___lldiv
           _ResetParametersForConfirmedTransmission
           _ResetParametersForUnconfirmedTransmission
           _RxData *
           _SelectChannelForTransmission *
             _ConfigureRadioTx
               _ConfigureRadio
                 _RADIO_SetBandwidth
                 _RADIO_SetChannelFrequency
                 _RADIO_SetFSKSyncWord
                   _memcpy
                 _RADIO_SetFrequencyHopPeriod
                 _RADIO_SetLoRaSyncWord
                 _RADIO_SetModulation
                 _RADIO_SetSpreadingFactor
               _RADIO_SetCRC
               _RADIO_SetIQInverted
               _RADIO_SetOutputPower
             _SearchAvailableChannel
               _Random
                 ___lwmod
                   _rand (ARG)
                     ___lmul
                       _SwTimerReadValue (ARG)
                         _SwTimersInterrupt
                           _TMR_GetDeltaTime
                             _TMR1_ReadTimer
                 _rand
                   ___lmul
                     _SwTimerReadValue (ARG)
                       _SwTimersInterrupt
                         _TMR_GetDeltaTime
                           _TMR1_ReadTimer
           _SetJoinFailState *
             _RxJoinResponse *
           _SwTimerSetTimeout *
             ___lldiv (ARG)
           _SwTimerStart *
             _SwTimersInterrupt
               _TMR_GetDeltaTime
                 _TMR1_ReadTimer
             _TMR_OverrideRemaining
               _TMR_SwapTimer
                 _TMR1_ReadTimer
                 _TMR1_WriteTimer
           ___lldiv *
         _RADIO_RegisterRead
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         _RADIO_WriteMode
           _HALDIO5PinValue
           _RADIO_RegisterRead
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _SystemBlockingWaitMs
         _SwTimerStop
       _RADIO_WatchdogTimeout *
         _LORAWAN_RxTimeout
           _LORAWAN_ReceiveWindow2Callback
             _ConfigureRadioRx
               _ConfigureRadio
                 _RADIO_SetBandwidth
                 _RADIO_SetChannelFrequency
                 _RADIO_SetFSKSyncWord
                   _memcpy
                 _RADIO_SetFrequencyHopPeriod
                 _RADIO_SetLoRaSyncWord
                 _RADIO_SetModulation
                 _RADIO_SetSpreadingFactor
               _RADIO_SetCRC
               _RADIO_SetIQInverted
             _LORAWAN_EnterContinuousReceive
               _ConfigureRadioRx
                 _ConfigureRadio
                   _RADIO_SetBandwidth
                   _RADIO_SetChannelFrequency
                   _RADIO_SetFSKSyncWord
                     _memcpy
                   _RADIO_SetFrequencyHopPeriod
                   _RADIO_SetLoRaSyncWord
                   _RADIO_SetModulation
                   _RADIO_SetSpreadingFactor
                 _RADIO_SetCRC
                 _RADIO_SetIQInverted
               _RADIO_ReceiveStart
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_WriteConfiguration
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_WriteFSKBitRate
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     ___lldiv
                   _RADIO_WriteFSKFrequencyDeviation
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     ___lldiv
                   _RADIO_WriteFrequency
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     ___lldiv
                     ___llmod
                   _RADIO_WriteMode
                     _HALDIO5PinValue
                     _RADIO_RegisterRead
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     _SystemBlockingWaitMs
                   _RADIO_WritePower
                     _RADIO_RegisterRead
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                   ___lmul
                     _SwTimerReadValue (ARG)
                       _SwTimersInterrupt
                         _TMR_GetDeltaTime
                           _TMR1_ReadTimer
                 _RADIO_WriteMode
                   _HALDIO5PinValue
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _SystemBlockingWaitMs
                 _SwTimerSetTimeout
                   ___lldiv (ARG)
                 _SwTimerStart
                   _SwTimersInterrupt
                     _TMR_GetDeltaTime
                       _TMR1_ReadTimer
                   _TMR_OverrideRemaining
                     _TMR_SwapTimer
                       _TMR1_ReadTimer
                       _TMR1_WriteTimer
                 ___lldiv
               _RADIO_ReceiveStop
                 _RADIO_WriteMode
                   _HALDIO5PinValue
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _SystemBlockingWaitMs
               _RADIO_ReleaseData
               _ResetParametersForConfirmedTransmission
               _ResetParametersForUnconfirmedTransmission
               _RxData *
             _RADIO_GetStatus
             _RADIO_ReceiveStart
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_WriteConfiguration
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_WriteFSKBitRate
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                 _RADIO_WriteFSKFrequencyDeviation
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                 _RADIO_WriteFrequency
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                   ___llmod
                 _RADIO_WriteMode
                   _HALDIO5PinValue
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _SystemBlockingWaitMs
                 _RADIO_WritePower
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                 ___lmul
                   _SwTimerReadValue (ARG)
                     _SwTimersInterrupt
                       _TMR_GetDeltaTime
                         _TMR1_ReadTimer
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _SystemBlockingWaitMs
               _SwTimerSetTimeout
                 ___lldiv (ARG)
               _SwTimerStart
                 _SwTimersInterrupt
                   _TMR_GetDeltaTime
                     _TMR1_ReadTimer
                 _TMR_OverrideRemaining
                   _TMR_SwapTimer
                     _TMR1_ReadTimer
                     _TMR1_WriteTimer
               ___lldiv
             _RADIO_ReceiveStop
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _SystemBlockingWaitMs
             _RADIO_ReleaseData
             _ResetParametersForConfirmedTransmission
             _ResetParametersForUnconfirmedTransmission
             _RxData *
           _RADIO_Transmit
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
             _RADIO_RegisterRead
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _RADIO_RegisterWrite
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _RADIO_WriteConfiguration
               _RADIO_RegisterRead
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_WriteFSKBitRate
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 ___lldiv
               _RADIO_WriteFSKFrequencyDeviation
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 ___lldiv
               _RADIO_WriteFrequency
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 ___lldiv
                 ___llmod
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _SystemBlockingWaitMs
               _RADIO_WritePower
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
               ___lmul
                 _SwTimerReadValue (ARG)
                   _SwTimersInterrupt
                     _TMR_GetDeltaTime
                       _TMR1_ReadTimer
             _RADIO_WriteMode
               _HALDIO5PinValue
               _RADIO_RegisterRead
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _SystemBlockingWaitMs
             _SwTimerSetTimeout
               ___lldiv (ARG)
             _SwTimerStart
               _SwTimersInterrupt
                 _TMR_GetDeltaTime
                   _TMR1_ReadTimer
               _TMR_OverrideRemaining
                 _TMR_SwapTimer
                   _TMR1_ReadTimer
                   _TMR1_WriteTimer
             _SwTimerStop
             ___lldiv
           _ResetParametersForConfirmedTransmission
           _ResetParametersForUnconfirmedTransmission
           _RxData *
           _SelectChannelForTransmission *
             _ConfigureRadioTx
               _ConfigureRadio
                 _RADIO_SetBandwidth
                 _RADIO_SetChannelFrequency
                 _RADIO_SetFSKSyncWord
                   _memcpy
                 _RADIO_SetFrequencyHopPeriod
                 _RADIO_SetLoRaSyncWord
                 _RADIO_SetModulation
                 _RADIO_SetSpreadingFactor
               _RADIO_SetCRC
               _RADIO_SetIQInverted
               _RADIO_SetOutputPower
             _SearchAvailableChannel
               _Random
                 ___lwmod
                   _rand (ARG)
                     ___lmul
                       _SwTimerReadValue (ARG)
                         _SwTimersInterrupt
                           _TMR_GetDeltaTime
                             _TMR1_ReadTimer
                 _rand
                   ___lmul
                     _SwTimerReadValue (ARG)
                       _SwTimersInterrupt
                         _TMR_GetDeltaTime
                           _TMR1_ReadTimer
           _SetJoinFailState *
             _RxJoinResponse *
           _SwTimerSetTimeout *
             ___lldiv (ARG)
           _SwTimerStart *
             _SwTimersInterrupt
               _TMR_GetDeltaTime
                 _TMR1_ReadTimer
             _TMR_OverrideRemaining
               _TMR_SwapTimer
                 _TMR1_ReadTimer
                 _TMR1_WriteTimer
           ___lldiv *
         _LORAWAN_TxDone
           _LORAWAN_EnterContinuousReceive
             _ConfigureRadioRx
               _ConfigureRadio
                 _RADIO_SetBandwidth
                 _RADIO_SetChannelFrequency
                 _RADIO_SetFSKSyncWord
                   _memcpy
                 _RADIO_SetFrequencyHopPeriod
                 _RADIO_SetLoRaSyncWord
                 _RADIO_SetModulation
                 _RADIO_SetSpreadingFactor
               _RADIO_SetCRC
               _RADIO_SetIQInverted
             _RADIO_ReceiveStart
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_WriteConfiguration
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_WriteFSKBitRate
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                 _RADIO_WriteFSKFrequencyDeviation
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                 _RADIO_WriteFrequency
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                   ___llmod
                 _RADIO_WriteMode
                   _HALDIO5PinValue
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _SystemBlockingWaitMs
                 _RADIO_WritePower
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                 ___lmul
                   _SwTimerReadValue (ARG)
                     _SwTimersInterrupt
                       _TMR_GetDeltaTime
                         _TMR1_ReadTimer
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _SystemBlockingWaitMs
               _SwTimerSetTimeout
                 ___lldiv (ARG)
               _SwTimerStart
                 _SwTimersInterrupt
                   _TMR_GetDeltaTime
                     _TMR1_ReadTimer
                 _TMR_OverrideRemaining
                   _TMR_SwapTimer
                     _TMR1_ReadTimer
                     _TMR1_WriteTimer
               ___lldiv
             _RADIO_ReceiveStop
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _SystemBlockingWaitMs
             _RADIO_ReleaseData
             _ResetParametersForConfirmedTransmission
             _ResetParametersForUnconfirmedTransmission
             _RxData *
           _RADIO_GetStatus
           _RxData *
           _SwTimerIsRunning *
           _SwTimerReadValue *
             _SwTimersInterrupt
               _TMR_GetDeltaTime
                 _TMR1_ReadTimer
           _SwTimerSetTimeout *
             ___lldiv (ARG)
           _SwTimerStart *
             _SwTimersInterrupt
               _TMR_GetDeltaTime
                 _TMR1_ReadTimer
             _TMR_OverrideRemaining
               _TMR_SwapTimer
                 _TMR1_ReadTimer
                 _TMR1_WriteTimer
           _SwTimerStop *
           ___lldiv *
           ___lmul *
             _SwTimerReadValue (ARG)
               _SwTimersInterrupt
                 _TMR_GetDeltaTime
                   _TMR1_ReadTimer
         _RADIO_WriteMode
           _HALDIO5PinValue
           _RADIO_RegisterRead
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _SystemBlockingWaitMs
       _UnconfirmedTransmissionCallback *
         _RADIO_Transmit
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
           _RADIO_RegisterRead
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _RADIO_WriteConfiguration
             _RADIO_RegisterRead
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _RADIO_RegisterWrite
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _RADIO_WriteFSKBitRate
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               ___lldiv
             _RADIO_WriteFSKFrequencyDeviation
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               ___lldiv
             _RADIO_WriteFrequency
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               ___lldiv
               ___llmod
             _RADIO_WriteMode
               _HALDIO5PinValue
               _RADIO_RegisterRead
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _SystemBlockingWaitMs
             _RADIO_WritePower
               _RADIO_RegisterRead
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
             ___lmul
               _SwTimerReadValue (ARG)
                 _SwTimersInterrupt
                   _TMR_GetDeltaTime
                     _TMR1_ReadTimer
           _RADIO_WriteMode
             _HALDIO5PinValue
             _RADIO_RegisterRead
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _RADIO_RegisterWrite
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _SystemBlockingWaitMs
           _SwTimerSetTimeout
             ___lldiv (ARG)
           _SwTimerStart
             _SwTimersInterrupt
               _TMR_GetDeltaTime
                 _TMR1_ReadTimer
             _TMR_OverrideRemaining
               _TMR_SwapTimer
                 _TMR1_ReadTimer
                 _TMR1_WriteTimer
           _SwTimerStop
           ___lldiv
         _ResetParametersForUnconfirmedTransmission
         _RxData *
         _SelectChannelForTransmission *
           _ConfigureRadioTx
             _ConfigureRadio
               _RADIO_SetBandwidth
               _RADIO_SetChannelFrequency
               _RADIO_SetFSKSyncWord
                 _memcpy
               _RADIO_SetFrequencyHopPeriod
               _RADIO_SetLoRaSyncWord
               _RADIO_SetModulation
               _RADIO_SetSpreadingFactor
             _RADIO_SetCRC
             _RADIO_SetIQInverted
             _RADIO_SetOutputPower
           _SearchAvailableChannel
             _Random
               ___lwmod
                 _rand (ARG)
                   ___lmul
                     _SwTimerReadValue (ARG)
                       _SwTimersInterrupt
                         _TMR_GetDeltaTime
                           _TMR1_ReadTimer
               _rand
                 ___lmul
                   _SwTimerReadValue (ARG)
                     _SwTimersInterrupt
                       _TMR_GetDeltaTime
                         _TMR1_ReadTimer
       _UpdateJoinSuccessState *
         _RxJoinResponse *
         _SwTimerSetTimeout *
           ___lldiv (ARG)
         _SwTimerStart *
           _SwTimersInterrupt
             _TMR_GetDeltaTime
               _TMR1_ReadTimer
           _TMR_OverrideRemaining
             _TMR_SwapTimer
               _TMR1_ReadTimer
               _TMR1_WriteTimer
         ___lldiv *
   _LORAWAN_Send
     _AssemblePacket
       _AESCmac
         _AESEncodeLoRa
           _AESEncode
             _EncKeySchedule
             _EncodeShiftRow
           _memcpy
         _GenerateSubkey
           _AESEncodeLoRa
             _AESEncode
               _EncKeySchedule
               _EncodeShiftRow
             _memcpy
           _FillSubKey
           _memset
         _memcpy
         _memset
       _AssembleEncryptionBlock
         _memcpy
         _memset
       _CountfOptsLength
       _EncryptFRMPayload
         _AESEncodeLoRa
           _AESEncode
             _EncKeySchedule
             _EncodeShiftRow
           _memcpy
         _AssembleEncryptionBlock
           _memcpy
           _memset
         ___awdiv
           ___awmod (ARG)
       _FindSmallestDataRate
       _IncludeMacCommandsResponse
         _RADIO_GetPacketSnr
       _memcpy
       _memset
     _LORAWAN_GetMaxPayloadSize
       _CountfOptsLength
     _RADIO_ReceiveStop
       _RADIO_WriteMode
         _HALDIO5PinValue
         _RADIO_RegisterRead
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         _RADIO_RegisterWrite
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         _SystemBlockingWaitMs
     _RADIO_Transmit
       _HALSPICSAssert
       _HALSPICSDeassert
       _HALSPISend
         _SPI2_Exchange8bit
       _RADIO_RegisterRead
         _HALSPICSAssert
         _HALSPICSDeassert
         _HALSPISend
           _SPI2_Exchange8bit
       _RADIO_RegisterWrite
         _HALSPICSAssert
         _HALSPICSDeassert
         _HALSPISend
           _SPI2_Exchange8bit
       _RADIO_WriteConfiguration
         _RADIO_RegisterRead
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         _RADIO_RegisterWrite
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         _RADIO_WriteFSKBitRate
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           ___lldiv
         _RADIO_WriteFSKFrequencyDeviation
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           ___lldiv
         _RADIO_WriteFrequency
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           ___lldiv
           ___llmod
         _RADIO_WriteMode
           _HALDIO5PinValue
           _RADIO_RegisterRead
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _SystemBlockingWaitMs
         _RADIO_WritePower
           _RADIO_RegisterRead
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
         ___lmul
           _SwTimerReadValue (ARG)
             _SwTimersInterrupt
               _TMR_GetDeltaTime
                 _TMR1_ReadTimer
       _RADIO_WriteMode
         _HALDIO5PinValue
         _RADIO_RegisterRead
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         _RADIO_RegisterWrite
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         _SystemBlockingWaitMs
       _SwTimerSetTimeout
         ___lldiv (ARG)
       _SwTimerStart
         _SwTimersInterrupt
           _TMR_GetDeltaTime
             _TMR1_ReadTimer
         _TMR_OverrideRemaining
           _TMR_SwapTimer
             _TMR1_ReadTimer
             _TMR1_WriteTimer
       _SwTimerStop
       ___lldiv
     _SelectChannelForTransmission
       _ConfigureRadioTx
         _ConfigureRadio
           _RADIO_SetBandwidth
           _RADIO_SetChannelFrequency
           _RADIO_SetFSKSyncWord
             _memcpy
           _RADIO_SetFrequencyHopPeriod
           _RADIO_SetLoRaSyncWord
           _RADIO_SetModulation
           _RADIO_SetSpreadingFactor
         _RADIO_SetCRC
         _RADIO_SetIQInverted
         _RADIO_SetOutputPower
       _SearchAvailableChannel
         _Random
           ___lwmod
             _rand (ARG)
               ___lmul
                 _SwTimerReadValue (ARG)
                   _SwTimersInterrupt
                     _TMR_GetDeltaTime
                       _TMR1_ReadTimer
           _rand
             ___lmul
               _SwTimerReadValue (ARG)
                 _SwTimersInterrupt
                   _TMR_GetDeltaTime
                     _TMR1_ReadTimer
   _LORAWAN_SetApplicationSessionKey
     _memcpy
   _LORAWAN_SetDeviceAddress
   _LORAWAN_SetNetworkSessionKey
     _memcpy
   _SYSTEM_Initialize
     _EUSART1_Initialize
       _EUSART1_SetErrorHandler
       _EUSART1_SetFramingErrorHandler
       _EUSART1_SetOverrunErrorHandler
       _EUSART1_SetRxInterruptHandler
       _EUSART1_SetTxInterruptHandler
     _EXT_INT_Initialize
       _INT1_SetInterruptHandler
       _INT2_SetInterruptHandler
     _INTERRUPT_Initialize
     _LORAWAN_PlatformInit
       _DIO0_ISR_Lora_Init
         _INT1_SetInterruptHandler
       _DIO1_ISR_Lora_Init
         _INT2_SetInterruptHandler
       _DIO2_ISR_Lora_Init
         _IOCB4_SetInterruptHandler
       _DIO3_ISR_Lora_Init
       _DIO4_ISR_Lora_Init
       _DIO5_ISR_Lora_Init
       _SystemTimerInit
       _TMR_ISR_Lora_Init
         _TMR1_SetInterruptHandler
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
       _IOCB4_SetInterruptHandler
     _SPI2_Initialize
     _TMR1_Initialize
       _TMR1_SetInterruptHandler
     _TMR5_Initialize
   _TMR5_HasOverflowOccured
   ___aldiv
     ___almod (ARG)
   ___almod
   ___awdiv
     ___awmod (ARG)
   ___awmod

 _INTERRUPT_InterruptManager (ROOT)
   Absolute function(Fake) *
   _EUSART1_Receive_ISR *
     Absolute function(Fake) *
     _EUSART1_DefaultErrorHandler *
       _EUSART1_RxDataHandler
     _EUSART1_DefaultFramingErrorHandler *
     _EUSART1_DefaultOverrunErrorHandler *
     _EUSART1_Read *
     _EUSART1_RxDataHandler *
     _strncat *
   _EUSART1_Transmit_ISR *
   _INT1_ISR *
     _INT1_CallBack
       Absolute function(Fake) *
       _DIO0_ISR_Lora *
       _INT1_DefaultInterruptHandler *
   _INT2_ISR *
     _INT2_CallBack
       Absolute function(Fake) *
       _DIO1_ISR_Lora *
       _INT2_DefaultInterruptHandler *
   _PIN_MANAGER_IOC *
     _IOCB4_ISR
       Absolute function(Fake) *
       _DIO2_ISR_Lora *
       _IOCB4_DefaultInterruptHandler *
   _TMR1_ISR *
     _TMR1_CallBack
       Absolute function(Fake) *
       _TMR1_DefaultInterruptHandler *
       _TMR_ISR_lora *
         i2_SwTimersInterrupt
           i2_TMR_GetDeltaTime
             i2_TMR1_ReadTimer
         i2_TMR_SwapTimer
           i2_TMR1_ReadTimer
           i2_TMR1_WriteTimer
     i2_TMR1_WriteTimer

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F37      0     21E      37       13.9%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0      80      16       50.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0      F0      14       93.8%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0      F7      11       96.5%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0      FF       9       99.6%
BITBANK1           100      0       0       6        0.0%
BANK1              100     6E     100       7      100.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     9F      9F       5       99.4%
BITCOMRAM           53      0       0       0        0.0%
COMRAM              53     3D      4B       1       90.4%
BITBANK15           38      0       0      35        0.0%
BANK15              38      0       0      36        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       2       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     550      12        0.0%
DATA                 0      0     770       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Fri Aug 28 16:50:07 2020

                                        ??_LORAWAN_TxDone 00BD  
                              __end_of_DIO3_ISR_Lora_Init 95F0  
                                _eusart1TxBufferRemaining 01FF  
                                      ?_LORAWAN_RxTimeout 0001  
                                                       _n 0200  
                        __size_of_RADIO_FHSSChangeChannel 0040  
                                          HALSPISend@data 0061  
                         __end_of_ValidateChannelMaskCntl 919C  
                                                      l20 2394  
                                                      l13 22A8  
                                                      l30 2486  
                                                      l22 23C6  
                                                      l15 2356  
                                                      l40 5B26  
                                                      l24 23E8  
                                                      l16 231C  
                                                      l33 256C  
                                                      l25 23FC  
                                                      l17 22D4  
                                                      l42 5B4E  
                                                      l26 240C  
                                                      l51 81EE  
                                                      l52 81A6  
                                                      l44 5BA2  
                                                      l28 2524  
                                                      l29 2478  
                                                      l46 5BCA  
                                                      l77 9338  
                                            ___awdiv@sign 006B  
                         __size_of_UpdateJoinSuccessState 013E  
                                     ___wmul@multiplicand 0062  
                      __size_of_IOCB4_SetInterruptHandler 000A  
                                            _TMR_ISR_lora 853E  
                                   __end_of_AESEncodeLoRa 8C86  
                                             ?_RADIO_DIO0 0001  
                                             ?_RADIO_DIO1 0001  
                                             ?_RADIO_DIO2 0001  
                                             ?_RADIO_DIO3 0001  
                                             ?_RADIO_DIO4 0001  
                                             ?_RADIO_DIO5 0001  
                              ?_IOCB4_SetInterruptHandler 0060  
                                            __CFG_CP0$OFF 000000  
                                            __CFG_CP1$OFF 000000  
                                            __CFG_CP2$OFF 000000  
                                            __CFG_CP3$OFF 000000  
                                             __CFG_LVP$ON 000000  
                                     ??_LORAWAN_RxTimeout 00C2  
                                                     l200 66F0  
                                                     l201 66FE  
                                                     l210 67A0  
                                                     l202 6730  
                                                     l300 4322  
                                                     l205 6750  
                                                     l214 4B5E  
                                                     l206 675E  
                                                     l230 1680  
                                                     l302 433C  
                                                     l215 4B74  
                                                     l231 15E4  
                                                     l303 43AE  
                                                     l160 6404  
                                                     l208 676C  
                                                     l232 1698  
                                                     l304 447E  
                                                     l320 6A08  
                                                     l217 4BA8  
                                                     l209 6798  
                                                     l233 160C  
                                                     l401 87B2  
                                                     l242 1716  
                                                     l234 1634  
                                                     l306 4408  
                                                     l330 71B0  
                                                     l322 6A5C  
                                                     l402 87B8  
                                                     l171 64A0  
                                                     l251 18DE  
                                                     l235 166C  
                                                     l331 71AA  
                                                     l172 6492  
                                                     l164 641E  
                                                     l260 1A06  
                                                     l228 193A  
                                                     l252 18EA  
                                                     l244 1792  
                                                     l236 16C4  
                                                     l316 6A58  
                                                     l404 87D2  
                                                     l412 85D4  
                                                     l173 6496  
                                                     l261 1A12  
                                                     l253 1914  
                                                     l237 1712  
                                                     l229 16B2  
                                                     l333 71B2  
                                                     l413 85C6  
                                                     l166 6466  
                                                     l254 192C  
                                                     l334 71C8  
                                                     l175 64CE  
                                                     l167 6448  
                                                     l247 17B2  
                                                     l327 7172  
                                                     l319 6A26  
                                                     l168 6454  
                                                     l256 19B0  
                                                     l280 410E  
                                                     l272 4034  
                                                     l328 7154  
                                                     l344 6028  
                                                     l257 19E2  
                                                     l249 1892  
                                                     l353 5DD0  
                                                     l417 85CC  
                                                     l258 19C2  
                                                     l274 404C  
                                                     l275 4066  
                                                     l276 40D2  
                                                     l380 768A  
                                                     l452 8C4A  
                                                     l277 40EA  
                                                     l293 426C  
                                                     l381 7676  
                                                     l446 74B6  
                                                     l286 424E  
                                                     l278 40FC  
                                                     l390 76BE  
                                                     l199 6740  
                                                     l279 4128  
                                                     l295 4284  
                                                     l383 767C  
                                                     l375 8B4A  
                                                     l455 889C  
                                                     l288 41D8  
                                                     l296 429A  
                                                     l384 7682  
                                                     l297 42A6  
                                                     l369 8CD0  
                                                     l393 76C6  
                                                     l298 42D4  
                                                     l386 76CE  
                                                     l458 88AE  
                                                     l299 4300  
                                                     l387 769C  
                                                     l388 76AE  
                                             ?_RADIO_Init 0079  
                                                     l398 87C0  
                                                     l399 87AC  
                                                     l577 8D5C  
                                                     l771 6E40  
                                                     l772 6E50  
                                                     l749 743C  
                                                     l777 6EBC  
                                                     l769 6E18  
                                         ??_UpdateTxPower 0060  
                                            __CFG_CPB$OFF 000000  
                                            __CFG_CPD$OFF 000000  
                    __end_of_SelectChannelForTransmission 7ECA  
                   __size_of_SelectChannelForTransmission 006C  
                            _SelectChannelForTransmission 7E5E  
                                      _RADIO_Transmit$517 00B8  
                                      _RADIO_Transmit$518 00BC  
                                  _ExecuteRxParamSetupReq 448A  
                                      _DIO2_ISR_Lora_Init 9432  
                                      __size_of_AESEncode 034A  
                                         _timer1ReloadVal 01FD  
                                         ?_EncKeySchedule 0060  
                                                     _sub 0500  
                                            ___awmod@sign 0065  
                                   _RADIO_SetLoRaSyncWord 9572  
                                                     prod 000FF3  
                                                     tosl 000FFD  
                                                     wreg 000FE8  
                                              _TXSTA1bits 000FAC  
                                         __end_of_AESCmac 25E8  
                                 __end_of_SwTimersExecute 699E  
                                  SystemBlockingWaitMs@ms 0060  
                                 LORAWAN_Join@bufferIndex 00DB  
                                __size_of_RADIO_GetStatus 0006  
                                   ?_SystemBlockingWaitMs 0060  
                                    ??i2_TMR_GetDeltaTime 000D  
                                ??_SearchAvailableChannel 00B2  
                            __end_of_FindSmallestDataRate 6C42  
                     __end_of_RADIO_SetFrequencyHopPeriod 9568  
                             _RADIO_SetFrequencyHopPeriod 955E  
                                              _CheckFlags 8378  
                                           _first1decimal 0118  
                                  ?_TMR_OverrideRemaining 006A  
                                           _INT1_CallBack 927C  
                                           _first2decimal 0116  
                                ?_AssembleEncryptionBlock 006B  
                                     ?_DIO2_ISR_Lora_Init 0001  
                                       ??_UpdateFrequency 0064  
                                           _first3decimal 0114  
                                      __size_of_IOCB4_ISR 0020  
                                                    l1032 58F6  
                                                    l1024 58A2  
                                                    l1200 0A24  
                                                    l1025 5894  
                                                    l2001 4880  
                                                    l1201 0A32  
                                                    l1026 5860  
                                                    l1202 0B96  
                                                    l1027 5890  
                                                    l1203 0B00  
                                                    l1043 708C  
                                                    l1124 65D2  
                                                    l2020 51F0  
                                                    l1125 64F8  
                                                    l2005 73BE  
                                                    l1301 1E72  
                                                    l2013 92CA  
                                                    l1221 0CF0  
                                                    l1213 0C5A  
                                                    l1205 0B90  
                                                    l1045 7110  
                                                    l1126 6566  
                                                    l1302 1BD6  
                                                    l2110 8334  
                                                    l1222 0CF4  
                                                    l1127 65CE  
                                                    l1311 1D50  
                                                    l1303 1C44  
                                                    l1231 828E  
                                                    l1207 0C66  
                                                    l1151 010A  
                                                    l3000 792E  
                                                    l1312 1DBE  
                                                    l1304 1C8A  
                                                    l1232 82B4  
                                                    l2120 7E02  
                                                    l2112 835E  
                                                    l1240 358E  
                                                    l1208 0C60  
                                                    l1160 0200  
                                                    l1152 0158  
                                                    l1048 6DE4  
                                                    l1072 53D0  
                                                    l2025 7EC4  
                                                    l1305 1CD0  
                                                    l1241 34A0  
                                                    l1153 015C  
                                                    l1057 6DF4  
                                                    l3002 794C  
                                                    l1314 1E06  
                                                    l1306 1CD4  
                                                    l2050 5A2A  
                                                    l1242 34B6  
                                                    l2018 51F4  
                                                    l1162 0D0C  
                                                    l2043 78C8  
                                                    l3003 7944  
                                                    l1403 50DA  
                                                    l1323 6B7E  
                                                    l1315 1E10  
                                                    l1307 1D30  
                                                    l2051 5A92  
                                                    l1243 34CC  
                                                    l2019 50FC  
                                                    l1227 0D50  
                                                    l1155 01EE  
                                                    l1404 5094  
                                                    l1332 6C3C  
                                                    l1324 6BFE  
                                                    l2060 55AC  
                                                    l2124 7E54  
                                                    l1244 34E2  
                                                    l1148 0D12  
                                                    l1180 05F2  
                                                    l3020 7D68  
                                                    l3012 7D24  
                                                    l1325 6B84  
                                                    l1261 1F0A  
                                                    l2061 561A  
                                                    l2125 7E26  
                                                    l2109 8374  
                                                    l1245 34F8  
                                                    l1237 32FA  
                                                    l1165 06FC  
                                                    l1181 06A0  
                                                    l1173 0528  
                                                    l1149 02AA  
                                                    l3021 7D76  
                                                    l3013 7D30  
                                                    l2038 783E  
                                                    l3006 796C  
                                                    l1326 6BFC  
                                                    l1262 1F14  
                                                    l2062 5682  
                                                    l2126 7E36  
                                                    l2118 7E1A  
                                                    l1238 3552  
                                                    l1246 350E  
                                                    l1174 056C  
                                                    l1166 032C  
                                                    l1094 61DC  
                                                    l3007 7976  
                                                    l1271 1FFA  
                                                    l2127 7E42  
                                                    l2119 7E10  
                                                    l1247 3524  
                                                    l1239 348A  
                                                    l1167 043C  
                                                    l2143 32E0  
                                                    l3015 7D46  
                                                    l1360 838E  
                                                    l3008 7984  
                                                    l1328 6C20  
                                                    l1280 219A  
                                                    l1272 2008  
                                                    l1264 1FF8  
                                                    l2048 5A96  
                                                    l1248 35AE  
                                                    l1336 7C02  
                                                    l1184 0742  
                                                    l1176 05C4  
                                                    l1168 04F8  
                                                    l3016 7D3E  
                                                    l1361 83A4  
                                                    l1273 202A  
                                                    l1265 1FB0  
                                                    l2049 59BC  
                                                    l2073 809E  
                                                    l1169 04E0  
                                                    l1362 83BA  
                                                    l2058 55A6  
                                                    l2090 90F0  
                                                    l1194 0974  
                                                    l1186 085E  
                                                    l1178 05E0  
                                                    l1371 7AEC  
                                                    l1291 1E74  
                                                    l1267 1FF4  
                                                    l2059 5686  
                                                    l1347 8B08  
                                                    l1195 0990  
                                                    l3019 7D5E  
                                                    l1612 2CB2  
                                                    l1284 4E26  
                                                    l1292 1A44  
                                                    l1276 203C  
                                                    l2084 88F4  
                                                    l1188 0934  
                                                    l1525 4D28  
                                                    l1621 2E22  
                                                    l1373 7B02  
                                                    l1381 7050  
                                                    l1277 20A8  
                                                    l2069 936E  
                                                    l1197 09BC  
                                                    l1189 091C  
                                                    l1526 4DBE  
                                                    l1286 4E7C  
                                                    l1374 7B16  
                                                    l1278 2132  
                                                    l2078 80CC  
                                                    l1535 87E4  
                                                    l1543 8D9C  
                                                    l1631 2E84  
                                                    l1623 2E2C  
                                                    l1615 2CEC  
                                                    l1367 7AD2  
                                                    l1199 09CE  
                                                    l1544 8D7E  
                                                    l1632 2FAC  
                                                    l1296 1E36  
                                                    l2096 9198  
                                                    l1553 7764  
                                                    l1641 39CA  
                                                    l1625 2E4E  
                                                    l1377 7052  
                                                    l1297 1ADA  
                                                    l2370 940A  
                                                    l1618 2D52  
                                                    l3250 8A00  
                                                    l1378 6FA4  
                                                    l1386 6664  
                                                    l1298 1B48  
                                                    l1627 2E58  
                                                    l1299 1B8E  
                                                    l2540 8BEC  
                                                    l3260 82CC  
                                                    l1812 499C  
                                                    l1900 262E  
                                                    l2541 8C10  
                                                    l1549 7762  
                                                    l1629 2E7A  
                                                    l3245 89DE  
                                                    l1397 5040  
                                                    l2542 8C0E  
                                                    l3182 7A44  
                                                    l1806 8210  
                                                    l3246 89D6  
                                                    l1398 4F8C  
                                                    l1910 272E  
                   RADIO_WriteConfiguration@symbolTimeout 00A6  
                                                    l3183 7A38  
                                                    l1807 8214  
                                                    l1639 39C0  
                                                    l1399 4FD2  
                                                    l1903 26E6  
                                                    l1583 698E  
                                                    l1592 62CA  
                                                    l3192 7FBC  
                                                    l1904 26AE  
                                                    l1584 68BE  
                                                    l3265 8DC8  
                                                    l1593 6208  
                                                    l1569 7614  
                                                    l3193 7FB0  
                                                    l3249 89F6  
                                                    l3266 8DB6  
                                                    l3186 7A78  
                                                    l1914 2866  
                                                    l3259 8306  
                                                    l1595 6264  
                                                    l2627 91F0  
                                                    l3187 7A86  
                                                    l1915 276E  
                                                    l1587 698A  
                                                    l3196 7FE4  
                                                    l1836 8454  
                                                    l1908 28E0  
                                                    l1916 2862  
                                                    l2900 71EC  
                                                    l1597 62C8  
                                                    l3197 7FF2  
                                                    l1925 9386  
                                                    l1909 2766  
                                                    l2901 7200  
                                                    l1942 3814  
                                                    l1838 8484  
                                                    l1871 118C  
                                                    l1943 3690  
                                                    l2903 721E  
                                                    l1880 13D4  
                                                    l1944 36E2  
                                                    l1960 3C86  
                                                    l2904 7212  
                                                    l1865 14C4  
                                                    l1881 14AC  
                                                    l1937 867E  
                                                    l1929 8F3E  
                                                    l1945 3720  
                                                    l1961 3DB2  
                                                    l1874 1230  
                                                    l1866 0F28  
                                                    l1938 868A  
                                                    l1962 3D4A  
                                                    l2818 29AE  
                                                    l2843 84F8  
                                                    l1883 1438  
                                                    l1947 37FA  
                                                    l1963 3D3C  
                                                    l1971 4558  
                                                    l2907 7246  
                                                    l2819 29C2  
                                                    l2844 850C  
                                                    l1980 5F60  
                                                    l1868 1046  
                                                    l1972 4598  
                                                    l2908 7254  
                                                    l1981 5E9A  
                                                    l1869 1222  
                                                    l1949 389E  
                                                    l1957 3C48  
                                                    l1973 45D8  
                                                    l2909 726A  
                                                    l1878 1336  
                                                    l1966 3DA0  
                                                    l1974 4694  
                                                    l1894 2918  
                                                    l2862 8058  
                                                    l1991 5F96  
                                                    l1983 5F5A  
                                                    l1879 1356  
                                                    l1967 3DAE  
                                                    l1895 2624  
                                                    l2863 8060  
                                                    l2855 8018  
                                                    l1992 5F9A  
                                                    l1888 14F8  
                                                    l1896 2612  
                                                    l2856 8022  
                                                    l1985 5F5C  
                                                    l2858 8038  
                                                    l2890 6F2E  
                                                    l1979 5E94  
                                                    l2859 8032  
                                                    l2891 6F22  
                                                    l1989 5F7C  
                                                    l1997 46BC  
                                                    l2894 6F62  
                                                    l1999 4872  
                                                    l2895 6F70  
                                                    l2887 6EE8  
                                                    l2896 6F86  
                                                    l2888 6F00  
                                           _first4decimal 0112  
                                                    l2999 791E  
                                                    l9303 5BC2  
                                                    l9285 5B46  
                                                    l8807 2CAA  
                                                    l9711 247E  
                                                    l8761 82CC  
                                                    l9537 6688  
                                                    l8835 2D4A  
                                                    l8819 2CE4  
                                                    l9731 2564  
                                                    l8875 2FA4  
                                                    l9675 238C  
                                                    l9907 4FCA  
                                                    l8973 8DB6  
                                                    l8893 87FE  
                                                    l9695 2404  
                                        _RADIO_WritePower 66D4  
                                                    l9991 705E  
                            ??_LORAWAN_SetChannelIdStatus 0065  
                                 _PrepareJoinRequestFrame 4DD0  
                                                    _LATA 000F89  
                                                    _LATB 000F8A  
                                                    _LATC 000F8B  
                                                    _LATD 000F8C  
                                                    _LATE 000F8D  
                                           _first5decimal 0110  
                                                    u8100 64C2  
                                                    u8210 7794  
                                                    u9100 25B2  
                                                    u9030 2400  
                                                    u8230 77BC  
                                            ?_RADIO_Reset 0001  
                                                    u9050 2452  
                                                    u8250 77E2  
                                                    u8420 89E2  
                                                    u9300 6C0A  
                                                    u9205 43F6  
                                                    u8270 7528  
                                                    u9070 24EC  
                                                    u9215 441A  
                                                    u7800 2F92  
                                                    u7720 2CDE  
                                                    u9240 8F32  
                                                    u8441 5ACC  
                                                    u8610 1764  
                                                    u8530 16AC  
                                                    u9250 8F3A  
                                                    u7820 2FD8  
                                                    u7740 2D30  
                                                    u9340 6C34  
                                                    u7670 82EE  
                                                    u8470 5B7A  
                                                    u9510 5F82  
                                                    u9190 43CE  
                                                    u8535 16A2  
                                                    u9175 435C  
                                                    u7920 7FC0  
                                                    u8560 16FC  
                                                    u7690 94B0  
                                                    u8635 17CC  
                                                    u8580 170C  
                              __size_of_RADIO_ReceiveStop 0020  
                                                    u9540 7012  
                                                    u9380 503E  
                                                    u8820 90EC  
                                                    u7677 82E4  
                                                    u7950 81EA  
                                                    u9550 705E  
                                                    u8910 7950  
                                                    u7960 81EC  
                                                    u7890 7A48  
                                                    u9490 5F6E  
                                                    u9660 1D18  
                                                    u9580 1AD8  
                                                    u9740 80C8  
                                                    u8960 22BA  
                                                    u8945 228A  
                                                    u8970 22BC  
                                                    u9690 1E80  
                                                    u9930 8370  
                                                    u9770 88EE  
                                                    _TMR1 000FCE  
                                                    _TMR5 000F4F  
                                       ??_UpdateDutyCycle 0062  
                                                    _WPUB 000F61  
                                  ??_LORAWAN_PlatformInit 0062  
                                           _INT2_CallBack 925C  
                                           _EUSART1_Write 8BD6  
                                ??_InitDefault433Channels 006B  
                                ExecuteNewChannel@drRange 00AA  
                                      _PrepareSessionKeys 727C  
                                                    _loRa 0206  
                                                    _main 294C  
                                                    _cout 03A0  
                                                    _rand 83D6  
                                           ?_EUSART1_Read 0001  
                          __end_of_UpdateMinMaxChDataRate 65E0  
                                                    fsr0h 000FEA  
                                                    fsr1h 000FE2  
                                                    indf0 000FEF  
                                                    fsr2h 000FDA  
                                                    fsr0l 000FE9  
                                                    indf2 000FDF  
                                                    fsr1l 000FE1  
                                                    fsr2l 000FD9  
                                 __size_of_RADIO_Transmit 0238  
                                                    btemp 003E  
                                           __CFG_BORV$190 000000  
                          __size_of_StopAllSoftwareTimers 0052  
                                           ComputeMic@mic 00CC  
                                           ComputeMic@key 00C7  
                               __end_of_LORAWAN_RxTimeout 294C  
                               __size_of_ConfigureRadioRx 002A  
                               __size_of_ConfigureRadioTx 0052  
                       __size_of_INT2_SetInterruptHandler 000A  
                           __end_of_StopAllSoftwareTimers 8738  
                               ?_INT2_SetInterruptHandler 0060  
                                                    prodh 000FF4  
                                                    prodl 000FF3  
                                                    start 00CC  
                                         _timer5ReloadVal 03E3  
                                           __CFG_IESO$OFF 000000  
                                __end_of_CountfOptsLength 7062  
                                   ExecuteLinkAdr@txPower 0075  
                                     __size_of_HALSPISend 000E  
                              ??_TMR1_SetInterruptHandler 0062  
                              EnableChannels1@channelMask 0064  
                                        ??_AssemblePacket 00CC  
                                  ?_HALResetPinMakeOutput 0001  
                                     ?_PrepareSessionKeys 006B  
                                  __size_of_TMR_SwapTimer 004A  
                              __end_of_RADIO_GetPacketSnr 95A4  
                                            ___param_bank 000000  
                                              _GetRx1Freq 93DC  
                              __size_of_RADIO_ReleaseData 0006  
                                    ??_DIO2_ISR_Lora_Init 0062  
                         __end_of_CreateAllSoftwareTimers 878A  
                  SearchAvailableChannel@transmissionType 00AF  
                         __size_of_HALResetPinOutputValue 001A  
                                   MacExecuteCommands@ptr 00B6  
                                   _RADIO_WriteFSKBitRate 7F34  
                                __size_of_SystemTimerInit 0008  
                                        __end_of_INT1_ISR 959E  
                                        __end_of_INT2_ISR 9596  
                          __size_of_OSCILLATOR_Initialize 000E  
                                  ExecuteLinkAdr@dataRate 0078  
                           __end_of_OSCILLATOR_Initialize 948E  
                      __size_of_LORAWAN_LinkCheckCallback 016C  
                                                   l11001 353A  
                                                   l10411 1FB0  
                                                   l10423 1FF2  
                                                   l12201 7836  
                                                   l10409 1FAC  
                                                   l11401 09BC  
                                                   l12123 616C  
                                                   l10189 832C  
                                                   l11245 0528  
                                                   l12119 6166  
                                                   l12217 78C0  
                                                   l11505 0CEA  
                                                   l12049 708E  
                                                   l10801 6DEC  
                                                   l12073 52A2  
                                                   l12129 6196  
                                                   l11267 05C4  
                                         __end_of___abdiv 806A  
                                                   l12067 5284  
                                                   l12083 52D6  
                                                   l12139 61D8  
                                                   l12149 7CD2  
                                                   l12245 30D8  
                                                   l12237 301C  
                                                   l10743 6E40  
                                                   l10823 5C7E  
                                                   l12247 30F2  
                                                   l12255 318E  
                                                   l12433 4E1E  
                                                   l12089 5334  
                                                   l11379 0974  
                                                   l12267 323C  
                                                   l10829 5D1A  
                                                   l12447 4E74  
                                                   l11647 1228  
                                                   l10793 6DCE  
                                                   l10869 46B4  
                                                   l10797 6DDC  
                                                   l12399 74AE  
                                                   l12909 8BDA  
                                   _eusart1RxStatusBuffer 004E  
                                         __end_of___aldiv 6F98  
                                         __end_of___almod 727C  
                                                   ?_main 0001  
                                                   ?_rand 00A6  
                                         __end_of___awdiv 798E  
                                              _FillSubKey 8196  
                                         __end_of___awmod 7D80  
                       __end_of_IOCB4_SetInterruptHandler 94C8  
                                           ?_RADIO_SetCRC 0001  
                                         __end_of___lldiv 7A98  
                                         RADIO_Transmit@i 00C1  
                                                   u10040 419E  
                                                   u11010 7BB6  
                                                   u10055 41C6  
                                                   u10065 41EA  
                                                   u11130 35D6  
                                                   u10180 201E  
                                                   u11205 5218  
                                                   u11048 7BEA  
                                                   u11400 042C  
                                                   u11320 01E8  
                                                   u11049 7BFE  
                                                   u10258 7C82  
                                         ___awdiv@divisor 0068  
                                                   u11350 02C6  
                                                   u13030 52B0  
                                                   u12055 265A  
                                                   u12320 1144  
                                                   u10384 866E  
                                                   u10480 3C18  
                                                   u12128 2752  
                                                   _T1CON 000FCD  
                                         __end_of___llmod 8004  
                                                   u10385 8668  
                                                   u12330 1162  
                                                   u11290 01CC  
                                                   u12218 2904  
                                                   u11371 0304  
                                                   u12420 13D8  
                                                   u12340 11C2  
                                                   u11540 0632  
                                                   u10805 5C6E  
                                                   u11518 05A0  
                                                   u12238 2938  
                                                   u12078 26D2  
                                                   u13070 52EC  
                                                   u12335 1158  
                                                   u11519 05B4  
                                                   u10815 5C90  
                                                   u12440 1400  
                                                   u10920 4886  
                                                   u11448 04BC  
                                                   u12345 11B6  
                                                   u12265 0DEC  
                                                   u11449 04D0  
                                                   u11730 0A66  
                                                   u11570 0726  
                                                   u13170 6160  
                                                   u12275 0E70  
                                                   u12195 2882  
                                                   u11900 0CB6  
                                       ??_EnableChannels1 0069  
                                                   u12285 0F62  
                                                   u13085 5324  
                                                   u12518 1518  
                                                   u10950 7ACE  
                                                   u11830 0C24  
                                                   u11590 0842  
                                                   u12550 8046  
                                                   u10758 6DBA  
                                                   u13238 61C4  
                                                   u10838 5D28  
                                                   u10790 5C36  
                                                   u12455 1426  
                                                   u12295 0FE6  
                                                   u10775 7D9E  
                                                   u13095 5346  
                                                   u10839 5D3C  
                                                   u13600 74E8  
                                                   u11648 08EC  
                                                   u11568 06D8  
                                                   u11488 0548  
                                                   u13440 31E6  
                                                   _LATC2 007C5A  
                                                   u12465 144A  
                                                   u11649 0900  
                                                   u11569 06EC  
                                                   u11489 055C  
                                                   u12810 5D8E  
                                                   u10858 8D38  
                                                   u14250 94A4  
                                                   u14410 7D4A  
                                    RxJoinResponse@status 0001  
                                                   _LATD3 007C63  
                                                   u13620 4E6A  
                                                   u12820 5DA6  
                                                   u12830 5E0E  
                                                   u13278 7CF6  
                                                   u13198 6190  
                                                   u14350 7222  
                                                   u13279 7D0A  
                                                   u13455 322C  
                                                   u13640 4EC0  
                                                   u12680 69E0  
                                                   u12760 5FE6  
                       __end_of_AckRetransmissionCallback 61E2  
                  SearchAvailableChannel@randomNumberCopy 00B6  
                                                   u12825 5D9A  
                                                   u13465 3256  
                                                   u12498 14E4  
                                                   u12770 5FFE  
                                                   u14290 6F32  
                                                   u12835 5E02  
                                                   u12940 58BC  
                                                   u11868 0C92  
                                                   u12780 6066  
                                                   u11869 0CA6  
                                                   u13565 8C94  
                                                   u11958 0D3C  
                                                   u11798 0BFE  
                                                   u11799 0C12  
                                                   u12775 5FF2  
                                                   u13495 7658  
                                                   u11968 0D66  
                                                   _T5CON 000F4E  
                                                   u12785 605A  
                                                   u12955 58E4  
                                                   u12965 5908  
                                          __CFG_DEBUG$OFF 000000  
                                                   u17177 2A20  
                                                   u17187 8D86  
                                                   u16728 6976  
                                                   u16729 6988  
                                         __end_of___lwmod 8A0A  
                                           ?_RADIO_RxDone 0001  
                                         ___awdiv@counter 006A  
                             __size_of_RADIO_ReceiveStart 0230  
                     __size_of_LORAWAN_SetChannelIdStatus 005A  
                                           ?_RADIO_TxDone 0001  
                                                   _TMR1H 000FCF  
                                                   _TMR1L 000FCE  
                                                   _TMR5H 000F50  
                                                   _TMR5L 000F4F  
                                                   _TRISA 000F92  
                                                   _TRISB 000F93  
                                                   _TRISC 000F94  
                                                   _TRISD 000F95  
                                                   _TRISE 000F96  
                                                   _TXREG 000FAD  
                                __size_of_RADIO_RxTimeout 002E  
                                           __CFG_WRT0$OFF 000000  
                                           __CFG_WRT1$OFF 000000  
                           ?_SelectChannelForTransmission 0001  
                                           __CFG_WRT2$OFF 000000  
                                     ___lmul@multiplicand 009E  
                                           __CFG_WRT3$OFF 000000  
                                          _RxJoinResponse 95F0  
                                 ?_SetReceptionNotOkState 0001  
                                    _EUSART1_Transmit_ISR 8DDC  
                                          __CFG_EBTR0$OFF 000000  
                                          __CFG_FCMEN$OFF 000000  
                                          __CFG_EBTR1$OFF 000000  
                                          __CFG_EBTR2$OFF 000000  
                                          __CFG_EBTR3$OFF 000000  
                                    ??_PrepareSessionKeys 0071  
                                        __end_of_TMR1_ISR 93DC  
                               FindSmallestDataRate@found 0061  
                                           __CFG_WRTB$OFF 000000  
                                           __CFG_WRTC$OFF 000000  
                                           __CFG_WRTD$OFF 000000  
                                          ?_INT1_CallBack 0001  
                                  LORAWAN_RxTimeout@minim 00C6  
                             __size_of_RADIO_SetBandwidth 000A  
                                          __CFG_EBTRB$OFF 000000  
                          __size_of_RADIO_WatchdogTimeout 0046  
                                                   _datax 014D  
                                                   __rcon 0052  
                                 __end_of_PIN_MANAGER_IOC 9586  
                            ??_IncludeMacCommandsResponse 0065  
                           __end_of_RADIO_WatchdogTimeout 88B2  
      RADIO_WriteFSKFrequencyDeviation@frequencyDeviation 006D  
                          ??_INT1_DefaultInterruptHandler 0001  
                               __size_of_ValidateDataRate 0018  
                                                   _randx 02FB  
                          LORAWAN_RxDone@frmPayloadLength 00F0  
                           ValidateChannelMaskCntl@result 0060  
                                      __CFG_MCLRE$EXTMCLR 000000  
                                                   _srand 9462  
                                        UpdateDataRange@i 0063  
                                LORAWAN_RxDone@joinAccept 00EE  
                                  _UpdateJoinSuccessState 5C08  
                                          ?_INT2_CallBack 0001  
                                _INT1_SetInterruptHandler 94D2  
                                          ?_EUSART1_Write 0001  
                                              _ComputeMic 8134  
                                 __end_of_TMR1_Initialize 8EEE  
                                  UpdateCfList@joinAccept 00A6  
                                                   pclath 000FFA  
                                                   tablat 000FF5  
                                                   ltemp0 003E  
                                 RADIO_WriteFrequency@num 0075  
                                                   ltemp1 0042  
                                                   ltemp2 0046  
                          __size_of_UpdateCurrentDataRate 000A  
                          __size_of_UpdateChannelIdStatus 0166  
                              PrepareSessionKeys@appNonce 006D  
                                  UpdateChannelIdStatus@i 0063  
                           __end_of_UpdateCurrentDataRate 9522  
                            __size_of_RADIO_FSKPacketSent 012E  
                           __end_of_UpdateChannelIdStatus 56AC  
                                          ??_EUSART1_Read 0001  
                                                   plusw0 000FEB  
                                                   plusw1 000FE3  
                                                   plusw2 000FDB  
                                                   ttemp0 003E  
                                                   ttemp1 0041  
                                                   ttemp2 0044  
                                                   ttemp3 0047  
                                UpdateFrequency@channelId 0064  
                                                   status 000FD8  
                                                   wtemp0 003E  
                                                   wtemp1 0040  
                                                   wtemp2 0042  
                                                   wtemp3 0044  
                                                   wtemp4 0046  
                                                   wtemp5 0048  
                                                   wtemp6 003F  
                                      _MacExecuteCommands 32EA  
                                          __CFG_HFOFST$ON 000000  
                                UpdateCfList@channelIndex 00AD  
                                     __size_of_RADIO_DIO0 0090  
                                     __size_of_RADIO_DIO1 004E  
                                     __size_of_RADIO_DIO2 0056  
                                     __size_of_RADIO_DIO3 0022  
                                     __size_of_RADIO_DIO4 0032  
                                     __size_of_RADIO_DIO5 0028  
                                         __end_of_strncat 8134  
                      PrepareJoinRequestFrame@bufferIndex 00DA  
              __end_of_EUSART1_DefaultFramingErrorHandler 95FE  
             __size_of_EUSART1_DefaultFramingErrorHandler 0002  
                    ??_EUSART1_DefaultFramingErrorHandler 0001  
                     ?_EUSART1_DefaultFramingErrorHandler 0001  
                      _EUSART1_DefaultFramingErrorHandler 95FC  
                                         _TMR1_WriteTimer 91DC  
                       TMR_OverrideRemaining@oldReloadVal 0072  
                                     LORAWAN_RxDone@fPort 00DF  
                                __size_of_RADIO_WriteMode 00FE  
                                       __end_of_AESEncode 2FE4  
                                          __CFG_PBADEN$ON 000000  
                                     __size_of_RADIO_Init 01CA  
                        __end_of_RADIO_WriteConfiguration 1A2C  
                         ??_IOCB4_DefaultInterruptHandler 0001  
                                         _TMR5_Initialize 929C  
                            __size_of_RADIO_SetIQInverted 000A  
                               __size_ofi2_TMR1_ReadTimer 0020  
                               RADIO_WriteMode@dioMapping 0068  
                                         __initialization 6A82  
                            __size_ofi2_SwTimersInterrupt 0100  
                                        LORAWAN_Send@port 00D3  
                             __size_of_DIO1_ISR_Lora_Init 0010  
                                     ?_MacExecuteCommands 00B0  
                                       _SPI2_Exchange8bit 9400  
                              __end_of_EUSART1_Initialize 7B9A  
                                            __end_of_main 2C9A  
                              AssembleEncryptionBlock@dir 0072  
                                            __end_of_rand 8432  
                                       ?_TMR_GetDeltaTime 0068  
                                           AESCmac@padded 01BF  
                                __end_of_RADIO_ReadRandom 7518  
                                        _SetJoinFailState 8D1C  
                                 RADIO_WriteMode@blocking 0066  
                                    _UpdateJoinInProgress 930E  
                                    _ExecuteRxTimingSetup 8FBE  
                                       __end_of_IOCB4_ISR 925C  
                               __size_of_UpdateDLSettings 001C  
                                      ?_SPI2_Exchange8bit 0001  
                               __size_of_ValidateRxOffset 0018  
                             ?_INTERRUPT_InterruptManager 0001  
                                      ??_TMR_GetDeltaTime 006C  
                                           AESCmac@output 00BB  
                              i2TMR1_ReadTimer@readValLow 0008  
                            __end_of_RADIO_SetOutputPower 9536  
                                               ??_AESCmac 00C0  
                                          ??_RADIO_SetCRC 0060  
                                  MacExecuteCommands@done 00B5  
                                 InitDefault868Channels@i 006B  
                                                  ??_main 00F9  
                                                  ??_rand 00A8  
                                          ??_RADIO_RxDone 00F3  
                                          ??_RADIO_TxDone 00E3  
                                           __activetblptr 000003  
                                  ?_RADIO_SetLoRaSyncWord 0001  
                                  __end_of_RxJoinResponse 95F2  
                       __end_of_LORAWAN_LinkCheckCallback 53DA  
                          __end_of_SetReceptionNotOkState 7C18  
                             __end_of_UpdateReceiveDelays 8B18  
                         __end_of_AssembleEncryptionBlock 66D4  
                                __size_of_SPI2_Initialize 000E  
                                  ??_SystemBlockingWaitMs 0064  
                                        ??_StartReTxTimer 009A  
                                     ??_SPI2_Exchange8bit 0060  
                        CountfOptsLength@macCommandLength 0066  
                                   ?_EUSART1_Transmit_ISR 0001  
                                      EncodeShiftRow@temp 0062  
                                ??_InitDefault868Channels 006B  
                             __size_of_RADIO_RegisterRead 0028  
                                       ?_HALSPICSDeassert 0001  
                                        ?_SwTimersExecute 0001  
                                           _TMR_SwapTimer 87D8  
                                          _EnableChannels 92D6  
                               ??_PrepareJoinRequestFrame 00D0  
                                          _HALSPICSAssert 95DE  
                                    ??_MacExecuteCommands 00B3  
                                             ?_CheckFlags 0060  
                                 LORAWAN_TxDone@timeOnAir 00BB  
                                              _ExtractMic 848C  
                         __size_of_SearchAvailableChannel 012A  
                                      ??_HALSPICSDeassert 0060  
                                  _HALResetPinOutputValue 9328  
                                        ___llmod@dividend 0060  
                                        ___awdiv@dividend 0066  
                                                  ?_srand 0072  
                  __end_of_LORAWAN_ReceiveWindow1Callback 711A  
                 __size_of_LORAWAN_ReceiveWindow1Callback 00B8  
                          _LORAWAN_ReceiveWindow1Callback 7062  
                                                  _ANSELA 000F38  
                                                  _ANSELB 000F39  
                                                  _ANSELC 000F3A  
                                                  _ANSELD 000F3B  
                                                  _ANSELE 000F3C  
                                         _ValidateTxPower 8F18  
                                                  _T1GCON 000FCC  
                                                  _T5GCON 000F4D  
                                 SwTimerReadValue@timerId 0099  
                                 TMR1_WriteTimer@timerVal 0060  
                                          _ExecuteLinkAdr 35E0  
                  __end_of_LORAWAN_ReceiveWindow2Callback 6DF8  
                 __size_of_LORAWAN_ReceiveWindow2Callback 00D8  
                          _LORAWAN_ReceiveWindow2Callback 6D20  
                                                  i2l2171 8594  
                                                  i2l2251 0066  
                                                  i2l2244 0040  
                                                  i2l1525 54B8  
                                                  i2l1526 5534  
                                                  i2l2246 004C  
                                                  i2l1535 8A9E  
                                                  i2l2248 0058  
                                                  i2l2531 8826  
                                                  i2l2533 8862  
                                                  i2l3405 80DE  
                                                  i2l3406 80DA  
                                          __CFG_WDTEN$OFF 000000  
                                                  i2l3408 80FC  
                                                  i2l1592 63CC  
                                                  i2l3409 80EE  
                                                  i2l1593 630A  
                                                  i2l2554 3E5A  
                                                  i2l2546 8E08  
                                                  i2l2547 8E04  
                                                  i2l1595 6366  
                                                  i2l2627 9304  
                                                  i2l1597 63CA  
                                                  i2l2559 90CA  
                           __size_of_RADIO_SetFSKSyncWord 0030  
                                                  _RCREG1 000FAE  
                                                  _RCSTA1 000FAB  
                                                  _OSCCON 000FD3  
                                       ??_RADIO_GetStatus 0060  
                                                  _SPBRG1 000FAF  
                        __size_of_ValidateChannelMaskCntl 0020  
                                                  _TMR5IF 007BF1  
                         __size_of_InitDefault433Channels 008A  
                                                  _TRISC2 007CA2  
                                           ?_LORAWAN_Init 00B2  
                                           ?_LORAWAN_Join 0001  
                        AssembleEncryptionBlock@firstByte 0070  
                                           ?_LORAWAN_Send 00D3  
                         __size_of_AutomaticReplyCallback 0026  
                                                  _TXREG1 000FAD  
                              __size_of_LORAWAN_RxTimeout 0364  
                                                  _TXSTA1 000FAC  
                                       ?_ExecuteDevStatus 0060  
                              __end_of_DIO0_ISR_Lora_Init 9462  
                                __size_ofi2_TMR_SwapTimer 0044  
                                       ExecuteLinkAdr@ptr 006F  
                           __size_of_RADIO_WriteFrequency 00F0  
                                                  _STable FE67  
                             RADIO_WriteFrequency@num_mod 0071  
                                     LORAWAN_TxDone@delta 00D2  
                             __size_of_ComputeSessionKeys 0086  
                                               AESCmac@k1 019F  
                                               AESCmac@k2 018F  
                               __end_of_SPI2_Exchange8bit 9412  
                                     LORAWAN_TxDone@found 00D1  
                                         _CheckMcastFlags 7A98  
                                     LORAWAN_TxDone@minim 00DE  
                                      ??_ExecuteDevStatus 0062  
                                                  _Random 9138  
                                          __CFG_XINST$OFF 000000  
                                                  _RxData 95F2  
                                     LORAWAN_TxDone@ticks 00DA  
                      SearchAvailableChannel@randomNumber 00B9  
                    __end_of_TMR1_DefaultInterruptHandler 95F6  
                   __size_of_TMR1_DefaultInterruptHandler 0002  
                            _TMR1_DefaultInterruptHandler 95F4  
                                             ?_GetRx1Freq 0060  
                           ValidateDataRange@dataRangeNew 0063  
                                 _RADIO_FHSSChangeChannel 8B18  
                                               ??___abdiv 0061  
                                                  ___lmul 84E6  
                                  ?_RADIO_WriteFSKBitRate 006D  
                                               ??___aldiv 0072  
                                               ??___almod 0068  
                                   ?_UpdateJoinInProgress 0001  
                                                  ___wmul 8FE6  
                             ?_LORAWAN_LinkCheckConfigure 00A6  
                                   ?_ExecuteRxTimingSetup 0067  
                                               ??___awdiv 006A  
                                          __CFG_STVREN$ON 000000  
                                               ??___awmod 0064  
                                    _FindSmallestDataRate 6B64  
                                               ??___lldiv 0068  
                                               ??___llmod 0068  
                                               ??___lwmod 00AC  
                                                  _hexNum 03D0  
                      RADIO_SetChannelFrequency@frequency 0060  
                                         StartReTxTimer@i 00A2  
                                ?_EUSART1_SetErrorHandler 0060  
                               ExecuteRxParamSetupReq@ptr 00A6  
                                  __size_of_LORAWAN_Reset 01CE  
                                                  _memcpy 82BA  
                                                  _memset 8DAC  
                                                  clear_0 6B0A  
                                                  clear_1 6B1C  
                                                  clear_2 6B28  
                                                  clear_3 6B34  
                                                  clear_4 6B40  
                                                  clear_5 6B4C  
                                                  clear_6 6B58  
                                 SwTimerIsRunning@timerId 0060  
                                        ___awdiv@quotient 006C  
                                         ___awmod@divisor 0062  
                                         ___awmod@counter 0064  
                        ??_EUSART1_SetOverrunErrorHandler 0062  
                         ?_EUSART1_SetOverrunErrorHandler 0060  
                                                  _tosend 03B2  
                             __size_of_DIO5_ISR_Lora_Init 0002  
                                             ?_FillSubKey 0060  
                                       ?_SwTimerIsRunning 0001  
                                       ?_ExecuteLinkCheck 0060  
                                         ?_RxJoinResponse 0001  
                                ?_TMR5_HasOverflowOccured 0001  
                                 __size_of_EncodeShiftRow 0164  
                                  __end_of_EnableChannels 92F2  
                              ??_RADIO_UnhandledInterrupt 0064  
                                            ??_HALSPISend 0061  
                    __end_of_INT2_DefaultInterruptHandler 95FA  
                   __size_of_INT2_DefaultInterruptHandler 0002  
                            _INT2_DefaultInterruptHandler 95F8  
                                            __pdataCOMRAM 0054  
                                             RxData@pData 0060  
                                  __end_of_HALSPICSAssert 95E2  
                       __size_of_RADIO_SetSpreadingFactor 000A  
                            __size_of_ValidateChannelMask 005E  
                                           ??_SwTimerStop 0060  
                                         ??_INT1_CallBack 0001  
                                       ??_SystemTimerInit 0060  
                               ?_RADIO_SetSpreadingFactor 0001  
                                       ?_SwTimerReadValue 0091  
                                      ??_SwTimerIsRunning 0060  
                                          ?_TMR_SwapTimer 0068  
                         RADIO_FHSSChangeChannel@irqFlags 0079  
                                       ?_ExecuteDutyCycle 0060  
                                      ??_ExecuteLinkCheck 0062  
                                            __mediumconst FE66  
                                                  tblptrh 000FF7  
                                                  tblptrl 000FF6  
                                                  tblptru 000FF8  
                                                  srand@x 0072  
                                         ??_INT2_CallBack 0001  
                                      ??_SwTimerReadValue 0095  
                                         _UpdateDataRange 596E  
                                         ??_EUSART1_Write 0060  
                                  __end_of_ExecuteLinkAdr 38A8  
                                      ??_ExecuteDutyCycle 0062  
                TMR1_SetInterruptHandler@InterruptHandler 0060  
               IOCB4_SetInterruptHandler@InterruptHandler 0060  
                INT2_SetInterruptHandler@InterruptHandler 0060  
                INT1_SetInterruptHandler@InterruptHandler 0060  
                      __end_of_LORAWAN_SetChannelIdStatus 848C  
                              _LORAWAN_SetChannelIdStatus 8432  
                                        ?_PIN_MANAGER_IOC 0001  
                                           AESEncode@aux1 007A  
                                           AESEncode@aux2 0079  
                                           AESEncode@aux3 007B  
                                 __end_of_TMR1_WriteTimer 91FC  
                                   __end_of_SwTimerCreate 776A  
                                               ??_strncat 0007  
                                         _eusart1RxBuffer 0150  
                          ??_SelectChannelForTransmission 00BB  
                                             ?_ComputeMic 00C7  
                           __size_of_INTERRUPT_Initialize 0004  
                                   __end_of_TMR1_CallBack 921C  
                               ExecuteDutyCycle@maxDCycle 0065  
                                         _eusart1TxBuffer 0151  
                                       ??_RADIO_RxTimeout 00CB  
                                        ?_TMR1_Initialize 0001  
                                 __end_of_TMR5_Initialize 92BA  
                             UpdateFrequency@frequencyNew 0060  
                                       _SYSTEM_Initialize 905E  
                        __size_of_CreateAllSoftwareTimers 0052  
                                 __size_of_GenerateSubkey 014C  
                                          ??_LORAWAN_Init 00B6  
                                          ??_LORAWAN_Join 00DB  
                                          ??_LORAWAN_Send 00D7  
                          __size_of_RADIO_FSKPayloadReady 00B4  
                                              __accesstop 0060  
                                 __end_of__initialization 6B5E  
                           __end_of_RADIO_FSKPayloadReady 71CE  
                                          _RADIO_Transmit 4022  
                                               ?_INT1_ISR 0001  
                                               ?_INT2_ISR 0001  
                                    LORAWAN_RxDone@buffer 01F5  
                                  RADIO_ReadRandom@retVal 006F  
                                        _ConfigureRadioRx 8F6C  
                                    __size_of_RADIO_Reset 0046  
                                        _ConfigureRadioTx 8694  
                                     ExecuteDevStatus@ptr 0060  
                        ??_UpdateReceiveWindow2Parameters 0065  
                         ?_UpdateReceiveWindow2Parameters 0060  
                                      ?_SYSTEM_Initialize 0001  
                                    LORAWAN_RxDone@packet 00E8  
                                          _maxPayloadSize FF77  
                           RADIO_SetLoRaSyncWord@syncWord 0060  
                                           ___rparam_used 000001  
                              ValidateChannelId@channelId 0062  
                               ExecuteLinkAdr@channelMask 0073  
                          __size_of_EUSART1_RxDataHandler 0026  
                           __end_of_EUSART1_RxDataHandler 90D0  
                                      __end_of_HALSPISend 949C  
                                          __pcstackCOMRAM 0001  
                                              ___inthi_sp 0A28  
                                  _SearchAvailableChannel 5E74  
                                 ValidateChannelId@result 0061  
                                   ?_FindSmallestDataRate 0001  
                                            __pidataBANK2 95D2  
                                            __pidataBANK3 8E96  
                                            __pidataBANK4 9412  
                                     ??_SYSTEM_Initialize 0062  
                                        _bitStatusbefore1 0142  
                                        _bitStatusbefore2 0140  
                                        _bitStatusbefore3 013E  
                                        _bitStatusbefore4 013C  
                                        _bitStatusbefore5 013A  
                                        _bitStatusbefore6 0138  
                                        _bitStatusbefore7 0136  
                              __end_of_DIO4_ISR_Lora_Init 95EE  
                                               ?_TMR1_ISR 0001  
                                     __size_of_CheckFlags 005E  
                           ?_TMR1_DefaultInterruptHandler 0001  
                                _RADIO_WriteConfiguration 152C  
                                       ??_RADIO_WriteMode 0067  
                                         _spreadingFactor FF8E  
                               __size_of_LORAWAN_Mainloop 003E  
                                        ??_EncKeySchedule 0062  
                   __end_of_IOCB4_DefaultInterruptHandler 95F8  
                  __size_of_IOCB4_DefaultInterruptHandler 0002  
                           _IOCB4_DefaultInterruptHandler 95F6  
                                __end_of_RADIO_WritePower 67C4  
                                 ?_ExecuteRxParamSetupReq 00A6  
                                           __end_of_srand 9472  
                                       LORAWAN_RxDone@hdr 00F1  
                                            ??_RADIO_DIO0 00F5  
                                            ??_RADIO_DIO1 00CB  
                                            ??_RADIO_DIO2 007A  
                                            ??_RADIO_DIO3 0065  
                                            ??_RADIO_DIO4 0065  
                                            ??_RADIO_DIO5 0065  
                                  _InitDefault433Channels 787E  
                                         _UpdateFrequency 893E  
                                  _AutomaticReplyCallback 9084  
                             ??_IOCB4_SetInterruptHandler 0062  
                                    __end_of_EUSART1_Read 886C  
                                ??_INTERRUPT_GetDioStatus 0060  
                                            ??_RADIO_Init 007F  
                               SwTimerSetCallback@timerId 0063  
                              LORAWAN_RxDone@channelIndex 00E0  
                                  ??_EUSART1_Transmit_ISR 0001  
                          AssembleEncryptionBlock@blockId 006F  
                             __size_of_EXT_INT_Initialize 002A  
                                         _UpdateDutyCycle 8982  
                                         ?_EnableChannels 006C  
                                 ??_TMR_OverrideRemaining 006E  
                                          _datatobesolved 004A  
                                 __end_of_ValidateTxPower 8F42  
                                         ?_HALSPICSAssert 0001  
                                      _DIO3_ISR_Lora_Init 95EE  
                            __end_of_HALResetPinMakeInput 95EA  
                                 __size_of_TMR1_ReadTimer 0022  
                        __end_of_INT2_SetInterruptHandler 94D2  
                                        RADIO_DIO0@opMode 00F8  
                             __end_of_EUSART1_Receive_ISR 4022  
                             RADIO_RegisterRead@readValue 0063  
                      __end_of_IncludeMacCommandsResponse 1E8E  
                              _IncludeMacCommandsResponse 1A2C  
                           ?_INT2_DefaultInterruptHandler 0001  
                         __size_of_InitDefault868Channels 008A  
                                UpdateCfList@bufferLength 00A8  
                                        RADIO_DIO2@opMode 007B  
                                   LORAWAN_Send@confirmed 00D9  
                                             ?_ExtractMic 006B  
                                         ?_ExecuteLinkAdr 006F  
                                        _ValidateDataRate 9372  
                         LORAWAN_GetMaxPayloadSize@result 006A  
                                     __size_of_GetRx1Freq 0012  
                               __end_of_SYSTEM_Initialize 9084  
                      __size_of_RADIO_SetChannelFrequency 008A  
                                                 ??_srand 0074  
                                           _eusart1RxHead 0050  
                                  __end_of_RADIO_Transmit 425A  
                                           _eusart1TxHead 0051  
                                       ??_SPI2_Initialize 0060  
                                     ?_DIO3_ISR_Lora_Init 0001  
                                           _eusart1RxTail 004F  
                                           _LORAWAN_Reset 488C  
                              ?_RADIO_SetChannelFrequency 0060  
                                              __pbssBANK1 0100  
                                              __pbssBANK2 0200  
                                              __pbssBANK3 0300  
                                              __pbssBANK4 0400  
                                              __pbssBANK5 0500  
                                           _eusart1TxTail 0152  
                                        RxData@dataLength 0062  
                                     __end_of_SwTimerStop 905E  
                       _EUSART1_TxDefaultInterruptHandler 03F1  
                              ?_SetCallbackSoftwareTimers 0001  
                                 __end_of_CheckMcastFlags 7B1A  
                         ??_EUSART1_SetRxInterruptHandler 0062  
                                         __CFG_PLLCFG$OFF 000000  
                                  __end_of_maxPayloadSize FF7F  
                                              ??_INT1_ISR 0001  
                                              ??_INT2_ISR 0001  
                                      SwTimersInterrupt@i 0090  
                                    _RADIO_SetOutputPower 952C  
                                  _RADIO_ReceiveStart$521 00B7  
                                    __end_of_RADIO_SetCRC 954A  
                                  __size_of_DIO0_ISR_Lora 0006  
                                 ??_HALResetPinMakeOutput 0060  
                                    __end_of_RADIO_RxDone 6A82  
                              __end_of_RADIO_RxFSKTimeout 8C50  
                                    __end_of_RADIO_TxDone 60C4  
                                     __size_of_FillSubKey 0062  
                                      __end_of_RADIO_DIO0 76DA  
                                      __end_of_RADIO_DIO1 87D8  
                                      __end_of_RADIO_DIO2 85EC  
                                      __end_of_RADIO_DIO3 9138  
                                      __end_of_RADIO_DIO4 8CB8  
                                      __end_of_RADIO_DIO5 8FBE  
                               ??_RADIO_FHSSChangeChannel 0079  
                             __size_of_SwTimerSetCallback 0044  
                               RADIO_SetOutputPower@power 0060  
                              __size_of_SPI2_Exchange8bit 0012  
                                              _dataresult 018D  
                                      __end_of_RADIO_Init 4C24  
                       __size_of_LORAWAN_SetDeviceAddress 0018  
                         ?_LORAWAN_EnterContinuousReceive 0001  
                        ??_LORAWAN_EnterContinuousReceive 00BB  
                                                 ?_Random 00AD  
                                       ?_CountfOptsLength 0001  
                                  __size_of_DIO1_ISR_Lora 0006  
                                                 ?_RxData 0060  
                                              _bitStatus1 0134  
                                              _bitStatus2 0132  
                                              _bitStatus3 0130  
                                              _bitStatus4 012E  
                                              _bitStatus5 012C  
                                              _bitStatus6 012A  
                                              _bitStatus7 0128  
                         __end_of_EUSART1_SetErrorHandler 950E  
                               ?_LORAWAN_SetDeviceAddress 0060  
                                        i2_TMR1_ReadTimer 921C  
                                      __CFG_CCP2MX$PORTC1 000000  
                                          FillSubKey@size 0064  
                                         _EnableChannels1 7DF2  
                                __size_of_HALDIO5PinValue 000C  
                            __size_of_RADIO_RegisterWrite 0020  
                                  ??_UpdateJoinInProgress 0060  
                        __size_of_AssembleEncryptionBlock 00F4  
                                  ??_ExecuteRxTimingSetup 0069  
                                        FillSubKey@source 0060  
            SelectChannelForTransmission@transmissionType 00BB  
                                                 ?___lmul 009A  
                  AssembleEncryptionBlock@multicastStatus 0071  
                          __end_of_ExecuteRxParamSetupReq 469E  
                                      ??_CountfOptsLength 0060  
                                                 ?___wmul 0060  
                                  __size_of_DIO2_ISR_Lora 0006  
                                      EncryptFRMPayload@i 00A5  
                                      EncryptFRMPayload@j 00A6  
                                      EncryptFRMPayload@k 00A4  
                                              ??_TMR1_ISR 0034  
                                      __CFG_CCP3MX$PORTB5 000000  
                                       ??i2_TMR_SwapTimer 000B  
                                    ??_DIO3_ISR_Lora_Init 0060  
                                        _UpdateDLSettings 92BA  
                         __end_of_TMR5_HasOverflowOccured 94A8  
                                        _ValidateRxOffset 935A  
                                                 ?_memcpy 0060  
                                                 ?_memset 0060  
                                          ___lmul@product 00A2  
                                       _TMR_ISR_Lora_Init 9422  
                                  RADIO_RegisterWrite@reg 0063  
                                     __size_of_ComputeMic 0062  
                                  RADIO_Transmit@regValue 00C0  
                            __size_of_RADIO_SetModulation 000A  
                                     _RADIO_FSKPacketSent 5D46  
                                                 _AESCmac 223E  
                                  ComputeMic@bufferLength 00CB  
                  __end_of_EUSART1_SetFramingErrorHandler 9504  
                 __size_of_EUSART1_SetFramingErrorHandler 000A  
                          _EUSART1_SetFramingErrorHandler 94FA  
                                 __end_of_UpdateDataRange 5ABC  
                                         ??_TMR_SwapTimer 006A  
                                RADIO_WriteFSKBitRate@num 0071  
                                      ?_TMR_ISR_Lora_Init 0001  
                              ??_INT1_SetInterruptHandler 0062  
                                                 i2l11759 8AB2  
                                    EncryptFRMPayload@dir 0094  
                                      _RADIO_GetPacketSnr 959E  
                                    EncryptFRMPayload@key 0099  
                            ?_EUSART1_DefaultErrorHandler 0001  
                                   __end_of_UpdateTxPower 9518  
                                     _RADIO_SetIQInverted 9536  
                                                 _OSCCON2 000FD2  
                                 __size_of_ConfigureRadio 00A8  
                                                 _OSCTUNE 000F9B  
                             __size_ofi2_TMR_GetDeltaTime 016C  
                                                 _SPBRGH1 000FB0  
                                     i2_SwTimersInterrupt 62E8  
                                                 _SSP2ADD 000F6E  
                                                 _SSP2BUF 000F6F  
                                     ??_TMR_ISR_Lora_Init 0062  
                                       __end_of_bandwidth FF8E  
                  UpdateReceiveWindow2Parameters@dataRate 0064  
                                __end_of_SetJoinFailState 8D4C  
                                          ?_LORAWAN_Reset 0001  
                            RADIO_WriteMode@newModulation 0065  
                                  ValidateDataRate@result 0061  
                                        ?_TMR1_WriteTimer 0060  
                                     ?_RADIO_GetPacketSnr 0001  
                                         ___abdiv@divisor 0060  
                                         ?_RADIO_Transmit 00B1  
                                 _ValidateChannelMaskCntl 917C  
                                         ___abdiv@counter 0063  
                                     StartReTxTimer@minim 009E  
                              AssemblePacket@bufferLength 00CA  
                            PrepareSessionKeys@sessionKey 006B  
                                    ?_RADIO_FSKPacketSent 0001  
                                   TMR_SwapTimer@timerVal 0068  
                                        ?_TMR5_Initialize 0001  
                       __end_of_RADIO_SetChannelFrequency 77F4  
                             PrepareJoinRequestFrame@iCtr 00D9  
                               _IOCB4_SetInterruptHandler 94BE  
                       __end_of_SetCallbackSoftwareTimers 6D20  
                                   ?_RADIO_SetOutputPower 0001  
                               _AckRetransmissionCallback 60C4  
                             PrepareJoinRequestFrame@mhdr 00D8  
                                  __size_of_AESEncodeLoRa 0036  
                           __size_of_LORAWAN_PlatformInit 0022  
                                          _ticksAccounted 0104  
                                           ?_SwTimerStart 0001  
                                              AESCmac@key 00B9  
                                              AESCmac@ptr 01EF  
                                 __end_of_spreadingFactor FF95  
                                              _firstdigit 011C  
                                         __CFG_PWRTEN$OFF 000000  
                           UpdateCurrentDataRate@valueNew 0060  
                                                 __Hparam 0000  
                                    ?_RADIO_SetIQInverted 0001  
                              PrepareJoinRequestFrame@mic 00D4  
                                  _InitDefault868Channels 77F4  
                                RADIO_RegisterWrite@value 0062  
                                                 __Lparam 0000  
                                  ??_FindSmallestDataRate 0060  
                                LORAWAN_Send@bufferLength 00D6  
                                   _StopAllSoftwareTimers 86E6  
                                         __size_of_Random 0022  
                                         __size_of_RxData 0002  
                                    ?i2_SwTimersInterrupt 0021  
                                 __end_of_UpdateFrequency 8982  
                                     AssemblePacket@fCtrl 00D0  
                                                 ___abdiv 8004  
                                              AESEncode@i 007C  
                                                 ___aldiv 6ECA  
                                               _AESEncode 2C9A  
                                                 ___almod 71CE  
                                  ValidateRxOffset@result 0061  
                               __end_of_TMR_ISR_Lora_Init 9432  
                                                 ___awdiv 7908  
                                         __size_of___lmul 0058  
                                                 ___awmod 7D0E  
                             __size_of_DIO2_ISR_Lora_Init 0010  
                                 __end_of_UpdateDutyCycle 89C6  
                                                 ___lldiv 7A14  
                                     __size_of_ExtractMic 005A  
                                         __size_of___wmul 0028  
                                    ??_RADIO_GetPacketSnr 0060  
                                                 ___llmod 7F9C  
                                       ?_RADIO_ReadRandom 006C  
                                                 ___lwmod 89C6  
                               SwTimerIsRunning@isRunning 0061  
                                 ??_RADIO_SetLoRaSyncWord 0060  
                                                 _devAddr 03CC  
                                    ValidateChannelMask@i 0064  
                                                 __pcinit 6A82  
                      __size_of_LORAWAN_GetMaxPayloadSize 0060  
                                                 _appSKey 04E0  
                                         _resultdata2send 011A  
                                         __size_of_memcpy 0060  
                              __end_of_RADIO_ReceiveStart 448A  
                                   RADIO_Init@radioBuffer 0079  
                                         __size_of_memset 0030  
                                                 __ramtop 1000  
                                TMR1_ReadTimer@readValLow 0067  
                                        _counterinterrupt 0144  
                        EncryptFRMPayload@multicastStatus 009E  
                                      ??_RADIO_ReadRandom 006E  
                              ?_LORAWAN_GetMaxPayloadSize 0001  
           RADIO_SetFrequencyHopPeriod@frequencyHopPeriod 0060  
                                                 __ptext0 294C  
                                                 __ptext1 7D0E  
                                                 __ptext2 71CE  
                                                 __ptext3 6ECA  
                                                 __ptext4 949C  
                                                 __ptext5 905E  
                                                 __ptext6 929C  
                                                 __ptext7 8EC2  
                                                 __ptext8 9472  
                                                 __ptext9 85EC  
                                    __end_of_LORAWAN_Init 825A  
                                    __end_of_LORAWAN_Join 7474  
                                    __end_of_LORAWAN_Send 6ECA  
                                           _DIO0_ISR_Lora 95BC  
                          ??_TMR1_DefaultInterruptHandler 0001  
                         RADIO_SetFSKSyncWord@syncWordLen 006D  
                                          _EncodeShiftRow 56AC  
                                               _IOCB4_ISR 923C  
                              ExecuteNewChannel@frequency 00AB  
                               TMR1_ReadTimer@readValHigh 0066  
                         __size_of_INTERRUPT_GetDioStatus 0014  
                                               _T1CONbits 000FCD  
                      SelectChannelForTransmission@result 00BC  
                                                 _counter 014C  
                                 __size_of_LORAWAN_RxDone 0CA6  
                                   _OSCILLATOR_Initialize 9480  
                          __end_of_UpdateJoinSuccessState 5D46  
                                 __size_of_LORAWAN_TxDone 07B2  
                              __end_of_RADIO_SetBandwidth 9572  
                                         _RADIO_GetStatus 95A4  
                                        ?_ValidateTxPower 0001  
                                        ___awmod@dividend 0060  
                                 ?_HALResetPinOutputValue 0001  
                            __end_of_macEndDevCmdReplyLen FF9C  
                       __size_of_TMR1_SetInterruptHandler 000A  
                                           _DIO1_ISR_Lora 95B6  
                                        ___aldiv@dividend 006A  
                                      _EUSART1_Initialize 7B1A  
                                             _SwTimerStop 9036  
                                ??_PIN_MANAGER_Initialize 0062  
                               ?_TMR1_SetInterruptHandler 0060  
                                                 _nwkSKey 03D3  
                             IncludeMacCommandsResponse@i 006D  
                                               _T5CONbits 000F4E  
                                           ?_UpdateCfList 00A6  
                                       _ExecuteNewChannel 3B4C  
                             __size_of_PrepareSessionKeys 00AC  
                                            ??_CheckFlags 0062  
                           RADIO_SetModulation@modulation 0060  
                                 UpdateDLSettings@dlRx2Dr 0061  
                           ??_EUSART1_DefaultErrorHandler 0001  
                               __size_of_TMR_GetDeltaTime 01AC  
                                           _DIO2_ISR_Lora 95B0  
                              __size_of_SYSTEM_Initialize 0026  
                    __end_of_LORAWAN_SetNetworkSessionKey 8E3A  
                   __size_of_LORAWAN_SetNetworkSessionKey 002E  
                            _LORAWAN_SetNetworkSessionKey 8E0C  
                                      ?_ExecuteNewChannel 00A6  
                                                 _strncat 80D0  
                              RADIO_WriteMode@currentMode 0069  
                                        ComputeMic@buffer 00C9  
                                    end_of_initialization 6B5E  
                                 _CreateAllSoftwareTimers 8738  
                                     SwTimerCreate@retVal 0060  
                                _INT2_SetInterruptHandler 94C8  
                                   ??_RADIO_FSKPacketSent 00E3  
                                     ?_EUSART1_Initialize 0001  
                                          _GenerateSubkey 5ABC  
                                   _RADIO_WatchdogTimeout 886C  
                          ??_INT2_DefaultInterruptHandler 0001  
                                              _modulation FF67  
                                        ?_CheckMcastFlags 0060  
                                  ExtractMic@bufferLength 006D  
                                                 memcpy@d 0066  
                                                 memcpy@n 0064  
                                                 memcpy@s 0068  
                                 __end_of_EnableChannels1 7E5E  
                                                 memset@c 0062  
                                                 memset@n 0064  
                                                 memset@p 0066  
                               _LORAWAN_LinkCheckCallback 526E  
                             _EUSART1_OverrunErrorHandler 03E9  
                                          ??_SwTimerStart 0091  
                                     ??_ExecuteNewChannel 00A8  
                                               i2u1382_40 811E  
                                               i2u1711_48 0070  
                                   _UpdateCurrentDataRate 9518  
                                               i2u1711_49 0084  
                                   _UpdateChannelIdStatus 5546  
                                               i2u1714_48 008E  
                                               i2u1714_49 00A2  
                                               i2u1681_48 920A  
                                               i2u1690_48 3DEA  
                                               i2u1690_49 3DFE  
                                 ??_RADIO_WriteFSKBitRate 0071  
                                               i2u1675_48 928A  
                                   ??_RADIO_SetIQInverted 0060  
                                               i2u1692_48 3E18  
                                               i2u1692_49 3E2C  
                                               i2u1677_48 926A  
                              __end_of_DIO1_ISR_Lora_Init 9452  
                                               i2u1694_48 3E46  
                                               i2u1695_45 3ED4  
                                               i2u1679_48 924A  
                                               i2u1696_45 3EF2  
                                               i2u1697_45 3F10  
                                               i2u1698_45 3F9E  
                                         ___lldiv@divisor 0064  
                                     _ValidateChannelMask 831A  
                                               i2u1699_45 3FBA  
                                              _ticksAdded 0108  
                             HALResetPinOutputValue@value 0060  
                                EncodeShiftRow@stateTable 0060  
                   __end_of_EUSART1_SetRxInterruptHandler 94F0  
                  __size_of_EUSART1_SetRxInterruptHandler 000A  
                           _EUSART1_SetRxInterruptHandler 94E6  
                               __size_of_HALSPICSDeassert 0004  
                                ValidateDataRate@dataRate 0060  
                                         ___lldiv@counter 006C  
                             TMR_OverrideRemaining@tmrVal 0070  
                                   ??i2_SwTimersInterrupt 0025  
                                ExecuteLinkAdr@redundancy 0076  
                                       GenerateSubkey@key 0091  
                                    _HALResetPinMakeInput 95E6  
                                            ??_GetRx1Freq 0064  
                           UpdateDLSettings@dlRx1DrOffset 0060  
                              LORAWAN_Init@RxJoinResponse 00B4  
                              LORAWAN_RxDone@bufferLength 01F7  
                        __end_of_RADIO_SetSpreadingFactor 9554  
                      AssembleEncryptionBlock@bufferIndex 0073  
                                            RxData@status 0063  
                                        ___aldiv@quotient 0074  
                                                 postdec1 000FE5  
                                                 postdec2 000FDD  
                                              ?_AESEncode 0066  
                                         _SystemTimerInit 9586  
                                                 postinc0 000FEE  
                                                 postinc1 000FE6  
                                                 postinc2 000FDE  
                                   __size_of_EUSART1_Read 004A  
                                        ??_RxJoinResponse 0060  
                                        _LORAWAN_Mainloop 8B98  
                            __end_of_RADIO_SetFSKSyncWord 8D7C  
                                      LORAWAN_Join@result 00DC  
                                      __end_of_CheckFlags 83D6  
                                    ??_EUSART1_Initialize 0062  
                               ValidateTxPower@txPowerNew 0061  
                                              _thirddigit 0120  
                                          AESEncode@block 0066  
                       SearchAvailableChannel@maxChannels 00B8  
                                  __end_of_EncodeShiftRow 5810  
                                      _DIO0_ISR_Lora_Init 9452  
                                       ??_HALDIO5PinValue 0060  
                                          ?_DIO0_ISR_Lora 0001  
                                   _INT1_InterruptHandler 03F5  
                                               _PORTBbits 000F81  
                                            ??_FillSubKey 0065  
                            SwTimersInterrupt@timeElapsed 0088  
                                           _AESEncodeLoRa 8C50  
                               __size_of_ExecuteDevStatus 000A  
                            __end_of_RADIO_WriteFrequency 68B4  
                              __end_of_RADIO_RegisterRead 9036  
                       __end_of_LORAWAN_GetMaxPayloadSize 82BA  
                          __end_of_HALResetPinOutputValue 9342  
                                              ?_IOCB4_ISR 0001  
                                        ?_UpdateDataRange 0060  
                                __end_of_ConfigureRadioRx 8F96  
                                __end_of_ConfigureRadioTx 86E6  
                                         _RADIO_RxTimeout 8E68  
                          UpdateChannelIdStatus@channelId 0062  
                               __end_of_ExecuteNewChannel 3DBC  
                                        EnableChannels1@i 006B  
                                 __size_of_AssemblePacket 03B0  
                                          ?_DIO1_ISR_Lora 0001  
                                    ?_ValidateChannelMask 0060  
                                              _testassign 0126  
                                       _SwTimerSetTimeout 8A4E  
                                          _TMR1_ReadTimer 915A  
                                          ??_UpdateCfList 00A8  
                                              _txPower433 FF9C  
                                              _txPower868 FFA2  
                                     ?_DIO0_ISR_Lora_Init 0001  
                                         ??_LORAWAN_Reset 00B1  
                                          ?_DIO2_ISR_Lora 0001  
                           __size_of_SystemBlockingWaitMs 0030  
                               ??_ValidateChannelMaskCntl 0060  
                                      ?_SwTimerSetTimeout 006D  
                             __size_of_MacExecuteCommands 02F6  
                                    ExecuteNewChannel@ptr 00A6  
                                ??_UpdateMinMaxChDataRate 0060  
                                  __end_of_GenerateSubkey 5C08  
                        __size_of_EUSART1_SetErrorHandler 000A  
                                           RADIO_RxDone@i 00F4  
                                     EUSART1_Write@txData 0060  
                                   __size_of_RADIO_SetCRC 000A  
                                 AssemblePacket@macCmdIdx 00D1  
                             ?_LORAWAN_SetChannelIdStatus 0064  
                                          _localDioStatus 0155  
                                      __end_of_GetRx1Freq 93EE  
                                   __size_of_RADIO_RxDone 00E4  
                                            ??_ComputeMic 00CC  
                            __size_of_UpdateReceiveDelays 0042  
                                   __size_of_RADIO_TxDone 0126  
                                  ??_RADIO_SetOutputPower 0060  
                         EncryptFRMPayload@macBufferIndex 009B  
                           ?_LORAWAN_SetNetworkSessionKey 006B  
                                 UpdateMinMaxChDataRate@i 0061  
                                 LORAWAN_Reset@ismBandNew 00B1  
                               __size_of_SwTimerIsRunning 002A  
                              __end_of_ComputeSessionKeys 7A14  
                        __size_of_TMR5_HasOverflowOccured 000C  
                                     ??_SwTimerSetTimeout 0071  
                                __size_of_SwTimersExecute 00EA  
                               __size_of_ExecuteLinkCheck 0032  
                                  _INTERRUPT_GetDioStatus 93B4  
                                         _RADIO_WriteMode 63E8  
                              ??_RADIO_WriteConfiguration 00A8  
                                            _EUSART1_Read 8822  
                                   SPI2_Exchange8bit@data 0060  
                                 ?_SearchAvailableChannel 00AF  
                               __size_of_SwTimerReadValue 0040  
                             RADIO_FSKPacketSent@irqFlags 00EF  
                               __size_of_ExecuteDutyCycle 0054  
                                  ?_StopAllSoftwareTimers 0001  
                                 AssemblePacket@confirmed 00CE  
                                      __end_of_FillSubKey 81F8  
                                 _AssembleEncryptionBlock 65E0  
                                       __size_of_INT1_ISR 0008  
                                       __size_of_INT2_ISR 0008  
                    __size_of_EUSART1_DefaultErrorHandler 0006  
                                    ??_DIO0_ISR_Lora_Init 0062  
                                   ?_HALResetPinMakeInput 0001  
                                          __end_of_STable FF67  
                                     AESEncodeLoRa@useKey 0081  
                              SwTimerSetCallback@callback 0060  
                LORAWAN_SetDeviceAddress@deviceAddressNew 0060  
                                      main@first1decimalc 01F8  
                                        ?_UpdateFrequency 0060  
                                      LORAWAN_Send@buffer 00D4  
                                          __end_of_Random 915A  
                                          __end_of_RxData 95F4  
                                 ?_InitDefault433Channels 0001  
                              __size_of_TMR_ISR_Lora_Init 0010  
                                __end_of_ValidateDataRate 938A  
                                      main@first2decimalc 01F9  
                            __end_of_INTERRUPT_Initialize 95DA  
                          EnableChannels1@channelMaskCntl 0066  
                          EnableChannels1@channelIndexMax 0068  
                          EnableChannels1@channelIndexMin 0067  
                     LORAWAN_SetChannelIdStatus@channelId 0066  
                                        ?_UpdateDutyCycle 0060  
                              __end_of_DIO5_ISR_Lora_Init 95EC  
                                 __end_of_RADIO_GetStatus 95AA  
                                          __end_of___lmul 853E  
                                      main@first3decimalc 01FA  
                                      LORAWAN_Send@result 00D8  
                                        ??_EnableChannels 006F  
                               i2TMR1_WriteTimer@timerVal 0001  
                                          __end_of___wmul 900E  
                                           ?_TMR_ISR_lora 0001  
                                        ??_HALSPICSAssert 0060  
                     TMR_OverrideRemaining@ticksRemaining 006A  
                                       ?_RADIO_WritePower 0001  
                                           __pidataCOMRAM 95CE  
                                         ?_EncodeShiftRow 0060  
                                      main@first4decimalc 01FB  
                                          ?_AESEncodeLoRa 007D  
                                       __size_of_TMR1_ISR 0014  
                                      __end_of_ComputeMic 8196  
                                               Random@max 00AD  
                                      main@first5decimalc 01FC  
                                          __end_of_memcpy 831A  
                                  ?_OSCILLATOR_Initialize 0001  
                               __end_of_SwTimerSetTimeout 8A92  
                                  __end_of_TMR1_ReadTimer 917C  
                                          __end_of_memset 8DDC  
                                         _SPI2_Initialize 9472  
                        LORAWAN_SetChannelIdStatus@result 0065  
                                ?_PrepareJoinRequestFrame 0001  
                                      ??_RADIO_WritePower 0064  
                                            _RADIO_SetCRC 9540  
                                   ??_ValidateChannelMask 0062  
                                        ??_ExecuteLinkAdr 0071  
                                   UpdateCfList@frequency 00A9  
                                            _RADIO_RxDone 699E  
                                            _RADIO_TxDone 5F9E  
LORAWAN_SetApplicationSessionKey@applicationSessionKeyNew 006B  
                                     start_initialization 6A82  
                                          _ConfigureRadio 7328  
                                      LORAWAN_RxDone@mhdr 00E1  
                                      LORAWAN_RxDone@temp 00E7  
                                      _DIO4_ISR_Lora_Init 95EC  
                                __end_ofi2_TMR1_ReadTimer 923C  
                          __size_of_TMR_OverrideRemaining 009C  
                                     _RADIO_RegisterWrite 91BC  
                                            AESCmac@mLast 01AF  
                               ??_CreateAllSoftwareTimers 0061  
                         __size_of_PIN_MANAGER_Initialize 0054  
                           __end_of_TMR_OverrideRemaining 75B4  
                             ?_IncludeMacCommandsResponse 0060  
                                   __end_of_INT1_CallBack 929C  
                                            ??_ExtractMic 006F  
                    EncryptFRMPayload@bufferToBeEncrypted 009C  
                                            AESCmac@input 00BD  
                        __end_of_LORAWAN_SetDeviceAddress 935A  
                                         ?_GenerateSubkey 0091  
           EUSART1_SetRxInterruptHandler@interruptHandler 0060  
           EUSART1_SetTxInterruptHandler@interruptHandler 0060  
                            ?_RADIO_SetFrequencyHopPeriod 0060  
                                         LORAWAN_TxDone@i 00E2  
                                   LORAWAN_Init@RxPayload 00B2  
                     AssembleEncryptionBlock@frameCounter 006B  
                                 i2TMR_SwapTimer@timerVal 0009  
                                   __end_of_INT2_CallBack 927C  
                                           ??_RADIO_Reset 0065  
                                __end_of_UpdateDLSettings 92D6  
                                   __end_of_EUSART1_Write 8C14  
                              SwTimerStart@ticksRemaining 0095  
                                  RADIO_WriteMode@newMode 006A  
                                __end_of_ValidateRxOffset 9372  
                             ??_RADIO_SetChannelFrequency 0064  
                             ??_SetCallbackSoftwareTimers 0064  
                                     ?_DIO4_ISR_Lora_Init 0001  
                                     _RADIO_SetModulation 9554  
                           ExecuteNewChannel@channelIndex 00AF  
                          __end_of_SearchAvailableChannel 5F9E  
                                        ?_EnableChannels1 0064  
                                         i2_TMR_SwapTimer 8A92  
                                 __size_of_StartReTxTimer 0182  
                                  ?_UpdateCurrentDataRate 0001  
                                  ?_UpdateChannelIdStatus 0060  
                                         ___llmod@divisor 0064  
                              MacExecuteCommands@fOptsLen 00B2  
                                 _RADIO_FSKPacketSent$536 00EB  
                                 __end_of_SystemTimerInit 958E  
                          UpdateChannelIdStatus@statusNew 0060  
                       __size_of_RADIO_UnhandledInterrupt 0032  
                                         ___llmod@counter 0068  
                                     TMR_SwapTimer@oldVal 0148  
                               ?_RADIO_UnhandledInterrupt 0001  
                                __size_of_PIN_MANAGER_IOC 000A  
                                     TMR_SwapTimer@retVal 0146  
                                   _RADIO_FSKPayloadReady 711A  
                          __size_of_HALResetPinMakeOutput 0004  
                           __end_of_HALResetPinMakeOutput 95E6  
                                                ??_Random 00AF  
                                                ??_RxData 0064  
                                                AESCmac@i 01F4  
                                                AESCmac@j 01F3  
                                                AESCmac@n 01F2  
                                                AESCmac@x 01DF  
                                                AESCmac@y 01CF  
                              SwTimerReadValue@ticksCount 0095  
                                    ?_RADIO_RegisterWrite 0062  
                          __end_of_InitDefault433Channels 7908  
                          __end_of_AutomaticReplyCallback 90AA  
                                     RADIO_Init@frequency 007B  
                                __size_of_TMR1_Initialize 002C  
                                    _macEndDevCmdReplyLen FF95  
                                                ??___lmul 00A2  
                                             ??_AESEncode 006A  
                       RADIO_WriteConfiguration@tempValue 00AC  
                                   __size_of_LORAWAN_Init 0062  
                      __size_of_AckRetransmissionCallback 011E  
                                   __size_of_LORAWAN_Join 00A4  
                                                ??___wmul 0064  
                                   __size_of_LORAWAN_Send 00D2  
                                 __end_of_RADIO_RxTimeout 8E96  
                                MacExecuteCommands@buffer 00B0  
                                   _EUSART1_RxDataHandler 90AA  
                          ?_EUSART1_SetRxInterruptHandler 0060  
                                ??_SetReceptionNotOkState 00BB  
                                          ??_TMR_ISR_lora 0032  
                                         ??_DIO0_ISR_Lora 0001  
                                             __pdataBANK2 02FB  
                                             __pdataBANK3 03B7  
                                       _ValidateDataRange 88B2  
                                             __pdataBANK4 04E0  
                                      __end_of_ExtractMic 84E6  
                i2SwTimersInterrupt@ticksToNextTimerEvent 002D  
                  SwTimersInterrupt@ticksToNextTimerEvent 008C  
                                                ??_memcpy 0066  
                                  __size_of_SwTimerCreate 0090  
                                                ??_memset 0066  
                                    ??_DIO4_ISR_Lora_Init 0060  
                              __end_of_EXT_INT_Initialize 8F18  
                                       _ValidateChannelId 90D0  
                                    ?_RADIO_SetModulation 0001  
                                _RADIO_SetSpreadingFactor 954A  
                                      _RADIO_RxFSKTimeout 8C14  
                                                ?_AESCmac 00B9  
                                  __size_of_TMR1_CallBack 0020  
                                         ??_DIO1_ISR_Lora 0001  
                                      ?_ValidateDataRange 0001  
                                ValidateRxOffset@rxOffset 0060  
                                            AESEncode@aux 0078  
                                            AESEncode@key 0068  
                                  TMR_GetDeltaTime@retVal 0100  
                                         ?_TMR1_ReadTimer 0060  
                                          _eusart1RxCount 014F  
                                             ??_IOCB4_ISR 0001  
                                  __end_of_ConfigureRadio 73D0  
                                          _LORAWAN_RxDone 00D4  
                                      ?_ValidateChannelId 0060  
                                  TMR_GetDeltaTime@tmrVal 014A  
                                          _LORAWAN_TxDone 0D7A  
                              __size_of_ExecuteNewChannel 0270  
              LORAWAN_GetMaxPayloadSize@macCommandsLength 0069  
                                    __end_of_SwTimerStart 764A  
                  __end_of_LORAWAN_EnterContinuousReceive 7C96  
                 __size_of_LORAWAN_EnterContinuousReceive 007E  
                          _LORAWAN_EnterContinuousReceive 7C18  
                                             __pbssBIGRAM 0580  
                                         ??_DIO2_ISR_Lora 0001  
                               __size_of_CountfOptsLength 00CA  
                                       CountfOptsLength@i 0067  
                                             __pbssCOMRAM 004A  
                              __end_of_DefaultChannels433 FFD2  
                              __end_of_DefaultChannels868 FFFC  
                       _EUSART1_RxDefaultInterruptHandler 03EF  
                                        ??_RADIO_Transmit 00B4  
                                      LORAWAN_RxTimeout@i 00CA  
                           __size_of_EUSART1_Transmit_ISR 0030  
                                           __pcstackBANK0 0060  
                                           __pcstackBANK1 018F  
                                     ??_ValidateDataRange 0062  
                                        _TMR_GetDeltaTime 4C24  
                           EnableChannels@channelMaskCntl 006E  
                                 __end_of_RADIO_WriteMode 64E6  
                 __end_of_UnconfirmedTransmissionCallback 7D0E  
                __size_of_UnconfirmedTransmissionCallback 0078  
                         _UnconfirmedTransmissionCallback 7C96  
                                 SearchAvailableChannel@i 00BA  
                                     ??_ValidateChannelId 0061  
                                   RADIO_RegisterRead@reg 0062  
                         __size_of_UpdateMinMaxChDataRate 00FA  
                     LORAWAN_SetChannelIdStatus@statusNew 0064  
                                               _aesBuffer 03A2  
                                 INTERRUPT_GetDioStatus@a 0060  
                                       ?_SetJoinFailState 0001  
                                     SwTimerStart@timerId 0099  
                           ??_RADIO_SetFrequencyHopPeriod 0062  
                         ??_EUSART1_SetTxInterruptHandler 0062  
                                    _RADIO_SetFSKSyncWord 8D4C  
                             RADIO_SetBandwidth@bandwidth 0060  
                        ??_EUSART1_SetFramingErrorHandler 0062  
                         ?_EUSART1_SetFramingErrorHandler 0060  
                              __end_of_SwTimerSetCallback 8A4E  
                            __size_of_EUSART1_Receive_ISR 0266  
       __end_of_ResetParametersForUnconfirmedTransmission 93B4  
      __size_of_ResetParametersForUnconfirmedTransmission 0014  
              ?_ResetParametersForUnconfirmedTransmission 0001  
             ??_ResetParametersForUnconfirmedTransmission 0060  
               _ResetParametersForUnconfirmedTransmission 93A0  
                               ??_AssembleEncryptionBlock 0072  
                                   _INT2_InterruptHandler 03F3  
                                               _bandwidth FF87  
                                      ??_SetJoinFailState 0060  
                                 ?_InitDefault868Channels 0001  
                                            _LORAWAN_Init 81F8  
                                            _LORAWAN_Join 73D0  
                                            _LORAWAN_Send 6DF8  
                                  RADIO_FSKPayloadReady@i 00F4  
                                       _ValidateFrequency 806A  
                                               __pnvBANK1 01FD  
                                               __pnvBANK3 03E3  
                                  ??_HALResetPinMakeInput 0060  
                                    _RADIO_WriteFrequency 67C4  
                                         FillSubKey@carry 0066  
                                        _HALSPICSDeassert 95DA  
                          ??_LORAWAN_SetNetworkSessionKey 006D  
                                     __end_of_RADIO_Reset 893E  
                                   ??_RADIO_RegisterWrite 0063  
                                  _PIN_MANAGER_Initialize 85EC  
                                           FillSubKey@key 0062  
                                      ?_ValidateFrequency 0060  
                                               _bitStatus 0204  
                                    __end_of_UpdateCfList 488C  
                     RADIO_WriteFSKFrequencyDeviation@num 0071  
                               EnableChannels@channelMask 006C  
                                               _macBuffer 068F  
                                               _dioStatus 0156  
                               __end_of_ValidateDataRange 88F8  
                           RADIO_FSKPayloadReady@irqFlags 00F3  
                                       _SwTimersInterrupt 61E2  
                                       ??_SwTimersExecute 00DA  
                                               __pintcode 0008  
                                                ?___abdiv 0060  
                        __end_of_TMR1_SetInterruptHandler 94BE  
                                           __pmediumconst FE66  
                                                ?___aldiv 006A  
                                 RADIO_Transmit@bufferLen 00B3  
                                 __end_of_SPI2_Initialize 9480  
                                                ?___almod 0060  
                                                ?___awdiv 0066  
                                               __ptext100 1E8E  
                                               __ptext101 1A2C  
                                               __ptext110 727C  
                                               __ptext102 959E  
                               __end_of_ValidateChannelId 90F4  
                                               __ptext111 7A98  
                                               __ptext103 6B64  
                                               __ptext200 8738  
                                               __ptext120 93A0  
                                               __ptext112 8378  
                                               __ptext104 4F60  
                                               __ptext201 76DA  
                                               __ptext121 93EE  
                                               __ptext113 5D46  
                                               __ptext105 7908  
                                               __ptext210 62E8  
                                               __ptext202 8BD6  
                                               __ptext130 5E74  
                                               __ptext122 95AA  
                                               __ptext114 0D7A  
                                               __ptext106 65E0  
                                               __ptext211 53DA  
                                               __ptext131 8694  
                                               __ptext123 919C  
                                               __ptext115 8B58  
                                               __ptext107 6F98  
                                               __ptext220 95F8  
                                               __ptext212 921C  
                                               __ptext204 93C8  
                                               __ptext140 776A  
                                               __ptext132 952C  
                                               __ptext124 425A  
                                               __ptext116 8F42  
                                               __ptext108 848C  
                                               __ptext221 9596  
                                               __ptext213 957C  
                                               __ptext205 91FC  
                                               __ptext141 9568  
                                               __ptext133 9536  
                                               __ptext125 8F6C  
                                               __ptext117 95A4  
                                               __ptext109 798E  
                                               __ptext230 95FC  
                                               __ptext222 927C  
                                               __ptext214 923C  
                                               __ptext206 95F4  
                                               __ptext150 89C6  
                                               __ptext142 4022  
                                               __ptext134 9540  
                                               __ptext126 93B4  
                                               __ptext118 7C18  
                                               __ptext231 95C8  
                                               __ptext223 95BC  
                                               __ptext215 95B0  
                                               __ptext207 853E  
                                               __ptext151 8134  
                                               __ptext143 152C  
                                               __ptext135 7328  
                                               __ptext127 73D0  
                                               __ptext119 95F2  
                                               __ptext232 90AA  
                                               __ptext224 95FA  
                                               __ptext216 95F6  
                                               __ptext208 8A92  
                                               __ptext160 9462  
                                               __ptext152 223E  
                                               __ptext144 66D4  
                                               __ptext136 954A  
                                               __ptext128 930E  
                                               __ptext233 0000  
                                               __ptext225 8DDC  
                                               __ptext217 958E  
                                               __ptext209 92F2  
                                               __ptext161 6C42  
                                               __ptext153 5ABC  
                                               __ptext145 7ECA  
                                               __ptext137 9554  
                                               __ptext129 7E5E  
                                               __ptext226 3DBC  
                                               __ptext218 925C  
                                               __ptext170 900E  
                                               __ptext162 7474  
                                               __ptext154 8196  
                                               __ptext146 7F34  
                                               __ptext138 955E  
                                               __ptext227 80D0  
                                               __ptext219 95B6  
                                               __ptext171 94A8  
                                               __ptext163 488C  
                                               __ptext155 8C50  
                                               __ptext147 4DD0  
                                               __ptext139 8D4C  
                                               __ptext228 8822  
                                               __ptext180 8D7C  
                                               __ptext172 67C4  
                                               __ptext164 64E6  
                                               __ptext156 2C9A  
                                               __ptext148 9138  
                                               __ptext229 95C2  
                                               __ptext181 9328  
                                               __ptext173 7F9C  
                                               __ptext165 86E6  
                                               __ptext157 56AC  
                                               __ptext149 83D6  
                                               __ptext190 87D8  
                                               __ptext182 95E2  
                                               __ptext174 91BC  
                                               __ptext166 9572  
                                               __ptext158 38A8  
                                               __ptext191 91DC  
                                               __ptext183 95E6  
                                               __ptext175 948E  
                                               __ptext167 4A5A  
                                               __ptext159 81F8  
                                               __ptext192 61E2  
                                               __ptext184 5810  
                                               __ptext176 9400  
                                               __ptext168 8A0A  
                                               __ptext193 4C24  
                                               __ptext185 84E6  
                                               __ptext177 95DA  
                                               __ptext169 63E8  
                                               __ptext194 915A  
                                               __ptext186 7A14  
                                               __ptext178 95DE  
                                               __ptext195 8A4E  
                                               __ptext187 9036  
                                               __ptext179 88F8  
                                                ?___awmod 0060  
                                               __ptext196 77F4  
                                               __ptext188 75B4  
                                               __ptext197 787E  
                                               __ptext189 7518  
                                               __ptext198 8DAC  
                                               __ptext199 82BA  
                                       _EncryptFRMPayload 4F60  
                                                ?___lldiv 0060  
                            RADIO_FSKPacketSent@timeOnAir 00E7  
                           __size_of_UpdateJoinInProgress 001A  
                                                ?___llmod 0060  
                           __size_of_ExecuteRxTimingSetup 0028  
                                         ??_AESEncodeLoRa 0081  
                SelectChannelForTransmission@channelIndex 00BD  
                         __end_of_PrepareJoinRequestFrame 4F60  
                                                ?___lwmod 00A8  
                                      ?_SwTimersInterrupt 0080  
                               _RADIO_SetChannelFrequency 776A  
                             __size_of_DIO3_ISR_Lora_Init 0002  
                   IncludeMacCommandsResponse@bufferIndex 006E  
                               _SetCallbackSoftwareTimers 6C42  
                                      ConfigureRadio@freq 006E  
                                   ??_RADIO_SetModulation 0060  
                                        ?_RADIO_GetStatus 0001  
                                  __end_of_LORAWAN_RxDone 0D7A  
                                     ??_ValidateFrequency 0064  
                                  __end_of_LORAWAN_TxDone 152C  
                                      ?_EncryptFRMPayload 0091  
                            ??_INTERRUPT_InterruptManager 0034  
                                        ___almod@dividend 0060  
                                        __CFG_PRICLKEN$ON 000000  
                            __end_of_LORAWAN_PlatformInit 9116  
                          __size_of_RADIO_SetLoRaSyncWord 000A  
                                        _ExecuteDevStatus 9522  
                           __end_of_RADIO_SetLoRaSyncWord 957C  
                  IncludeMacCommandsResponse@pBufferIndex 0062  
                              __size_of_SwTimerSetTimeout 0044  
                             ??_LORAWAN_GetMaxPayloadSize 0068  
                          LORAWAN_LinkCheckConfigure@iCtr 00B0  
                        ExecuteRxParamSetupReq@dlSettings 00AE  
                                          _AssemblePacket 1E8E  
                                         ?_ConfigureRadio 006E  
                               AssemblePacket@bufferIndex 00D2  
                              ??_INT2_SetInterruptHandler 0062  
                                                _BAUDCON1 000FB8  
                              __end_ofi2_TMR_GetDeltaTime 5546  
              __end_of_EUSART1_DefaultOverrunErrorHandler 95C8  
             __size_of_EUSART1_DefaultOverrunErrorHandler 0006  
                    ??_EUSART1_DefaultOverrunErrorHandler 0001  
                     ?_EUSART1_DefaultOverrunErrorHandler 0001  
                      _EUSART1_DefaultOverrunErrorHandler 95C2  
                                     ??_SwTimersInterrupt 0084  
                                    RADIO_DIO0@dioMapping 00F7  
                                       _DutyCycleCallback 2FE4  
                                 InitDefault433Channels@i 006B  
                                    _EUSART1_ErrorHandler 03E7  
                                   __end_of_TMR_SwapTimer 8822  
                                            ?_SwTimerStop 0001  
                                     ??_EncryptFRMPayload 009F  
                                 _EUSART1_SetErrorHandler 9504  
                                 __end_ofi2_TMR_SwapTimer 8AD6  
                                 __size_of_EncKeySchedule 02A4  
                                      AssemblePacket@mhdr 00CF  
                                             strncat@from 0003  
                                      AssemblePacket@port 00C7  
                               __size_of_RADIO_ReadRandom 00A4  
                                             strncat@size 0005  
                                ConfigureRadioRx@dataRate 0077  
                                      _RADIO_ReceiveStart 425A  
                                                ?_strncat 0001  
                                          __size_of_srand 0010  
                                __end_of_LORAWAN_Mainloop 8BD6  
                                   ?_RADIO_SetFSKSyncWord 006B  
                                    _INTERRUPT_Initialize 95D6  
                                           _SwTimerCreate 76DA  
                          __end_of_InitDefault868Channels 787E  
                     IncludeMacCommandsResponse@macBuffer 0060  
                                 _TMR5_HasOverflowOccured 949C  
                                ?_RADIO_FHSSChangeChannel 0001  
                           ValidateFrequency@frequencyNew 0060  
                                           _TMR1_CallBack 91FC  
                                         ___aldiv@divisor 006E  
                               __end_of_ValidateFrequency 80D0  
                                        _SwTimerIsRunning 8F42  
                                        _ExecuteLinkCheck 8CEA  
                                         ___aldiv@counter 0072  
                                    i2SwTimersInterrupt@i 0031  
                                                _INT1_ISR 9596  
                                _LORAWAN_SetDeviceAddress 9342  
                                                _INT2_ISR 958E  
                                       EncKeySchedule@key 0060  
                                          ___wmul@product 0064  
                                                _IOCBbits 000F62  
                                      _RADIO_SetBandwidth 9568  
                 EUSART1_SetErrorHandler@interruptHandler 0060  
                                  ?_RADIO_FSKPayloadReady 0001  
                       __size_of_INT1_SetInterruptHandler 000A  
                                    __end_of_rxWindowSize FF87  
                                   ?_RADIO_WriteFrequency 006D  
                               ?_INT1_SetInterruptHandler 0060  
                                        ?_SystemTimerInit 0001  
                                               _reloadVal 004C  
                                     ?_RADIO_ReceiveStart 00B1  
                                        _SwTimerReadValue 8B58  
                                                _PIE1bits 000F9D  
                                        _ExecuteDutyCycle 8640  
                                         _HALDIO5PinValue 94A8  
                                    RADIO_DIO1@dioMapping 00CC  
                               __end_of_SwTimersInterrupt 62E8  
                                __size_of_TMR1_WriteTimer 0020  
                     __size_of_INTERRUPT_InterruptManager 00C4  
                              __end_of_DIO2_ISR_Lora_Init 9442  
                                                _PIR1bits 000F9E  
                                        GenerateSubkey@k1 0093  
                                        GenerateSubkey@k2 0095  
                                    ConfigureRadioRx@freq 0073  
                               __end_of_EncryptFRMPayload 50EC  
                                                _PIR5bits 000F7E  
                          __size_of_RADIO_WriteFSKBitRate 0068  
                                UpdateReceiveDelays@delay 0066  
                               LORAWAN_RxDone@bufferIndex 00E6  
                                  __size_of_UpdateTxPower 000A  
                           __end_of_RADIO_WriteFSKBitRate 7F9C  
                                    ConfigureRadioTx@freq 0073  
                                  ?_EUSART1_RxDataHandler 0001  
                             UpdateDataRange@dataRangeNew 0060  
                                __size_of_TMR5_Initialize 001E  
                                                _RCONbits 000FD0  
                                     ?_RADIO_SetBandwidth 0001  
                      SearchAvailableChannel@channelIndex 00B0  
                                               _rxPayload 010C  
                                        __CFG_WDTPS$32768 000000  
                                  _UpdateMinMaxChDataRate 64E6  
                           EncryptFRMPayload@bufferLength 0093  
                                 ValidateDataRange@result 0062  
                                                _SSP2CON1 000F6C  
                             UpdateDutyCycle@dutyCycleNew 0060  
              ValidateChannelId@allowedForDefaultChannels 0060  
                           __size_of_FindSmallestDataRate 00DE  
                                                _TMR1_ISR 93C8  
                                ConfigureRadioTx@dataRate 0077  
                    __size_of_RADIO_SetFrequencyHopPeriod 000A  
                                   ValidateTxPower@result 0060  
                                        ?_RADIO_RxTimeout 0001  
                     __size_of_IncludeMacCommandsResponse 0462  
                                                _SSP2STAT 000F6D  
                            ??_LORAWAN_LinkCheckConfigure 00A8  
                                       ??_PIN_MANAGER_IOC 0001  
                             __size_of_RADIO_GetPacketSnr 0006  
                                     _UpdateReceiveDelays 8AD6  
                         __size_of_SetReceptionNotOkState 007E  
                                  __end_of_AssemblePacket 223E  
                                         ?_LORAWAN_RxDone 01F5  
                                         ?_LORAWAN_TxDone 00BB  
                                       ??_TMR1_Initialize 0062  
                                        ___abdiv@dividend 0066  
                                      _DIO1_ISR_Lora_Init 9442  
                               __end_of_DutyCycleCallback 32EA  
                                       ___wmul@multiplier 0060  
                                        __size_of_AESCmac 03AA  
                                    ??_RADIO_ReceiveStart 00B3  
                                 ValidateFrequency@result 0064  
                              __end_of_PrepareSessionKeys 7328  
                                       ?_ConfigureRadioRx 0073  
                                       ?_ConfigureRadioTx 0073  
                                    RADIO_DIO2@dioMapping 007C  
                                      AESEncodeLoRa@block 007D  
                                                _Channels 0400  
                             __end_of_RADIO_FSKPacketSent 5E74  
                 RADIO_SetSpreadingFactor@spreadingFactor 0060  
                                      ??_ConfigureRadioRx 0077  
                                      ??_ConfigureRadioTx 0077  
                                    ??_RADIO_SetBandwidth 0060  
                                     ?_DIO1_ISR_Lora_Init 0001  
                           RADIO_SetIQInverted@iqInverted 0060  
                                        ?_RADIO_WriteMode 0065  
                               LORAWAN_RxDone@computedMic 00EA  
                                       ___lmul@multiplier 009A  
                                             _INTCON2bits 000FF1  
                                             _INTCON3bits 000FF0  
                                          ?_SwTimerCreate 0001  
                                               copy_data0 6A96  
                                               copy_data1 6AB6  
                                               copy_data2 6AD6  
                                     _EncKeySchedule$2132 0064  
                                               copy_data3 6AF6  
                                   ?_INTERRUPT_Initialize 0001  
                                 ?_INTERRUPT_GetDioStatus 0001  
                                    ?_UpdateReceiveDelays 0001  
                             __end_of_RADIO_SetIQInverted 9540  
                                          ?_TMR1_CallBack 0001  
                                    __end_of_TMR_ISR_lora 8596  
                                             _RADIO_Reset 88F8  
                                     ExecuteLinkCheck@ptr 0060  
                          i2SwTimersInterrupt@timeElapsed 0029  
                                      _RADIO_RegisterRead 900E  
                                __size_of_ValidateTxPower 002A  
                                 ??_StopAllSoftwareTimers 0061  
                                          _StartReTxTimer 50EC  
                             __end_ofi2_SwTimersInterrupt 63E8  
                               _LORAWAN_GetMaxPayloadSize 825A  
                              LORAWAN_RxDone@extractedMic 00E2  
                                             AESCmac@flag 01F1  
                           EncryptFRMPayload@frameCounter 0095  
                                   EUSART1_Read@readValue 0001  
                                      CheckMcastFlags@hdr 0060  
                                             AESCmac@size 00BF  
                                SwTimerSetTimeout@timerId 0075  
                                SwTimerSetTimeout@timeout 006D  
                                   RADIO_WriteMode@opMode 006B  
                                ??_ExecuteRxParamSetupReq 00A8  
                     __size_of_LORAWAN_LinkCheckConfigure 015E  
                                        ___abdiv@quotient 0065  
                 UpdateReceiveWindow2Parameters@frequency 0060  
                   __end_of_EUSART1_SetTxInterruptHandler 94E6  
                  __size_of_EUSART1_SetTxInterruptHandler 000A  
                           _EUSART1_SetTxInterruptHandler 94DC  
                                    RADIO_DIO3@dioMapping 0066  
                                                __Hrparam 0000  
                                     ?_RADIO_RegisterRead 0001  
                            __end_of_SystemBlockingWaitMs 8DAC  
                  ValidateChannelMaskCntl@channelMaskCntl 0061  
                                       i2_TMR1_WriteTimer 92F2  
                                               memcpy@tmp 006A  
                                                __Lrparam 0000  
                                        ??_EncodeShiftRow 0062  
                                    ??_DIO1_ISR_Lora_Init 0062  
                                __size_of_CheckMcastFlags 0082  
                                      __CFG_BOREN$SBORDIS 000000  
                                   TMR1_ReadTimer@readVal 0064  
                              __size_of_ValidateDataRange 0046  
                               _ticksToScheduledInterrupt 0054  
                                       __CFG_P2BMX$PORTD2 000000  
                            ValidateDataRange@dataRateMax 0064  
                            ValidateDataRange@dataRateMin 0065  
                              __size_of_ValidateChannelId 0024  
                                        ?_SPI2_Initialize 0001  
                                      ?i2_TMR1_WriteTimer 0001  
                                        __size_of___abdiv 0066  
                                 ??_OSCILLATOR_Initialize 0060  
                                       ?_ValidateDataRate 0001  
                                        __size_of___aldiv 00CE  
                                        __size_of___almod 00AE  
                                        __size_of___awdiv 0086  
                                      _ComputeSessionKeys 798E  
                                   __size_of_SwTimerStart 0096  
                                        __size_of___awmod 0072  
                                        __size_of___lldiv 0084  
                                        __size_of___llmod 0068  
                             __size_of_EUSART1_Initialize 0080  
                                        __size_of___lwmod 0044  
                                         ?_AssemblePacket 00C7  
                                    AssemblePacket@buffer 00C8  
                                        SwTimersExecute@i 00DE  
                                      ??_ValidateDataRate 0060  
                                _TMR1_SetInterruptHandler 94B4  
                                  _IOCB4_InterruptHandler 03ED  
                                             _radioBuffer 0580  
                                     ??i2_TMR1_WriteTimer 0003  
         __end_of_ResetParametersForConfirmedTransmission 9400  
        __size_of_ResetParametersForConfirmedTransmission 0012  
                ?_ResetParametersForConfirmedTransmission 0001  
               ??_ResetParametersForConfirmedTransmission 0060  
                 _ResetParametersForConfirmedTransmission 93EE  
                                   _TMR1_InterruptHandler 03E5  
                               ??_EUSART1_SetErrorHandler 0062  
                                        ??_GenerateSubkey 0097  
                     __end_of_EUSART1_DefaultErrorHandler 95CE  
                             _EUSART1_DefaultErrorHandler 95C8  
                                        _CountfOptsLength 6F98  
                                              _HALSPISend 948E  
                                     ?_ComputeSessionKeys 0091  
                                          _rxWindowOffset FF6F  
                      RADIO_UnhandledInterrupt@modulation 0064  
                              __end_of_MacExecuteCommands 35E0  
                                    ??_RADIO_RegisterRead 0062  
                                    RADIO_DIO4@dioMapping 0067  
                        __end_of_RADIO_UnhandledInterrupt 8CEA  
                                           _UpdateTxPower 950E  
                                                _dataxstr 0540  
                                    RADIO_Transmit@buffer 00B1  
                         __end_of_RADIO_FHSSChangeChannel 8B58  
                                         _allocatedTimers 0154  
                          ?_IOCB4_DefaultInterruptHandler 0001  
                          __end_of_INTERRUPT_GetDioStatus 93C8  
                                       ?i2_TMR1_ReadTimer 0001  
                               ??_TMR5_HasOverflowOccured 0060  
                                      _DIO5_ISR_Lora_Init 95EA  
                                                __ptext10 9480  
                                                __ptext11 90F4  
                                                __ptext20 9442  
                                                __ptext12 9422  
                                                __ptext21 9452  
                                                __ptext13 94B4  
                                              _T1GCONbits 000FCC  
                                                __ptext30 94FA  
                                                __ptext22 95D6  
                                                __ptext14 9586  
                                                __ptext31 9504  
                                                __ptext23 8EEE  
                                                __ptext15 95EA  
                                                __ptext40 60C4  
                                                __ptext32 8E0C  
                                                __ptext24 94C8  
                                                __ptext16 95EC  
                                                __ptext41 526E  
                                                __ptext33 9342  
                                                __ptext25 94D2  
                                                __ptext17 95EE  
                                                __ptext50 9116  
                                                __ptext42 6D20  
                                                __ptext34 8E3A  
                                                __ptext26 7B1A  
                                                __ptext18 9432  
                                                __ptext51 8596  
                                                __ptext43 7062  
                                                __ptext35 8B98  
                                                __ptext27 94DC  
                                                __ptext19 94BE  
                                                __ptext60 711A  
                                                __ptext52 878A  
                                                __ptext44 886C  
                                                __ptext36 68B4  
                                                __ptext28 94E6  
                                                __ptext61 25E8  
                                                __ptext53 8E68  
                                                __ptext45 8C14  
                                                __ptext37 2FE4  
                                                __ptext29 94F0  
                                                __ptext70 32EA  
                                                __ptext62 00D4  
                                                __ptext54 8B18  
                                                __ptext46 7C96  
                                                __ptext38 5C08  
                                        ?i2_TMR_SwapTimer 0009  
                                                __ptext71 8FBE  
                                                __ptext63 7D80  
                                                __ptext55 764A  
                                                __ptext47 93DC  
                                                __ptext39 9084  
                                                __ptext80 893E  
                                                __ptext72 8AD6  
                                                __ptext64 92BA  
                                                __ptext56 8CB8  
                                                __ptext48 8F96  
                                                __ptext81 8982  
                                                __ptext73 8FE6  
                                                __ptext65 469E  
                                                __ptext57 5F9E  
                                                __ptext49 8C86  
                                                __ptext90 831A  
                                                __ptext82 596E  
                                                __ptext74 448A  
                                                __ptext66 50EC  
                                                __ptext58 699E  
                                                __ptext91 950E  
                                                __ptext83 8432  
                                                __ptext75 935A  
                                                __ptext67 7B9A  
                                                __ptext59 8004  
                                                __ptext92 9518  
                                                __ptext84 90D0  
                                                __ptext76 938A  
                                                __ptext68 8D1C  
                                                __ptext93 92D6  
                                                __ptext85 8CEA  
                                                __ptext77 3B4C  
                                                __ptext69 95F0  
                                                __ptext94 7DF2  
                                                __ptext86 35E0  
                                                __ptext78 806A  
                                                __ptext95 5546  
                                                __ptext87 8F18  
                                                __ptext79 88B2  
                                                __ptext96 8640  
                                                __ptext88 9372  
                                                __ptext97 9522  
                                                __ptext89 917C  
                                                __ptext98 6DF8  
                                                __ptext99 825A  
                                 ExecuteRxTimingSetup@ptr 0067  
                                  ??_RADIO_SetFSKSyncWord 006D  
                                   ??_UpdateReceiveDelays 0066  
                                   __end_of_LORAWAN_Reset 4A5A  
                                  __end_of_StartReTxTimer 526E  
                                 ??_UpdateCurrentDataRate 0060  
                                 ??_UpdateChannelIdStatus 0061  
                                __size_of_UpdateDataRange 014E  
                                  _SetReceptionNotOkState 7B9A  
                                            _SSP2CON1bits 000F6C  
                                     GenerateSubkey@F7103 03B7  
                                         ___almod@divisor 0064  
                                      ??i2_TMR1_ReadTimer 0003  
                               __size_of_RADIO_WritePower 00F0  
                                 __end_of_HALDIO5PinValue 94B4  
                                         ___almod@counter 0068  
                                        __size_of_strncat 0064  
                                       ?_UpdateDLSettings 0060  
                                  ConfigureRadio@dataRate 0072  
                                       ?_ValidateRxOffset 0001  
                                                _countera 0202  
                              __size_of_ValidateFrequency 0066  
                        __size_of_PrepareJoinRequestFrame 0190  
                                           CheckFlags@hdr 0060  
                                             _fourthdigit 0122  
                                  ??_RADIO_WriteFrequency 0071  
                                   __size_of_UpdateCfList 01EE  
                                     ?_DIO5_ISR_Lora_Init 0001  
                           __size_of_RADIO_SetOutputPower 000A  
                                           __size_of_main 034E  
                                           __size_of_rand 005C  
                                              _T5GCONbits 000F4D  
                                       _RADIO_ReceiveStop 919C  
                                      ??_UpdateDLSettings 0061  
                                    _LORAWAN_PlatformInit 90F4  
                                         _FskSyncWordBuff FFFC  
                                      ??_ValidateRxOffset 0060  
                               __end_ofi2_TMR1_WriteTimer 930E  
               IncludeMacCommandsResponse@bIncludeInFopts 0064  
                                    ??_ComputeSessionKeys 0093  
                                           _timerOverflow 0053  
                                            _SwTimerStart 75B4  
                              __size_of_SwTimersInterrupt 0106  
                                      ?_RADIO_ReceiveStop 0001  
                              ??_RADIO_SetSpreadingFactor 0060  
                                    RADIO_DIO5@dioMapping 0066  
                                   RADIO_TxDone@timeOnAir 00E7  
                          ValidateChannelMask@channelMask 0060  
                             __size_of_DIO0_ISR_Lora_Init 0010  
                              __size_of_EncryptFRMPayload 018C  
                                         GenerateSubkey@i 00B8  
                                         GenerateSubkey@l 00A8  
          EUSART1_SetOverrunErrorHandler@interruptHandler 0060  
                                 PrepareSessionKeys@index 0071  
                                __end_of_TMR_GetDeltaTime 4DD0  
                                      SwTimerStop@timerId 0060  
                                                _swTimers 0300  
                                        ??_TMR1_ReadTimer 0062  
        LORAWAN_SetNetworkSessionKey@networkSessionKeyNew 006B  
                                    RADIO_RxDone@irqFlags 00F3  
                                                _testtest 03C7  
                             __end_of_ValidateChannelMask 8378  
                                           UpdateCfList@i 00AE  
                      __end_of_INTERRUPT_InterruptManager 00CC  
                              _INTERRUPT_InterruptManager 0008  
                                     ??_RADIO_ReceiveStop 006C  
                             PrepareSessionKeys@networkId 006F  
                                       _RADIO_ReleaseData 95AA  
                                       ??_TMR1_WriteTimer 0062  
                             _EUSART1_FramingErrorHandler 03EB  
                                              _RADIO_DIO0 764A  
                                              _RADIO_DIO1 878A  
                                     _EUSART1_Receive_ISR 3DBC  
                                              _RADIO_DIO2 8596  
                                              _RADIO_DIO3 9116  
                                              _RADIO_DIO4 8C86  
                                              _RADIO_DIO5 8F96  
                                            _SSP2STATbits 000F6D  
                                    ??_DIO5_ISR_Lora_Init 0060  
                    __end_of_INT1_DefaultInterruptHandler 95FC  
                   __size_of_INT1_DefaultInterruptHandler 0002  
                            _INT1_DefaultInterruptHandler 95FA  
                       __size_of_RADIO_WriteConfiguration 0500  
                                  __end_of_rxWindowOffset FF77  
                             i2TMR1_ReadTimer@readValHigh 0007  
                                       ??_TMR5_Initialize 0060  
                              __size_of_DutyCycleCallback 0306  
                                 EncryptFRMPayload@buffer 0091  
                                      ?_RADIO_ReleaseData 0001  
                               ?_RADIO_WriteConfiguration 00A6  
                                      __end_of_modulation FF6F  
                                              _RADIO_Init 4A5A  
                         ExecuteRxParamSetupReq@frequency 00AA  
                                __size_of_UpdateFrequency 0044  
                                ?_ValidateChannelMaskCntl 0001  
                                           __roundCounter 0153  
                                              _INTCONbits 000FF2  
                                 ConfigureRadioTx@txPower 0078  
                                             _seconddigit 011E  
                                __end_of_HALSPICSDeassert 95DE  
                                __size_of_UpdateDutyCycle 0044  
                                          ?_UpdateTxPower 0001  
                                                memcpy@d1 0060  
                                                memcpy@s1 0062  
                                          _EncKeySchedule 38A8  
                      __size_of_SetCallbackSoftwareTimers 00DE  
                                 __size_of_RxJoinResponse 0002  
                                         ??_SwTimerCreate 0060  
                                     ExecuteDutyCycle@ptr 0060  
                                            _UpdateCfList 469E  
                                     ??_RADIO_ReleaseData 0060  
                                  ??_INTERRUPT_Initialize 0060  
                                                memset@p1 0060  
                                         ??_TMR1_CallBack 0034  
                                    __size_of_SwTimerStop 0028  
                                        _RADIO_ReadRandom 7474  
                                      _EXT_INT_Initialize 8EEE  
                                         ?_StartReTxTimer 0001  
                                   _TMR_OverrideRemaining 7518  
                                                intlevel2 0000  
                          RADIO_ReceiveStart@rxWindowSize 00B1  
                               __end_of_RADIO_ReceiveStop 91BC  
                                         _SwTimersExecute 68B4  
                     SwTimerSetCallback@callbackParameter 0062  
                                    ?_EUSART1_Receive_ISR 0001  
                                             FillSubKey@i 0067  
                           RADIO_WriteFrequency@frequency 006D  
                                        ___lwmod@dividend 00A8  
                                   ?_LORAWAN_PlatformInit 0001  
                                        ___lldiv@dividend 0060  
                                __end_of_ExecuteDevStatus 952C  
                                 ?_PIN_MANAGER_Initialize 0001  
                                      _DefaultChannels433 FFA8  
                                      _DefaultChannels868 FFD2  
                                     ?_EXT_INT_Initialize 0001  
                                            ___abdiv@sign 0064  
                  __end_of_EUSART1_SetOverrunErrorHandler 94FA  
                 __size_of_EUSART1_SetOverrunErrorHandler 000A  
                          _EUSART1_SetOverrunErrorHandler 94F0  
                                UpdateDutyCycle@channelId 0062  
                                              _RCSTA1bits 000FAB  
                                  GenerateSubkey@const_Rb 0098  
                         __size_of_ExecuteRxParamSetupReq 0214  
                                               strncat@cp 0007  
                                               strncat@to 0001  
                            __end_of_EUSART1_Transmit_ISR 8E0C  
                               UpdateJoinInProgress@state 0060  
                                       ??_ValidateTxPower 0060  
                                     _LORAWAN_TxDone$2660 00C9  
                                     _LORAWAN_TxDone$2661 00CD  
                                     _LORAWAN_TxDone$5627 00D6  
                      __end_of_LORAWAN_LinkCheckConfigure 596E  
                               __end_of_RADIO_ReleaseData 95B0  
                              _LORAWAN_LinkCheckConfigure 5810  
                                      __end_of_txPower433 FFA2  
                                __size_of_EnableChannels1 006C  
                                      __end_of_txPower868 FFA8  
                                   _HALResetPinMakeOutput 95E2  
                                ??_HALResetPinOutputValue 0060  
                                  __size_of_INT1_CallBack 0020  
                               RADIO_WriteConfiguration@i 00AB  
                               ExecuteRxTimingSetup@delay 0069  
                                        AESEncodeLoRa@key 007F  
                               __size_of_SetJoinFailState 0030  
                        LORAWAN_LinkCheckConfigure@period 00A6  
                                        ??_ConfigureRadio 0072  
          EUSART1_SetFramingErrorHandler@interruptHandler 0060  
                          ?_EUSART1_SetTxInterruptHandler 0060  
                                      _SwTimerSetCallback 8A0A  
             __end_of_UpdateRetransmissionAckTimeoutState 7DF2  
            __size_of_UpdateRetransmissionAckTimeoutState 0072  
                    ?_UpdateRetransmissionAckTimeoutState 0001  
                   ??_UpdateRetransmissionAckTimeoutState 009A  
                     _UpdateRetransmissionAckTimeoutState 7D80  
                                       RADIO_ReadRandom@i 0071  
                            SearchAvailableChannel@result 00B7  
                                   RADIO_WritePower@paDac 0065  
                                  __size_of_INT2_CallBack 0020  
                             __size_of_DIO4_ISR_Lora_Init 0002  
                                          _AESEncode$2127 0072  
                                          _AESEncode$2128 0074  
                                          _AESEncode$2129 0076  
                                  __size_of_EUSART1_Write 003E  
                                      _eusart1RxLastError 014E  
                                   __end_of_DIO0_ISR_Lora 95C2  
                                __end_of_SwTimerIsRunning 8F6C  
                                       ??_CheckMcastFlags 0062  
                                __end_of_ExecuteLinkCheck 8D1C  
                                   RADIO_WritePower@power 0066  
                                        _RADIO_TxDone$532 00EB  
                                ?_CreateAllSoftwareTimers 0001  
                        RADIO_WriteMode@currentModulation 0067  
                                    ??_EXT_INT_Initialize 0062  
                            RADIO_SetFSKSyncWord@syncWord 006B  
                                            _rxWindowSize FF7F  
                                  __end_of_EncKeySchedule 3B4C  
                           ?_INT1_DefaultInterruptHandler 0001  
                                   __end_of_DIO1_ISR_Lora 95BC  
                                     ?_SwTimerSetCallback 0060  
                                __end_of_SwTimerReadValue 8B98  
                                        ___lldiv@quotient 0068  
                                             ?_HALSPISend 0001  
                                __end_of_ExecuteDutyCycle 8694  
                                         ___lwmod@divisor 00AA  
                  __end_of_UpdateReceiveWindow2Parameters 93A0  
                 __size_of_UpdateReceiveWindow2Parameters 0016  
                          _UpdateReceiveWindow2Parameters 938A  
                                 UpdateTxPower@txPowerNew 0060  
                                         ___lwmod@counter 00AC  
                         _LORAWAN_LinkCheckConfigure$1514 00AC  
                        __end_of_INT1_SetInterruptHandler 94DC  
                            FindSmallestDataRate@dataRate 0063  
                           LORAWAN_Join@activationTypeNew 00DD  
                                   __size_of_TMR_ISR_lora 0058  
                                            ___aldiv@sign 0073  
                              ??_LORAWAN_SetDeviceAddress 0064  
                                       __CFG_T3CMX$PORTC0 000000  
                                   __end_of_DIO2_ISR_Lora 95B6  
                                    _SystemBlockingWaitMs 8D7C  
                                   FindSmallestDataRate@i 0062  
                      ComputeSessionKeys@joinAcceptBuffer 0091  
                                 __size_of_EnableChannels 001C  
                            __end_of_UpdateJoinInProgress 9328  
                            __end_of_ExecuteRxTimingSetup 8FE6  
                                 __size_of_HALSPICSAssert 0004  
                                 __end_of_FskSyncWordBuff FFFF  
                __end_of_RADIO_WriteFSKFrequencyDeviation 7F34  
               __size_of_RADIO_WriteFSKFrequencyDeviation 006A  
                      ??_RADIO_WriteFSKFrequencyDeviation 0071  
                       ?_RADIO_WriteFSKFrequencyDeviation 006D  
                        _RADIO_WriteFSKFrequencyDeviation 7ECA  
                __end_of_LORAWAN_SetApplicationSessionKey 8E68  
               __size_of_LORAWAN_SetApplicationSessionKey 002E  
                      ??_LORAWAN_SetApplicationSessionKey 006D  
                       ?_LORAWAN_SetApplicationSessionKey 006B  
                        _LORAWAN_SetApplicationSessionKey 8E3A  
                                        ExtractMic@buffer 006B  
                                 ??_RADIO_FSKPayloadReady 00F3  
                                UpdateDataRange@channelId 0062  
                                _RADIO_UnhandledInterrupt 8CB8  
                                   ??_EUSART1_Receive_ISR 0009  
                                        ?_HALDIO5PinValue 0001  
                          __end_of_PIN_MANAGER_Initialize 8640  
                                       ?_LORAWAN_Mainloop 0001  
                             __end_of_RADIO_RegisterWrite 91DC  
                                            ___almod@sign 0069  
                                 __size_of_ExecuteLinkAdr 02C8  
                            RADIO_WriteFSKBitRate@bitRate 006D  
                                      i2_TMR_GetDeltaTime 53DA  
                                         RADIO_SetCRC@crc 0060  
                                       __CFG_FOSC$INTIO67 000000  
                                             _testassign2 0124  
                                         _PIN_MANAGER_IOC 957C  
                                     RADIO_WritePower@ocp 0064  
                                      ??_LORAWAN_Mainloop 00F9  
                              __size_ofi2_TMR1_WriteTimer 001C  
                                 ??_EUSART1_RxDataHandler 0001  
                                    ??_SwTimerSetCallback 0063  
                                       ??_UpdateDataRange 0061  
                                 ?_UpdateMinMaxChDataRate 0001  
                                         _TMR1_Initialize 8EC2  
                        RADIO_WriteConfiguration@regValue 00B0  
                                 i2TMR1_ReadTimer@readVal 0005  
                                      _RadioConfiguration 0157  
                                           ExtractMic@mic 0073  
                                       _LORAWAN_RxTimeout 25E8  
                             __end_of_RADIO_SetModulation 955E  
                           __size_of_HALResetPinMakeInput 0004  
                             __size_of_RADIO_RxFSKTimeout 003C  
                                        ??_LORAWAN_RxDone 00DA  
                                     ?i2_TMR_GetDeltaTime 0009  
